
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017180  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08017420  08017420  00027420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017854  08017854  00027854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801785c  0801785c  0002785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017860  08017860  00027860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017864  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005950  24000120  0801796c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a70  0801796c  00035a70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad5  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032398  00000000  00000000  000ae0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c14  00000000  00000000  000e0486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027509a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0c8  00000000  00000000  002750ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017408 	.word	0x08017408

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017408 	.word	0x08017408

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c40 	.word	0x24000c40

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fda8 	bl	801316c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fd9d 	bl	801316c <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fd92 	bl	801316c <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fd87 	bl	801316c <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fb21 	bl	8016ca8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c5c 	.word	0x24000c5c
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	0801748c 	.word	0x0801748c

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fddf 	bl	8010258 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8443 	bhi.w	8000f2e <HAL_UART_RxCpltCallback+0x8a6>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cf1 	.word	0x08000cf1
 80006dc:	08000d23 	.word	0x08000d23
 80006e0:	08000d55 	.word	0x08000d55
 80006e4:	08000e61 	.word	0x08000e61
 80006e8:	08000ec3 	.word	0x08000ec3
 80006ec:	08000eeb 	.word	0x08000eeb
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d07 	.word	0x08000d07
 8000720:	08000d39 	.word	0x08000d39
 8000724:	08000e25 	.word	0x08000e25
 8000728:	08000e9b 	.word	0x08000e9b
 800072c:	08000f2f 	.word	0x08000f2f
 8000730:	08000f2f 	.word	0x08000f2f
 8000734:	08000f2f 	.word	0x08000f2f
 8000738:	08000f2f 	.word	0x08000f2f
 800073c:	08000f2f 	.word	0x08000f2f
 8000740:	08000f2f 	.word	0x08000f2f
 8000744:	08000f2f 	.word	0x08000f2f
 8000748:	08000f2f 	.word	0x08000f2f
 800074c:	08000f2f 	.word	0x08000f2f
 8000750:	08000f2f 	.word	0x08000f2f
 8000754:	08000f2f 	.word	0x08000f2f
 8000758:	08000f2f 	.word	0x08000f2f
 800075c:	08000f2f 	.word	0x08000f2f
 8000760:	08000f2f 	.word	0x08000f2f
 8000764:	08000f2f 	.word	0x08000f2f
 8000768:	08000f2f 	.word	0x08000f2f
 800076c:	08000f2f 	.word	0x08000f2f
 8000770:	08000f2f 	.word	0x08000f2f
 8000774:	08000f2f 	.word	0x08000f2f
 8000778:	08000f2f 	.word	0x08000f2f
 800077c:	08000f2f 	.word	0x08000f2f
 8000780:	08000f2f 	.word	0x08000f2f
 8000784:	08000f2f 	.word	0x08000f2f
 8000788:	08000f2f 	.word	0x08000f2f
 800078c:	08000f2f 	.word	0x08000f2f
 8000790:	08000f2f 	.word	0x08000f2f
 8000794:	08000f2f 	.word	0x08000f2f
 8000798:	08000f2f 	.word	0x08000f2f
 800079c:	08000f2f 	.word	0x08000f2f
 80007a0:	08000f2f 	.word	0x08000f2f
 80007a4:	08000f2f 	.word	0x08000f2f
 80007a8:	08000f2f 	.word	0x08000f2f
 80007ac:	08000f2f 	.word	0x08000f2f
 80007b0:	08000f2f 	.word	0x08000f2f
 80007b4:	08000f2f 	.word	0x08000f2f
 80007b8:	08000f2f 	.word	0x08000f2f
 80007bc:	08000f2f 	.word	0x08000f2f
 80007c0:	08000f2f 	.word	0x08000f2f
 80007c4:	08000f2f 	.word	0x08000f2f
 80007c8:	08000f2f 	.word	0x08000f2f
 80007cc:	08000f2f 	.word	0x08000f2f
 80007d0:	08000f2f 	.word	0x08000f2f
 80007d4:	08000f2f 	.word	0x08000f2f
 80007d8:	08000f2f 	.word	0x08000f2f
 80007dc:	08000f2f 	.word	0x08000f2f
 80007e0:	08000f2f 	.word	0x08000f2f
 80007e4:	08000f2f 	.word	0x08000f2f
 80007e8:	08000f2f 	.word	0x08000f2f
 80007ec:	08000f2f 	.word	0x08000f2f
 80007f0:	08000f2f 	.word	0x08000f2f
 80007f4:	08000f2f 	.word	0x08000f2f
 80007f8:	08000f2f 	.word	0x08000f2f
 80007fc:	08000f2f 	.word	0x08000f2f
 8000800:	08000f2f 	.word	0x08000f2f
 8000804:	08000f2f 	.word	0x08000f2f
 8000808:	08000f2f 	.word	0x08000f2f
 800080c:	08000f2f 	.word	0x08000f2f
 8000810:	08000f2f 	.word	0x08000f2f
 8000814:	08000f2f 	.word	0x08000f2f
 8000818:	08000f2f 	.word	0x08000f2f
 800081c:	08000f2f 	.word	0x08000f2f
 8000820:	08000f2f 	.word	0x08000f2f
 8000824:	08000f2f 	.word	0x08000f2f
 8000828:	08000f2f 	.word	0x08000f2f
 800082c:	08000f2f 	.word	0x08000f2f
 8000830:	08000f2f 	.word	0x08000f2f
 8000834:	08000f2f 	.word	0x08000f2f
 8000838:	08000f2f 	.word	0x08000f2f
 800083c:	08000f2f 	.word	0x08000f2f
 8000840:	08000f2f 	.word	0x08000f2f
 8000844:	08000f2f 	.word	0x08000f2f
 8000848:	08000f2f 	.word	0x08000f2f
 800084c:	08000f2f 	.word	0x08000f2f
 8000850:	08000f2f 	.word	0x08000f2f
 8000854:	08000f2f 	.word	0x08000f2f
 8000858:	08000f2f 	.word	0x08000f2f
 800085c:	08000f2f 	.word	0x08000f2f
 8000860:	08000f2f 	.word	0x08000f2f
 8000864:	08000f2f 	.word	0x08000f2f
 8000868:	08000f2f 	.word	0x08000f2f
 800086c:	08000f2f 	.word	0x08000f2f
 8000870:	08000f2f 	.word	0x08000f2f
 8000874:	08000f2f 	.word	0x08000f2f
 8000878:	08000f2f 	.word	0x08000f2f
 800087c:	08000f2f 	.word	0x08000f2f
 8000880:	08000f2f 	.word	0x08000f2f
 8000884:	08000f2f 	.word	0x08000f2f
 8000888:	08000f2f 	.word	0x08000f2f
 800088c:	08000f2f 	.word	0x08000f2f
 8000890:	08000f2f 	.word	0x08000f2f
 8000894:	08000f2f 	.word	0x08000f2f
 8000898:	08000f2f 	.word	0x08000f2f
 800089c:	08000f2f 	.word	0x08000f2f
 80008a0:	08000f2f 	.word	0x08000f2f
 80008a4:	08000f2f 	.word	0x08000f2f
 80008a8:	08000f2f 	.word	0x08000f2f
 80008ac:	08000f2f 	.word	0x08000f2f
 80008b0:	08000f2f 	.word	0x08000f2f
 80008b4:	08000f2f 	.word	0x08000f2f
 80008b8:	08000f2f 	.word	0x08000f2f
 80008bc:	08000f2f 	.word	0x08000f2f
 80008c0:	08000f2f 	.word	0x08000f2f
 80008c4:	08000f2f 	.word	0x08000f2f
 80008c8:	08000f2f 	.word	0x08000f2f
 80008cc:	08000f2f 	.word	0x08000f2f
 80008d0:	08000f2f 	.word	0x08000f2f
 80008d4:	08000f2f 	.word	0x08000f2f
 80008d8:	08000f2f 	.word	0x08000f2f
 80008dc:	08000f2f 	.word	0x08000f2f
 80008e0:	08000f2f 	.word	0x08000f2f
 80008e4:	08000f2f 	.word	0x08000f2f
 80008e8:	08000f2f 	.word	0x08000f2f
 80008ec:	08000f2f 	.word	0x08000f2f
 80008f0:	08000f2f 	.word	0x08000f2f
 80008f4:	08000f2f 	.word	0x08000f2f
 80008f8:	08000f2f 	.word	0x08000f2f
 80008fc:	08000f2f 	.word	0x08000f2f
 8000900:	08000f2f 	.word	0x08000f2f
 8000904:	08000f2f 	.word	0x08000f2f
 8000908:	08000f2f 	.word	0x08000f2f
 800090c:	08000f2f 	.word	0x08000f2f
 8000910:	08000f2f 	.word	0x08000f2f
 8000914:	08000f2f 	.word	0x08000f2f
 8000918:	08000f2f 	.word	0x08000f2f
 800091c:	08000f2f 	.word	0x08000f2f
 8000920:	08000f2f 	.word	0x08000f2f
 8000924:	08000f2f 	.word	0x08000f2f
 8000928:	08000f2f 	.word	0x08000f2f
 800092c:	08000f2f 	.word	0x08000f2f
 8000930:	08000f2f 	.word	0x08000f2f
 8000934:	08000f2f 	.word	0x08000f2f
 8000938:	08000f2f 	.word	0x08000f2f
 800093c:	08000f2f 	.word	0x08000f2f
 8000940:	08000f2f 	.word	0x08000f2f
 8000944:	08000f2f 	.word	0x08000f2f
 8000948:	08000f2f 	.word	0x08000f2f
 800094c:	08000f2f 	.word	0x08000f2f
 8000950:	08000f2f 	.word	0x08000f2f
 8000954:	08000f2f 	.word	0x08000f2f
 8000958:	08000f2f 	.word	0x08000f2f
 800095c:	08000f2f 	.word	0x08000f2f
 8000960:	08000f2f 	.word	0x08000f2f
 8000964:	08000f2f 	.word	0x08000f2f
 8000968:	08000f2f 	.word	0x08000f2f
 800096c:	08000f23 	.word	0x08000f23
 8000970:	08000f2f 	.word	0x08000f2f
 8000974:	08000f2f 	.word	0x08000f2f
 8000978:	08000f2f 	.word	0x08000f2f
 800097c:	08000f2f 	.word	0x08000f2f
 8000980:	08000f2f 	.word	0x08000f2f
 8000984:	08000f2f 	.word	0x08000f2f
 8000988:	08000f2f 	.word	0x08000f2f
 800098c:	08000f2f 	.word	0x08000f2f
 8000990:	08000f2f 	.word	0x08000f2f
 8000994:	08000f2f 	.word	0x08000f2f
 8000998:	08000f2f 	.word	0x08000f2f
 800099c:	08000f2f 	.word	0x08000f2f
 80009a0:	08000f2f 	.word	0x08000f2f
 80009a4:	08000f2f 	.word	0x08000f2f
 80009a8:	08000f2f 	.word	0x08000f2f
 80009ac:	08000f29 	.word	0x08000f29
 80009b0:	08000f2f 	.word	0x08000f2f
 80009b4:	08000f2f 	.word	0x08000f2f
 80009b8:	08000f2f 	.word	0x08000f2f
 80009bc:	08000f2f 	.word	0x08000f2f
 80009c0:	08000f2f 	.word	0x08000f2f
 80009c4:	08000f2f 	.word	0x08000f2f
 80009c8:	08000f2f 	.word	0x08000f2f
 80009cc:	08000f2f 	.word	0x08000f2f
 80009d0:	08000f2f 	.word	0x08000f2f
 80009d4:	08000f2f 	.word	0x08000f2f
 80009d8:	08000f2f 	.word	0x08000f2f
 80009dc:	08000f2f 	.word	0x08000f2f
 80009e0:	08000f2f 	.word	0x08000f2f
 80009e4:	08000f2f 	.word	0x08000f2f
 80009e8:	08000f2f 	.word	0x08000f2f
 80009ec:	08000f2f 	.word	0x08000f2f
 80009f0:	08000f11 	.word	0x08000f11
 80009f4:	08000f2f 	.word	0x08000f2f
 80009f8:	08000f2f 	.word	0x08000f2f
 80009fc:	08000f2f 	.word	0x08000f2f
 8000a00:	08000f2f 	.word	0x08000f2f
 8000a04:	08000f2f 	.word	0x08000f2f
 8000a08:	08000f2f 	.word	0x08000f2f
 8000a0c:	08000f2f 	.word	0x08000f2f
 8000a10:	08000f2f 	.word	0x08000f2f
 8000a14:	08000f2f 	.word	0x08000f2f
 8000a18:	08000f2f 	.word	0x08000f2f
 8000a1c:	08000f2f 	.word	0x08000f2f
 8000a20:	08000f2f 	.word	0x08000f2f
 8000a24:	08000f2f 	.word	0x08000f2f
 8000a28:	08000f2f 	.word	0x08000f2f
 8000a2c:	08000f2f 	.word	0x08000f2f
 8000a30:	08000eff 	.word	0x08000eff
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f937 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fb25 	bl	8009090 <HAL_GPIO_WritePin>
		break;
 8000a46:	e27d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f92d 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fb1b 	bl	8009090 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e273      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
 8000a5c:	24000c60 	.word	0x24000c60
 8000a60:	24000638 	.word	0x24000638
 8000a64:	080174a4 	.word	0x080174a4
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	080174ac 	.word	0x080174ac
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000a72:	f016 f919 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bbe      	ldr	r3, [pc, #760]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fb07 	bl	8009090 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbc      	ldr	r3, [pc, #752]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e25c      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48bb      	ldr	r0, [pc, #748]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a8c:	f016 f90c 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fafa 	bl	8009090 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb4      	ldr	r3, [pc, #720]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 faf4 	bl	8009090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb4      	ldr	r3, [pc, #720]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 faed 	bl	8009090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb1      	ldr	r3, [pc, #708]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fae6 	bl	8009090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bad      	ldr	r3, [pc, #692]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fadf 	bl	8009090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4baa      	ldr	r3, [pc, #680]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fad9 	bl	8009090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4ba7      	ldr	r3, [pc, #668]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fad3 	bl	8009090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba4      	ldr	r3, [pc, #656]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 facc 	bl	8009090 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4b9f      	ldr	r3, [pc, #636]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4b9d      	ldr	r3, [pc, #628]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9c      	ldr	r3, [pc, #624]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e209      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b32:	f016 f8b9 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 faa6 	bl	8009090 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e1fb      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4895      	ldr	r0, [pc, #596]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b4e:	f016 f8ab 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8a      	ldr	r3, [pc, #552]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fa98 	bl	8009090 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1ed      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	488f      	ldr	r0, [pc, #572]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b6a:	f016 f89d 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fa8b 	bl	8009090 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1e0      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488a      	ldr	r0, [pc, #552]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b84:	f016 f890 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fa7e 	bl	8009090 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1d3      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4884      	ldr	r0, [pc, #528]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b9e:	f016 f883 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fa71 	bl	8009090 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1c6      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	487f      	ldr	r0, [pc, #508]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000bb8:	f016 f876 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fa64 	bl	8009090 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1b9      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	4879      	ldr	r0, [pc, #484]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000bd2:	f016 f869 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fa56 	bl	8009090 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1ab      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4873      	ldr	r0, [pc, #460]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000bee:	f016 f85b 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fa48 	bl	8009090 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e19d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	486d      	ldr	r0, [pc, #436]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c0a:	f016 f84d 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fa3a 	bl	8009090 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e18f      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	4867      	ldr	r0, [pc, #412]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c26:	f016 f83f 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fa2c 	bl	8009090 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e181      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c42:	f016 f831 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fa1e 	bl	8009090 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e173      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485b      	ldr	r0, [pc, #364]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c5e:	f016 f823 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fa10 	bl	8009090 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e165      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4855      	ldr	r0, [pc, #340]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c7a:	f016 f815 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fa03 	bl	8009090 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e158      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c94:	f016 f808 	bl	8016ca8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 f9f6 	bl	8009090 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e14b      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484a      	ldr	r0, [pc, #296]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cae:	f015 fffb 	bl	8016ca8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4848      	ldr	r0, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	f004 fe4b 	bl	8005958 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e13f      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 ffef 	bl	8016ca8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cce:	f004 ff03 	bl	8005ad8 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e137      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cd6:	f015 ffe7 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4843      	ldr	r0, [pc, #268]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cde:	f00d fddb 	bl	800e898 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		break;
 8000cee:	e129      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cf2:	f015 ffd9 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	483c      	ldr	r0, [pc, #240]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cfa:	f00d ff27 	bl	800eb4c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e11e      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d08:	f015 ffce 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d10:	f00d fdc2 	bl	800e898 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
		break;
 8000d20:	e110      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d22:	483a      	ldr	r0, [pc, #232]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d24:	f015 ffc0 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d2c:	f00d ff0e 	bl	800eb4c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e105      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d38:	4835      	ldr	r0, [pc, #212]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d3a:	f015 ffb5 	bl	8016ca8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d42:	f00d fda9 	bl	800e898 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e0f7      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d54:	4832      	ldr	r0, [pc, #200]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d56:	f015 ffa7 	bl	8016ca8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d5e:	f00d fef5 	bl	800eb4c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		break;
 8000d68:	e0ec      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
 8000d6a:	bf00      	nop
 8000d6c:	080174b8 	.word	0x080174b8
 8000d70:	58020400 	.word	0x58020400
 8000d74:	24000c1c 	.word	0x24000c1c
 8000d78:	080174c4 	.word	0x080174c4
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	24000c1d 	.word	0x24000c1d
 8000d84:	24000c1e 	.word	0x24000c1e
 8000d88:	24000c1f 	.word	0x24000c1f
 8000d8c:	24000c20 	.word	0x24000c20
 8000d90:	24000c21 	.word	0x24000c21
 8000d94:	24000c22 	.word	0x24000c22
 8000d98:	24000c23 	.word	0x24000c23
 8000d9c:	24000c24 	.word	0x24000c24
 8000da0:	080174d0 	.word	0x080174d0
 8000da4:	080174dc 	.word	0x080174dc
 8000da8:	080174ec 	.word	0x080174ec
 8000dac:	080174f8 	.word	0x080174f8
 8000db0:	08017504 	.word	0x08017504
 8000db4:	08017510 	.word	0x08017510
 8000db8:	08017520 	.word	0x08017520
 8000dbc:	0801752c 	.word	0x0801752c
 8000dc0:	08017538 	.word	0x08017538
 8000dc4:	08017544 	.word	0x08017544
 8000dc8:	08017550 	.word	0x08017550
 8000dcc:	08017560 	.word	0x08017560
 8000dd0:	08017570 	.word	0x08017570
 8000dd4:	0801757c 	.word	0x0801757c
 8000dd8:	0801758c 	.word	0x0801758c
 8000ddc:	24000010 	.word	0x24000010
 8000de0:	240002f4 	.word	0x240002f4
 8000de4:	0801759c 	.word	0x0801759c
 8000de8:	080175ac 	.word	0x080175ac
 8000dec:	24000554 	.word	0x24000554
 8000df0:	24000c57 	.word	0x24000c57
 8000df4:	24000c52 	.word	0x24000c52
 8000df8:	080175b4 	.word	0x080175b4
 8000dfc:	080175c0 	.word	0x080175c0
 8000e00:	24000508 	.word	0x24000508
 8000e04:	24000c56 	.word	0x24000c56
 8000e08:	24000c50 	.word	0x24000c50
 8000e0c:	080175c8 	.word	0x080175c8
 8000e10:	080175d0 	.word	0x080175d0
 8000e14:	240005a0 	.word	0x240005a0
 8000e18:	24000c58 	.word	0x24000c58
 8000e1c:	24000c54 	.word	0x24000c54
 8000e20:	080175d8 	.word	0x080175d8
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e24:	4849      	ldr	r0, [pc, #292]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e26:	f015 ff3f 	bl	8016ca8 <puts>
		if (step < 17) {
 8000e2a:	4b49      	ldr	r3, [pc, #292]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	f200 8081 	bhi.w	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
			step += 2;
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e3e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e52:	f004 fee4 	bl	8005c1e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e56:	2100      	movs	r1, #0
 8000e58:	483f      	ldr	r0, [pc, #252]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e5a:	f004 fd25 	bl	80058a8 <HAL_DAC_Start>
		}
		break;
 8000e5e:	e06a      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e60:	483e      	ldr	r0, [pc, #248]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e62:	f015 ff21 	bl	8016ca8 <puts>
		if (step > 3) {
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d965      	bls.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
			step -= 2;
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b02      	subs	r3, #2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e78:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4833      	ldr	r0, [pc, #204]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e8c:	f004 fec7 	bl	8005c1e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4831      	ldr	r0, [pc, #196]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e94:	f004 fd08 	bl	80058a8 <HAL_DAC_Start>
		}
		break;
 8000e98:	e04f      	b.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e9a:	4831      	ldr	r0, [pc, #196]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e9c:	f015 ff04 	bl	8016ca8 <puts>
		if (cadence <= 50000) {
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d848      	bhi.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
			cadence *= 2;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eb4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ec0:	e03d      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ec4:	f015 fef0 	bl	8016ca8 <puts>
		if (cadence >= 6250) {
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d936      	bls.n	8000f42 <HAL_UART_RxCpltCallback+0x8ba>
			cadence /= 2;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000edc:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee8:	e02b      	b.n	8000f42 <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000eea:	4820      	ldr	r0, [pc, #128]	; (8000f6c <HAL_UART_RxCpltCallback+0x8e4>)
 8000eec:	f015 fedc 	bl	8016ca8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2116      	movs	r1, #22
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f012 f938 	bl	801316c <osEventFlagsSet>
		break;
 8000efc:	e022      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000efe:	481d      	ldr	r0, [pc, #116]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000f00:	f015 fed2 	bl	8016ca8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f013 ff33 	bl	8014d74 <xTaskResumeFromISR>
		break;
 8000f0e:	e019      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000f12:	f015 fec9 	bl	8016ca8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f013 ff2a 	bl	8014d74 <xTaskResumeFromISR>
		break;
 8000f20:	e010      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xAF: {
		sync();
 8000f22:	f001 f999 	bl	8002258 <sync>
		break;
 8000f26:	e00d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f28:	f001 f8e8 	bl	80020fc <enter_flight_mode>
		break;
 8000f2c:	e00a      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	default: {
		printf("Unknown Command\n");
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000f30:	f015 feba 	bl	8016ca8 <puts>
		break;
 8000f34:	e006      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f36:	bf00      	nop
 8000f38:	e004      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f3a:	bf00      	nop
 8000f3c:	e002      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f42:	bf00      	nop
	}
	}
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	080175e0 	.word	0x080175e0
 8000f50:	2400000c 	.word	0x2400000c
 8000f54:	24000010 	.word	0x24000010
 8000f58:	240002f4 	.word	0x240002f4
 8000f5c:	080175e8 	.word	0x080175e8
 8000f60:	080175f4 	.word	0x080175f4
 8000f64:	24000008 	.word	0x24000008
 8000f68:	08017600 	.word	0x08017600
 8000f6c:	0801760c 	.word	0x0801760c
 8000f70:	24000c5c 	.word	0x24000c5c
 8000f74:	0801761c 	.word	0x0801761c
 8000f78:	24000750 	.word	0x24000750
 8000f7c:	08017628 	.word	0x08017628
 8000f80:	240009b0 	.word	0x240009b0
 8000f84:	08017634 	.word	0x08017634

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f002 fef8 	bl	8003d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f8ac 	bl	80010ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f94:	f000 f92a 	bl	80011ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 feee 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9c:	f000 feb4 	bl	8001d08 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fdac 	bl	8001afc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fa4:	f000 fe48 	bl	8001c38 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa8:	f000 fb36 	bl	8001618 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fac:	f000 fc2c 	bl	8001808 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fb0:	f000 fd2e 	bl	8001a10 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fb4:	f000 fc80 	bl	80018b8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fb8:	f000 fa6a 	bl	8001490 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fbc:	f000 f946 	bl	800124c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fc0:	f000 faf8 	bl	80015b4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fc4:	f000 fbc8 	bl	8001758 <MX_SPI1_Init>
  MX_RTC_Init();
 8000fc8:	f000 fb68 	bl	800169c <MX_RTC_Init>
  MX_TIM4_Init();
 8000fcc:	f000 fde6 	bl	8001b9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd0:	f011 ff54 	bl	8012e7c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	2080      	movs	r0, #128	; 0x80
 8000fda:	f012 f9c4 	bl	8013366 <osMessageQueueNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <main+0xf8>)
 8000fe2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <main+0xfc>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4827      	ldr	r0, [pc, #156]	; (8001088 <main+0x100>)
 8000fea:	f011 ff91 	bl	8012f10 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <main+0x104>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <main+0x108>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4826      	ldr	r0, [pc, #152]	; (8001094 <main+0x10c>)
 8000ffa:	f011 ff89 	bl	8012f10 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <main+0x110>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <main+0x114>)
 8001006:	2100      	movs	r1, #0
 8001008:	4825      	ldr	r0, [pc, #148]	; (80010a0 <main+0x118>)
 800100a:	f011 ff81 	bl	8012f10 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <main+0x11c>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <main+0x120>)
 8001016:	2100      	movs	r1, #0
 8001018:	4824      	ldr	r0, [pc, #144]	; (80010ac <main+0x124>)
 800101a:	f011 ff79 	bl	8012f10 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <main+0x128>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <main+0x12c>)
 8001026:	2100      	movs	r1, #0
 8001028:	4823      	ldr	r0, [pc, #140]	; (80010b8 <main+0x130>)
 800102a:	f011 ff71 	bl	8012f10 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <main+0x134>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <main+0x138>)
 8001036:	2100      	movs	r1, #0
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <main+0x13c>)
 800103a:	f011 ff69 	bl	8012f10 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <main+0x140>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <main+0x144>)
 8001046:	2100      	movs	r1, #0
 8001048:	4821      	ldr	r0, [pc, #132]	; (80010d0 <main+0x148>)
 800104a:	f011 ff61 	bl	8012f10 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <main+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <main+0x150>)
 8001056:	2100      	movs	r1, #0
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <main+0x154>)
 800105a:	f011 ff59 	bl	8012f10 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <main+0x158>)
 8001062:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001064:	2000      	movs	r0, #0
 8001066:	f012 f841 	bl	80130ec <osEventFlagsNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <main+0x15c>)
 800106e:	6013      	str	r3, [r2, #0]
	system_setup();
 8001070:	f001 f95a 	bl	8002328 <system_setup>
	printf("Starting kernal...\n");
 8001074:	481c      	ldr	r0, [pc, #112]	; (80010e8 <main+0x160>)
 8001076:	f015 fe17 	bl	8016ca8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800107a:	f011 ff23 	bl	8012ec4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800107e:	e7fe      	b.n	800107e <main+0xf6>
 8001080:	24000c44 	.word	0x24000c44
 8001084:	08017690 	.word	0x08017690
 8001088:	08002add 	.word	0x08002add
 800108c:	24000744 	.word	0x24000744
 8001090:	080176b4 	.word	0x080176b4
 8001094:	08002b21 	.word	0x08002b21
 8001098:	24000748 	.word	0x24000748
 800109c:	080176d8 	.word	0x080176d8
 80010a0:	08002b65 	.word	0x08002b65
 80010a4:	2400074c 	.word	0x2400074c
 80010a8:	080176fc 	.word	0x080176fc
 80010ac:	08002ba9 	.word	0x08002ba9
 80010b0:	24000750 	.word	0x24000750
 80010b4:	08017720 	.word	0x08017720
 80010b8:	08002c51 	.word	0x08002c51
 80010bc:	240009b0 	.word	0x240009b0
 80010c0:	08017744 	.word	0x08017744
 80010c4:	08002cf9 	.word	0x08002cf9
 80010c8:	24000c10 	.word	0x24000c10
 80010cc:	08017768 	.word	0x08017768
 80010d0:	08002db1 	.word	0x08002db1
 80010d4:	24000c14 	.word	0x24000c14
 80010d8:	0801778c 	.word	0x0801778c
 80010dc:	08002e9d 	.word	0x08002e9d
 80010e0:	24000c18 	.word	0x24000c18
 80010e4:	24000c5c 	.word	0x24000c5c
 80010e8:	08017644 	.word	0x08017644

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09c      	sub	sp, #112	; 0x70
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	224c      	movs	r2, #76	; 0x4c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f015 fc7e 	bl	80169fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2220      	movs	r2, #32
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f015 fc78 	bl	80169fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800110c:	2002      	movs	r0, #2
 800110e:	f008 fe21 	bl	8009d54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SystemClock_Config+0xf8>)
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <SystemClock_Config+0xf8>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <SystemClock_Config+0xf8>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <SystemClock_Config+0xfc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <SystemClock_Config+0xfc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <SystemClock_Config+0xfc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001148:	bf00      	nop
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <SystemClock_Config+0xfc>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001156:	d1f8      	bne.n	800114a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001158:	2303      	movs	r3, #3
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001162:	2309      	movs	r3, #9
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2340      	movs	r3, #64	; 0x40
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	2302      	movs	r3, #2
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001172:	2304      	movs	r3, #4
 8001174:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001176:	2320      	movs	r3, #32
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001186:	2308      	movs	r3, #8
 8001188:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800118a:	2300      	movs	r3, #0
 800118c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4618      	mov	r0, r3
 8001198:	f008 fe16 	bl	8009dc8 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011a2:	f001 feab 	bl	8002efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	233f      	movs	r3, #63	; 0x3f
 80011a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f009 fa56 	bl	800a67c <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011d6:	f001 fe91 	bl	8002efc <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3770      	adds	r7, #112	; 0x70
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58000400 	.word	0x58000400
 80011e8:	58024800 	.word	0x58024800

080011ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b0      	sub	sp, #192	; 0xc0
 80011f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f015 fbff 	bl	80169fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800120a:	2304      	movs	r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800120e:	2320      	movs	r3, #32
 8001210:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4618      	mov	r0, r3
 8001234:	f009 fdf0 	bl	800ae18 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800123e:	f001 fe5d 	bl	8002efc <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	37c0      	adds	r7, #192	; 0xc0
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001270:	4b7a      	ldr	r3, [pc, #488]	; (800145c <MX_ADC1_Init+0x210>)
 8001272:	4a7b      	ldr	r2, [pc, #492]	; (8001460 <MX_ADC1_Init+0x214>)
 8001274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001276:	4b79      	ldr	r3, [pc, #484]	; (800145c <MX_ADC1_Init+0x210>)
 8001278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800127c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <MX_ADC1_Init+0x210>)
 8001280:	2208      	movs	r2, #8
 8001282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001284:	4b75      	ldr	r3, [pc, #468]	; (800145c <MX_ADC1_Init+0x210>)
 8001286:	2201      	movs	r2, #1
 8001288:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <MX_ADC1_Init+0x210>)
 800128c:	2204      	movs	r2, #4
 800128e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001290:	4b72      	ldr	r3, [pc, #456]	; (800145c <MX_ADC1_Init+0x210>)
 8001292:	2200      	movs	r2, #0
 8001294:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <MX_ADC1_Init+0x210>)
 8001298:	2201      	movs	r2, #1
 800129a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <MX_ADC1_Init+0x210>)
 800129e:	220b      	movs	r2, #11
 80012a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b6e      	ldr	r3, [pc, #440]	; (800145c <MX_ADC1_Init+0x210>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <MX_ADC1_Init+0x210>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	4b6b      	ldr	r3, [pc, #428]	; (800145c <MX_ADC1_Init+0x210>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012b4:	4b69      	ldr	r3, [pc, #420]	; (800145c <MX_ADC1_Init+0x210>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <MX_ADC1_Init+0x210>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <MX_ADC1_Init+0x210>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_ADC1_Init+0x210>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d0:	4862      	ldr	r0, [pc, #392]	; (800145c <MX_ADC1_Init+0x210>)
 80012d2:	f002 ffe1 	bl	8004298 <HAL_ADC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012dc:	f001 fe0e 	bl	8002efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	485c      	ldr	r0, [pc, #368]	; (800145c <MX_ADC1_Init+0x210>)
 80012ec:	f004 f8fc 	bl	80054e8 <HAL_ADCEx_MultiModeConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012f6:	f001 fe01 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <MX_ADC1_Init+0x218>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001302:	2307      	movs	r3, #7
 8001304:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001306:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800130a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130c:	2304      	movs	r3, #4
 800130e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	484f      	ldr	r0, [pc, #316]	; (800145c <MX_ADC1_Init+0x210>)
 800131e:	f003 fa3f 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001328:	f001 fde8 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800132c:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <MX_ADC1_Init+0x21c>)
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001330:	230c      	movs	r3, #12
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4848      	ldr	r0, [pc, #288]	; (800145c <MX_ADC1_Init+0x210>)
 800133a:	f003 fa31 	bl	80047a0 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001344:	f001 fdda 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <MX_ADC1_Init+0x220>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134c:	2312      	movs	r3, #18
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4841      	ldr	r0, [pc, #260]	; (800145c <MX_ADC1_Init+0x210>)
 8001356:	f003 fa23 	bl	80047a0 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001360:	f001 fdcc 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <MX_ADC1_Init+0x224>)
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001368:	2318      	movs	r3, #24
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	483a      	ldr	r0, [pc, #232]	; (800145c <MX_ADC1_Init+0x210>)
 8001372:	f003 fa15 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800137c:	f001 fdbe 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_ADC1_Init+0x228>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4833      	ldr	r0, [pc, #204]	; (800145c <MX_ADC1_Init+0x210>)
 8001390:	f003 fa06 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800139a:	f001 fdaf 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_ADC1_Init+0x22c>)
 80013a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_ADC1_Init+0x210>)
 80013ae:	f003 f9f7 	bl	80047a0 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013b8:	f001 fda0 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MX_ADC1_Init+0x230>)
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4824      	ldr	r0, [pc, #144]	; (800145c <MX_ADC1_Init+0x210>)
 80013cc:	f003 f9e8 	bl	80047a0 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013d6:	f001 fd91 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC1_Init+0x234>)
 80013dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013de:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	481c      	ldr	r0, [pc, #112]	; (800145c <MX_ADC1_Init+0x210>)
 80013ea:	f003 f9d9 	bl	80047a0 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013f4:	f001 fd82 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_ADC1_Init+0x238>)
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013fc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <MX_ADC1_Init+0x210>)
 8001408:	f003 f9ca 	bl	80047a0 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001412:	f001 fd73 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800141a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_ADC1_Init+0x210>)
 8001426:	f003 f9bb 	bl	80047a0 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001430:	f001 fd64 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_ADC1_Init+0x240>)
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001438:	f240 2306 	movw	r3, #518	; 0x206
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_ADC1_Init+0x210>)
 8001444:	f003 f9ac 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800144e:	f001 fd55 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2400013c 	.word	0x2400013c
 8001460:	40022000 	.word	0x40022000
 8001464:	0c900008 	.word	0x0c900008
 8001468:	10c00010 	.word	0x10c00010
 800146c:	14f00020 	.word	0x14f00020
 8001470:	1d500080 	.word	0x1d500080
 8001474:	21800100 	.word	0x21800100
 8001478:	25b00200 	.word	0x25b00200
 800147c:	2a000400 	.word	0x2a000400
 8001480:	2e300800 	.word	0x2e300800
 8001484:	3ac04000 	.word	0x3ac04000
 8001488:	3ef08000 	.word	0x3ef08000
 800148c:	47520000 	.word	0x47520000

08001490 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014aa:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_ADC3_Init+0x114>)
 80014ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014b0:	2208      	movs	r2, #8
 80014b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014bc:	2204      	movs	r2, #4
 80014be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001502:	f002 fec9 	bl	8004298 <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800150c:	f001 fcf6 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_ADC3_Init+0x118>)
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001514:	2306      	movs	r3, #6
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001518:	2307      	movs	r3, #7
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001522:	2304      	movs	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001534:	f003 f934 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800153e:	f001 fcdd 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_ADC3_Init+0x11c>)
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001546:	230c      	movs	r3, #12
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001550:	f003 f926 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800155a:	f001 fccf 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800155e:	2301      	movs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001562:	2312      	movs	r3, #18
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_ADC3_Init+0x110>)
 800156c:	f003 f918 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001576:	f001 fcc1 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MX_ADC3_Init+0x120>)
 800157c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800157e:	2318      	movs	r3, #24
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001588:	f003 f90a 	bl	80047a0 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001592:	f001 fcb3 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	240001a0 	.word	0x240001a0
 80015a4:	58026000 	.word	0x58026000
 80015a8:	cb840000 	.word	0xcb840000
 80015ac:	cfb80000 	.word	0xcfb80000
 80015b0:	04300002 	.word	0x04300002

080015b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2224      	movs	r2, #36	; 0x24
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f015 fa1b 	bl	80169fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_DAC1_Init+0x60>)
 80015ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015ce:	f004 f949 	bl	8005864 <HAL_DAC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015d8:	f001 fc90 	bl	8002efc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015e0:	230a      	movs	r3, #10
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015f8:	f004 fb64 	bl	8005cc4 <HAL_DAC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001602:	f001 fc7b 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	240002f4 	.word	0x240002f4
 8001614:	40007400 	.word	0x40007400

08001618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_I2C1_Init+0x78>)
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <MX_I2C1_Init+0x7c>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C1_Init+0x78>)
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <MX_I2C1_Init+0x80>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_I2C1_Init+0x78>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_I2C1_Init+0x78>)
 8001630:	2201      	movs	r2, #1
 8001632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_I2C1_Init+0x78>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_I2C1_Init+0x78>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_I2C1_Init+0x78>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C1_Init+0x78>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2C1_Init+0x78>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001652:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_I2C1_Init+0x78>)
 8001654:	f007 fd36 	bl	80090c4 <HAL_I2C_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800165e:	f001 fc4d 	bl	8002efc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_I2C1_Init+0x78>)
 8001666:	f008 fa7d 	bl	8009b64 <HAL_I2CEx_ConfigAnalogFilter>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001670:	f001 fc44 	bl	8002efc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_I2C1_Init+0x78>)
 8001678:	f008 fabf 	bl	8009bfa <HAL_I2CEx_ConfigDigitalFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001682:	f001 fc3b 	bl	8002efc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001686:	2001      	movs	r0, #1
 8001688:	f008 fb04 	bl	8009c94 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	24000380 	.word	0x24000380
 8001694:	40005400 	.word	0x40005400
 8001698:	0020081f 	.word	0x0020081f

0800169c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_RTC_Init+0xb4>)
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <MX_RTC_Init+0xb8>)
 80016b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_RTC_Init+0xb4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_RTC_Init+0xb4>)
 80016c2:	2263      	movs	r2, #99	; 0x63
 80016c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_RTC_Init+0xb4>)
 80016c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_RTC_Init+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_RTC_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_RTC_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_RTC_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_RTC_Init+0xb4>)
 80016e8:	f00c f894 	bl	800d814 <HAL_RTC_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016f2:	f001 fc03 	bl	8002efc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <MX_RTC_Init+0xb4>)
 8001712:	f00c f901 	bl	800d918 <HAL_RTC_SetTime>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800171c:	f001 fbee 	bl	8002efc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001720:	2301      	movs	r3, #1
 8001722:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001724:	2301      	movs	r3, #1
 8001726:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001728:	2301      	movs	r3, #1
 800172a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800172c:	2300      	movs	r3, #0
 800172e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_RTC_Init+0xb4>)
 8001738:	f00c f9e8 	bl	800db0c <HAL_RTC_SetDate>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001742:	f001 fbdb 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	240003d4 	.word	0x240003d4
 8001754:	58004000 	.word	0x58004000

08001758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MX_SPI1_Init+0xa8>)
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <MX_SPI1_Init+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_SPI1_Init+0xa8>)
 800176c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001774:	220f      	movs	r2, #15
 8001776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_SPI1_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800178a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_SPI1_Init+0xa8>)
 800178e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_SPI1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ec:	f00c fb34 	bl	800de58 <HAL_SPI_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017f6:	f001 fb81 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240003f8 	.word	0x240003f8
 8001804:	40013000 	.word	0x40013000

08001808 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800180e:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <MX_SPI2_Init+0xac>)
 8001810:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001814:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001818:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800181c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001820:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001824:	220f      	movs	r2, #15
 8001826:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001836:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800183a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800183e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001842:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001872:	2200      	movs	r2, #0
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800189c:	f00c fadc 	bl	800de58 <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018a6:	f001 fb29 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000480 	.word	0x24000480
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09a      	sub	sp, #104	; 0x68
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	222c      	movs	r2, #44	; 0x2c
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f015 f882 	bl	80169fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <MX_TIM1_Init+0x154>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001900:	2231      	movs	r2, #49	; 0x31
 8001902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_TIM1_Init+0x150>)
 800190c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <MX_TIM1_Init+0x150>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001924:	4838      	ldr	r0, [pc, #224]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001926:	f00c fee8 	bl	800e6fa <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001930:	f001 fae4 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193e:	4619      	mov	r1, r3
 8001940:	4831      	ldr	r0, [pc, #196]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001942:	f00d fc63 	bl	800f20c <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800194c:	f001 fad6 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001950:	482d      	ldr	r0, [pc, #180]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001952:	f00d f9df 	bl	800ed14 <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800195c:	f001 face 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001970:	4619      	mov	r1, r3
 8001972:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001974:	f00e f9a0 	bl	800fcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800197e:	f001 fabd 	bl	8002efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	; 0x60
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019a8:	f00d fb1c 	bl	800efe4 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019b2:	f001 faa3 	bl	8002efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ec:	f00e f9f2 	bl	800fdd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f6:	f001 fa81 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019fc:	f001 fe2e 	bl	800365c <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3768      	adds	r7, #104	; 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000508 	.word	0x24000508
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a4c:	2231      	movs	r2, #49	; 0x31
 8001a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a58:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6a:	4823      	ldr	r0, [pc, #140]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a6c:	f00c fe45 	bl	800e6fa <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a76:	f001 fa41 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	481c      	ldr	r0, [pc, #112]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a88:	f00d fbc0 	bl	800f20c <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a92:	f001 fa33 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a98:	f00d f93c 	bl	800ed14 <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001aa2:	f001 fa2b 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4810      	ldr	r0, [pc, #64]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001ab6:	f00e f8ff 	bl	800fcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ac0:	f001 fa1c 	bl	8002efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001adc:	f00d fa82 	bl	800efe4 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ae6:	f001 fa09 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001aec:	f001 fdb6 	bl	800365c <HAL_TIM_MspPostInit>

}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000554 	.word	0x24000554

08001afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <MX_TIM3_Init+0x9c>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b22:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b30:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b44:	f00c fdd9 	bl	800e6fa <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f001 f9d5 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b60:	f00d fb54 	bl	800f20c <HAL_TIM_ConfigClockSource>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b6a:	f001 f9c7 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b7c:	f00e f89c 	bl	800fcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b86:	f001 f9b9 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	240005a0 	.word	0x240005a0
 8001b98:	40000400 	.word	0x40000400

08001b9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <MX_TIM4_Init+0x98>)
 8001bbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bc2:	2263      	movs	r2, #99	; 0x63
 8001bc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bce:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001be2:	f00c fd8a 	bl	800e6fa <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bec:	f001 f986 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bfe:	f00d fb05 	bl	800f20c <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c08:	f001 f978 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001c1a:	f00e f84d 	bl	800fcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c24:	f001 f96a 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	240005ec 	.word	0x240005ec
 8001c34:	40000800 	.word	0x40000800

08001c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <MX_USART1_UART_Init+0xcc>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c44:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c80:	481f      	ldr	r0, [pc, #124]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c82:	f00e f943 	bl	800ff0c <HAL_UART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c8c:	f001 f936 	bl	8002efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	481b      	ldr	r0, [pc, #108]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c94:	f010 ffe3 	bl	8012c5e <HAL_UARTEx_SetTxFifoThreshold>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c9e:	f001 f92d 	bl	8002efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001ca6:	f011 f818 	bl	8012cda <HAL_UARTEx_SetRxFifoThreshold>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f001 f924 	bl	8002efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cb4:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cb6:	f010 ff99 	bl	8012bec <HAL_UARTEx_DisableFifoMode>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc0:	f001 f91c 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cca:	f011 f806 	bl	8012cda <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cce:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cd0:	f010 ff51 	bl	8012b76 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cd6:	f010 ff1b 	bl	8012b10 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cf8:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000638 	.word	0x24000638
 8001d04:	40011000 	.word	0x40011000

08001d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	200b      	movs	r0, #11
 8001d32:	f003 fd6f 	bl	8005814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d36:	200b      	movs	r0, #11
 8001d38:	f003 fd86 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2105      	movs	r1, #5
 8001d40:	200c      	movs	r0, #12
 8001d42:	f003 fd67 	bl	8005814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d46:	200c      	movs	r0, #12
 8001d48:	f003 fd7e 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2105      	movs	r1, #5
 8001d50:	200d      	movs	r0, #13
 8001d52:	f003 fd5f 	bl	8005814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d56:	200d      	movs	r0, #13
 8001d58:	f003 fd76 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	2010      	movs	r0, #16
 8001d62:	f003 fd57 	bl	8005814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d66:	2010      	movs	r0, #16
 8001d68:	f003 fd6e 	bl	8005848 <HAL_NVIC_EnableIRQ>

}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58024400 	.word	0x58024400

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e0c:	4815      	ldr	r0, [pc, #84]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001e0e:	f007 f93f 	bl	8009090 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2164      	movs	r1, #100	; 0x64
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e18:	f007 f93a 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e1c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001e36:	f006 ff63 	bl	8008d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e52:	f006 ff55 	bl	8008d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020800 	.word	0x58020800
 8001e68:	58020400 	.word	0x58020400

08001e6c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e76:	2300      	movs	r3, #0
 8001e78:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	f107 0208 	add.w	r2, r7, #8
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <poll_i2c_sensor+0x7c>)
 8001e8c:	f007 f9b6 	bl	80091fc <HAL_I2C_Master_Transmit>
 8001e90:	4603      	mov	r3, r0
 8001e92:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e94:	7b7b      	ldrb	r3, [r7, #13]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e9a:	4814      	ldr	r0, [pc, #80]	; (8001eec <poll_i2c_sensor+0x80>)
 8001e9c:	f014 ff04 	bl	8016ca8 <puts>
 8001ea0:	e01c      	b.n	8001edc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	f107 0208 	add.w	r2, r7, #8
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <poll_i2c_sensor+0x7c>)
 8001eb4:	f007 faba 	bl	800942c <HAL_I2C_Master_Receive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ebc:	7b7b      	ldrb	r3, [r7, #13]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <poll_i2c_sensor+0x84>)
 8001ec4:	f014 fef0 	bl	8016ca8 <puts>
 8001ec8:	e008      	b.n	8001edc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001eca:	7a3b      	ldrb	r3, [r7, #8]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed4:	7a7a      	ldrb	r2, [r7, #9]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	10db      	asrs	r3, r3, #3
 8001eda:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	24000380 	.word	0x24000380
 8001eec:	08017658 	.word	0x08017658
 8001ef0:	08017668 	.word	0x08017668

08001ef4 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001efc:	f107 010c 	add.w	r1, r7, #12
 8001f00:	2301      	movs	r3, #1
 8001f02:	2201      	movs	r2, #1
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f06:	f00c f8cb 	bl	800e0a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
 8001f10:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	240003f8 	.word	0x240003f8

08001f3c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f44:	f107 010c 	add.w	r1, r7, #12
 8001f48:	2364      	movs	r3, #100	; 0x64
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f4e:	f00c f8a7 	bl	800e0a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f68:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7bba      	ldrb	r2, [r7, #14]
 8001f6e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000480 	.word	0x24000480

08001f84 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <receive_erpa_adc+0x30>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <receive_erpa_adc+0x30>)
 8001f94:	895b      	ldrh	r3, [r3, #10]
 8001f96:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	89fa      	ldrh	r2, [r7, #14]
 8001f9c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	89ba      	ldrh	r2, [r7, #12]
 8001fa4:	801a      	strh	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	24000ca0 	.word	0x24000ca0

08001fb8 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fc0:	2390      	movs	r3, #144	; 0x90
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff52 	bl	8001e6c <poll_i2c_sensor>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fcc:	2394      	movs	r3, #148	; 0x94
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff4c 	bl	8001e6c <poll_i2c_sensor>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fd8:	2392      	movs	r3, #146	; 0x92
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff46 	bl	8001e6c <poll_i2c_sensor>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fe4:	2396      	movs	r3, #150	; 0x96
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff40 	bl	8001e6c <poll_i2c_sensor>
 8001fec:	4603      	mov	r3, r0
 8001fee:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	89fa      	ldrh	r2, [r7, #14]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	89ba      	ldrh	r2, [r7, #12]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	897a      	ldrh	r2, [r7, #10]
 8002004:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3306      	adds	r3, #6
 800200a:	893a      	ldrh	r2, [r7, #8]
 800200c:	801a      	strh	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <receive_hk_adc1+0x90>)
 8002022:	8a9b      	ldrh	r3, [r3, #20]
 8002024:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <receive_hk_adc1+0x90>)
 8002028:	8a1b      	ldrh	r3, [r3, #16]
 800202a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <receive_hk_adc1+0x90>)
 800202e:	899b      	ldrh	r3, [r3, #12]
 8002030:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <receive_hk_adc1+0x90>)
 8002034:	8a5b      	ldrh	r3, [r3, #18]
 8002036:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <receive_hk_adc1+0x90>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <receive_hk_adc1+0x90>)
 8002040:	88db      	ldrh	r3, [r3, #6]
 8002042:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <receive_hk_adc1+0x90>)
 8002046:	89db      	ldrh	r3, [r3, #14]
 8002048:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <receive_hk_adc1+0x90>)
 800204c:	891b      	ldrh	r3, [r3, #8]
 800204e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <receive_hk_adc1+0x90>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8bfa      	ldrh	r2, [r7, #30]
 800205a:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3302      	adds	r3, #2
 8002060:	8bba      	ldrh	r2, [r7, #28]
 8002062:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	8b7a      	ldrh	r2, [r7, #26]
 800206a:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3306      	adds	r3, #6
 8002070:	8b3a      	ldrh	r2, [r7, #24]
 8002072:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3308      	adds	r3, #8
 8002078:	8afa      	ldrh	r2, [r7, #22]
 800207a:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	330a      	adds	r3, #10
 8002080:	8aba      	ldrh	r2, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	330c      	adds	r3, #12
 8002088:	8a7a      	ldrh	r2, [r7, #18]
 800208a:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	330e      	adds	r3, #14
 8002090:	8a3a      	ldrh	r2, [r7, #16]
 8002092:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3310      	adds	r3, #16
 8002098:	89fa      	ldrh	r2, [r7, #14]
 800209a:	801a      	strh	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	3724      	adds	r7, #36	; 0x24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	24000ca0 	.word	0x24000ca0

080020ac <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020bc:	885b      	ldrh	r3, [r3, #2]
 80020be:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020c8:	88db      	ldrh	r3, [r3, #6]
 80020ca:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	89fa      	ldrh	r2, [r7, #14]
 80020d0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	89ba      	ldrh	r2, [r7, #12]
 80020d8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	897a      	ldrh	r2, [r7, #10]
 80020e0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3306      	adds	r3, #6
 80020e6:	893a      	ldrh	r2, [r7, #8]
 80020e8:	801a      	strh	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	24000cc0 	.word	0x24000cc0

080020fc <enter_flight_mode>:

// *********************************************************************************************************** HELPER FUNCTIONS

void enter_flight_mode() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af02      	add	r7, sp, #8
	vTaskResume(GPIO_on_taskHandle); 											// Auto init
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <enter_flight_mode+0x58>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f012 fdd6 	bl	8014cb8 <vTaskResume>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <enter_flight_mode+0x5c>)
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	2201      	movs	r2, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f006 ffbb 	bl	8009090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <enter_flight_mode+0x60>)
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	2201      	movs	r2, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f006 ffb5 	bl	8009090 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2320      	movs	r3, #32
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <enter_flight_mode+0x64>)
 800212e:	2100      	movs	r1, #0
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <enter_flight_mode+0x68>)
 8002132:	f003 fc11 	bl	8005958 <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002136:	210c      	movs	r1, #12
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <enter_flight_mode+0x6c>)
 800213a:	f00c fbad 	bl	800e898 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 800213e:	2100      	movs	r1, #0
 8002140:	480a      	ldr	r0, [pc, #40]	; (800216c <enter_flight_mode+0x70>)
 8002142:	f00c fba9 	bl	800e898 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 8002146:	2100      	movs	r1, #0
 8002148:	4809      	ldr	r0, [pc, #36]	; (8002170 <enter_flight_mode+0x74>)
 800214a:	f00c fba5 	bl	800e898 <HAL_TIM_OC_Start_IT>
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	24000750 	.word	0x24000750
 8002158:	58020800 	.word	0x58020800
 800215c:	58020400 	.word	0x58020400
 8002160:	24000010 	.word	0x24000010
 8002164:	240002f4 	.word	0x240002f4
 8002168:	24000554 	.word	0x24000554
 800216c:	24000508 	.word	0x24000508
 8002170:	240005a0 	.word	0x240005a0

08002174 <get_current_step>:


uint8_t get_current_step(){
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <get_current_step+0xc0>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002186:	4293      	cmp	r3, r2
 8002188:	d04a      	beq.n	8002220 <get_current_step+0xac>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002190:	da48      	bge.n	8002224 <get_current_step+0xb0>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002198:	4293      	cmp	r3, r2
 800219a:	d03f      	beq.n	800221c <get_current_step+0xa8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021a2:	4293      	cmp	r3, r2
 80021a4:	dc3e      	bgt.n	8002224 <get_current_step+0xb0>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d033      	beq.n	8002218 <get_current_step+0xa4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021b6:	da35      	bge.n	8002224 <get_current_step+0xb0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021be:	4293      	cmp	r3, r2
 80021c0:	d028      	beq.n	8002214 <get_current_step+0xa0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021c8:	4293      	cmp	r3, r2
 80021ca:	dc2b      	bgt.n	8002224 <get_current_step+0xb0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f240 7245 	movw	r2, #1861	; 0x745
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01c      	beq.n	8002210 <get_current_step+0x9c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f240 7245 	movw	r2, #1861	; 0x745
 80021dc:	4293      	cmp	r3, r2
 80021de:	dc21      	bgt.n	8002224 <get_current_step+0xb0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d010      	beq.n	800220c <get_current_step+0x98>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021f0:	4293      	cmp	r3, r2
 80021f2:	dc17      	bgt.n	8002224 <get_current_step+0xb0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <get_current_step+0x90>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002200:	d002      	beq.n	8002208 <get_current_step+0x94>
 8002202:	e00f      	b.n	8002224 <get_current_step+0xb0>
	case 0:
		return 0;
 8002204:	2300      	movs	r3, #0
 8002206:	e00e      	b.n	8002226 <get_current_step+0xb2>
	case 620:
		return 1;
 8002208:	2301      	movs	r3, #1
 800220a:	e00c      	b.n	8002226 <get_current_step+0xb2>
	case 1241:
		return 2;
 800220c:	2302      	movs	r3, #2
 800220e:	e00a      	b.n	8002226 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002210:	2303      	movs	r3, #3
 8002212:	e008      	b.n	8002226 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002214:	2304      	movs	r3, #4
 8002216:	e006      	b.n	8002226 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002218:	2305      	movs	r3, #5
 800221a:	e004      	b.n	8002226 <get_current_step+0xb2>
	case 3723:
		return 6;
 800221c:	2306      	movs	r3, #6
 800221e:	e002      	b.n	8002226 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002220:	2307      	movs	r3, #7
 8002222:	e000      	b.n	8002226 <get_current_step+0xb2>
	default:
		return -1;
 8002224:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007400 	.word	0x40007400

08002238 <enter_stop>:

void enter_stop(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 800223c:	f000 f830 	bl	80022a0 <send_ACK>

	vTaskSuspendAll();
 8002240:	f012 fe70 	bl	8014f24 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002244:	2101      	movs	r1, #1
 8002246:	2001      	movs	r0, #1
 8002248:	f007 fd48 	bl	8009cdc <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 800224c:	f012 fe78 	bl	8014f40 <xTaskResumeAll>
	SystemClock_Config();
 8002250:	f7fe ff4c 	bl	80010ec <SystemClock_Config>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <sync>:
	if (status != HAL_OK) {
		Error_Handler();
	}
}

void sync() {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	// 1. Send acknowledgement (0xFF) (This tells OBC/GUI that we have woken up)
	// 2. Wait to receive RTC generated timestamp from OBC/GUI
	// 3. Calibrate our RTC from received timestamp
	// 4. Send acknowledgement (0xFF) (This tells OBC/GUI that we have calibrated our RTC, and are now in run mode)
	send_ACK();
 800225e:	f000 f81f 	bl	80022a0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002262:	480d      	ldr	r0, [pc, #52]	; (8002298 <sync+0x40>)
 8002264:	f00e f8c4 	bl	80103f0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002268:	2364      	movs	r3, #100	; 0x64
 800226a:	2209      	movs	r2, #9
 800226c:	490b      	ldr	r1, [pc, #44]	; (800229c <sync+0x44>)
 800226e:	480a      	ldr	r0, [pc, #40]	; (8002298 <sync+0x40>)
 8002270:	f00d ff2a 	bl	80100c8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <sync+0x44>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2bff      	cmp	r3, #255	; 0xff
 800227e:	d1f3      	bne.n	8002268 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER);
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002280:	2201      	movs	r2, #1
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <sync+0x44>)
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <sync+0x40>)
 8002286:	f00d ffe7 	bl	8010258 <HAL_UART_Receive_IT>

	send_ACK();
 800228a:	f000 f809 	bl	80022a0 <send_ACK>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	24000638 	.word	0x24000638
 800229c:	24000c60 	.word	0x24000c60

080022a0 <send_ACK>:


void send_ACK() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <send_ACK+0x1c>)
 80022a6:	22ff      	movs	r2, #255	; 0xff
 80022a8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	2201      	movs	r2, #1
 80022ae:	4903      	ldr	r1, [pc, #12]	; (80022bc <send_ACK+0x1c>)
 80022b0:	4803      	ldr	r0, [pc, #12]	; (80022c0 <send_ACK+0x20>)
 80022b2:	f00d fe7b 	bl	800ffac <HAL_UART_Transmit>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	24000cc8 	.word	0x24000cc8
 80022c0:	24000638 	.word	0x24000638

080022c4 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_UART_TxCpltCallback+0x1c>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	24000000 	.word	0x24000000

080022e4 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f014 fb63 	bl	80169c0 <malloc>
 80022fa:	4603      	mov	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	4618      	mov	r0, r3
 8002306:	f014 fb6b 	bl	80169e0 <memcpy>
	packet.size = size;
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	461a      	mov	r2, r3
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	e893 0003 	ldmia.w	r3, {r0, r1}
 800231a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	481d      	ldr	r0, [pc, #116]	; (80023a4 <system_setup+0x7c>)
 8002330:	f00c fab2 	bl	800e898 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002338:	f44f 729c 	mov.w	r2, #312	; 0x138
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800233e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002342:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002346:	4818      	ldr	r0, [pc, #96]	; (80023a8 <system_setup+0x80>)
 8002348:	f003 f86a 	bl	8005420 <HAL_ADCEx_Calibration_Start>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002352:	f000 fdd3 	bl	8002efc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002356:	220b      	movs	r2, #11
 8002358:	4914      	ldr	r1, [pc, #80]	; (80023ac <system_setup+0x84>)
 800235a:	4813      	ldr	r0, [pc, #76]	; (80023a8 <system_setup+0x80>)
 800235c:	f002 f93e 	bl	80045dc <HAL_ADC_Start_DMA>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002366:	f000 fdc9 	bl	8002efc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800236a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800236e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <system_setup+0x88>)
 8002374:	f003 f854 	bl	8005420 <HAL_ADCEx_Calibration_Start>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800237e:	f000 fdbd 	bl	8002efc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002382:	2204      	movs	r2, #4
 8002384:	490b      	ldr	r1, [pc, #44]	; (80023b4 <system_setup+0x8c>)
 8002386:	480a      	ldr	r0, [pc, #40]	; (80023b0 <system_setup+0x88>)
 8002388:	f002 f928 	bl	80045dc <HAL_ADC_Start_DMA>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002392:	f000 fdb3 	bl	8002efc <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002396:	2201      	movs	r2, #1
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <system_setup+0x90>)
 800239a:	4808      	ldr	r0, [pc, #32]	; (80023bc <system_setup+0x94>)
 800239c:	f00d ff5c 	bl	8010258 <HAL_UART_Receive_IT>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	240005ec 	.word	0x240005ec
 80023a8:	2400013c 	.word	0x2400013c
 80023ac:	24000ca0 	.word	0x24000ca0
 80023b0:	240001a0 	.word	0x240001a0
 80023b4:	24000cc0 	.word	0x24000cc0
 80023b8:	24000c60 	.word	0x24000c60
 80023bc:	24000638 	.word	0x24000638

080023c0 <get_uptime>:

void get_uptime(uint8_t *buffer) {
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <get_uptime+0x88>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <get_uptime+0x8c>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <get_uptime+0x88>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d005      	beq.n	80023ee <get_uptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = uptime_millis;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <get_uptime+0x88>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <get_uptime+0x8c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023f4:	fb03 f202 	mul.w	r2, r3, r2
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <get_uptime+0x8c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <get_uptime+0x90>)
 8002400:	fba1 1303 	umull	r1, r3, r1, r3
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	fbb1 f3f3 	udiv	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0e1b      	lsrs	r3, r3, #24
 8002414:	b2da      	uxtb	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	0c1a      	lsrs	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0a1a      	lsrs	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3302      	adds	r3, #2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3303      	adds	r3, #3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	24000c40 	.word	0x24000c40
 800244c:	e000e010 	.word	0xe000e010
 8002450:	10624dd3 	.word	0x10624dd3

08002454 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2200      	movs	r2, #0
 8002462:	4619      	mov	r1, r3
 8002464:	4821      	ldr	r0, [pc, #132]	; (80024ec <getTimestamp+0x98>)
 8002466:	f00b faf5 	bl	800da54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	481e      	ldr	r0, [pc, #120]	; (80024ec <getTimestamp+0x98>)
 8002474:	f00b fbd2 	bl	800dc1c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2264      	movs	r2, #100	; 0x64
 800247c:	fb03 f202 	mul.w	r2, r3, r2
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <getTimestamp+0x9c>)
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3301      	adds	r3, #1
 8002490:	7b7a      	ldrb	r2, [r7, #13]
 8002492:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3302      	adds	r3, #2
 8002498:	7bba      	ldrb	r2, [r7, #14]
 800249a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3303      	adds	r3, #3
 80024a0:	7c3a      	ldrb	r2, [r7, #16]
 80024a2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	7c7a      	ldrb	r2, [r7, #17]
 80024aa:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3305      	adds	r3, #5
 80024b0:	7cba      	ldrb	r2, [r7, #18]
 80024b2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	0e1a      	lsrs	r2, r3, #24
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3306      	adds	r3, #6
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	0c1a      	lsrs	r2, r3, #16
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3307      	adds	r3, #7
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	0a1a      	lsrs	r2, r3, #8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3308      	adds	r3, #8
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3309      	adds	r3, #9
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	240003d4 	.word	0x240003d4
 80024f0:	000f4240 	.word	0x000f4240

080024f4 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80024fa:	bf00      	nop
 80024fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002500:	4833      	ldr	r0, [pc, #204]	; (80025d0 <sample_pmt+0xdc>)
 8002502:	f006 fdad 	bl	8009060 <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f7      	bne.n	80024fc <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800250c:	200a      	movs	r0, #10
 800250e:	f014 fa57 	bl	80169c0 <malloc>
 8002512:	4603      	mov	r3, r0
 8002514:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002516:	2002      	movs	r0, #2
 8002518:	f014 fa52 	bl	80169c0 <malloc>
 800251c:	4603      	mov	r3, r0
 800251e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002520:	2004      	movs	r0, #4
 8002522:	f014 fa4d 	bl	80169c0 <malloc>
 8002526:	4603      	mov	r3, r0
 8002528:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff ff48 	bl	80023c0 <get_uptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002530:	6938      	ldr	r0, [r7, #16]
 8002532:	f7ff fcdf 	bl	8001ef4 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	22bb      	movs	r2, #187	; 0xbb
 800253a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3301      	adds	r3, #1
 8002540:	22bb      	movs	r2, #187	; 0xbb
 8002542:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <sample_pmt+0xe0>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29a      	uxth	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3302      	adds	r3, #2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <sample_pmt+0xe0>)
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3303      	adds	r3, #3
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3304      	adds	r3, #4
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3305      	adds	r3, #5
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	7852      	ldrb	r2, [r2, #1]
 8002572:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3306      	adds	r3, #6
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3307      	adds	r3, #7
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	7852      	ldrb	r2, [r2, #1]
 8002586:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3308      	adds	r3, #8
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	7892      	ldrb	r2, [r2, #2]
 8002590:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3309      	adds	r3, #9
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	78d2      	ldrb	r2, [r2, #3]
 800259a:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	220a      	movs	r2, #10
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fe9e 	bl	80022e4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <sample_pmt+0xe4>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	1d39      	adds	r1, r7, #4
 80025ae:	2300      	movs	r3, #0
 80025b0:	2200      	movs	r2, #0
 80025b2:	f010 ff4b 	bl	801344c <osMessageQueuePut>
	free(buffer);
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f014 fa0a 	bl	80169d0 <free>
	free(pmt_spi);
 80025bc:	6938      	ldr	r0, [r7, #16]
 80025be:	f014 fa07 	bl	80169d0 <free>
	free(uptime);
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f014 fa04 	bl	80169d0 <free>
}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58020000 	.word	0x58020000
 80025d4:	24000c50 	.word	0x24000c50
 80025d8:	24000c44 	.word	0x24000c44

080025dc <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80025e2:	bf00      	nop
 80025e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e8:	484d      	ldr	r0, [pc, #308]	; (8002720 <sample_erpa+0x144>)
 80025ea:	f006 fd39 	bl	8009060 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f7      	bne.n	80025e4 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80025f4:	200f      	movs	r0, #15
 80025f6:	f014 f9e3 	bl	80169c0 <malloc>
 80025fa:	4603      	mov	r3, r0
 80025fc:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80025fe:	2002      	movs	r0, #2
 8002600:	f014 f9de 	bl	80169c0 <malloc>
 8002604:	4603      	mov	r3, r0
 8002606:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 8002608:	2004      	movs	r0, #4
 800260a:	f014 f9d9 	bl	80169c0 <malloc>
 800260e:	4603      	mov	r3, r0
 8002610:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002612:	2004      	movs	r0, #4
 8002614:	f014 f9d4 	bl	80169c0 <malloc>
 8002618:	4603      	mov	r3, r0
 800261a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 800261c:	23ff      	movs	r3, #255	; 0xff
 800261e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002620:	6938      	ldr	r0, [r7, #16]
 8002622:	f7ff fecd 	bl	80023c0 <get_uptime>
	sweep_step = get_current_step();
 8002626:	f7ff fda5 	bl	8002174 <get_current_step>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 800262e:	69b8      	ldr	r0, [r7, #24]
 8002630:	f7ff fc84 	bl	8001f3c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7ff fca5 	bl	8001f84 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	22aa      	movs	r2, #170	; 0xaa
 800263e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	22aa      	movs	r2, #170	; 0xaa
 8002646:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <sample_erpa+0x148>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b29a      	uxth	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3302      	adds	r3, #2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <sample_erpa+0x148>)
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	3303      	adds	r3, #3
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
	buffer[4] = sweep_step;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3304      	adds	r3, #4
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	701a      	strb	r2, [r3, #0]
	buffer[5] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	b29a      	uxth	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3305      	adds	r3, #5
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
	buffer[6] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3306      	adds	r3, #6
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3302      	adds	r3, #2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29a      	uxth	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3307      	adds	r3, #7
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
	buffer[8] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3302      	adds	r3, #2
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3308      	adds	r3, #8
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[0];					// ERPA eADC MSB
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3309      	adds	r3, #9
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	701a      	strb	r2, [r3, #0]
	buffer[10] = erpa_spi[1];					// ERPA eADC LSB
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	330a      	adds	r3, #10
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	7852      	ldrb	r2, [r2, #1]
 80026ba:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[0];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	330b      	adds	r3, #11
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[1];
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	330c      	adds	r3, #12
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	7852      	ldrb	r2, [r2, #1]
 80026ce:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[2];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	330d      	adds	r3, #13
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	7892      	ldrb	r2, [r2, #2]
 80026d8:	701a      	strb	r2, [r3, #0]
	buffer[14] = uptime[3];
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	330e      	adds	r3, #14
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	78d2      	ldrb	r2, [r2, #3]
 80026e2:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	220f      	movs	r2, #15
 80026e8:	69f9      	ldr	r1, [r7, #28]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fdfa 	bl	80022e4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <sample_erpa+0x14c>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	1d39      	adds	r1, r7, #4
 80026f6:	2300      	movs	r3, #0
 80026f8:	2200      	movs	r2, #0
 80026fa:	f010 fea7 	bl	801344c <osMessageQueuePut>
	free(buffer);
 80026fe:	69f8      	ldr	r0, [r7, #28]
 8002700:	f014 f966 	bl	80169d0 <free>
	free(erpa_spi);
 8002704:	69b8      	ldr	r0, [r7, #24]
 8002706:	f014 f963 	bl	80169d0 <free>
	free(erpa_adc);
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f014 f960 	bl	80169d0 <free>
	free(uptime);
 8002710:	6938      	ldr	r0, [r7, #16]
 8002712:	f014 f95d 	bl	80169d0 <free>
}
 8002716:	bf00      	nop
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58020400 	.word	0x58020400
 8002724:	24000c52 	.word	0x24000c52
 8002728:	24000c44 	.word	0x24000c44

0800272c <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002732:	2030      	movs	r0, #48	; 0x30
 8002734:	f014 f944 	bl	80169c0 <malloc>
 8002738:	4603      	mov	r3, r0
 800273a:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 800273c:	2008      	movs	r0, #8
 800273e:	f014 f93f 	bl	80169c0 <malloc>
 8002742:	4603      	mov	r3, r0
 8002744:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002746:	200a      	movs	r0, #10
 8002748:	f014 f93a 	bl	80169c0 <malloc>
 800274c:	4603      	mov	r3, r0
 800274e:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fe7f 	bl	8002454 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <sample_hk+0x78>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275e:	db25      	blt.n	80027ac <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002760:	6938      	ldr	r0, [r7, #16]
 8002762:	f7ff fc29 	bl	8001fb8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <sample_hk+0x7c>)
 8002770:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3302      	adds	r3, #2
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <sample_hk+0x7c>)
 800277e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	3304      	adds	r3, #4
 8002784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <sample_hk+0x7c>)
 800278c:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3306      	adds	r3, #6
 8002792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <sample_hk+0x7c>)
 800279a:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <sample_hk+0x78>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e01f      	b.n	80027e4 <sample_hk+0xb8>
 80027a4:	24000004 	.word	0x24000004
 80027a8:	24000ccc 	.word	0x24000ccc
	} else {
		TEMPERATURE_COUNTER++;
 80027ac:	4b9f      	ldr	r3, [pc, #636]	; (8002a2c <sample_hk+0x300>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a9e      	ldr	r2, [pc, #632]	; (8002a2c <sample_hk+0x300>)
 80027b4:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80027b6:	4b9e      	ldr	r3, [pc, #632]	; (8002a30 <sample_hk+0x304>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80027c0:	4b9b      	ldr	r3, [pc, #620]	; (8002a30 <sample_hk+0x304>)
 80027c2:	885a      	ldrh	r2, [r3, #2]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3302      	adds	r3, #2
 80027c8:	b212      	sxth	r2, r2
 80027ca:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80027cc:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <sample_hk+0x304>)
 80027ce:	889a      	ldrh	r2, [r3, #4]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3304      	adds	r3, #4
 80027d4:	b212      	sxth	r2, r2
 80027d6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80027d8:	4b95      	ldr	r3, [pc, #596]	; (8002a30 <sample_hk+0x304>)
 80027da:	88da      	ldrh	r2, [r3, #6]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	3306      	adds	r3, #6
 80027e0:	b212      	sxth	r2, r2
 80027e2:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	22cc      	movs	r2, #204	; 0xcc
 80027e8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	22cc      	movs	r2, #204	; 0xcc
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80027f2:	4b90      	ldr	r3, [pc, #576]	; (8002a34 <sample_hk+0x308>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3302      	adds	r3, #2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002802:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <sample_hk+0x308>)
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3303      	adds	r3, #3
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 800280e:	4b8a      	ldr	r3, [pc, #552]	; (8002a38 <sample_hk+0x30c>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3304      	adds	r3, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <sample_hk+0x30c>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3305      	adds	r3, #5
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800282a:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <sample_hk+0x310>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3306      	adds	r3, #6
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800283a:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <sample_hk+0x310>)
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3307      	adds	r3, #7
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284c:	121a      	asrs	r2, r3, #8
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3308      	adds	r3, #8
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f9b3 2000 	ldrsh.w	r2, [r3]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3309      	adds	r3, #9
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	3302      	adds	r3, #2
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	121a      	asrs	r2, r3, #8
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	330a      	adds	r3, #10
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	3302      	adds	r3, #2
 800287a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	330b      	adds	r3, #11
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3304      	adds	r3, #4
 800288a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288e:	121a      	asrs	r2, r3, #8
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	330c      	adds	r3, #12
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	3304      	adds	r3, #4
 800289c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	330d      	adds	r3, #13
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	3306      	adds	r3, #6
 80028ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b0:	121a      	asrs	r2, r3, #8
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	330e      	adds	r3, #14
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	3306      	adds	r3, #6
 80028be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	330f      	adds	r3, #15
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <sample_hk+0x314>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3310      	adds	r3, #16
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <sample_hk+0x314>)
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3311      	adds	r3, #17
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <sample_hk+0x318>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3312      	adds	r3, #18
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <sample_hk+0x318>)
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3313      	adds	r3, #19
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <sample_hk+0x31c>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29a      	uxth	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3314      	adds	r3, #20
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002912:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <sample_hk+0x31c>)
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3315      	adds	r3, #21
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800291e:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <sample_hk+0x320>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3316      	adds	r3, #22
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <sample_hk+0x320>)
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3317      	adds	r3, #23
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800293a:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <sample_hk+0x324>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b29a      	uxth	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3318      	adds	r3, #24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <sample_hk+0x324>)
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3319      	adds	r3, #25
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <sample_hk+0x328>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29a      	uxth	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	331a      	adds	r3, #26
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <sample_hk+0x328>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	331b      	adds	r3, #27
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <sample_hk+0x32c>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	331c      	adds	r3, #28
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002982:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <sample_hk+0x32c>)
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	331d      	adds	r3, #29
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 800298e:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <sample_hk+0x330>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	331e      	adds	r3, #30
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <sample_hk+0x330>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	331f      	adds	r3, #31
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <sample_hk+0x334>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3320      	adds	r3, #32
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <sample_hk+0x334>)
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3321      	adds	r3, #33	; 0x21
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <sample_hk+0x338>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3322      	adds	r3, #34	; 0x22
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <sample_hk+0x338>)
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3323      	adds	r3, #35	; 0x23
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <sample_hk+0x33c>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3324      	adds	r3, #36	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <sample_hk+0x33c>)
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3325      	adds	r3, #37	; 0x25
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3326      	adds	r3, #38	; 0x26
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3327      	adds	r3, #39	; 0x27
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	7852      	ldrb	r2, [r2, #1]
 8002a10:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3328      	adds	r3, #40	; 0x28
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	7892      	ldrb	r2, [r2, #2]
 8002a1a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3329      	adds	r3, #41	; 0x29
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	78d2      	ldrb	r2, [r2, #3]
 8002a24:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	332a      	adds	r3, #42	; 0x2a
 8002a2a:	e01f      	b.n	8002a6c <sample_hk+0x340>
 8002a2c:	24000004 	.word	0x24000004
 8002a30:	24000ccc 	.word	0x24000ccc
 8002a34:	24000c54 	.word	0x24000c54
 8002a38:	24000c26 	.word	0x24000c26
 8002a3c:	24000c28 	.word	0x24000c28
 8002a40:	24000c2a 	.word	0x24000c2a
 8002a44:	24000c2c 	.word	0x24000c2c
 8002a48:	24000c2e 	.word	0x24000c2e
 8002a4c:	24000c30 	.word	0x24000c30
 8002a50:	24000c32 	.word	0x24000c32
 8002a54:	24000c34 	.word	0x24000c34
 8002a58:	24000c36 	.word	0x24000c36
 8002a5c:	24000c38 	.word	0x24000c38
 8002a60:	24000c3a 	.word	0x24000c3a
 8002a64:	24000c3c 	.word	0x24000c3c
 8002a68:	24000c3e 	.word	0x24000c3e
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	7912      	ldrb	r2, [r2, #4]
 8002a70:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	332b      	adds	r3, #43	; 0x2b
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	7952      	ldrb	r2, [r2, #5]
 8002a7a:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	332c      	adds	r3, #44	; 0x2c
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	7992      	ldrb	r2, [r2, #6]
 8002a84:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	332d      	adds	r3, #45	; 0x2d
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	79d2      	ldrb	r2, [r2, #7]
 8002a8e:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	332e      	adds	r3, #46	; 0x2e
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	7a12      	ldrb	r2, [r2, #8]
 8002a98:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	332f      	adds	r3, #47	; 0x2f
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	7a52      	ldrb	r2, [r2, #9]
 8002aa2:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2230      	movs	r2, #48	; 0x30
 8002aa8:	6979      	ldr	r1, [r7, #20]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc1a 	bl	80022e4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <sample_hk+0x3ac>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	1d39      	adds	r1, r7, #4
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f010 fcc7 	bl	801344c <osMessageQueuePut>

	free(buffer);
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f013 ff86 	bl	80169d0 <free>
	free(hk_i2c);
 8002ac4:	6938      	ldr	r0, [r7, #16]
 8002ac6:	f013 ff83 	bl	80169d0 <free>
	free(timestamp);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f013 ff80 	bl	80169d0 <free>
}
 8002ad0:	bf00      	nop
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	24000c44 	.word	0x24000c44

08002adc <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <PMT_init+0x38>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aec:	2200      	movs	r2, #0
 8002aee:	2101      	movs	r1, #1
 8002af0:	f010 fbd3 	bl	801329a <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <PMT_init+0x3c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <PMT_init+0x30>
			sample_pmt();
 8002afc:	f7ff fcfa 	bl	80024f4 <sample_pmt>
			pmt_seq++;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <PMT_init+0x40>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <PMT_init+0x40>)
 8002b0a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b0c:	f010 fa92 	bl	8013034 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b10:	e7e8      	b.n	8002ae4 <PMT_init+0x8>
 8002b12:	bf00      	nop
 8002b14:	24000c5c 	.word	0x24000c5c
 8002b18:	24000c56 	.word	0x24000c56
 8002b1c:	24000c50 	.word	0x24000c50

08002b20 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <ERPA_init+0x38>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b30:	2200      	movs	r2, #0
 8002b32:	2102      	movs	r1, #2
 8002b34:	f010 fbb1 	bl	801329a <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <ERPA_init+0x3c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <ERPA_init+0x30>
			sample_erpa();
 8002b40:	f7ff fd4c 	bl	80025dc <sample_erpa>
			erpa_seq++;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <ERPA_init+0x40>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <ERPA_init+0x40>)
 8002b4e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b50:	f010 fa70 	bl	8013034 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b54:	e7e8      	b.n	8002b28 <ERPA_init+0x8>
 8002b56:	bf00      	nop
 8002b58:	24000c5c 	.word	0x24000c5c
 8002b5c:	24000c57 	.word	0x24000c57
 8002b60:	24000c52 	.word	0x24000c52

08002b64 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HK_init+0x38>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b74:	2200      	movs	r2, #0
 8002b76:	2104      	movs	r1, #4
 8002b78:	f010 fb8f 	bl	801329a <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HK_init+0x3c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HK_init+0x30>
			sample_hk();
 8002b84:	f7ff fdd2 	bl	800272c <sample_hk>
			hk_seq++;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HK_init+0x40>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <HK_init+0x40>)
 8002b92:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002b94:	f010 fa4e 	bl	8013034 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b98:	e7e8      	b.n	8002b6c <HK_init+0x8>
 8002b9a:	bf00      	nop
 8002b9c:	24000c5c 	.word	0x24000c5c
 8002ba0:	24000c58 	.word	0x24000c58
 8002ba4:	24000c54 	.word	0x24000c54

08002ba8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <GPIO_on_init+0x9c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f010 fa5d 	bl	8013074 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002bba:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <GPIO_on_init+0xa0>)
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f006 fa65 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bc6:	2064      	movs	r0, #100	; 0x64
 8002bc8:	f010 fa75 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <GPIO_on_init+0xa0>)
 8002bce:	2120      	movs	r1, #32
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f006 fa5c 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	f010 fa6c 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <GPIO_on_init+0xa4>)
 8002be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be4:	2201      	movs	r2, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f006 fa52 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bec:	2064      	movs	r0, #100	; 0x64
 8002bee:	f010 fa62 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <GPIO_on_init+0xa4>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 fa49 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bfe:	2064      	movs	r0, #100	; 0x64
 8002c00:	f010 fa59 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <GPIO_on_init+0xa4>)
 8002c06:	2140      	movs	r1, #64	; 0x40
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fa40 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	f010 fa50 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <GPIO_on_init+0xa4>)
 8002c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 fa36 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c24:	2064      	movs	r0, #100	; 0x64
 8002c26:	f010 fa46 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <GPIO_on_init+0xa4>)
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	2201      	movs	r2, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f006 fa2c 	bl	8009090 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002c38:	4b02      	ldr	r3, [pc, #8]	; (8002c44 <GPIO_on_init+0x9c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f010 fa19 	bl	8013074 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c42:	e7ba      	b.n	8002bba <GPIO_on_init+0x12>
 8002c44:	24000750 	.word	0x24000750
 8002c48:	58020400 	.word	0x58020400
 8002c4c:	58020800 	.word	0x58020800

08002c50 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <GPIO_off_init+0x9c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f010 fa09 	bl	8013074 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <GPIO_off_init+0xa0>)
 8002c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f006 fa10 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c70:	2064      	movs	r0, #100	; 0x64
 8002c72:	f010 fa20 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <GPIO_off_init+0xa0>)
 8002c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f006 fa06 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c84:	2064      	movs	r0, #100	; 0x64
 8002c86:	f010 fa16 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <GPIO_off_init+0xa0>)
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f006 f9fd 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c96:	2064      	movs	r0, #100	; 0x64
 8002c98:	f010 fa0d 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <GPIO_off_init+0xa0>)
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f006 f9f4 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ca8:	2064      	movs	r0, #100	; 0x64
 8002caa:	f010 fa04 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <GPIO_off_init+0xa0>)
 8002cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f006 f9ea 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cbc:	2064      	movs	r0, #100	; 0x64
 8002cbe:	f010 f9fa 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <GPIO_off_init+0xa4>)
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f006 f9e1 	bl	8009090 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cce:	2064      	movs	r0, #100	; 0x64
 8002cd0:	f010 f9f1 	bl	80130b6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <GPIO_off_init+0xa4>)
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f006 f9d8 	bl	8009090 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <GPIO_off_init+0x9c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f010 f9c5 	bl	8013074 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002cea:	e7ba      	b.n	8002c62 <GPIO_off_init+0x12>
 8002cec:	240009b0 	.word	0x240009b0
 8002cf0:	58020800 	.word	0x58020800
 8002cf4:	58020400 	.word	0x58020400

08002cf8 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <UART_TX_init+0xa4>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d10:	2200      	movs	r2, #0
 8002d12:	4923      	ldr	r1, [pc, #140]	; (8002da0 <UART_TX_init+0xa8>)
 8002d14:	f010 fbfa 	bl	801350c <osMessageQueueGet>
 8002d18:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d120      	bne.n	8002d62 <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <UART_TX_init+0xa8>)
 8002d22:	889b      	ldrh	r3, [r3, #4]
 8002d24:	461a      	mov	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2e:	d218      	bcs.n	8002d62 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <UART_TX_init+0xac>)
 8002d34:	4413      	add	r3, r2
 8002d36:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <UART_TX_init+0xa8>)
 8002d38:	6811      	ldr	r1, [r2, #0]
 8002d3a:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <UART_TX_init+0xa8>)
 8002d3c:	8892      	ldrh	r2, [r2, #4]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f013 fe4e 	bl	80169e0 <memcpy>
					free(msg.array);
 8002d44:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <UART_TX_init+0xa8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f013 fe41 	bl	80169d0 <free>
					total_size += msg.size;
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <UART_TX_init+0xa8>)
 8002d50:	889b      	ldrh	r3, [r3, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4413      	add	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002d60:	d203      	bcs.n	8002d6a <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0cf      	beq.n	8002d08 <UART_TX_init+0x10>
 8002d68:	e000      	b.n	8002d6c <UART_TX_init+0x74>
						break;
 8002d6a:	bf00      	nop

		if (total_size > 0) {
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	490a      	ldr	r1, [pc, #40]	; (8002da4 <UART_TX_init+0xac>)
 8002d7a:	480b      	ldr	r0, [pc, #44]	; (8002da8 <UART_TX_init+0xb0>)
 8002d7c:	f00d fab8 	bl	80102f0 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002d80:	e001      	b.n	8002d86 <UART_TX_init+0x8e>
				osThreadYield();
 8002d82:	f010 f957 	bl	8013034 <osThreadYield>
			while (tx_flag == 0) {
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <UART_TX_init+0xb4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f9      	beq.n	8002d82 <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <UART_TX_init+0xb4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002d94:	f010 f94e 	bl	8013034 <osThreadYield>
		total_size = 0;
 8002d98:	e7b4      	b.n	8002d04 <UART_TX_init+0xc>
 8002d9a:	bf00      	nop
 8002d9c:	24000c44 	.word	0x24000c44
 8002da0:	24000c48 	.word	0x24000c48
 8002da4:	24000cd4 	.word	0x24000cd4
 8002da8:	24000638 	.word	0x24000638
 8002dac:	24000000 	.word	0x24000000

08002db0 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <Voltage_Monitor_init+0xb4>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2108      	movs	r1, #8
 8002dc4:	f010 fa69 	bl	801329a <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002dc8:	2012      	movs	r0, #18
 8002dca:	f013 fdf9 	bl	80169c0 <malloc>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002dd2:	2008      	movs	r0, #8
 8002dd4:	f013 fdf4 	bl	80169c0 <malloc>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff f91b 	bl	8002018 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002de2:	68b8      	ldr	r0, [r7, #8]
 8002de4:	f7ff f962 	bl	80020ac <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	885a      	ldrh	r2, [r3, #2]
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <Voltage_Monitor_init+0xb8>)
 8002dee:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <Voltage_Monitor_init+0xbc>)
 8002df6:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <Voltage_Monitor_init+0xc0>)
 8002dfe:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	885a      	ldrh	r2, [r3, #2]
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <Voltage_Monitor_init+0xc4>)
 8002e06:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	889a      	ldrh	r2, [r3, #4]
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <Voltage_Monitor_init+0xc8>)
 8002e0e:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	88da      	ldrh	r2, [r3, #6]
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <Voltage_Monitor_init+0xcc>)
 8002e16:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	899a      	ldrh	r2, [r3, #12]
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <Voltage_Monitor_init+0xd0>)
 8002e1e:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	88da      	ldrh	r2, [r3, #6]
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <Voltage_Monitor_init+0xd4>)
 8002e26:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	889a      	ldrh	r2, [r3, #4]
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <Voltage_Monitor_init+0xd8>)
 8002e2e:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	89da      	ldrh	r2, [r3, #14]
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <Voltage_Monitor_init+0xdc>)
 8002e36:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8a1a      	ldrh	r2, [r3, #16]
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <Voltage_Monitor_init+0xe0>)
 8002e3e:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	891a      	ldrh	r2, [r3, #8]
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <Voltage_Monitor_init+0xe4>)
 8002e46:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	895a      	ldrh	r2, [r3, #10]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <Voltage_Monitor_init+0xe8>)
 8002e4e:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f013 fdbd 	bl	80169d0 <free>
		free(hk_adc3);
 8002e56:	68b8      	ldr	r0, [r7, #8]
 8002e58:	f013 fdba 	bl	80169d0 <free>

		osThreadYield();
 8002e5c:	f010 f8ea 	bl	8013034 <osThreadYield>
	for (;;) {
 8002e60:	e7aa      	b.n	8002db8 <Voltage_Monitor_init+0x8>
 8002e62:	bf00      	nop
 8002e64:	24000c5c 	.word	0x24000c5c
 8002e68:	24000c26 	.word	0x24000c26
 8002e6c:	24000c28 	.word	0x24000c28
 8002e70:	24000c2a 	.word	0x24000c2a
 8002e74:	24000c2c 	.word	0x24000c2c
 8002e78:	24000c2e 	.word	0x24000c2e
 8002e7c:	24000c30 	.word	0x24000c30
 8002e80:	24000c32 	.word	0x24000c32
 8002e84:	24000c34 	.word	0x24000c34
 8002e88:	24000c36 	.word	0x24000c36
 8002e8c:	24000c38 	.word	0x24000c38
 8002e90:	24000c3a 	.word	0x24000c3a
 8002e94:	24000c3c 	.word	0x24000c3c
 8002e98:	24000c3e 	.word	0x24000c3e

08002e9c <FLAG_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
  /* Infinite loop */
  for(;;)
  {
		int current_flag = osEventFlagsGet(event_flags);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <FLAG_init+0x38>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f010 f9d5 	bl	8013258 <osEventFlagsGet>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0316 	and.w	r3, r3, #22
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <FLAG_init+0x38>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2116      	movs	r1, #22
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f010 f996 	bl	80131f4 <osEventFlagsClear>
			enter_stop();
 8002ec8:	f7ff f9b6 	bl	8002238 <enter_stop>
		}
    osDelay(1);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f010 f8f2 	bl	80130b6 <osDelay>
  {
 8002ed2:	e7e7      	b.n	8002ea4 <FLAG_init+0x8>
 8002ed4:	24000c5c 	.word	0x24000c5c

08002ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002eea:	f000 ff85 	bl	8003df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40001000 	.word	0x40001000

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f04:	e7fe      	b.n	8002f04 <Error_Handler+0x8>
	...

08002f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_MspInit+0x38>)
 8002f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_MspInit+0x38>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_MspInit+0x38>)
 8002f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f06f 0001 	mvn.w	r0, #1
 8002f34:	f002 fc6e 	bl	8005814 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	58024400 	.word	0x58024400

08002f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08e      	sub	sp, #56	; 0x38
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a7b      	ldr	r2, [pc, #492]	; (8003150 <HAL_ADC_MspInit+0x20c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	f040 8091 	bne.w	800308a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f68:	4b7a      	ldr	r3, [pc, #488]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f6e:	4a79      	ldr	r2, [pc, #484]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002f70:	f043 0320 	orr.w	r3, r3, #32
 8002f74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f78:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	4a71      	ldr	r2, [pc, #452]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f96:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa4:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002faa:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb4:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	4b64      	ldr	r3, [pc, #400]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc8:	4a62      	ldr	r2, [pc, #392]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd2:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002fe0:	2333      	movs	r3, #51	; 0x33
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4859      	ldr	r0, [pc, #356]	; (8003158 <HAL_ADC_MspInit+0x214>)
 8002ff4:	f005 fe84 	bl	8008d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002ff8:	23ce      	movs	r3, #206	; 0xce
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003008:	4619      	mov	r1, r3
 800300a:	4854      	ldr	r0, [pc, #336]	; (800315c <HAL_ADC_MspInit+0x218>)
 800300c:	f005 fe78 	bl	8008d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003010:	2303      	movs	r3, #3
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003014:	2303      	movs	r3, #3
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003020:	4619      	mov	r1, r3
 8003022:	484f      	ldr	r0, [pc, #316]	; (8003160 <HAL_ADC_MspInit+0x21c>)
 8003024:	f005 fe6c 	bl	8008d00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003028:	4b4e      	ldr	r3, [pc, #312]	; (8003164 <HAL_ADC_MspInit+0x220>)
 800302a:	4a4f      	ldr	r2, [pc, #316]	; (8003168 <HAL_ADC_MspInit+0x224>)
 800302c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800302e:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003030:	2209      	movs	r2, #9
 8003032:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_ADC_MspInit+0x220>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003040:	4b48      	ldr	r3, [pc, #288]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003046:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003048:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_ADC_MspInit+0x220>)
 800304a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800304e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003050:	4b44      	ldr	r3, [pc, #272]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003056:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_ADC_MspInit+0x220>)
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003062:	2200      	movs	r2, #0
 8003064:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003068:	2200      	movs	r2, #0
 800306a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800306c:	483d      	ldr	r0, [pc, #244]	; (8003164 <HAL_ADC_MspInit+0x220>)
 800306e:	f002 ffff 	bl	8006070 <HAL_DMA_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003078:	f7ff ff40 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a39      	ldr	r2, [pc, #228]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003080:	64da      	str	r2, [r3, #76]	; 0x4c
 8003082:	4a38      	ldr	r2, [pc, #224]	; (8003164 <HAL_ADC_MspInit+0x220>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003088:	e05e      	b.n	8003148 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a37      	ldr	r2, [pc, #220]	; (800316c <HAL_ADC_MspInit+0x228>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d159      	bne.n	8003148 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_ADC_MspInit+0x210>)
 8003096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_ADC_MspInit+0x210>)
 800309c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_ADC_MspInit+0x210>)
 80030a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_ADC_MspInit+0x210>)
 80030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_ADC_MspInit+0x210>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_ADC_MspInit+0x210>)
 80030c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80030d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80030d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80030d8:	f000 feba 	bl	8003e50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80030dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80030e0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80030e4:	f000 feb4 	bl	8003e50 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_ADC_MspInit+0x230>)
 80030ec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 80030f0:	2273      	movs	r2, #115	; 0x73
 80030f2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 8003102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003106:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 800310a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800310e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 8003112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003116:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 800311a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 8003122:	2200      	movs	r2, #0
 8003124:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800312c:	4810      	ldr	r0, [pc, #64]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 800312e:	f002 ff9f 	bl	8006070 <HAL_DMA_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003138:	f7ff fee0 	bl	8002efc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 8003140:	64da      	str	r2, [r3, #76]	; 0x4c
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <HAL_ADC_MspInit+0x22c>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003148:	bf00      	nop
 800314a:	3738      	adds	r7, #56	; 0x38
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40022000 	.word	0x40022000
 8003154:	58024400 	.word	0x58024400
 8003158:	58020800 	.word	0x58020800
 800315c:	58020000 	.word	0x58020000
 8003160:	58020400 	.word	0x58020400
 8003164:	24000204 	.word	0x24000204
 8003168:	40020010 	.word	0x40020010
 800316c:	58026000 	.word	0x58026000
 8003170:	2400027c 	.word	0x2400027c
 8003174:	40020028 	.word	0x40020028

08003178 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_DAC_MspInit+0xf0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d161      	bne.n	800325e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_DAC_MspInit+0xf4>)
 800319c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a0:	4a32      	ldr	r2, [pc, #200]	; (800326c <HAL_DAC_MspInit+0xf4>)
 80031a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_DAC_MspInit+0xf4>)
 80031ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_DAC_MspInit+0xf4>)
 80031ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031be:	4a2b      	ldr	r2, [pc, #172]	; (800326c <HAL_DAC_MspInit+0xf4>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_DAC_MspInit+0xf4>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031d6:	2310      	movs	r3, #16
 80031d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031da:	2303      	movs	r3, #3
 80031dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	4619      	mov	r1, r3
 80031e8:	4821      	ldr	r0, [pc, #132]	; (8003270 <HAL_DAC_MspInit+0xf8>)
 80031ea:	f005 fd89 	bl	8008d00 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <HAL_DAC_MspInit+0x100>)
 80031f2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 80031f6:	2243      	movs	r2, #67	; 0x43
 80031f8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003214:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800321c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003224:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 800322e:	2200      	movs	r2, #0
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003232:	4810      	ldr	r0, [pc, #64]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003234:	f002 ff1c 	bl	8006070 <HAL_DMA_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800323e:	f7ff fe5d 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_DAC_MspInit+0xfc>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2105      	movs	r1, #5
 8003252:	2036      	movs	r0, #54	; 0x36
 8003254:	f002 fade 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003258:	2036      	movs	r0, #54	; 0x36
 800325a:	f002 faf5 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800325e:	bf00      	nop
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40007400 	.word	0x40007400
 800326c:	58024400 	.word	0x58024400
 8003270:	58020000 	.word	0x58020000
 8003274:	24000308 	.word	0x24000308
 8003278:	40020088 	.word	0x40020088

0800327c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0ba      	sub	sp, #232	; 0xe8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	22c0      	movs	r2, #192	; 0xc0
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f013 fbad 	bl	80169fc <memset>
  if(hi2c->Instance==I2C1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a27      	ldr	r2, [pc, #156]	; (8003344 <HAL_I2C_MspInit+0xc8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d146      	bne.n	800333a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032ac:	f04f 0208 	mov.w	r2, #8
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	4618      	mov	r0, r3
 80032c4:	f007 fda8 	bl	800ae18 <HAL_RCCEx_PeriphCLKConfig>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80032ce:	f7ff fe15 	bl	8002efc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_I2C_MspInit+0xcc>)
 80032d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <HAL_I2C_MspInit+0xcc>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_I2C_MspInit+0xcc>)
 80032e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f8:	2312      	movs	r3, #18
 80032fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800330a:	2304      	movs	r3, #4
 800330c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003314:	4619      	mov	r1, r3
 8003316:	480d      	ldr	r0, [pc, #52]	; (800334c <HAL_I2C_MspInit+0xd0>)
 8003318:	f005 fcf2 	bl	8008d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_I2C_MspInit+0xcc>)
 800331e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_I2C_MspInit+0xcc>)
 8003324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_I2C_MspInit+0xcc>)
 800332e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800333a:	bf00      	nop
 800333c:	37e8      	adds	r7, #232	; 0xe8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40005400 	.word	0x40005400
 8003348:	58024400 	.word	0x58024400
 800334c:	58020400 	.word	0x58020400

08003350 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b0b2      	sub	sp, #200	; 0xc8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	22c0      	movs	r2, #192	; 0xc0
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f013 fb4b 	bl	80169fc <memset>
  if(hrtc->Instance==RTC)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a10      	ldr	r2, [pc, #64]	; (80033ac <HAL_RTC_MspInit+0x5c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d118      	bne.n	80033a2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003370:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_RTC_MspInit+0x60>)
 800337e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	4618      	mov	r0, r3
 8003388:	f007 fd46 	bl	800ae18 <HAL_RCCEx_PeriphCLKConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003392:	f7ff fdb3 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_RTC_MspInit+0x64>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <HAL_RTC_MspInit+0x64>)
 800339c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	37c8      	adds	r7, #200	; 0xc8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	58004000 	.word	0x58004000
 80033b0:	00019300 	.word	0x00019300
 80033b4:	58024400 	.word	0x58024400

080033b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0bc      	sub	sp, #240	; 0xf0
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	22c0      	movs	r2, #192	; 0xc0
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f013 fb0f 	bl	80169fc <memset>
  if(hspi->Instance==SPI1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_SPI_MspInit+0x15c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d145      	bne.n	8003474 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80033e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f8:	f107 0318 	add.w	r3, r7, #24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f007 fd0b 	bl	800ae18 <HAL_RCCEx_PeriphCLKConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003408:	f7ff fd78 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_SPI_MspInit+0x160>)
 800340e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003412:	4a41      	ldr	r2, [pc, #260]	; (8003518 <HAL_SPI_MspInit+0x160>)
 8003414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003418:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_SPI_MspInit+0x160>)
 800341e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_SPI_MspInit+0x160>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003430:	4a39      	ldr	r2, [pc, #228]	; (8003518 <HAL_SPI_MspInit+0x160>)
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_SPI_MspInit+0x160>)
 800343c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003448:	2318      	movs	r3, #24
 800344a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003460:	2305      	movs	r3, #5
 8003462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003466:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800346a:	4619      	mov	r1, r3
 800346c:	482b      	ldr	r0, [pc, #172]	; (800351c <HAL_SPI_MspInit+0x164>)
 800346e:	f005 fc47 	bl	8008d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003472:	e04a      	b.n	800350a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_SPI_MspInit+0x168>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d145      	bne.n	800350a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800347e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800348a:	2300      	movs	r3, #0
 800348c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348e:	f107 0318 	add.w	r3, r7, #24
 8003492:	4618      	mov	r0, r3
 8003494:	f007 fcc0 	bl	800ae18 <HAL_RCCEx_PeriphCLKConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800349e:	f7ff fd2d 	bl	8002efc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_SPI_MspInit+0x160>)
 80034a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a8:	4a1b      	ldr	r2, [pc, #108]	; (8003518 <HAL_SPI_MspInit+0x160>)
 80034aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_SPI_MspInit+0x160>)
 80034b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_SPI_MspInit+0x160>)
 80034c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c6:	4a14      	ldr	r2, [pc, #80]	; (8003518 <HAL_SPI_MspInit+0x160>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_SPI_MspInit+0x160>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80034de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80034e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034f8:	2305      	movs	r3, #5
 80034fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003502:	4619      	mov	r1, r3
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <HAL_SPI_MspInit+0x164>)
 8003506:	f005 fbfb 	bl	8008d00 <HAL_GPIO_Init>
}
 800350a:	bf00      	nop
 800350c:	37f0      	adds	r7, #240	; 0xf0
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40013000 	.word	0x40013000
 8003518:	58024400 	.word	0x58024400
 800351c:	58020400 	.word	0x58020400
 8003520:	40003800 	.word	0x40003800

08003524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a46      	ldr	r2, [pc, #280]	; (800364c <HAL_TIM_Base_MspInit+0x128>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12f      	bne.n	8003596 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003536:	4b46      	ldr	r3, [pc, #280]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 8003538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800353c:	4a44      	ldr	r2, [pc, #272]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003546:	4b42      	ldr	r3, [pc, #264]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 8003548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2105      	movs	r1, #5
 8003558:	2018      	movs	r0, #24
 800355a:	f002 f95b 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800355e:	2018      	movs	r0, #24
 8003560:	f002 f972 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	2105      	movs	r1, #5
 8003568:	2019      	movs	r0, #25
 800356a:	f002 f953 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800356e:	2019      	movs	r0, #25
 8003570:	f002 f96a 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003574:	2200      	movs	r2, #0
 8003576:	2105      	movs	r1, #5
 8003578:	201a      	movs	r0, #26
 800357a:	f002 f94b 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800357e:	201a      	movs	r0, #26
 8003580:	f002 f962 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2105      	movs	r1, #5
 8003588:	201b      	movs	r0, #27
 800358a:	f002 f943 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800358e:	201b      	movs	r0, #27
 8003590:	f002 f95a 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003594:	e055      	b.n	8003642 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d117      	bne.n	80035d0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 80035a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a6:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035b0:	4b27      	ldr	r3, [pc, #156]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 80035b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2105      	movs	r1, #5
 80035c2:	201c      	movs	r0, #28
 80035c4:	f002 f926 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035c8:	201c      	movs	r0, #28
 80035ca:	f002 f93d 	bl	8005848 <HAL_NVIC_EnableIRQ>
}
 80035ce:	e038      	b.n	8003642 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_TIM_Base_MspInit+0x130>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d117      	bne.n	800360a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 80035dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 80035ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	2105      	movs	r1, #5
 80035fc:	201d      	movs	r0, #29
 80035fe:	f002 f909 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003602:	201d      	movs	r0, #29
 8003604:	f002 f920 	bl	8005848 <HAL_NVIC_EnableIRQ>
}
 8003608:	e01b      	b.n	8003642 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <HAL_TIM_Base_MspInit+0x134>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d116      	bne.n	8003642 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 8003616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361a:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_TIM_Base_MspInit+0x12c>)
 8003626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2105      	movs	r1, #5
 8003636:	201e      	movs	r0, #30
 8003638:	f002 f8ec 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800363c:	201e      	movs	r0, #30
 800363e:	f002 f903 	bl	8005848 <HAL_NVIC_EnableIRQ>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	58024400 	.word	0x58024400
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800

0800365c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a26      	ldr	r2, [pc, #152]	; (8003714 <HAL_TIM_MspPostInit+0xb8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d120      	bne.n	80036c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <HAL_TIM_MspPostInit+0xbc>)
 8003680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003684:	4a24      	ldr	r2, [pc, #144]	; (8003718 <HAL_TIM_MspPostInit+0xbc>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_TIM_MspPostInit+0xbc>)
 8003690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800369c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	4619      	mov	r1, r3
 80036b8:	4818      	ldr	r0, [pc, #96]	; (800371c <HAL_TIM_MspPostInit+0xc0>)
 80036ba:	f005 fb21 	bl	8008d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036be:	e024      	b.n	800370a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d11f      	bne.n	800370a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_TIM_MspPostInit+0xbc>)
 80036cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d0:	4a11      	ldr	r2, [pc, #68]	; (8003718 <HAL_TIM_MspPostInit+0xbc>)
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_TIM_MspPostInit+0xbc>)
 80036dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036fa:	2301      	movs	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	4619      	mov	r1, r3
 8003704:	4806      	ldr	r0, [pc, #24]	; (8003720 <HAL_TIM_MspPostInit+0xc4>)
 8003706:	f005 fafb 	bl	8008d00 <HAL_GPIO_Init>
}
 800370a:	bf00      	nop
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	58024400 	.word	0x58024400
 800371c:	58020000 	.word	0x58020000
 8003720:	58020400 	.word	0x58020400

08003724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b0ba      	sub	sp, #232	; 0xe8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	22c0      	movs	r2, #192	; 0xc0
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f013 f959 	bl	80169fc <memset>
  if(huart->Instance==USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_UART_MspInit+0x130>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d17b      	bne.n	800384c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003754:	f04f 0201 	mov.w	r2, #1
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003760:	2318      	movs	r3, #24
 8003762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003766:	f107 0310 	add.w	r3, r7, #16
 800376a:	4618      	mov	r0, r3
 800376c:	f007 fb54 	bl	800ae18 <HAL_RCCEx_PeriphCLKConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003776:	f7ff fbc1 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_UART_MspInit+0x134>)
 800377c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003780:	4a35      	ldr	r2, [pc, #212]	; (8003858 <HAL_UART_MspInit+0x134>)
 8003782:	f043 0310 	orr.w	r3, r3, #16
 8003786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800378a:	4b33      	ldr	r3, [pc, #204]	; (8003858 <HAL_UART_MspInit+0x134>)
 800378c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_UART_MspInit+0x134>)
 800379a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800379e:	4a2e      	ldr	r2, [pc, #184]	; (8003858 <HAL_UART_MspInit+0x134>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_UART_MspInit+0x134>)
 80037aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037d0:	2307      	movs	r3, #7
 80037d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037da:	4619      	mov	r1, r3
 80037dc:	481f      	ldr	r0, [pc, #124]	; (800385c <HAL_UART_MspInit+0x138>)
 80037de:	f005 fa8f 	bl	8008d00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_UART_MspInit+0x13c>)
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_UART_MspInit+0x140>)
 80037e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_UART_MspInit+0x13c>)
 80037ea:	222a      	movs	r2, #42	; 0x2a
 80037ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_UART_MspInit+0x13c>)
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_UART_MspInit+0x13c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_UART_MspInit+0x13c>)
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <HAL_UART_MspInit+0x13c>)
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_UART_MspInit+0x13c>)
 800380a:	2200      	movs	r2, #0
 800380c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_UART_MspInit+0x13c>)
 8003810:	2200      	movs	r2, #0
 8003812:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_UART_MspInit+0x13c>)
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_UART_MspInit+0x13c>)
 800381c:	2200      	movs	r2, #0
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003820:	480f      	ldr	r0, [pc, #60]	; (8003860 <HAL_UART_MspInit+0x13c>)
 8003822:	f002 fc25 	bl	8006070 <HAL_DMA_Init>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800382c:	f7ff fb66 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <HAL_UART_MspInit+0x13c>)
 8003834:	67da      	str	r2, [r3, #124]	; 0x7c
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_UART_MspInit+0x13c>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	2105      	movs	r1, #5
 8003840:	2025      	movs	r0, #37	; 0x25
 8003842:	f001 ffe7 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003846:	2025      	movs	r0, #37	; 0x25
 8003848:	f001 fffe 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800384c:	bf00      	nop
 800384e:	37e8      	adds	r7, #232	; 0xe8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40011000 	.word	0x40011000
 8003858:	58024400 	.word	0x58024400
 800385c:	58020000 	.word	0x58020000
 8003860:	240006cc 	.word	0x240006cc
 8003864:	40020040 	.word	0x40020040

08003868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b090      	sub	sp, #64	; 0x40
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d827      	bhi.n	80038c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003876:	2200      	movs	r2, #0
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	2036      	movs	r0, #54	; 0x36
 800387c:	f001 ffca 	bl	8005814 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003880:	2036      	movs	r0, #54	; 0x36
 8003882:	f001 ffe1 	bl	8005848 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_InitTick+0xc4>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_InitTick+0xc8>)
 800388e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_InitTick+0xc8>)
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_InitTick+0xc8>)
 800389e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038aa:	f107 0210 	add.w	r2, r7, #16
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f007 fa6d 	bl	800ad94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_InitTick+0x6a>
 80038c4:	e001      	b.n	80038ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e02b      	b.n	8003922 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038ca:	f007 fa37 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 80038ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 80038d0:	e004      	b.n	80038dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038d2:	f007 fa33 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 80038d6:	4603      	mov	r3, r0
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_InitTick+0xcc>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	0c9b      	lsrs	r3, r3, #18
 80038e6:	3b01      	subs	r3, #1
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_InitTick+0xd0>)
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <HAL_InitTick+0xd4>)
 80038ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_InitTick+0xd0>)
 80038f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_InitTick+0xd0>)
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_InitTick+0xd0>)
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <HAL_InitTick+0xd0>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800390a:	480b      	ldr	r0, [pc, #44]	; (8003938 <HAL_InitTick+0xd0>)
 800390c:	f00a fef5 	bl	800e6fa <HAL_TIM_Base_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003916:	4808      	ldr	r0, [pc, #32]	; (8003938 <HAL_InitTick+0xd0>)
 8003918:	f00a ff46 	bl	800e7a8 <HAL_TIM_Base_Start_IT>
 800391c:	4603      	mov	r3, r0
 800391e:	e000      	b.n	8003922 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	3740      	adds	r7, #64	; 0x40
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	24000098 	.word	0x24000098
 8003930:	58024400 	.word	0x58024400
 8003934:	431bde83 	.word	0x431bde83
 8003938:	240010bc 	.word	0x240010bc
 800393c:	40001000 	.word	0x40001000

08003940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003944:	e7fe      	b.n	8003944 <NMI_Handler+0x4>

08003946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <HardFault_Handler+0x4>

0800394c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <MemManage_Handler+0x4>

08003952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <BusFault_Handler+0x4>

08003958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <UsageFault_Handler+0x4>

0800395e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <DMA1_Stream0_IRQHandler+0x10>)
 8003972:	f003 fea7 	bl	80076c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	24000204 	.word	0x24000204

08003980 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <DMA1_Stream1_IRQHandler+0x10>)
 8003986:	f003 fe9d 	bl	80076c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2400027c 	.word	0x2400027c

08003994 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <DMA1_Stream2_IRQHandler+0x10>)
 800399a:	f003 fe93 	bl	80076c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	240006cc 	.word	0x240006cc

080039a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <DMA1_Stream5_IRQHandler+0x10>)
 80039ae:	f003 fe89 	bl	80076c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	24000308 	.word	0x24000308

080039bc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <TIM1_BRK_IRQHandler+0x10>)
 80039c2:	f00b fa08 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	24000508 	.word	0x24000508

080039d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <TIM1_UP_IRQHandler+0x10>)
 80039d6:	f00b f9fe 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	24000508 	.word	0x24000508

080039e4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80039ea:	f00b f9f4 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	24000508 	.word	0x24000508

080039f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <TIM1_CC_IRQHandler+0x10>)
 80039fe:	f00b f9ea 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	24000508 	.word	0x24000508

08003a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <TIM2_IRQHandler+0x10>)
 8003a12:	f00b f9e0 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	24000554 	.word	0x24000554

08003a20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <TIM3_IRQHandler+0x10>)
 8003a26:	f00b f9d6 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	240005a0 	.word	0x240005a0

08003a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <TIM4_IRQHandler+0x10>)
 8003a3a:	f00b f9cc 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	240005ec 	.word	0x240005ec

08003a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <USART1_IRQHandler+0x10>)
 8003a4e:	f00c fd85 	bl	801055c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	24000638 	.word	0x24000638

08003a5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <TIM6_DAC_IRQHandler+0x20>)
 8003a62:	791b      	ldrb	r3, [r3, #4]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003a6a:	4804      	ldr	r0, [pc, #16]	; (8003a7c <TIM6_DAC_IRQHandler+0x20>)
 8003a6c:	f002 f881 	bl	8005b72 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003a70:	4803      	ldr	r0, [pc, #12]	; (8003a80 <TIM6_DAC_IRQHandler+0x24>)
 8003a72:	f00b f9b0 	bl	800edd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	240002f4 	.word	0x240002f4
 8003a80:	240010bc 	.word	0x240010bc

08003a84 <ITM_SendChar>:
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <ITM_SendChar+0x48>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <ITM_SendChar+0x48>)
 8003a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <ITM_SendChar+0x4c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ad0 <ITM_SendChar+0x4c>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	bf00      	nop
 8003aa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f8      	beq.n	8003aa8 <ITM_SendChar+0x24>
 8003ab6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000edfc 	.word	0xe000edfc
 8003ad0:	e0000e00 	.word	0xe0000e00

08003ad4 <_read>:
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e00a      	b.n	8003afc <_read+0x28>
 8003ae6:	f3af 8000 	nop.w
 8003aea:	4601      	mov	r1, r0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	60ba      	str	r2, [r7, #8]
 8003af2:	b2ca      	uxtb	r2, r1
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	dbf0      	blt.n	8003ae6 <_read+0x12>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_write>:
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e009      	b.n	8003b34 <_write+0x26>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	60ba      	str	r2, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ffab 	bl	8003a84 <ITM_SendChar>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	3301      	adds	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	dbf1      	blt.n	8003b20 <_write+0x12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <_close>:
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <_fstat>:
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	2300      	movs	r3, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <_isatty>:
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	2301      	movs	r3, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <_lseek>:
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <_sbrk>:
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <_sbrk+0x5c>)
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <_sbrk+0x60>)
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <_sbrk+0x64>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <_sbrk+0x22>
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <_sbrk+0x64>)
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <_sbrk+0x68>)
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <_sbrk+0x64>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d207      	bcs.n	8003bf0 <_sbrk+0x40>
 8003be0:	f012 fec4 	bl	801696c <__errno>
 8003be4:	4603      	mov	r3, r0
 8003be6:	220c      	movs	r2, #12
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bee:	e009      	b.n	8003c04 <_sbrk+0x54>
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <_sbrk+0x64>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <_sbrk+0x64>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <_sbrk+0x64>)
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	24080000 	.word	0x24080000
 8003c10:	00000400 	.word	0x00000400
 8003c14:	24001108 	.word	0x24001108
 8003c18:	24005a70 	.word	0x24005a70

08003c1c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003c20:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <SystemInit+0xe4>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	4a36      	ldr	r2, [pc, #216]	; (8003d00 <SystemInit+0xe4>)
 8003c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c30:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <SystemInit+0xe8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	2b06      	cmp	r3, #6
 8003c3a:	d807      	bhi.n	8003c4c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c3c:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <SystemInit+0xe8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <SystemInit+0xe8>)
 8003c46:	f043 0307 	orr.w	r3, r3, #7
 8003c4a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003c4c:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <SystemInit+0xec>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <SystemInit+0xec>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <SystemInit+0xec>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <SystemInit+0xec>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4929      	ldr	r1, [pc, #164]	; (8003d08 <SystemInit+0xec>)
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <SystemInit+0xf0>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c6a:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <SystemInit+0xe8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <SystemInit+0xe8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 030f 	bic.w	r3, r3, #15
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <SystemInit+0xe8>)
 8003c80:	f043 0307 	orr.w	r3, r3, #7
 8003c84:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <SystemInit+0xec>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <SystemInit+0xec>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <SystemInit+0xec>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <SystemInit+0xec>)
 8003c9a:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <SystemInit+0xf4>)
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <SystemInit+0xec>)
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <SystemInit+0xf8>)
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003ca4:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <SystemInit+0xec>)
 8003ca6:	4a1c      	ldr	r2, [pc, #112]	; (8003d18 <SystemInit+0xfc>)
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <SystemInit+0xec>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003cb0:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <SystemInit+0xec>)
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <SystemInit+0xfc>)
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <SystemInit+0xec>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <SystemInit+0xec>)
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <SystemInit+0xfc>)
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003cc2:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <SystemInit+0xec>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <SystemInit+0xec>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <SystemInit+0xec>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <SystemInit+0xec>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <SystemInit+0x100>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <SystemInit+0x104>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce6:	d202      	bcs.n	8003cee <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <SystemInit+0x108>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <SystemInit+0x10c>)
 8003cf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003cf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00
 8003d04:	52002000 	.word	0x52002000
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d10:	02020200 	.word	0x02020200
 8003d14:	01ff0000 	.word	0x01ff0000
 8003d18:	01010280 	.word	0x01010280
 8003d1c:	5c001000 	.word	0x5c001000
 8003d20:	ffff0000 	.word	0xffff0000
 8003d24:	51008108 	.word	0x51008108
 8003d28:	52004000 	.word	0x52004000

08003d2c <Reset_Handler>:
 8003d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d64 <LoopFillZerobss+0xe>
 8003d30:	f7ff ff74 	bl	8003c1c <SystemInit>
 8003d34:	480c      	ldr	r0, [pc, #48]	; (8003d68 <LoopFillZerobss+0x12>)
 8003d36:	490d      	ldr	r1, [pc, #52]	; (8003d6c <LoopFillZerobss+0x16>)
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <LoopFillZerobss+0x1a>)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e002      	b.n	8003d44 <LoopCopyDataInit>

08003d3e <CopyDataInit>:
 8003d3e:	58d4      	ldr	r4, [r2, r3]
 8003d40:	50c4      	str	r4, [r0, r3]
 8003d42:	3304      	adds	r3, #4

08003d44 <LoopCopyDataInit>:
 8003d44:	18c4      	adds	r4, r0, r3
 8003d46:	428c      	cmp	r4, r1
 8003d48:	d3f9      	bcc.n	8003d3e <CopyDataInit>
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <LoopFillZerobss+0x1e>)
 8003d4c:	4c0a      	ldr	r4, [pc, #40]	; (8003d78 <LoopFillZerobss+0x22>)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e001      	b.n	8003d56 <LoopFillZerobss>

08003d52 <FillZerobss>:
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	3204      	adds	r2, #4

08003d56 <LoopFillZerobss>:
 8003d56:	42a2      	cmp	r2, r4
 8003d58:	d3fb      	bcc.n	8003d52 <FillZerobss>
 8003d5a:	f012 fe0d 	bl	8016978 <__libc_init_array>
 8003d5e:	f7fd f913 	bl	8000f88 <main>
 8003d62:	4770      	bx	lr
 8003d64:	24080000 	.word	0x24080000
 8003d68:	24000000 	.word	0x24000000
 8003d6c:	24000108 	.word	0x24000108
 8003d70:	08017864 	.word	0x08017864
 8003d74:	24000120 	.word	0x24000120
 8003d78:	24005a70 	.word	0x24005a70

08003d7c <ADC3_IRQHandler>:
 8003d7c:	e7fe      	b.n	8003d7c <ADC3_IRQHandler>
	...

08003d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d86:	2003      	movs	r0, #3
 8003d88:	f001 fd39 	bl	80057fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d8c:	f006 fe2c 	bl	800a9e8 <HAL_RCC_GetSysClockFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_Init+0x68>)
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	4913      	ldr	r1, [pc, #76]	; (8003dec <HAL_Init+0x6c>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_Init+0x68>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <HAL_Init+0x6c>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <HAL_Init+0x70>)
 8003dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <HAL_Init+0x74>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dca:	2005      	movs	r0, #5
 8003dcc:	f7ff fd4c 	bl	8003868 <HAL_InitTick>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e002      	b.n	8003de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dda:	f7ff f895 	bl	8002f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	58024400 	.word	0x58024400
 8003dec:	080177b0 	.word	0x080177b0
 8003df0:	24000094 	.word	0x24000094
 8003df4:	24000090 	.word	0x24000090

08003df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_IncTick+0x20>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_IncTick+0x24>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_IncTick+0x24>)
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2400009c 	.word	0x2400009c
 8003e1c:	2400110c 	.word	0x2400110c

08003e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return uwTick;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_GetTick+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2400110c 	.word	0x2400110c

08003e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <HAL_GetREVID+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0c1b      	lsrs	r3, r3, #16
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	5c001000 	.word	0x5c001000

08003e50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	4904      	ldr	r1, [pc, #16]	; (8003e78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	58000400 	.word	0x58000400

08003e7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3360      	adds	r3, #96	; 0x60
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b087      	sub	sp, #28
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3360      	adds	r3, #96	; 0x60
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	601a      	str	r2, [r3, #0]
  }
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3330      	adds	r3, #48	; 0x30
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	4413      	add	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	211f      	movs	r1, #31
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	f003 011f 	and.w	r1, r3, #31
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f023 0203 	bic.w	r2, r3, #3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3314      	adds	r3, #20
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	0e5b      	lsrs	r3, r3, #25
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	4413      	add	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	0d1b      	lsrs	r3, r3, #20
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2107      	movs	r1, #7
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	401a      	ands	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	0d1b      	lsrs	r3, r3, #20
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0318 	and.w	r3, r3, #24
 80040aa:	4908      	ldr	r1, [pc, #32]	; (80040cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80040ac:	40d9      	lsrs	r1, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	400b      	ands	r3, r1
 80040b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	000fffff 	.word	0x000fffff

080040d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 031f 	and.w	r3, r3, #31
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <LL_ADC_DisableDeepPowerDown+0x20>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6093      	str	r3, [r2, #8]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	5fffffc0 	.word	0x5fffffc0

08004110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004124:	d101      	bne.n	800412a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <LL_ADC_EnableInternalRegulator+0x24>)
 8004146:	4013      	ands	r3, r2
 8004148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	6fffffc0 	.word	0x6fffffc0

08004160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004174:	d101      	bne.n	800417a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <LL_ADC_Enable+0x24>)
 8004196:	4013      	ands	r3, r2
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	7fffffc0 	.word	0x7fffffc0

080041b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <LL_ADC_Disable+0x24>)
 80041be:	4013      	ands	r3, r2
 80041c0:	f043 0202 	orr.w	r2, r3, #2
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	7fffffc0 	.word	0x7fffffc0

080041d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <LL_ADC_IsEnabled+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_ADC_IsEnabled+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	d101      	bne.n	8004216 <LL_ADC_IsDisableOngoing+0x18>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <LL_ADC_IsDisableOngoing+0x1a>
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <LL_ADC_REG_StartConversion+0x24>)
 8004232:	4013      	ands	r3, r2
 8004234:	f043 0204 	orr.w	r2, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	7fffffc0 	.word	0x7fffffc0

0800424c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b04      	cmp	r3, #4
 800425e:	d101      	bne.n	8004264 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b08      	cmp	r3, #8
 8004284:	d101      	bne.n	800428a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e18f      	b.n	80045d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe fe3f 	bl	8002f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff19 	bl	8004110 <LL_ADC_IsDeepPowerDownEnabled>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff feff 	bl	80040ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff34 	bl	8004160 <LL_ADC_IsInternalRegulatorEnabled>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d114      	bne.n	8004328 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff18 	bl	8004138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004308:	4b87      	ldr	r3, [pc, #540]	; (8004528 <HAL_ADC_Init+0x290>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	4a87      	ldr	r2, [pc, #540]	; (800452c <HAL_ADC_Init+0x294>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	3301      	adds	r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800431a:	e002      	b.n	8004322 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff17 	bl	8004160 <LL_ADC_IsInternalRegulatorEnabled>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10d      	bne.n	8004354 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 0210 	orr.w	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f043 0201 	orr.w	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff77 	bl	800424c <LL_ADC_REG_IsConversionOngoing>
 800435e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	f040 8129 	bne.w	80045c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 8125 	bne.w	80045c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff24 	bl	80041d8 <LL_ADC_IsEnabled>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d136      	bne.n	8004404 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a65      	ldr	r2, [pc, #404]	; (8004530 <HAL_ADC_Init+0x298>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_ADC_Init+0x112>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_ADC_Init+0x29c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10e      	bne.n	80043c8 <HAL_ADC_Init+0x130>
 80043aa:	4861      	ldr	r0, [pc, #388]	; (8004530 <HAL_ADC_Init+0x298>)
 80043ac:	f7ff ff14 	bl	80041d8 <LL_ADC_IsEnabled>
 80043b0:	4604      	mov	r4, r0
 80043b2:	4860      	ldr	r0, [pc, #384]	; (8004534 <HAL_ADC_Init+0x29c>)
 80043b4:	f7ff ff10 	bl	80041d8 <LL_ADC_IsEnabled>
 80043b8:	4603      	mov	r3, r0
 80043ba:	4323      	orrs	r3, r4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e008      	b.n	80043da <HAL_ADC_Init+0x142>
 80043c8:	485b      	ldr	r0, [pc, #364]	; (8004538 <HAL_ADC_Init+0x2a0>)
 80043ca:	f7ff ff05 	bl	80041d8 <LL_ADC_IsEnabled>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d012      	beq.n	8004404 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a53      	ldr	r2, [pc, #332]	; (8004530 <HAL_ADC_Init+0x298>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_Init+0x15a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a51      	ldr	r2, [pc, #324]	; (8004534 <HAL_ADC_Init+0x29c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_Init+0x15e>
 80043f2:	4a52      	ldr	r2, [pc, #328]	; (800453c <HAL_ADC_Init+0x2a4>)
 80043f4:	e000      	b.n	80043f8 <HAL_ADC_Init+0x160>
 80043f6:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_ADC_Init+0x2a8>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7ff fd3c 	bl	8003e7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004404:	f7ff fd18 	bl	8003e38 <HAL_GetREVID>
 8004408:	4603      	mov	r3, r0
 800440a:	f241 0203 	movw	r2, #4099	; 0x1003
 800440e:	4293      	cmp	r3, r2
 8004410:	d914      	bls.n	800443c <HAL_ADC_Init+0x1a4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b10      	cmp	r3, #16
 8004418:	d110      	bne.n	800443c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7d5b      	ldrb	r3, [r3, #21]
 800441e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004424:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800442a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7f1b      	ldrb	r3, [r3, #28]
 8004430:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004432:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004434:	f043 030c 	orr.w	r3, r3, #12
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e00d      	b.n	8004458 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7d5b      	ldrb	r3, [r3, #21]
 8004440:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004446:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800444c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7f1b      	ldrb	r3, [r3, #28]
 8004452:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7f1b      	ldrb	r3, [r3, #28]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	3b01      	subs	r3, #1
 8004466:	045b      	lsls	r3, r3, #17
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_ADC_Init+0x2ac>)
 8004492:	4013      	ands	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	430b      	orrs	r3, r1
 800449c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fed2 	bl	800424c <LL_ADC_REG_IsConversionOngoing>
 80044a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fedf 	bl	8004272 <LL_ADC_INJ_IsConversionOngoing>
 80044b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d15f      	bne.n	800457c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d15c      	bne.n	800457c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7d1b      	ldrb	r3, [r3, #20]
 80044c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <HAL_ADC_Init+0x2b0>)
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	69b9      	ldr	r1, [r7, #24]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d130      	bne.n	8004550 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_ADC_Init+0x2b4>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004502:	3a01      	subs	r2, #1
 8004504:	0411      	lsls	r1, r2, #16
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800450a:	4311      	orrs	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004516:	430a      	orrs	r2, r1
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	611a      	str	r2, [r3, #16]
 8004524:	e01c      	b.n	8004560 <HAL_ADC_Init+0x2c8>
 8004526:	bf00      	nop
 8004528:	24000090 	.word	0x24000090
 800452c:	053e2d63 	.word	0x053e2d63
 8004530:	40022000 	.word	0x40022000
 8004534:	40022100 	.word	0x40022100
 8004538:	58026000 	.word	0x58026000
 800453c:	40022300 	.word	0x40022300
 8004540:	58026300 	.word	0x58026300
 8004544:	fff0c003 	.word	0xfff0c003
 8004548:	ffffbffc 	.word	0xffffbffc
 800454c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fdec 	bl	8005154 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10c      	bne.n	800459e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f023 010f 	bic.w	r1, r3, #15
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	1e5a      	subs	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
 800459c:	e007      	b.n	80045ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 020f 	bic.w	r2, r2, #15
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
 80045be:	e007      	b.n	80045d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f043 0210 	orr.w	r2, r3, #16
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a55      	ldr	r2, [pc, #340]	; (8004744 <HAL_ADC_Start_DMA+0x168>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_ADC_Start_DMA+0x20>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a54      	ldr	r2, [pc, #336]	; (8004748 <HAL_ADC_Start_DMA+0x16c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_ADC_Start_DMA+0x24>
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_ADC_Start_DMA+0x170>)
 80045fe:	e000      	b.n	8004602 <HAL_ADC_Start_DMA+0x26>
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_ADC_Start_DMA+0x174>)
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fd64 	bl	80040d0 <LL_ADC_GetMultimode>
 8004608:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fe1c 	bl	800424c <LL_ADC_REG_IsConversionOngoing>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 808c 	bne.w	8004734 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_ADC_Start_DMA+0x4e>
 8004626:	2302      	movs	r3, #2
 8004628:	e087      	b.n	800473a <HAL_ADC_Start_DMA+0x15e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d002      	beq.n	8004644 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b09      	cmp	r3, #9
 8004642:	d170      	bne.n	8004726 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fc07 	bl	8004e58 <ADC_Enable>
 800464a:	4603      	mov	r3, r0
 800464c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d163      	bne.n	800471c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004658:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_ADC_Start_DMA+0x178>)
 800465a:	4013      	ands	r3, r2
 800465c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_ADC_Start_DMA+0x16c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d002      	beq.n	8004674 <HAL_ADC_Start_DMA+0x98>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	e000      	b.n	8004676 <HAL_ADC_Start_DMA+0x9a>
 8004674:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_ADC_Start_DMA+0x168>)
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	4293      	cmp	r3, r2
 800467c:	d002      	beq.n	8004684 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	f023 0206 	bic.w	r2, r3, #6
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	659a      	str	r2, [r3, #88]	; 0x58
 80046a8:	e002      	b.n	80046b0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	4a28      	ldr	r2, [pc, #160]	; (8004758 <HAL_ADC_Start_DMA+0x17c>)
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	4a27      	ldr	r2, [pc, #156]	; (800475c <HAL_ADC_Start_DMA+0x180>)
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c4:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_ADC_Start_DMA+0x184>)
 80046c6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	221c      	movs	r2, #28
 80046ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0210 	orr.w	r2, r2, #16
 80046e6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7ff fc89 	bl	800400a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3340      	adds	r3, #64	; 0x40
 8004702:	4619      	mov	r1, r3
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f002 f80e 	bl	8006728 <HAL_DMA_Start_IT>
 800470c:	4603      	mov	r3, r0
 800470e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fd85 	bl	8004224 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800471a:	e00d      	b.n	8004738 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004724:	e008      	b.n	8004738 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004732:	e001      	b.n	8004738 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40022000 	.word	0x40022000
 8004748:	40022100 	.word	0x40022100
 800474c:	40022300 	.word	0x40022300
 8004750:	58026300 	.word	0x58026300
 8004754:	fffff0fe 	.word	0xfffff0fe
 8004758:	0800502b 	.word	0x0800502b
 800475c:	08005103 	.word	0x08005103
 8004760:	0800511f 	.word	0x0800511f

08004764 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b0a1      	sub	sp, #132	; 0x84
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a65      	ldr	r2, [pc, #404]	; (8004950 <HAL_ADC_ConfigChannel+0x1b0>)
 80047ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x2a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e32e      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x688>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fd38 	bl	800424c <LL_ADC_REG_IsConversionOngoing>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 8313 	bne.w	8004e0a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	db2c      	blt.n	8004846 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d108      	bne.n	800480a <HAL_ADC_ConfigChannel+0x6a>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0e9b      	lsrs	r3, r3, #26
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2201      	movs	r2, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	e016      	b.n	8004838 <HAL_ADC_ConfigChannel+0x98>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800481c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e003      	b.n	800482e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2201      	movs	r2, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	69d1      	ldr	r1, [r2, #28]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	430b      	orrs	r3, r1
 8004844:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f7ff fbad 	bl	8003fb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fcf5 	bl	800424c <LL_ADC_REG_IsConversionOngoing>
 8004862:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fd02 	bl	8004272 <LL_ADC_INJ_IsConversionOngoing>
 800486e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 80b8 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 80b4 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	461a      	mov	r2, r3
 800488e:	f7ff fbcf 	bl	8004030 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004892:	4b30      	ldr	r3, [pc, #192]	; (8004954 <HAL_ADC_ConfigChannel+0x1b4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800489a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800489e:	d10b      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x118>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	e01d      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x154>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <HAL_ADC_ConfigChannel+0x13e>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	e00a      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x154>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d02c      	beq.n	8004958 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490c:	f7ff faea 	bl	8003ee4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6919      	ldr	r1, [r3, #16]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	7e5b      	ldrb	r3, [r3, #25]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d102      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x186>
 8004920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004924:	e000      	b.n	8004928 <HAL_ADC_ConfigChannel+0x188>
 8004926:	2300      	movs	r3, #0
 8004928:	461a      	mov	r2, r3
 800492a:	f7ff fb14 	bl	8003f56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6919      	ldr	r1, [r3, #16]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	7e1b      	ldrb	r3, [r3, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d102      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x1a4>
 800493e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004942:	e000      	b.n	8004946 <HAL_ADC_ConfigChannel+0x1a6>
 8004944:	2300      	movs	r3, #0
 8004946:	461a      	mov	r2, r3
 8004948:	f7ff faec 	bl	8003f24 <LL_ADC_SetDataRightShift>
 800494c:	e04c      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x248>
 800494e:	bf00      	nop
 8004950:	47ff0000 	.word	0x47ff0000
 8004954:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	069b      	lsls	r3, r3, #26
 8004968:	429a      	cmp	r2, r3
 800496a:	d107      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800497a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	069b      	lsls	r3, r3, #26
 800498c:	429a      	cmp	r2, r3
 800498e:	d107      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800499e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	069b      	lsls	r3, r3, #26
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d107      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049c2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	069b      	lsls	r3, r3, #26
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fbf3 	bl	80041d8 <LL_ADC_IsEnabled>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f040 8211 	bne.w	8004e1c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7ff fb3e 	bl	8004088 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4aa1      	ldr	r2, [pc, #644]	; (8004c98 <HAL_ADC_ConfigChannel+0x4f8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	f040 812e 	bne.w	8004c74 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x2a0>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	2b09      	cmp	r3, #9
 8004a36:	bf94      	ite	ls
 8004a38:	2301      	movls	r3, #1
 8004a3a:	2300      	movhi	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e019      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x2d4>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004a58:	2320      	movs	r3, #32
 8004a5a:	e003      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	3301      	adds	r3, #1
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2b09      	cmp	r3, #9
 8004a6c:	bf94      	ite	ls
 8004a6e:	2301      	movls	r3, #1
 8004a70:	2300      	movhi	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d079      	beq.n	8004b6c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d107      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x2f4>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0e9b      	lsrs	r3, r3, #26
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	069b      	lsls	r3, r3, #26
 8004a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a92:	e015      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x320>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	fa93 f3a3 	rbit	r3, r3
 8004aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004aac:	2320      	movs	r3, #32
 8004aae:	e003      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	069b      	lsls	r3, r3, #26
 8004abc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x340>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	e017      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x370>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae8:	fa93 f3a3 	rbit	r3, r3
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004af8:	2320      	movs	r3, #32
 8004afa:	e003      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	3301      	adds	r3, #1
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	ea42 0103 	orr.w	r1, r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x396>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	0e9b      	lsrs	r3, r3, #26
 8004b26:	3301      	adds	r3, #1
 8004b28:	f003 021f 	and.w	r2, r3, #31
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4413      	add	r3, r2
 8004b32:	051b      	lsls	r3, r3, #20
 8004b34:	e018      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x3c8>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e003      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f003 021f 	and.w	r2, r3, #31
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	e07e      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d107      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x3e8>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	0e9b      	lsrs	r3, r3, #26
 8004b7e:	3301      	adds	r3, #1
 8004b80:	069b      	lsls	r3, r3, #26
 8004b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b86:	e015      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x414>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	fa93 f3a3 	rbit	r3, r3
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	e003      	b.n	8004bac <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	3301      	adds	r3, #1
 8004bae:	069b      	lsls	r3, r3, #26
 8004bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x434>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	0e9b      	lsrs	r3, r3, #26
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	e017      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x464>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	61bb      	str	r3, [r7, #24]
  return result;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004bec:	2320      	movs	r3, #32
 8004bee:	e003      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	ea42 0103 	orr.w	r1, r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10d      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x490>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	0e9b      	lsrs	r3, r3, #26
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f003 021f 	and.w	r2, r3, #31
 8004c20:	4613      	mov	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	3b1e      	subs	r3, #30
 8004c28:	051b      	lsls	r3, r3, #20
 8004c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	e01b      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x4c8>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e003      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	f003 021f 	and.w	r2, r3, #31
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	3b1e      	subs	r3, #30
 8004c62:	051b      	lsls	r3, r3, #20
 8004c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	6892      	ldr	r2, [r2, #8]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f7ff f9de 	bl	8004030 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f280 80cf 	bge.w	8004e1c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <HAL_ADC_ConfigChannel+0x4fc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0x4f2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_ADC_ConfigChannel+0x500>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10a      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x508>
 8004c92:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HAL_ADC_ConfigChannel+0x504>)
 8004c94:	e009      	b.n	8004caa <HAL_ADC_ConfigChannel+0x50a>
 8004c96:	bf00      	nop
 8004c98:	47ff0000 	.word	0x47ff0000
 8004c9c:	40022000 	.word	0x40022000
 8004ca0:	40022100 	.word	0x40022100
 8004ca4:	40022300 	.word	0x40022300
 8004ca8:	4b61      	ldr	r3, [pc, #388]	; (8004e30 <HAL_ADC_ConfigChannel+0x690>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f90c 	bl	8003ec8 <LL_ADC_GetCommonPathInternalCh>
 8004cb0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a5f      	ldr	r2, [pc, #380]	; (8004e34 <HAL_ADC_ConfigChannel+0x694>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_ADC_ConfigChannel+0x526>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a5d      	ldr	r2, [pc, #372]	; (8004e38 <HAL_ADC_ConfigChannel+0x698>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x544>
 8004cc6:	485b      	ldr	r0, [pc, #364]	; (8004e34 <HAL_ADC_ConfigChannel+0x694>)
 8004cc8:	f7ff fa86 	bl	80041d8 <LL_ADC_IsEnabled>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	485a      	ldr	r0, [pc, #360]	; (8004e38 <HAL_ADC_ConfigChannel+0x698>)
 8004cd0:	f7ff fa82 	bl	80041d8 <LL_ADC_IsEnabled>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4323      	orrs	r3, r4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e008      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x556>
 8004ce4:	4855      	ldr	r0, [pc, #340]	; (8004e3c <HAL_ADC_ConfigChannel+0x69c>)
 8004ce6:	f7ff fa77 	bl	80041d8 <LL_ADC_IsEnabled>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d07d      	beq.n	8004df6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a50      	ldr	r2, [pc, #320]	; (8004e40 <HAL_ADC_ConfigChannel+0x6a0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d130      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x5c6>
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d12b      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a4a      	ldr	r2, [pc, #296]	; (8004e3c <HAL_ADC_ConfigChannel+0x69c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	f040 8081 	bne.w	8004e1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a45      	ldr	r2, [pc, #276]	; (8004e34 <HAL_ADC_ConfigChannel+0x694>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_ADC_ConfigChannel+0x58e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a43      	ldr	r2, [pc, #268]	; (8004e38 <HAL_ADC_ConfigChannel+0x698>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x592>
 8004d2e:	4a45      	ldr	r2, [pc, #276]	; (8004e44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d30:	e000      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x594>
 8004d32:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <HAL_ADC_ConfigChannel+0x690>)
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7ff f8b0 	bl	8003ea2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_ADC_ConfigChannel+0x6a8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <HAL_ADC_ConfigChannel+0x6ac>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	3301      	adds	r3, #1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d56:	e002      	b.n	8004d5e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f9      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d64:	e05a      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d11e      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x60e>
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d119      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <HAL_ADC_ConfigChannel+0x69c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d14b      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_ADC_ConfigChannel+0x694>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_ADC_ConfigChannel+0x5f8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <HAL_ADC_ConfigChannel+0x698>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x5fc>
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d9a:	e000      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x5fe>
 8004d9c:	4a24      	ldr	r2, [pc, #144]	; (8004e30 <HAL_ADC_ConfigChannel+0x690>)
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7ff f87b 	bl	8003ea2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dac:	e036      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <HAL_ADC_ConfigChannel+0x6b4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d131      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12c      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <HAL_ADC_ConfigChannel+0x69c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d127      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_ADC_ConfigChannel+0x694>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0x640>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_ADC_ConfigChannel+0x698>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x644>
 8004de0:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004de2:	e000      	b.n	8004de6 <HAL_ADC_ConfigChannel+0x646>
 8004de4:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <HAL_ADC_ConfigChannel+0x690>)
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7ff f857 	bl	8003ea2 <LL_ADC_SetCommonPathInternalCh>
 8004df4:	e012      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e08:	e008      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3784      	adds	r7, #132	; 0x84
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd90      	pop	{r4, r7, pc}
 8004e30:	58026300 	.word	0x58026300
 8004e34:	40022000 	.word	0x40022000
 8004e38:	40022100 	.word	0x40022100
 8004e3c:	58026000 	.word	0x58026000
 8004e40:	cb840000 	.word	0xcb840000
 8004e44:	40022300 	.word	0x40022300
 8004e48:	24000090 	.word	0x24000090
 8004e4c:	053e2d63 	.word	0x053e2d63
 8004e50:	c7520000 	.word	0xc7520000
 8004e54:	cfb80000 	.word	0xcfb80000

08004e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff f9b7 	bl	80041d8 <LL_ADC_IsEnabled>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d16e      	bne.n	8004f4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <ADC_Enable+0x100>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00d      	beq.n	8004e9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	f043 0210 	orr.w	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e05a      	b.n	8004f50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff f972 	bl	8004188 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ea4:	f7fe ffbc 	bl	8003e20 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2b      	ldr	r2, [pc, #172]	; (8004f5c <ADC_Enable+0x104>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <ADC_Enable+0x66>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <ADC_Enable+0x108>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <ADC_Enable+0x6a>
 8004ebe:	4b29      	ldr	r3, [pc, #164]	; (8004f64 <ADC_Enable+0x10c>)
 8004ec0:	e000      	b.n	8004ec4 <ADC_Enable+0x6c>
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <ADC_Enable+0x110>)
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff f903 	bl	80040d0 <LL_ADC_GetMultimode>
 8004eca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <ADC_Enable+0x108>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d002      	beq.n	8004edc <ADC_Enable+0x84>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	e000      	b.n	8004ede <ADC_Enable+0x86>
 8004edc:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <ADC_Enable+0x104>)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02c      	beq.n	8004f40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d130      	bne.n	8004f4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eec:	e028      	b.n	8004f40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff f970 	bl	80041d8 <LL_ADC_IsEnabled>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff f940 	bl	8004188 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f08:	f7fe ff8a 	bl	8003e20 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d914      	bls.n	8004f40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d00d      	beq.n	8004f40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0210 	orr.w	r2, r3, #16
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e007      	b.n	8004f50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d1cf      	bne.n	8004eee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	8000003f 	.word	0x8000003f
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022100 	.word	0x40022100
 8004f64:	40022300 	.word	0x40022300
 8004f68:	58026300 	.word	0x58026300

08004f6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff f940 	bl	80041fe <LL_ADC_IsDisableOngoing>
 8004f7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff f927 	bl	80041d8 <LL_ADC_IsEnabled>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d047      	beq.n	8005020 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d144      	bne.n	8005020 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030d 	and.w	r3, r3, #13
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10c      	bne.n	8004fbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff f901 	bl	80041b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fb6:	f7fe ff33 	bl	8003e20 <HAL_GetTick>
 8004fba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fbc:	e029      	b.n	8005012 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e023      	b.n	8005022 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fda:	f7fe ff21 	bl	8003e20 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d914      	bls.n	8005012 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0210 	orr.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1dc      	bne.n	8004fda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d14b      	bne.n	80050dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d021      	beq.n	80050a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe ff92 	bl	8003f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d032      	beq.n	80050d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d12b      	bne.n	80050d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d11f      	bne.n	80050d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
 80050a0:	e018      	b.n	80050d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d111      	bne.n	80050d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fb45 	bl	8004764 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050da:	e00e      	b.n	80050fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fb4f 	bl	800478c <HAL_ADC_ErrorCallback>
}
 80050ee:	e004      	b.n	80050fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fb31 	bl	8004778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fb21 	bl	800478c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a7a      	ldr	r2, [pc, #488]	; (800534c <ADC_ConfigureBoostMode+0x1f8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <ADC_ConfigureBoostMode+0x1c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a79      	ldr	r2, [pc, #484]	; (8005350 <ADC_ConfigureBoostMode+0x1fc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d109      	bne.n	8005184 <ADC_ConfigureBoostMode+0x30>
 8005170:	4b78      	ldr	r3, [pc, #480]	; (8005354 <ADC_ConfigureBoostMode+0x200>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e008      	b.n	8005196 <ADC_ConfigureBoostMode+0x42>
 8005184:	4b74      	ldr	r3, [pc, #464]	; (8005358 <ADC_ConfigureBoostMode+0x204>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01c      	beq.n	80051d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800519a:	f005 fd9f 	bl	800acdc <HAL_RCC_GetHCLKFreq>
 800519e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a8:	d010      	beq.n	80051cc <ADC_ConfigureBoostMode+0x78>
 80051aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051ae:	d873      	bhi.n	8005298 <ADC_ConfigureBoostMode+0x144>
 80051b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b4:	d002      	beq.n	80051bc <ADC_ConfigureBoostMode+0x68>
 80051b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ba:	d16d      	bne.n	8005298 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	60fb      	str	r3, [r7, #12]
        break;
 80051ca:	e068      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	60fb      	str	r3, [r7, #12]
        break;
 80051d2:	e064      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051d8:	f04f 0100 	mov.w	r1, #0
 80051dc:	f007 f826 	bl	800c22c <HAL_RCCEx_GetPeriphCLKFreq>
 80051e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051ea:	d051      	beq.n	8005290 <ADC_ConfigureBoostMode+0x13c>
 80051ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051f0:	d854      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 80051f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051f6:	d047      	beq.n	8005288 <ADC_ConfigureBoostMode+0x134>
 80051f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051fc:	d84e      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 80051fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005202:	d03d      	beq.n	8005280 <ADC_ConfigureBoostMode+0x12c>
 8005204:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005208:	d848      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 800520a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520e:	d033      	beq.n	8005278 <ADC_ConfigureBoostMode+0x124>
 8005210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005214:	d842      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 8005216:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800521a:	d029      	beq.n	8005270 <ADC_ConfigureBoostMode+0x11c>
 800521c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005220:	d83c      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 8005222:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005226:	d01a      	beq.n	800525e <ADC_ConfigureBoostMode+0x10a>
 8005228:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800522c:	d836      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 800522e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005232:	d014      	beq.n	800525e <ADC_ConfigureBoostMode+0x10a>
 8005234:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005238:	d830      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523e:	d00e      	beq.n	800525e <ADC_ConfigureBoostMode+0x10a>
 8005240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005244:	d82a      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 8005246:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800524a:	d008      	beq.n	800525e <ADC_ConfigureBoostMode+0x10a>
 800524c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005250:	d824      	bhi.n	800529c <ADC_ConfigureBoostMode+0x148>
 8005252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005256:	d002      	beq.n	800525e <ADC_ConfigureBoostMode+0x10a>
 8005258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800525c:	d11e      	bne.n	800529c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	0c9b      	lsrs	r3, r3, #18
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	60fb      	str	r3, [r7, #12]
        break;
 800526e:	e016      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	60fb      	str	r3, [r7, #12]
        break;
 8005276:	e012      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	60fb      	str	r3, [r7, #12]
        break;
 800527e:	e00e      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	60fb      	str	r3, [r7, #12]
        break;
 8005286:	e00a      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	09db      	lsrs	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
        break;
 800528e:	e006      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	60fb      	str	r3, [r7, #12]
        break;
 8005296:	e002      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800529c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800529e:	f7fe fdcb 	bl	8003e38 <HAL_GetREVID>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d815      	bhi.n	80052d8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <ADC_ConfigureBoostMode+0x208>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d908      	bls.n	80052c6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052c4:	e03e      	b.n	8005344 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d4:	609a      	str	r2, [r3, #8]
}
 80052d6:	e035      	b.n	8005344 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <ADC_ConfigureBoostMode+0x20c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d808      	bhi.n	80052f8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80052f4:	609a      	str	r2, [r3, #8]
}
 80052f6:	e025      	b.n	8005344 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <ADC_ConfigureBoostMode+0x210>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d80a      	bhi.n	8005316 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	e016      	b.n	8005344 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <ADC_ConfigureBoostMode+0x214>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d80a      	bhi.n	8005334 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	609a      	str	r2, [r3, #8]
}
 8005332:	e007      	b.n	8005344 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40022000 	.word	0x40022000
 8005350:	40022100 	.word	0x40022100
 8005354:	40022300 	.word	0x40022300
 8005358:	58026300 	.word	0x58026300
 800535c:	01312d00 	.word	0x01312d00
 8005360:	005f5e10 	.word	0x005f5e10
 8005364:	00bebc20 	.word	0x00bebc20
 8005368:	017d7840 	.word	0x017d7840

0800536c <LL_ADC_IsEnabled>:
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <LL_ADC_IsEnabled+0x18>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <LL_ADC_IsEnabled+0x1a>
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <LL_ADC_StartCalibration>:
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <LL_ADC_StartCalibration+0x38>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053b4:	430a      	orrs	r2, r1
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	3ffeffc0 	.word	0x3ffeffc0

080053d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e4:	d101      	bne.n	80053ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d101      	bne.n	8005410 <LL_ADC_REG_IsConversionOngoing+0x18>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_ADCEx_Calibration_Start+0x1e>
 800543a:	2302      	movs	r3, #2
 800543c:	e04c      	b.n	80054d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff fd90 	bl	8004f6c <ADC_Disable>
 800544c:	4603      	mov	r3, r0
 800544e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d135      	bne.n	80054c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800545a:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800545c:	4013      	ands	r3, r2
 800545e:	f043 0202 	orr.w	r2, r3, #2
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ff90 	bl	8005394 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005474:	e014      	b.n	80054a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	3301      	adds	r3, #1
 800547a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4a19      	ldr	r2, [pc, #100]	; (80054e4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d30d      	bcc.n	80054a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f023 0312 	bic.w	r3, r3, #18
 800548c:	f043 0210 	orr.w	r2, r3, #16
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e01b      	b.n	80054d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ff93 	bl	80053d0 <LL_ADC_IsCalibrationOnGoing>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e2      	bne.n	8005476 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	f023 0303 	bic.w	r3, r3, #3
 80054b8:	f043 0201 	orr.w	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
 80054c0:	e005      	b.n	80054ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0210 	orr.w	r2, r3, #16
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	ffffeefd 	.word	0xffffeefd
 80054e4:	25c3f800 	.word	0x25c3f800

080054e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b09f      	sub	sp, #124	; 0x7c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005502:	2302      	movs	r3, #2
 8005504:	e0be      	b.n	8005684 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800550e:	2300      	movs	r3, #0
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005512:	2300      	movs	r3, #0
 8005514:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a5c      	ldr	r2, [pc, #368]	; (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d102      	bne.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005520:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	e001      	b.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e09d      	b.n	8005684 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff ff54 	bl	80053f8 <LL_ADC_REG_IsConversionOngoing>
 8005550:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff ff4e 	bl	80053f8 <LL_ADC_REG_IsConversionOngoing>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d17f      	bne.n	8005662 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005564:	2b00      	cmp	r3, #0
 8005566:	d17c      	bne.n	8005662 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a47      	ldr	r2, [pc, #284]	; (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a46      	ldr	r2, [pc, #280]	; (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800557e:	e000      	b.n	8005582 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005580:	4b45      	ldr	r3, [pc, #276]	; (8005698 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005582:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d039      	beq.n	8005600 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800558c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	431a      	orrs	r2, r3
 800559a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3a      	ldr	r2, [pc, #232]	; (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a38      	ldr	r2, [pc, #224]	; (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10e      	bne.n	80055d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80055b2:	4836      	ldr	r0, [pc, #216]	; (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055b4:	f7ff feda 	bl	800536c <LL_ADC_IsEnabled>
 80055b8:	4604      	mov	r4, r0
 80055ba:	4835      	ldr	r0, [pc, #212]	; (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055bc:	f7ff fed6 	bl	800536c <LL_ADC_IsEnabled>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4323      	orrs	r3, r4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e008      	b.n	80055e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80055d0:	4832      	ldr	r0, [pc, #200]	; (800569c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055d2:	f7ff fecb 	bl	800536c <LL_ADC_IsEnabled>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d047      	beq.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	4b2d      	ldr	r3, [pc, #180]	; (80056a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	6811      	ldr	r1, [r2, #0]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	6892      	ldr	r2, [r2, #8]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	431a      	orrs	r2, r3
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055fe:	e03a      	b.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1e      	ldr	r2, [pc, #120]	; (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d004      	beq.n	8005620 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1d      	ldr	r2, [pc, #116]	; (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10e      	bne.n	800563e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005620:	481a      	ldr	r0, [pc, #104]	; (800568c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005622:	f7ff fea3 	bl	800536c <LL_ADC_IsEnabled>
 8005626:	4604      	mov	r4, r0
 8005628:	4819      	ldr	r0, [pc, #100]	; (8005690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800562a:	f7ff fe9f 	bl	800536c <LL_ADC_IsEnabled>
 800562e:	4603      	mov	r3, r0
 8005630:	4323      	orrs	r3, r4
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e008      	b.n	8005650 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800563e:	4817      	ldr	r0, [pc, #92]	; (800569c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005640:	f7ff fe94 	bl	800536c <LL_ADC_IsEnabled>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800565a:	4013      	ands	r3, r2
 800565c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800565e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005660:	e009      	b.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005674:	e000      	b.n	8005678 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005676:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005680:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005684:	4618      	mov	r0, r3
 8005686:	377c      	adds	r7, #124	; 0x7c
 8005688:	46bd      	mov	sp, r7
 800568a:	bd90      	pop	{r4, r7, pc}
 800568c:	40022000 	.word	0x40022000
 8005690:	40022100 	.word	0x40022100
 8005694:	40022300 	.word	0x40022300
 8005698:	58026300 	.word	0x58026300
 800569c:	58026000 	.word	0x58026000
 80056a0:	fffff0e0 	.word	0xfffff0e0

080056a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <__NVIC_SetPriorityGrouping+0x40>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d2:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <__NVIC_SetPriorityGrouping+0x40>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	60d3      	str	r3, [r2, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00
 80056e8:	05fa0000 	.word	0x05fa0000

080056ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <__NVIC_GetPriorityGrouping+0x18>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f003 0307 	and.w	r3, r3, #7
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005716:	2b00      	cmp	r3, #0
 8005718:	db0b      	blt.n	8005732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	4907      	ldr	r1, [pc, #28]	; (8005740 <__NVIC_EnableIRQ+0x38>)
 8005722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2001      	movs	r0, #1
 800572a:	fa00 f202 	lsl.w	r2, r0, r2
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0a      	blt.n	800576e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	490c      	ldr	r1, [pc, #48]	; (8005790 <__NVIC_SetPriority+0x4c>)
 800575e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	440b      	add	r3, r1
 8005768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800576c:	e00a      	b.n	8005784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4908      	ldr	r1, [pc, #32]	; (8005794 <__NVIC_SetPriority+0x50>)
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	3b04      	subs	r3, #4
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	440b      	add	r3, r1
 8005782:	761a      	strb	r2, [r3, #24]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000e100 	.word	0xe000e100
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f1c3 0307 	rsb	r3, r3, #7
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf28      	it	cs
 80057b6:	2304      	movcs	r3, #4
 80057b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3304      	adds	r3, #4
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d902      	bls.n	80057c8 <NVIC_EncodePriority+0x30>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3b03      	subs	r3, #3
 80057c6:	e000      	b.n	80057ca <NVIC_EncodePriority+0x32>
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	401a      	ands	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	43d9      	mvns	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	4313      	orrs	r3, r2
         );
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3724      	adds	r7, #36	; 0x24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ff4c 	bl	80056a4 <__NVIC_SetPriorityGrouping>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005822:	f7ff ff63 	bl	80056ec <__NVIC_GetPriorityGrouping>
 8005826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	6978      	ldr	r0, [r7, #20]
 800582e:	f7ff ffb3 	bl	8005798 <NVIC_EncodePriority>
 8005832:	4602      	mov	r2, r0
 8005834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff82 	bl	8005744 <__NVIC_SetPriority>
}
 8005840:	bf00      	nop
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff56 	bl	8005708 <__NVIC_EnableIRQ>
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e014      	b.n	80058a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	791b      	ldrb	r3, [r3, #4]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd fc76 	bl	8003178 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e046      	b.n	800594a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	795b      	ldrb	r3, [r3, #5]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_DAC_Start+0x20>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e040      	b.n	800594a <HAL_DAC_Start+0xa2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d11d      	bne.n	800593c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	e014      	b.n	800593c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2102      	movs	r1, #2
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	429a      	cmp	r2, r3
 800592a:	d107      	bne.n	800593c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0202 	orr.w	r2, r2, #2
 800593a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0a2      	b.n	8005ab6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	795b      	ldrb	r3, [r3, #5]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_DAC_Start_DMA+0x24>
 8005978:	2302      	movs	r3, #2
 800597a:	e09c      	b.n	8005ab6 <HAL_DAC_Start_DMA+0x15e>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2202      	movs	r2, #2
 8005986:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d129      	bne.n	80059e2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <HAL_DAC_Start_DMA+0x168>)
 8005994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4a4a      	ldr	r2, [pc, #296]	; (8005ac4 <HAL_DAC_Start_DMA+0x16c>)
 800599c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4a49      	ldr	r2, [pc, #292]	; (8005ac8 <HAL_DAC_Start_DMA+0x170>)
 80059a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_DAC_Start_DMA+0x6c>
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d005      	beq.n	80059ce <HAL_DAC_Start_DMA+0x76>
 80059c2:	e009      	b.n	80059d8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3308      	adds	r3, #8
 80059ca:	613b      	str	r3, [r7, #16]
        break;
 80059cc:	e033      	b.n	8005a36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	613b      	str	r3, [r7, #16]
        break;
 80059d6:	e02e      	b.n	8005a36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3310      	adds	r3, #16
 80059de:	613b      	str	r3, [r7, #16]
        break;
 80059e0:	e029      	b.n	8005a36 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4a39      	ldr	r2, [pc, #228]	; (8005acc <HAL_DAC_Start_DMA+0x174>)
 80059e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	4a38      	ldr	r2, [pc, #224]	; (8005ad0 <HAL_DAC_Start_DMA+0x178>)
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4a37      	ldr	r2, [pc, #220]	; (8005ad4 <HAL_DAC_Start_DMA+0x17c>)
 80059f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_DAC_Start_DMA+0xc0>
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d005      	beq.n	8005a22 <HAL_DAC_Start_DMA+0xca>
 8005a16:	e009      	b.n	8005a2c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	613b      	str	r3, [r7, #16]
        break;
 8005a20:	e009      	b.n	8005a36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3318      	adds	r3, #24
 8005a28:	613b      	str	r3, [r7, #16]
        break;
 8005a2a:	e004      	b.n	8005a36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	331c      	adds	r3, #28
 8005a32:	613b      	str	r3, [r7, #16]
        break;
 8005a34:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d111      	bne.n	8005a60 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6898      	ldr	r0, [r3, #8]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	f000 fe67 	bl	8006728 <HAL_DMA_Start_IT>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]
 8005a5e:	e010      	b.n	8005a82 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68d8      	ldr	r0, [r3, #12]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	f000 fe55 	bl	8006728 <HAL_DMA_Start_IT>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e005      	b.n	8005ab4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f043 0204 	orr.w	r2, r3, #4
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	08005f49 	.word	0x08005f49
 8005ac4:	08005f6b 	.word	0x08005f6b
 8005ac8:	08005f87 	.word	0x08005f87
 8005acc:	08006005 	.word	0x08006005
 8005ad0:	08006027 	.word	0x08006027
 8005ad4:	08006043 	.word	0x08006043

08005ad8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e03e      	b.n	8005b6a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6819      	ldr	r1, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43da      	mvns	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	400a      	ands	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2201      	movs	r2, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43da      	mvns	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	400a      	ands	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 f863 	bl	8006bfc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e00c      	b.n	8005b62 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f855 	bl	8006bfc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005b60:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01d      	beq.n	8005bd0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f043 0201 	orr.w	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bc8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f86f 	bl	8005cae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01d      	beq.n	8005c16 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d018      	beq.n	8005c16 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2204      	movs	r2, #4
 8005be8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f043 0202 	orr.w	r2, r3, #2
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9ed 	bl	8005ff0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e015      	b.n	8005c66 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e004      	b.n	8005c5c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	3314      	adds	r3, #20
 8005c5a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	; 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_DAC_ConfigChannel+0x1e>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e12a      	b.n	8005f3c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	795b      	ldrb	r3, [r3, #5]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_DAC_ConfigChannel+0x2e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e124      	b.n	8005f3c <HAL_DAC_ConfigChannel+0x278>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d17a      	bne.n	8005dfc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005d06:	f7fe f88b 	bl	8003e20 <HAL_GetTick>
 8005d0a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d13d      	bne.n	8005d8e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d12:	e018      	b.n	8005d46 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d14:	f7fe f884 	bl	8003e20 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d911      	bls.n	8005d46 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d28:	4b86      	ldr	r3, [pc, #536]	; (8005f44 <HAL_DAC_ConfigChannel+0x280>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f043 0208 	orr.w	r2, r3, #8
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0fa      	b.n	8005f3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4c:	4b7d      	ldr	r3, [pc, #500]	; (8005f44 <HAL_DAC_ConfigChannel+0x280>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1df      	bne.n	8005d14 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	6992      	ldr	r2, [r2, #24]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d5e:	e020      	b.n	8005da2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d60:	f7fe f85e 	bl	8003e20 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d90f      	bls.n	8005d8e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da0a      	bge.n	8005d8e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f043 0208 	orr.w	r2, r3, #8
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2203      	movs	r2, #3
 8005d88:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e0d6      	b.n	8005f3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dbe3      	blt.n	8005d60 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	6992      	ldr	r2, [r2, #24]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	ea02 0103 	and.w	r1, r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	21ff      	movs	r1, #255	; 0xff
 8005dde:	fa01 f303 	lsl.w	r3, r1, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	ea02 0103 	and.w	r1, r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	409a      	lsls	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d11d      	bne.n	8005e40 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	221f      	movs	r2, #31
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2207      	movs	r2, #7
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d102      	bne.n	8005e6a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
 8005e68:	e00f      	b.n	8005e8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d102      	bne.n	8005e78 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e72:	2301      	movs	r3, #1
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
 8005e76:	e008      	b.n	8005e8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e80:	2301      	movs	r3, #1
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
 8005e84:	e001      	b.n	8005e8a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	43da      	mvns	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	400a      	ands	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	22c0      	movs	r2, #192	; 0xc0
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	43da      	mvns	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	400a      	ands	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3728      	adds	r7, #40	; 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20008000 	.word	0x20008000

08005f48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff fe8b 	bl	8005c72 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	711a      	strb	r2, [r3, #4]
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fe84 	bl	8005c86 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f043 0204 	orr.w	r2, r3, #4
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff fe7a 	bl	8005c9a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	711a      	strb	r2, [r3, #4]
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff ffce 	bl	8005fb4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	711a      	strb	r2, [r3, #4]
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff ffc7 	bl	8005fc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f043 0204 	orr.w	r2, r3, #4
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff ffbd 	bl	8005fdc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	711a      	strb	r2, [r3, #4]
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006078:	f7fd fed2 	bl	8003e20 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e316      	b.n	80066b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a66      	ldr	r2, [pc, #408]	; (8006228 <HAL_DMA_Init+0x1b8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04a      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a65      	ldr	r2, [pc, #404]	; (800622c <HAL_DMA_Init+0x1bc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d045      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a63      	ldr	r2, [pc, #396]	; (8006230 <HAL_DMA_Init+0x1c0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d040      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a62      	ldr	r2, [pc, #392]	; (8006234 <HAL_DMA_Init+0x1c4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d03b      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a60      	ldr	r2, [pc, #384]	; (8006238 <HAL_DMA_Init+0x1c8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d036      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a5f      	ldr	r2, [pc, #380]	; (800623c <HAL_DMA_Init+0x1cc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d031      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5d      	ldr	r2, [pc, #372]	; (8006240 <HAL_DMA_Init+0x1d0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d02c      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5c      	ldr	r2, [pc, #368]	; (8006244 <HAL_DMA_Init+0x1d4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d027      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5a      	ldr	r2, [pc, #360]	; (8006248 <HAL_DMA_Init+0x1d8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d022      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a59      	ldr	r2, [pc, #356]	; (800624c <HAL_DMA_Init+0x1dc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d01d      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a57      	ldr	r2, [pc, #348]	; (8006250 <HAL_DMA_Init+0x1e0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a56      	ldr	r2, [pc, #344]	; (8006254 <HAL_DMA_Init+0x1e4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a54      	ldr	r2, [pc, #336]	; (8006258 <HAL_DMA_Init+0x1e8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a53      	ldr	r2, [pc, #332]	; (800625c <HAL_DMA_Init+0x1ec>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a51      	ldr	r2, [pc, #324]	; (8006260 <HAL_DMA_Init+0x1f0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_DMA_Init+0xb8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a50      	ldr	r2, [pc, #320]	; (8006264 <HAL_DMA_Init+0x1f4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d101      	bne.n	800612c <HAL_DMA_Init+0xbc>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <HAL_DMA_Init+0xbe>
 800612c:	2300      	movs	r3, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 813b 	beq.w	80063aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a37      	ldr	r2, [pc, #220]	; (8006228 <HAL_DMA_Init+0x1b8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d04a      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a36      	ldr	r2, [pc, #216]	; (800622c <HAL_DMA_Init+0x1bc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d045      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a34      	ldr	r2, [pc, #208]	; (8006230 <HAL_DMA_Init+0x1c0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d040      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a33      	ldr	r2, [pc, #204]	; (8006234 <HAL_DMA_Init+0x1c4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d03b      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a31      	ldr	r2, [pc, #196]	; (8006238 <HAL_DMA_Init+0x1c8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d036      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a30      	ldr	r2, [pc, #192]	; (800623c <HAL_DMA_Init+0x1cc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d031      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <HAL_DMA_Init+0x1d0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d02c      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_DMA_Init+0x1d4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d027      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2b      	ldr	r2, [pc, #172]	; (8006248 <HAL_DMA_Init+0x1d8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d022      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_Init+0x1dc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d01d      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <HAL_DMA_Init+0x1e0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d018      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a27      	ldr	r2, [pc, #156]	; (8006254 <HAL_DMA_Init+0x1e4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d013      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_DMA_Init+0x1e8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00e      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_DMA_Init+0x1ec>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d009      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_DMA_Init+0x1f0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_DMA_Init+0x174>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_DMA_Init+0x1f4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d108      	bne.n	80061f6 <HAL_DMA_Init+0x186>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e007      	b.n	8006206 <HAL_DMA_Init+0x196>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006206:	e02f      	b.n	8006268 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006208:	f7fd fe0a 	bl	8003e20 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b05      	cmp	r3, #5
 8006214:	d928      	bls.n	8006268 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2203      	movs	r2, #3
 8006220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e246      	b.n	80066b6 <HAL_DMA_Init+0x646>
 8006228:	40020010 	.word	0x40020010
 800622c:	40020028 	.word	0x40020028
 8006230:	40020040 	.word	0x40020040
 8006234:	40020058 	.word	0x40020058
 8006238:	40020070 	.word	0x40020070
 800623c:	40020088 	.word	0x40020088
 8006240:	400200a0 	.word	0x400200a0
 8006244:	400200b8 	.word	0x400200b8
 8006248:	40020410 	.word	0x40020410
 800624c:	40020428 	.word	0x40020428
 8006250:	40020440 	.word	0x40020440
 8006254:	40020458 	.word	0x40020458
 8006258:	40020470 	.word	0x40020470
 800625c:	40020488 	.word	0x40020488
 8006260:	400204a0 	.word	0x400204a0
 8006264:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1c8      	bne.n	8006208 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4b83      	ldr	r3, [pc, #524]	; (8006490 <HAL_DMA_Init+0x420>)
 8006282:	4013      	ands	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800628e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800629a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d107      	bne.n	80062cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	4313      	orrs	r3, r2
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062cc:	4b71      	ldr	r3, [pc, #452]	; (8006494 <HAL_DMA_Init+0x424>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b71      	ldr	r3, [pc, #452]	; (8006498 <HAL_DMA_Init+0x428>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d8:	d328      	bcc.n	800632c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b28      	cmp	r3, #40	; 0x28
 80062e0:	d903      	bls.n	80062ea <HAL_DMA_Init+0x27a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b2e      	cmp	r3, #46	; 0x2e
 80062e8:	d917      	bls.n	800631a <HAL_DMA_Init+0x2aa>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b3e      	cmp	r3, #62	; 0x3e
 80062f0:	d903      	bls.n	80062fa <HAL_DMA_Init+0x28a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b42      	cmp	r3, #66	; 0x42
 80062f8:	d90f      	bls.n	800631a <HAL_DMA_Init+0x2aa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b46      	cmp	r3, #70	; 0x46
 8006300:	d903      	bls.n	800630a <HAL_DMA_Init+0x29a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b48      	cmp	r3, #72	; 0x48
 8006308:	d907      	bls.n	800631a <HAL_DMA_Init+0x2aa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b4e      	cmp	r3, #78	; 0x4e
 8006310:	d905      	bls.n	800631e <HAL_DMA_Init+0x2ae>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b52      	cmp	r3, #82	; 0x52
 8006318:	d801      	bhi.n	800631e <HAL_DMA_Init+0x2ae>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <HAL_DMA_Init+0x2b0>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b04      	cmp	r3, #4
 8006354:	d117      	bne.n	8006386 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f002 fb3f 	bl	80089ec <DMA_CheckFifoParam>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2240      	movs	r2, #64	; 0x40
 8006378:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e197      	b.n	80066b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f002 fa7a 	bl	8008888 <DMA_CalcBaseAndBitshift>
 8006394:	4603      	mov	r3, r0
 8006396:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	223f      	movs	r2, #63	; 0x3f
 80063a2:	409a      	lsls	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	e0cd      	b.n	8006546 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a3b      	ldr	r2, [pc, #236]	; (800649c <HAL_DMA_Init+0x42c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d022      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a39      	ldr	r2, [pc, #228]	; (80064a0 <HAL_DMA_Init+0x430>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a38      	ldr	r2, [pc, #224]	; (80064a4 <HAL_DMA_Init+0x434>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d018      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a36      	ldr	r2, [pc, #216]	; (80064a8 <HAL_DMA_Init+0x438>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a35      	ldr	r2, [pc, #212]	; (80064ac <HAL_DMA_Init+0x43c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a33      	ldr	r2, [pc, #204]	; (80064b0 <HAL_DMA_Init+0x440>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a32      	ldr	r2, [pc, #200]	; (80064b4 <HAL_DMA_Init+0x444>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_DMA_Init+0x38a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a30      	ldr	r2, [pc, #192]	; (80064b8 <HAL_DMA_Init+0x448>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d101      	bne.n	80063fe <HAL_DMA_Init+0x38e>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <HAL_DMA_Init+0x390>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8097 	beq.w	8006534 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a24      	ldr	r2, [pc, #144]	; (800649c <HAL_DMA_Init+0x42c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d021      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <HAL_DMA_Init+0x430>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01c      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <HAL_DMA_Init+0x434>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d017      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <HAL_DMA_Init+0x438>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d012      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_DMA_Init+0x43c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00d      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_DMA_Init+0x440>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d008      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_DMA_Init+0x444>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <HAL_DMA_Init+0x3e4>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <HAL_DMA_Init+0x448>)
 8006452:	4293      	cmp	r3, r2
 8006454:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4b12      	ldr	r3, [pc, #72]	; (80064bc <HAL_DMA_Init+0x44c>)
 8006472:	4013      	ands	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d020      	beq.n	80064c0 <HAL_DMA_Init+0x450>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d102      	bne.n	800648c <HAL_DMA_Init+0x41c>
 8006486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800648a:	e01a      	b.n	80064c2 <HAL_DMA_Init+0x452>
 800648c:	2300      	movs	r3, #0
 800648e:	e018      	b.n	80064c2 <HAL_DMA_Init+0x452>
 8006490:	fe10803f 	.word	0xfe10803f
 8006494:	5c001000 	.word	0x5c001000
 8006498:	ffff0000 	.word	0xffff0000
 800649c:	58025408 	.word	0x58025408
 80064a0:	5802541c 	.word	0x5802541c
 80064a4:	58025430 	.word	0x58025430
 80064a8:	58025444 	.word	0x58025444
 80064ac:	58025458 	.word	0x58025458
 80064b0:	5802546c 	.word	0x5802546c
 80064b4:	58025480 	.word	0x58025480
 80064b8:	58025494 	.word	0x58025494
 80064bc:	fffe000f 	.word	0xfffe000f
 80064c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68d2      	ldr	r2, [r2, #12]
 80064c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	4b6e      	ldr	r3, [pc, #440]	; (80066c0 <HAL_DMA_Init+0x650>)
 8006508:	4413      	add	r3, r2
 800650a:	4a6e      	ldr	r2, [pc, #440]	; (80066c4 <HAL_DMA_Init+0x654>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	009a      	lsls	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f002 f9b5 	bl	8008888 <DMA_CalcBaseAndBitshift>
 800651e:	4603      	mov	r3, r0
 8006520:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2201      	movs	r2, #1
 800652c:	409a      	lsls	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e008      	b.n	8006546 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2203      	movs	r2, #3
 800653e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e0b7      	b.n	80066b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a5f      	ldr	r2, [pc, #380]	; (80066c8 <HAL_DMA_Init+0x658>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d072      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a5d      	ldr	r2, [pc, #372]	; (80066cc <HAL_DMA_Init+0x65c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d06d      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a5c      	ldr	r2, [pc, #368]	; (80066d0 <HAL_DMA_Init+0x660>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d068      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a5a      	ldr	r2, [pc, #360]	; (80066d4 <HAL_DMA_Init+0x664>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d063      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a59      	ldr	r2, [pc, #356]	; (80066d8 <HAL_DMA_Init+0x668>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d05e      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a57      	ldr	r2, [pc, #348]	; (80066dc <HAL_DMA_Init+0x66c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d059      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a56      	ldr	r2, [pc, #344]	; (80066e0 <HAL_DMA_Init+0x670>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d054      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a54      	ldr	r2, [pc, #336]	; (80066e4 <HAL_DMA_Init+0x674>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d04f      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a53      	ldr	r2, [pc, #332]	; (80066e8 <HAL_DMA_Init+0x678>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d04a      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a51      	ldr	r2, [pc, #324]	; (80066ec <HAL_DMA_Init+0x67c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d045      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a50      	ldr	r2, [pc, #320]	; (80066f0 <HAL_DMA_Init+0x680>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d040      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a4e      	ldr	r2, [pc, #312]	; (80066f4 <HAL_DMA_Init+0x684>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d03b      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a4d      	ldr	r2, [pc, #308]	; (80066f8 <HAL_DMA_Init+0x688>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d036      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a4b      	ldr	r2, [pc, #300]	; (80066fc <HAL_DMA_Init+0x68c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d031      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a4a      	ldr	r2, [pc, #296]	; (8006700 <HAL_DMA_Init+0x690>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d02c      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a48      	ldr	r2, [pc, #288]	; (8006704 <HAL_DMA_Init+0x694>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d027      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a47      	ldr	r2, [pc, #284]	; (8006708 <HAL_DMA_Init+0x698>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a45      	ldr	r2, [pc, #276]	; (800670c <HAL_DMA_Init+0x69c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a44      	ldr	r2, [pc, #272]	; (8006710 <HAL_DMA_Init+0x6a0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a42      	ldr	r2, [pc, #264]	; (8006714 <HAL_DMA_Init+0x6a4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a41      	ldr	r2, [pc, #260]	; (8006718 <HAL_DMA_Init+0x6a8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a3f      	ldr	r2, [pc, #252]	; (800671c <HAL_DMA_Init+0x6ac>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a3e      	ldr	r2, [pc, #248]	; (8006720 <HAL_DMA_Init+0x6b0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_DMA_Init+0x5c6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a3c      	ldr	r2, [pc, #240]	; (8006724 <HAL_DMA_Init+0x6b4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_DMA_Init+0x5ca>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_DMA_Init+0x5cc>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d032      	beq.n	80066a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f002 fa4f 	bl	8008ae4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d102      	bne.n	8006654 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006668:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d010      	beq.n	8006694 <HAL_DMA_Init+0x624>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b08      	cmp	r3, #8
 8006678:	d80c      	bhi.n	8006694 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 facc 	bl	8008c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	e008      	b.n	80066a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	a7fdabf8 	.word	0xa7fdabf8
 80066c4:	cccccccd 	.word	0xcccccccd
 80066c8:	40020010 	.word	0x40020010
 80066cc:	40020028 	.word	0x40020028
 80066d0:	40020040 	.word	0x40020040
 80066d4:	40020058 	.word	0x40020058
 80066d8:	40020070 	.word	0x40020070
 80066dc:	40020088 	.word	0x40020088
 80066e0:	400200a0 	.word	0x400200a0
 80066e4:	400200b8 	.word	0x400200b8
 80066e8:	40020410 	.word	0x40020410
 80066ec:	40020428 	.word	0x40020428
 80066f0:	40020440 	.word	0x40020440
 80066f4:	40020458 	.word	0x40020458
 80066f8:	40020470 	.word	0x40020470
 80066fc:	40020488 	.word	0x40020488
 8006700:	400204a0 	.word	0x400204a0
 8006704:	400204b8 	.word	0x400204b8
 8006708:	58025408 	.word	0x58025408
 800670c:	5802541c 	.word	0x5802541c
 8006710:	58025430 	.word	0x58025430
 8006714:	58025444 	.word	0x58025444
 8006718:	58025458 	.word	0x58025458
 800671c:	5802546c 	.word	0x5802546c
 8006720:	58025480 	.word	0x58025480
 8006724:	58025494 	.word	0x58025494

08006728 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e226      	b.n	8006b92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_DMA_Start_IT+0x2a>
 800674e:	2302      	movs	r3, #2
 8006750:	e21f      	b.n	8006b92 <HAL_DMA_Start_IT+0x46a>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	f040 820a 	bne.w	8006b7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a68      	ldr	r2, [pc, #416]	; (800691c <HAL_DMA_Start_IT+0x1f4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d04a      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a66      	ldr	r2, [pc, #408]	; (8006920 <HAL_DMA_Start_IT+0x1f8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d045      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a65      	ldr	r2, [pc, #404]	; (8006924 <HAL_DMA_Start_IT+0x1fc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d040      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a63      	ldr	r2, [pc, #396]	; (8006928 <HAL_DMA_Start_IT+0x200>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d03b      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a62      	ldr	r2, [pc, #392]	; (800692c <HAL_DMA_Start_IT+0x204>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d036      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a60      	ldr	r2, [pc, #384]	; (8006930 <HAL_DMA_Start_IT+0x208>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d031      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a5f      	ldr	r2, [pc, #380]	; (8006934 <HAL_DMA_Start_IT+0x20c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d02c      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a5d      	ldr	r2, [pc, #372]	; (8006938 <HAL_DMA_Start_IT+0x210>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d027      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a5c      	ldr	r2, [pc, #368]	; (800693c <HAL_DMA_Start_IT+0x214>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d022      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a5a      	ldr	r2, [pc, #360]	; (8006940 <HAL_DMA_Start_IT+0x218>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01d      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a59      	ldr	r2, [pc, #356]	; (8006944 <HAL_DMA_Start_IT+0x21c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d018      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a57      	ldr	r2, [pc, #348]	; (8006948 <HAL_DMA_Start_IT+0x220>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a56      	ldr	r2, [pc, #344]	; (800694c <HAL_DMA_Start_IT+0x224>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00e      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a54      	ldr	r2, [pc, #336]	; (8006950 <HAL_DMA_Start_IT+0x228>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a53      	ldr	r2, [pc, #332]	; (8006954 <HAL_DMA_Start_IT+0x22c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_DMA_Start_IT+0xee>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a51      	ldr	r2, [pc, #324]	; (8006958 <HAL_DMA_Start_IT+0x230>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d108      	bne.n	8006828 <HAL_DMA_Start_IT+0x100>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e007      	b.n	8006838 <HAL_DMA_Start_IT+0x110>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f001 fe76 	bl	8008530 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a34      	ldr	r2, [pc, #208]	; (800691c <HAL_DMA_Start_IT+0x1f4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d04a      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a33      	ldr	r2, [pc, #204]	; (8006920 <HAL_DMA_Start_IT+0x1f8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d045      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a31      	ldr	r2, [pc, #196]	; (8006924 <HAL_DMA_Start_IT+0x1fc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d040      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a30      	ldr	r2, [pc, #192]	; (8006928 <HAL_DMA_Start_IT+0x200>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d03b      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2e      	ldr	r2, [pc, #184]	; (800692c <HAL_DMA_Start_IT+0x204>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d036      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2d      	ldr	r2, [pc, #180]	; (8006930 <HAL_DMA_Start_IT+0x208>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d031      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2b      	ldr	r2, [pc, #172]	; (8006934 <HAL_DMA_Start_IT+0x20c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d02c      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <HAL_DMA_Start_IT+0x210>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d027      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a28      	ldr	r2, [pc, #160]	; (800693c <HAL_DMA_Start_IT+0x214>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d022      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a27      	ldr	r2, [pc, #156]	; (8006940 <HAL_DMA_Start_IT+0x218>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d01d      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a25      	ldr	r2, [pc, #148]	; (8006944 <HAL_DMA_Start_IT+0x21c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a24      	ldr	r2, [pc, #144]	; (8006948 <HAL_DMA_Start_IT+0x220>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a22      	ldr	r2, [pc, #136]	; (800694c <HAL_DMA_Start_IT+0x224>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a21      	ldr	r2, [pc, #132]	; (8006950 <HAL_DMA_Start_IT+0x228>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_DMA_Start_IT+0x22c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_DMA_Start_IT+0x1bc>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_DMA_Start_IT+0x230>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_DMA_Start_IT+0x1c0>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <HAL_DMA_Start_IT+0x1c2>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d036      	beq.n	800695c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f023 021e 	bic.w	r2, r3, #30
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0216 	orr.w	r2, r2, #22
 8006900:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d03e      	beq.n	8006988 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0208 	orr.w	r2, r2, #8
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	e035      	b.n	8006988 <HAL_DMA_Start_IT+0x260>
 800691c:	40020010 	.word	0x40020010
 8006920:	40020028 	.word	0x40020028
 8006924:	40020040 	.word	0x40020040
 8006928:	40020058 	.word	0x40020058
 800692c:	40020070 	.word	0x40020070
 8006930:	40020088 	.word	0x40020088
 8006934:	400200a0 	.word	0x400200a0
 8006938:	400200b8 	.word	0x400200b8
 800693c:	40020410 	.word	0x40020410
 8006940:	40020428 	.word	0x40020428
 8006944:	40020440 	.word	0x40020440
 8006948:	40020458 	.word	0x40020458
 800694c:	40020470 	.word	0x40020470
 8006950:	40020488 	.word	0x40020488
 8006954:	400204a0 	.word	0x400204a0
 8006958:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 020e 	bic.w	r2, r3, #14
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 020a 	orr.w	r2, r2, #10
 800696e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0204 	orr.w	r2, r2, #4
 8006986:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a83      	ldr	r2, [pc, #524]	; (8006b9c <HAL_DMA_Start_IT+0x474>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d072      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a82      	ldr	r2, [pc, #520]	; (8006ba0 <HAL_DMA_Start_IT+0x478>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d06d      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a80      	ldr	r2, [pc, #512]	; (8006ba4 <HAL_DMA_Start_IT+0x47c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d068      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a7f      	ldr	r2, [pc, #508]	; (8006ba8 <HAL_DMA_Start_IT+0x480>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d063      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a7d      	ldr	r2, [pc, #500]	; (8006bac <HAL_DMA_Start_IT+0x484>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d05e      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a7c      	ldr	r2, [pc, #496]	; (8006bb0 <HAL_DMA_Start_IT+0x488>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d059      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a7a      	ldr	r2, [pc, #488]	; (8006bb4 <HAL_DMA_Start_IT+0x48c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d054      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a79      	ldr	r2, [pc, #484]	; (8006bb8 <HAL_DMA_Start_IT+0x490>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d04f      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a77      	ldr	r2, [pc, #476]	; (8006bbc <HAL_DMA_Start_IT+0x494>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d04a      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a76      	ldr	r2, [pc, #472]	; (8006bc0 <HAL_DMA_Start_IT+0x498>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d045      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a74      	ldr	r2, [pc, #464]	; (8006bc4 <HAL_DMA_Start_IT+0x49c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d040      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a73      	ldr	r2, [pc, #460]	; (8006bc8 <HAL_DMA_Start_IT+0x4a0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d03b      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a71      	ldr	r2, [pc, #452]	; (8006bcc <HAL_DMA_Start_IT+0x4a4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d036      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a70      	ldr	r2, [pc, #448]	; (8006bd0 <HAL_DMA_Start_IT+0x4a8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d031      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6e      	ldr	r2, [pc, #440]	; (8006bd4 <HAL_DMA_Start_IT+0x4ac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02c      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a6d      	ldr	r2, [pc, #436]	; (8006bd8 <HAL_DMA_Start_IT+0x4b0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d027      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a6b      	ldr	r2, [pc, #428]	; (8006bdc <HAL_DMA_Start_IT+0x4b4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d022      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a6a      	ldr	r2, [pc, #424]	; (8006be0 <HAL_DMA_Start_IT+0x4b8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d01d      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a68      	ldr	r2, [pc, #416]	; (8006be4 <HAL_DMA_Start_IT+0x4bc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d018      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a67      	ldr	r2, [pc, #412]	; (8006be8 <HAL_DMA_Start_IT+0x4c0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a65      	ldr	r2, [pc, #404]	; (8006bec <HAL_DMA_Start_IT+0x4c4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00e      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a64      	ldr	r2, [pc, #400]	; (8006bf0 <HAL_DMA_Start_IT+0x4c8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d009      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a62      	ldr	r2, [pc, #392]	; (8006bf4 <HAL_DMA_Start_IT+0x4cc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <HAL_DMA_Start_IT+0x350>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a61      	ldr	r2, [pc, #388]	; (8006bf8 <HAL_DMA_Start_IT+0x4d0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d101      	bne.n	8006a7c <HAL_DMA_Start_IT+0x354>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <HAL_DMA_Start_IT+0x356>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01a      	beq.n	8006ab8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a37      	ldr	r2, [pc, #220]	; (8006b9c <HAL_DMA_Start_IT+0x474>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d04a      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a36      	ldr	r2, [pc, #216]	; (8006ba0 <HAL_DMA_Start_IT+0x478>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d045      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a34      	ldr	r2, [pc, #208]	; (8006ba4 <HAL_DMA_Start_IT+0x47c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d040      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a33      	ldr	r2, [pc, #204]	; (8006ba8 <HAL_DMA_Start_IT+0x480>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d03b      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a31      	ldr	r2, [pc, #196]	; (8006bac <HAL_DMA_Start_IT+0x484>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d036      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a30      	ldr	r2, [pc, #192]	; (8006bb0 <HAL_DMA_Start_IT+0x488>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d031      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2e      	ldr	r2, [pc, #184]	; (8006bb4 <HAL_DMA_Start_IT+0x48c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d02c      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2d      	ldr	r2, [pc, #180]	; (8006bb8 <HAL_DMA_Start_IT+0x490>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d027      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a2b      	ldr	r2, [pc, #172]	; (8006bbc <HAL_DMA_Start_IT+0x494>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d022      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <HAL_DMA_Start_IT+0x498>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d01d      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a28      	ldr	r2, [pc, #160]	; (8006bc4 <HAL_DMA_Start_IT+0x49c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d018      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a27      	ldr	r2, [pc, #156]	; (8006bc8 <HAL_DMA_Start_IT+0x4a0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a25      	ldr	r2, [pc, #148]	; (8006bcc <HAL_DMA_Start_IT+0x4a4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00e      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a24      	ldr	r2, [pc, #144]	; (8006bd0 <HAL_DMA_Start_IT+0x4a8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d009      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <HAL_DMA_Start_IT+0x4ac>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_DMA_Start_IT+0x430>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <HAL_DMA_Start_IT+0x4b0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d108      	bne.n	8006b6a <HAL_DMA_Start_IT+0x442>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e012      	b.n	8006b90 <HAL_DMA_Start_IT+0x468>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0201 	orr.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e009      	b.n	8006b90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8
 8006bdc:	58025408 	.word	0x58025408
 8006be0:	5802541c 	.word	0x5802541c
 8006be4:	58025430 	.word	0x58025430
 8006be8:	58025444 	.word	0x58025444
 8006bec:	58025458 	.word	0x58025458
 8006bf0:	5802546c 	.word	0x5802546c
 8006bf4:	58025480 	.word	0x58025480
 8006bf8:	58025494 	.word	0x58025494

08006bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7fd f90c 	bl	8003e20 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e2dc      	b.n	80071ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d008      	beq.n	8006c32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e2cd      	b.n	80071ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a76      	ldr	r2, [pc, #472]	; (8006e10 <HAL_DMA_Abort+0x214>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d04a      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a74      	ldr	r2, [pc, #464]	; (8006e14 <HAL_DMA_Abort+0x218>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d045      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a73      	ldr	r2, [pc, #460]	; (8006e18 <HAL_DMA_Abort+0x21c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d040      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a71      	ldr	r2, [pc, #452]	; (8006e1c <HAL_DMA_Abort+0x220>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d03b      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a70      	ldr	r2, [pc, #448]	; (8006e20 <HAL_DMA_Abort+0x224>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d036      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a6e      	ldr	r2, [pc, #440]	; (8006e24 <HAL_DMA_Abort+0x228>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d031      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a6d      	ldr	r2, [pc, #436]	; (8006e28 <HAL_DMA_Abort+0x22c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d02c      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a6b      	ldr	r2, [pc, #428]	; (8006e2c <HAL_DMA_Abort+0x230>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d027      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6a      	ldr	r2, [pc, #424]	; (8006e30 <HAL_DMA_Abort+0x234>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d022      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a68      	ldr	r2, [pc, #416]	; (8006e34 <HAL_DMA_Abort+0x238>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a67      	ldr	r2, [pc, #412]	; (8006e38 <HAL_DMA_Abort+0x23c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a65      	ldr	r2, [pc, #404]	; (8006e3c <HAL_DMA_Abort+0x240>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a64      	ldr	r2, [pc, #400]	; (8006e40 <HAL_DMA_Abort+0x244>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a62      	ldr	r2, [pc, #392]	; (8006e44 <HAL_DMA_Abort+0x248>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a61      	ldr	r2, [pc, #388]	; (8006e48 <HAL_DMA_Abort+0x24c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_DMA_Abort+0xd6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a5f      	ldr	r2, [pc, #380]	; (8006e4c <HAL_DMA_Abort+0x250>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_DMA_Abort+0xda>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <HAL_DMA_Abort+0xdc>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d013      	beq.n	8006d04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 021e 	bic.w	r2, r2, #30
 8006cea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695a      	ldr	r2, [r3, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e00a      	b.n	8006d1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 020e 	bic.w	r2, r2, #14
 8006d12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <HAL_DMA_Abort+0x214>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d072      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a3a      	ldr	r2, [pc, #232]	; (8006e14 <HAL_DMA_Abort+0x218>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d06d      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a39      	ldr	r2, [pc, #228]	; (8006e18 <HAL_DMA_Abort+0x21c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d068      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a37      	ldr	r2, [pc, #220]	; (8006e1c <HAL_DMA_Abort+0x220>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d063      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a36      	ldr	r2, [pc, #216]	; (8006e20 <HAL_DMA_Abort+0x224>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d05e      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a34      	ldr	r2, [pc, #208]	; (8006e24 <HAL_DMA_Abort+0x228>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d059      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a33      	ldr	r2, [pc, #204]	; (8006e28 <HAL_DMA_Abort+0x22c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d054      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a31      	ldr	r2, [pc, #196]	; (8006e2c <HAL_DMA_Abort+0x230>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d04f      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a30      	ldr	r2, [pc, #192]	; (8006e30 <HAL_DMA_Abort+0x234>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d04a      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2e      	ldr	r2, [pc, #184]	; (8006e34 <HAL_DMA_Abort+0x238>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d045      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2d      	ldr	r2, [pc, #180]	; (8006e38 <HAL_DMA_Abort+0x23c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d040      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <HAL_DMA_Abort+0x240>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d03b      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2a      	ldr	r2, [pc, #168]	; (8006e40 <HAL_DMA_Abort+0x244>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d036      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <HAL_DMA_Abort+0x248>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d031      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <HAL_DMA_Abort+0x24c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d02c      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a25      	ldr	r2, [pc, #148]	; (8006e4c <HAL_DMA_Abort+0x250>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d027      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a24      	ldr	r2, [pc, #144]	; (8006e50 <HAL_DMA_Abort+0x254>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d022      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_DMA_Abort+0x258>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01d      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <HAL_DMA_Abort+0x25c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d018      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1f      	ldr	r2, [pc, #124]	; (8006e5c <HAL_DMA_Abort+0x260>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <HAL_DMA_Abort+0x264>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <HAL_DMA_Abort+0x268>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <HAL_DMA_Abort+0x26c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_DMA_Abort+0x20e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <HAL_DMA_Abort+0x270>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d132      	bne.n	8006e70 <HAL_DMA_Abort+0x274>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e031      	b.n	8006e72 <HAL_DMA_Abort+0x276>
 8006e0e:	bf00      	nop
 8006e10:	40020010 	.word	0x40020010
 8006e14:	40020028 	.word	0x40020028
 8006e18:	40020040 	.word	0x40020040
 8006e1c:	40020058 	.word	0x40020058
 8006e20:	40020070 	.word	0x40020070
 8006e24:	40020088 	.word	0x40020088
 8006e28:	400200a0 	.word	0x400200a0
 8006e2c:	400200b8 	.word	0x400200b8
 8006e30:	40020410 	.word	0x40020410
 8006e34:	40020428 	.word	0x40020428
 8006e38:	40020440 	.word	0x40020440
 8006e3c:	40020458 	.word	0x40020458
 8006e40:	40020470 	.word	0x40020470
 8006e44:	40020488 	.word	0x40020488
 8006e48:	400204a0 	.word	0x400204a0
 8006e4c:	400204b8 	.word	0x400204b8
 8006e50:	58025408 	.word	0x58025408
 8006e54:	5802541c 	.word	0x5802541c
 8006e58:	58025430 	.word	0x58025430
 8006e5c:	58025444 	.word	0x58025444
 8006e60:	58025458 	.word	0x58025458
 8006e64:	5802546c 	.word	0x5802546c
 8006e68:	58025480 	.word	0x58025480
 8006e6c:	58025494 	.word	0x58025494
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6d      	ldr	r2, [pc, #436]	; (8007040 <HAL_DMA_Abort+0x444>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d04a      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a6b      	ldr	r2, [pc, #428]	; (8007044 <HAL_DMA_Abort+0x448>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d045      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6a      	ldr	r2, [pc, #424]	; (8007048 <HAL_DMA_Abort+0x44c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d040      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a68      	ldr	r2, [pc, #416]	; (800704c <HAL_DMA_Abort+0x450>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d03b      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a67      	ldr	r2, [pc, #412]	; (8007050 <HAL_DMA_Abort+0x454>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d036      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a65      	ldr	r2, [pc, #404]	; (8007054 <HAL_DMA_Abort+0x458>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d031      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a64      	ldr	r2, [pc, #400]	; (8007058 <HAL_DMA_Abort+0x45c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d02c      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a62      	ldr	r2, [pc, #392]	; (800705c <HAL_DMA_Abort+0x460>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d027      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a61      	ldr	r2, [pc, #388]	; (8007060 <HAL_DMA_Abort+0x464>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d022      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	; (8007064 <HAL_DMA_Abort+0x468>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01d      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5e      	ldr	r2, [pc, #376]	; (8007068 <HAL_DMA_Abort+0x46c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_DMA_Abort+0x470>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5b      	ldr	r2, [pc, #364]	; (8007070 <HAL_DMA_Abort+0x474>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00e      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a59      	ldr	r2, [pc, #356]	; (8007074 <HAL_DMA_Abort+0x478>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a58      	ldr	r2, [pc, #352]	; (8007078 <HAL_DMA_Abort+0x47c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_DMA_Abort+0x32a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a56      	ldr	r2, [pc, #344]	; (800707c <HAL_DMA_Abort+0x480>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d108      	bne.n	8006f38 <HAL_DMA_Abort+0x33c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e007      	b.n	8006f48 <HAL_DMA_Abort+0x34c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f48:	e013      	b.n	8006f72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f4a:	f7fc ff69 	bl	8003e20 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d90c      	bls.n	8006f72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2203      	movs	r2, #3
 8006f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e12d      	b.n	80071ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <HAL_DMA_Abort+0x444>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <HAL_DMA_Abort+0x448>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2c      	ldr	r2, [pc, #176]	; (8007048 <HAL_DMA_Abort+0x44c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2a      	ldr	r2, [pc, #168]	; (800704c <HAL_DMA_Abort+0x450>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a29      	ldr	r2, [pc, #164]	; (8007050 <HAL_DMA_Abort+0x454>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a27      	ldr	r2, [pc, #156]	; (8007054 <HAL_DMA_Abort+0x458>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a26      	ldr	r2, [pc, #152]	; (8007058 <HAL_DMA_Abort+0x45c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a24      	ldr	r2, [pc, #144]	; (800705c <HAL_DMA_Abort+0x460>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a23      	ldr	r2, [pc, #140]	; (8007060 <HAL_DMA_Abort+0x464>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a21      	ldr	r2, [pc, #132]	; (8007064 <HAL_DMA_Abort+0x468>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a20      	ldr	r2, [pc, #128]	; (8007068 <HAL_DMA_Abort+0x46c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1e      	ldr	r2, [pc, #120]	; (800706c <HAL_DMA_Abort+0x470>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <HAL_DMA_Abort+0x474>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <HAL_DMA_Abort+0x478>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMA_Abort+0x422>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <HAL_DMA_Abort+0x47c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMA_Abort+0x422>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_DMA_Abort+0x480>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d101      	bne.n	8007022 <HAL_DMA_Abort+0x426>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <HAL_DMA_Abort+0x428>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d02b      	beq.n	8007080 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	223f      	movs	r2, #63	; 0x3f
 8007038:	409a      	lsls	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	609a      	str	r2, [r3, #8]
 800703e:	e02a      	b.n	8007096 <HAL_DMA_Abort+0x49a>
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	2201      	movs	r2, #1
 8007090:	409a      	lsls	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a4f      	ldr	r2, [pc, #316]	; (80071d8 <HAL_DMA_Abort+0x5dc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d072      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a4d      	ldr	r2, [pc, #308]	; (80071dc <HAL_DMA_Abort+0x5e0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d06d      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a4c      	ldr	r2, [pc, #304]	; (80071e0 <HAL_DMA_Abort+0x5e4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d068      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a4a      	ldr	r2, [pc, #296]	; (80071e4 <HAL_DMA_Abort+0x5e8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d063      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a49      	ldr	r2, [pc, #292]	; (80071e8 <HAL_DMA_Abort+0x5ec>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d05e      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a47      	ldr	r2, [pc, #284]	; (80071ec <HAL_DMA_Abort+0x5f0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d059      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a46      	ldr	r2, [pc, #280]	; (80071f0 <HAL_DMA_Abort+0x5f4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d054      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a44      	ldr	r2, [pc, #272]	; (80071f4 <HAL_DMA_Abort+0x5f8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d04f      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a43      	ldr	r2, [pc, #268]	; (80071f8 <HAL_DMA_Abort+0x5fc>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d04a      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a41      	ldr	r2, [pc, #260]	; (80071fc <HAL_DMA_Abort+0x600>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d045      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a40      	ldr	r2, [pc, #256]	; (8007200 <HAL_DMA_Abort+0x604>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d040      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a3e      	ldr	r2, [pc, #248]	; (8007204 <HAL_DMA_Abort+0x608>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d03b      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3d      	ldr	r2, [pc, #244]	; (8007208 <HAL_DMA_Abort+0x60c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d036      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a3b      	ldr	r2, [pc, #236]	; (800720c <HAL_DMA_Abort+0x610>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d031      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a3a      	ldr	r2, [pc, #232]	; (8007210 <HAL_DMA_Abort+0x614>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d02c      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a38      	ldr	r2, [pc, #224]	; (8007214 <HAL_DMA_Abort+0x618>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d027      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a37      	ldr	r2, [pc, #220]	; (8007218 <HAL_DMA_Abort+0x61c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d022      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a35      	ldr	r2, [pc, #212]	; (800721c <HAL_DMA_Abort+0x620>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d01d      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a34      	ldr	r2, [pc, #208]	; (8007220 <HAL_DMA_Abort+0x624>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d018      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a32      	ldr	r2, [pc, #200]	; (8007224 <HAL_DMA_Abort+0x628>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a31      	ldr	r2, [pc, #196]	; (8007228 <HAL_DMA_Abort+0x62c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00e      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2f      	ldr	r2, [pc, #188]	; (800722c <HAL_DMA_Abort+0x630>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2e      	ldr	r2, [pc, #184]	; (8007230 <HAL_DMA_Abort+0x634>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_DMA_Abort+0x58a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2c      	ldr	r2, [pc, #176]	; (8007234 <HAL_DMA_Abort+0x638>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d101      	bne.n	800718a <HAL_DMA_Abort+0x58e>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <HAL_DMA_Abort+0x590>
 800718a:	2300      	movs	r3, #0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d015      	beq.n	80071bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007198:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00c      	beq.n	80071bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40020010 	.word	0x40020010
 80071dc:	40020028 	.word	0x40020028
 80071e0:	40020040 	.word	0x40020040
 80071e4:	40020058 	.word	0x40020058
 80071e8:	40020070 	.word	0x40020070
 80071ec:	40020088 	.word	0x40020088
 80071f0:	400200a0 	.word	0x400200a0
 80071f4:	400200b8 	.word	0x400200b8
 80071f8:	40020410 	.word	0x40020410
 80071fc:	40020428 	.word	0x40020428
 8007200:	40020440 	.word	0x40020440
 8007204:	40020458 	.word	0x40020458
 8007208:	40020470 	.word	0x40020470
 800720c:	40020488 	.word	0x40020488
 8007210:	400204a0 	.word	0x400204a0
 8007214:	400204b8 	.word	0x400204b8
 8007218:	58025408 	.word	0x58025408
 800721c:	5802541c 	.word	0x5802541c
 8007220:	58025430 	.word	0x58025430
 8007224:	58025444 	.word	0x58025444
 8007228:	58025458 	.word	0x58025458
 800722c:	5802546c 	.word	0x5802546c
 8007230:	58025480 	.word	0x58025480
 8007234:	58025494 	.word	0x58025494

08007238 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e237      	b.n	80076ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d004      	beq.n	8007260 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2280      	movs	r2, #128	; 0x80
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e22c      	b.n	80076ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a5c      	ldr	r2, [pc, #368]	; (80073d8 <HAL_DMA_Abort_IT+0x1a0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d04a      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a5b      	ldr	r2, [pc, #364]	; (80073dc <HAL_DMA_Abort_IT+0x1a4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d045      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a59      	ldr	r2, [pc, #356]	; (80073e0 <HAL_DMA_Abort_IT+0x1a8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d040      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a58      	ldr	r2, [pc, #352]	; (80073e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d03b      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a56      	ldr	r2, [pc, #344]	; (80073e8 <HAL_DMA_Abort_IT+0x1b0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d036      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a55      	ldr	r2, [pc, #340]	; (80073ec <HAL_DMA_Abort_IT+0x1b4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d031      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a53      	ldr	r2, [pc, #332]	; (80073f0 <HAL_DMA_Abort_IT+0x1b8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d02c      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a52      	ldr	r2, [pc, #328]	; (80073f4 <HAL_DMA_Abort_IT+0x1bc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d027      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a50      	ldr	r2, [pc, #320]	; (80073f8 <HAL_DMA_Abort_IT+0x1c0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a4f      	ldr	r2, [pc, #316]	; (80073fc <HAL_DMA_Abort_IT+0x1c4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d01d      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_DMA_Abort_IT+0x1c8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a4c      	ldr	r2, [pc, #304]	; (8007404 <HAL_DMA_Abort_IT+0x1cc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a4a      	ldr	r2, [pc, #296]	; (8007408 <HAL_DMA_Abort_IT+0x1d0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a49      	ldr	r2, [pc, #292]	; (800740c <HAL_DMA_Abort_IT+0x1d4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a47      	ldr	r2, [pc, #284]	; (8007410 <HAL_DMA_Abort_IT+0x1d8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_DMA_Abort_IT+0xc8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <HAL_DMA_Abort_IT+0x1dc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <HAL_DMA_Abort_IT+0xcc>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <HAL_DMA_Abort_IT+0xce>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8086 	beq.w	8007418 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2204      	movs	r2, #4
 8007310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <HAL_DMA_Abort_IT+0x1a0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d04a      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a2e      	ldr	r2, [pc, #184]	; (80073dc <HAL_DMA_Abort_IT+0x1a4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d045      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2c      	ldr	r2, [pc, #176]	; (80073e0 <HAL_DMA_Abort_IT+0x1a8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d040      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a2b      	ldr	r2, [pc, #172]	; (80073e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d03b      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a29      	ldr	r2, [pc, #164]	; (80073e8 <HAL_DMA_Abort_IT+0x1b0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d036      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a28      	ldr	r2, [pc, #160]	; (80073ec <HAL_DMA_Abort_IT+0x1b4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d031      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <HAL_DMA_Abort_IT+0x1b8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d02c      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a25      	ldr	r2, [pc, #148]	; (80073f4 <HAL_DMA_Abort_IT+0x1bc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d027      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a23      	ldr	r2, [pc, #140]	; (80073f8 <HAL_DMA_Abort_IT+0x1c0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d022      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a22      	ldr	r2, [pc, #136]	; (80073fc <HAL_DMA_Abort_IT+0x1c4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d01d      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a20      	ldr	r2, [pc, #128]	; (8007400 <HAL_DMA_Abort_IT+0x1c8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d018      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <HAL_DMA_Abort_IT+0x1cc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <HAL_DMA_Abort_IT+0x1d0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00e      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1c      	ldr	r2, [pc, #112]	; (800740c <HAL_DMA_Abort_IT+0x1d4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1a      	ldr	r2, [pc, #104]	; (8007410 <HAL_DMA_Abort_IT+0x1d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <HAL_DMA_Abort_IT+0x17c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a19      	ldr	r2, [pc, #100]	; (8007414 <HAL_DMA_Abort_IT+0x1dc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d108      	bne.n	80073c6 <HAL_DMA_Abort_IT+0x18e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e178      	b.n	80076b8 <HAL_DMA_Abort_IT+0x480>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0201 	bic.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e16f      	b.n	80076b8 <HAL_DMA_Abort_IT+0x480>
 80073d8:	40020010 	.word	0x40020010
 80073dc:	40020028 	.word	0x40020028
 80073e0:	40020040 	.word	0x40020040
 80073e4:	40020058 	.word	0x40020058
 80073e8:	40020070 	.word	0x40020070
 80073ec:	40020088 	.word	0x40020088
 80073f0:	400200a0 	.word	0x400200a0
 80073f4:	400200b8 	.word	0x400200b8
 80073f8:	40020410 	.word	0x40020410
 80073fc:	40020428 	.word	0x40020428
 8007400:	40020440 	.word	0x40020440
 8007404:	40020458 	.word	0x40020458
 8007408:	40020470 	.word	0x40020470
 800740c:	40020488 	.word	0x40020488
 8007410:	400204a0 	.word	0x400204a0
 8007414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 020e 	bic.w	r2, r2, #14
 8007426:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a6c      	ldr	r2, [pc, #432]	; (80075e0 <HAL_DMA_Abort_IT+0x3a8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d04a      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a6b      	ldr	r2, [pc, #428]	; (80075e4 <HAL_DMA_Abort_IT+0x3ac>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d045      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a69      	ldr	r2, [pc, #420]	; (80075e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d040      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a68      	ldr	r2, [pc, #416]	; (80075ec <HAL_DMA_Abort_IT+0x3b4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d03b      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a66      	ldr	r2, [pc, #408]	; (80075f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d036      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a65      	ldr	r2, [pc, #404]	; (80075f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d031      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a63      	ldr	r2, [pc, #396]	; (80075f8 <HAL_DMA_Abort_IT+0x3c0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d02c      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a62      	ldr	r2, [pc, #392]	; (80075fc <HAL_DMA_Abort_IT+0x3c4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d027      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a60      	ldr	r2, [pc, #384]	; (8007600 <HAL_DMA_Abort_IT+0x3c8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d022      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a5f      	ldr	r2, [pc, #380]	; (8007604 <HAL_DMA_Abort_IT+0x3cc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d01d      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a5d      	ldr	r2, [pc, #372]	; (8007608 <HAL_DMA_Abort_IT+0x3d0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d018      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a5c      	ldr	r2, [pc, #368]	; (800760c <HAL_DMA_Abort_IT+0x3d4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a5a      	ldr	r2, [pc, #360]	; (8007610 <HAL_DMA_Abort_IT+0x3d8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00e      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a59      	ldr	r2, [pc, #356]	; (8007614 <HAL_DMA_Abort_IT+0x3dc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d009      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a57      	ldr	r2, [pc, #348]	; (8007618 <HAL_DMA_Abort_IT+0x3e0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <HAL_DMA_Abort_IT+0x290>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a56      	ldr	r2, [pc, #344]	; (800761c <HAL_DMA_Abort_IT+0x3e4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d108      	bne.n	80074da <HAL_DMA_Abort_IT+0x2a2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e007      	b.n	80074ea <HAL_DMA_Abort_IT+0x2b2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0201 	bic.w	r2, r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a3c      	ldr	r2, [pc, #240]	; (80075e0 <HAL_DMA_Abort_IT+0x3a8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d072      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a3a      	ldr	r2, [pc, #232]	; (80075e4 <HAL_DMA_Abort_IT+0x3ac>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d06d      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a39      	ldr	r2, [pc, #228]	; (80075e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d068      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a37      	ldr	r2, [pc, #220]	; (80075ec <HAL_DMA_Abort_IT+0x3b4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d063      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a36      	ldr	r2, [pc, #216]	; (80075f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d05e      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a34      	ldr	r2, [pc, #208]	; (80075f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d059      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a33      	ldr	r2, [pc, #204]	; (80075f8 <HAL_DMA_Abort_IT+0x3c0>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d054      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a31      	ldr	r2, [pc, #196]	; (80075fc <HAL_DMA_Abort_IT+0x3c4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d04f      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a30      	ldr	r2, [pc, #192]	; (8007600 <HAL_DMA_Abort_IT+0x3c8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d04a      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a2e      	ldr	r2, [pc, #184]	; (8007604 <HAL_DMA_Abort_IT+0x3cc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d045      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a2d      	ldr	r2, [pc, #180]	; (8007608 <HAL_DMA_Abort_IT+0x3d0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d040      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a2b      	ldr	r2, [pc, #172]	; (800760c <HAL_DMA_Abort_IT+0x3d4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d03b      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <HAL_DMA_Abort_IT+0x3d8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d036      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a28      	ldr	r2, [pc, #160]	; (8007614 <HAL_DMA_Abort_IT+0x3dc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d031      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a27      	ldr	r2, [pc, #156]	; (8007618 <HAL_DMA_Abort_IT+0x3e0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d02c      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a25      	ldr	r2, [pc, #148]	; (800761c <HAL_DMA_Abort_IT+0x3e4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d027      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a24      	ldr	r2, [pc, #144]	; (8007620 <HAL_DMA_Abort_IT+0x3e8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a22      	ldr	r2, [pc, #136]	; (8007624 <HAL_DMA_Abort_IT+0x3ec>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a21      	ldr	r2, [pc, #132]	; (8007628 <HAL_DMA_Abort_IT+0x3f0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <HAL_DMA_Abort_IT+0x3f4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <HAL_DMA_Abort_IT+0x3f8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1c      	ldr	r2, [pc, #112]	; (8007634 <HAL_DMA_Abort_IT+0x3fc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1b      	ldr	r2, [pc, #108]	; (8007638 <HAL_DMA_Abort_IT+0x400>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_DMA_Abort_IT+0x3a2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a19      	ldr	r2, [pc, #100]	; (800763c <HAL_DMA_Abort_IT+0x404>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d132      	bne.n	8007640 <HAL_DMA_Abort_IT+0x408>
 80075da:	2301      	movs	r3, #1
 80075dc:	e031      	b.n	8007642 <HAL_DMA_Abort_IT+0x40a>
 80075de:	bf00      	nop
 80075e0:	40020010 	.word	0x40020010
 80075e4:	40020028 	.word	0x40020028
 80075e8:	40020040 	.word	0x40020040
 80075ec:	40020058 	.word	0x40020058
 80075f0:	40020070 	.word	0x40020070
 80075f4:	40020088 	.word	0x40020088
 80075f8:	400200a0 	.word	0x400200a0
 80075fc:	400200b8 	.word	0x400200b8
 8007600:	40020410 	.word	0x40020410
 8007604:	40020428 	.word	0x40020428
 8007608:	40020440 	.word	0x40020440
 800760c:	40020458 	.word	0x40020458
 8007610:	40020470 	.word	0x40020470
 8007614:	40020488 	.word	0x40020488
 8007618:	400204a0 	.word	0x400204a0
 800761c:	400204b8 	.word	0x400204b8
 8007620:	58025408 	.word	0x58025408
 8007624:	5802541c 	.word	0x5802541c
 8007628:	58025430 	.word	0x58025430
 800762c:	58025444 	.word	0x58025444
 8007630:	58025458 	.word	0x58025458
 8007634:	5802546c 	.word	0x5802546c
 8007638:	58025480 	.word	0x58025480
 800763c:	58025494 	.word	0x58025494
 8007640:	2300      	movs	r3, #0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d028      	beq.n	8007698 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007654:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	2201      	movs	r2, #1
 8007666:	409a      	lsls	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007674:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800768c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007696:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop

080076c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076d0:	4b67      	ldr	r3, [pc, #412]	; (8007870 <HAL_DMA_IRQHandler+0x1ac>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a67      	ldr	r2, [pc, #412]	; (8007874 <HAL_DMA_IRQHandler+0x1b0>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	0a9b      	lsrs	r3, r3, #10
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a5f      	ldr	r2, [pc, #380]	; (8007878 <HAL_DMA_IRQHandler+0x1b4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d04a      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a5d      	ldr	r2, [pc, #372]	; (800787c <HAL_DMA_IRQHandler+0x1b8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d045      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a5c      	ldr	r2, [pc, #368]	; (8007880 <HAL_DMA_IRQHandler+0x1bc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d040      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a5a      	ldr	r2, [pc, #360]	; (8007884 <HAL_DMA_IRQHandler+0x1c0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d03b      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a59      	ldr	r2, [pc, #356]	; (8007888 <HAL_DMA_IRQHandler+0x1c4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d036      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a57      	ldr	r2, [pc, #348]	; (800788c <HAL_DMA_IRQHandler+0x1c8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d031      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a56      	ldr	r2, [pc, #344]	; (8007890 <HAL_DMA_IRQHandler+0x1cc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d02c      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a54      	ldr	r2, [pc, #336]	; (8007894 <HAL_DMA_IRQHandler+0x1d0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d027      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a53      	ldr	r2, [pc, #332]	; (8007898 <HAL_DMA_IRQHandler+0x1d4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d022      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a51      	ldr	r2, [pc, #324]	; (800789c <HAL_DMA_IRQHandler+0x1d8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01d      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a50      	ldr	r2, [pc, #320]	; (80078a0 <HAL_DMA_IRQHandler+0x1dc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a4e      	ldr	r2, [pc, #312]	; (80078a4 <HAL_DMA_IRQHandler+0x1e0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d013      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a4d      	ldr	r2, [pc, #308]	; (80078a8 <HAL_DMA_IRQHandler+0x1e4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a4b      	ldr	r2, [pc, #300]	; (80078ac <HAL_DMA_IRQHandler+0x1e8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a4a      	ldr	r2, [pc, #296]	; (80078b0 <HAL_DMA_IRQHandler+0x1ec>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_DMA_IRQHandler+0xd2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a48      	ldr	r2, [pc, #288]	; (80078b4 <HAL_DMA_IRQHandler+0x1f0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d101      	bne.n	800779a <HAL_DMA_IRQHandler+0xd6>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <HAL_DMA_IRQHandler+0xd8>
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 842b 	beq.w	8007ff8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2208      	movs	r2, #8
 80077ac:	409a      	lsls	r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80a2 	beq.w	80078fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2e      	ldr	r2, [pc, #184]	; (8007878 <HAL_DMA_IRQHandler+0x1b4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d04a      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2d      	ldr	r2, [pc, #180]	; (800787c <HAL_DMA_IRQHandler+0x1b8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d045      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2b      	ldr	r2, [pc, #172]	; (8007880 <HAL_DMA_IRQHandler+0x1bc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d040      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2a      	ldr	r2, [pc, #168]	; (8007884 <HAL_DMA_IRQHandler+0x1c0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d03b      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <HAL_DMA_IRQHandler+0x1c4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d036      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a27      	ldr	r2, [pc, #156]	; (800788c <HAL_DMA_IRQHandler+0x1c8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d031      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a25      	ldr	r2, [pc, #148]	; (8007890 <HAL_DMA_IRQHandler+0x1cc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d02c      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a24      	ldr	r2, [pc, #144]	; (8007894 <HAL_DMA_IRQHandler+0x1d0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d027      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a22      	ldr	r2, [pc, #136]	; (8007898 <HAL_DMA_IRQHandler+0x1d4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d022      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a21      	ldr	r2, [pc, #132]	; (800789c <HAL_DMA_IRQHandler+0x1d8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d01d      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <HAL_DMA_IRQHandler+0x1dc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d018      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <HAL_DMA_IRQHandler+0x1e0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <HAL_DMA_IRQHandler+0x1e4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00e      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1b      	ldr	r2, [pc, #108]	; (80078ac <HAL_DMA_IRQHandler+0x1e8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a19      	ldr	r2, [pc, #100]	; (80078b0 <HAL_DMA_IRQHandler+0x1ec>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_DMA_IRQHandler+0x194>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <HAL_DMA_IRQHandler+0x1f0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d12f      	bne.n	80078b8 <HAL_DMA_IRQHandler+0x1f4>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	bf14      	ite	ne
 8007866:	2301      	movne	r3, #1
 8007868:	2300      	moveq	r3, #0
 800786a:	b2db      	uxtb	r3, r3
 800786c:	e02e      	b.n	80078cc <HAL_DMA_IRQHandler+0x208>
 800786e:	bf00      	nop
 8007870:	24000090 	.word	0x24000090
 8007874:	1b4e81b5 	.word	0x1b4e81b5
 8007878:	40020010 	.word	0x40020010
 800787c:	40020028 	.word	0x40020028
 8007880:	40020040 	.word	0x40020040
 8007884:	40020058 	.word	0x40020058
 8007888:	40020070 	.word	0x40020070
 800788c:	40020088 	.word	0x40020088
 8007890:	400200a0 	.word	0x400200a0
 8007894:	400200b8 	.word	0x400200b8
 8007898:	40020410 	.word	0x40020410
 800789c:	40020428 	.word	0x40020428
 80078a0:	40020440 	.word	0x40020440
 80078a4:	40020458 	.word	0x40020458
 80078a8:	40020470 	.word	0x40020470
 80078ac:	40020488 	.word	0x40020488
 80078b0:	400204a0 	.word	0x400204a0
 80078b4:	400204b8 	.word	0x400204b8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bf14      	ite	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	2300      	moveq	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d015      	beq.n	80078fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0204 	bic.w	r2, r2, #4
 80078de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	2208      	movs	r2, #8
 80078ea:	409a      	lsls	r2, r3
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f4:	f043 0201 	orr.w	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	fa22 f303 	lsr.w	r3, r2, r3
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d06e      	beq.n	80079f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a69      	ldr	r2, [pc, #420]	; (8007abc <HAL_DMA_IRQHandler+0x3f8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d04a      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a67      	ldr	r2, [pc, #412]	; (8007ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d045      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a66      	ldr	r2, [pc, #408]	; (8007ac4 <HAL_DMA_IRQHandler+0x400>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d040      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a64      	ldr	r2, [pc, #400]	; (8007ac8 <HAL_DMA_IRQHandler+0x404>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d03b      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a63      	ldr	r2, [pc, #396]	; (8007acc <HAL_DMA_IRQHandler+0x408>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d036      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a61      	ldr	r2, [pc, #388]	; (8007ad0 <HAL_DMA_IRQHandler+0x40c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d031      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a60      	ldr	r2, [pc, #384]	; (8007ad4 <HAL_DMA_IRQHandler+0x410>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d02c      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a5e      	ldr	r2, [pc, #376]	; (8007ad8 <HAL_DMA_IRQHandler+0x414>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d027      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a5d      	ldr	r2, [pc, #372]	; (8007adc <HAL_DMA_IRQHandler+0x418>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d022      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a5b      	ldr	r2, [pc, #364]	; (8007ae0 <HAL_DMA_IRQHandler+0x41c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01d      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a5a      	ldr	r2, [pc, #360]	; (8007ae4 <HAL_DMA_IRQHandler+0x420>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d018      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a58      	ldr	r2, [pc, #352]	; (8007ae8 <HAL_DMA_IRQHandler+0x424>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a57      	ldr	r2, [pc, #348]	; (8007aec <HAL_DMA_IRQHandler+0x428>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a55      	ldr	r2, [pc, #340]	; (8007af0 <HAL_DMA_IRQHandler+0x42c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a54      	ldr	r2, [pc, #336]	; (8007af4 <HAL_DMA_IRQHandler+0x430>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x2ee>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a52      	ldr	r2, [pc, #328]	; (8007af8 <HAL_DMA_IRQHandler+0x434>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10a      	bne.n	80079c8 <HAL_DMA_IRQHandler+0x304>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	e003      	b.n	80079d0 <HAL_DMA_IRQHandler+0x30c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2300      	movs	r3, #0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00d      	beq.n	80079f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2201      	movs	r2, #1
 80079de:	409a      	lsls	r2, r3
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e8:	f043 0202 	orr.w	r2, r3, #2
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2204      	movs	r2, #4
 80079fa:	409a      	lsls	r2, r3
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 808f 	beq.w	8007b24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a2c      	ldr	r2, [pc, #176]	; (8007abc <HAL_DMA_IRQHandler+0x3f8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d04a      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d045      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <HAL_DMA_IRQHandler+0x400>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d040      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <HAL_DMA_IRQHandler+0x404>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d03b      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a26      	ldr	r2, [pc, #152]	; (8007acc <HAL_DMA_IRQHandler+0x408>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d036      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a24      	ldr	r2, [pc, #144]	; (8007ad0 <HAL_DMA_IRQHandler+0x40c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d031      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a23      	ldr	r2, [pc, #140]	; (8007ad4 <HAL_DMA_IRQHandler+0x410>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d02c      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a21      	ldr	r2, [pc, #132]	; (8007ad8 <HAL_DMA_IRQHandler+0x414>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d027      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a20      	ldr	r2, [pc, #128]	; (8007adc <HAL_DMA_IRQHandler+0x418>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d022      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <HAL_DMA_IRQHandler+0x41c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01d      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_DMA_IRQHandler+0x420>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d018      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <HAL_DMA_IRQHandler+0x424>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1a      	ldr	r2, [pc, #104]	; (8007aec <HAL_DMA_IRQHandler+0x428>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00e      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a18      	ldr	r2, [pc, #96]	; (8007af0 <HAL_DMA_IRQHandler+0x42c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a17      	ldr	r2, [pc, #92]	; (8007af4 <HAL_DMA_IRQHandler+0x430>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x3e2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <HAL_DMA_IRQHandler+0x434>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d12a      	bne.n	8007afc <HAL_DMA_IRQHandler+0x438>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf14      	ite	ne
 8007ab4:	2301      	movne	r3, #1
 8007ab6:	2300      	moveq	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	e023      	b.n	8007b04 <HAL_DMA_IRQHandler+0x440>
 8007abc:	40020010 	.word	0x40020010
 8007ac0:	40020028 	.word	0x40020028
 8007ac4:	40020040 	.word	0x40020040
 8007ac8:	40020058 	.word	0x40020058
 8007acc:	40020070 	.word	0x40020070
 8007ad0:	40020088 	.word	0x40020088
 8007ad4:	400200a0 	.word	0x400200a0
 8007ad8:	400200b8 	.word	0x400200b8
 8007adc:	40020410 	.word	0x40020410
 8007ae0:	40020428 	.word	0x40020428
 8007ae4:	40020440 	.word	0x40020440
 8007ae8:	40020458 	.word	0x40020458
 8007aec:	40020470 	.word	0x40020470
 8007af0:	40020488 	.word	0x40020488
 8007af4:	400204a0 	.word	0x400204a0
 8007af8:	400204b8 	.word	0x400204b8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00d      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	2204      	movs	r2, #4
 8007b12:	409a      	lsls	r2, r3
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1c:	f043 0204 	orr.w	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80a6 	beq.w	8007c86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a85      	ldr	r2, [pc, #532]	; (8007d54 <HAL_DMA_IRQHandler+0x690>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d04a      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a83      	ldr	r2, [pc, #524]	; (8007d58 <HAL_DMA_IRQHandler+0x694>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d045      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a82      	ldr	r2, [pc, #520]	; (8007d5c <HAL_DMA_IRQHandler+0x698>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d040      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a80      	ldr	r2, [pc, #512]	; (8007d60 <HAL_DMA_IRQHandler+0x69c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d03b      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a7f      	ldr	r2, [pc, #508]	; (8007d64 <HAL_DMA_IRQHandler+0x6a0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d036      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a7d      	ldr	r2, [pc, #500]	; (8007d68 <HAL_DMA_IRQHandler+0x6a4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d031      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a7c      	ldr	r2, [pc, #496]	; (8007d6c <HAL_DMA_IRQHandler+0x6a8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d02c      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a7a      	ldr	r2, [pc, #488]	; (8007d70 <HAL_DMA_IRQHandler+0x6ac>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d027      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a79      	ldr	r2, [pc, #484]	; (8007d74 <HAL_DMA_IRQHandler+0x6b0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a77      	ldr	r2, [pc, #476]	; (8007d78 <HAL_DMA_IRQHandler+0x6b4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01d      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a76      	ldr	r2, [pc, #472]	; (8007d7c <HAL_DMA_IRQHandler+0x6b8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a74      	ldr	r2, [pc, #464]	; (8007d80 <HAL_DMA_IRQHandler+0x6bc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a73      	ldr	r2, [pc, #460]	; (8007d84 <HAL_DMA_IRQHandler+0x6c0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a71      	ldr	r2, [pc, #452]	; (8007d88 <HAL_DMA_IRQHandler+0x6c4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a70      	ldr	r2, [pc, #448]	; (8007d8c <HAL_DMA_IRQHandler+0x6c8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_DMA_IRQHandler+0x516>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a6e      	ldr	r2, [pc, #440]	; (8007d90 <HAL_DMA_IRQHandler+0x6cc>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d10a      	bne.n	8007bf0 <HAL_DMA_IRQHandler+0x52c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bf14      	ite	ne
 8007be8:	2301      	movne	r3, #1
 8007bea:	2300      	moveq	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	e009      	b.n	8007c04 <HAL_DMA_IRQHandler+0x540>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf14      	ite	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	2300      	moveq	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d03e      	beq.n	8007c86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	f003 031f 	and.w	r3, r3, #31
 8007c10:	2210      	movs	r2, #16
 8007c12:	409a      	lsls	r2, r3
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d018      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d024      	beq.n	8007c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	4798      	blx	r3
 8007c44:	e01f      	b.n	8007c86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01b      	beq.n	8007c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	e016      	b.n	8007c86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d107      	bne.n	8007c76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0208 	bic.w	r2, r2, #8
 8007c74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	2220      	movs	r2, #32
 8007c90:	409a      	lsls	r2, r3
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	4013      	ands	r3, r2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 8110 	beq.w	8007ebc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <HAL_DMA_IRQHandler+0x690>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d04a      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a2b      	ldr	r2, [pc, #172]	; (8007d58 <HAL_DMA_IRQHandler+0x694>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d045      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a29      	ldr	r2, [pc, #164]	; (8007d5c <HAL_DMA_IRQHandler+0x698>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d040      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a28      	ldr	r2, [pc, #160]	; (8007d60 <HAL_DMA_IRQHandler+0x69c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d03b      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a26      	ldr	r2, [pc, #152]	; (8007d64 <HAL_DMA_IRQHandler+0x6a0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d036      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a25      	ldr	r2, [pc, #148]	; (8007d68 <HAL_DMA_IRQHandler+0x6a4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d031      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a23      	ldr	r2, [pc, #140]	; (8007d6c <HAL_DMA_IRQHandler+0x6a8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d02c      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <HAL_DMA_IRQHandler+0x6ac>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d027      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a20      	ldr	r2, [pc, #128]	; (8007d74 <HAL_DMA_IRQHandler+0x6b0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d022      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1f      	ldr	r2, [pc, #124]	; (8007d78 <HAL_DMA_IRQHandler+0x6b4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d01d      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1d      	ldr	r2, [pc, #116]	; (8007d7c <HAL_DMA_IRQHandler+0x6b8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d018      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1c      	ldr	r2, [pc, #112]	; (8007d80 <HAL_DMA_IRQHandler+0x6bc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d013      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <HAL_DMA_IRQHandler+0x6c0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00e      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <HAL_DMA_IRQHandler+0x6c4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d009      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a17      	ldr	r2, [pc, #92]	; (8007d8c <HAL_DMA_IRQHandler+0x6c8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x678>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a16      	ldr	r2, [pc, #88]	; (8007d90 <HAL_DMA_IRQHandler+0x6cc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d12b      	bne.n	8007d94 <HAL_DMA_IRQHandler+0x6d0>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0310 	and.w	r3, r3, #16
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bf14      	ite	ne
 8007d4a:	2301      	movne	r3, #1
 8007d4c:	2300      	moveq	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	e02a      	b.n	8007da8 <HAL_DMA_IRQHandler+0x6e4>
 8007d52:	bf00      	nop
 8007d54:	40020010 	.word	0x40020010
 8007d58:	40020028 	.word	0x40020028
 8007d5c:	40020040 	.word	0x40020040
 8007d60:	40020058 	.word	0x40020058
 8007d64:	40020070 	.word	0x40020070
 8007d68:	40020088 	.word	0x40020088
 8007d6c:	400200a0 	.word	0x400200a0
 8007d70:	400200b8 	.word	0x400200b8
 8007d74:	40020410 	.word	0x40020410
 8007d78:	40020428 	.word	0x40020428
 8007d7c:	40020440 	.word	0x40020440
 8007d80:	40020458 	.word	0x40020458
 8007d84:	40020470 	.word	0x40020470
 8007d88:	40020488 	.word	0x40020488
 8007d8c:	400204a0 	.word	0x400204a0
 8007d90:	400204b8 	.word	0x400204b8
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bf14      	ite	ne
 8007da2:	2301      	movne	r3, #1
 8007da4:	2300      	moveq	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8087 	beq.w	8007ebc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2220      	movs	r2, #32
 8007db8:	409a      	lsls	r2, r3
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d139      	bne.n	8007e3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0216 	bic.w	r2, r2, #22
 8007dd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	695a      	ldr	r2, [r3, #20]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007de8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <HAL_DMA_IRQHandler+0x736>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0208 	bic.w	r2, r2, #8
 8007e08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	223f      	movs	r2, #63	; 0x3f
 8007e14:	409a      	lsls	r2, r3
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 834a 	beq.w	80084c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
          }
          return;
 8007e3c:	e344      	b.n	80084c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d018      	beq.n	8007e7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02c      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	e027      	b.n	8007ebc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d023      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	e01e      	b.n	8007ebc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10f      	bne.n	8007eac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0210 	bic.w	r2, r2, #16
 8007e9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8306 	beq.w	80084d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8088 	beq.w	8007fe4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a7a      	ldr	r2, [pc, #488]	; (80080cc <HAL_DMA_IRQHandler+0xa08>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d04a      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a79      	ldr	r2, [pc, #484]	; (80080d0 <HAL_DMA_IRQHandler+0xa0c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d045      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a77      	ldr	r2, [pc, #476]	; (80080d4 <HAL_DMA_IRQHandler+0xa10>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d040      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a76      	ldr	r2, [pc, #472]	; (80080d8 <HAL_DMA_IRQHandler+0xa14>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d03b      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a74      	ldr	r2, [pc, #464]	; (80080dc <HAL_DMA_IRQHandler+0xa18>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d036      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a73      	ldr	r2, [pc, #460]	; (80080e0 <HAL_DMA_IRQHandler+0xa1c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d031      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a71      	ldr	r2, [pc, #452]	; (80080e4 <HAL_DMA_IRQHandler+0xa20>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d02c      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a70      	ldr	r2, [pc, #448]	; (80080e8 <HAL_DMA_IRQHandler+0xa24>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d027      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a6e      	ldr	r2, [pc, #440]	; (80080ec <HAL_DMA_IRQHandler+0xa28>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d022      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a6d      	ldr	r2, [pc, #436]	; (80080f0 <HAL_DMA_IRQHandler+0xa2c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d01d      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a6b      	ldr	r2, [pc, #428]	; (80080f4 <HAL_DMA_IRQHandler+0xa30>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d018      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a6a      	ldr	r2, [pc, #424]	; (80080f8 <HAL_DMA_IRQHandler+0xa34>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a68      	ldr	r2, [pc, #416]	; (80080fc <HAL_DMA_IRQHandler+0xa38>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00e      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a67      	ldr	r2, [pc, #412]	; (8008100 <HAL_DMA_IRQHandler+0xa3c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d009      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a65      	ldr	r2, [pc, #404]	; (8008104 <HAL_DMA_IRQHandler+0xa40>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x8b8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a64      	ldr	r2, [pc, #400]	; (8008108 <HAL_DMA_IRQHandler+0xa44>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d108      	bne.n	8007f8e <HAL_DMA_IRQHandler+0x8ca>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0201 	bic.w	r2, r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	e007      	b.n	8007f9e <HAL_DMA_IRQHandler+0x8da>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d307      	bcc.n	8007fba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f2      	bne.n	8007f9e <HAL_DMA_IRQHandler+0x8da>
 8007fb8:	e000      	b.n	8007fbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007fba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2203      	movs	r2, #3
 8007fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007fd2:	e003      	b.n	8007fdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8272 	beq.w	80084d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
 8007ff6:	e26c      	b.n	80084d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a43      	ldr	r2, [pc, #268]	; (800810c <HAL_DMA_IRQHandler+0xa48>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d022      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a42      	ldr	r2, [pc, #264]	; (8008110 <HAL_DMA_IRQHandler+0xa4c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d01d      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a40      	ldr	r2, [pc, #256]	; (8008114 <HAL_DMA_IRQHandler+0xa50>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d018      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a3f      	ldr	r2, [pc, #252]	; (8008118 <HAL_DMA_IRQHandler+0xa54>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a3d      	ldr	r2, [pc, #244]	; (800811c <HAL_DMA_IRQHandler+0xa58>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00e      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a3c      	ldr	r2, [pc, #240]	; (8008120 <HAL_DMA_IRQHandler+0xa5c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d009      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a3a      	ldr	r2, [pc, #232]	; (8008124 <HAL_DMA_IRQHandler+0xa60>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <HAL_DMA_IRQHandler+0x984>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a39      	ldr	r2, [pc, #228]	; (8008128 <HAL_DMA_IRQHandler+0xa64>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <HAL_DMA_IRQHandler+0x988>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <HAL_DMA_IRQHandler+0x98a>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 823f 	beq.w	80084d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008060:	f003 031f 	and.w	r3, r3, #31
 8008064:	2204      	movs	r2, #4
 8008066:	409a      	lsls	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 80cd 	beq.w	800820c <HAL_DMA_IRQHandler+0xb48>
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 80c7 	beq.w	800820c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008082:	f003 031f 	and.w	r3, r3, #31
 8008086:	2204      	movs	r2, #4
 8008088:	409a      	lsls	r2, r3
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d049      	beq.n	800812c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 8210 	beq.w	80084cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080b4:	e20a      	b.n	80084cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 8206 	beq.w	80084cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080c8:	e200      	b.n	80084cc <HAL_DMA_IRQHandler+0xe08>
 80080ca:	bf00      	nop
 80080cc:	40020010 	.word	0x40020010
 80080d0:	40020028 	.word	0x40020028
 80080d4:	40020040 	.word	0x40020040
 80080d8:	40020058 	.word	0x40020058
 80080dc:	40020070 	.word	0x40020070
 80080e0:	40020088 	.word	0x40020088
 80080e4:	400200a0 	.word	0x400200a0
 80080e8:	400200b8 	.word	0x400200b8
 80080ec:	40020410 	.word	0x40020410
 80080f0:	40020428 	.word	0x40020428
 80080f4:	40020440 	.word	0x40020440
 80080f8:	40020458 	.word	0x40020458
 80080fc:	40020470 	.word	0x40020470
 8008100:	40020488 	.word	0x40020488
 8008104:	400204a0 	.word	0x400204a0
 8008108:	400204b8 	.word	0x400204b8
 800810c:	58025408 	.word	0x58025408
 8008110:	5802541c 	.word	0x5802541c
 8008114:	58025430 	.word	0x58025430
 8008118:	58025444 	.word	0x58025444
 800811c:	58025458 	.word	0x58025458
 8008120:	5802546c 	.word	0x5802546c
 8008124:	58025480 	.word	0x58025480
 8008128:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d160      	bne.n	80081f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a7f      	ldr	r2, [pc, #508]	; (8008338 <HAL_DMA_IRQHandler+0xc74>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d04a      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a7d      	ldr	r2, [pc, #500]	; (800833c <HAL_DMA_IRQHandler+0xc78>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d045      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a7c      	ldr	r2, [pc, #496]	; (8008340 <HAL_DMA_IRQHandler+0xc7c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d040      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a7a      	ldr	r2, [pc, #488]	; (8008344 <HAL_DMA_IRQHandler+0xc80>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d03b      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a79      	ldr	r2, [pc, #484]	; (8008348 <HAL_DMA_IRQHandler+0xc84>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d036      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a77      	ldr	r2, [pc, #476]	; (800834c <HAL_DMA_IRQHandler+0xc88>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d031      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a76      	ldr	r2, [pc, #472]	; (8008350 <HAL_DMA_IRQHandler+0xc8c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d02c      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a74      	ldr	r2, [pc, #464]	; (8008354 <HAL_DMA_IRQHandler+0xc90>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d027      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a73      	ldr	r2, [pc, #460]	; (8008358 <HAL_DMA_IRQHandler+0xc94>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d022      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a71      	ldr	r2, [pc, #452]	; (800835c <HAL_DMA_IRQHandler+0xc98>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d01d      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a70      	ldr	r2, [pc, #448]	; (8008360 <HAL_DMA_IRQHandler+0xc9c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d018      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a6e      	ldr	r2, [pc, #440]	; (8008364 <HAL_DMA_IRQHandler+0xca0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a6d      	ldr	r2, [pc, #436]	; (8008368 <HAL_DMA_IRQHandler+0xca4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00e      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6b      	ldr	r2, [pc, #428]	; (800836c <HAL_DMA_IRQHandler+0xca8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d009      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a6a      	ldr	r2, [pc, #424]	; (8008370 <HAL_DMA_IRQHandler+0xcac>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d004      	beq.n	80081d6 <HAL_DMA_IRQHandler+0xb12>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a68      	ldr	r2, [pc, #416]	; (8008374 <HAL_DMA_IRQHandler+0xcb0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d108      	bne.n	80081e8 <HAL_DMA_IRQHandler+0xb24>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0208 	bic.w	r2, r2, #8
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e007      	b.n	80081f8 <HAL_DMA_IRQHandler+0xb34>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0204 	bic.w	r2, r2, #4
 80081f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8165 	beq.w	80084cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800820a:	e15f      	b.n	80084cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	2202      	movs	r2, #2
 8008216:	409a      	lsls	r2, r3
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80c5 	beq.w	80083ac <HAL_DMA_IRQHandler+0xce8>
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 80bf 	beq.w	80083ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	2202      	movs	r2, #2
 8008238:	409a      	lsls	r2, r3
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d018      	beq.n	800827a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 813a 	beq.w	80084d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008264:	e134      	b.n	80084d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8130 	beq.w	80084d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008278:	e12a      	b.n	80084d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 8089 	bne.w	8008398 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2b      	ldr	r2, [pc, #172]	; (8008338 <HAL_DMA_IRQHandler+0xc74>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d04a      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a29      	ldr	r2, [pc, #164]	; (800833c <HAL_DMA_IRQHandler+0xc78>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d045      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a28      	ldr	r2, [pc, #160]	; (8008340 <HAL_DMA_IRQHandler+0xc7c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d040      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a26      	ldr	r2, [pc, #152]	; (8008344 <HAL_DMA_IRQHandler+0xc80>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d03b      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a25      	ldr	r2, [pc, #148]	; (8008348 <HAL_DMA_IRQHandler+0xc84>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d036      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a23      	ldr	r2, [pc, #140]	; (800834c <HAL_DMA_IRQHandler+0xc88>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d031      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a22      	ldr	r2, [pc, #136]	; (8008350 <HAL_DMA_IRQHandler+0xc8c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d02c      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a20      	ldr	r2, [pc, #128]	; (8008354 <HAL_DMA_IRQHandler+0xc90>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d027      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <HAL_DMA_IRQHandler+0xc94>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d022      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1d      	ldr	r2, [pc, #116]	; (800835c <HAL_DMA_IRQHandler+0xc98>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d01d      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_DMA_IRQHandler+0xc9c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d018      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <HAL_DMA_IRQHandler+0xca0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_DMA_IRQHandler+0xca4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00e      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <HAL_DMA_IRQHandler+0xca8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d009      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a16      	ldr	r2, [pc, #88]	; (8008370 <HAL_DMA_IRQHandler+0xcac>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d004      	beq.n	8008326 <HAL_DMA_IRQHandler+0xc62>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a14      	ldr	r2, [pc, #80]	; (8008374 <HAL_DMA_IRQHandler+0xcb0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d128      	bne.n	8008378 <HAL_DMA_IRQHandler+0xcb4>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0214 	bic.w	r2, r2, #20
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e027      	b.n	8008388 <HAL_DMA_IRQHandler+0xcc4>
 8008338:	40020010 	.word	0x40020010
 800833c:	40020028 	.word	0x40020028
 8008340:	40020040 	.word	0x40020040
 8008344:	40020058 	.word	0x40020058
 8008348:	40020070 	.word	0x40020070
 800834c:	40020088 	.word	0x40020088
 8008350:	400200a0 	.word	0x400200a0
 8008354:	400200b8 	.word	0x400200b8
 8008358:	40020410 	.word	0x40020410
 800835c:	40020428 	.word	0x40020428
 8008360:	40020440 	.word	0x40020440
 8008364:	40020458 	.word	0x40020458
 8008368:	40020470 	.word	0x40020470
 800836c:	40020488 	.word	0x40020488
 8008370:	400204a0 	.word	0x400204a0
 8008374:	400204b8 	.word	0x400204b8
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 020a 	bic.w	r2, r2, #10
 8008386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8097 	beq.w	80084d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083aa:	e091      	b.n	80084d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b0:	f003 031f 	and.w	r3, r3, #31
 80083b4:	2208      	movs	r2, #8
 80083b6:	409a      	lsls	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8088 	beq.w	80084d2 <HAL_DMA_IRQHandler+0xe0e>
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8082 	beq.w	80084d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a41      	ldr	r2, [pc, #260]	; (80084d8 <HAL_DMA_IRQHandler+0xe14>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d04a      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a3f      	ldr	r2, [pc, #252]	; (80084dc <HAL_DMA_IRQHandler+0xe18>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d045      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3e      	ldr	r2, [pc, #248]	; (80084e0 <HAL_DMA_IRQHandler+0xe1c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d040      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a3c      	ldr	r2, [pc, #240]	; (80084e4 <HAL_DMA_IRQHandler+0xe20>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d03b      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3b      	ldr	r2, [pc, #236]	; (80084e8 <HAL_DMA_IRQHandler+0xe24>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d036      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a39      	ldr	r2, [pc, #228]	; (80084ec <HAL_DMA_IRQHandler+0xe28>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d031      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a38      	ldr	r2, [pc, #224]	; (80084f0 <HAL_DMA_IRQHandler+0xe2c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d02c      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a36      	ldr	r2, [pc, #216]	; (80084f4 <HAL_DMA_IRQHandler+0xe30>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d027      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a35      	ldr	r2, [pc, #212]	; (80084f8 <HAL_DMA_IRQHandler+0xe34>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d022      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a33      	ldr	r2, [pc, #204]	; (80084fc <HAL_DMA_IRQHandler+0xe38>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01d      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a32      	ldr	r2, [pc, #200]	; (8008500 <HAL_DMA_IRQHandler+0xe3c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a30      	ldr	r2, [pc, #192]	; (8008504 <HAL_DMA_IRQHandler+0xe40>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a2f      	ldr	r2, [pc, #188]	; (8008508 <HAL_DMA_IRQHandler+0xe44>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a2d      	ldr	r2, [pc, #180]	; (800850c <HAL_DMA_IRQHandler+0xe48>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a2c      	ldr	r2, [pc, #176]	; (8008510 <HAL_DMA_IRQHandler+0xe4c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <HAL_DMA_IRQHandler+0xdaa>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a2a      	ldr	r2, [pc, #168]	; (8008514 <HAL_DMA_IRQHandler+0xe50>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d108      	bne.n	8008480 <HAL_DMA_IRQHandler+0xdbc>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 021c 	bic.w	r2, r2, #28
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e007      	b.n	8008490 <HAL_DMA_IRQHandler+0xdcc>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 020e 	bic.w	r2, r2, #14
 800848e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008494:	f003 031f 	and.w	r3, r3, #31
 8008498:	2201      	movs	r2, #1
 800849a:	409a      	lsls	r2, r3
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	e004      	b.n	80084d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80084c8:	bf00      	nop
 80084ca:	e002      	b.n	80084d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084cc:	bf00      	nop
 80084ce:	e000      	b.n	80084d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084d2:	3728      	adds	r7, #40	; 0x28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40020010 	.word	0x40020010
 80084dc:	40020028 	.word	0x40020028
 80084e0:	40020040 	.word	0x40020040
 80084e4:	40020058 	.word	0x40020058
 80084e8:	40020070 	.word	0x40020070
 80084ec:	40020088 	.word	0x40020088
 80084f0:	400200a0 	.word	0x400200a0
 80084f4:	400200b8 	.word	0x400200b8
 80084f8:	40020410 	.word	0x40020410
 80084fc:	40020428 	.word	0x40020428
 8008500:	40020440 	.word	0x40020440
 8008504:	40020458 	.word	0x40020458
 8008508:	40020470 	.word	0x40020470
 800850c:	40020488 	.word	0x40020488
 8008510:	400204a0 	.word	0x400204a0
 8008514:	400204b8 	.word	0x400204b8

08008518 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008542:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008548:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a7f      	ldr	r2, [pc, #508]	; (800874c <DMA_SetConfig+0x21c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d072      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7d      	ldr	r2, [pc, #500]	; (8008750 <DMA_SetConfig+0x220>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d06d      	beq.n	800863a <DMA_SetConfig+0x10a>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a7c      	ldr	r2, [pc, #496]	; (8008754 <DMA_SetConfig+0x224>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d068      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a7a      	ldr	r2, [pc, #488]	; (8008758 <DMA_SetConfig+0x228>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d063      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a79      	ldr	r2, [pc, #484]	; (800875c <DMA_SetConfig+0x22c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d05e      	beq.n	800863a <DMA_SetConfig+0x10a>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a77      	ldr	r2, [pc, #476]	; (8008760 <DMA_SetConfig+0x230>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d059      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a76      	ldr	r2, [pc, #472]	; (8008764 <DMA_SetConfig+0x234>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d054      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a74      	ldr	r2, [pc, #464]	; (8008768 <DMA_SetConfig+0x238>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d04f      	beq.n	800863a <DMA_SetConfig+0x10a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a73      	ldr	r2, [pc, #460]	; (800876c <DMA_SetConfig+0x23c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d04a      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a71      	ldr	r2, [pc, #452]	; (8008770 <DMA_SetConfig+0x240>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d045      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a70      	ldr	r2, [pc, #448]	; (8008774 <DMA_SetConfig+0x244>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d040      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a6e      	ldr	r2, [pc, #440]	; (8008778 <DMA_SetConfig+0x248>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d03b      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a6d      	ldr	r2, [pc, #436]	; (800877c <DMA_SetConfig+0x24c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d036      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a6b      	ldr	r2, [pc, #428]	; (8008780 <DMA_SetConfig+0x250>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d031      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a6a      	ldr	r2, [pc, #424]	; (8008784 <DMA_SetConfig+0x254>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d02c      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a68      	ldr	r2, [pc, #416]	; (8008788 <DMA_SetConfig+0x258>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d027      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a67      	ldr	r2, [pc, #412]	; (800878c <DMA_SetConfig+0x25c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d022      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a65      	ldr	r2, [pc, #404]	; (8008790 <DMA_SetConfig+0x260>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d01d      	beq.n	800863a <DMA_SetConfig+0x10a>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a64      	ldr	r2, [pc, #400]	; (8008794 <DMA_SetConfig+0x264>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d018      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a62      	ldr	r2, [pc, #392]	; (8008798 <DMA_SetConfig+0x268>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d013      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a61      	ldr	r2, [pc, #388]	; (800879c <DMA_SetConfig+0x26c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d00e      	beq.n	800863a <DMA_SetConfig+0x10a>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a5f      	ldr	r2, [pc, #380]	; (80087a0 <DMA_SetConfig+0x270>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d009      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a5e      	ldr	r2, [pc, #376]	; (80087a4 <DMA_SetConfig+0x274>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d004      	beq.n	800863a <DMA_SetConfig+0x10a>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a5c      	ldr	r2, [pc, #368]	; (80087a8 <DMA_SetConfig+0x278>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d101      	bne.n	800863e <DMA_SetConfig+0x10e>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <DMA_SetConfig+0x110>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00d      	beq.n	8008660 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800864c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800865e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a39      	ldr	r2, [pc, #228]	; (800874c <DMA_SetConfig+0x21c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d04a      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a38      	ldr	r2, [pc, #224]	; (8008750 <DMA_SetConfig+0x220>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d045      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a36      	ldr	r2, [pc, #216]	; (8008754 <DMA_SetConfig+0x224>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d040      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a35      	ldr	r2, [pc, #212]	; (8008758 <DMA_SetConfig+0x228>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d03b      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a33      	ldr	r2, [pc, #204]	; (800875c <DMA_SetConfig+0x22c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d036      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a32      	ldr	r2, [pc, #200]	; (8008760 <DMA_SetConfig+0x230>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d031      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a30      	ldr	r2, [pc, #192]	; (8008764 <DMA_SetConfig+0x234>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d02c      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a2f      	ldr	r2, [pc, #188]	; (8008768 <DMA_SetConfig+0x238>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d027      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a2d      	ldr	r2, [pc, #180]	; (800876c <DMA_SetConfig+0x23c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d022      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a2c      	ldr	r2, [pc, #176]	; (8008770 <DMA_SetConfig+0x240>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d01d      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a2a      	ldr	r2, [pc, #168]	; (8008774 <DMA_SetConfig+0x244>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d018      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a29      	ldr	r2, [pc, #164]	; (8008778 <DMA_SetConfig+0x248>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a27      	ldr	r2, [pc, #156]	; (800877c <DMA_SetConfig+0x24c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00e      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a26      	ldr	r2, [pc, #152]	; (8008780 <DMA_SetConfig+0x250>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d009      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a24      	ldr	r2, [pc, #144]	; (8008784 <DMA_SetConfig+0x254>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <DMA_SetConfig+0x1d0>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a23      	ldr	r2, [pc, #140]	; (8008788 <DMA_SetConfig+0x258>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d101      	bne.n	8008704 <DMA_SetConfig+0x1d4>
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <DMA_SetConfig+0x1d6>
 8008704:	2300      	movs	r3, #0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d059      	beq.n	80087be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	223f      	movs	r2, #63	; 0x3f
 8008714:	409a      	lsls	r2, r3
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008728:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d138      	bne.n	80087ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800874a:	e086      	b.n	800885a <DMA_SetConfig+0x32a>
 800874c:	40020010 	.word	0x40020010
 8008750:	40020028 	.word	0x40020028
 8008754:	40020040 	.word	0x40020040
 8008758:	40020058 	.word	0x40020058
 800875c:	40020070 	.word	0x40020070
 8008760:	40020088 	.word	0x40020088
 8008764:	400200a0 	.word	0x400200a0
 8008768:	400200b8 	.word	0x400200b8
 800876c:	40020410 	.word	0x40020410
 8008770:	40020428 	.word	0x40020428
 8008774:	40020440 	.word	0x40020440
 8008778:	40020458 	.word	0x40020458
 800877c:	40020470 	.word	0x40020470
 8008780:	40020488 	.word	0x40020488
 8008784:	400204a0 	.word	0x400204a0
 8008788:	400204b8 	.word	0x400204b8
 800878c:	58025408 	.word	0x58025408
 8008790:	5802541c 	.word	0x5802541c
 8008794:	58025430 	.word	0x58025430
 8008798:	58025444 	.word	0x58025444
 800879c:	58025458 	.word	0x58025458
 80087a0:	5802546c 	.word	0x5802546c
 80087a4:	58025480 	.word	0x58025480
 80087a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]
}
 80087bc:	e04d      	b.n	800885a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a29      	ldr	r2, [pc, #164]	; (8008868 <DMA_SetConfig+0x338>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d022      	beq.n	800880e <DMA_SetConfig+0x2de>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a27      	ldr	r2, [pc, #156]	; (800886c <DMA_SetConfig+0x33c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d01d      	beq.n	800880e <DMA_SetConfig+0x2de>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a26      	ldr	r2, [pc, #152]	; (8008870 <DMA_SetConfig+0x340>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d018      	beq.n	800880e <DMA_SetConfig+0x2de>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a24      	ldr	r2, [pc, #144]	; (8008874 <DMA_SetConfig+0x344>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d013      	beq.n	800880e <DMA_SetConfig+0x2de>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a23      	ldr	r2, [pc, #140]	; (8008878 <DMA_SetConfig+0x348>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00e      	beq.n	800880e <DMA_SetConfig+0x2de>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a21      	ldr	r2, [pc, #132]	; (800887c <DMA_SetConfig+0x34c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d009      	beq.n	800880e <DMA_SetConfig+0x2de>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a20      	ldr	r2, [pc, #128]	; (8008880 <DMA_SetConfig+0x350>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d004      	beq.n	800880e <DMA_SetConfig+0x2de>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1e      	ldr	r2, [pc, #120]	; (8008884 <DMA_SetConfig+0x354>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d101      	bne.n	8008812 <DMA_SetConfig+0x2e2>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <DMA_SetConfig+0x2e4>
 8008812:	2300      	movs	r3, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d020      	beq.n	800885a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	2201      	movs	r2, #1
 8008822:	409a      	lsls	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	d108      	bne.n	800884a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	60da      	str	r2, [r3, #12]
}
 8008848:	e007      	b.n	800885a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	58025408 	.word	0x58025408
 800886c:	5802541c 	.word	0x5802541c
 8008870:	58025430 	.word	0x58025430
 8008874:	58025444 	.word	0x58025444
 8008878:	58025458 	.word	0x58025458
 800887c:	5802546c 	.word	0x5802546c
 8008880:	58025480 	.word	0x58025480
 8008884:	58025494 	.word	0x58025494

08008888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a42      	ldr	r2, [pc, #264]	; (80089a0 <DMA_CalcBaseAndBitshift+0x118>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d04a      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a41      	ldr	r2, [pc, #260]	; (80089a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d045      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a3f      	ldr	r2, [pc, #252]	; (80089a8 <DMA_CalcBaseAndBitshift+0x120>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d040      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a3e      	ldr	r2, [pc, #248]	; (80089ac <DMA_CalcBaseAndBitshift+0x124>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d03b      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a3c      	ldr	r2, [pc, #240]	; (80089b0 <DMA_CalcBaseAndBitshift+0x128>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d036      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a3b      	ldr	r2, [pc, #236]	; (80089b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d031      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a39      	ldr	r2, [pc, #228]	; (80089b8 <DMA_CalcBaseAndBitshift+0x130>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d02c      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a38      	ldr	r2, [pc, #224]	; (80089bc <DMA_CalcBaseAndBitshift+0x134>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d027      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a36      	ldr	r2, [pc, #216]	; (80089c0 <DMA_CalcBaseAndBitshift+0x138>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d022      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a35      	ldr	r2, [pc, #212]	; (80089c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d01d      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a33      	ldr	r2, [pc, #204]	; (80089c8 <DMA_CalcBaseAndBitshift+0x140>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d018      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a32      	ldr	r2, [pc, #200]	; (80089cc <DMA_CalcBaseAndBitshift+0x144>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d013      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a30      	ldr	r2, [pc, #192]	; (80089d0 <DMA_CalcBaseAndBitshift+0x148>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00e      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a2f      	ldr	r2, [pc, #188]	; (80089d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d009      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a2d      	ldr	r2, [pc, #180]	; (80089d8 <DMA_CalcBaseAndBitshift+0x150>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d004      	beq.n	8008930 <DMA_CalcBaseAndBitshift+0xa8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a2c      	ldr	r2, [pc, #176]	; (80089dc <DMA_CalcBaseAndBitshift+0x154>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d101      	bne.n	8008934 <DMA_CalcBaseAndBitshift+0xac>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <DMA_CalcBaseAndBitshift+0xae>
 8008934:	2300      	movs	r3, #0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d024      	beq.n	8008984 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	3b10      	subs	r3, #16
 8008942:	4a27      	ldr	r2, [pc, #156]	; (80089e0 <DMA_CalcBaseAndBitshift+0x158>)
 8008944:	fba2 2303 	umull	r2, r3, r2, r3
 8008948:	091b      	lsrs	r3, r3, #4
 800894a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	4a24      	ldr	r2, [pc, #144]	; (80089e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008954:	5cd3      	ldrb	r3, [r2, r3]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b03      	cmp	r3, #3
 8008960:	d908      	bls.n	8008974 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	4b1f      	ldr	r3, [pc, #124]	; (80089e8 <DMA_CalcBaseAndBitshift+0x160>)
 800896a:	4013      	ands	r3, r2
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	659a      	str	r2, [r3, #88]	; 0x58
 8008972:	e00d      	b.n	8008990 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <DMA_CalcBaseAndBitshift+0x160>)
 800897c:	4013      	ands	r3, r2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6593      	str	r3, [r2, #88]	; 0x58
 8008982:	e005      	b.n	8008990 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	40020010 	.word	0x40020010
 80089a4:	40020028 	.word	0x40020028
 80089a8:	40020040 	.word	0x40020040
 80089ac:	40020058 	.word	0x40020058
 80089b0:	40020070 	.word	0x40020070
 80089b4:	40020088 	.word	0x40020088
 80089b8:	400200a0 	.word	0x400200a0
 80089bc:	400200b8 	.word	0x400200b8
 80089c0:	40020410 	.word	0x40020410
 80089c4:	40020428 	.word	0x40020428
 80089c8:	40020440 	.word	0x40020440
 80089cc:	40020458 	.word	0x40020458
 80089d0:	40020470 	.word	0x40020470
 80089d4:	40020488 	.word	0x40020488
 80089d8:	400204a0 	.word	0x400204a0
 80089dc:	400204b8 	.word	0x400204b8
 80089e0:	aaaaaaab 	.word	0xaaaaaaab
 80089e4:	080177c0 	.word	0x080177c0
 80089e8:	fffffc00 	.word	0xfffffc00

080089ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d120      	bne.n	8008a42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d858      	bhi.n	8008aba <DMA_CheckFifoParam+0xce>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <DMA_CheckFifoParam+0x24>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a33 	.word	0x08008a33
 8008a18:	08008a21 	.word	0x08008a21
 8008a1c:	08008abb 	.word	0x08008abb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d048      	beq.n	8008abe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a30:	e045      	b.n	8008abe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a3a:	d142      	bne.n	8008ac2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a40:	e03f      	b.n	8008ac2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a4a:	d123      	bne.n	8008a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d838      	bhi.n	8008ac6 <DMA_CheckFifoParam+0xda>
 8008a54:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <DMA_CheckFifoParam+0x70>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a73 	.word	0x08008a73
 8008a64:	08008a6d 	.word	0x08008a6d
 8008a68:	08008a85 	.word	0x08008a85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
        break;
 8008a70:	e030      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d025      	beq.n	8008aca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a82:	e022      	b.n	8008aca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a8c:	d11f      	bne.n	8008ace <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a92:	e01c      	b.n	8008ace <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d902      	bls.n	8008aa2 <DMA_CheckFifoParam+0xb6>
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d003      	beq.n	8008aa8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008aa0:	e018      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8008aa6:	e015      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00e      	beq.n	8008ad2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab8:	e00b      	b.n	8008ad2 <DMA_CheckFifoParam+0xe6>
        break;
 8008aba:	bf00      	nop
 8008abc:	e00a      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8008abe:	bf00      	nop
 8008ac0:	e008      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e006      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ac6:	bf00      	nop
 8008ac8:	e004      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8008aca:	bf00      	nop
 8008acc:	e002      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ace:	bf00      	nop
 8008ad0:	e000      	b.n	8008ad4 <DMA_CheckFifoParam+0xe8>
    break;
 8008ad2:	bf00      	nop
    }
  }

  return status;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop

08008ae4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a38      	ldr	r2, [pc, #224]	; (8008bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d022      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a36      	ldr	r2, [pc, #216]	; (8008bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d01d      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a35      	ldr	r2, [pc, #212]	; (8008be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d018      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a33      	ldr	r2, [pc, #204]	; (8008be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d013      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a32      	ldr	r2, [pc, #200]	; (8008be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00e      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a30      	ldr	r2, [pc, #192]	; (8008bec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d009      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a2f      	ldr	r2, [pc, #188]	; (8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d004      	beq.n	8008b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a2d      	ldr	r2, [pc, #180]	; (8008bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d101      	bne.n	8008b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b46:	2300      	movs	r3, #0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01a      	beq.n	8008b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	3b08      	subs	r3, #8
 8008b54:	4a28      	ldr	r2, [pc, #160]	; (8008bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4b26      	ldr	r3, [pc, #152]	; (8008bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a24      	ldr	r2, [pc, #144]	; (8008c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008b70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 031f 	and.w	r3, r3, #31
 8008b78:	2201      	movs	r2, #1
 8008b7a:	409a      	lsls	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008b80:	e024      	b.n	8008bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	3b10      	subs	r3, #16
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4a1c      	ldr	r2, [pc, #112]	; (8008c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d806      	bhi.n	8008baa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d902      	bls.n	8008baa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008bbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	409a      	lsls	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bcc:	bf00      	nop
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	58025408 	.word	0x58025408
 8008bdc:	5802541c 	.word	0x5802541c
 8008be0:	58025430 	.word	0x58025430
 8008be4:	58025444 	.word	0x58025444
 8008be8:	58025458 	.word	0x58025458
 8008bec:	5802546c 	.word	0x5802546c
 8008bf0:	58025480 	.word	0x58025480
 8008bf4:	58025494 	.word	0x58025494
 8008bf8:	cccccccd 	.word	0xcccccccd
 8008bfc:	16009600 	.word	0x16009600
 8008c00:	58025880 	.word	0x58025880
 8008c04:	aaaaaaab 	.word	0xaaaaaaab
 8008c08:	400204b8 	.word	0x400204b8
 8008c0c:	4002040f 	.word	0x4002040f
 8008c10:	10008200 	.word	0x10008200
 8008c14:	40020880 	.word	0x40020880

08008c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d04a      	beq.n	8008cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d847      	bhi.n	8008cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d022      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a24      	ldr	r2, [pc, #144]	; (8008cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d01d      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a22      	ldr	r2, [pc, #136]	; (8008cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d018      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a21      	ldr	r2, [pc, #132]	; (8008cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a1f      	ldr	r2, [pc, #124]	; (8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00e      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d009      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a1b      	ldr	r2, [pc, #108]	; (8008cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d101      	bne.n	8008c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008c84:	2301      	movs	r3, #1
 8008c86:	e000      	b.n	8008c8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4b17      	ldr	r3, [pc, #92]	; (8008cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a15      	ldr	r2, [pc, #84]	; (8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ca0:	671a      	str	r2, [r3, #112]	; 0x70
 8008ca2:	e009      	b.n	8008cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a11      	ldr	r2, [pc, #68]	; (8008cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008cb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	409a      	lsls	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	58025408 	.word	0x58025408
 8008cd4:	5802541c 	.word	0x5802541c
 8008cd8:	58025430 	.word	0x58025430
 8008cdc:	58025444 	.word	0x58025444
 8008ce0:	58025458 	.word	0x58025458
 8008ce4:	5802546c 	.word	0x5802546c
 8008ce8:	58025480 	.word	0x58025480
 8008cec:	58025494 	.word	0x58025494
 8008cf0:	1600963f 	.word	0x1600963f
 8008cf4:	58025940 	.word	0x58025940
 8008cf8:	1000823f 	.word	0x1000823f
 8008cfc:	40020940 	.word	0x40020940

08008d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b089      	sub	sp, #36	; 0x24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d0e:	4b89      	ldr	r3, [pc, #548]	; (8008f34 <HAL_GPIO_Init+0x234>)
 8008d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d12:	e194      	b.n	800903e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	2101      	movs	r1, #1
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d20:	4013      	ands	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8186 	beq.w	8009038 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d005      	beq.n	8008d44 <HAL_GPIO_Init+0x44>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d130      	bne.n	8008da6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	2203      	movs	r2, #3
 8008d50:	fa02 f303 	lsl.w	r3, r2, r3
 8008d54:	43db      	mvns	r3, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43db      	mvns	r3, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4013      	ands	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	091b      	lsrs	r3, r3, #4
 8008d90:	f003 0201 	and.w	r2, r3, #1
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d017      	beq.n	8008de2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	43db      	mvns	r3, r3
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d123      	bne.n	8008e36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	08da      	lsrs	r2, r3, #3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3208      	adds	r2, #8
 8008df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f003 0307 	and.w	r3, r3, #7
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	220f      	movs	r2, #15
 8008e06:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	08da      	lsrs	r2, r3, #3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3208      	adds	r2, #8
 8008e30:	69b9      	ldr	r1, [r7, #24]
 8008e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	2203      	movs	r2, #3
 8008e42:	fa02 f303 	lsl.w	r3, r2, r3
 8008e46:	43db      	mvns	r3, r3
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f003 0203 	and.w	r2, r3, #3
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 80e0 	beq.w	8009038 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e78:	4b2f      	ldr	r3, [pc, #188]	; (8008f38 <HAL_GPIO_Init+0x238>)
 8008e7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e7e:	4a2e      	ldr	r2, [pc, #184]	; (8008f38 <HAL_GPIO_Init+0x238>)
 8008e80:	f043 0302 	orr.w	r3, r3, #2
 8008e84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e88:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <HAL_GPIO_Init+0x238>)
 8008e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e96:	4a29      	ldr	r2, [pc, #164]	; (8008f3c <HAL_GPIO_Init+0x23c>)
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	089b      	lsrs	r3, r3, #2
 8008e9c:	3302      	adds	r3, #2
 8008e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	220f      	movs	r2, #15
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a20      	ldr	r2, [pc, #128]	; (8008f40 <HAL_GPIO_Init+0x240>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d052      	beq.n	8008f68 <HAL_GPIO_Init+0x268>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1f      	ldr	r2, [pc, #124]	; (8008f44 <HAL_GPIO_Init+0x244>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d031      	beq.n	8008f2e <HAL_GPIO_Init+0x22e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1e      	ldr	r2, [pc, #120]	; (8008f48 <HAL_GPIO_Init+0x248>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d02b      	beq.n	8008f2a <HAL_GPIO_Init+0x22a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a1d      	ldr	r2, [pc, #116]	; (8008f4c <HAL_GPIO_Init+0x24c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d025      	beq.n	8008f26 <HAL_GPIO_Init+0x226>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a1c      	ldr	r2, [pc, #112]	; (8008f50 <HAL_GPIO_Init+0x250>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d01f      	beq.n	8008f22 <HAL_GPIO_Init+0x222>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1b      	ldr	r2, [pc, #108]	; (8008f54 <HAL_GPIO_Init+0x254>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d019      	beq.n	8008f1e <HAL_GPIO_Init+0x21e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a1a      	ldr	r2, [pc, #104]	; (8008f58 <HAL_GPIO_Init+0x258>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <HAL_GPIO_Init+0x21a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a19      	ldr	r2, [pc, #100]	; (8008f5c <HAL_GPIO_Init+0x25c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00d      	beq.n	8008f16 <HAL_GPIO_Init+0x216>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a18      	ldr	r2, [pc, #96]	; (8008f60 <HAL_GPIO_Init+0x260>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d007      	beq.n	8008f12 <HAL_GPIO_Init+0x212>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a17      	ldr	r2, [pc, #92]	; (8008f64 <HAL_GPIO_Init+0x264>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d101      	bne.n	8008f0e <HAL_GPIO_Init+0x20e>
 8008f0a:	2309      	movs	r3, #9
 8008f0c:	e02d      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f0e:	230a      	movs	r3, #10
 8008f10:	e02b      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f12:	2308      	movs	r3, #8
 8008f14:	e029      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f16:	2307      	movs	r3, #7
 8008f18:	e027      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f1a:	2306      	movs	r3, #6
 8008f1c:	e025      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f1e:	2305      	movs	r3, #5
 8008f20:	e023      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f22:	2304      	movs	r3, #4
 8008f24:	e021      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f26:	2303      	movs	r3, #3
 8008f28:	e01f      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e01d      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e01b      	b.n	8008f6a <HAL_GPIO_Init+0x26a>
 8008f32:	bf00      	nop
 8008f34:	58000080 	.word	0x58000080
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	58000400 	.word	0x58000400
 8008f40:	58020000 	.word	0x58020000
 8008f44:	58020400 	.word	0x58020400
 8008f48:	58020800 	.word	0x58020800
 8008f4c:	58020c00 	.word	0x58020c00
 8008f50:	58021000 	.word	0x58021000
 8008f54:	58021400 	.word	0x58021400
 8008f58:	58021800 	.word	0x58021800
 8008f5c:	58021c00 	.word	0x58021c00
 8008f60:	58022000 	.word	0x58022000
 8008f64:	58022400 	.word	0x58022400
 8008f68:	2300      	movs	r3, #0
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	f002 0203 	and.w	r2, r2, #3
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	4093      	lsls	r3, r2
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f7a:	4938      	ldr	r1, [pc, #224]	; (800905c <HAL_GPIO_Init+0x35c>)
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	089b      	lsrs	r3, r3, #2
 8008f80:	3302      	adds	r3, #2
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	43db      	mvns	r3, r3
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	4013      	ands	r3, r2
 8008f98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	43db      	mvns	r3, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	43db      	mvns	r3, r3
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	4013      	ands	r3, r2
 800901c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3301      	adds	r3, #1
 800903c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	fa22 f303 	lsr.w	r3, r2, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	f47f ae63 	bne.w	8008d14 <HAL_GPIO_Init+0x14>
  }
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	3724      	adds	r7, #36	; 0x24
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	58000400 	.word	0x58000400

08009060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	887b      	ldrh	r3, [r7, #2]
 8009072:	4013      	ands	r3, r2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009078:	2301      	movs	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]
 800907c:	e001      	b.n	8009082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	807b      	strh	r3, [r7, #2]
 800909c:	4613      	mov	r3, r2
 800909e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090a0:	787b      	ldrb	r3, [r7, #1]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090a6:	887a      	ldrh	r2, [r7, #2]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090ac:	e003      	b.n	80090b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	041a      	lsls	r2, r3, #16
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	619a      	str	r2, [r3, #24]
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e08b      	b.n	80091ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fa f8c6 	bl	800327c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2224      	movs	r2, #36	; 0x24
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d107      	bne.n	800913e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	e006      	b.n	800914c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800914a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d108      	bne.n	8009166 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	e007      	b.n	8009176 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6859      	ldr	r1, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	4b1d      	ldr	r3, [pc, #116]	; (80091f8 <HAL_I2C_Init+0x134>)
 8009182:	430b      	orrs	r3, r1
 8009184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691a      	ldr	r2, [r3, #16]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69d9      	ldr	r1, [r3, #28]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	02008000 	.word	0x02008000

080091fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	607a      	str	r2, [r7, #4]
 8009206:	461a      	mov	r2, r3
 8009208:	460b      	mov	r3, r1
 800920a:	817b      	strh	r3, [r7, #10]
 800920c:	4613      	mov	r3, r2
 800920e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b20      	cmp	r3, #32
 800921a:	f040 80fd 	bne.w	8009418 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_I2C_Master_Transmit+0x30>
 8009228:	2302      	movs	r3, #2
 800922a:	e0f6      	b.n	800941a <HAL_I2C_Master_Transmit+0x21e>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009234:	f7fa fdf4 	bl	8003e20 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	2319      	movs	r3, #25
 8009240:	2201      	movs	r2, #1
 8009242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fa0a 	bl	8009660 <I2C_WaitOnFlagUntilTimeout>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e0e1      	b.n	800941a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2221      	movs	r2, #33	; 0x21
 800925a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2210      	movs	r2, #16
 8009262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	893a      	ldrh	r2, [r7, #8]
 8009276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009282:	b29b      	uxth	r3, r3
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	d906      	bls.n	8009296 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	22ff      	movs	r2, #255	; 0xff
 800928c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800928e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e007      	b.n	80092a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80092a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d024      	beq.n	80092f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	3301      	adds	r3, #1
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	8979      	ldrh	r1, [r7, #10]
 80092ea:	4b4e      	ldr	r3, [pc, #312]	; (8009424 <HAL_I2C_Master_Transmit+0x228>)
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 fc05 	bl	8009b00 <I2C_TransferConfig>
 80092f6:	e066      	b.n	80093c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	8979      	ldrh	r1, [r7, #10]
 8009300:	4b48      	ldr	r3, [pc, #288]	; (8009424 <HAL_I2C_Master_Transmit+0x228>)
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 fbfa 	bl	8009b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800930c:	e05b      	b.n	80093c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	6a39      	ldr	r1, [r7, #32]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f9fd 	bl	8009712 <I2C_WaitOnTXISFlagUntilTimeout>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e07b      	b.n	800941a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009356:	b29b      	uxth	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d034      	beq.n	80093c6 <HAL_I2C_Master_Transmit+0x1ca>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d130      	bne.n	80093c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	2200      	movs	r2, #0
 800936c:	2180      	movs	r1, #128	; 0x80
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f976 	bl	8009660 <I2C_WaitOnFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e04d      	b.n	800941a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009382:	b29b      	uxth	r3, r3
 8009384:	2bff      	cmp	r3, #255	; 0xff
 8009386:	d90e      	bls.n	80093a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009392:	b2da      	uxtb	r2, r3
 8009394:	8979      	ldrh	r1, [r7, #10]
 8009396:	2300      	movs	r3, #0
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 fbae 	bl	8009b00 <I2C_TransferConfig>
 80093a4:	e00f      	b.n	80093c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	8979      	ldrh	r1, [r7, #10]
 80093b8:	2300      	movs	r3, #0
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fb9d 	bl	8009b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d19e      	bne.n	800930e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	6a39      	ldr	r1, [r7, #32]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 f9e3 	bl	80097a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e01a      	b.n	800941a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2220      	movs	r2, #32
 80093ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6859      	ldr	r1, [r3, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <HAL_I2C_Master_Transmit+0x22c>)
 80093f8:	400b      	ands	r3, r1
 80093fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2220      	movs	r2, #32
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	e000      	b.n	800941a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009418:	2302      	movs	r3, #2
  }
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	80002000 	.word	0x80002000
 8009428:	fe00e800 	.word	0xfe00e800

0800942c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af02      	add	r7, sp, #8
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	461a      	mov	r2, r3
 8009438:	460b      	mov	r3, r1
 800943a:	817b      	strh	r3, [r7, #10]
 800943c:	4613      	mov	r3, r2
 800943e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b20      	cmp	r3, #32
 800944a:	f040 80db 	bne.w	8009604 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_I2C_Master_Receive+0x30>
 8009458:	2302      	movs	r3, #2
 800945a:	e0d4      	b.n	8009606 <HAL_I2C_Master_Receive+0x1da>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009464:	f7fa fcdc 	bl	8003e20 <HAL_GetTick>
 8009468:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2319      	movs	r3, #25
 8009470:	2201      	movs	r2, #1
 8009472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f8f2 	bl	8009660 <I2C_WaitOnFlagUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e0bf      	b.n	8009606 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2222      	movs	r2, #34	; 0x22
 800948a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2210      	movs	r2, #16
 8009492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	893a      	ldrh	r2, [r7, #8]
 80094a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	2bff      	cmp	r3, #255	; 0xff
 80094b6:	d90e      	bls.n	80094d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	22ff      	movs	r2, #255	; 0xff
 80094bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	8979      	ldrh	r1, [r7, #10]
 80094c6:	4b52      	ldr	r3, [pc, #328]	; (8009610 <HAL_I2C_Master_Receive+0x1e4>)
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 fb16 	bl	8009b00 <I2C_TransferConfig>
 80094d4:	e06d      	b.n	80095b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	8979      	ldrh	r1, [r7, #10]
 80094e8:	4b49      	ldr	r3, [pc, #292]	; (8009610 <HAL_I2C_Master_Receive+0x1e4>)
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fb05 	bl	8009b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80094f6:	e05c      	b.n	80095b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	6a39      	ldr	r1, [r7, #32]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f993 	bl	8009828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e07c      	b.n	8009606 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009528:	3b01      	subs	r3, #1
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009542:	b29b      	uxth	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d034      	beq.n	80095b2 <HAL_I2C_Master_Receive+0x186>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	d130      	bne.n	80095b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	2200      	movs	r2, #0
 8009558:	2180      	movs	r1, #128	; 0x80
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f880 	bl	8009660 <I2C_WaitOnFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e04d      	b.n	8009606 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956e:	b29b      	uxth	r3, r3
 8009570:	2bff      	cmp	r3, #255	; 0xff
 8009572:	d90e      	bls.n	8009592 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	22ff      	movs	r2, #255	; 0xff
 8009578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957e:	b2da      	uxtb	r2, r3
 8009580:	8979      	ldrh	r1, [r7, #10]
 8009582:	2300      	movs	r3, #0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fab8 	bl	8009b00 <I2C_TransferConfig>
 8009590:	e00f      	b.n	80095b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	8979      	ldrh	r1, [r7, #10]
 80095a4:	2300      	movs	r3, #0
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 faa7 	bl	8009b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d19d      	bne.n	80094f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	6a39      	ldr	r1, [r7, #32]
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f8ed 	bl	80097a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e01a      	b.n	8009606 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2220      	movs	r2, #32
 80095d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6859      	ldr	r1, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <HAL_I2C_Master_Receive+0x1e8>)
 80095e4:	400b      	ands	r3, r1
 80095e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	e000      	b.n	8009606 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009604:	2302      	movs	r3, #2
  }
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	80002400 	.word	0x80002400
 8009614:	fe00e800 	.word	0xfe00e800

08009618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b02      	cmp	r3, #2
 800962c:	d103      	bne.n	8009636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b01      	cmp	r3, #1
 8009642:	d007      	beq.n	8009654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	619a      	str	r2, [r3, #24]
  }
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	4613      	mov	r3, r2
 800966e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009670:	e03b      	b.n	80096ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f962 	bl	8009940 <I2C_IsErrorOccurred>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e041      	b.n	800970a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800968c:	d02d      	beq.n	80096ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968e:	f7fa fbc7 	bl	8003e20 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d302      	bcc.n	80096a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d122      	bne.n	80096ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4013      	ands	r3, r2
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	bf0c      	ite	eq
 80096b4:	2301      	moveq	r3, #1
 80096b6:	2300      	movne	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	461a      	mov	r2, r3
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d113      	bne.n	80096ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c6:	f043 0220 	orr.w	r2, r3, #32
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e00f      	b.n	800970a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4013      	ands	r3, r2
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	bf0c      	ite	eq
 80096fa:	2301      	moveq	r3, #1
 80096fc:	2300      	movne	r3, #0
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	461a      	mov	r2, r3
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	429a      	cmp	r2, r3
 8009706:	d0b4      	beq.n	8009672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800971e:	e033      	b.n	8009788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 f90b 	bl	8009940 <I2C_IsErrorOccurred>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e031      	b.n	8009798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800973a:	d025      	beq.n	8009788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973c:	f7fa fb70 	bl	8003e20 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	d302      	bcc.n	8009752 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d11a      	bne.n	8009788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b02      	cmp	r3, #2
 800975e:	d013      	beq.n	8009788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009764:	f043 0220 	orr.w	r2, r3, #32
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2220      	movs	r2, #32
 8009770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e007      	b.n	8009798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b02      	cmp	r3, #2
 8009794:	d1c4      	bne.n	8009720 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097ac:	e02f      	b.n	800980e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 f8c4 	bl	8009940 <I2C_IsErrorOccurred>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e02d      	b.n	800981e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c2:	f7fa fb2d 	bl	8003e20 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d302      	bcc.n	80097d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11a      	bne.n	800980e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f003 0320 	and.w	r3, r3, #32
 80097e2:	2b20      	cmp	r3, #32
 80097e4:	d013      	beq.n	800980e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ea:	f043 0220 	orr.w	r2, r3, #32
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e007      	b.n	800981e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b20      	cmp	r3, #32
 800981a:	d1c8      	bne.n	80097ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009838:	e071      	b.n	800991e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f87e 	bl	8009940 <I2C_IsErrorOccurred>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b20      	cmp	r3, #32
 800985a:	d13b      	bne.n	80098d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d138      	bne.n	80098d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b04      	cmp	r3, #4
 800986e:	d105      	bne.n	800987c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b10      	cmp	r3, #16
 8009888:	d121      	bne.n	80098ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2210      	movs	r2, #16
 8009890:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2204      	movs	r2, #4
 8009896:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2220      	movs	r2, #32
 800989e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6859      	ldr	r1, [r3, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80098ac:	400b      	ands	r3, r1
 80098ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75fb      	strb	r3, [r7, #23]
 80098cc:	e002      	b.n	80098d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80098d4:	f7fa faa4 	bl	8003e20 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d302      	bcc.n	80098ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d119      	bne.n	800991e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d116      	bne.n	800991e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d00f      	beq.n	800991e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009902:	f043 0220 	orr.w	r2, r3, #32
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b04      	cmp	r3, #4
 800992a:	d002      	beq.n	8009932 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d083      	beq.n	800983a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009932:	7dfb      	ldrb	r3, [r7, #23]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	fe00e800 	.word	0xfe00e800

08009940 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08a      	sub	sp, #40	; 0x28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b00      	cmp	r3, #0
 800996a:	d068      	beq.n	8009a3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2210      	movs	r2, #16
 8009972:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009974:	e049      	b.n	8009a0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800997c:	d045      	beq.n	8009a0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800997e:	f7fa fa4f 	bl	8003e20 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	429a      	cmp	r2, r3
 800998c:	d302      	bcc.n	8009994 <I2C_IsErrorOccurred+0x54>
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d13a      	bne.n	8009a0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b6:	d121      	bne.n	80099fc <I2C_IsErrorOccurred+0xbc>
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099be:	d01d      	beq.n	80099fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099c0:	7cfb      	ldrb	r3, [r7, #19]
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d01a      	beq.n	80099fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099d6:	f7fa fa23 	bl	8003e20 <HAL_GetTick>
 80099da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099dc:	e00e      	b.n	80099fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099de:	f7fa fa1f 	bl	8003e20 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	2b19      	cmp	r3, #25
 80099ea:	d907      	bls.n	80099fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	f043 0320 	orr.w	r3, r3, #32
 80099f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80099fa:	e006      	b.n	8009a0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d1e9      	bne.n	80099de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b20      	cmp	r3, #32
 8009a16:	d003      	beq.n	8009a20 <I2C_IsErrorOccurred+0xe0>
 8009a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0aa      	beq.n	8009976 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	f043 0304 	orr.w	r3, r3, #4
 8009a36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00b      	beq.n	8009a8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00b      	beq.n	8009aac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	f043 0302 	orr.w	r3, r3, #2
 8009a9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01c      	beq.n	8009aee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7ff fdaf 	bl	8009618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6859      	ldr	r1, [r3, #4]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <I2C_IsErrorOccurred+0x1bc>)
 8009ac6:	400b      	ands	r3, r1
 8009ac8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3728      	adds	r7, #40	; 0x28
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	fe00e800 	.word	0xfe00e800

08009b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	607b      	str	r3, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	817b      	strh	r3, [r7, #10]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b12:	897b      	ldrh	r3, [r7, #10]
 8009b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b18:	7a7b      	ldrb	r3, [r7, #9]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	0d5b      	lsrs	r3, r3, #21
 8009b3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b3e:	4b08      	ldr	r3, [pc, #32]	; (8009b60 <I2C_TransferConfig+0x60>)
 8009b40:	430b      	orrs	r3, r1
 8009b42:	43db      	mvns	r3, r3
 8009b44:	ea02 0103 	and.w	r1, r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b52:	bf00      	nop
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	03ff63ff 	.word	0x03ff63ff

08009b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d138      	bne.n	8009bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b84:	2302      	movs	r3, #2
 8009b86:	e032      	b.n	8009bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2224      	movs	r2, #36	; 0x24
 8009b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 0201 	bic.w	r2, r2, #1
 8009ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6819      	ldr	r1, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 0201 	orr.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	e000      	b.n	8009bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bec:	2302      	movs	r3, #2
  }
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	d139      	bne.n	8009c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e033      	b.n	8009c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2224      	movs	r2, #36	; 0x24
 8009c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e000      	b.n	8009c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c84:	2302      	movs	r3, #2
  }
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ca2:	4a0c      	ldr	r2, [pc, #48]	; (8009cd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ca4:	f043 0302 	orr.w	r3, r3, #2
 8009ca8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009cac:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	604b      	str	r3, [r1, #4]
}
 8009cc6:	bf00      	nop
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	58000400 	.word	0x58000400

08009cdc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009ce8:	4b18      	ldr	r3, [pc, #96]	; (8009d4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f023 0201 	bic.w	r2, r3, #1
 8009cf0:	4916      	ldr	r1, [pc, #88]	; (8009d4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009cf8:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009cfe:	f023 0305 	bic.w	r3, r3, #5
 8009d02:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009d04:	4b11      	ldr	r3, [pc, #68]	; (8009d4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	4a10      	ldr	r2, [pc, #64]	; (8009d4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d0a:	f023 0302 	bic.w	r3, r3, #2
 8009d0e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d10:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	4a0e      	ldr	r2, [pc, #56]	; (8009d50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d16:	f043 0304 	orr.w	r3, r3, #4
 8009d1a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d1c:	f3bf 8f4f 	dsb	sy
}
 8009d20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d22:	f3bf 8f6f 	isb	sy
}
 8009d26:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009d2e:	bf30      	wfi
 8009d30:	e000      	b.n	8009d34 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009d32:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d34:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	4a05      	ldr	r2, [pc, #20]	; (8009d50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d3a:	f023 0304 	bic.w	r3, r3, #4
 8009d3e:	6113      	str	r3, [r2, #16]
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	58024800 	.word	0x58024800
 8009d50:	e000ed00 	.word	0xe000ed00

08009d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d5c:	4b19      	ldr	r3, [pc, #100]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d00a      	beq.n	8009d7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d68:	4b16      	ldr	r3, [pc, #88]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d001      	beq.n	8009d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e01f      	b.n	8009dba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e01d      	b.n	8009dba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d7e:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f023 0207 	bic.w	r2, r3, #7
 8009d86:	490f      	ldr	r1, [pc, #60]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d8e:	f7fa f847 	bl	8003e20 <HAL_GetTick>
 8009d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d94:	e009      	b.n	8009daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d96:	f7fa f843 	bl	8003e20 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009da4:	d901      	bls.n	8009daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e007      	b.n	8009dba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db6:	d1ee      	bne.n	8009d96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	58024800 	.word	0x58024800

08009dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08c      	sub	sp, #48	; 0x30
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f000 bc48 	b.w	800a66c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8088 	beq.w	8009efa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dea:	4b99      	ldr	r3, [pc, #612]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009df4:	4b96      	ldr	r3, [pc, #600]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d007      	beq.n	8009e10 <HAL_RCC_OscConfig+0x48>
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b18      	cmp	r3, #24
 8009e04:	d111      	bne.n	8009e2a <HAL_RCC_OscConfig+0x62>
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	f003 0303 	and.w	r3, r3, #3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d10c      	bne.n	8009e2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e10:	4b8f      	ldr	r3, [pc, #572]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d06d      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x130>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d169      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f000 bc21 	b.w	800a66c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e32:	d106      	bne.n	8009e42 <HAL_RCC_OscConfig+0x7a>
 8009e34:	4b86      	ldr	r3, [pc, #536]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a85      	ldr	r2, [pc, #532]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	e02e      	b.n	8009ea0 <HAL_RCC_OscConfig+0xd8>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCC_OscConfig+0x9c>
 8009e4a:	4b81      	ldr	r3, [pc, #516]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a80      	ldr	r2, [pc, #512]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	4b7e      	ldr	r3, [pc, #504]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a7d      	ldr	r2, [pc, #500]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	e01d      	b.n	8009ea0 <HAL_RCC_OscConfig+0xd8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e6c:	d10c      	bne.n	8009e88 <HAL_RCC_OscConfig+0xc0>
 8009e6e:	4b78      	ldr	r3, [pc, #480]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a77      	ldr	r2, [pc, #476]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	4b75      	ldr	r3, [pc, #468]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a74      	ldr	r2, [pc, #464]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e00b      	b.n	8009ea0 <HAL_RCC_OscConfig+0xd8>
 8009e88:	4b71      	ldr	r3, [pc, #452]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a70      	ldr	r2, [pc, #448]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	4b6e      	ldr	r3, [pc, #440]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a6d      	ldr	r2, [pc, #436]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d013      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea8:	f7f9 ffba 	bl	8003e20 <HAL_GetTick>
 8009eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eae:	e008      	b.n	8009ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eb0:	f7f9 ffb6 	bl	8003e20 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	2b64      	cmp	r3, #100	; 0x64
 8009ebc:	d901      	bls.n	8009ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e3d4      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec2:	4b63      	ldr	r3, [pc, #396]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0f0      	beq.n	8009eb0 <HAL_RCC_OscConfig+0xe8>
 8009ece:	e014      	b.n	8009efa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed0:	f7f9 ffa6 	bl	8003e20 <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ed8:	f7f9 ffa2 	bl	8003e20 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b64      	cmp	r3, #100	; 0x64
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e3c0      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eea:	4b59      	ldr	r3, [pc, #356]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x110>
 8009ef6:	e000      	b.n	8009efa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 80ca 	beq.w	800a09c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f08:	4b51      	ldr	r3, [pc, #324]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f12:	4b4f      	ldr	r3, [pc, #316]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d007      	beq.n	8009f2e <HAL_RCC_OscConfig+0x166>
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	2b18      	cmp	r3, #24
 8009f22:	d156      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x20a>
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d151      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f2e:	4b48      	ldr	r3, [pc, #288]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d005      	beq.n	8009f46 <HAL_RCC_OscConfig+0x17e>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e392      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f46:	4b42      	ldr	r3, [pc, #264]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f023 0219 	bic.w	r2, r3, #25
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	493f      	ldr	r1, [pc, #252]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f58:	f7f9 ff62 	bl	8003e20 <HAL_GetTick>
 8009f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f5e:	e008      	b.n	8009f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f60:	f7f9 ff5e 	bl	8003e20 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e37c      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f72:	4b37      	ldr	r3, [pc, #220]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0f0      	beq.n	8009f60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f7e:	f7f9 ff5b 	bl	8003e38 <HAL_GetREVID>
 8009f82:	4603      	mov	r3, r0
 8009f84:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d817      	bhi.n	8009fbc <HAL_RCC_OscConfig+0x1f4>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	2b40      	cmp	r3, #64	; 0x40
 8009f92:	d108      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x1de>
 8009f94:	4b2e      	ldr	r3, [pc, #184]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f9c:	4a2c      	ldr	r2, [pc, #176]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fa4:	e07a      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa6:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	031b      	lsls	r3, r3, #12
 8009fb4:	4926      	ldr	r1, [pc, #152]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fba:	e06f      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fbc:	4b24      	ldr	r3, [pc, #144]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	061b      	lsls	r3, r3, #24
 8009fca:	4921      	ldr	r1, [pc, #132]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fd0:	e064      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d047      	beq.n	800a06a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fda:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f023 0219 	bic.w	r2, r3, #25
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	491a      	ldr	r1, [pc, #104]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fec:	f7f9 ff18 	bl	8003e20 <HAL_GetTick>
 8009ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ff4:	f7f9 ff14 	bl	8003e20 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e332      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a006:	4b12      	ldr	r3, [pc, #72]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0f0      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a012:	f7f9 ff11 	bl	8003e38 <HAL_GetREVID>
 800a016:	4603      	mov	r3, r0
 800a018:	f241 0203 	movw	r2, #4099	; 0x1003
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d819      	bhi.n	800a054 <HAL_RCC_OscConfig+0x28c>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b40      	cmp	r3, #64	; 0x40
 800a026:	d108      	bne.n	800a03a <HAL_RCC_OscConfig+0x272>
 800a028:	4b09      	ldr	r3, [pc, #36]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a030:	4a07      	ldr	r2, [pc, #28]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a036:	6053      	str	r3, [r2, #4]
 800a038:	e030      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
 800a03a:	4b05      	ldr	r3, [pc, #20]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	031b      	lsls	r3, r3, #12
 800a048:	4901      	ldr	r1, [pc, #4]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	604b      	str	r3, [r1, #4]
 800a04e:	e025      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
 800a050:	58024400 	.word	0x58024400
 800a054:	4b9a      	ldr	r3, [pc, #616]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	4997      	ldr	r1, [pc, #604]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a064:	4313      	orrs	r3, r2
 800a066:	604b      	str	r3, [r1, #4]
 800a068:	e018      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a06a:	4b95      	ldr	r3, [pc, #596]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a94      	ldr	r2, [pc, #592]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a076:	f7f9 fed3 	bl	8003e20 <HAL_GetTick>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a07e:	f7f9 fecf 	bl	8003e20 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e2ed      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a090:	4b8b      	ldr	r3, [pc, #556]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f0      	bne.n	800a07e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80a9 	beq.w	800a1fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0aa:	4b85      	ldr	r3, [pc, #532]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0b4:	4b82      	ldr	r3, [pc, #520]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d007      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x308>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2b18      	cmp	r3, #24
 800a0c4:	d13a      	bne.n	800a13c <HAL_RCC_OscConfig+0x374>
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d135      	bne.n	800a13c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0d0:	4b7b      	ldr	r3, [pc, #492]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x320>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	2b80      	cmp	r3, #128	; 0x80
 800a0e2:	d001      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e2c1      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0e8:	f7f9 fea6 	bl	8003e38 <HAL_GetREVID>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d817      	bhi.n	800a126 <HAL_RCC_OscConfig+0x35e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	2b20      	cmp	r3, #32
 800a0fc:	d108      	bne.n	800a110 <HAL_RCC_OscConfig+0x348>
 800a0fe:	4b70      	ldr	r3, [pc, #448]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a106:	4a6e      	ldr	r2, [pc, #440]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a10c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a10e:	e075      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a110:	4b6b      	ldr	r3, [pc, #428]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	069b      	lsls	r3, r3, #26
 800a11e:	4968      	ldr	r1, [pc, #416]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a120:	4313      	orrs	r3, r2
 800a122:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a124:	e06a      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a126:	4b66      	ldr	r3, [pc, #408]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	061b      	lsls	r3, r3, #24
 800a134:	4962      	ldr	r1, [pc, #392]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a136:	4313      	orrs	r3, r2
 800a138:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a13a:	e05f      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d042      	beq.n	800a1ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a144:	4b5e      	ldr	r3, [pc, #376]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a5d      	ldr	r2, [pc, #372]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a150:	f7f9 fe66 	bl	8003e20 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a158:	f7f9 fe62 	bl	8003e20 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e280      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a16a:	4b55      	ldr	r3, [pc, #340]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f0      	beq.n	800a158 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a176:	f7f9 fe5f 	bl	8003e38 <HAL_GetREVID>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a180:	4293      	cmp	r3, r2
 800a182:	d817      	bhi.n	800a1b4 <HAL_RCC_OscConfig+0x3ec>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d108      	bne.n	800a19e <HAL_RCC_OscConfig+0x3d6>
 800a18c:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a194:	4a4a      	ldr	r2, [pc, #296]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a19a:	6053      	str	r3, [r2, #4]
 800a19c:	e02e      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
 800a19e:	4b48      	ldr	r3, [pc, #288]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	069b      	lsls	r3, r3, #26
 800a1ac:	4944      	ldr	r1, [pc, #272]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	604b      	str	r3, [r1, #4]
 800a1b2:	e023      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
 800a1b4:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	061b      	lsls	r3, r3, #24
 800a1c2:	493f      	ldr	r1, [pc, #252]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60cb      	str	r3, [r1, #12]
 800a1c8:	e018      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1ca:	4b3d      	ldr	r3, [pc, #244]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a3c      	ldr	r2, [pc, #240]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d6:	f7f9 fe23 	bl	8003e20 <HAL_GetTick>
 800a1da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a1de:	f7f9 fe1f 	bl	8003e20 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e23d      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1f0:	4b33      	ldr	r3, [pc, #204]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f0      	bne.n	800a1de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0308 	and.w	r3, r3, #8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d036      	beq.n	800a276 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d019      	beq.n	800a244 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a210:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a214:	4a2a      	ldr	r2, [pc, #168]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21c:	f7f9 fe00 	bl	8003e20 <HAL_GetTick>
 800a220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a224:	f7f9 fdfc 	bl	8003e20 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e21a      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a236:	4b22      	ldr	r3, [pc, #136]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f0      	beq.n	800a224 <HAL_RCC_OscConfig+0x45c>
 800a242:	e018      	b.n	800a276 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a244:	4b1e      	ldr	r3, [pc, #120]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a248:	4a1d      	ldr	r2, [pc, #116]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a24a:	f023 0301 	bic.w	r3, r3, #1
 800a24e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a250:	f7f9 fde6 	bl	8003e20 <HAL_GetTick>
 800a254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a258:	f7f9 fde2 	bl	8003e20 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b02      	cmp	r3, #2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e200      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f0      	bne.n	800a258 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d039      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01c      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a28a:	4b0d      	ldr	r3, [pc, #52]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a0c      	ldr	r2, [pc, #48]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a296:	f7f9 fdc3 	bl	8003e20 <HAL_GetTick>
 800a29a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a29c:	e008      	b.n	800a2b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a29e:	f7f9 fdbf 	bl	8003e20 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d901      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e1dd      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2b0:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0f0      	beq.n	800a29e <HAL_RCC_OscConfig+0x4d6>
 800a2bc:	e01b      	b.n	800a2f6 <HAL_RCC_OscConfig+0x52e>
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2c4:	4b9b      	ldr	r3, [pc, #620]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a9a      	ldr	r2, [pc, #616]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a2ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2d0:	f7f9 fda6 	bl	8003e20 <HAL_GetTick>
 800a2d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2d6:	e008      	b.n	800a2ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2d8:	f7f9 fda2 	bl	8003e20 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e1c0      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2ea:	4b92      	ldr	r3, [pc, #584]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f0      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8081 	beq.w	800a406 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a304:	4b8c      	ldr	r3, [pc, #560]	; (800a538 <HAL_RCC_OscConfig+0x770>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a8b      	ldr	r2, [pc, #556]	; (800a538 <HAL_RCC_OscConfig+0x770>)
 800a30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a30e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a310:	f7f9 fd86 	bl	8003e20 <HAL_GetTick>
 800a314:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a318:	f7f9 fd82 	bl	8003e20 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b64      	cmp	r3, #100	; 0x64
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e1a0      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a32a:	4b83      	ldr	r3, [pc, #524]	; (800a538 <HAL_RCC_OscConfig+0x770>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f0      	beq.n	800a318 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d106      	bne.n	800a34c <HAL_RCC_OscConfig+0x584>
 800a33e:	4b7d      	ldr	r3, [pc, #500]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	4a7c      	ldr	r2, [pc, #496]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	6713      	str	r3, [r2, #112]	; 0x70
 800a34a:	e02d      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5e0>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10c      	bne.n	800a36e <HAL_RCC_OscConfig+0x5a6>
 800a354:	4b77      	ldr	r3, [pc, #476]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a358:	4a76      	ldr	r2, [pc, #472]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	6713      	str	r3, [r2, #112]	; 0x70
 800a360:	4b74      	ldr	r3, [pc, #464]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a364:	4a73      	ldr	r2, [pc, #460]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a366:	f023 0304 	bic.w	r3, r3, #4
 800a36a:	6713      	str	r3, [r2, #112]	; 0x70
 800a36c:	e01c      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5e0>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b05      	cmp	r3, #5
 800a374:	d10c      	bne.n	800a390 <HAL_RCC_OscConfig+0x5c8>
 800a376:	4b6f      	ldr	r3, [pc, #444]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	4a6e      	ldr	r2, [pc, #440]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a37c:	f043 0304 	orr.w	r3, r3, #4
 800a380:	6713      	str	r3, [r2, #112]	; 0x70
 800a382:	4b6c      	ldr	r3, [pc, #432]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	4a6b      	ldr	r2, [pc, #428]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a388:	f043 0301 	orr.w	r3, r3, #1
 800a38c:	6713      	str	r3, [r2, #112]	; 0x70
 800a38e:	e00b      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5e0>
 800a390:	4b68      	ldr	r3, [pc, #416]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a394:	4a67      	ldr	r2, [pc, #412]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	6713      	str	r3, [r2, #112]	; 0x70
 800a39c:	4b65      	ldr	r3, [pc, #404]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a0:	4a64      	ldr	r2, [pc, #400]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a3a2:	f023 0304 	bic.w	r3, r3, #4
 800a3a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d015      	beq.n	800a3dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b0:	f7f9 fd36 	bl	8003e20 <HAL_GetTick>
 800a3b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b6:	e00a      	b.n	800a3ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3b8:	f7f9 fd32 	bl	8003e20 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d901      	bls.n	800a3ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e14e      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3ce:	4b59      	ldr	r3, [pc, #356]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0ee      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x5f0>
 800a3da:	e014      	b.n	800a406 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3dc:	f7f9 fd20 	bl	8003e20 <HAL_GetTick>
 800a3e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3e2:	e00a      	b.n	800a3fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3e4:	f7f9 fd1c 	bl	8003e20 <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d901      	bls.n	800a3fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e138      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3fa:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1ee      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 812d 	beq.w	800a66a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a410:	4b48      	ldr	r3, [pc, #288]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a418:	2b18      	cmp	r3, #24
 800a41a:	f000 80bd 	beq.w	800a598 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b02      	cmp	r3, #2
 800a424:	f040 809e 	bne.w	800a564 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a428:	4b42      	ldr	r3, [pc, #264]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a41      	ldr	r2, [pc, #260]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a42e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a434:	f7f9 fcf4 	bl	8003e20 <HAL_GetTick>
 800a438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a43a:	e008      	b.n	800a44e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a43c:	f7f9 fcf0 	bl	8003e20 <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	2b02      	cmp	r3, #2
 800a448:	d901      	bls.n	800a44e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e10e      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a44e:	4b39      	ldr	r3, [pc, #228]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f0      	bne.n	800a43c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a45a:	4b36      	ldr	r3, [pc, #216]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a45c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a45e:	4b37      	ldr	r3, [pc, #220]	; (800a53c <HAL_RCC_OscConfig+0x774>)
 800a460:	4013      	ands	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a46a:	0112      	lsls	r2, r2, #4
 800a46c:	430a      	orrs	r2, r1
 800a46e:	4931      	ldr	r1, [pc, #196]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a470:	4313      	orrs	r3, r2
 800a472:	628b      	str	r3, [r1, #40]	; 0x28
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	3b01      	subs	r3, #1
 800a47a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a482:	3b01      	subs	r3, #1
 800a484:	025b      	lsls	r3, r3, #9
 800a486:	b29b      	uxth	r3, r3
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	3b01      	subs	r3, #1
 800a490:	041b      	lsls	r3, r3, #16
 800a492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49c:	3b01      	subs	r3, #1
 800a49e:	061b      	lsls	r3, r3, #24
 800a4a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4a4:	4923      	ldr	r1, [pc, #140]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a4aa:	4b22      	ldr	r3, [pc, #136]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	4a21      	ldr	r2, [pc, #132]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4b0:	f023 0301 	bic.w	r3, r3, #1
 800a4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4b6:	4b1f      	ldr	r3, [pc, #124]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ba:	4b21      	ldr	r3, [pc, #132]	; (800a540 <HAL_RCC_OscConfig+0x778>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4c2:	00d2      	lsls	r2, r2, #3
 800a4c4:	491b      	ldr	r1, [pc, #108]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4ca:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	f023 020c 	bic.w	r2, r3, #12
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	4917      	ldr	r1, [pc, #92]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4dc:	4b15      	ldr	r3, [pc, #84]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	f023 0202 	bic.w	r2, r3, #2
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e8:	4912      	ldr	r1, [pc, #72]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4ee:	4b11      	ldr	r3, [pc, #68]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fa:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	4a0d      	ldr	r2, [pc, #52]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a0a      	ldr	r2, [pc, #40]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a50c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	4a07      	ldr	r2, [pc, #28]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a518:	f043 0301 	orr.w	r3, r3, #1
 800a51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a04      	ldr	r2, [pc, #16]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52a:	f7f9 fc79 	bl	8003e20 <HAL_GetTick>
 800a52e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a530:	e011      	b.n	800a556 <HAL_RCC_OscConfig+0x78e>
 800a532:	bf00      	nop
 800a534:	58024400 	.word	0x58024400
 800a538:	58024800 	.word	0x58024800
 800a53c:	fffffc0c 	.word	0xfffffc0c
 800a540:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a544:	f7f9 fc6c 	bl	8003e20 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e08a      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a556:	4b47      	ldr	r3, [pc, #284]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0f0      	beq.n	800a544 <HAL_RCC_OscConfig+0x77c>
 800a562:	e082      	b.n	800a66a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a564:	4b43      	ldr	r3, [pc, #268]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a42      	ldr	r2, [pc, #264]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a56a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a56e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a570:	f7f9 fc56 	bl	8003e20 <HAL_GetTick>
 800a574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a576:	e008      	b.n	800a58a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a578:	f7f9 fc52 	bl	8003e20 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d901      	bls.n	800a58a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e070      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a58a:	4b3a      	ldr	r3, [pc, #232]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1f0      	bne.n	800a578 <HAL_RCC_OscConfig+0x7b0>
 800a596:	e068      	b.n	800a66a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a598:	4b36      	ldr	r3, [pc, #216]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a59e:	4b35      	ldr	r3, [pc, #212]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d031      	beq.n	800a610 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f003 0203 	and.w	r2, r3, #3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d12a      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	091b      	lsrs	r3, r3, #4
 800a5be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d122      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d11a      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	0a5b      	lsrs	r3, r3, #9
 800a5de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d111      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d108      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	0e1b      	lsrs	r3, r3, #24
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d001      	beq.n	800a614 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e02b      	b.n	800a66c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a614:	4b17      	ldr	r3, [pc, #92]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a618:	08db      	lsrs	r3, r3, #3
 800a61a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a61e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	429a      	cmp	r2, r3
 800a628:	d01f      	beq.n	800a66a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a62a:	4b12      	ldr	r3, [pc, #72]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	4a11      	ldr	r2, [pc, #68]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a630:	f023 0301 	bic.w	r3, r3, #1
 800a634:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a636:	f7f9 fbf3 	bl	8003e20 <HAL_GetTick>
 800a63a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a63c:	bf00      	nop
 800a63e:	f7f9 fbef 	bl	8003e20 <HAL_GetTick>
 800a642:	4602      	mov	r2, r0
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	4293      	cmp	r3, r2
 800a648:	d0f9      	beq.n	800a63e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a64a:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a64c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <HAL_RCC_OscConfig+0x8b0>)
 800a650:	4013      	ands	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a656:	00d2      	lsls	r2, r2, #3
 800a658:	4906      	ldr	r1, [pc, #24]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a65e:	4b05      	ldr	r3, [pc, #20]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a662:	4a04      	ldr	r2, [pc, #16]	; (800a674 <HAL_RCC_OscConfig+0x8ac>)
 800a664:	f043 0301 	orr.w	r3, r3, #1
 800a668:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3730      	adds	r7, #48	; 0x30
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	58024400 	.word	0x58024400
 800a678:	ffff0007 	.word	0xffff0007

0800a67c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e19c      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a690:	4b8a      	ldr	r3, [pc, #552]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d910      	bls.n	800a6c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a69e:	4b87      	ldr	r3, [pc, #540]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f023 020f 	bic.w	r2, r3, #15
 800a6a6:	4985      	ldr	r1, [pc, #532]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ae:	4b83      	ldr	r3, [pc, #524]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d001      	beq.n	800a6c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e184      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0304 	and.w	r3, r3, #4
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d010      	beq.n	800a6ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691a      	ldr	r2, [r3, #16]
 800a6d0:	4b7b      	ldr	r3, [pc, #492]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d908      	bls.n	800a6ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6dc:	4b78      	ldr	r3, [pc, #480]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4975      	ldr	r1, [pc, #468]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d010      	beq.n	800a71c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	695a      	ldr	r2, [r3, #20]
 800a6fe:	4b70      	ldr	r3, [pc, #448]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a706:	429a      	cmp	r2, r3
 800a708:	d908      	bls.n	800a71c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a70a:	4b6d      	ldr	r3, [pc, #436]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	496a      	ldr	r1, [pc, #424]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0310 	and.w	r3, r3, #16
 800a724:	2b00      	cmp	r3, #0
 800a726:	d010      	beq.n	800a74a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	699a      	ldr	r2, [r3, #24]
 800a72c:	4b64      	ldr	r3, [pc, #400]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a734:	429a      	cmp	r2, r3
 800a736:	d908      	bls.n	800a74a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a738:	4b61      	ldr	r3, [pc, #388]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	495e      	ldr	r1, [pc, #376]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a746:	4313      	orrs	r3, r2
 800a748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d010      	beq.n	800a778 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69da      	ldr	r2, [r3, #28]
 800a75a:	4b59      	ldr	r3, [pc, #356]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a762:	429a      	cmp	r2, r3
 800a764:	d908      	bls.n	800a778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a766:	4b56      	ldr	r3, [pc, #344]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	4953      	ldr	r1, [pc, #332]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a774:	4313      	orrs	r3, r2
 800a776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d010      	beq.n	800a7a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	4b4d      	ldr	r3, [pc, #308]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	f003 030f 	and.w	r3, r3, #15
 800a790:	429a      	cmp	r2, r3
 800a792:	d908      	bls.n	800a7a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a794:	4b4a      	ldr	r3, [pc, #296]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	f023 020f 	bic.w	r2, r3, #15
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	4947      	ldr	r1, [pc, #284]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d055      	beq.n	800a85e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7b2:	4b43      	ldr	r3, [pc, #268]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	4940      	ldr	r1, [pc, #256]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d107      	bne.n	800a7dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7cc:	4b3c      	ldr	r3, [pc, #240]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d121      	bne.n	800a81c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e0f6      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d107      	bne.n	800a7f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7e4:	4b36      	ldr	r3, [pc, #216]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d115      	bne.n	800a81c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e0ea      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d107      	bne.n	800a80c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7fc:	4b30      	ldr	r3, [pc, #192]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a804:	2b00      	cmp	r3, #0
 800a806:	d109      	bne.n	800a81c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e0de      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a80c:	4b2c      	ldr	r3, [pc, #176]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e0d6      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a81c:	4b28      	ldr	r3, [pc, #160]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f023 0207 	bic.w	r2, r3, #7
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	4925      	ldr	r1, [pc, #148]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a82e:	f7f9 faf7 	bl	8003e20 <HAL_GetTick>
 800a832:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a834:	e00a      	b.n	800a84c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a836:	f7f9 faf3 	bl	8003e20 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	f241 3288 	movw	r2, #5000	; 0x1388
 800a844:	4293      	cmp	r3, r2
 800a846:	d901      	bls.n	800a84c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e0be      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a84c:	4b1c      	ldr	r3, [pc, #112]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	00db      	lsls	r3, r3, #3
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d1eb      	bne.n	800a836 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d010      	beq.n	800a88c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68da      	ldr	r2, [r3, #12]
 800a86e:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	f003 030f 	and.w	r3, r3, #15
 800a876:	429a      	cmp	r2, r3
 800a878:	d208      	bcs.n	800a88c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	f023 020f 	bic.w	r2, r3, #15
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	490e      	ldr	r1, [pc, #56]	; (800a8c0 <HAL_RCC_ClockConfig+0x244>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a88c:	4b0b      	ldr	r3, [pc, #44]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d214      	bcs.n	800a8c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a89a:	4b08      	ldr	r3, [pc, #32]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f023 020f 	bic.w	r2, r3, #15
 800a8a2:	4906      	ldr	r1, [pc, #24]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8aa:	4b04      	ldr	r3, [pc, #16]	; (800a8bc <HAL_RCC_ClockConfig+0x240>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 030f 	and.w	r3, r3, #15
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d005      	beq.n	800a8c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e086      	b.n	800a9ca <HAL_RCC_ClockConfig+0x34e>
 800a8bc:	52002000 	.word	0x52002000
 800a8c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d010      	beq.n	800a8f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	4b3f      	ldr	r3, [pc, #252]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d208      	bcs.n	800a8f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8e0:	4b3c      	ldr	r3, [pc, #240]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	4939      	ldr	r1, [pc, #228]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d010      	beq.n	800a920 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	695a      	ldr	r2, [r3, #20]
 800a902:	4b34      	ldr	r3, [pc, #208]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d208      	bcs.n	800a920 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a90e:	4b31      	ldr	r3, [pc, #196]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	492e      	ldr	r1, [pc, #184]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0310 	and.w	r3, r3, #16
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d010      	beq.n	800a94e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	699a      	ldr	r2, [r3, #24]
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a938:	429a      	cmp	r2, r3
 800a93a:	d208      	bcs.n	800a94e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a93c:	4b25      	ldr	r3, [pc, #148]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	4922      	ldr	r1, [pc, #136]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0320 	and.w	r3, r3, #32
 800a956:	2b00      	cmp	r3, #0
 800a958:	d010      	beq.n	800a97c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	69da      	ldr	r2, [r3, #28]
 800a95e:	4b1d      	ldr	r3, [pc, #116]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a966:	429a      	cmp	r2, r3
 800a968:	d208      	bcs.n	800a97c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a96a:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	4917      	ldr	r1, [pc, #92]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a97c:	f000 f834 	bl	800a9e8 <HAL_RCC_GetSysClockFreq>
 800a980:	4602      	mov	r2, r0
 800a982:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	0a1b      	lsrs	r3, r3, #8
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	4912      	ldr	r1, [pc, #72]	; (800a9d8 <HAL_RCC_ClockConfig+0x35c>)
 800a98e:	5ccb      	ldrb	r3, [r1, r3]
 800a990:	f003 031f 	and.w	r3, r3, #31
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a99a:	4b0e      	ldr	r3, [pc, #56]	; (800a9d4 <HAL_RCC_ClockConfig+0x358>)
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	f003 030f 	and.w	r3, r3, #15
 800a9a2:	4a0d      	ldr	r2, [pc, #52]	; (800a9d8 <HAL_RCC_ClockConfig+0x35c>)
 800a9a4:	5cd3      	ldrb	r3, [r2, r3]
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b0:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <HAL_RCC_ClockConfig+0x360>)
 800a9b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9b4:	4a0a      	ldr	r2, [pc, #40]	; (800a9e0 <HAL_RCC_ClockConfig+0x364>)
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a9ba:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <HAL_RCC_ClockConfig+0x368>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7f8 ff52 	bl	8003868 <HAL_InitTick>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	58024400 	.word	0x58024400
 800a9d8:	080177b0 	.word	0x080177b0
 800a9dc:	24000094 	.word	0x24000094
 800a9e0:	24000090 	.word	0x24000090
 800a9e4:	24000098 	.word	0x24000098

0800a9e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b089      	sub	sp, #36	; 0x24
 800a9ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9ee:	4bb3      	ldr	r3, [pc, #716]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9f6:	2b18      	cmp	r3, #24
 800a9f8:	f200 8155 	bhi.w	800aca6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a9fc:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa02:	bf00      	nop
 800aa04:	0800aa69 	.word	0x0800aa69
 800aa08:	0800aca7 	.word	0x0800aca7
 800aa0c:	0800aca7 	.word	0x0800aca7
 800aa10:	0800aca7 	.word	0x0800aca7
 800aa14:	0800aca7 	.word	0x0800aca7
 800aa18:	0800aca7 	.word	0x0800aca7
 800aa1c:	0800aca7 	.word	0x0800aca7
 800aa20:	0800aca7 	.word	0x0800aca7
 800aa24:	0800aa8f 	.word	0x0800aa8f
 800aa28:	0800aca7 	.word	0x0800aca7
 800aa2c:	0800aca7 	.word	0x0800aca7
 800aa30:	0800aca7 	.word	0x0800aca7
 800aa34:	0800aca7 	.word	0x0800aca7
 800aa38:	0800aca7 	.word	0x0800aca7
 800aa3c:	0800aca7 	.word	0x0800aca7
 800aa40:	0800aca7 	.word	0x0800aca7
 800aa44:	0800aa95 	.word	0x0800aa95
 800aa48:	0800aca7 	.word	0x0800aca7
 800aa4c:	0800aca7 	.word	0x0800aca7
 800aa50:	0800aca7 	.word	0x0800aca7
 800aa54:	0800aca7 	.word	0x0800aca7
 800aa58:	0800aca7 	.word	0x0800aca7
 800aa5c:	0800aca7 	.word	0x0800aca7
 800aa60:	0800aca7 	.word	0x0800aca7
 800aa64:	0800aa9b 	.word	0x0800aa9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa68:	4b94      	ldr	r3, [pc, #592]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d009      	beq.n	800aa88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa74:	4b91      	ldr	r3, [pc, #580]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	08db      	lsrs	r3, r3, #3
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	4a90      	ldr	r2, [pc, #576]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa80:	fa22 f303 	lsr.w	r3, r2, r3
 800aa84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aa86:	e111      	b.n	800acac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa88:	4b8d      	ldr	r3, [pc, #564]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa8a:	61bb      	str	r3, [r7, #24]
      break;
 800aa8c:	e10e      	b.n	800acac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aa8e:	4b8d      	ldr	r3, [pc, #564]	; (800acc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa90:	61bb      	str	r3, [r7, #24]
      break;
 800aa92:	e10b      	b.n	800acac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aa94:	4b8c      	ldr	r3, [pc, #560]	; (800acc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa96:	61bb      	str	r3, [r7, #24]
      break;
 800aa98:	e108      	b.n	800acac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa9a:	4b88      	ldr	r3, [pc, #544]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aaa4:	4b85      	ldr	r3, [pc, #532]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aab0:	4b82      	ldr	r3, [pc, #520]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aaba:	4b80      	ldr	r3, [pc, #512]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	fb02 f303 	mul.w	r3, r2, r3
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80e1 	beq.w	800aca0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	f000 8083 	beq.w	800abec <HAL_RCC_GetSysClockFreq+0x204>
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	f200 80a1 	bhi.w	800ac30 <HAL_RCC_GetSysClockFreq+0x248>
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <HAL_RCC_GetSysClockFreq+0x114>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d056      	beq.n	800aba8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aafa:	e099      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aafc:	4b6f      	ldr	r3, [pc, #444]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d02d      	beq.n	800ab64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab08:	4b6c      	ldr	r3, [pc, #432]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	08db      	lsrs	r3, r3, #3
 800ab0e:	f003 0303 	and.w	r3, r3, #3
 800ab12:	4a6b      	ldr	r2, [pc, #428]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab14:	fa22 f303 	lsr.w	r3, r2, r3
 800ab18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab32:	4b62      	ldr	r3, [pc, #392]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab42:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab46:	eddf 5a61 	vldr	s11, [pc, #388]	; 800accc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab62:	e087      	b.n	800ac74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800acd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab76:	4b51      	ldr	r3, [pc, #324]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800accc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aba6:	e065      	b.n	800ac74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800acd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abba:	4b40      	ldr	r3, [pc, #256]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	ed97 6a02 	vldr	s12, [r7, #8]
 800abce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800accc <HAL_RCC_GetSysClockFreq+0x2e4>
 800abd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abea:	e043      	b.n	800ac74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800acd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b2f      	ldr	r3, [pc, #188]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800accc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac2e:	e021      	b.n	800ac74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800acd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b1e      	ldr	r3, [pc, #120]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800accc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac74:	4b11      	ldr	r3, [pc, #68]	; (800acbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac78:	0a5b      	lsrs	r3, r3, #9
 800ac7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7e:	3301      	adds	r3, #1
 800ac80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	ee07 3a90 	vmov	s15, r3
 800ac88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac98:	ee17 3a90 	vmov	r3, s15
 800ac9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ac9e:	e005      	b.n	800acac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	61bb      	str	r3, [r7, #24]
      break;
 800aca4:	e002      	b.n	800acac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aca6:	4b07      	ldr	r3, [pc, #28]	; (800acc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aca8:	61bb      	str	r3, [r7, #24]
      break;
 800acaa:	bf00      	nop
  }

  return sysclockfreq;
 800acac:	69bb      	ldr	r3, [r7, #24]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3724      	adds	r7, #36	; 0x24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	58024400 	.word	0x58024400
 800acc0:	03d09000 	.word	0x03d09000
 800acc4:	003d0900 	.word	0x003d0900
 800acc8:	017d7840 	.word	0x017d7840
 800accc:	46000000 	.word	0x46000000
 800acd0:	4c742400 	.word	0x4c742400
 800acd4:	4a742400 	.word	0x4a742400
 800acd8:	4bbebc20 	.word	0x4bbebc20

0800acdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ace2:	f7ff fe81 	bl	800a9e8 <HAL_RCC_GetSysClockFreq>
 800ace6:	4602      	mov	r2, r0
 800ace8:	4b10      	ldr	r3, [pc, #64]	; (800ad2c <HAL_RCC_GetHCLKFreq+0x50>)
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	0a1b      	lsrs	r3, r3, #8
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	490f      	ldr	r1, [pc, #60]	; (800ad30 <HAL_RCC_GetHCLKFreq+0x54>)
 800acf4:	5ccb      	ldrb	r3, [r1, r3]
 800acf6:	f003 031f 	and.w	r3, r3, #31
 800acfa:	fa22 f303 	lsr.w	r3, r2, r3
 800acfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <HAL_RCC_GetHCLKFreq+0x50>)
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	f003 030f 	and.w	r3, r3, #15
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad0a:	5cd3      	ldrb	r3, [r2, r3]
 800ad0c:	f003 031f 	and.w	r3, r3, #31
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	fa22 f303 	lsr.w	r3, r2, r3
 800ad16:	4a07      	ldr	r2, [pc, #28]	; (800ad34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad1a:	4a07      	ldr	r2, [pc, #28]	; (800ad38 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad20:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad22:	681b      	ldr	r3, [r3, #0]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	58024400 	.word	0x58024400
 800ad30:	080177b0 	.word	0x080177b0
 800ad34:	24000094 	.word	0x24000094
 800ad38:	24000090 	.word	0x24000090

0800ad3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad40:	f7ff ffcc 	bl	800acdc <HAL_RCC_GetHCLKFreq>
 800ad44:	4602      	mov	r2, r0
 800ad46:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	091b      	lsrs	r3, r3, #4
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	4904      	ldr	r1, [pc, #16]	; (800ad64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad52:	5ccb      	ldrb	r3, [r1, r3]
 800ad54:	f003 031f 	and.w	r3, r3, #31
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	58024400 	.word	0x58024400
 800ad64:	080177b0 	.word	0x080177b0

0800ad68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad6c:	f7ff ffb6 	bl	800acdc <HAL_RCC_GetHCLKFreq>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4b06      	ldr	r3, [pc, #24]	; (800ad8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	4904      	ldr	r1, [pc, #16]	; (800ad90 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad7e:	5ccb      	ldrb	r3, [r1, r3]
 800ad80:	f003 031f 	and.w	r3, r3, #31
 800ad84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	080177b0 	.word	0x080177b0

0800ad94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	223f      	movs	r2, #63	; 0x3f
 800ada2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ada4:	4b1a      	ldr	r3, [pc, #104]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	f003 0207 	and.w	r2, r3, #7
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800adbc:	4b14      	ldr	r3, [pc, #80]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	f003 020f 	and.w	r2, r3, #15
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800adc8:	4b11      	ldr	r3, [pc, #68]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800add4:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ade0:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800adec:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <HAL_RCC_GetClockConfig+0x7c>)
 800adee:	6a1b      	ldr	r3, [r3, #32]
 800adf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <HAL_RCC_GetClockConfig+0x80>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 020f 	and.w	r2, r3, #15
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	601a      	str	r2, [r3, #0]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	58024400 	.word	0x58024400
 800ae14:	52002000 	.word	0x52002000

0800ae18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae1c:	b0ca      	sub	sp, #296	; 0x128
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae24:	2300      	movs	r3, #0
 800ae26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ae3c:	2500      	movs	r5, #0
 800ae3e:	ea54 0305 	orrs.w	r3, r4, r5
 800ae42:	d049      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae4e:	d02f      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae54:	d828      	bhi.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae5a:	d01a      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae60:	d822      	bhi.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae6a:	d007      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae6c:	e01c      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae6e:	4bb8      	ldr	r3, [pc, #736]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae72:	4ab7      	ldr	r2, [pc, #732]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae7a:	e01a      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae80:	3308      	adds	r3, #8
 800ae82:	2102      	movs	r1, #2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f002 fb61 	bl	800d54c <RCCEx_PLL2_Config>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae90:	e00f      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae96:	3328      	adds	r3, #40	; 0x28
 800ae98:	2102      	movs	r1, #2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f002 fc08 	bl	800d6b0 <RCCEx_PLL3_Config>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aea6:	e004      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aeae:	e000      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aeb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10a      	bne.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aeba:	4ba5      	ldr	r3, [pc, #660]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aebe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec8:	4aa1      	ldr	r2, [pc, #644]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeca:	430b      	orrs	r3, r1
 800aecc:	6513      	str	r3, [r2, #80]	; 0x50
 800aece:	e003      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aee4:	f04f 0900 	mov.w	r9, #0
 800aee8:	ea58 0309 	orrs.w	r3, r8, r9
 800aeec:	d047      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d82a      	bhi.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aef8:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefe:	bf00      	nop
 800af00:	0800af15 	.word	0x0800af15
 800af04:	0800af23 	.word	0x0800af23
 800af08:	0800af39 	.word	0x0800af39
 800af0c:	0800af57 	.word	0x0800af57
 800af10:	0800af57 	.word	0x0800af57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af14:	4b8e      	ldr	r3, [pc, #568]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af18:	4a8d      	ldr	r2, [pc, #564]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af20:	e01a      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af26:	3308      	adds	r3, #8
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f002 fb0e 	bl	800d54c <RCCEx_PLL2_Config>
 800af30:	4603      	mov	r3, r0
 800af32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af36:	e00f      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af3c:	3328      	adds	r3, #40	; 0x28
 800af3e:	2100      	movs	r1, #0
 800af40:	4618      	mov	r0, r3
 800af42:	f002 fbb5 	bl	800d6b0 <RCCEx_PLL3_Config>
 800af46:	4603      	mov	r3, r0
 800af48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af4c:	e004      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af54:	e000      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10a      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af60:	4b7b      	ldr	r3, [pc, #492]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af64:	f023 0107 	bic.w	r1, r3, #7
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6e:	4a78      	ldr	r2, [pc, #480]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af70:	430b      	orrs	r3, r1
 800af72:	6513      	str	r3, [r2, #80]	; 0x50
 800af74:	e003      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800af8a:	f04f 0b00 	mov.w	fp, #0
 800af8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800af92:	d04c      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800af94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9e:	d030      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800afa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa4:	d829      	bhi.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afa6:	2bc0      	cmp	r3, #192	; 0xc0
 800afa8:	d02d      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afaa:	2bc0      	cmp	r3, #192	; 0xc0
 800afac:	d825      	bhi.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afae:	2b80      	cmp	r3, #128	; 0x80
 800afb0:	d018      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800afb2:	2b80      	cmp	r3, #128	; 0x80
 800afb4:	d821      	bhi.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	d007      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800afbe:	e01c      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afc0:	4b63      	ldr	r3, [pc, #396]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	4a62      	ldr	r2, [pc, #392]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afcc:	e01c      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd2:	3308      	adds	r3, #8
 800afd4:	2100      	movs	r1, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f002 fab8 	bl	800d54c <RCCEx_PLL2_Config>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afe2:	e011      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe8:	3328      	adds	r3, #40	; 0x28
 800afea:	2100      	movs	r1, #0
 800afec:	4618      	mov	r0, r3
 800afee:	f002 fb5f 	bl	800d6b0 <RCCEx_PLL3_Config>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aff8:	e006      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b000:	e002      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b002:	bf00      	nop
 800b004:	e000      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b010:	4b4f      	ldr	r3, [pc, #316]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b014:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b01e:	4a4c      	ldr	r2, [pc, #304]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b020:	430b      	orrs	r3, r1
 800b022:	6513      	str	r3, [r2, #80]	; 0x50
 800b024:	e003      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b02a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b03a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b03e:	2300      	movs	r3, #0
 800b040:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b044:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b048:	460b      	mov	r3, r1
 800b04a:	4313      	orrs	r3, r2
 800b04c:	d053      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b05a:	d035      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b05c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b060:	d82e      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b062:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b066:	d031      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b068:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b06c:	d828      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b06e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b072:	d01a      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b078:	d822      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b07e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b082:	d007      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b084:	e01c      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b086:	4b32      	ldr	r3, [pc, #200]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	4a31      	ldr	r2, [pc, #196]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b08c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b092:	e01c      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b098:	3308      	adds	r3, #8
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f002 fa55 	bl	800d54c <RCCEx_PLL2_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b0a8:	e011      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ae:	3328      	adds	r3, #40	; 0x28
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 fafc 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0be:	e006      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0c6:	e002      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0c8:	bf00      	nop
 800b0ca:	e000      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10b      	bne.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0d6:	4b1e      	ldr	r3, [pc, #120]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0e6:	4a1a      	ldr	r2, [pc, #104]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ec:	e003      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b102:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b106:	2300      	movs	r3, #0
 800b108:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b10c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b110:	460b      	mov	r3, r1
 800b112:	4313      	orrs	r3, r2
 800b114:	d056      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b11e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b122:	d038      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b124:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b128:	d831      	bhi.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b12a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b12e:	d034      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b130:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b134:	d82b      	bhi.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b13a:	d01d      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b13c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b140:	d825      	bhi.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b142:	2b00      	cmp	r3, #0
 800b144:	d006      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b146:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b14a:	d00a      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b14c:	e01f      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b14e:	bf00      	nop
 800b150:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b154:	4ba2      	ldr	r3, [pc, #648]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	4aa1      	ldr	r2, [pc, #644]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b15a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b15e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b160:	e01c      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b166:	3308      	adds	r3, #8
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f002 f9ee 	bl	800d54c <RCCEx_PLL2_Config>
 800b170:	4603      	mov	r3, r0
 800b172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b176:	e011      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17c:	3328      	adds	r3, #40	; 0x28
 800b17e:	2100      	movs	r1, #0
 800b180:	4618      	mov	r0, r3
 800b182:	f002 fa95 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b186:	4603      	mov	r3, r0
 800b188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b18c:	e006      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b194:	e002      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b196:	bf00      	nop
 800b198:	e000      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b19a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b19c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b1a4:	4b8e      	ldr	r3, [pc, #568]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1b4:	4a8a      	ldr	r2, [pc, #552]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1b6:	430b      	orrs	r3, r1
 800b1b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1ba:	e003      	b.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b1d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	d03a      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ea:	2b30      	cmp	r3, #48	; 0x30
 800b1ec:	d01f      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b1ee:	2b30      	cmp	r3, #48	; 0x30
 800b1f0:	d819      	bhi.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	d00c      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b1f6:	2b20      	cmp	r3, #32
 800b1f8:	d815      	bhi.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d019      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b1fe:	2b10      	cmp	r3, #16
 800b200:	d111      	bne.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b202:	4b77      	ldr	r3, [pc, #476]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	4a76      	ldr	r2, [pc, #472]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b20c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b20e:	e011      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b214:	3308      	adds	r3, #8
 800b216:	2102      	movs	r1, #2
 800b218:	4618      	mov	r0, r3
 800b21a:	f002 f997 	bl	800d54c <RCCEx_PLL2_Config>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b224:	e006      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b22c:	e002      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b22e:	bf00      	nop
 800b230:	e000      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b232:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b23c:	4b68      	ldr	r3, [pc, #416]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b240:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24a:	4a65      	ldr	r2, [pc, #404]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b24c:	430b      	orrs	r3, r1
 800b24e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b250:	e003      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b266:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b26a:	2300      	movs	r3, #0
 800b26c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b270:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b274:	460b      	mov	r3, r1
 800b276:	4313      	orrs	r3, r2
 800b278:	d051      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b284:	d035      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b28a:	d82e      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b28c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b290:	d031      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b296:	d828      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b29c:	d01a      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b29e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a2:	d822      	bhi.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d003      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b2a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ac:	d007      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b2ae:	e01c      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b0:	4b4b      	ldr	r3, [pc, #300]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	4a4a      	ldr	r2, [pc, #296]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2bc:	e01c      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 f940 	bl	800d54c <RCCEx_PLL2_Config>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2d2:	e011      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d8:	3328      	adds	r3, #40	; 0x28
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f002 f9e7 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2e8:	e006      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2f0:	e002      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b2f2:	bf00      	nop
 800b2f4:	e000      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b2f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10a      	bne.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b300:	4b37      	ldr	r3, [pc, #220]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b304:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b30e:	4a34      	ldr	r2, [pc, #208]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b310:	430b      	orrs	r3, r1
 800b312:	6513      	str	r3, [r2, #80]	; 0x50
 800b314:	e003      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b31a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b32a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b32e:	2300      	movs	r3, #0
 800b330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b334:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b338:	460b      	mov	r3, r1
 800b33a:	4313      	orrs	r3, r2
 800b33c:	d056      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b348:	d033      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b34a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b34e:	d82c      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b350:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b354:	d02f      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b356:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b35a:	d826      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b35c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b360:	d02b      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b362:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b366:	d820      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b36c:	d012      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b36e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b372:	d81a      	bhi.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b374:	2b00      	cmp	r3, #0
 800b376:	d022      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b37c:	d115      	bne.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b382:	3308      	adds	r3, #8
 800b384:	2101      	movs	r1, #1
 800b386:	4618      	mov	r0, r3
 800b388:	f002 f8e0 	bl	800d54c <RCCEx_PLL2_Config>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b392:	e015      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b398:	3328      	adds	r3, #40	; 0x28
 800b39a:	2101      	movs	r1, #1
 800b39c:	4618      	mov	r0, r3
 800b39e:	f002 f987 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3a8:	e00a      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3b0:	e006      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3b2:	bf00      	nop
 800b3b4:	e004      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10d      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3c8:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d6:	4a02      	ldr	r2, [pc, #8]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3d8:	430b      	orrs	r3, r1
 800b3da:	6513      	str	r3, [r2, #80]	; 0x50
 800b3dc:	e006      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b3de:	bf00      	nop
 800b3e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b3f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b402:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b406:	460b      	mov	r3, r1
 800b408:	4313      	orrs	r3, r2
 800b40a:	d055      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b418:	d033      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b41a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b41e:	d82c      	bhi.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b424:	d02f      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b42a:	d826      	bhi.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b42c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b430:	d02b      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b432:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b436:	d820      	bhi.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b43c:	d012      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b442:	d81a      	bhi.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b444:	2b00      	cmp	r3, #0
 800b446:	d022      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b44c:	d115      	bne.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b452:	3308      	adds	r3, #8
 800b454:	2101      	movs	r1, #1
 800b456:	4618      	mov	r0, r3
 800b458:	f002 f878 	bl	800d54c <RCCEx_PLL2_Config>
 800b45c:	4603      	mov	r3, r0
 800b45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b462:	e015      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b468:	3328      	adds	r3, #40	; 0x28
 800b46a:	2101      	movs	r1, #1
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 f91f 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b478:	e00a      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b480:	e006      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b482:	bf00      	nop
 800b484:	e004      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b486:	bf00      	nop
 800b488:	e002      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b48a:	bf00      	nop
 800b48c:	e000      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b48e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10b      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b498:	4ba3      	ldr	r3, [pc, #652]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b49a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4a8:	4a9f      	ldr	r2, [pc, #636]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ae:	e003      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b4c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	d037      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e2:	d00e      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e8:	d816      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d018      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b4ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4f2:	d111      	bne.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4f4:	4b8c      	ldr	r3, [pc, #560]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f8:	4a8b      	ldr	r2, [pc, #556]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b500:	e00f      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b506:	3308      	adds	r3, #8
 800b508:	2101      	movs	r1, #1
 800b50a:	4618      	mov	r0, r3
 800b50c:	f002 f81e 	bl	800d54c <RCCEx_PLL2_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b516:	e004      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b51e:	e000      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b52a:	4b7f      	ldr	r3, [pc, #508]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b538:	4a7b      	ldr	r2, [pc, #492]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b53a:	430b      	orrs	r3, r1
 800b53c:	6513      	str	r3, [r2, #80]	; 0x50
 800b53e:	e003      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b544:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b558:	2300      	movs	r3, #0
 800b55a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b55e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	d039      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d81c      	bhi.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b5b5 	.word	0x0800b5b5
 800b57c:	0800b589 	.word	0x0800b589
 800b580:	0800b597 	.word	0x0800b597
 800b584:	0800b5b5 	.word	0x0800b5b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b588:	4b67      	ldr	r3, [pc, #412]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	4a66      	ldr	r2, [pc, #408]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b58e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b594:	e00f      	b.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59a:	3308      	adds	r3, #8
 800b59c:	2102      	movs	r1, #2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 ffd4 	bl	800d54c <RCCEx_PLL2_Config>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5aa:	e004      	b.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5b2:	e000      	b.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b5b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b5be:	4b5a      	ldr	r3, [pc, #360]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c2:	f023 0103 	bic.w	r1, r3, #3
 800b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5cc:	4a56      	ldr	r2, [pc, #344]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ce:	430b      	orrs	r3, r1
 800b5d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5d2:	e003      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b5e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	f000 809f 	beq.w	800b73c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5fe:	4b4b      	ldr	r3, [pc, #300]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a4a      	ldr	r2, [pc, #296]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b608:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b60a:	f7f8 fc09 	bl	8003e20 <HAL_GetTick>
 800b60e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b612:	e00b      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b614:	f7f8 fc04 	bl	8003e20 <HAL_GetTick>
 800b618:	4602      	mov	r2, r0
 800b61a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	2b64      	cmp	r3, #100	; 0x64
 800b622:	d903      	bls.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b62a:	e005      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b62c:	4b3f      	ldr	r3, [pc, #252]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0ed      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d179      	bne.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b640:	4b39      	ldr	r3, [pc, #228]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b648:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b64c:	4053      	eors	r3, r2
 800b64e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b652:	2b00      	cmp	r3, #0
 800b654:	d015      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b656:	4b34      	ldr	r3, [pc, #208]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b65e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b662:	4b31      	ldr	r3, [pc, #196]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b666:	4a30      	ldr	r2, [pc, #192]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b66c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b66e:	4b2e      	ldr	r3, [pc, #184]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b672:	4a2d      	ldr	r2, [pc, #180]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b678:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b67a:	4a2b      	ldr	r2, [pc, #172]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b67c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b680:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b68e:	d118      	bne.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b690:	f7f8 fbc6 	bl	8003e20 <HAL_GetTick>
 800b694:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b698:	e00d      	b.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b69a:	f7f8 fbc1 	bl	8003e20 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d903      	bls.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b6b4:	e005      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6b6:	4b1c      	ldr	r3, [pc, #112]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ba:	f003 0302 	and.w	r3, r3, #2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0eb      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d129      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6da:	d10e      	bne.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b6dc:	4b12      	ldr	r3, [pc, #72]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6ec:	091a      	lsrs	r2, r3, #4
 800b6ee:	4b10      	ldr	r3, [pc, #64]	; (800b730 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	4a0d      	ldr	r2, [pc, #52]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f4:	430b      	orrs	r3, r1
 800b6f6:	6113      	str	r3, [r2, #16]
 800b6f8:	e005      	b.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b6fa:	4b0b      	ldr	r3, [pc, #44]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	4a0a      	ldr	r2, [pc, #40]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b700:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b704:	6113      	str	r3, [r2, #16]
 800b706:	4b08      	ldr	r3, [pc, #32]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b708:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b716:	4a04      	ldr	r2, [pc, #16]	; (800b728 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b718:	430b      	orrs	r3, r1
 800b71a:	6713      	str	r3, [r2, #112]	; 0x70
 800b71c:	e00e      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b71e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b726:	e009      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b728:	58024400 	.word	0x58024400
 800b72c:	58024800 	.word	0x58024800
 800b730:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	f002 0301 	and.w	r3, r2, #1
 800b748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b74c:	2300      	movs	r3, #0
 800b74e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b752:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b756:	460b      	mov	r3, r1
 800b758:	4313      	orrs	r3, r2
 800b75a:	f000 8089 	beq.w	800b870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b764:	2b28      	cmp	r3, #40	; 0x28
 800b766:	d86b      	bhi.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b849 	.word	0x0800b849
 800b774:	0800b841 	.word	0x0800b841
 800b778:	0800b841 	.word	0x0800b841
 800b77c:	0800b841 	.word	0x0800b841
 800b780:	0800b841 	.word	0x0800b841
 800b784:	0800b841 	.word	0x0800b841
 800b788:	0800b841 	.word	0x0800b841
 800b78c:	0800b841 	.word	0x0800b841
 800b790:	0800b815 	.word	0x0800b815
 800b794:	0800b841 	.word	0x0800b841
 800b798:	0800b841 	.word	0x0800b841
 800b79c:	0800b841 	.word	0x0800b841
 800b7a0:	0800b841 	.word	0x0800b841
 800b7a4:	0800b841 	.word	0x0800b841
 800b7a8:	0800b841 	.word	0x0800b841
 800b7ac:	0800b841 	.word	0x0800b841
 800b7b0:	0800b82b 	.word	0x0800b82b
 800b7b4:	0800b841 	.word	0x0800b841
 800b7b8:	0800b841 	.word	0x0800b841
 800b7bc:	0800b841 	.word	0x0800b841
 800b7c0:	0800b841 	.word	0x0800b841
 800b7c4:	0800b841 	.word	0x0800b841
 800b7c8:	0800b841 	.word	0x0800b841
 800b7cc:	0800b841 	.word	0x0800b841
 800b7d0:	0800b849 	.word	0x0800b849
 800b7d4:	0800b841 	.word	0x0800b841
 800b7d8:	0800b841 	.word	0x0800b841
 800b7dc:	0800b841 	.word	0x0800b841
 800b7e0:	0800b841 	.word	0x0800b841
 800b7e4:	0800b841 	.word	0x0800b841
 800b7e8:	0800b841 	.word	0x0800b841
 800b7ec:	0800b841 	.word	0x0800b841
 800b7f0:	0800b849 	.word	0x0800b849
 800b7f4:	0800b841 	.word	0x0800b841
 800b7f8:	0800b841 	.word	0x0800b841
 800b7fc:	0800b841 	.word	0x0800b841
 800b800:	0800b841 	.word	0x0800b841
 800b804:	0800b841 	.word	0x0800b841
 800b808:	0800b841 	.word	0x0800b841
 800b80c:	0800b841 	.word	0x0800b841
 800b810:	0800b849 	.word	0x0800b849
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b818:	3308      	adds	r3, #8
 800b81a:	2101      	movs	r1, #1
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 fe95 	bl	800d54c <RCCEx_PLL2_Config>
 800b822:	4603      	mov	r3, r0
 800b824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b828:	e00f      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82e:	3328      	adds	r3, #40	; 0x28
 800b830:	2101      	movs	r1, #1
 800b832:	4618      	mov	r0, r3
 800b834:	f001 ff3c 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b838:	4603      	mov	r3, r0
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b83e:	e004      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b846:	e000      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b852:	4bbf      	ldr	r3, [pc, #764]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b856:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b860:	4abb      	ldr	r2, [pc, #748]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b862:	430b      	orrs	r3, r1
 800b864:	6553      	str	r3, [r2, #84]	; 0x54
 800b866:	e003      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b86c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f002 0302 	and.w	r3, r2, #2
 800b87c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b880:	2300      	movs	r3, #0
 800b882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b886:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b88a:	460b      	mov	r3, r1
 800b88c:	4313      	orrs	r3, r2
 800b88e:	d041      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b896:	2b05      	cmp	r3, #5
 800b898:	d824      	bhi.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b89a:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a0:	0800b8ed 	.word	0x0800b8ed
 800b8a4:	0800b8b9 	.word	0x0800b8b9
 800b8a8:	0800b8cf 	.word	0x0800b8cf
 800b8ac:	0800b8ed 	.word	0x0800b8ed
 800b8b0:	0800b8ed 	.word	0x0800b8ed
 800b8b4:	0800b8ed 	.word	0x0800b8ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8bc:	3308      	adds	r3, #8
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 fe43 	bl	800d54c <RCCEx_PLL2_Config>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8cc:	e00f      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d2:	3328      	adds	r3, #40	; 0x28
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f001 feea 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8e2:	e004      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8ea:	e000      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b8ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10a      	bne.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b8f6:	4b96      	ldr	r3, [pc, #600]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fa:	f023 0107 	bic.w	r1, r3, #7
 800b8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b904:	4a92      	ldr	r2, [pc, #584]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b906:	430b      	orrs	r3, r1
 800b908:	6553      	str	r3, [r2, #84]	; 0x54
 800b90a:	e003      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f002 0304 	and.w	r3, r2, #4
 800b920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b924:	2300      	movs	r3, #0
 800b926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b92a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b92e:	460b      	mov	r3, r1
 800b930:	4313      	orrs	r3, r2
 800b932:	d044      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b93c:	2b05      	cmp	r3, #5
 800b93e:	d825      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b940:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800b995 	.word	0x0800b995
 800b94c:	0800b961 	.word	0x0800b961
 800b950:	0800b977 	.word	0x0800b977
 800b954:	0800b995 	.word	0x0800b995
 800b958:	0800b995 	.word	0x0800b995
 800b95c:	0800b995 	.word	0x0800b995
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b964:	3308      	adds	r3, #8
 800b966:	2101      	movs	r1, #1
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 fdef 	bl	800d54c <RCCEx_PLL2_Config>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b974:	e00f      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97a:	3328      	adds	r3, #40	; 0x28
 800b97c:	2101      	movs	r1, #1
 800b97e:	4618      	mov	r0, r3
 800b980:	f001 fe96 	bl	800d6b0 <RCCEx_PLL3_Config>
 800b984:	4603      	mov	r3, r0
 800b986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b98a:	e004      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b992:	e000      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b994:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10b      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b99e:	4b6c      	ldr	r3, [pc, #432]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a2:	f023 0107 	bic.w	r1, r3, #7
 800b9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9ae:	4a68      	ldr	r2, [pc, #416]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9b0:	430b      	orrs	r3, r1
 800b9b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b9b4:	e003      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	f002 0320 	and.w	r3, r2, #32
 800b9ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	d055      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9ea:	d033      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b9ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9f0:	d82c      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f6:	d02f      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9fc:	d826      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba02:	d02b      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ba04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba08:	d820      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba0e:	d012      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ba10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba14:	d81a      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d022      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ba1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba1e:	d115      	bne.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba24:	3308      	adds	r3, #8
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 fd8f 	bl	800d54c <RCCEx_PLL2_Config>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba34:	e015      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3a:	3328      	adds	r3, #40	; 0x28
 800ba3c:	2102      	movs	r1, #2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 fe36 	bl	800d6b0 <RCCEx_PLL3_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba4a:	e00a      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba52:	e006      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba54:	bf00      	nop
 800ba56:	e004      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba58:	bf00      	nop
 800ba5a:	e002      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba5c:	bf00      	nop
 800ba5e:	e000      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10b      	bne.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba6a:	4b39      	ldr	r3, [pc, #228]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7a:	4a35      	ldr	r2, [pc, #212]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	6553      	str	r3, [r2, #84]	; 0x54
 800ba80:	e003      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ba96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800baa0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800baa4:	460b      	mov	r3, r1
 800baa6:	4313      	orrs	r3, r2
 800baa8:	d058      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bab2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bab6:	d033      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bab8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800babc:	d82c      	bhi.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800babe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac2:	d02f      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac8:	d826      	bhi.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bace:	d02b      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bad4:	d820      	bhi.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bada:	d012      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800badc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bae0:	d81a      	bhi.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d022      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baea:	d115      	bne.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800baec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf0:	3308      	adds	r3, #8
 800baf2:	2100      	movs	r1, #0
 800baf4:	4618      	mov	r0, r3
 800baf6:	f001 fd29 	bl	800d54c <RCCEx_PLL2_Config>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb00:	e015      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb06:	3328      	adds	r3, #40	; 0x28
 800bb08:	2102      	movs	r1, #2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f001 fdd0 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb16:	e00a      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb1e:	e006      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb20:	bf00      	nop
 800bb22:	e004      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb24:	bf00      	nop
 800bb26:	e002      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb28:	bf00      	nop
 800bb2a:	e000      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10e      	bne.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb36:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb3a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb46:	4a02      	ldr	r2, [pc, #8]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb4c:	e006      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bb4e:	bf00      	nop
 800bb50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bb68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bb76:	460b      	mov	r3, r1
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	d055      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb88:	d033      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bb8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb8e:	d82c      	bhi.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb94:	d02f      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bb96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb9a:	d826      	bhi.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bba0:	d02b      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bba2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bba6:	d820      	bhi.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbac:	d012      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bbae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbb2:	d81a      	bhi.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d022      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bbb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbbc:	d115      	bne.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 fcc0 	bl	800d54c <RCCEx_PLL2_Config>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbd2:	e015      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd8:	3328      	adds	r3, #40	; 0x28
 800bbda:	2102      	movs	r1, #2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 fd67 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbe8:	e00a      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbf0:	e006      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbf2:	bf00      	nop
 800bbf4:	e004      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbf6:	bf00      	nop
 800bbf8:	e002      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbfa:	bf00      	nop
 800bbfc:	e000      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bc08:	4ba1      	ldr	r3, [pc, #644]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc18:	4a9d      	ldr	r2, [pc, #628]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	6593      	str	r3, [r2, #88]	; 0x58
 800bc1e:	e003      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	f002 0308 	and.w	r3, r2, #8
 800bc34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc42:	460b      	mov	r3, r1
 800bc44:	4313      	orrs	r3, r2
 800bc46:	d01e      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc54:	d10c      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5a:	3328      	adds	r3, #40	; 0x28
 800bc5c:	2102      	movs	r1, #2
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f001 fd26 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bc70:	4b87      	ldr	r3, [pc, #540]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc80:	4a83      	ldr	r2, [pc, #524]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc82:	430b      	orrs	r3, r1
 800bc84:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f002 0310 	and.w	r3, r2, #16
 800bc92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc96:	2300      	movs	r3, #0
 800bc98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bca0:	460b      	mov	r3, r1
 800bca2:	4313      	orrs	r3, r2
 800bca4:	d01e      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb2:	d10c      	bne.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb8:	3328      	adds	r3, #40	; 0x28
 800bcba:	2102      	movs	r1, #2
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fcf7 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcce:	4b70      	ldr	r3, [pc, #448]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcde:	4a6c      	ldr	r2, [pc, #432]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bce0:	430b      	orrs	r3, r1
 800bce2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bcf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcfa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4313      	orrs	r3, r2
 800bd02:	d03e      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd10:	d022      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bd12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd16:	d81b      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d003      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bd1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd20:	d00b      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bd22:	e015      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd28:	3308      	adds	r3, #8
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f001 fc0d 	bl	800d54c <RCCEx_PLL2_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd38:	e00f      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3e:	3328      	adds	r3, #40	; 0x28
 800bd40:	2102      	movs	r1, #2
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 fcb4 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd4e:	e004      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd56:	e000      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bd58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10b      	bne.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd62:	4b4b      	ldr	r3, [pc, #300]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd72:	4a47      	ldr	r2, [pc, #284]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd74:	430b      	orrs	r3, r1
 800bd76:	6593      	str	r3, [r2, #88]	; 0x58
 800bd78:	e003      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bd8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd90:	2300      	movs	r3, #0
 800bd92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	d03b      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdaa:	d01f      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bdac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdb0:	d818      	bhi.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bdb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdb6:	d003      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bdb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdbc:	d007      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bdbe:	e011      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc0:	4b33      	ldr	r3, [pc, #204]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc4:	4a32      	ldr	r2, [pc, #200]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdcc:	e00f      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd2:	3328      	adds	r3, #40	; 0x28
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 fc6a 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bddc:	4603      	mov	r3, r0
 800bdde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bde2:	e004      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdea:	e000      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bdec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10b      	bne.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bdf6:	4b26      	ldr	r3, [pc, #152]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be06:	4a22      	ldr	r2, [pc, #136]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be08:	430b      	orrs	r3, r1
 800be0a:	6553      	str	r3, [r2, #84]	; 0x54
 800be0c:	e003      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800be22:	673b      	str	r3, [r7, #112]	; 0x70
 800be24:	2300      	movs	r3, #0
 800be26:	677b      	str	r3, [r7, #116]	; 0x74
 800be28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be2c:	460b      	mov	r3, r1
 800be2e:	4313      	orrs	r3, r2
 800be30:	d034      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800be32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800be3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be40:	d007      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800be42:	e011      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be44:	4b12      	ldr	r3, [pc, #72]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	4a11      	ldr	r2, [pc, #68]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be50:	e00e      	b.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be56:	3308      	adds	r3, #8
 800be58:	2102      	movs	r1, #2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 fb76 	bl	800d54c <RCCEx_PLL2_Config>
 800be60:	4603      	mov	r3, r0
 800be62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be66:	e003      	b.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10d      	bne.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be78:	4b05      	ldr	r3, [pc, #20]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be86:	4a02      	ldr	r2, [pc, #8]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be88:	430b      	orrs	r3, r1
 800be8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be8c:	e006      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800be8e:	bf00      	nop
 800be90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bea8:	66bb      	str	r3, [r7, #104]	; 0x68
 800beaa:	2300      	movs	r3, #0
 800beac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800beae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800beb2:	460b      	mov	r3, r1
 800beb4:	4313      	orrs	r3, r2
 800beb6:	d00c      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800beb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebc:	3328      	adds	r3, #40	; 0x28
 800bebe:	2102      	movs	r1, #2
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 fbf5 	bl	800d6b0 <RCCEx_PLL3_Config>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bede:	663b      	str	r3, [r7, #96]	; 0x60
 800bee0:	2300      	movs	r3, #0
 800bee2:	667b      	str	r3, [r7, #100]	; 0x64
 800bee4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bee8:	460b      	mov	r3, r1
 800beea:	4313      	orrs	r3, r2
 800beec:	d038      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800beee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800befa:	d018      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800befc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf00:	d811      	bhi.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf06:	d014      	beq.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf0c:	d80b      	bhi.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d011      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bf12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf16:	d106      	bne.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf18:	4bc3      	ldr	r3, [pc, #780]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1c:	4ac2      	ldr	r2, [pc, #776]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bf24:	e008      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf2c:	e004      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf2e:	bf00      	nop
 800bf30:	e002      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf32:	bf00      	nop
 800bf34:	e000      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10b      	bne.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf40:	4bb9      	ldr	r3, [pc, #740]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf50:	4ab5      	ldr	r2, [pc, #724]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf52:	430b      	orrs	r3, r1
 800bf54:	6553      	str	r3, [r2, #84]	; 0x54
 800bf56:	e003      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bf6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf6e:	2300      	movs	r3, #0
 800bf70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bf76:	460b      	mov	r3, r1
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	d009      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf7c:	4baa      	ldr	r3, [pc, #680]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf8a:	4aa7      	ldr	r2, [pc, #668]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bf9c:	653b      	str	r3, [r7, #80]	; 0x50
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	657b      	str	r3, [r7, #84]	; 0x54
 800bfa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	d00a      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfac:	4b9e      	ldr	r3, [pc, #632]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfbc:	4a9a      	ldr	r2, [pc, #616]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfbe:	430b      	orrs	r3, r1
 800bfc0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bfce:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfd4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	d009      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfde:	4b92      	ldr	r3, [pc, #584]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfec:	4a8e      	ldr	r2, [pc, #568]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfee:	430b      	orrs	r3, r1
 800bff0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bffe:	643b      	str	r3, [r7, #64]	; 0x40
 800c000:	2300      	movs	r3, #0
 800c002:	647b      	str	r3, [r7, #68]	; 0x44
 800c004:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c008:	460b      	mov	r3, r1
 800c00a:	4313      	orrs	r3, r2
 800c00c:	d00e      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c00e:	4b86      	ldr	r3, [pc, #536]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	4a85      	ldr	r2, [pc, #532]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c018:	6113      	str	r3, [r2, #16]
 800c01a:	4b83      	ldr	r3, [pc, #524]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c01c:	6919      	ldr	r1, [r3, #16]
 800c01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c022:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c026:	4a80      	ldr	r2, [pc, #512]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c028:	430b      	orrs	r3, r1
 800c02a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c038:	63bb      	str	r3, [r7, #56]	; 0x38
 800c03a:	2300      	movs	r3, #0
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c03e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c042:	460b      	mov	r3, r1
 800c044:	4313      	orrs	r3, r2
 800c046:	d009      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c048:	4b77      	ldr	r3, [pc, #476]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c04a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c056:	4a74      	ldr	r2, [pc, #464]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c058:	430b      	orrs	r3, r1
 800c05a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c068:	633b      	str	r3, [r7, #48]	; 0x30
 800c06a:	2300      	movs	r3, #0
 800c06c:	637b      	str	r3, [r7, #52]	; 0x34
 800c06e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c072:	460b      	mov	r3, r1
 800c074:	4313      	orrs	r3, r2
 800c076:	d00a      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c078:	4b6b      	ldr	r3, [pc, #428]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c088:	4a67      	ldr	r2, [pc, #412]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c08a:	430b      	orrs	r3, r1
 800c08c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	2100      	movs	r1, #0
 800c098:	62b9      	str	r1, [r7, #40]	; 0x28
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	d011      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 fa4a 	bl	800d54c <RCCEx_PLL2_Config>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d003      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	6239      	str	r1, [r7, #32]
 800c0da:	f003 0302 	and.w	r3, r3, #2
 800c0de:	627b      	str	r3, [r7, #36]	; 0x24
 800c0e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	d011      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f001 fa2a 	bl	800d54c <RCCEx_PLL2_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c10a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	2100      	movs	r1, #0
 800c118:	61b9      	str	r1, [r7, #24]
 800c11a:	f003 0304 	and.w	r3, r3, #4
 800c11e:	61fb      	str	r3, [r7, #28]
 800c120:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c124:	460b      	mov	r3, r1
 800c126:	4313      	orrs	r3, r2
 800c128:	d011      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12e:	3308      	adds	r3, #8
 800c130:	2102      	movs	r1, #2
 800c132:	4618      	mov	r0, r3
 800c134:	f001 fa0a 	bl	800d54c <RCCEx_PLL2_Config>
 800c138:	4603      	mov	r3, r0
 800c13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c142:	2b00      	cmp	r3, #0
 800c144:	d003      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c14a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	2100      	movs	r1, #0
 800c158:	6139      	str	r1, [r7, #16]
 800c15a:	f003 0308 	and.w	r3, r3, #8
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c164:	460b      	mov	r3, r1
 800c166:	4313      	orrs	r3, r2
 800c168:	d011      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16e:	3328      	adds	r3, #40	; 0x28
 800c170:	2100      	movs	r1, #0
 800c172:	4618      	mov	r0, r3
 800c174:	f001 fa9c 	bl	800d6b0 <RCCEx_PLL3_Config>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c17e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c18a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c196:	2100      	movs	r1, #0
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	f003 0310 	and.w	r3, r3, #16
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	d011      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ae:	3328      	adds	r3, #40	; 0x28
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f001 fa7c 	bl	800d6b0 <RCCEx_PLL3_Config>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6039      	str	r1, [r7, #0]
 800c1da:	f003 0320 	and.w	r3, r3, #32
 800c1de:	607b      	str	r3, [r7, #4]
 800c1e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	d011      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ee:	3328      	adds	r3, #40	; 0x28
 800c1f0:	2102      	movs	r1, #2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f001 fa5c 	bl	800d6b0 <RCCEx_PLL3_Config>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c20a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c20e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	e000      	b.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c222:	46bd      	mov	sp, r7
 800c224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c228:	58024400 	.word	0x58024400

0800c22c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b090      	sub	sp, #64	; 0x40
 800c230:	af00      	add	r7, sp, #0
 800c232:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c23e:	430b      	orrs	r3, r1
 800c240:	f040 8094 	bne.w	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c244:	4b9e      	ldr	r3, [pc, #632]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c248:	f003 0307 	and.w	r3, r3, #7
 800c24c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	2b04      	cmp	r3, #4
 800c252:	f200 8087 	bhi.w	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c256:	a201      	add	r2, pc, #4	; (adr r2, 800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25c:	0800c271 	.word	0x0800c271
 800c260:	0800c299 	.word	0x0800c299
 800c264:	0800c2c1 	.word	0x0800c2c1
 800c268:	0800c35d 	.word	0x0800c35d
 800c26c:	0800c2e9 	.word	0x0800c2e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c270:	4b93      	ldr	r3, [pc, #588]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c27c:	d108      	bne.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c27e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c282:	4618      	mov	r0, r3
 800c284:	f001 f810 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c28c:	f000 bd45 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c294:	f000 bd41 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c298:	4b89      	ldr	r3, [pc, #548]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2a4:	d108      	bne.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2a6:	f107 0318 	add.w	r3, r7, #24
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fd54 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b4:	f000 bd31 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2bc:	f000 bd2d 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2c0:	4b7f      	ldr	r3, [pc, #508]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2cc:	d108      	bne.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2ce:	f107 030c 	add.w	r3, r7, #12
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fe94 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2dc:	f000 bd1d 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e4:	f000 bd19 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2e8:	4b75      	ldr	r3, [pc, #468]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f2:	4b73      	ldr	r3, [pc, #460]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0304 	and.w	r3, r3, #4
 800c2fa:	2b04      	cmp	r3, #4
 800c2fc:	d10c      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c300:	2b00      	cmp	r3, #0
 800c302:	d109      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c304:	4b6e      	ldr	r3, [pc, #440]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	08db      	lsrs	r3, r3, #3
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	4a6d      	ldr	r2, [pc, #436]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c310:	fa22 f303 	lsr.w	r3, r2, r3
 800c314:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c316:	e01f      	b.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c318:	4b69      	ldr	r3, [pc, #420]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c324:	d106      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c32c:	d102      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c32e:	4b66      	ldr	r3, [pc, #408]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c330:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c332:	e011      	b.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c334:	4b62      	ldr	r3, [pc, #392]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c340:	d106      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c348:	d102      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c34a:	4b60      	ldr	r3, [pc, #384]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c34e:	e003      	b.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c354:	f000 bce1 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c358:	f000 bcdf 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c35c:	4b5c      	ldr	r3, [pc, #368]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c360:	f000 bcdb 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c368:	f000 bcd7 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c36c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c370:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c374:	430b      	orrs	r3, r1
 800c376:	f040 80ad 	bne.w	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c37a:	4b51      	ldr	r3, [pc, #324]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c37e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c382:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c38a:	d056      	beq.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c392:	f200 8090 	bhi.w	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	2bc0      	cmp	r3, #192	; 0xc0
 800c39a:	f000 8088 	beq.w	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	2bc0      	cmp	r3, #192	; 0xc0
 800c3a2:	f200 8088 	bhi.w	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	2b80      	cmp	r3, #128	; 0x80
 800c3aa:	d032      	beq.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	2b80      	cmp	r3, #128	; 0x80
 800c3b0:	f200 8081 	bhi.w	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	2b40      	cmp	r3, #64	; 0x40
 800c3be:	d014      	beq.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c3c0:	e079      	b.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3c2:	4b3f      	ldr	r3, [pc, #252]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3ce:	d108      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 ff67 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3de:	f000 bc9c 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e6:	f000 bc98 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3ea:	4b35      	ldr	r3, [pc, #212]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3f6:	d108      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f8:	f107 0318 	add.w	r3, r7, #24
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 fcab 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c406:	f000 bc88 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40e:	f000 bc84 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c412:	4b2b      	ldr	r3, [pc, #172]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c41e:	d108      	bne.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c420:	f107 030c 	add.w	r3, r7, #12
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fdeb 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42e:	f000 bc74 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c436:	f000 bc70 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c43a:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c43e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c442:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c444:	4b1e      	ldr	r3, [pc, #120]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	2b04      	cmp	r3, #4
 800c44e:	d10c      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c452:	2b00      	cmp	r3, #0
 800c454:	d109      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c456:	4b1a      	ldr	r3, [pc, #104]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	08db      	lsrs	r3, r3, #3
 800c45c:	f003 0303 	and.w	r3, r3, #3
 800c460:	4a18      	ldr	r2, [pc, #96]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c462:	fa22 f303 	lsr.w	r3, r2, r3
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c468:	e01f      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c46a:	4b15      	ldr	r3, [pc, #84]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c476:	d106      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c47e:	d102      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c480:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c484:	e011      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c486:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c492:	d106      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c49a:	d102      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c49c:	4b0b      	ldr	r3, [pc, #44]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a0:	e003      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4a6:	f000 bc38 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4aa:	f000 bc36 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ae:	4b08      	ldr	r3, [pc, #32]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b2:	f000 bc32 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ba:	f000 bc2e 	b.w	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4be:	bf00      	nop
 800c4c0:	58024400 	.word	0x58024400
 800c4c4:	03d09000 	.word	0x03d09000
 800c4c8:	003d0900 	.word	0x003d0900
 800c4cc:	017d7840 	.word	0x017d7840
 800c4d0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c4dc:	430b      	orrs	r3, r1
 800c4de:	f040 809c 	bne.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c4e2:	4b9e      	ldr	r3, [pc, #632]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c4ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4f2:	d054      	beq.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4fa:	f200 808b 	bhi.w	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c504:	f000 8083 	beq.w	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c50e:	f200 8081 	bhi.w	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c518:	d02f      	beq.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c520:	d878      	bhi.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c52e:	d012      	beq.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c530:	e070      	b.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c532:	4b8a      	ldr	r3, [pc, #552]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c53a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c53e:	d107      	bne.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c544:	4618      	mov	r0, r3
 800c546:	f000 feaf 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c54e:	e3e4      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c554:	e3e1      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c556:	4b81      	ldr	r3, [pc, #516]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c55e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c562:	d107      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c564:	f107 0318 	add.w	r3, r7, #24
 800c568:	4618      	mov	r0, r3
 800c56a:	f000 fbf5 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c572:	e3d2      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c578:	e3cf      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c57a:	4b78      	ldr	r3, [pc, #480]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c586:	d107      	bne.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c588:	f107 030c 	add.w	r3, r7, #12
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fd37 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c596:	e3c0      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e3bd      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c59e:	4b6f      	ldr	r3, [pc, #444]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5a8:	4b6c      	ldr	r3, [pc, #432]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d10c      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d109      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ba:	4b68      	ldr	r3, [pc, #416]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	08db      	lsrs	r3, r3, #3
 800c5c0:	f003 0303 	and.w	r3, r3, #3
 800c5c4:	4a66      	ldr	r2, [pc, #408]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5cc:	e01e      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5ce:	4b63      	ldr	r3, [pc, #396]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5da:	d106      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5e2:	d102      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5e4:	4b5f      	ldr	r3, [pc, #380]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e8:	e010      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5ea:	4b5c      	ldr	r3, [pc, #368]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5f6:	d106      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5fe:	d102      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c600:	4b59      	ldr	r3, [pc, #356]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c604:	e002      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c60a:	e386      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c60c:	e385      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c60e:	4b57      	ldr	r3, [pc, #348]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c612:	e382      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c614:	2300      	movs	r3, #0
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c618:	e37f      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c61e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c622:	430b      	orrs	r3, r1
 800c624:	f040 80a7 	bne.w	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c628:	4b4c      	ldr	r3, [pc, #304]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c62c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c630:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c638:	d055      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c640:	f200 8096 	bhi.w	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c64a:	f000 8084 	beq.w	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c654:	f200 808c 	bhi.w	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65e:	d030      	beq.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c666:	f200 8083 	bhi.w	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d004      	beq.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c676:	d012      	beq.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c678:	e07a      	b.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c67a:	4b38      	ldr	r3, [pc, #224]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c686:	d107      	bne.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fe0b 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c696:	e340      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c698:	2300      	movs	r3, #0
 800c69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69c:	e33d      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c69e:	4b2f      	ldr	r3, [pc, #188]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6aa:	d107      	bne.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ac:	f107 0318 	add.w	r3, r7, #24
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fb51 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ba:	e32e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c0:	e32b      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6c2:	4b26      	ldr	r3, [pc, #152]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ce:	d107      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 fc93 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6de:	e31c      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e319      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6e6:	4b1d      	ldr	r3, [pc, #116]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6f0:	4b1a      	ldr	r3, [pc, #104]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0304 	and.w	r3, r3, #4
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d10c      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c702:	4b16      	ldr	r3, [pc, #88]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	08db      	lsrs	r3, r3, #3
 800c708:	f003 0303 	and.w	r3, r3, #3
 800c70c:	4a14      	ldr	r2, [pc, #80]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c70e:	fa22 f303 	lsr.w	r3, r2, r3
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c714:	e01e      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c716:	4b11      	ldr	r3, [pc, #68]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c722:	d106      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c72a:	d102      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c72c:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c730:	e010      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c732:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c73e:	d106      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c746:	d102      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74c:	e002      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c752:	e2e2      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c754:	e2e1      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c756:	4b05      	ldr	r3, [pc, #20]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75a:	e2de      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c75c:	58024400 	.word	0x58024400
 800c760:	03d09000 	.word	0x03d09000
 800c764:	003d0900 	.word	0x003d0900
 800c768:	017d7840 	.word	0x017d7840
 800c76c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c774:	e2d1      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c77a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c77e:	430b      	orrs	r3, r1
 800c780:	f040 809c 	bne.w	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c784:	4b93      	ldr	r3, [pc, #588]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c788:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c78c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c794:	d054      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c79c:	f200 808b 	bhi.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7a6:	f000 8083 	beq.w	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7b0:	f200 8081 	bhi.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ba:	d02f      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7c2:	d878      	bhi.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d004      	beq.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7d0:	d012      	beq.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c7d2:	e070      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7d4:	4b7f      	ldr	r3, [pc, #508]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7e0:	d107      	bne.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fd5e 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f0:	e293      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f6:	e290      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f8:	4b76      	ldr	r3, [pc, #472]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c804:	d107      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c806:	f107 0318 	add.w	r3, r7, #24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 faa4 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c814:	e281      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81a:	e27e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c81c:	4b6d      	ldr	r3, [pc, #436]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fbe6 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	e26f      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83e:	e26c      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c840:	4b64      	ldr	r3, [pc, #400]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c848:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c84a:	4b62      	ldr	r3, [pc, #392]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0304 	and.w	r3, r3, #4
 800c852:	2b04      	cmp	r3, #4
 800c854:	d10c      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d109      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c85c:	4b5d      	ldr	r3, [pc, #372]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	08db      	lsrs	r3, r3, #3
 800c862:	f003 0303 	and.w	r3, r3, #3
 800c866:	4a5c      	ldr	r2, [pc, #368]	; (800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c868:	fa22 f303 	lsr.w	r3, r2, r3
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c86e:	e01e      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c870:	4b58      	ldr	r3, [pc, #352]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87c:	d106      	bne.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c884:	d102      	bne.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c886:	4b55      	ldr	r3, [pc, #340]	; (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c88a:	e010      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c88c:	4b51      	ldr	r3, [pc, #324]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c898:	d106      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a0:	d102      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a2:	4b4f      	ldr	r3, [pc, #316]	; (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a6:	e002      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8ac:	e235      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8ae:	e234      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8b0:	4b4c      	ldr	r3, [pc, #304]	; (800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b4:	e231      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ba:	e22e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c8bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c8c4:	430b      	orrs	r3, r1
 800c8c6:	f040 808f 	bne.w	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8ca:	4b42      	ldr	r3, [pc, #264]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c8d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8da:	d06b      	beq.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8e2:	d874      	bhi.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8ea:	d056      	beq.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8f2:	d86c      	bhi.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8fa:	d03b      	beq.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c902:	d864      	bhi.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c90a:	d021      	beq.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c912:	d85c      	bhi.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	2b00      	cmp	r3, #0
 800c918:	d004      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c920:	d004      	beq.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c922:	e054      	b.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c924:	f7fe fa0a 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 800c928:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c92a:	e1f6      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c92c:	4b29      	ldr	r3, [pc, #164]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c938:	d107      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c93a:	f107 0318 	add.w	r3, r7, #24
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fa0a 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c948:	e1e7      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94e:	e1e4      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c950:	4b20      	ldr	r3, [pc, #128]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95c:	d107      	bne.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95e:	f107 030c 	add.w	r3, r7, #12
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fb4c 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96c:	e1d5      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c972:	e1d2      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c974:	4b17      	ldr	r3, [pc, #92]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	d109      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c980:	4b14      	ldr	r3, [pc, #80]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	08db      	lsrs	r3, r3, #3
 800c986:	f003 0303 	and.w	r3, r3, #3
 800c98a:	4a13      	ldr	r2, [pc, #76]	; (800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c98c:	fa22 f303 	lsr.w	r3, r2, r3
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c992:	e1c2      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c998:	e1bf      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c99a:	4b0e      	ldr	r3, [pc, #56]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a6:	d102      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c9a8:	4b0c      	ldr	r3, [pc, #48]	; (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ac:	e1b5      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b2:	e1b2      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9b4:	4b07      	ldr	r3, [pc, #28]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9c0:	d102      	bne.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c9c2:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9c6:	e1a8      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9cc:	e1a5      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d2:	e1a2      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9d4:	58024400 	.word	0x58024400
 800c9d8:	03d09000 	.word	0x03d09000
 800c9dc:	003d0900 	.word	0x003d0900
 800c9e0:	017d7840 	.word	0x017d7840
 800c9e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c9f0:	430b      	orrs	r3, r1
 800c9f2:	d173      	bne.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c9f4:	4b9c      	ldr	r3, [pc, #624]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c9fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca04:	d02f      	beq.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca0c:	d863      	bhi.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d004      	beq.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca1a:	d012      	beq.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ca1c:	e05b      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca1e:	4b92      	ldr	r3, [pc, #584]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca2a:	d107      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca2c:	f107 0318 	add.w	r3, r7, #24
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 f991 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca3a:	e16e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca40:	e16b      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca42:	4b89      	ldr	r3, [pc, #548]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca4e:	d107      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca50:	f107 030c 	add.w	r3, r7, #12
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 fad3 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5e:	e15c      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca64:	e159      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca66:	4b80      	ldr	r3, [pc, #512]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca70:	4b7d      	ldr	r3, [pc, #500]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 0304 	and.w	r3, r3, #4
 800ca78:	2b04      	cmp	r3, #4
 800ca7a:	d10c      	bne.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d109      	bne.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca82:	4b79      	ldr	r3, [pc, #484]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	08db      	lsrs	r3, r3, #3
 800ca88:	f003 0303 	and.w	r3, r3, #3
 800ca8c:	4a77      	ldr	r2, [pc, #476]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ca8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca94:	e01e      	b.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca96:	4b74      	ldr	r3, [pc, #464]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caa2:	d106      	bne.n	800cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800caa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caaa:	d102      	bne.n	800cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caac:	4b70      	ldr	r3, [pc, #448]	; (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800caae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab0:	e010      	b.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cab2:	4b6d      	ldr	r3, [pc, #436]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cabe:	d106      	bne.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cac6:	d102      	bne.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cac8:	4b6a      	ldr	r3, [pc, #424]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cacc:	e002      	b.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cad2:	e122      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cad4:	e121      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cada:	e11e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cadc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cae4:	430b      	orrs	r3, r1
 800cae6:	d133      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cae8:	4b5f      	ldr	r3, [pc, #380]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800caf0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cafe:	d012      	beq.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cb00:	e023      	b.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb02:	4b59      	ldr	r3, [pc, #356]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb0e:	d107      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 fbc7 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb1e:	e0fc      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb24:	e0f9      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb26:	4b50      	ldr	r3, [pc, #320]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb32:	d107      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb34:	f107 0318 	add.w	r3, r7, #24
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 f90d 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb42:	e0ea      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb48:	e0e7      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4e:	e0e4      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb54:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	f040 808d 	bne.w	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb5e:	4b42      	ldr	r3, [pc, #264]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb66:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb6e:	d06b      	beq.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb76:	d874      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb7e:	d056      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb86:	d86c      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb8e:	d03b      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb96:	d864      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb9e:	d021      	beq.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cba6:	d85c      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d004      	beq.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbb4:	d004      	beq.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cbb6:	e054      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cbb8:	f000 f8b8 	bl	800cd2c <HAL_RCCEx_GetD3PCLK1Freq>
 800cbbc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbbe:	e0ac      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbc0:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbcc:	d107      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbce:	f107 0318 	add.w	r3, r7, #24
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f8c0 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbdc:	e09d      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe2:	e09a      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe4:	4b20      	ldr	r3, [pc, #128]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf0:	d107      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf2:	f107 030c 	add.w	r3, r7, #12
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fa02 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc00:	e08b      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc06:	e088      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc08:	4b17      	ldr	r3, [pc, #92]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	d109      	bne.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc14:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	08db      	lsrs	r3, r3, #3
 800cc1a:	f003 0303 	and.w	r3, r3, #3
 800cc1e:	4a13      	ldr	r2, [pc, #76]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc20:	fa22 f303 	lsr.w	r3, r2, r3
 800cc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc26:	e078      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc2c:	e075      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc2e:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc3a:	d102      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cc3c:	4b0c      	ldr	r3, [pc, #48]	; (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc40:	e06b      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc46:	e068      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc48:	4b07      	ldr	r3, [pc, #28]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc54:	d102      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cc56:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc5a:	e05e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc60:	e05b      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc66:	e058      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc68:	58024400 	.word	0x58024400
 800cc6c:	03d09000 	.word	0x03d09000
 800cc70:	003d0900 	.word	0x003d0900
 800cc74:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cc78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc7c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cc80:	430b      	orrs	r3, r1
 800cc82:	d148      	bne.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cc84:	4b27      	ldr	r3, [pc, #156]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc94:	d02a      	beq.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc9c:	d838      	bhi.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccaa:	d00d      	beq.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ccac:	e030      	b.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccae:	4b1d      	ldr	r3, [pc, #116]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccba:	d102      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ccbc:	4b1a      	ldr	r3, [pc, #104]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ccbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc0:	e02b      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc6:	e028      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccc8:	4b16      	ldr	r3, [pc, #88]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccd4:	d107      	bne.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 fae4 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce4:	e019      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccea:	e016      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccf8:	d107      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccfa:	f107 0318 	add.w	r3, r7, #24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 f82a 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd08:	e007      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0e:	e004      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd14:	e001      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3740      	adds	r7, #64	; 0x40
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	58024400 	.word	0x58024400
 800cd28:	017d7840 	.word	0x017d7840

0800cd2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd30:	f7fd ffd4 	bl	800acdc <HAL_RCC_GetHCLKFreq>
 800cd34:	4602      	mov	r2, r0
 800cd36:	4b06      	ldr	r3, [pc, #24]	; (800cd50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	091b      	lsrs	r3, r3, #4
 800cd3c:	f003 0307 	and.w	r3, r3, #7
 800cd40:	4904      	ldr	r1, [pc, #16]	; (800cd54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd42:	5ccb      	ldrb	r3, [r1, r3]
 800cd44:	f003 031f 	and.w	r3, r3, #31
 800cd48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	58024400 	.word	0x58024400
 800cd54:	080177b0 	.word	0x080177b0

0800cd58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b089      	sub	sp, #36	; 0x24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd60:	4ba1      	ldr	r3, [pc, #644]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd64:	f003 0303 	and.w	r3, r3, #3
 800cd68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd6a:	4b9f      	ldr	r3, [pc, #636]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6e:	0b1b      	lsrs	r3, r3, #12
 800cd70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd76:	4b9c      	ldr	r3, [pc, #624]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	091b      	lsrs	r3, r3, #4
 800cd7c:	f003 0301 	and.w	r3, r3, #1
 800cd80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cd82:	4b99      	ldr	r3, [pc, #612]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd86:	08db      	lsrs	r3, r3, #3
 800cd88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	fb02 f303 	mul.w	r3, r2, r3
 800cd92:	ee07 3a90 	vmov	s15, r3
 800cd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 8111 	beq.w	800cfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	f000 8083 	beq.w	800ceb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	f200 80a1 	bhi.w	800cef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d056      	beq.n	800ce70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cdc2:	e099      	b.n	800cef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdc4:	4b88      	ldr	r3, [pc, #544]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 0320 	and.w	r3, r3, #32
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d02d      	beq.n	800ce2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdd0:	4b85      	ldr	r3, [pc, #532]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	08db      	lsrs	r3, r3, #3
 800cdd6:	f003 0303 	and.w	r3, r3, #3
 800cdda:	4a84      	ldr	r2, [pc, #528]	; (800cfec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cddc:	fa22 f303 	lsr.w	r3, r2, r3
 800cde0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	ee07 3a90 	vmov	s15, r3
 800cde8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	ee07 3a90 	vmov	s15, r3
 800cdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdfa:	4b7b      	ldr	r3, [pc, #492]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce2a:	e087      	b.n	800cf3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	ee07 3a90 	vmov	s15, r3
 800ce32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce3e:	4b6a      	ldr	r3, [pc, #424]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce6e:	e065      	b.n	800cf3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce82:	4b59      	ldr	r3, [pc, #356]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8a:	ee07 3a90 	vmov	s15, r3
 800ce8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceb2:	e043      	b.n	800cf3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	ee07 3a90 	vmov	s15, r3
 800ceba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cebe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cffc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec6:	4b48      	ldr	r3, [pc, #288]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cece:	ee07 3a90 	vmov	s15, r3
 800ced2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cef6:	e021      	b.n	800cf3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	ee07 3a90 	vmov	s15, r3
 800cefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf0a:	4b37      	ldr	r3, [pc, #220]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf12:	ee07 3a90 	vmov	s15, r3
 800cf16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf3c:	4b2a      	ldr	r3, [pc, #168]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf40:	0a5b      	lsrs	r3, r3, #9
 800cf42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf46:	ee07 3a90 	vmov	s15, r3
 800cf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf56:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf62:	ee17 2a90 	vmov	r2, s15
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf6a:	4b1f      	ldr	r3, [pc, #124]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6e:	0c1b      	lsrs	r3, r3, #16
 800cf70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf74:	ee07 3a90 	vmov	s15, r3
 800cf78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf84:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf90:	ee17 2a90 	vmov	r2, s15
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cf98:	4b13      	ldr	r3, [pc, #76]	; (800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9c:	0e1b      	lsrs	r3, r3, #24
 800cf9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfbe:	ee17 2a90 	vmov	r2, s15
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cfc6:	e008      	b.n	800cfda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	609a      	str	r2, [r3, #8]
}
 800cfda:	bf00      	nop
 800cfdc:	3724      	adds	r7, #36	; 0x24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	58024400 	.word	0x58024400
 800cfec:	03d09000 	.word	0x03d09000
 800cff0:	46000000 	.word	0x46000000
 800cff4:	4c742400 	.word	0x4c742400
 800cff8:	4a742400 	.word	0x4a742400
 800cffc:	4bbebc20 	.word	0x4bbebc20

0800d000 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d000:	b480      	push	{r7}
 800d002:	b089      	sub	sp, #36	; 0x24
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d008:	4ba1      	ldr	r3, [pc, #644]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00c:	f003 0303 	and.w	r3, r3, #3
 800d010:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d012:	4b9f      	ldr	r3, [pc, #636]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d016:	0d1b      	lsrs	r3, r3, #20
 800d018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d01c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d01e:	4b9c      	ldr	r3, [pc, #624]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	0a1b      	lsrs	r3, r3, #8
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d02a:	4b99      	ldr	r3, [pc, #612]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d02e:	08db      	lsrs	r3, r3, #3
 800d030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	fb02 f303 	mul.w	r3, r2, r3
 800d03a:	ee07 3a90 	vmov	s15, r3
 800d03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 8111 	beq.w	800d270 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b02      	cmp	r3, #2
 800d052:	f000 8083 	beq.w	800d15c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b02      	cmp	r3, #2
 800d05a:	f200 80a1 	bhi.w	800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d056      	beq.n	800d118 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d06a:	e099      	b.n	800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d06c:	4b88      	ldr	r3, [pc, #544]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 0320 	and.w	r3, r3, #32
 800d074:	2b00      	cmp	r3, #0
 800d076:	d02d      	beq.n	800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d078:	4b85      	ldr	r3, [pc, #532]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	08db      	lsrs	r3, r3, #3
 800d07e:	f003 0303 	and.w	r3, r3, #3
 800d082:	4a84      	ldr	r2, [pc, #528]	; (800d294 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d084:	fa22 f303 	lsr.w	r3, r2, r3
 800d088:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	ee07 3a90 	vmov	s15, r3
 800d090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a2:	4b7b      	ldr	r3, [pc, #492]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0aa:	ee07 3a90 	vmov	s15, r3
 800d0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0d2:	e087      	b.n	800d1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	ee07 3a90 	vmov	s15, r3
 800d0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0e6:	4b6a      	ldr	r3, [pc, #424]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d116:	e065      	b.n	800d1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	ee07 3a90 	vmov	s15, r3
 800d11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d12a:	4b59      	ldr	r3, [pc, #356]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d132:	ee07 3a90 	vmov	s15, r3
 800d136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d13a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d13e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d14a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d15a:	e043      	b.n	800d1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	ee07 3a90 	vmov	s15, r3
 800d162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d16e:	4b48      	ldr	r3, [pc, #288]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d182:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d18e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d19a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d19e:	e021      	b.n	800d1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1b2:	4b37      	ldr	r3, [pc, #220]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d1e4:	4b2a      	ldr	r3, [pc, #168]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e8:	0a5b      	lsrs	r3, r3, #9
 800d1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ee:	ee07 3a90 	vmov	s15, r3
 800d1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d20a:	ee17 2a90 	vmov	r2, s15
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d212:	4b1f      	ldr	r3, [pc, #124]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	0c1b      	lsrs	r3, r3, #16
 800d218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21c:	ee07 3a90 	vmov	s15, r3
 800d220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d22c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d238:	ee17 2a90 	vmov	r2, s15
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d244:	0e1b      	lsrs	r3, r3, #24
 800d246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d266:	ee17 2a90 	vmov	r2, s15
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d26e:	e008      	b.n	800d282 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	609a      	str	r2, [r3, #8]
}
 800d282:	bf00      	nop
 800d284:	3724      	adds	r7, #36	; 0x24
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	58024400 	.word	0x58024400
 800d294:	03d09000 	.word	0x03d09000
 800d298:	46000000 	.word	0x46000000
 800d29c:	4c742400 	.word	0x4c742400
 800d2a0:	4a742400 	.word	0x4a742400
 800d2a4:	4bbebc20 	.word	0x4bbebc20

0800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b089      	sub	sp, #36	; 0x24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2b0:	4ba0      	ldr	r3, [pc, #640]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d2ba:	4b9e      	ldr	r3, [pc, #632]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2be:	091b      	lsrs	r3, r3, #4
 800d2c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d2c6:	4b9b      	ldr	r3, [pc, #620]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d2d0:	4b98      	ldr	r3, [pc, #608]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d4:	08db      	lsrs	r3, r3, #3
 800d2d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	fb02 f303 	mul.w	r3, r2, r3
 800d2e0:	ee07 3a90 	vmov	s15, r3
 800d2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 8111 	beq.w	800d516 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	f000 8083 	beq.w	800d402 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	f200 80a1 	bhi.w	800d446 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d056      	beq.n	800d3be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d310:	e099      	b.n	800d446 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d312:	4b88      	ldr	r3, [pc, #544]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 0320 	and.w	r3, r3, #32
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d02d      	beq.n	800d37a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d31e:	4b85      	ldr	r3, [pc, #532]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	08db      	lsrs	r3, r3, #3
 800d324:	f003 0303 	and.w	r3, r3, #3
 800d328:	4a83      	ldr	r2, [pc, #524]	; (800d538 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d32a:	fa22 f303 	lsr.w	r3, r2, r3
 800d32e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	ee07 3a90 	vmov	s15, r3
 800d336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	ee07 3a90 	vmov	s15, r3
 800d340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d348:	4b7a      	ldr	r3, [pc, #488]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d350:	ee07 3a90 	vmov	s15, r3
 800d354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d358:	ed97 6a03 	vldr	s12, [r7, #12]
 800d35c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d53c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d36c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d370:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d374:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d378:	e087      	b.n	800d48a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	ee07 3a90 	vmov	s15, r3
 800d380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d384:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d540 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d38c:	4b69      	ldr	r3, [pc, #420]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d394:	ee07 3a90 	vmov	s15, r3
 800d398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d39c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d53c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3bc:	e065      	b.n	800d48a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	ee07 3a90 	vmov	s15, r3
 800d3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d544 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d3cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3d0:	4b58      	ldr	r3, [pc, #352]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d8:	ee07 3a90 	vmov	s15, r3
 800d3dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d53c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d400:	e043      	b.n	800d48a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	ee07 3a90 	vmov	s15, r3
 800d408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d548 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d414:	4b47      	ldr	r3, [pc, #284]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41c:	ee07 3a90 	vmov	s15, r3
 800d420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d424:	ed97 6a03 	vldr	s12, [r7, #12]
 800d428:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d53c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d42c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d444:	e021      	b.n	800d48a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	ee07 3a90 	vmov	s15, r3
 800d44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d450:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d540 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d458:	4b36      	ldr	r3, [pc, #216]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d460:	ee07 3a90 	vmov	s15, r3
 800d464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d468:	ed97 6a03 	vldr	s12, [r7, #12]
 800d46c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d53c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d47c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d488:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d48a:	4b2a      	ldr	r3, [pc, #168]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48e:	0a5b      	lsrs	r3, r3, #9
 800d490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d494:	ee07 3a90 	vmov	s15, r3
 800d498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b0:	ee17 2a90 	vmov	r2, s15
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d4b8:	4b1e      	ldr	r3, [pc, #120]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4bc:	0c1b      	lsrs	r3, r3, #16
 800d4be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c2:	ee07 3a90 	vmov	s15, r3
 800d4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4de:	ee17 2a90 	vmov	r2, s15
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d4e6:	4b13      	ldr	r3, [pc, #76]	; (800d534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ea:	0e1b      	lsrs	r3, r3, #24
 800d4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f0:	ee07 3a90 	vmov	s15, r3
 800d4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d500:	edd7 6a07 	vldr	s13, [r7, #28]
 800d504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50c:	ee17 2a90 	vmov	r2, s15
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d514:	e008      	b.n	800d528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	609a      	str	r2, [r3, #8]
}
 800d528:	bf00      	nop
 800d52a:	3724      	adds	r7, #36	; 0x24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	58024400 	.word	0x58024400
 800d538:	03d09000 	.word	0x03d09000
 800d53c:	46000000 	.word	0x46000000
 800d540:	4c742400 	.word	0x4c742400
 800d544:	4a742400 	.word	0x4a742400
 800d548:	4bbebc20 	.word	0x4bbebc20

0800d54c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d55a:	4b53      	ldr	r3, [pc, #332]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55e:	f003 0303 	and.w	r3, r3, #3
 800d562:	2b03      	cmp	r3, #3
 800d564:	d101      	bne.n	800d56a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	e099      	b.n	800d69e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d56a:	4b4f      	ldr	r3, [pc, #316]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a4e      	ldr	r2, [pc, #312]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d570:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d576:	f7f6 fc53 	bl	8003e20 <HAL_GetTick>
 800d57a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d57c:	e008      	b.n	800d590 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d57e:	f7f6 fc4f 	bl	8003e20 <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d901      	bls.n	800d590 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e086      	b.n	800d69e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d590:	4b45      	ldr	r3, [pc, #276]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1f0      	bne.n	800d57e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d59c:	4b42      	ldr	r3, [pc, #264]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	031b      	lsls	r3, r3, #12
 800d5aa:	493f      	ldr	r1, [pc, #252]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	628b      	str	r3, [r1, #40]	; 0x28
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	025b      	lsls	r3, r3, #9
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	431a      	orrs	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	041b      	lsls	r3, r3, #16
 800d5ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	061b      	lsls	r3, r3, #24
 800d5dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5e0:	4931      	ldr	r1, [pc, #196]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d5e6:	4b30      	ldr	r3, [pc, #192]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	492d      	ldr	r1, [pc, #180]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d5f8:	4b2b      	ldr	r3, [pc, #172]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fc:	f023 0220 	bic.w	r2, r3, #32
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	4928      	ldr	r1, [pc, #160]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d606:	4313      	orrs	r3, r2
 800d608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d60a:	4b27      	ldr	r3, [pc, #156]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60e:	4a26      	ldr	r2, [pc, #152]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d610:	f023 0310 	bic.w	r3, r3, #16
 800d614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d616:	4b24      	ldr	r3, [pc, #144]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d61a:	4b24      	ldr	r3, [pc, #144]	; (800d6ac <RCCEx_PLL2_Config+0x160>)
 800d61c:	4013      	ands	r3, r2
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	69d2      	ldr	r2, [r2, #28]
 800d622:	00d2      	lsls	r2, r2, #3
 800d624:	4920      	ldr	r1, [pc, #128]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d626:	4313      	orrs	r3, r2
 800d628:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d62a:	4b1f      	ldr	r3, [pc, #124]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	4a1e      	ldr	r2, [pc, #120]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d630:	f043 0310 	orr.w	r3, r3, #16
 800d634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d106      	bne.n	800d64a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d63c:	4b1a      	ldr	r3, [pc, #104]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d640:	4a19      	ldr	r2, [pc, #100]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d646:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d648:	e00f      	b.n	800d66a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d106      	bne.n	800d65e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d650:	4b15      	ldr	r3, [pc, #84]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d654:	4a14      	ldr	r2, [pc, #80]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d65a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d65c:	e005      	b.n	800d66a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d65e:	4b12      	ldr	r3, [pc, #72]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d662:	4a11      	ldr	r2, [pc, #68]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d66a:	4b0f      	ldr	r3, [pc, #60]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a0e      	ldr	r2, [pc, #56]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d676:	f7f6 fbd3 	bl	8003e20 <HAL_GetTick>
 800d67a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d67c:	e008      	b.n	800d690 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d67e:	f7f6 fbcf 	bl	8003e20 <HAL_GetTick>
 800d682:	4602      	mov	r2, r0
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d901      	bls.n	800d690 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	e006      	b.n	800d69e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d690:	4b05      	ldr	r3, [pc, #20]	; (800d6a8 <RCCEx_PLL2_Config+0x15c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d0f0      	beq.n	800d67e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	58024400 	.word	0x58024400
 800d6ac:	ffff0007 	.word	0xffff0007

0800d6b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6be:	4b53      	ldr	r3, [pc, #332]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c2:	f003 0303 	and.w	r3, r3, #3
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d101      	bne.n	800d6ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e099      	b.n	800d802 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d6ce:	4b4f      	ldr	r3, [pc, #316]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a4e      	ldr	r2, [pc, #312]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d6d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6da:	f7f6 fba1 	bl	8003e20 <HAL_GetTick>
 800d6de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d6e0:	e008      	b.n	800d6f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d6e2:	f7f6 fb9d 	bl	8003e20 <HAL_GetTick>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d901      	bls.n	800d6f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e086      	b.n	800d802 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d6f4:	4b45      	ldr	r3, [pc, #276]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1f0      	bne.n	800d6e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d700:	4b42      	ldr	r3, [pc, #264]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d704:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	051b      	lsls	r3, r3, #20
 800d70e:	493f      	ldr	r1, [pc, #252]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d710:	4313      	orrs	r3, r2
 800d712:	628b      	str	r3, [r1, #40]	; 0x28
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	3b01      	subs	r3, #1
 800d71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	3b01      	subs	r3, #1
 800d724:	025b      	lsls	r3, r3, #9
 800d726:	b29b      	uxth	r3, r3
 800d728:	431a      	orrs	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	3b01      	subs	r3, #1
 800d730:	041b      	lsls	r3, r3, #16
 800d732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d736:	431a      	orrs	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	3b01      	subs	r3, #1
 800d73e:	061b      	lsls	r3, r3, #24
 800d740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d744:	4931      	ldr	r1, [pc, #196]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d746:	4313      	orrs	r3, r2
 800d748:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d74a:	4b30      	ldr	r3, [pc, #192]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	492d      	ldr	r1, [pc, #180]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d758:	4313      	orrs	r3, r2
 800d75a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d75c:	4b2b      	ldr	r3, [pc, #172]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d760:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	4928      	ldr	r1, [pc, #160]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d76a:	4313      	orrs	r3, r2
 800d76c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d76e:	4b27      	ldr	r3, [pc, #156]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d772:	4a26      	ldr	r2, [pc, #152]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d77a:	4b24      	ldr	r3, [pc, #144]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d77e:	4b24      	ldr	r3, [pc, #144]	; (800d810 <RCCEx_PLL3_Config+0x160>)
 800d780:	4013      	ands	r3, r2
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	69d2      	ldr	r2, [r2, #28]
 800d786:	00d2      	lsls	r2, r2, #3
 800d788:	4920      	ldr	r1, [pc, #128]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d78a:	4313      	orrs	r3, r2
 800d78c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d78e:	4b1f      	ldr	r3, [pc, #124]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d792:	4a1e      	ldr	r2, [pc, #120]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d106      	bne.n	800d7ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d7a0:	4b1a      	ldr	r3, [pc, #104]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a4:	4a19      	ldr	r2, [pc, #100]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d7aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7ac:	e00f      	b.n	800d7ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d106      	bne.n	800d7c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d7b4:	4b15      	ldr	r3, [pc, #84]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b8:	4a14      	ldr	r2, [pc, #80]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7c0:	e005      	b.n	800d7ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d7c2:	4b12      	ldr	r3, [pc, #72]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c6:	4a11      	ldr	r2, [pc, #68]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d7ce:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a0e      	ldr	r2, [pc, #56]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7da:	f7f6 fb21 	bl	8003e20 <HAL_GetTick>
 800d7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d7e0:	e008      	b.n	800d7f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d7e2:	f7f6 fb1d 	bl	8003e20 <HAL_GetTick>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d901      	bls.n	800d7f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d7f0:	2303      	movs	r3, #3
 800d7f2:	e006      	b.n	800d802 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <RCCEx_PLL3_Config+0x15c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0f0      	beq.n	800d7e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d800:	7bfb      	ldrb	r3, [r7, #15]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	58024400 	.word	0x58024400
 800d810:	ffff0007 	.word	0xffff0007

0800d814 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d071      	beq.n	800d90a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d106      	bne.n	800d840 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7f5 fd88 	bl	8003350 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2202      	movs	r2, #2
 800d844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f003 0310 	and.w	r3, r3, #16
 800d852:	2b10      	cmp	r3, #16
 800d854:	d050      	beq.n	800d8f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	22ca      	movs	r2, #202	; 0xca
 800d85c:	625a      	str	r2, [r3, #36]	; 0x24
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2253      	movs	r2, #83	; 0x53
 800d864:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fa4a 	bl	800dd00 <RTC_EnterInitMode>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d124      	bne.n	800d8c0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6899      	ldr	r1, [r3, #8]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	4b24      	ldr	r3, [pc, #144]	; (800d914 <HAL_RTC_Init+0x100>)
 800d882:	400b      	ands	r3, r1
 800d884:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6899      	ldr	r1, [r3, #8]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	685a      	ldr	r2, [r3, #4]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	431a      	orrs	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	431a      	orrs	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	430a      	orrs	r2, r1
 800d8a2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	0419      	lsls	r1, r3, #16
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	68da      	ldr	r2, [r3, #12]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fa56 	bl	800dd68 <RTC_ExitInitMode>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d113      	bne.n	800d8ee <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0203 	bic.w	r2, r2, #3
 800d8d4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	69da      	ldr	r2, [r3, #28]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	431a      	orrs	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	430a      	orrs	r2, r1
 800d8ec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	22ff      	movs	r2, #255	; 0xff
 800d8f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d8f6:	e001      	b.n	800d8fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d103      	bne.n	800d90a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2201      	movs	r2, #1
 800d906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	ff8fffbf 	.word	0xff8fffbf

0800d918 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d918:	b590      	push	{r4, r7, lr}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d101      	bne.n	800d932 <HAL_RTC_SetTime+0x1a>
 800d92e:	2302      	movs	r3, #2
 800d930:	e089      	b.n	800da46 <HAL_RTC_SetTime+0x12e>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2202      	movs	r2, #2
 800d93e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	22ca      	movs	r2, #202	; 0xca
 800d948:	625a      	str	r2, [r3, #36]	; 0x24
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2253      	movs	r2, #83	; 0x53
 800d950:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 f9d4 	bl	800dd00 <RTC_EnterInitMode>
 800d958:	4603      	mov	r3, r0
 800d95a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d95c:	7cfb      	ldrb	r3, [r7, #19]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d161      	bne.n	800da26 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d126      	bne.n	800d9b6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d972:	2b00      	cmp	r3, #0
 800d974:	d102      	bne.n	800d97c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2200      	movs	r2, #0
 800d97a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	4618      	mov	r0, r3
 800d982:	f000 fa2f 	bl	800dde4 <RTC_ByteToBcd2>
 800d986:	4603      	mov	r3, r0
 800d988:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	785b      	ldrb	r3, [r3, #1]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 fa28 	bl	800dde4 <RTC_ByteToBcd2>
 800d994:	4603      	mov	r3, r0
 800d996:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d998:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	789b      	ldrb	r3, [r3, #2]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 fa20 	bl	800dde4 <RTC_ByteToBcd2>
 800d9a4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9a6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	78db      	ldrb	r3, [r3, #3]
 800d9ae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	617b      	str	r3, [r7, #20]
 800d9b4:	e018      	b.n	800d9e8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	785b      	ldrb	r3, [r3, #1]
 800d9d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	78db      	ldrb	r3, [r3, #3]
 800d9e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	6979      	ldr	r1, [r7, #20]
 800d9ee:	4b18      	ldr	r3, [pc, #96]	; (800da50 <HAL_RTC_SetTime+0x138>)
 800d9f0:	400b      	ands	r3, r1
 800d9f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	689a      	ldr	r2, [r3, #8]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6899      	ldr	r1, [r3, #8]
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	68da      	ldr	r2, [r3, #12]
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	431a      	orrs	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	430a      	orrs	r2, r1
 800da1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f9a3 	bl	800dd68 <RTC_ExitInitMode>
 800da22:	4603      	mov	r3, r0
 800da24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	22ff      	movs	r2, #255	; 0xff
 800da2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da2e:	7cfb      	ldrb	r3, [r7, #19]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d103      	bne.n	800da3c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da44:	7cfb      	ldrb	r3, [r7, #19]
}
 800da46:	4618      	mov	r0, r3
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd90      	pop	{r4, r7, pc}
 800da4e:	bf00      	nop
 800da50:	007f7f7f 	.word	0x007f7f7f

0800da54 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	4b22      	ldr	r3, [pc, #136]	; (800db08 <HAL_RTC_GetTime+0xb4>)
 800da80:	4013      	ands	r3, r2
 800da82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daac:	b2da      	uxtb	r2, r3
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	0d9b      	lsrs	r3, r3, #22
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d11a      	bne.n	800dafe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 f9a9 	bl	800de24 <RTC_Bcd2ToByte>
 800dad2:	4603      	mov	r3, r0
 800dad4:	461a      	mov	r2, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	785b      	ldrb	r3, [r3, #1]
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 f9a0 	bl	800de24 <RTC_Bcd2ToByte>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	789b      	ldrb	r3, [r3, #2]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 f997 	bl	800de24 <RTC_Bcd2ToByte>
 800daf6:	4603      	mov	r3, r0
 800daf8:	461a      	mov	r2, r3
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	007f7f7f 	.word	0x007f7f7f

0800db0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db0c:	b590      	push	{r4, r7, lr}
 800db0e:	b087      	sub	sp, #28
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <HAL_RTC_SetDate+0x1a>
 800db22:	2302      	movs	r3, #2
 800db24:	e073      	b.n	800dc0e <HAL_RTC_SetDate+0x102>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2202      	movs	r2, #2
 800db32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10e      	bne.n	800db5a <HAL_RTC_SetDate+0x4e>
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	785b      	ldrb	r3, [r3, #1]
 800db40:	f003 0310 	and.w	r3, r3, #16
 800db44:	2b00      	cmp	r3, #0
 800db46:	d008      	beq.n	800db5a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	785b      	ldrb	r3, [r3, #1]
 800db4c:	f023 0310 	bic.w	r3, r3, #16
 800db50:	b2db      	uxtb	r3, r3
 800db52:	330a      	adds	r3, #10
 800db54:	b2da      	uxtb	r2, r3
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d11c      	bne.n	800db9a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	78db      	ldrb	r3, [r3, #3]
 800db64:	4618      	mov	r0, r3
 800db66:	f000 f93d 	bl	800dde4 <RTC_ByteToBcd2>
 800db6a:	4603      	mov	r3, r0
 800db6c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	785b      	ldrb	r3, [r3, #1]
 800db72:	4618      	mov	r0, r3
 800db74:	f000 f936 	bl	800dde4 <RTC_ByteToBcd2>
 800db78:	4603      	mov	r3, r0
 800db7a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db7c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	789b      	ldrb	r3, [r3, #2]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 f92e 	bl	800dde4 <RTC_ByteToBcd2>
 800db88:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db8a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db94:	4313      	orrs	r3, r2
 800db96:	617b      	str	r3, [r7, #20]
 800db98:	e00e      	b.n	800dbb8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	78db      	ldrb	r3, [r3, #3]
 800db9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	785b      	ldrb	r3, [r3, #1]
 800dba4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dba6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	22ca      	movs	r2, #202	; 0xca
 800dbbe:	625a      	str	r2, [r3, #36]	; 0x24
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2253      	movs	r2, #83	; 0x53
 800dbc6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f000 f899 	bl	800dd00 <RTC_EnterInitMode>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbd2:	7cfb      	ldrb	r3, [r7, #19]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	6979      	ldr	r1, [r7, #20]
 800dbde:	4b0e      	ldr	r3, [pc, #56]	; (800dc18 <HAL_RTC_SetDate+0x10c>)
 800dbe0:	400b      	ands	r3, r1
 800dbe2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 f8bf 	bl	800dd68 <RTC_ExitInitMode>
 800dbea:	4603      	mov	r3, r0
 800dbec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	22ff      	movs	r2, #255	; 0xff
 800dbf4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dbf6:	7cfb      	ldrb	r3, [r7, #19]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d103      	bne.n	800dc04 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc0c:	7cfb      	ldrb	r3, [r7, #19]


}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	371c      	adds	r7, #28
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd90      	pop	{r4, r7, pc}
 800dc16:	bf00      	nop
 800dc18:	00ffff3f 	.word	0x00ffff3f

0800dc1c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	4b21      	ldr	r3, [pc, #132]	; (800dcb4 <HAL_RTC_GetDate+0x98>)
 800dc30:	4013      	ands	r3, r2
 800dc32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	0c1b      	lsrs	r3, r3, #16
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	0a1b      	lsrs	r3, r3, #8
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	f003 031f 	and.w	r3, r3, #31
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	0b5b      	lsrs	r3, r3, #13
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f003 0307 	and.w	r3, r3, #7
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d11a      	bne.n	800dca8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	78db      	ldrb	r3, [r3, #3]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f000 f8d4 	bl	800de24 <RTC_Bcd2ToByte>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 f8cb 	bl	800de24 <RTC_Bcd2ToByte>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	461a      	mov	r2, r3
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	789b      	ldrb	r3, [r3, #2]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f8c2 	bl	800de24 <RTC_Bcd2ToByte>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	00ffff3f 	.word	0x00ffff3f

0800dcb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a0d      	ldr	r2, [pc, #52]	; (800dcfc <HAL_RTC_WaitForSynchro+0x44>)
 800dcc6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dcc8:	f7f6 f8aa 	bl	8003e20 <HAL_GetTick>
 800dccc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dcce:	e009      	b.n	800dce4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dcd0:	f7f6 f8a6 	bl	8003e20 <HAL_GetTick>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcde:	d901      	bls.n	800dce4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dce0:	2303      	movs	r3, #3
 800dce2:	e007      	b.n	800dcf4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	f003 0320 	and.w	r3, r3, #32
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0ee      	beq.n	800dcd0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	0003ff5f 	.word	0x0003ff5f

0800dd00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d120      	bne.n	800dd5c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dd24:	f7f6 f87c 	bl	8003e20 <HAL_GetTick>
 800dd28:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd2a:	e00d      	b.n	800dd48 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dd2c:	f7f6 f878 	bl	8003e20 <HAL_GetTick>
 800dd30:	4602      	mov	r2, r0
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd3a:	d905      	bls.n	800dd48 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2203      	movs	r2, #3
 800dd44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <RTC_EnterInitMode+0x5c>
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
 800dd58:	2b03      	cmp	r3, #3
 800dd5a:	d1e7      	bne.n	800dd2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dd74:	4b1a      	ldr	r3, [pc, #104]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	4a19      	ldr	r2, [pc, #100]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800dd7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd7e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dd80:	4b17      	ldr	r3, [pc, #92]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	f003 0320 	and.w	r3, r3, #32
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10c      	bne.n	800dda6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ff93 	bl	800dcb8 <HAL_RTC_WaitForSynchro>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d01e      	beq.n	800ddd6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	73fb      	strb	r3, [r7, #15]
 800dda4:	e017      	b.n	800ddd6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dda6:	4b0e      	ldr	r3, [pc, #56]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	4a0d      	ldr	r2, [pc, #52]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800ddac:	f023 0320 	bic.w	r3, r3, #32
 800ddb0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff ff80 	bl	800dcb8 <HAL_RTC_WaitForSynchro>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2203      	movs	r2, #3
 800ddc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddca:	4b05      	ldr	r3, [pc, #20]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	4a04      	ldr	r2, [pc, #16]	; (800dde0 <RTC_ExitInitMode+0x78>)
 800ddd0:	f043 0320 	orr.w	r3, r3, #32
 800ddd4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	58004000 	.word	0x58004000

0800dde4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ddf2:	79fb      	ldrb	r3, [r7, #7]
 800ddf4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ddf6:	e005      	b.n	800de04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ddfe:	7afb      	ldrb	r3, [r7, #11]
 800de00:	3b0a      	subs	r3, #10
 800de02:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800de04:	7afb      	ldrb	r3, [r7, #11]
 800de06:	2b09      	cmp	r3, #9
 800de08:	d8f6      	bhi.n	800ddf8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	011b      	lsls	r3, r3, #4
 800de10:	b2da      	uxtb	r2, r3
 800de12:	7afb      	ldrb	r3, [r7, #11]
 800de14:	4313      	orrs	r3, r2
 800de16:	b2db      	uxtb	r3, r3
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800de2e:	79fb      	ldrb	r3, [r7, #7]
 800de30:	091b      	lsrs	r3, r3, #4
 800de32:	b2db      	uxtb	r3, r3
 800de34:	461a      	mov	r2, r3
 800de36:	0092      	lsls	r2, r2, #2
 800de38:	4413      	add	r3, r2
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	f003 030f 	and.w	r3, r3, #15
 800de44:	b2da      	uxtb	r2, r3
 800de46:	7bfb      	ldrb	r3, [r7, #15]
 800de48:	4413      	add	r3, r2
 800de4a:	b2db      	uxtb	r3, r3
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3714      	adds	r7, #20
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d101      	bne.n	800de6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e10f      	b.n	800e08a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a87      	ldr	r2, [pc, #540]	; (800e094 <HAL_SPI_Init+0x23c>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d00f      	beq.n	800de9a <HAL_SPI_Init+0x42>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a86      	ldr	r2, [pc, #536]	; (800e098 <HAL_SPI_Init+0x240>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d00a      	beq.n	800de9a <HAL_SPI_Init+0x42>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a84      	ldr	r2, [pc, #528]	; (800e09c <HAL_SPI_Init+0x244>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d005      	beq.n	800de9a <HAL_SPI_Init+0x42>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	2b0f      	cmp	r3, #15
 800de94:	d901      	bls.n	800de9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e0f7      	b.n	800e08a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fc12 	bl	800e6c4 <SPI_GetPacketSize>
 800dea0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4a7b      	ldr	r2, [pc, #492]	; (800e094 <HAL_SPI_Init+0x23c>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d00c      	beq.n	800dec6 <HAL_SPI_Init+0x6e>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a79      	ldr	r2, [pc, #484]	; (800e098 <HAL_SPI_Init+0x240>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d007      	beq.n	800dec6 <HAL_SPI_Init+0x6e>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a78      	ldr	r2, [pc, #480]	; (800e09c <HAL_SPI_Init+0x244>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d002      	beq.n	800dec6 <HAL_SPI_Init+0x6e>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b08      	cmp	r3, #8
 800dec4:	d811      	bhi.n	800deea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800deca:	4a72      	ldr	r2, [pc, #456]	; (800e094 <HAL_SPI_Init+0x23c>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d009      	beq.n	800dee4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a70      	ldr	r2, [pc, #448]	; (800e098 <HAL_SPI_Init+0x240>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d004      	beq.n	800dee4 <HAL_SPI_Init+0x8c>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a6f      	ldr	r2, [pc, #444]	; (800e09c <HAL_SPI_Init+0x244>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d104      	bne.n	800deee <HAL_SPI_Init+0x96>
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b10      	cmp	r3, #16
 800dee8:	d901      	bls.n	800deee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e0cd      	b.n	800e08a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7f5 fa58 	bl	80033b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2202      	movs	r2, #2
 800df0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f022 0201 	bic.w	r2, r2, #1
 800df1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800df2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df34:	d119      	bne.n	800df6a <HAL_SPI_Init+0x112>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df3e:	d103      	bne.n	800df48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df44:	2b00      	cmp	r3, #0
 800df46:	d008      	beq.n	800df5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10c      	bne.n	800df6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df58:	d107      	bne.n	800df6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00f      	beq.n	800df96 <HAL_SPI_Init+0x13e>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	d90b      	bls.n	800df96 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	e007      	b.n	800dfa6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfa4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	69da      	ldr	r2, [r3, #28]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfae:	431a      	orrs	r2, r3
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb8:	ea42 0103 	orr.w	r1, r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	68da      	ldr	r2, [r3, #12]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	430a      	orrs	r2, r1
 800dfc6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd0:	431a      	orrs	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd6:	431a      	orrs	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	699b      	ldr	r3, [r3, #24]
 800dfdc:	431a      	orrs	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	431a      	orrs	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	431a      	orrs	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	431a      	orrs	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e006:	ea42 0103 	orr.w	r1, r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	430a      	orrs	r2, r1
 800e014:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d113      	bne.n	800e046 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e030:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e044:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f022 0201 	bic.w	r2, r2, #1
 800e054:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00a      	beq.n	800e078 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	430a      	orrs	r2, r1
 800e076:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	40013000 	.word	0x40013000
 800e098:	40003800 	.word	0x40003800
 800e09c:	40003c00 	.word	0x40003c00

0800e0a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b088      	sub	sp, #32
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b4:	095b      	lsrs	r3, r3, #5
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3330      	adds	r3, #48	; 0x30
 800e0c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0c4:	f7f5 feac 	bl	8003e20 <HAL_GetTick>
 800e0c8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d001      	beq.n	800e0da <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e250      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <HAL_SPI_Receive+0x46>
 800e0e0:	88fb      	ldrh	r3, [r7, #6]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e248      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d101      	bne.n	800e0f8 <HAL_SPI_Receive+0x58>
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	e241      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2204      	movs	r2, #4
 800e104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	88fa      	ldrh	r2, [r7, #6]
 800e11a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	88fa      	ldrh	r2, [r7, #6]
 800e122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2200      	movs	r2, #0
 800e12a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e150:	d108      	bne.n	800e164 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	e009      	b.n	800e178 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e176:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	4b95      	ldr	r3, [pc, #596]	; (800e3d4 <HAL_SPI_Receive+0x334>)
 800e180:	4013      	ands	r3, r2
 800e182:	88f9      	ldrh	r1, [r7, #6]
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	6812      	ldr	r2, [r2, #0]
 800e188:	430b      	orrs	r3, r1
 800e18a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f042 0201 	orr.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1a4:	d107      	bne.n	800e1b6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	2b0f      	cmp	r3, #15
 800e1bc:	d96c      	bls.n	800e298 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1be:	e064      	b.n	800e28a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	695b      	ldr	r3, [r3, #20]
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d114      	bne.n	800e200 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1e6:	1d1a      	adds	r2, r3, #4
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1fe:	e044      	b.n	800e28a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e206:	b29b      	uxth	r3, r3
 800e208:	8bfa      	ldrh	r2, [r7, #30]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d919      	bls.n	800e242 <HAL_SPI_Receive+0x1a2>
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d014      	beq.n	800e242 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e220:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e222:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e228:	1d1a      	adds	r2, r3, #4
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e234:	b29b      	uxth	r3, r3
 800e236:	3b01      	subs	r3, #1
 800e238:	b29a      	uxth	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e240:	e023      	b.n	800e28a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e242:	f7f5 fded 	bl	8003e20 <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	683a      	ldr	r2, [r7, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d803      	bhi.n	800e25a <HAL_SPI_Receive+0x1ba>
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e258:	d102      	bne.n	800e260 <HAL_SPI_Receive+0x1c0>
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d114      	bne.n	800e28a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 f98f 	bl	800e584 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e26c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e286:	2303      	movs	r3, #3
 800e288:	e178      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e290:	b29b      	uxth	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d194      	bne.n	800e1c0 <HAL_SPI_Receive+0x120>
 800e296:	e15e      	b.n	800e556 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	2b07      	cmp	r3, #7
 800e29e:	f240 8153 	bls.w	800e548 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e2a2:	e08f      	b.n	800e3c4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d114      	bne.n	800e2e4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2be:	69ba      	ldr	r2, [r7, #24]
 800e2c0:	8812      	ldrh	r2, [r2, #0]
 800e2c2:	b292      	uxth	r2, r2
 800e2c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ca:	1c9a      	adds	r2, r3, #2
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2e2:	e06f      	b.n	800e3c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	8bfa      	ldrh	r2, [r7, #30]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d924      	bls.n	800e33c <HAL_SPI_Receive+0x29c>
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d01f      	beq.n	800e33c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e300:	69ba      	ldr	r2, [r7, #24]
 800e302:	8812      	ldrh	r2, [r2, #0]
 800e304:	b292      	uxth	r2, r2
 800e306:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e30c:	1c9a      	adds	r2, r3, #2
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e316:	69ba      	ldr	r2, [r7, #24]
 800e318:	8812      	ldrh	r2, [r2, #0]
 800e31a:	b292      	uxth	r2, r2
 800e31c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e322:	1c9a      	adds	r2, r3, #2
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e32e:	b29b      	uxth	r3, r3
 800e330:	3b02      	subs	r3, #2
 800e332:	b29a      	uxth	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e33a:	e043      	b.n	800e3c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e342:	b29b      	uxth	r3, r3
 800e344:	2b01      	cmp	r3, #1
 800e346:	d119      	bne.n	800e37c <HAL_SPI_Receive+0x2dc>
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d014      	beq.n	800e37c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e356:	69ba      	ldr	r2, [r7, #24]
 800e358:	8812      	ldrh	r2, [r2, #0]
 800e35a:	b292      	uxth	r2, r2
 800e35c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e362:	1c9a      	adds	r2, r3, #2
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e36e:	b29b      	uxth	r3, r3
 800e370:	3b01      	subs	r3, #1
 800e372:	b29a      	uxth	r2, r3
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e37a:	e023      	b.n	800e3c4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e37c:	f7f5 fd50 	bl	8003e20 <HAL_GetTick>
 800e380:	4602      	mov	r2, r0
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d803      	bhi.n	800e394 <HAL_SPI_Receive+0x2f4>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e392:	d102      	bne.n	800e39a <HAL_SPI_Receive+0x2fa>
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d114      	bne.n	800e3c4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f000 f8f2 	bl	800e584 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	e0db      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f47f af69 	bne.w	800e2a4 <HAL_SPI_Receive+0x204>
 800e3d2:	e0c0      	b.n	800e556 <HAL_SPI_Receive+0x4b6>
 800e3d4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d117      	bne.n	800e41e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3fa:	7812      	ldrb	r2, [r2, #0]
 800e3fc:	b2d2      	uxtb	r2, r2
 800e3fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e404:	1c5a      	adds	r2, r3, #1
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e410:	b29b      	uxth	r3, r3
 800e412:	3b01      	subs	r3, #1
 800e414:	b29a      	uxth	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e41c:	e094      	b.n	800e548 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e424:	b29b      	uxth	r3, r3
 800e426:	8bfa      	ldrh	r2, [r7, #30]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d946      	bls.n	800e4ba <HAL_SPI_Receive+0x41a>
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d041      	beq.n	800e4ba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e442:	7812      	ldrb	r2, [r2, #0]
 800e444:	b2d2      	uxtb	r2, r2
 800e446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e45e:	7812      	ldrb	r2, [r2, #0]
 800e460:	b2d2      	uxtb	r2, r2
 800e462:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e47a:	7812      	ldrb	r2, [r2, #0]
 800e47c:	b2d2      	uxtb	r2, r2
 800e47e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e496:	7812      	ldrb	r2, [r2, #0]
 800e498:	b2d2      	uxtb	r2, r2
 800e49a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	3b04      	subs	r3, #4
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4b8:	e046      	b.n	800e548 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	2b03      	cmp	r3, #3
 800e4c4:	d81c      	bhi.n	800e500 <HAL_SPI_Receive+0x460>
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d017      	beq.n	800e500 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4dc:	7812      	ldrb	r2, [r2, #0]
 800e4de:	b2d2      	uxtb	r2, r2
 800e4e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4e6:	1c5a      	adds	r2, r3, #1
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4fe:	e023      	b.n	800e548 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e500:	f7f5 fc8e 	bl	8003e20 <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d803      	bhi.n	800e518 <HAL_SPI_Receive+0x478>
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e516:	d102      	bne.n	800e51e <HAL_SPI_Receive+0x47e>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d114      	bne.n	800e548 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 f830 	bl	800e584 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e52a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e544:	2303      	movs	r3, #3
 800e546:	e019      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e54e:	b29b      	uxth	r3, r3
 800e550:	2b00      	cmp	r3, #0
 800e552:	f47f af41 	bne.w	800e3d8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 f814 	bl	800e584 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2200      	movs	r2, #0
 800e568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e000      	b.n	800e57c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e57a:	2300      	movs	r3, #0
  }
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3720      	adds	r7, #32
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	699a      	ldr	r2, [r3, #24]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f042 0208 	orr.w	r2, r2, #8
 800e5a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	699a      	ldr	r2, [r3, #24]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f042 0210 	orr.w	r2, r2, #16
 800e5b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f022 0201 	bic.w	r2, r2, #1
 800e5c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6919      	ldr	r1, [r3, #16]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	4b3c      	ldr	r3, [pc, #240]	; (800e6c0 <SPI_CloseTransfer+0x13c>)
 800e5d0:	400b      	ands	r3, r1
 800e5d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	689a      	ldr	r2, [r3, #8]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e5e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b04      	cmp	r3, #4
 800e5ee:	d014      	beq.n	800e61a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f003 0320 	and.w	r3, r3, #32
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00f      	beq.n	800e61a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	699a      	ldr	r2, [r3, #24]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f042 0220 	orr.w	r2, r2, #32
 800e618:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b03      	cmp	r3, #3
 800e624:	d014      	beq.n	800e650 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00f      	beq.n	800e650 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e636:	f043 0204 	orr.w	r2, r3, #4
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	699a      	ldr	r2, [r3, #24]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e64e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00f      	beq.n	800e67a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e660:	f043 0201 	orr.w	r2, r3, #1
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	699a      	ldr	r2, [r3, #24]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e678:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00f      	beq.n	800e6a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e68a:	f043 0208 	orr.w	r2, r3, #8
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	699a      	ldr	r2, [r3, #24]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e6b4:	bf00      	nop
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	fffffc90 	.word	0xfffffc90

0800e6c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d0:	095b      	lsrs	r3, r3, #5
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	3307      	adds	r3, #7
 800e6e2:	08db      	lsrs	r3, r3, #3
 800e6e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3714      	adds	r7, #20
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b082      	sub	sp, #8
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e708:	2301      	movs	r3, #1
 800e70a:	e049      	b.n	800e7a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b00      	cmp	r3, #0
 800e716:	d106      	bne.n	800e726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7f4 feff 	bl	8003524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2202      	movs	r2, #2
 800e72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	3304      	adds	r3, #4
 800e736:	4619      	mov	r1, r3
 800e738:	4610      	mov	r0, r2
 800e73a:	f000 fe7d 	bl	800f438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d001      	beq.n	800e7c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e054      	b.n	800e86a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68da      	ldr	r2, [r3, #12]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f042 0201 	orr.w	r2, r2, #1
 800e7d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a26      	ldr	r2, [pc, #152]	; (800e878 <HAL_TIM_Base_Start_IT+0xd0>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d022      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7ea:	d01d      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a22      	ldr	r2, [pc, #136]	; (800e87c <HAL_TIM_Base_Start_IT+0xd4>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d018      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a21      	ldr	r2, [pc, #132]	; (800e880 <HAL_TIM_Base_Start_IT+0xd8>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d013      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a1f      	ldr	r2, [pc, #124]	; (800e884 <HAL_TIM_Base_Start_IT+0xdc>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d00e      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a1e      	ldr	r2, [pc, #120]	; (800e888 <HAL_TIM_Base_Start_IT+0xe0>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d009      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a1c      	ldr	r2, [pc, #112]	; (800e88c <HAL_TIM_Base_Start_IT+0xe4>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d004      	beq.n	800e828 <HAL_TIM_Base_Start_IT+0x80>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a1b      	ldr	r2, [pc, #108]	; (800e890 <HAL_TIM_Base_Start_IT+0xe8>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d115      	bne.n	800e854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	689a      	ldr	r2, [r3, #8]
 800e82e:	4b19      	ldr	r3, [pc, #100]	; (800e894 <HAL_TIM_Base_Start_IT+0xec>)
 800e830:	4013      	ands	r3, r2
 800e832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2b06      	cmp	r3, #6
 800e838:	d015      	beq.n	800e866 <HAL_TIM_Base_Start_IT+0xbe>
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e840:	d011      	beq.n	800e866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f042 0201 	orr.w	r2, r2, #1
 800e850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e852:	e008      	b.n	800e866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f042 0201 	orr.w	r2, r2, #1
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	e000      	b.n	800e868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3714      	adds	r7, #20
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	40010000 	.word	0x40010000
 800e87c:	40000400 	.word	0x40000400
 800e880:	40000800 	.word	0x40000800
 800e884:	40000c00 	.word	0x40000c00
 800e888:	40010400 	.word	0x40010400
 800e88c:	40001800 	.word	0x40001800
 800e890:	40014000 	.word	0x40014000
 800e894:	00010007 	.word	0x00010007

0800e898 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d109      	bne.n	800e8c0 <HAL_TIM_OC_Start_IT+0x28>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	bf14      	ite	ne
 800e8b8:	2301      	movne	r3, #1
 800e8ba:	2300      	moveq	r3, #0
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	e03c      	b.n	800e93a <HAL_TIM_OC_Start_IT+0xa2>
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	d109      	bne.n	800e8da <HAL_TIM_OC_Start_IT+0x42>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	bf14      	ite	ne
 800e8d2:	2301      	movne	r3, #1
 800e8d4:	2300      	moveq	r3, #0
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	e02f      	b.n	800e93a <HAL_TIM_OC_Start_IT+0xa2>
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	d109      	bne.n	800e8f4 <HAL_TIM_OC_Start_IT+0x5c>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	bf14      	ite	ne
 800e8ec:	2301      	movne	r3, #1
 800e8ee:	2300      	moveq	r3, #0
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	e022      	b.n	800e93a <HAL_TIM_OC_Start_IT+0xa2>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b0c      	cmp	r3, #12
 800e8f8:	d109      	bne.n	800e90e <HAL_TIM_OC_Start_IT+0x76>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e900:	b2db      	uxtb	r3, r3
 800e902:	2b01      	cmp	r3, #1
 800e904:	bf14      	ite	ne
 800e906:	2301      	movne	r3, #1
 800e908:	2300      	moveq	r3, #0
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	e015      	b.n	800e93a <HAL_TIM_OC_Start_IT+0xa2>
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2b10      	cmp	r3, #16
 800e912:	d109      	bne.n	800e928 <HAL_TIM_OC_Start_IT+0x90>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	bf14      	ite	ne
 800e920:	2301      	movne	r3, #1
 800e922:	2300      	moveq	r3, #0
 800e924:	b2db      	uxtb	r3, r3
 800e926:	e008      	b.n	800e93a <HAL_TIM_OC_Start_IT+0xa2>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b01      	cmp	r3, #1
 800e932:	bf14      	ite	ne
 800e934:	2301      	movne	r3, #1
 800e936:	2300      	moveq	r3, #0
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	e0ec      	b.n	800eb1c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d104      	bne.n	800e952 <HAL_TIM_OC_Start_IT+0xba>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2202      	movs	r2, #2
 800e94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e950:	e023      	b.n	800e99a <HAL_TIM_OC_Start_IT+0x102>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b04      	cmp	r3, #4
 800e956:	d104      	bne.n	800e962 <HAL_TIM_OC_Start_IT+0xca>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2202      	movs	r2, #2
 800e95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e960:	e01b      	b.n	800e99a <HAL_TIM_OC_Start_IT+0x102>
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2b08      	cmp	r3, #8
 800e966:	d104      	bne.n	800e972 <HAL_TIM_OC_Start_IT+0xda>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2202      	movs	r2, #2
 800e96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e970:	e013      	b.n	800e99a <HAL_TIM_OC_Start_IT+0x102>
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b0c      	cmp	r3, #12
 800e976:	d104      	bne.n	800e982 <HAL_TIM_OC_Start_IT+0xea>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2202      	movs	r2, #2
 800e97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e980:	e00b      	b.n	800e99a <HAL_TIM_OC_Start_IT+0x102>
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	2b10      	cmp	r3, #16
 800e986:	d104      	bne.n	800e992 <HAL_TIM_OC_Start_IT+0xfa>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2202      	movs	r2, #2
 800e98c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e990:	e003      	b.n	800e99a <HAL_TIM_OC_Start_IT+0x102>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2202      	movs	r2, #2
 800e996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b0c      	cmp	r3, #12
 800e99e:	d841      	bhi.n	800ea24 <HAL_TIM_OC_Start_IT+0x18c>
 800e9a0:	a201      	add	r2, pc, #4	; (adr r2, 800e9a8 <HAL_TIM_OC_Start_IT+0x110>)
 800e9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a6:	bf00      	nop
 800e9a8:	0800e9dd 	.word	0x0800e9dd
 800e9ac:	0800ea25 	.word	0x0800ea25
 800e9b0:	0800ea25 	.word	0x0800ea25
 800e9b4:	0800ea25 	.word	0x0800ea25
 800e9b8:	0800e9ef 	.word	0x0800e9ef
 800e9bc:	0800ea25 	.word	0x0800ea25
 800e9c0:	0800ea25 	.word	0x0800ea25
 800e9c4:	0800ea25 	.word	0x0800ea25
 800e9c8:	0800ea01 	.word	0x0800ea01
 800e9cc:	0800ea25 	.word	0x0800ea25
 800e9d0:	0800ea25 	.word	0x0800ea25
 800e9d4:	0800ea25 	.word	0x0800ea25
 800e9d8:	0800ea13 	.word	0x0800ea13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0202 	orr.w	r2, r2, #2
 800e9ea:	60da      	str	r2, [r3, #12]
      break;
 800e9ec:	e01d      	b.n	800ea2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	68da      	ldr	r2, [r3, #12]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f042 0204 	orr.w	r2, r2, #4
 800e9fc:	60da      	str	r2, [r3, #12]
      break;
 800e9fe:	e014      	b.n	800ea2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68da      	ldr	r2, [r3, #12]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f042 0208 	orr.w	r2, r2, #8
 800ea0e:	60da      	str	r2, [r3, #12]
      break;
 800ea10:	e00b      	b.n	800ea2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68da      	ldr	r2, [r3, #12]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f042 0210 	orr.w	r2, r2, #16
 800ea20:	60da      	str	r2, [r3, #12]
      break;
 800ea22:	e002      	b.n	800ea2a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ea24:	2301      	movs	r3, #1
 800ea26:	73fb      	strb	r3, [r7, #15]
      break;
 800ea28:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea2a:	7bfb      	ldrb	r3, [r7, #15]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d174      	bne.n	800eb1a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2201      	movs	r2, #1
 800ea36:	6839      	ldr	r1, [r7, #0]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f001 f917 	bl	800fc6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a38      	ldr	r2, [pc, #224]	; (800eb24 <HAL_TIM_OC_Start_IT+0x28c>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d013      	beq.n	800ea70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4a36      	ldr	r2, [pc, #216]	; (800eb28 <HAL_TIM_OC_Start_IT+0x290>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d00e      	beq.n	800ea70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a35      	ldr	r2, [pc, #212]	; (800eb2c <HAL_TIM_OC_Start_IT+0x294>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d009      	beq.n	800ea70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a33      	ldr	r2, [pc, #204]	; (800eb30 <HAL_TIM_OC_Start_IT+0x298>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d004      	beq.n	800ea70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a32      	ldr	r2, [pc, #200]	; (800eb34 <HAL_TIM_OC_Start_IT+0x29c>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d101      	bne.n	800ea74 <HAL_TIM_OC_Start_IT+0x1dc>
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <HAL_TIM_OC_Start_IT+0x1de>
 800ea74:	2300      	movs	r3, #0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d007      	beq.n	800ea8a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a25      	ldr	r2, [pc, #148]	; (800eb24 <HAL_TIM_OC_Start_IT+0x28c>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d022      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea9c:	d01d      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a25      	ldr	r2, [pc, #148]	; (800eb38 <HAL_TIM_OC_Start_IT+0x2a0>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d018      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a23      	ldr	r2, [pc, #140]	; (800eb3c <HAL_TIM_OC_Start_IT+0x2a4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d013      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a22      	ldr	r2, [pc, #136]	; (800eb40 <HAL_TIM_OC_Start_IT+0x2a8>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d00e      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a19      	ldr	r2, [pc, #100]	; (800eb28 <HAL_TIM_OC_Start_IT+0x290>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d009      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a1e      	ldr	r2, [pc, #120]	; (800eb44 <HAL_TIM_OC_Start_IT+0x2ac>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d004      	beq.n	800eada <HAL_TIM_OC_Start_IT+0x242>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a15      	ldr	r2, [pc, #84]	; (800eb2c <HAL_TIM_OC_Start_IT+0x294>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d115      	bne.n	800eb06 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	689a      	ldr	r2, [r3, #8]
 800eae0:	4b19      	ldr	r3, [pc, #100]	; (800eb48 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eae2:	4013      	ands	r3, r2
 800eae4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b06      	cmp	r3, #6
 800eaea:	d015      	beq.n	800eb18 <HAL_TIM_OC_Start_IT+0x280>
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf2:	d011      	beq.n	800eb18 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f042 0201 	orr.w	r2, r2, #1
 800eb02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb04:	e008      	b.n	800eb18 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f042 0201 	orr.w	r2, r2, #1
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	e000      	b.n	800eb1a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	40010000 	.word	0x40010000
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40014000 	.word	0x40014000
 800eb30:	40014400 	.word	0x40014400
 800eb34:	40014800 	.word	0x40014800
 800eb38:	40000400 	.word	0x40000400
 800eb3c:	40000800 	.word	0x40000800
 800eb40:	40000c00 	.word	0x40000c00
 800eb44:	40001800 	.word	0x40001800
 800eb48:	00010007 	.word	0x00010007

0800eb4c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb56:	2300      	movs	r3, #0
 800eb58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	2b0c      	cmp	r3, #12
 800eb5e:	d841      	bhi.n	800ebe4 <HAL_TIM_OC_Stop_IT+0x98>
 800eb60:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <HAL_TIM_OC_Stop_IT+0x1c>)
 800eb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb66:	bf00      	nop
 800eb68:	0800eb9d 	.word	0x0800eb9d
 800eb6c:	0800ebe5 	.word	0x0800ebe5
 800eb70:	0800ebe5 	.word	0x0800ebe5
 800eb74:	0800ebe5 	.word	0x0800ebe5
 800eb78:	0800ebaf 	.word	0x0800ebaf
 800eb7c:	0800ebe5 	.word	0x0800ebe5
 800eb80:	0800ebe5 	.word	0x0800ebe5
 800eb84:	0800ebe5 	.word	0x0800ebe5
 800eb88:	0800ebc1 	.word	0x0800ebc1
 800eb8c:	0800ebe5 	.word	0x0800ebe5
 800eb90:	0800ebe5 	.word	0x0800ebe5
 800eb94:	0800ebe5 	.word	0x0800ebe5
 800eb98:	0800ebd3 	.word	0x0800ebd3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f022 0202 	bic.w	r2, r2, #2
 800ebaa:	60da      	str	r2, [r3, #12]
      break;
 800ebac:	e01d      	b.n	800ebea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68da      	ldr	r2, [r3, #12]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f022 0204 	bic.w	r2, r2, #4
 800ebbc:	60da      	str	r2, [r3, #12]
      break;
 800ebbe:	e014      	b.n	800ebea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f022 0208 	bic.w	r2, r2, #8
 800ebce:	60da      	str	r2, [r3, #12]
      break;
 800ebd0:	e00b      	b.n	800ebea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68da      	ldr	r2, [r3, #12]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f022 0210 	bic.w	r2, r2, #16
 800ebe0:	60da      	str	r2, [r3, #12]
      break;
 800ebe2:	e002      	b.n	800ebea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebe8:	bf00      	nop
  }

  if (status == HAL_OK)
 800ebea:	7bfb      	ldrb	r3, [r7, #15]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f040 8081 	bne.w	800ecf4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	6839      	ldr	r1, [r7, #0]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f001 f836 	bl	800fc6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a3e      	ldr	r2, [pc, #248]	; (800ed00 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d013      	beq.n	800ec32 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a3d      	ldr	r2, [pc, #244]	; (800ed04 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d00e      	beq.n	800ec32 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a3b      	ldr	r2, [pc, #236]	; (800ed08 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d009      	beq.n	800ec32 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4a3a      	ldr	r2, [pc, #232]	; (800ed0c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d004      	beq.n	800ec32 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a38      	ldr	r2, [pc, #224]	; (800ed10 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d101      	bne.n	800ec36 <HAL_TIM_OC_Stop_IT+0xea>
 800ec32:	2301      	movs	r3, #1
 800ec34:	e000      	b.n	800ec38 <HAL_TIM_OC_Stop_IT+0xec>
 800ec36:	2300      	movs	r3, #0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d017      	beq.n	800ec6c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6a1a      	ldr	r2, [r3, #32]
 800ec42:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec46:	4013      	ands	r3, r2
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10f      	bne.n	800ec6c <HAL_TIM_OC_Stop_IT+0x120>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6a1a      	ldr	r2, [r3, #32]
 800ec52:	f240 4344 	movw	r3, #1092	; 0x444
 800ec56:	4013      	ands	r3, r2
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d107      	bne.n	800ec6c <HAL_TIM_OC_Stop_IT+0x120>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6a1a      	ldr	r2, [r3, #32]
 800ec72:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec76:	4013      	ands	r3, r2
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10f      	bne.n	800ec9c <HAL_TIM_OC_Stop_IT+0x150>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6a1a      	ldr	r2, [r3, #32]
 800ec82:	f240 4344 	movw	r3, #1092	; 0x444
 800ec86:	4013      	ands	r3, r2
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d107      	bne.n	800ec9c <HAL_TIM_OC_Stop_IT+0x150>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f022 0201 	bic.w	r2, r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d104      	bne.n	800ecac <HAL_TIM_OC_Stop_IT+0x160>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecaa:	e023      	b.n	800ecf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b04      	cmp	r3, #4
 800ecb0:	d104      	bne.n	800ecbc <HAL_TIM_OC_Stop_IT+0x170>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecba:	e01b      	b.n	800ecf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2b08      	cmp	r3, #8
 800ecc0:	d104      	bne.n	800eccc <HAL_TIM_OC_Stop_IT+0x180>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecca:	e013      	b.n	800ecf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	2b0c      	cmp	r3, #12
 800ecd0:	d104      	bne.n	800ecdc <HAL_TIM_OC_Stop_IT+0x190>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecda:	e00b      	b.n	800ecf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b10      	cmp	r3, #16
 800ece0:	d104      	bne.n	800ecec <HAL_TIM_OC_Stop_IT+0x1a0>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2201      	movs	r2, #1
 800ece6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecea:	e003      	b.n	800ecf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	40010000 	.word	0x40010000
 800ed04:	40010400 	.word	0x40010400
 800ed08:	40014000 	.word	0x40014000
 800ed0c:	40014400 	.word	0x40014400
 800ed10:	40014800 	.word	0x40014800

0800ed14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d101      	bne.n	800ed26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
 800ed24:	e049      	b.n	800edba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f841 	bl	800edc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2202      	movs	r2, #2
 800ed44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f000 fb70 	bl	800f438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800edc2:	b480      	push	{r7}
 800edc4:	b083      	sub	sp, #12
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800edca:	bf00      	nop
 800edcc:	370c      	adds	r7, #12
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d020      	beq.n	800ee3a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f003 0302 	and.w	r3, r3, #2
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d01b      	beq.n	800ee3a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f06f 0202 	mvn.w	r2, #2
 800ee0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	699b      	ldr	r3, [r3, #24]
 800ee18:	f003 0303 	and.w	r3, r3, #3
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f000 faeb 	bl	800f3fc <HAL_TIM_IC_CaptureCallback>
 800ee26:	e005      	b.n	800ee34 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7f1 fbe9 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 faee 	bl	800f410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d020      	beq.n	800ee86 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f003 0304 	and.w	r3, r3, #4
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d01b      	beq.n	800ee86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f06f 0204 	mvn.w	r2, #4
 800ee56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d003      	beq.n	800ee74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 fac5 	bl	800f3fc <HAL_TIM_IC_CaptureCallback>
 800ee72:	e005      	b.n	800ee80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f7f1 fbc3 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fac8 	bl	800f410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	f003 0308 	and.w	r3, r3, #8
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d020      	beq.n	800eed2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f003 0308 	and.w	r3, r3, #8
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d01b      	beq.n	800eed2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f06f 0208 	mvn.w	r2, #8
 800eea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2204      	movs	r2, #4
 800eea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	69db      	ldr	r3, [r3, #28]
 800eeb0:	f003 0303 	and.w	r3, r3, #3
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d003      	beq.n	800eec0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 fa9f 	bl	800f3fc <HAL_TIM_IC_CaptureCallback>
 800eebe:	e005      	b.n	800eecc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7f1 fb9d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 faa2 	bl	800f410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	f003 0310 	and.w	r3, r3, #16
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d020      	beq.n	800ef1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f003 0310 	and.w	r3, r3, #16
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d01b      	beq.n	800ef1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f06f 0210 	mvn.w	r2, #16
 800eeee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2208      	movs	r2, #8
 800eef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	69db      	ldr	r3, [r3, #28]
 800eefc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d003      	beq.n	800ef0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 fa79 	bl	800f3fc <HAL_TIM_IC_CaptureCallback>
 800ef0a:	e005      	b.n	800ef18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f7f1 fb77 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fa7c 	bl	800f410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00c      	beq.n	800ef42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d007      	beq.n	800ef42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f06f 0201 	mvn.w	r2, #1
 800ef3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7f3 ffcb 	bl	8002ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d104      	bne.n	800ef56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00c      	beq.n	800ef70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d007      	beq.n	800ef70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ef68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 ffba 	bl	800fee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00c      	beq.n	800ef94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d007      	beq.n	800ef94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 ffb2 	bl	800fef8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00c      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d007      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fa36 	bl	800f424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	f003 0320 	and.w	r3, r3, #32
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00c      	beq.n	800efdc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f003 0320 	and.w	r3, r3, #32
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f06f 0220 	mvn.w	r2, #32
 800efd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 ff7a 	bl	800fed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800efdc:	bf00      	nop
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800effa:	2b01      	cmp	r3, #1
 800effc:	d101      	bne.n	800f002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800effe:	2302      	movs	r3, #2
 800f000:	e0ff      	b.n	800f202 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2201      	movs	r2, #1
 800f006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b14      	cmp	r3, #20
 800f00e:	f200 80f0 	bhi.w	800f1f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f012:	a201      	add	r2, pc, #4	; (adr r2, 800f018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f018:	0800f06d 	.word	0x0800f06d
 800f01c:	0800f1f3 	.word	0x0800f1f3
 800f020:	0800f1f3 	.word	0x0800f1f3
 800f024:	0800f1f3 	.word	0x0800f1f3
 800f028:	0800f0ad 	.word	0x0800f0ad
 800f02c:	0800f1f3 	.word	0x0800f1f3
 800f030:	0800f1f3 	.word	0x0800f1f3
 800f034:	0800f1f3 	.word	0x0800f1f3
 800f038:	0800f0ef 	.word	0x0800f0ef
 800f03c:	0800f1f3 	.word	0x0800f1f3
 800f040:	0800f1f3 	.word	0x0800f1f3
 800f044:	0800f1f3 	.word	0x0800f1f3
 800f048:	0800f12f 	.word	0x0800f12f
 800f04c:	0800f1f3 	.word	0x0800f1f3
 800f050:	0800f1f3 	.word	0x0800f1f3
 800f054:	0800f1f3 	.word	0x0800f1f3
 800f058:	0800f171 	.word	0x0800f171
 800f05c:	0800f1f3 	.word	0x0800f1f3
 800f060:	0800f1f3 	.word	0x0800f1f3
 800f064:	0800f1f3 	.word	0x0800f1f3
 800f068:	0800f1b1 	.word	0x0800f1b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68b9      	ldr	r1, [r7, #8]
 800f072:	4618      	mov	r0, r3
 800f074:	f000 fa86 	bl	800f584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	699a      	ldr	r2, [r3, #24]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f042 0208 	orr.w	r2, r2, #8
 800f086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	699a      	ldr	r2, [r3, #24]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 0204 	bic.w	r2, r2, #4
 800f096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	6999      	ldr	r1, [r3, #24]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	691a      	ldr	r2, [r3, #16]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	430a      	orrs	r2, r1
 800f0a8:	619a      	str	r2, [r3, #24]
      break;
 800f0aa:	e0a5      	b.n	800f1f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 faf6 	bl	800f6a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	699a      	ldr	r2, [r3, #24]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	699a      	ldr	r2, [r3, #24]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	6999      	ldr	r1, [r3, #24]
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	691b      	ldr	r3, [r3, #16]
 800f0e2:	021a      	lsls	r2, r3, #8
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	430a      	orrs	r2, r1
 800f0ea:	619a      	str	r2, [r3, #24]
      break;
 800f0ec:	e084      	b.n	800f1f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	68b9      	ldr	r1, [r7, #8]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 fb5f 	bl	800f7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	69da      	ldr	r2, [r3, #28]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f042 0208 	orr.w	r2, r2, #8
 800f108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	69da      	ldr	r2, [r3, #28]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f022 0204 	bic.w	r2, r2, #4
 800f118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	69d9      	ldr	r1, [r3, #28]
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	691a      	ldr	r2, [r3, #16]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	430a      	orrs	r2, r1
 800f12a:	61da      	str	r2, [r3, #28]
      break;
 800f12c:	e064      	b.n	800f1f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	4618      	mov	r0, r3
 800f136:	f000 fbc7 	bl	800f8c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	69da      	ldr	r2, [r3, #28]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	69da      	ldr	r2, [r3, #28]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	69d9      	ldr	r1, [r3, #28]
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	021a      	lsls	r2, r3, #8
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	430a      	orrs	r2, r1
 800f16c:	61da      	str	r2, [r3, #28]
      break;
 800f16e:	e043      	b.n	800f1f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68b9      	ldr	r1, [r7, #8]
 800f176:	4618      	mov	r0, r3
 800f178:	f000 fc10 	bl	800f99c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f042 0208 	orr.w	r2, r2, #8
 800f18a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f022 0204 	bic.w	r2, r2, #4
 800f19a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	691a      	ldr	r2, [r3, #16]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f1ae:	e023      	b.n	800f1f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	68b9      	ldr	r1, [r7, #8]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f000 fc54 	bl	800fa64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	021a      	lsls	r2, r3, #8
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	430a      	orrs	r2, r1
 800f1ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f1f0:	e002      	b.n	800f1f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f1f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f200:	7dfb      	ldrb	r3, [r7, #23]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop

0800f20c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f216:	2300      	movs	r3, #0
 800f218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <HAL_TIM_ConfigClockSource+0x1c>
 800f224:	2302      	movs	r3, #2
 800f226:	e0dc      	b.n	800f3e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2202      	movs	r2, #2
 800f234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	4b6a      	ldr	r3, [pc, #424]	; (800f3ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800f244:	4013      	ands	r3, r2
 800f246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f24e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a64      	ldr	r2, [pc, #400]	; (800f3f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	f000 80a9 	beq.w	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f264:	4a62      	ldr	r2, [pc, #392]	; (800f3f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f266:	4293      	cmp	r3, r2
 800f268:	f200 80ae 	bhi.w	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f26c:	4a61      	ldr	r2, [pc, #388]	; (800f3f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	f000 80a1 	beq.w	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f274:	4a5f      	ldr	r2, [pc, #380]	; (800f3f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f276:	4293      	cmp	r3, r2
 800f278:	f200 80a6 	bhi.w	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f27c:	4a5e      	ldr	r2, [pc, #376]	; (800f3f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	f000 8099 	beq.w	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f284:	4a5c      	ldr	r2, [pc, #368]	; (800f3f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f286:	4293      	cmp	r3, r2
 800f288:	f200 809e 	bhi.w	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f28c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f290:	f000 8091 	beq.w	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f298:	f200 8096 	bhi.w	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f29c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2a0:	f000 8089 	beq.w	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2a8:	f200 808e 	bhi.w	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2b0:	d03e      	beq.n	800f330 <HAL_TIM_ConfigClockSource+0x124>
 800f2b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2b6:	f200 8087 	bhi.w	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2be:	f000 8086 	beq.w	800f3ce <HAL_TIM_ConfigClockSource+0x1c2>
 800f2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2c6:	d87f      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2c8:	2b70      	cmp	r3, #112	; 0x70
 800f2ca:	d01a      	beq.n	800f302 <HAL_TIM_ConfigClockSource+0xf6>
 800f2cc:	2b70      	cmp	r3, #112	; 0x70
 800f2ce:	d87b      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2d0:	2b60      	cmp	r3, #96	; 0x60
 800f2d2:	d050      	beq.n	800f376 <HAL_TIM_ConfigClockSource+0x16a>
 800f2d4:	2b60      	cmp	r3, #96	; 0x60
 800f2d6:	d877      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2d8:	2b50      	cmp	r3, #80	; 0x50
 800f2da:	d03c      	beq.n	800f356 <HAL_TIM_ConfigClockSource+0x14a>
 800f2dc:	2b50      	cmp	r3, #80	; 0x50
 800f2de:	d873      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2e0:	2b40      	cmp	r3, #64	; 0x40
 800f2e2:	d058      	beq.n	800f396 <HAL_TIM_ConfigClockSource+0x18a>
 800f2e4:	2b40      	cmp	r3, #64	; 0x40
 800f2e6:	d86f      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2e8:	2b30      	cmp	r3, #48	; 0x30
 800f2ea:	d064      	beq.n	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2ec:	2b30      	cmp	r3, #48	; 0x30
 800f2ee:	d86b      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2f0:	2b20      	cmp	r3, #32
 800f2f2:	d060      	beq.n	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	d867      	bhi.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d05c      	beq.n	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2fc:	2b10      	cmp	r3, #16
 800f2fe:	d05a      	beq.n	800f3b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f300:	e062      	b.n	800f3c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6818      	ldr	r0, [r3, #0]
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	6899      	ldr	r1, [r3, #8]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	f000 fc8b 	bl	800fc2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	609a      	str	r2, [r3, #8]
      break;
 800f32e:	e04f      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6818      	ldr	r0, [r3, #0]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	6899      	ldr	r1, [r3, #8]
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	685a      	ldr	r2, [r3, #4]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	f000 fc74 	bl	800fc2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689a      	ldr	r2, [r3, #8]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f352:	609a      	str	r2, [r3, #8]
      break;
 800f354:	e03c      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	6859      	ldr	r1, [r3, #4]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	461a      	mov	r2, r3
 800f364:	f000 fbe4 	bl	800fb30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2150      	movs	r1, #80	; 0x50
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 fc3e 	bl	800fbf0 <TIM_ITRx_SetConfig>
      break;
 800f374:	e02c      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6818      	ldr	r0, [r3, #0]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	6859      	ldr	r1, [r3, #4]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	461a      	mov	r2, r3
 800f384:	f000 fc03 	bl	800fb8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2160      	movs	r1, #96	; 0x60
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 fc2e 	bl	800fbf0 <TIM_ITRx_SetConfig>
      break;
 800f394:	e01c      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	6859      	ldr	r1, [r3, #4]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f000 fbc4 	bl	800fb30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2140      	movs	r1, #64	; 0x40
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fc1e 	bl	800fbf0 <TIM_ITRx_SetConfig>
      break;
 800f3b4:	e00c      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	f000 fc15 	bl	800fbf0 <TIM_ITRx_SetConfig>
      break;
 800f3c6:	e003      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f3cc:	e000      	b.n	800f3d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f3ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	ffceff88 	.word	0xffceff88
 800f3f0:	00100040 	.word	0x00100040
 800f3f4:	00100030 	.word	0x00100030
 800f3f8:	00100020 	.word	0x00100020

0800f3fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f418:	bf00      	nop
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a46      	ldr	r2, [pc, #280]	; (800f564 <TIM_Base_SetConfig+0x12c>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d013      	beq.n	800f478 <TIM_Base_SetConfig+0x40>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f456:	d00f      	beq.n	800f478 <TIM_Base_SetConfig+0x40>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a43      	ldr	r2, [pc, #268]	; (800f568 <TIM_Base_SetConfig+0x130>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d00b      	beq.n	800f478 <TIM_Base_SetConfig+0x40>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4a42      	ldr	r2, [pc, #264]	; (800f56c <TIM_Base_SetConfig+0x134>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d007      	beq.n	800f478 <TIM_Base_SetConfig+0x40>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a41      	ldr	r2, [pc, #260]	; (800f570 <TIM_Base_SetConfig+0x138>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d003      	beq.n	800f478 <TIM_Base_SetConfig+0x40>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4a40      	ldr	r2, [pc, #256]	; (800f574 <TIM_Base_SetConfig+0x13c>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d108      	bne.n	800f48a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f47e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	4313      	orrs	r3, r2
 800f488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a35      	ldr	r2, [pc, #212]	; (800f564 <TIM_Base_SetConfig+0x12c>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d01f      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f498:	d01b      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a32      	ldr	r2, [pc, #200]	; (800f568 <TIM_Base_SetConfig+0x130>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d017      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a31      	ldr	r2, [pc, #196]	; (800f56c <TIM_Base_SetConfig+0x134>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d013      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a30      	ldr	r2, [pc, #192]	; (800f570 <TIM_Base_SetConfig+0x138>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d00f      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a2f      	ldr	r2, [pc, #188]	; (800f574 <TIM_Base_SetConfig+0x13c>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d00b      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a2e      	ldr	r2, [pc, #184]	; (800f578 <TIM_Base_SetConfig+0x140>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d007      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a2d      	ldr	r2, [pc, #180]	; (800f57c <TIM_Base_SetConfig+0x144>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d003      	beq.n	800f4d2 <TIM_Base_SetConfig+0x9a>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a2c      	ldr	r2, [pc, #176]	; (800f580 <TIM_Base_SetConfig+0x148>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d108      	bne.n	800f4e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	695b      	ldr	r3, [r3, #20]
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	68fa      	ldr	r2, [r7, #12]
 800f4f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	689a      	ldr	r2, [r3, #8]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a16      	ldr	r2, [pc, #88]	; (800f564 <TIM_Base_SetConfig+0x12c>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d00f      	beq.n	800f530 <TIM_Base_SetConfig+0xf8>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a18      	ldr	r2, [pc, #96]	; (800f574 <TIM_Base_SetConfig+0x13c>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d00b      	beq.n	800f530 <TIM_Base_SetConfig+0xf8>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a17      	ldr	r2, [pc, #92]	; (800f578 <TIM_Base_SetConfig+0x140>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d007      	beq.n	800f530 <TIM_Base_SetConfig+0xf8>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a16      	ldr	r2, [pc, #88]	; (800f57c <TIM_Base_SetConfig+0x144>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d003      	beq.n	800f530 <TIM_Base_SetConfig+0xf8>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a15      	ldr	r2, [pc, #84]	; (800f580 <TIM_Base_SetConfig+0x148>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d103      	bne.n	800f538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	691a      	ldr	r2, [r3, #16]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	2b01      	cmp	r3, #1
 800f548:	d105      	bne.n	800f556 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	f023 0201 	bic.w	r2, r3, #1
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	611a      	str	r2, [r3, #16]
  }
}
 800f556:	bf00      	nop
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	40010000 	.word	0x40010000
 800f568:	40000400 	.word	0x40000400
 800f56c:	40000800 	.word	0x40000800
 800f570:	40000c00 	.word	0x40000c00
 800f574:	40010400 	.word	0x40010400
 800f578:	40014000 	.word	0x40014000
 800f57c:	40014400 	.word	0x40014400
 800f580:	40014800 	.word	0x40014800

0800f584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f584:	b480      	push	{r7}
 800f586:	b087      	sub	sp, #28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a1b      	ldr	r3, [r3, #32]
 800f592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a1b      	ldr	r3, [r3, #32]
 800f598:	f023 0201 	bic.w	r2, r3, #1
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	699b      	ldr	r3, [r3, #24]
 800f5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	4b37      	ldr	r3, [pc, #220]	; (800f68c <TIM_OC1_SetConfig+0x108>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f023 0303 	bic.w	r3, r3, #3
 800f5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	f023 0302 	bic.w	r3, r3, #2
 800f5cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a2d      	ldr	r2, [pc, #180]	; (800f690 <TIM_OC1_SetConfig+0x10c>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d00f      	beq.n	800f600 <TIM_OC1_SetConfig+0x7c>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a2c      	ldr	r2, [pc, #176]	; (800f694 <TIM_OC1_SetConfig+0x110>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d00b      	beq.n	800f600 <TIM_OC1_SetConfig+0x7c>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	4a2b      	ldr	r2, [pc, #172]	; (800f698 <TIM_OC1_SetConfig+0x114>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d007      	beq.n	800f600 <TIM_OC1_SetConfig+0x7c>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4a2a      	ldr	r2, [pc, #168]	; (800f69c <TIM_OC1_SetConfig+0x118>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d003      	beq.n	800f600 <TIM_OC1_SetConfig+0x7c>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a29      	ldr	r2, [pc, #164]	; (800f6a0 <TIM_OC1_SetConfig+0x11c>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d10c      	bne.n	800f61a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	f023 0308 	bic.w	r3, r3, #8
 800f606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	697a      	ldr	r2, [r7, #20]
 800f60e:	4313      	orrs	r3, r2
 800f610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	f023 0304 	bic.w	r3, r3, #4
 800f618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a1c      	ldr	r2, [pc, #112]	; (800f690 <TIM_OC1_SetConfig+0x10c>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d00f      	beq.n	800f642 <TIM_OC1_SetConfig+0xbe>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a1b      	ldr	r2, [pc, #108]	; (800f694 <TIM_OC1_SetConfig+0x110>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d00b      	beq.n	800f642 <TIM_OC1_SetConfig+0xbe>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a1a      	ldr	r2, [pc, #104]	; (800f698 <TIM_OC1_SetConfig+0x114>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d007      	beq.n	800f642 <TIM_OC1_SetConfig+0xbe>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a19      	ldr	r2, [pc, #100]	; (800f69c <TIM_OC1_SetConfig+0x118>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d003      	beq.n	800f642 <TIM_OC1_SetConfig+0xbe>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a18      	ldr	r2, [pc, #96]	; (800f6a0 <TIM_OC1_SetConfig+0x11c>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d111      	bne.n	800f666 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	4313      	orrs	r3, r2
 800f65a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	4313      	orrs	r3, r2
 800f664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	693a      	ldr	r2, [r7, #16]
 800f66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	621a      	str	r2, [r3, #32]
}
 800f680:	bf00      	nop
 800f682:	371c      	adds	r7, #28
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	fffeff8f 	.word	0xfffeff8f
 800f690:	40010000 	.word	0x40010000
 800f694:	40010400 	.word	0x40010400
 800f698:	40014000 	.word	0x40014000
 800f69c:	40014400 	.word	0x40014400
 800f6a0:	40014800 	.word	0x40014800

0800f6a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6a1b      	ldr	r3, [r3, #32]
 800f6b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a1b      	ldr	r3, [r3, #32]
 800f6b8:	f023 0210 	bic.w	r2, r3, #16
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4b34      	ldr	r3, [pc, #208]	; (800f7a0 <TIM_OC2_SetConfig+0xfc>)
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	021b      	lsls	r3, r3, #8
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	f023 0320 	bic.w	r3, r3, #32
 800f6ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	011b      	lsls	r3, r3, #4
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a29      	ldr	r2, [pc, #164]	; (800f7a4 <TIM_OC2_SetConfig+0x100>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d003      	beq.n	800f70c <TIM_OC2_SetConfig+0x68>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a28      	ldr	r2, [pc, #160]	; (800f7a8 <TIM_OC2_SetConfig+0x104>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d10d      	bne.n	800f728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	011b      	lsls	r3, r3, #4
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a1e      	ldr	r2, [pc, #120]	; (800f7a4 <TIM_OC2_SetConfig+0x100>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d00f      	beq.n	800f750 <TIM_OC2_SetConfig+0xac>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a1d      	ldr	r2, [pc, #116]	; (800f7a8 <TIM_OC2_SetConfig+0x104>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d00b      	beq.n	800f750 <TIM_OC2_SetConfig+0xac>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a1c      	ldr	r2, [pc, #112]	; (800f7ac <TIM_OC2_SetConfig+0x108>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d007      	beq.n	800f750 <TIM_OC2_SetConfig+0xac>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a1b      	ldr	r2, [pc, #108]	; (800f7b0 <TIM_OC2_SetConfig+0x10c>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d003      	beq.n	800f750 <TIM_OC2_SetConfig+0xac>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a1a      	ldr	r2, [pc, #104]	; (800f7b4 <TIM_OC2_SetConfig+0x110>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d113      	bne.n	800f778 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f75e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	695b      	ldr	r3, [r3, #20]
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	693a      	ldr	r2, [r7, #16]
 800f768:	4313      	orrs	r3, r2
 800f76a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	4313      	orrs	r3, r2
 800f776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	621a      	str	r2, [r3, #32]
}
 800f792:	bf00      	nop
 800f794:	371c      	adds	r7, #28
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	feff8fff 	.word	0xfeff8fff
 800f7a4:	40010000 	.word	0x40010000
 800f7a8:	40010400 	.word	0x40010400
 800f7ac:	40014000 	.word	0x40014000
 800f7b0:	40014400 	.word	0x40014400
 800f7b4:	40014800 	.word	0x40014800

0800f7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b087      	sub	sp, #28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6a1b      	ldr	r3, [r3, #32]
 800f7c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a1b      	ldr	r3, [r3, #32]
 800f7cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	69db      	ldr	r3, [r3, #28]
 800f7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	4b33      	ldr	r3, [pc, #204]	; (800f8b0 <TIM_OC3_SetConfig+0xf8>)
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f023 0303 	bic.w	r3, r3, #3
 800f7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	021b      	lsls	r3, r3, #8
 800f808:	697a      	ldr	r2, [r7, #20]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a28      	ldr	r2, [pc, #160]	; (800f8b4 <TIM_OC3_SetConfig+0xfc>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d003      	beq.n	800f81e <TIM_OC3_SetConfig+0x66>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a27      	ldr	r2, [pc, #156]	; (800f8b8 <TIM_OC3_SetConfig+0x100>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d10d      	bne.n	800f83a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	021b      	lsls	r3, r3, #8
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	4313      	orrs	r3, r2
 800f830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a1d      	ldr	r2, [pc, #116]	; (800f8b4 <TIM_OC3_SetConfig+0xfc>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d00f      	beq.n	800f862 <TIM_OC3_SetConfig+0xaa>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a1c      	ldr	r2, [pc, #112]	; (800f8b8 <TIM_OC3_SetConfig+0x100>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d00b      	beq.n	800f862 <TIM_OC3_SetConfig+0xaa>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a1b      	ldr	r2, [pc, #108]	; (800f8bc <TIM_OC3_SetConfig+0x104>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d007      	beq.n	800f862 <TIM_OC3_SetConfig+0xaa>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4a1a      	ldr	r2, [pc, #104]	; (800f8c0 <TIM_OC3_SetConfig+0x108>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d003      	beq.n	800f862 <TIM_OC3_SetConfig+0xaa>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4a19      	ldr	r2, [pc, #100]	; (800f8c4 <TIM_OC3_SetConfig+0x10c>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d113      	bne.n	800f88a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	695b      	ldr	r3, [r3, #20]
 800f876:	011b      	lsls	r3, r3, #4
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	4313      	orrs	r3, r2
 800f87c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	699b      	ldr	r3, [r3, #24]
 800f882:	011b      	lsls	r3, r3, #4
 800f884:	693a      	ldr	r2, [r7, #16]
 800f886:	4313      	orrs	r3, r2
 800f888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	693a      	ldr	r2, [r7, #16]
 800f88e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	685a      	ldr	r2, [r3, #4]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	697a      	ldr	r2, [r7, #20]
 800f8a2:	621a      	str	r2, [r3, #32]
}
 800f8a4:	bf00      	nop
 800f8a6:	371c      	adds	r7, #28
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	fffeff8f 	.word	0xfffeff8f
 800f8b4:	40010000 	.word	0x40010000
 800f8b8:	40010400 	.word	0x40010400
 800f8bc:	40014000 	.word	0x40014000
 800f8c0:	40014400 	.word	0x40014400
 800f8c4:	40014800 	.word	0x40014800

0800f8c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b087      	sub	sp, #28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a1b      	ldr	r3, [r3, #32]
 800f8dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	69db      	ldr	r3, [r3, #28]
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	4b24      	ldr	r3, [pc, #144]	; (800f984 <TIM_OC4_SetConfig+0xbc>)
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	021b      	lsls	r3, r3, #8
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	4313      	orrs	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	031b      	lsls	r3, r3, #12
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a19      	ldr	r2, [pc, #100]	; (800f988 <TIM_OC4_SetConfig+0xc0>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d00f      	beq.n	800f948 <TIM_OC4_SetConfig+0x80>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a18      	ldr	r2, [pc, #96]	; (800f98c <TIM_OC4_SetConfig+0xc4>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d00b      	beq.n	800f948 <TIM_OC4_SetConfig+0x80>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a17      	ldr	r2, [pc, #92]	; (800f990 <TIM_OC4_SetConfig+0xc8>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d007      	beq.n	800f948 <TIM_OC4_SetConfig+0x80>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4a16      	ldr	r2, [pc, #88]	; (800f994 <TIM_OC4_SetConfig+0xcc>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d003      	beq.n	800f948 <TIM_OC4_SetConfig+0x80>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a15      	ldr	r2, [pc, #84]	; (800f998 <TIM_OC4_SetConfig+0xd0>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d109      	bne.n	800f95c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f94e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	695b      	ldr	r3, [r3, #20]
 800f954:	019b      	lsls	r3, r3, #6
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	4313      	orrs	r3, r2
 800f95a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	685a      	ldr	r2, [r3, #4]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	693a      	ldr	r2, [r7, #16]
 800f974:	621a      	str	r2, [r3, #32]
}
 800f976:	bf00      	nop
 800f978:	371c      	adds	r7, #28
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	feff8fff 	.word	0xfeff8fff
 800f988:	40010000 	.word	0x40010000
 800f98c:	40010400 	.word	0x40010400
 800f990:	40014000 	.word	0x40014000
 800f994:	40014400 	.word	0x40014400
 800f998:	40014800 	.word	0x40014800

0800f99c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b087      	sub	sp, #28
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a1b      	ldr	r3, [r3, #32]
 800f9b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	4b21      	ldr	r3, [pc, #132]	; (800fa4c <TIM_OC5_SetConfig+0xb0>)
 800f9c8:	4013      	ands	r3, r2
 800f9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	4313      	orrs	r3, r2
 800f9d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f9dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	041b      	lsls	r3, r3, #16
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4a18      	ldr	r2, [pc, #96]	; (800fa50 <TIM_OC5_SetConfig+0xb4>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d00f      	beq.n	800fa12 <TIM_OC5_SetConfig+0x76>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a17      	ldr	r2, [pc, #92]	; (800fa54 <TIM_OC5_SetConfig+0xb8>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d00b      	beq.n	800fa12 <TIM_OC5_SetConfig+0x76>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a16      	ldr	r2, [pc, #88]	; (800fa58 <TIM_OC5_SetConfig+0xbc>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d007      	beq.n	800fa12 <TIM_OC5_SetConfig+0x76>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a15      	ldr	r2, [pc, #84]	; (800fa5c <TIM_OC5_SetConfig+0xc0>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d003      	beq.n	800fa12 <TIM_OC5_SetConfig+0x76>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a14      	ldr	r2, [pc, #80]	; (800fa60 <TIM_OC5_SetConfig+0xc4>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d109      	bne.n	800fa26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	021b      	lsls	r3, r3, #8
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	4313      	orrs	r3, r2
 800fa24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	693a      	ldr	r2, [r7, #16]
 800fa3e:	621a      	str	r2, [r3, #32]
}
 800fa40:	bf00      	nop
 800fa42:	371c      	adds	r7, #28
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr
 800fa4c:	fffeff8f 	.word	0xfffeff8f
 800fa50:	40010000 	.word	0x40010000
 800fa54:	40010400 	.word	0x40010400
 800fa58:	40014000 	.word	0x40014000
 800fa5c:	40014400 	.word	0x40014400
 800fa60:	40014800 	.word	0x40014800

0800fa64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b087      	sub	sp, #28
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6a1b      	ldr	r3, [r3, #32]
 800fa72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	4b22      	ldr	r3, [pc, #136]	; (800fb18 <TIM_OC6_SetConfig+0xb4>)
 800fa90:	4013      	ands	r3, r2
 800fa92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	021b      	lsls	r3, r3, #8
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800faa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	051b      	lsls	r3, r3, #20
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	4313      	orrs	r3, r2
 800fab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a19      	ldr	r2, [pc, #100]	; (800fb1c <TIM_OC6_SetConfig+0xb8>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d00f      	beq.n	800fadc <TIM_OC6_SetConfig+0x78>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a18      	ldr	r2, [pc, #96]	; (800fb20 <TIM_OC6_SetConfig+0xbc>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d00b      	beq.n	800fadc <TIM_OC6_SetConfig+0x78>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4a17      	ldr	r2, [pc, #92]	; (800fb24 <TIM_OC6_SetConfig+0xc0>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d007      	beq.n	800fadc <TIM_OC6_SetConfig+0x78>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4a16      	ldr	r2, [pc, #88]	; (800fb28 <TIM_OC6_SetConfig+0xc4>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d003      	beq.n	800fadc <TIM_OC6_SetConfig+0x78>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a15      	ldr	r2, [pc, #84]	; (800fb2c <TIM_OC6_SetConfig+0xc8>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d109      	bne.n	800faf0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	695b      	ldr	r3, [r3, #20]
 800fae8:	029b      	lsls	r3, r3, #10
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	4313      	orrs	r3, r2
 800faee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	693a      	ldr	r2, [r7, #16]
 800fb08:	621a      	str	r2, [r3, #32]
}
 800fb0a:	bf00      	nop
 800fb0c:	371c      	adds	r7, #28
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	feff8fff 	.word	0xfeff8fff
 800fb1c:	40010000 	.word	0x40010000
 800fb20:	40010400 	.word	0x40010400
 800fb24:	40014000 	.word	0x40014000
 800fb28:	40014400 	.word	0x40014400
 800fb2c:	40014800 	.word	0x40014800

0800fb30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b087      	sub	sp, #28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6a1b      	ldr	r3, [r3, #32]
 800fb40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6a1b      	ldr	r3, [r3, #32]
 800fb46:	f023 0201 	bic.w	r2, r3, #1
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	011b      	lsls	r3, r3, #4
 800fb60:	693a      	ldr	r2, [r7, #16]
 800fb62:	4313      	orrs	r3, r2
 800fb64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f023 030a 	bic.w	r3, r3, #10
 800fb6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	693a      	ldr	r2, [r7, #16]
 800fb7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	697a      	ldr	r2, [r7, #20]
 800fb80:	621a      	str	r2, [r3, #32]
}
 800fb82:	bf00      	nop
 800fb84:	371c      	adds	r7, #28
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b087      	sub	sp, #28
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	f023 0210 	bic.w	r2, r3, #16
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	699b      	ldr	r3, [r3, #24]
 800fbb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	031b      	lsls	r3, r3, #12
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fbca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	011b      	lsls	r3, r3, #4
 800fbd0:	697a      	ldr	r2, [r7, #20]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	693a      	ldr	r2, [r7, #16]
 800fbda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	621a      	str	r2, [r3, #32]
}
 800fbe2:	bf00      	nop
 800fbe4:	371c      	adds	r7, #28
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
	...

0800fbf0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	4b09      	ldr	r3, [pc, #36]	; (800fc28 <TIM_ITRx_SetConfig+0x38>)
 800fc04:	4013      	ands	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	f043 0307 	orr.w	r3, r3, #7
 800fc12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	609a      	str	r2, [r3, #8]
}
 800fc1a:	bf00      	nop
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	ffcfff8f 	.word	0xffcfff8f

0800fc2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b087      	sub	sp, #28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	607a      	str	r2, [r7, #4]
 800fc38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	689b      	ldr	r3, [r3, #8]
 800fc3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	021a      	lsls	r2, r3, #8
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	431a      	orrs	r2, r3
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	4313      	orrs	r3, r2
 800fc54:	697a      	ldr	r2, [r7, #20]
 800fc56:	4313      	orrs	r3, r2
 800fc58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	697a      	ldr	r2, [r7, #20]
 800fc5e:	609a      	str	r2, [r3, #8]
}
 800fc60:	bf00      	nop
 800fc62:	371c      	adds	r7, #28
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b087      	sub	sp, #28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	f003 031f 	and.w	r3, r3, #31
 800fc7e:	2201      	movs	r2, #1
 800fc80:	fa02 f303 	lsl.w	r3, r2, r3
 800fc84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6a1a      	ldr	r2, [r3, #32]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	43db      	mvns	r3, r3
 800fc8e:	401a      	ands	r2, r3
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6a1a      	ldr	r2, [r3, #32]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	f003 031f 	and.w	r3, r3, #31
 800fc9e:	6879      	ldr	r1, [r7, #4]
 800fca0:	fa01 f303 	lsl.w	r3, r1, r3
 800fca4:	431a      	orrs	r2, r3
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	621a      	str	r2, [r3, #32]
}
 800fcaa:	bf00      	nop
 800fcac:	371c      	adds	r7, #28
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
	...

0800fcb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d101      	bne.n	800fcd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fccc:	2302      	movs	r3, #2
 800fcce:	e06d      	b.n	800fdac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2202      	movs	r2, #2
 800fcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a30      	ldr	r2, [pc, #192]	; (800fdb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d004      	beq.n	800fd04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a2f      	ldr	r2, [pc, #188]	; (800fdbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d108      	bne.n	800fd16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4a20      	ldr	r2, [pc, #128]	; (800fdb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d022      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd42:	d01d      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a1d      	ldr	r2, [pc, #116]	; (800fdc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d018      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4a1c      	ldr	r2, [pc, #112]	; (800fdc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d013      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	4a1a      	ldr	r2, [pc, #104]	; (800fdc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d00e      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a15      	ldr	r2, [pc, #84]	; (800fdbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d009      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a16      	ldr	r2, [pc, #88]	; (800fdcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d004      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a15      	ldr	r2, [pc, #84]	; (800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d10c      	bne.n	800fd9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdaa:	2300      	movs	r3, #0
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3714      	adds	r7, #20
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	40010000 	.word	0x40010000
 800fdbc:	40010400 	.word	0x40010400
 800fdc0:	40000400 	.word	0x40000400
 800fdc4:	40000800 	.word	0x40000800
 800fdc8:	40000c00 	.word	0x40000c00
 800fdcc:	40001800 	.word	0x40001800
 800fdd0:	40014000 	.word	0x40014000

0800fdd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fdde:	2300      	movs	r3, #0
 800fde0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d101      	bne.n	800fdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fdec:	2302      	movs	r3, #2
 800fdee:	e065      	b.n	800febc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	4313      	orrs	r3, r2
 800fe12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	695b      	ldr	r3, [r3, #20]
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe56:	4313      	orrs	r3, r2
 800fe58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	699b      	ldr	r3, [r3, #24]
 800fe64:	041b      	lsls	r3, r3, #16
 800fe66:	4313      	orrs	r3, r2
 800fe68:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a16      	ldr	r2, [pc, #88]	; (800fec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d004      	beq.n	800fe7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a14      	ldr	r2, [pc, #80]	; (800fecc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d115      	bne.n	800feaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe88:	051b      	lsls	r3, r3, #20
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	69db      	ldr	r3, [r3, #28]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	6a1b      	ldr	r3, [r3, #32]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feba:	2300      	movs	r3, #0
}
 800febc:	4618      	mov	r0, r3
 800febe:	3714      	adds	r7, #20
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	40010000 	.word	0x40010000
 800fecc:	40010400 	.word	0x40010400

0800fed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff00:	bf00      	nop
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d101      	bne.n	800ff1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e042      	b.n	800ffa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d106      	bne.n	800ff36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7f3 fbf7 	bl	8003724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2224      	movs	r2, #36	; 0x24
 800ff3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f022 0201 	bic.w	r2, r2, #1
 800ff4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d002      	beq.n	800ff5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f001 fc42 	bl	80117e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 fed7 	bl	8010d10 <UART_SetConfig>
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d101      	bne.n	800ff6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e01b      	b.n	800ffa4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	685a      	ldr	r2, [r3, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689a      	ldr	r2, [r3, #8]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f042 0201 	orr.w	r2, r2, #1
 800ff9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f001 fcc1 	bl	8011924 <UART_CheckIdleState>
 800ffa2:	4603      	mov	r3, r0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b08a      	sub	sp, #40	; 0x28
 800ffb0:	af02      	add	r7, sp, #8
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	603b      	str	r3, [r7, #0]
 800ffb8:	4613      	mov	r3, r2
 800ffba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffc2:	2b20      	cmp	r3, #32
 800ffc4:	d17b      	bne.n	80100be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d002      	beq.n	800ffd2 <HAL_UART_Transmit+0x26>
 800ffcc:	88fb      	ldrh	r3, [r7, #6]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d101      	bne.n	800ffd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e074      	b.n	80100c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2221      	movs	r2, #33	; 0x21
 800ffe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffe6:	f7f3 ff1b 	bl	8003e20 <HAL_GetTick>
 800ffea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	88fa      	ldrh	r2, [r7, #6]
 800fff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	88fa      	ldrh	r2, [r7, #6]
 800fff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010004:	d108      	bne.n	8010018 <HAL_UART_Transmit+0x6c>
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d104      	bne.n	8010018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801000e:	2300      	movs	r3, #0
 8010010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	61bb      	str	r3, [r7, #24]
 8010016:	e003      	b.n	8010020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801001c:	2300      	movs	r3, #0
 801001e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010020:	e030      	b.n	8010084 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	2200      	movs	r2, #0
 801002a:	2180      	movs	r1, #128	; 0x80
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f001 fd23 	bl	8011a78 <UART_WaitOnFlagUntilTimeout>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d005      	beq.n	8010044 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2220      	movs	r2, #32
 801003c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010040:	2303      	movs	r3, #3
 8010042:	e03d      	b.n	80100c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10b      	bne.n	8010062 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	461a      	mov	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	3302      	adds	r3, #2
 801005e:	61bb      	str	r3, [r7, #24]
 8010060:	e007      	b.n	8010072 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	781a      	ldrb	r2, [r3, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	3301      	adds	r3, #1
 8010070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010078:	b29b      	uxth	r3, r3
 801007a:	3b01      	subs	r3, #1
 801007c:	b29a      	uxth	r2, r3
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801008a:	b29b      	uxth	r3, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1c8      	bne.n	8010022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2200      	movs	r2, #0
 8010098:	2140      	movs	r1, #64	; 0x40
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f001 fcec 	bl	8011a78 <UART_WaitOnFlagUntilTimeout>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d005      	beq.n	80100b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2220      	movs	r2, #32
 80100aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80100ae:	2303      	movs	r3, #3
 80100b0:	e006      	b.n	80100c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2220      	movs	r2, #32
 80100b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	e000      	b.n	80100c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80100be:	2302      	movs	r3, #2
  }
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3720      	adds	r7, #32
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08a      	sub	sp, #40	; 0x28
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	603b      	str	r3, [r7, #0]
 80100d4:	4613      	mov	r3, r2
 80100d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100de:	2b20      	cmp	r3, #32
 80100e0:	f040 80b5 	bne.w	801024e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d002      	beq.n	80100f0 <HAL_UART_Receive+0x28>
 80100ea:	88fb      	ldrh	r3, [r7, #6]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d101      	bne.n	80100f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80100f0:	2301      	movs	r3, #1
 80100f2:	e0ad      	b.n	8010250 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2222      	movs	r2, #34	; 0x22
 8010100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801010a:	f7f3 fe89 	bl	8003e20 <HAL_GetTick>
 801010e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	88fa      	ldrh	r2, [r7, #6]
 8010114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	88fa      	ldrh	r2, [r7, #6]
 801011c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010128:	d10e      	bne.n	8010148 <HAL_UART_Receive+0x80>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d105      	bne.n	801013e <HAL_UART_Receive+0x76>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801013c:	e02d      	b.n	801019a <HAL_UART_Receive+0xd2>
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	22ff      	movs	r2, #255	; 0xff
 8010142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010146:	e028      	b.n	801019a <HAL_UART_Receive+0xd2>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10d      	bne.n	801016c <HAL_UART_Receive+0xa4>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d104      	bne.n	8010162 <HAL_UART_Receive+0x9a>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	22ff      	movs	r2, #255	; 0xff
 801015c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010160:	e01b      	b.n	801019a <HAL_UART_Receive+0xd2>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	227f      	movs	r2, #127	; 0x7f
 8010166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801016a:	e016      	b.n	801019a <HAL_UART_Receive+0xd2>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010174:	d10d      	bne.n	8010192 <HAL_UART_Receive+0xca>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	691b      	ldr	r3, [r3, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d104      	bne.n	8010188 <HAL_UART_Receive+0xc0>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	227f      	movs	r2, #127	; 0x7f
 8010182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010186:	e008      	b.n	801019a <HAL_UART_Receive+0xd2>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	223f      	movs	r2, #63	; 0x3f
 801018c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010190:	e003      	b.n	801019a <HAL_UART_Receive+0xd2>
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101aa:	d108      	bne.n	80101be <HAL_UART_Receive+0xf6>
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	691b      	ldr	r3, [r3, #16]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d104      	bne.n	80101be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80101b4:	2300      	movs	r3, #0
 80101b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	61bb      	str	r3, [r7, #24]
 80101bc:	e003      	b.n	80101c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80101c6:	e036      	b.n	8010236 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	2200      	movs	r2, #0
 80101d0:	2120      	movs	r1, #32
 80101d2:	68f8      	ldr	r0, [r7, #12]
 80101d4:	f001 fc50 	bl	8011a78 <UART_WaitOnFlagUntilTimeout>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d005      	beq.n	80101ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2220      	movs	r2, #32
 80101e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80101e6:	2303      	movs	r3, #3
 80101e8:	e032      	b.n	8010250 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10c      	bne.n	801020a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	8a7b      	ldrh	r3, [r7, #18]
 80101fa:	4013      	ands	r3, r2
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	3302      	adds	r3, #2
 8010206:	61bb      	str	r3, [r7, #24]
 8010208:	e00c      	b.n	8010224 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010210:	b2da      	uxtb	r2, r3
 8010212:	8a7b      	ldrh	r3, [r7, #18]
 8010214:	b2db      	uxtb	r3, r3
 8010216:	4013      	ands	r3, r2
 8010218:	b2da      	uxtb	r2, r3
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	3301      	adds	r3, #1
 8010222:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801022a:	b29b      	uxth	r3, r3
 801022c:	3b01      	subs	r3, #1
 801022e:	b29a      	uxth	r2, r3
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801023c:	b29b      	uxth	r3, r3
 801023e:	2b00      	cmp	r3, #0
 8010240:	d1c2      	bne.n	80101c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2220      	movs	r2, #32
 8010246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	e000      	b.n	8010250 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801024e:	2302      	movs	r3, #2
  }
}
 8010250:	4618      	mov	r0, r3
 8010252:	3720      	adds	r7, #32
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08a      	sub	sp, #40	; 0x28
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	4613      	mov	r3, r2
 8010264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801026c:	2b20      	cmp	r3, #32
 801026e:	d137      	bne.n	80102e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d002      	beq.n	801027c <HAL_UART_Receive_IT+0x24>
 8010276:	88fb      	ldrh	r3, [r7, #6]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	e030      	b.n	80102e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a18      	ldr	r2, [pc, #96]	; (80102ec <HAL_UART_Receive_IT+0x94>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d01f      	beq.n	80102d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801029a:	2b00      	cmp	r3, #0
 801029c:	d018      	beq.n	80102d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	e853 3f00 	ldrex	r3, [r3]
 80102aa:	613b      	str	r3, [r7, #16]
   return(result);
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	461a      	mov	r2, r3
 80102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102bc:	623b      	str	r3, [r7, #32]
 80102be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c0:	69f9      	ldr	r1, [r7, #28]
 80102c2:	6a3a      	ldr	r2, [r7, #32]
 80102c4:	e841 2300 	strex	r3, r2, [r1]
 80102c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d1e6      	bne.n	801029e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80102d0:	88fb      	ldrh	r3, [r7, #6]
 80102d2:	461a      	mov	r2, r3
 80102d4:	68b9      	ldr	r1, [r7, #8]
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f001 fc3c 	bl	8011b54 <UART_Start_Receive_IT>
 80102dc:	4603      	mov	r3, r0
 80102de:	e000      	b.n	80102e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80102e0:	2302      	movs	r3, #2
  }
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3728      	adds	r7, #40	; 0x28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	58000c00 	.word	0x58000c00

080102f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b08a      	sub	sp, #40	; 0x28
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	4613      	mov	r3, r2
 80102fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010304:	2b20      	cmp	r3, #32
 8010306:	d167      	bne.n	80103d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <HAL_UART_Transmit_DMA+0x24>
 801030e:	88fb      	ldrh	r3, [r7, #6]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010314:	2301      	movs	r3, #1
 8010316:	e060      	b.n	80103da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	88fa      	ldrh	r2, [r7, #6]
 8010322:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	88fa      	ldrh	r2, [r7, #6]
 801032a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2200      	movs	r2, #0
 8010332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2221      	movs	r2, #33	; 0x21
 801033a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010342:	2b00      	cmp	r3, #0
 8010344:	d028      	beq.n	8010398 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801034a:	4a26      	ldr	r2, [pc, #152]	; (80103e4 <HAL_UART_Transmit_DMA+0xf4>)
 801034c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010352:	4a25      	ldr	r2, [pc, #148]	; (80103e8 <HAL_UART_Transmit_DMA+0xf8>)
 8010354:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801035a:	4a24      	ldr	r2, [pc, #144]	; (80103ec <HAL_UART_Transmit_DMA+0xfc>)
 801035c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010362:	2200      	movs	r2, #0
 8010364:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801036e:	4619      	mov	r1, r3
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	3328      	adds	r3, #40	; 0x28
 8010376:	461a      	mov	r2, r3
 8010378:	88fb      	ldrh	r3, [r7, #6]
 801037a:	f7f6 f9d5 	bl	8006728 <HAL_DMA_Start_IT>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d009      	beq.n	8010398 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2210      	movs	r2, #16
 8010388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2220      	movs	r2, #32
 8010390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010394:	2301      	movs	r3, #1
 8010396:	e020      	b.n	80103da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2240      	movs	r2, #64	; 0x40
 801039e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	3308      	adds	r3, #8
 80103a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	e853 3f00 	ldrex	r3, [r3]
 80103ae:	613b      	str	r3, [r7, #16]
   return(result);
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103b6:	627b      	str	r3, [r7, #36]	; 0x24
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	3308      	adds	r3, #8
 80103be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103c0:	623a      	str	r2, [r7, #32]
 80103c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	6a3a      	ldr	r2, [r7, #32]
 80103c8:	e841 2300 	strex	r3, r2, [r1]
 80103cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e5      	bne.n	80103a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80103d4:	2300      	movs	r3, #0
 80103d6:	e000      	b.n	80103da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80103d8:	2302      	movs	r3, #2
  }
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3728      	adds	r7, #40	; 0x28
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	08011ee9 	.word	0x08011ee9
 80103e8:	08011f7f 	.word	0x08011f7f
 80103ec:	08011f9b 	.word	0x08011f9b

080103f0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b09a      	sub	sp, #104	; 0x68
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010400:	e853 3f00 	ldrex	r3, [r3]
 8010404:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801040c:	667b      	str	r3, [r7, #100]	; 0x64
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	461a      	mov	r2, r3
 8010414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010416:	657b      	str	r3, [r7, #84]	; 0x54
 8010418:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801041c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801041e:	e841 2300 	strex	r3, r2, [r1]
 8010422:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1e6      	bne.n	80103f8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3308      	adds	r3, #8
 8010430:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	e853 3f00 	ldrex	r3, [r3]
 8010438:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801043a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801043c:	4b46      	ldr	r3, [pc, #280]	; (8010558 <HAL_UART_AbortReceive+0x168>)
 801043e:	4013      	ands	r3, r2
 8010440:	663b      	str	r3, [r7, #96]	; 0x60
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3308      	adds	r3, #8
 8010448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801044a:	643a      	str	r2, [r7, #64]	; 0x40
 801044c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e5      	bne.n	801042a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010462:	2b01      	cmp	r3, #1
 8010464:	d118      	bne.n	8010498 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	e853 3f00 	ldrex	r3, [r3]
 8010472:	61fb      	str	r3, [r7, #28]
   return(result);
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	f023 0310 	bic.w	r3, r3, #16
 801047a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	461a      	mov	r2, r3
 8010482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010486:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801048a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801048c:	e841 2300 	strex	r3, r2, [r1]
 8010490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1e6      	bne.n	8010466 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a2:	2b40      	cmp	r3, #64	; 0x40
 80104a4:	d13b      	bne.n	801051e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3308      	adds	r3, #8
 80104ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	e853 3f00 	ldrex	r3, [r3]
 80104b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	3308      	adds	r3, #8
 80104c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104c6:	61ba      	str	r2, [r7, #24]
 80104c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ca:	6979      	ldr	r1, [r7, #20]
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	e841 2300 	strex	r3, r2, [r1]
 80104d2:	613b      	str	r3, [r7, #16]
   return(result);
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d1e5      	bne.n	80104a6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d01c      	beq.n	801051e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ea:	2200      	movs	r2, #0
 80104ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7f6 fb81 	bl	8006bfc <HAL_DMA_Abort>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d00e      	beq.n	801051e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010506:	4618      	mov	r0, r3
 8010508:	f7f8 f806 	bl	8008518 <HAL_DMA_GetError>
 801050c:	4603      	mov	r3, r0
 801050e:	2b20      	cmp	r3, #32
 8010510:	d105      	bne.n	801051e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2210      	movs	r2, #16
 8010516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801051a:	2303      	movs	r3, #3
 801051c:	e017      	b.n	801054e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	220f      	movs	r2, #15
 801052c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	699a      	ldr	r2, [r3, #24]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f042 0208 	orr.w	r2, r2, #8
 801053c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2220      	movs	r2, #32
 8010542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3768      	adds	r7, #104	; 0x68
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	effffffe 	.word	0xeffffffe

0801055c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b0ba      	sub	sp, #232	; 0xe8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	69db      	ldr	r3, [r3, #28]
 801056a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010586:	f640 030f 	movw	r3, #2063	; 0x80f
 801058a:	4013      	ands	r3, r2
 801058c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010594:	2b00      	cmp	r3, #0
 8010596:	d11b      	bne.n	80105d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801059c:	f003 0320 	and.w	r3, r3, #32
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d015      	beq.n	80105d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80105a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105a8:	f003 0320 	and.w	r3, r3, #32
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d105      	bne.n	80105bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80105b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d009      	beq.n	80105d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f000 8377 	beq.w	8010cb4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	4798      	blx	r3
      }
      return;
 80105ce:	e371      	b.n	8010cb4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80105d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 8123 	beq.w	8010820 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80105da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105de:	4b8d      	ldr	r3, [pc, #564]	; (8010814 <HAL_UART_IRQHandler+0x2b8>)
 80105e0:	4013      	ands	r3, r2
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d106      	bne.n	80105f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80105e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80105ea:	4b8b      	ldr	r3, [pc, #556]	; (8010818 <HAL_UART_IRQHandler+0x2bc>)
 80105ec:	4013      	ands	r3, r2
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 8116 	beq.w	8010820 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d011      	beq.n	8010624 <HAL_UART_IRQHandler+0xc8>
 8010600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00b      	beq.n	8010624 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2201      	movs	r2, #1
 8010612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801061a:	f043 0201 	orr.w	r2, r3, #1
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010628:	f003 0302 	and.w	r3, r3, #2
 801062c:	2b00      	cmp	r3, #0
 801062e:	d011      	beq.n	8010654 <HAL_UART_IRQHandler+0xf8>
 8010630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010634:	f003 0301 	and.w	r3, r3, #1
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00b      	beq.n	8010654 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2202      	movs	r2, #2
 8010642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801064a:	f043 0204 	orr.w	r2, r3, #4
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010658:	f003 0304 	and.w	r3, r3, #4
 801065c:	2b00      	cmp	r3, #0
 801065e:	d011      	beq.n	8010684 <HAL_UART_IRQHandler+0x128>
 8010660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00b      	beq.n	8010684 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2204      	movs	r2, #4
 8010672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801067a:	f043 0202 	orr.w	r2, r3, #2
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010688:	f003 0308 	and.w	r3, r3, #8
 801068c:	2b00      	cmp	r3, #0
 801068e:	d017      	beq.n	80106c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010694:	f003 0320 	and.w	r3, r3, #32
 8010698:	2b00      	cmp	r3, #0
 801069a:	d105      	bne.n	80106a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801069c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80106a0:	4b5c      	ldr	r3, [pc, #368]	; (8010814 <HAL_UART_IRQHandler+0x2b8>)
 80106a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00b      	beq.n	80106c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2208      	movs	r2, #8
 80106ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106b6:	f043 0208 	orr.w	r2, r3, #8
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80106c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d012      	beq.n	80106f2 <HAL_UART_IRQHandler+0x196>
 80106cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00c      	beq.n	80106f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106e8:	f043 0220 	orr.w	r2, r3, #32
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 82dd 	beq.w	8010cb8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80106fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010702:	f003 0320 	and.w	r3, r3, #32
 8010706:	2b00      	cmp	r3, #0
 8010708:	d013      	beq.n	8010732 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801070a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801070e:	f003 0320 	and.w	r3, r3, #32
 8010712:	2b00      	cmp	r3, #0
 8010714:	d105      	bne.n	8010722 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801071e:	2b00      	cmp	r3, #0
 8010720:	d007      	beq.n	8010732 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010726:	2b00      	cmp	r3, #0
 8010728:	d003      	beq.n	8010732 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010746:	2b40      	cmp	r3, #64	; 0x40
 8010748:	d005      	beq.n	8010756 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801074a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801074e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010752:	2b00      	cmp	r3, #0
 8010754:	d054      	beq.n	8010800 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f001 fb60 	bl	8011e1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010766:	2b40      	cmp	r3, #64	; 0x40
 8010768:	d146      	bne.n	80107f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3308      	adds	r3, #8
 8010770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010778:	e853 3f00 	ldrex	r3, [r3]
 801077c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	3308      	adds	r3, #8
 8010792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010796:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801079a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80107a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80107a6:	e841 2300 	strex	r3, r2, [r1]
 80107aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80107ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1d9      	bne.n	801076a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d017      	beq.n	80107f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107c6:	4a15      	ldr	r2, [pc, #84]	; (801081c <HAL_UART_IRQHandler+0x2c0>)
 80107c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7f6 fd31 	bl	8007238 <HAL_DMA_Abort_IT>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d019      	beq.n	8010810 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80107ea:	4610      	mov	r0, r2
 80107ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107ee:	e00f      	b.n	8010810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 fa77 	bl	8010ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107f6:	e00b      	b.n	8010810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fa73 	bl	8010ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107fe:	e007      	b.n	8010810 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fa6f 	bl	8010ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801080e:	e253      	b.n	8010cb8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010810:	bf00      	nop
    return;
 8010812:	e251      	b.n	8010cb8 <HAL_UART_IRQHandler+0x75c>
 8010814:	10000001 	.word	0x10000001
 8010818:	04000120 	.word	0x04000120
 801081c:	0801201b 	.word	0x0801201b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010824:	2b01      	cmp	r3, #1
 8010826:	f040 81e7 	bne.w	8010bf8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801082a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801082e:	f003 0310 	and.w	r3, r3, #16
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 81e0 	beq.w	8010bf8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801083c:	f003 0310 	and.w	r3, r3, #16
 8010840:	2b00      	cmp	r3, #0
 8010842:	f000 81d9 	beq.w	8010bf8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2210      	movs	r2, #16
 801084c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010858:	2b40      	cmp	r3, #64	; 0x40
 801085a:	f040 8151 	bne.w	8010b00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a96      	ldr	r2, [pc, #600]	; (8010ac0 <HAL_UART_IRQHandler+0x564>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d068      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a93      	ldr	r2, [pc, #588]	; (8010ac4 <HAL_UART_IRQHandler+0x568>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d061      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4a91      	ldr	r2, [pc, #580]	; (8010ac8 <HAL_UART_IRQHandler+0x56c>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d05a      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a8e      	ldr	r2, [pc, #568]	; (8010acc <HAL_UART_IRQHandler+0x570>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d053      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a8c      	ldr	r2, [pc, #560]	; (8010ad0 <HAL_UART_IRQHandler+0x574>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d04c      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a89      	ldr	r2, [pc, #548]	; (8010ad4 <HAL_UART_IRQHandler+0x578>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d045      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a87      	ldr	r2, [pc, #540]	; (8010ad8 <HAL_UART_IRQHandler+0x57c>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d03e      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a84      	ldr	r2, [pc, #528]	; (8010adc <HAL_UART_IRQHandler+0x580>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d037      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	4a82      	ldr	r2, [pc, #520]	; (8010ae0 <HAL_UART_IRQHandler+0x584>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d030      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a7f      	ldr	r2, [pc, #508]	; (8010ae4 <HAL_UART_IRQHandler+0x588>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d029      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	4a7d      	ldr	r2, [pc, #500]	; (8010ae8 <HAL_UART_IRQHandler+0x58c>)
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d022      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4a7a      	ldr	r2, [pc, #488]	; (8010aec <HAL_UART_IRQHandler+0x590>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d01b      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4a78      	ldr	r2, [pc, #480]	; (8010af0 <HAL_UART_IRQHandler+0x594>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d014      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a75      	ldr	r2, [pc, #468]	; (8010af4 <HAL_UART_IRQHandler+0x598>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d00d      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4a73      	ldr	r2, [pc, #460]	; (8010af8 <HAL_UART_IRQHandler+0x59c>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d006      	beq.n	801093e <HAL_UART_IRQHandler+0x3e2>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a70      	ldr	r2, [pc, #448]	; (8010afc <HAL_UART_IRQHandler+0x5a0>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d106      	bne.n	801094c <HAL_UART_IRQHandler+0x3f0>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	b29b      	uxth	r3, r3
 801094a:	e005      	b.n	8010958 <HAL_UART_IRQHandler+0x3fc>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	b29b      	uxth	r3, r3
 8010958:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801095c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 81ab 	beq.w	8010cbc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801096c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010970:	429a      	cmp	r2, r3
 8010972:	f080 81a3 	bcs.w	8010cbc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801097c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010986:	69db      	ldr	r3, [r3, #28]
 8010988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801098c:	f000 8087 	beq.w	8010a9e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801099c:	e853 3f00 	ldrex	r3, [r3]
 80109a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80109a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	461a      	mov	r2, r3
 80109b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80109c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109ca:	e841 2300 	strex	r3, r2, [r1]
 80109ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80109d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1da      	bne.n	8010990 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3308      	adds	r3, #8
 80109e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e4:	e853 3f00 	ldrex	r3, [r3]
 80109e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80109ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109ec:	f023 0301 	bic.w	r3, r3, #1
 80109f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3308      	adds	r3, #8
 80109fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80109fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010a02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a0a:	e841 2300 	strex	r3, r2, [r1]
 8010a0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d1e1      	bne.n	80109da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	3308      	adds	r3, #8
 8010a1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a20:	e853 3f00 	ldrex	r3, [r3]
 8010a24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	3308      	adds	r3, #8
 8010a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010a3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010a3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a42:	e841 2300 	strex	r3, r2, [r1]
 8010a46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1e3      	bne.n	8010a16 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2220      	movs	r2, #32
 8010a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a64:	e853 3f00 	ldrex	r3, [r3]
 8010a68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a6c:	f023 0310 	bic.w	r3, r3, #16
 8010a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	461a      	mov	r2, r3
 8010a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a86:	e841 2300 	strex	r3, r2, [r1]
 8010a8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1e4      	bne.n	8010a5c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7f6 f8af 	bl	8006bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 f91d 	bl	8010cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010abe:	e0fd      	b.n	8010cbc <HAL_UART_IRQHandler+0x760>
 8010ac0:	40020010 	.word	0x40020010
 8010ac4:	40020028 	.word	0x40020028
 8010ac8:	40020040 	.word	0x40020040
 8010acc:	40020058 	.word	0x40020058
 8010ad0:	40020070 	.word	0x40020070
 8010ad4:	40020088 	.word	0x40020088
 8010ad8:	400200a0 	.word	0x400200a0
 8010adc:	400200b8 	.word	0x400200b8
 8010ae0:	40020410 	.word	0x40020410
 8010ae4:	40020428 	.word	0x40020428
 8010ae8:	40020440 	.word	0x40020440
 8010aec:	40020458 	.word	0x40020458
 8010af0:	40020470 	.word	0x40020470
 8010af4:	40020488 	.word	0x40020488
 8010af8:	400204a0 	.word	0x400204a0
 8010afc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	1ad3      	subs	r3, r2, r3
 8010b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 80cf 	beq.w	8010cc0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f000 80ca 	beq.w	8010cc0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b34:	e853 3f00 	ldrex	r3, [r3]
 8010b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	461a      	mov	r2, r3
 8010b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8010b50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b56:	e841 2300 	strex	r3, r2, [r1]
 8010b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1e4      	bne.n	8010b2c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	3308      	adds	r3, #8
 8010b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6c:	e853 3f00 	ldrex	r3, [r3]
 8010b70:	623b      	str	r3, [r7, #32]
   return(result);
 8010b72:	6a3a      	ldr	r2, [r7, #32]
 8010b74:	4b55      	ldr	r3, [pc, #340]	; (8010ccc <HAL_UART_IRQHandler+0x770>)
 8010b76:	4013      	ands	r3, r2
 8010b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	3308      	adds	r3, #8
 8010b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010b86:	633a      	str	r2, [r7, #48]	; 0x30
 8010b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b8e:	e841 2300 	strex	r3, r2, [r1]
 8010b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1e3      	bne.n	8010b62 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2220      	movs	r2, #32
 8010b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	e853 3f00 	ldrex	r3, [r3]
 8010bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f023 0310 	bic.w	r3, r3, #16
 8010bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	461a      	mov	r2, r3
 8010bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010bd0:	61fb      	str	r3, [r7, #28]
 8010bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd4:	69b9      	ldr	r1, [r7, #24]
 8010bd6:	69fa      	ldr	r2, [r7, #28]
 8010bd8:	e841 2300 	strex	r3, r2, [r1]
 8010bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1e4      	bne.n	8010bae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2202      	movs	r2, #2
 8010be8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 f881 	bl	8010cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010bf6:	e063      	b.n	8010cc0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00e      	beq.n	8010c22 <HAL_UART_IRQHandler+0x6c6>
 8010c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d008      	beq.n	8010c22 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f001 ff5a 	bl	8012ad4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c20:	e051      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d014      	beq.n	8010c58 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d008      	beq.n	8010c58 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d03a      	beq.n	8010cc4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	4798      	blx	r3
    }
    return;
 8010c56:	e035      	b.n	8010cc4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d009      	beq.n	8010c78 <HAL_UART_IRQHandler+0x71c>
 8010c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d003      	beq.n	8010c78 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f001 f9e8 	bl	8012046 <UART_EndTransmit_IT>
    return;
 8010c76:	e026      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d009      	beq.n	8010c98 <HAL_UART_IRQHandler+0x73c>
 8010c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d003      	beq.n	8010c98 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f001 ff33 	bl	8012afc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c96:	e016      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d010      	beq.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
 8010ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	da0c      	bge.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f001 ff1b 	bl	8012ae8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010cb2:	e008      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cb4:	bf00      	nop
 8010cb6:	e006      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010cb8:	bf00      	nop
 8010cba:	e004      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cbc:	bf00      	nop
 8010cbe:	e002      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cc0:	bf00      	nop
 8010cc2:	e000      	b.n	8010cc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010cc4:	bf00      	nop
  }
}
 8010cc6:	37e8      	adds	r7, #232	; 0xe8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	effffffe 	.word	0xeffffffe

08010cd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010cd8:	bf00      	nop
 8010cda:	370c      	adds	r7, #12
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010cec:	bf00      	nop
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	460b      	mov	r3, r1
 8010d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010d04:	bf00      	nop
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d14:	b092      	sub	sp, #72	; 0x48
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	689a      	ldr	r2, [r3, #8]
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	691b      	ldr	r3, [r3, #16]
 8010d28:	431a      	orrs	r2, r3
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	695b      	ldr	r3, [r3, #20]
 8010d2e:	431a      	orrs	r2, r3
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	69db      	ldr	r3, [r3, #28]
 8010d34:	4313      	orrs	r3, r2
 8010d36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	4bbe      	ldr	r3, [pc, #760]	; (8011038 <UART_SetConfig+0x328>)
 8010d40:	4013      	ands	r3, r2
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	6812      	ldr	r2, [r2, #0]
 8010d46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d48:	430b      	orrs	r3, r1
 8010d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	68da      	ldr	r2, [r3, #12]
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	430a      	orrs	r2, r1
 8010d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	699b      	ldr	r3, [r3, #24]
 8010d66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4ab3      	ldr	r2, [pc, #716]	; (801103c <UART_SetConfig+0x32c>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d004      	beq.n	8010d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	6a1b      	ldr	r3, [r3, #32]
 8010d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	689a      	ldr	r2, [r3, #8]
 8010d82:	4baf      	ldr	r3, [pc, #700]	; (8011040 <UART_SetConfig+0x330>)
 8010d84:	4013      	ands	r3, r2
 8010d86:	697a      	ldr	r2, [r7, #20]
 8010d88:	6812      	ldr	r2, [r2, #0]
 8010d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d8c:	430b      	orrs	r3, r1
 8010d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d96:	f023 010f 	bic.w	r1, r3, #15
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	430a      	orrs	r2, r1
 8010da4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4aa6      	ldr	r2, [pc, #664]	; (8011044 <UART_SetConfig+0x334>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d177      	bne.n	8010ea0 <UART_SetConfig+0x190>
 8010db0:	4ba5      	ldr	r3, [pc, #660]	; (8011048 <UART_SetConfig+0x338>)
 8010db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010db8:	2b28      	cmp	r3, #40	; 0x28
 8010dba:	d86d      	bhi.n	8010e98 <UART_SetConfig+0x188>
 8010dbc:	a201      	add	r2, pc, #4	; (adr r2, 8010dc4 <UART_SetConfig+0xb4>)
 8010dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc2:	bf00      	nop
 8010dc4:	08010e69 	.word	0x08010e69
 8010dc8:	08010e99 	.word	0x08010e99
 8010dcc:	08010e99 	.word	0x08010e99
 8010dd0:	08010e99 	.word	0x08010e99
 8010dd4:	08010e99 	.word	0x08010e99
 8010dd8:	08010e99 	.word	0x08010e99
 8010ddc:	08010e99 	.word	0x08010e99
 8010de0:	08010e99 	.word	0x08010e99
 8010de4:	08010e71 	.word	0x08010e71
 8010de8:	08010e99 	.word	0x08010e99
 8010dec:	08010e99 	.word	0x08010e99
 8010df0:	08010e99 	.word	0x08010e99
 8010df4:	08010e99 	.word	0x08010e99
 8010df8:	08010e99 	.word	0x08010e99
 8010dfc:	08010e99 	.word	0x08010e99
 8010e00:	08010e99 	.word	0x08010e99
 8010e04:	08010e79 	.word	0x08010e79
 8010e08:	08010e99 	.word	0x08010e99
 8010e0c:	08010e99 	.word	0x08010e99
 8010e10:	08010e99 	.word	0x08010e99
 8010e14:	08010e99 	.word	0x08010e99
 8010e18:	08010e99 	.word	0x08010e99
 8010e1c:	08010e99 	.word	0x08010e99
 8010e20:	08010e99 	.word	0x08010e99
 8010e24:	08010e81 	.word	0x08010e81
 8010e28:	08010e99 	.word	0x08010e99
 8010e2c:	08010e99 	.word	0x08010e99
 8010e30:	08010e99 	.word	0x08010e99
 8010e34:	08010e99 	.word	0x08010e99
 8010e38:	08010e99 	.word	0x08010e99
 8010e3c:	08010e99 	.word	0x08010e99
 8010e40:	08010e99 	.word	0x08010e99
 8010e44:	08010e89 	.word	0x08010e89
 8010e48:	08010e99 	.word	0x08010e99
 8010e4c:	08010e99 	.word	0x08010e99
 8010e50:	08010e99 	.word	0x08010e99
 8010e54:	08010e99 	.word	0x08010e99
 8010e58:	08010e99 	.word	0x08010e99
 8010e5c:	08010e99 	.word	0x08010e99
 8010e60:	08010e99 	.word	0x08010e99
 8010e64:	08010e91 	.word	0x08010e91
 8010e68:	2301      	movs	r3, #1
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e222      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010e70:	2304      	movs	r3, #4
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e21e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010e78:	2308      	movs	r3, #8
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e21a      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010e80:	2310      	movs	r3, #16
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e216      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010e88:	2320      	movs	r3, #32
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e212      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010e90:	2340      	movs	r3, #64	; 0x40
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e20e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010e98:	2380      	movs	r3, #128	; 0x80
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e20a      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4a69      	ldr	r2, [pc, #420]	; (801104c <UART_SetConfig+0x33c>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d130      	bne.n	8010f0c <UART_SetConfig+0x1fc>
 8010eaa:	4b67      	ldr	r3, [pc, #412]	; (8011048 <UART_SetConfig+0x338>)
 8010eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eae:	f003 0307 	and.w	r3, r3, #7
 8010eb2:	2b05      	cmp	r3, #5
 8010eb4:	d826      	bhi.n	8010f04 <UART_SetConfig+0x1f4>
 8010eb6:	a201      	add	r2, pc, #4	; (adr r2, 8010ebc <UART_SetConfig+0x1ac>)
 8010eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ebc:	08010ed5 	.word	0x08010ed5
 8010ec0:	08010edd 	.word	0x08010edd
 8010ec4:	08010ee5 	.word	0x08010ee5
 8010ec8:	08010eed 	.word	0x08010eed
 8010ecc:	08010ef5 	.word	0x08010ef5
 8010ed0:	08010efd 	.word	0x08010efd
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e1ec      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010edc:	2304      	movs	r3, #4
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e1e8      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010ee4:	2308      	movs	r3, #8
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e1e4      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010eec:	2310      	movs	r3, #16
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e1e0      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010ef4:	2320      	movs	r3, #32
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e1dc      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010efc:	2340      	movs	r3, #64	; 0x40
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f02:	e1d8      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f04:	2380      	movs	r3, #128	; 0x80
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e1d4      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4a4f      	ldr	r2, [pc, #316]	; (8011050 <UART_SetConfig+0x340>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d130      	bne.n	8010f78 <UART_SetConfig+0x268>
 8010f16:	4b4c      	ldr	r3, [pc, #304]	; (8011048 <UART_SetConfig+0x338>)
 8010f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f1a:	f003 0307 	and.w	r3, r3, #7
 8010f1e:	2b05      	cmp	r3, #5
 8010f20:	d826      	bhi.n	8010f70 <UART_SetConfig+0x260>
 8010f22:	a201      	add	r2, pc, #4	; (adr r2, 8010f28 <UART_SetConfig+0x218>)
 8010f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f28:	08010f41 	.word	0x08010f41
 8010f2c:	08010f49 	.word	0x08010f49
 8010f30:	08010f51 	.word	0x08010f51
 8010f34:	08010f59 	.word	0x08010f59
 8010f38:	08010f61 	.word	0x08010f61
 8010f3c:	08010f69 	.word	0x08010f69
 8010f40:	2300      	movs	r3, #0
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e1b6      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f48:	2304      	movs	r3, #4
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e1b2      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f50:	2308      	movs	r3, #8
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e1ae      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f58:	2310      	movs	r3, #16
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e1aa      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f60:	2320      	movs	r3, #32
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e1a6      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f68:	2340      	movs	r3, #64	; 0x40
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6e:	e1a2      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f70:	2380      	movs	r3, #128	; 0x80
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f76:	e19e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4a35      	ldr	r2, [pc, #212]	; (8011054 <UART_SetConfig+0x344>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d130      	bne.n	8010fe4 <UART_SetConfig+0x2d4>
 8010f82:	4b31      	ldr	r3, [pc, #196]	; (8011048 <UART_SetConfig+0x338>)
 8010f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f86:	f003 0307 	and.w	r3, r3, #7
 8010f8a:	2b05      	cmp	r3, #5
 8010f8c:	d826      	bhi.n	8010fdc <UART_SetConfig+0x2cc>
 8010f8e:	a201      	add	r2, pc, #4	; (adr r2, 8010f94 <UART_SetConfig+0x284>)
 8010f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f94:	08010fad 	.word	0x08010fad
 8010f98:	08010fb5 	.word	0x08010fb5
 8010f9c:	08010fbd 	.word	0x08010fbd
 8010fa0:	08010fc5 	.word	0x08010fc5
 8010fa4:	08010fcd 	.word	0x08010fcd
 8010fa8:	08010fd5 	.word	0x08010fd5
 8010fac:	2300      	movs	r3, #0
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb2:	e180      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fb4:	2304      	movs	r3, #4
 8010fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fba:	e17c      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fbc:	2308      	movs	r3, #8
 8010fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc2:	e178      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fc4:	2310      	movs	r3, #16
 8010fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fca:	e174      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fcc:	2320      	movs	r3, #32
 8010fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd2:	e170      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fd4:	2340      	movs	r3, #64	; 0x40
 8010fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fda:	e16c      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fdc:	2380      	movs	r3, #128	; 0x80
 8010fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe2:	e168      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4a1b      	ldr	r2, [pc, #108]	; (8011058 <UART_SetConfig+0x348>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d142      	bne.n	8011074 <UART_SetConfig+0x364>
 8010fee:	4b16      	ldr	r3, [pc, #88]	; (8011048 <UART_SetConfig+0x338>)
 8010ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff2:	f003 0307 	and.w	r3, r3, #7
 8010ff6:	2b05      	cmp	r3, #5
 8010ff8:	d838      	bhi.n	801106c <UART_SetConfig+0x35c>
 8010ffa:	a201      	add	r2, pc, #4	; (adr r2, 8011000 <UART_SetConfig+0x2f0>)
 8010ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011000:	08011019 	.word	0x08011019
 8011004:	08011021 	.word	0x08011021
 8011008:	08011029 	.word	0x08011029
 801100c:	08011031 	.word	0x08011031
 8011010:	0801105d 	.word	0x0801105d
 8011014:	08011065 	.word	0x08011065
 8011018:	2300      	movs	r3, #0
 801101a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101e:	e14a      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011020:	2304      	movs	r3, #4
 8011022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011026:	e146      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011028:	2308      	movs	r3, #8
 801102a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102e:	e142      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011030:	2310      	movs	r3, #16
 8011032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011036:	e13e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011038:	cfff69f3 	.word	0xcfff69f3
 801103c:	58000c00 	.word	0x58000c00
 8011040:	11fff4ff 	.word	0x11fff4ff
 8011044:	40011000 	.word	0x40011000
 8011048:	58024400 	.word	0x58024400
 801104c:	40004400 	.word	0x40004400
 8011050:	40004800 	.word	0x40004800
 8011054:	40004c00 	.word	0x40004c00
 8011058:	40005000 	.word	0x40005000
 801105c:	2320      	movs	r3, #32
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e128      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011064:	2340      	movs	r3, #64	; 0x40
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e124      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801106c:	2380      	movs	r3, #128	; 0x80
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e120      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4acb      	ldr	r2, [pc, #812]	; (80113a8 <UART_SetConfig+0x698>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d176      	bne.n	801116c <UART_SetConfig+0x45c>
 801107e:	4bcb      	ldr	r3, [pc, #812]	; (80113ac <UART_SetConfig+0x69c>)
 8011080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011086:	2b28      	cmp	r3, #40	; 0x28
 8011088:	d86c      	bhi.n	8011164 <UART_SetConfig+0x454>
 801108a:	a201      	add	r2, pc, #4	; (adr r2, 8011090 <UART_SetConfig+0x380>)
 801108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011090:	08011135 	.word	0x08011135
 8011094:	08011165 	.word	0x08011165
 8011098:	08011165 	.word	0x08011165
 801109c:	08011165 	.word	0x08011165
 80110a0:	08011165 	.word	0x08011165
 80110a4:	08011165 	.word	0x08011165
 80110a8:	08011165 	.word	0x08011165
 80110ac:	08011165 	.word	0x08011165
 80110b0:	0801113d 	.word	0x0801113d
 80110b4:	08011165 	.word	0x08011165
 80110b8:	08011165 	.word	0x08011165
 80110bc:	08011165 	.word	0x08011165
 80110c0:	08011165 	.word	0x08011165
 80110c4:	08011165 	.word	0x08011165
 80110c8:	08011165 	.word	0x08011165
 80110cc:	08011165 	.word	0x08011165
 80110d0:	08011145 	.word	0x08011145
 80110d4:	08011165 	.word	0x08011165
 80110d8:	08011165 	.word	0x08011165
 80110dc:	08011165 	.word	0x08011165
 80110e0:	08011165 	.word	0x08011165
 80110e4:	08011165 	.word	0x08011165
 80110e8:	08011165 	.word	0x08011165
 80110ec:	08011165 	.word	0x08011165
 80110f0:	0801114d 	.word	0x0801114d
 80110f4:	08011165 	.word	0x08011165
 80110f8:	08011165 	.word	0x08011165
 80110fc:	08011165 	.word	0x08011165
 8011100:	08011165 	.word	0x08011165
 8011104:	08011165 	.word	0x08011165
 8011108:	08011165 	.word	0x08011165
 801110c:	08011165 	.word	0x08011165
 8011110:	08011155 	.word	0x08011155
 8011114:	08011165 	.word	0x08011165
 8011118:	08011165 	.word	0x08011165
 801111c:	08011165 	.word	0x08011165
 8011120:	08011165 	.word	0x08011165
 8011124:	08011165 	.word	0x08011165
 8011128:	08011165 	.word	0x08011165
 801112c:	08011165 	.word	0x08011165
 8011130:	0801115d 	.word	0x0801115d
 8011134:	2301      	movs	r3, #1
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e0bc      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801113c:	2304      	movs	r3, #4
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e0b8      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011144:	2308      	movs	r3, #8
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e0b4      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801114c:	2310      	movs	r3, #16
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011152:	e0b0      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011154:	2320      	movs	r3, #32
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115a:	e0ac      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801115c:	2340      	movs	r3, #64	; 0x40
 801115e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011162:	e0a8      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011164:	2380      	movs	r3, #128	; 0x80
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116a:	e0a4      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4a8f      	ldr	r2, [pc, #572]	; (80113b0 <UART_SetConfig+0x6a0>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d130      	bne.n	80111d8 <UART_SetConfig+0x4c8>
 8011176:	4b8d      	ldr	r3, [pc, #564]	; (80113ac <UART_SetConfig+0x69c>)
 8011178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801117a:	f003 0307 	and.w	r3, r3, #7
 801117e:	2b05      	cmp	r3, #5
 8011180:	d826      	bhi.n	80111d0 <UART_SetConfig+0x4c0>
 8011182:	a201      	add	r2, pc, #4	; (adr r2, 8011188 <UART_SetConfig+0x478>)
 8011184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011188:	080111a1 	.word	0x080111a1
 801118c:	080111a9 	.word	0x080111a9
 8011190:	080111b1 	.word	0x080111b1
 8011194:	080111b9 	.word	0x080111b9
 8011198:	080111c1 	.word	0x080111c1
 801119c:	080111c9 	.word	0x080111c9
 80111a0:	2300      	movs	r3, #0
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e086      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111a8:	2304      	movs	r3, #4
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e082      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111b0:	2308      	movs	r3, #8
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b6:	e07e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111b8:	2310      	movs	r3, #16
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111be:	e07a      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111c0:	2320      	movs	r3, #32
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e076      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111c8:	2340      	movs	r3, #64	; 0x40
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ce:	e072      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111d0:	2380      	movs	r3, #128	; 0x80
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d6:	e06e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4a75      	ldr	r2, [pc, #468]	; (80113b4 <UART_SetConfig+0x6a4>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d130      	bne.n	8011244 <UART_SetConfig+0x534>
 80111e2:	4b72      	ldr	r3, [pc, #456]	; (80113ac <UART_SetConfig+0x69c>)
 80111e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111e6:	f003 0307 	and.w	r3, r3, #7
 80111ea:	2b05      	cmp	r3, #5
 80111ec:	d826      	bhi.n	801123c <UART_SetConfig+0x52c>
 80111ee:	a201      	add	r2, pc, #4	; (adr r2, 80111f4 <UART_SetConfig+0x4e4>)
 80111f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f4:	0801120d 	.word	0x0801120d
 80111f8:	08011215 	.word	0x08011215
 80111fc:	0801121d 	.word	0x0801121d
 8011200:	08011225 	.word	0x08011225
 8011204:	0801122d 	.word	0x0801122d
 8011208:	08011235 	.word	0x08011235
 801120c:	2300      	movs	r3, #0
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e050      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011214:	2304      	movs	r3, #4
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e04c      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801121c:	2308      	movs	r3, #8
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e048      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011224:	2310      	movs	r3, #16
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e044      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801122c:	2320      	movs	r3, #32
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e040      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011234:	2340      	movs	r3, #64	; 0x40
 8011236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123a:	e03c      	b.n	80112b6 <UART_SetConfig+0x5a6>
 801123c:	2380      	movs	r3, #128	; 0x80
 801123e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011242:	e038      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a5b      	ldr	r2, [pc, #364]	; (80113b8 <UART_SetConfig+0x6a8>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d130      	bne.n	80112b0 <UART_SetConfig+0x5a0>
 801124e:	4b57      	ldr	r3, [pc, #348]	; (80113ac <UART_SetConfig+0x69c>)
 8011250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011252:	f003 0307 	and.w	r3, r3, #7
 8011256:	2b05      	cmp	r3, #5
 8011258:	d826      	bhi.n	80112a8 <UART_SetConfig+0x598>
 801125a:	a201      	add	r2, pc, #4	; (adr r2, 8011260 <UART_SetConfig+0x550>)
 801125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011260:	08011279 	.word	0x08011279
 8011264:	08011281 	.word	0x08011281
 8011268:	08011289 	.word	0x08011289
 801126c:	08011291 	.word	0x08011291
 8011270:	08011299 	.word	0x08011299
 8011274:	080112a1 	.word	0x080112a1
 8011278:	2302      	movs	r3, #2
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e01a      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011280:	2304      	movs	r3, #4
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e016      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011288:	2308      	movs	r3, #8
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128e:	e012      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011290:	2310      	movs	r3, #16
 8011292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011296:	e00e      	b.n	80112b6 <UART_SetConfig+0x5a6>
 8011298:	2320      	movs	r3, #32
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129e:	e00a      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80112a0:	2340      	movs	r3, #64	; 0x40
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e006      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80112a8:	2380      	movs	r3, #128	; 0x80
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e002      	b.n	80112b6 <UART_SetConfig+0x5a6>
 80112b0:	2380      	movs	r3, #128	; 0x80
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	4a3f      	ldr	r2, [pc, #252]	; (80113b8 <UART_SetConfig+0x6a8>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	f040 80f8 	bne.w	80114b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80112c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112c6:	2b20      	cmp	r3, #32
 80112c8:	dc46      	bgt.n	8011358 <UART_SetConfig+0x648>
 80112ca:	2b02      	cmp	r3, #2
 80112cc:	f2c0 8082 	blt.w	80113d4 <UART_SetConfig+0x6c4>
 80112d0:	3b02      	subs	r3, #2
 80112d2:	2b1e      	cmp	r3, #30
 80112d4:	d87e      	bhi.n	80113d4 <UART_SetConfig+0x6c4>
 80112d6:	a201      	add	r2, pc, #4	; (adr r2, 80112dc <UART_SetConfig+0x5cc>)
 80112d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112dc:	0801135f 	.word	0x0801135f
 80112e0:	080113d5 	.word	0x080113d5
 80112e4:	08011367 	.word	0x08011367
 80112e8:	080113d5 	.word	0x080113d5
 80112ec:	080113d5 	.word	0x080113d5
 80112f0:	080113d5 	.word	0x080113d5
 80112f4:	08011377 	.word	0x08011377
 80112f8:	080113d5 	.word	0x080113d5
 80112fc:	080113d5 	.word	0x080113d5
 8011300:	080113d5 	.word	0x080113d5
 8011304:	080113d5 	.word	0x080113d5
 8011308:	080113d5 	.word	0x080113d5
 801130c:	080113d5 	.word	0x080113d5
 8011310:	080113d5 	.word	0x080113d5
 8011314:	08011387 	.word	0x08011387
 8011318:	080113d5 	.word	0x080113d5
 801131c:	080113d5 	.word	0x080113d5
 8011320:	080113d5 	.word	0x080113d5
 8011324:	080113d5 	.word	0x080113d5
 8011328:	080113d5 	.word	0x080113d5
 801132c:	080113d5 	.word	0x080113d5
 8011330:	080113d5 	.word	0x080113d5
 8011334:	080113d5 	.word	0x080113d5
 8011338:	080113d5 	.word	0x080113d5
 801133c:	080113d5 	.word	0x080113d5
 8011340:	080113d5 	.word	0x080113d5
 8011344:	080113d5 	.word	0x080113d5
 8011348:	080113d5 	.word	0x080113d5
 801134c:	080113d5 	.word	0x080113d5
 8011350:	080113d5 	.word	0x080113d5
 8011354:	080113c7 	.word	0x080113c7
 8011358:	2b40      	cmp	r3, #64	; 0x40
 801135a:	d037      	beq.n	80113cc <UART_SetConfig+0x6bc>
 801135c:	e03a      	b.n	80113d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801135e:	f7fb fce5 	bl	800cd2c <HAL_RCCEx_GetD3PCLK1Freq>
 8011362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011364:	e03c      	b.n	80113e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801136a:	4618      	mov	r0, r3
 801136c:	f7fb fcf4 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011374:	e034      	b.n	80113e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011376:	f107 0318 	add.w	r3, r7, #24
 801137a:	4618      	mov	r0, r3
 801137c:	f7fb fe40 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011384:	e02c      	b.n	80113e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011386:	4b09      	ldr	r3, [pc, #36]	; (80113ac <UART_SetConfig+0x69c>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	f003 0320 	and.w	r3, r3, #32
 801138e:	2b00      	cmp	r3, #0
 8011390:	d016      	beq.n	80113c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011392:	4b06      	ldr	r3, [pc, #24]	; (80113ac <UART_SetConfig+0x69c>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	08db      	lsrs	r3, r3, #3
 8011398:	f003 0303 	and.w	r3, r3, #3
 801139c:	4a07      	ldr	r2, [pc, #28]	; (80113bc <UART_SetConfig+0x6ac>)
 801139e:	fa22 f303 	lsr.w	r3, r2, r3
 80113a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113a4:	e01c      	b.n	80113e0 <UART_SetConfig+0x6d0>
 80113a6:	bf00      	nop
 80113a8:	40011400 	.word	0x40011400
 80113ac:	58024400 	.word	0x58024400
 80113b0:	40007800 	.word	0x40007800
 80113b4:	40007c00 	.word	0x40007c00
 80113b8:	58000c00 	.word	0x58000c00
 80113bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80113c0:	4b9d      	ldr	r3, [pc, #628]	; (8011638 <UART_SetConfig+0x928>)
 80113c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113c4:	e00c      	b.n	80113e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113c6:	4b9d      	ldr	r3, [pc, #628]	; (801163c <UART_SetConfig+0x92c>)
 80113c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113ca:	e009      	b.n	80113e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113d2:	e005      	b.n	80113e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80113d4:	2300      	movs	r3, #0
 80113d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113d8:	2301      	movs	r3, #1
 80113da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80113e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	f000 81de 	beq.w	80117a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ec:	4a94      	ldr	r2, [pc, #592]	; (8011640 <UART_SetConfig+0x930>)
 80113ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113f2:	461a      	mov	r2, r3
 80113f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80113fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	685a      	ldr	r2, [r3, #4]
 8011400:	4613      	mov	r3, r2
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	4413      	add	r3, r2
 8011406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011408:	429a      	cmp	r2, r3
 801140a:	d305      	bcc.n	8011418 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011414:	429a      	cmp	r2, r3
 8011416:	d903      	bls.n	8011420 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011418:	2301      	movs	r3, #1
 801141a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801141e:	e1c1      	b.n	80117a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011422:	2200      	movs	r2, #0
 8011424:	60bb      	str	r3, [r7, #8]
 8011426:	60fa      	str	r2, [r7, #12]
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801142c:	4a84      	ldr	r2, [pc, #528]	; (8011640 <UART_SetConfig+0x930>)
 801142e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011432:	b29b      	uxth	r3, r3
 8011434:	2200      	movs	r2, #0
 8011436:	603b      	str	r3, [r7, #0]
 8011438:	607a      	str	r2, [r7, #4]
 801143a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801143e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011442:	f7ee ff4d 	bl	80002e0 <__aeabi_uldivmod>
 8011446:	4602      	mov	r2, r0
 8011448:	460b      	mov	r3, r1
 801144a:	4610      	mov	r0, r2
 801144c:	4619      	mov	r1, r3
 801144e:	f04f 0200 	mov.w	r2, #0
 8011452:	f04f 0300 	mov.w	r3, #0
 8011456:	020b      	lsls	r3, r1, #8
 8011458:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801145c:	0202      	lsls	r2, r0, #8
 801145e:	6979      	ldr	r1, [r7, #20]
 8011460:	6849      	ldr	r1, [r1, #4]
 8011462:	0849      	lsrs	r1, r1, #1
 8011464:	2000      	movs	r0, #0
 8011466:	460c      	mov	r4, r1
 8011468:	4605      	mov	r5, r0
 801146a:	eb12 0804 	adds.w	r8, r2, r4
 801146e:	eb43 0905 	adc.w	r9, r3, r5
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	469a      	mov	sl, r3
 801147a:	4693      	mov	fp, r2
 801147c:	4652      	mov	r2, sl
 801147e:	465b      	mov	r3, fp
 8011480:	4640      	mov	r0, r8
 8011482:	4649      	mov	r1, r9
 8011484:	f7ee ff2c 	bl	80002e0 <__aeabi_uldivmod>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4613      	mov	r3, r2
 801148e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011496:	d308      	bcc.n	80114aa <UART_SetConfig+0x79a>
 8011498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801149e:	d204      	bcs.n	80114aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114a6:	60da      	str	r2, [r3, #12]
 80114a8:	e17c      	b.n	80117a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114b0:	e178      	b.n	80117a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	69db      	ldr	r3, [r3, #28]
 80114b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114ba:	f040 80c5 	bne.w	8011648 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80114be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114c2:	2b20      	cmp	r3, #32
 80114c4:	dc48      	bgt.n	8011558 <UART_SetConfig+0x848>
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	db7b      	blt.n	80115c2 <UART_SetConfig+0x8b2>
 80114ca:	2b20      	cmp	r3, #32
 80114cc:	d879      	bhi.n	80115c2 <UART_SetConfig+0x8b2>
 80114ce:	a201      	add	r2, pc, #4	; (adr r2, 80114d4 <UART_SetConfig+0x7c4>)
 80114d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d4:	0801155f 	.word	0x0801155f
 80114d8:	08011567 	.word	0x08011567
 80114dc:	080115c3 	.word	0x080115c3
 80114e0:	080115c3 	.word	0x080115c3
 80114e4:	0801156f 	.word	0x0801156f
 80114e8:	080115c3 	.word	0x080115c3
 80114ec:	080115c3 	.word	0x080115c3
 80114f0:	080115c3 	.word	0x080115c3
 80114f4:	0801157f 	.word	0x0801157f
 80114f8:	080115c3 	.word	0x080115c3
 80114fc:	080115c3 	.word	0x080115c3
 8011500:	080115c3 	.word	0x080115c3
 8011504:	080115c3 	.word	0x080115c3
 8011508:	080115c3 	.word	0x080115c3
 801150c:	080115c3 	.word	0x080115c3
 8011510:	080115c3 	.word	0x080115c3
 8011514:	0801158f 	.word	0x0801158f
 8011518:	080115c3 	.word	0x080115c3
 801151c:	080115c3 	.word	0x080115c3
 8011520:	080115c3 	.word	0x080115c3
 8011524:	080115c3 	.word	0x080115c3
 8011528:	080115c3 	.word	0x080115c3
 801152c:	080115c3 	.word	0x080115c3
 8011530:	080115c3 	.word	0x080115c3
 8011534:	080115c3 	.word	0x080115c3
 8011538:	080115c3 	.word	0x080115c3
 801153c:	080115c3 	.word	0x080115c3
 8011540:	080115c3 	.word	0x080115c3
 8011544:	080115c3 	.word	0x080115c3
 8011548:	080115c3 	.word	0x080115c3
 801154c:	080115c3 	.word	0x080115c3
 8011550:	080115c3 	.word	0x080115c3
 8011554:	080115b5 	.word	0x080115b5
 8011558:	2b40      	cmp	r3, #64	; 0x40
 801155a:	d02e      	beq.n	80115ba <UART_SetConfig+0x8aa>
 801155c:	e031      	b.n	80115c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801155e:	f7f9 fbed 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 8011562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011564:	e033      	b.n	80115ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011566:	f7f9 fbff 	bl	800ad68 <HAL_RCC_GetPCLK2Freq>
 801156a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801156c:	e02f      	b.n	80115ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011572:	4618      	mov	r0, r3
 8011574:	f7fb fbf0 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801157c:	e027      	b.n	80115ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801157e:	f107 0318 	add.w	r3, r7, #24
 8011582:	4618      	mov	r0, r3
 8011584:	f7fb fd3c 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801158c:	e01f      	b.n	80115ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801158e:	4b2d      	ldr	r3, [pc, #180]	; (8011644 <UART_SetConfig+0x934>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f003 0320 	and.w	r3, r3, #32
 8011596:	2b00      	cmp	r3, #0
 8011598:	d009      	beq.n	80115ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801159a:	4b2a      	ldr	r3, [pc, #168]	; (8011644 <UART_SetConfig+0x934>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	08db      	lsrs	r3, r3, #3
 80115a0:	f003 0303 	and.w	r3, r3, #3
 80115a4:	4a24      	ldr	r2, [pc, #144]	; (8011638 <UART_SetConfig+0x928>)
 80115a6:	fa22 f303 	lsr.w	r3, r2, r3
 80115aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115ac:	e00f      	b.n	80115ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80115ae:	4b22      	ldr	r3, [pc, #136]	; (8011638 <UART_SetConfig+0x928>)
 80115b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115b2:	e00c      	b.n	80115ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115b4:	4b21      	ldr	r3, [pc, #132]	; (801163c <UART_SetConfig+0x92c>)
 80115b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115b8:	e009      	b.n	80115ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115c0:	e005      	b.n	80115ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80115c2:	2300      	movs	r3, #0
 80115c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115c6:	2301      	movs	r3, #1
 80115c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80115ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f000 80e7 	beq.w	80117a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115da:	4a19      	ldr	r2, [pc, #100]	; (8011640 <UART_SetConfig+0x930>)
 80115dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115e0:	461a      	mov	r2, r3
 80115e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80115e8:	005a      	lsls	r2, r3, #1
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	085b      	lsrs	r3, r3, #1
 80115f0:	441a      	add	r2, r3
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80115fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	2b0f      	cmp	r3, #15
 8011600:	d916      	bls.n	8011630 <UART_SetConfig+0x920>
 8011602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011608:	d212      	bcs.n	8011630 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160c:	b29b      	uxth	r3, r3
 801160e:	f023 030f 	bic.w	r3, r3, #15
 8011612:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	085b      	lsrs	r3, r3, #1
 8011618:	b29b      	uxth	r3, r3
 801161a:	f003 0307 	and.w	r3, r3, #7
 801161e:	b29a      	uxth	r2, r3
 8011620:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011622:	4313      	orrs	r3, r2
 8011624:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801162c:	60da      	str	r2, [r3, #12]
 801162e:	e0b9      	b.n	80117a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011630:	2301      	movs	r3, #1
 8011632:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011636:	e0b5      	b.n	80117a4 <UART_SetConfig+0xa94>
 8011638:	03d09000 	.word	0x03d09000
 801163c:	003d0900 	.word	0x003d0900
 8011640:	080177c8 	.word	0x080177c8
 8011644:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011648:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801164c:	2b20      	cmp	r3, #32
 801164e:	dc49      	bgt.n	80116e4 <UART_SetConfig+0x9d4>
 8011650:	2b00      	cmp	r3, #0
 8011652:	db7c      	blt.n	801174e <UART_SetConfig+0xa3e>
 8011654:	2b20      	cmp	r3, #32
 8011656:	d87a      	bhi.n	801174e <UART_SetConfig+0xa3e>
 8011658:	a201      	add	r2, pc, #4	; (adr r2, 8011660 <UART_SetConfig+0x950>)
 801165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165e:	bf00      	nop
 8011660:	080116eb 	.word	0x080116eb
 8011664:	080116f3 	.word	0x080116f3
 8011668:	0801174f 	.word	0x0801174f
 801166c:	0801174f 	.word	0x0801174f
 8011670:	080116fb 	.word	0x080116fb
 8011674:	0801174f 	.word	0x0801174f
 8011678:	0801174f 	.word	0x0801174f
 801167c:	0801174f 	.word	0x0801174f
 8011680:	0801170b 	.word	0x0801170b
 8011684:	0801174f 	.word	0x0801174f
 8011688:	0801174f 	.word	0x0801174f
 801168c:	0801174f 	.word	0x0801174f
 8011690:	0801174f 	.word	0x0801174f
 8011694:	0801174f 	.word	0x0801174f
 8011698:	0801174f 	.word	0x0801174f
 801169c:	0801174f 	.word	0x0801174f
 80116a0:	0801171b 	.word	0x0801171b
 80116a4:	0801174f 	.word	0x0801174f
 80116a8:	0801174f 	.word	0x0801174f
 80116ac:	0801174f 	.word	0x0801174f
 80116b0:	0801174f 	.word	0x0801174f
 80116b4:	0801174f 	.word	0x0801174f
 80116b8:	0801174f 	.word	0x0801174f
 80116bc:	0801174f 	.word	0x0801174f
 80116c0:	0801174f 	.word	0x0801174f
 80116c4:	0801174f 	.word	0x0801174f
 80116c8:	0801174f 	.word	0x0801174f
 80116cc:	0801174f 	.word	0x0801174f
 80116d0:	0801174f 	.word	0x0801174f
 80116d4:	0801174f 	.word	0x0801174f
 80116d8:	0801174f 	.word	0x0801174f
 80116dc:	0801174f 	.word	0x0801174f
 80116e0:	08011741 	.word	0x08011741
 80116e4:	2b40      	cmp	r3, #64	; 0x40
 80116e6:	d02e      	beq.n	8011746 <UART_SetConfig+0xa36>
 80116e8:	e031      	b.n	801174e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116ea:	f7f9 fb27 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 80116ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116f0:	e033      	b.n	801175a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116f2:	f7f9 fb39 	bl	800ad68 <HAL_RCC_GetPCLK2Freq>
 80116f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116f8:	e02f      	b.n	801175a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fb fb2a 	bl	800cd58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011708:	e027      	b.n	801175a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801170a:	f107 0318 	add.w	r3, r7, #24
 801170e:	4618      	mov	r0, r3
 8011710:	f7fb fc76 	bl	800d000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011718:	e01f      	b.n	801175a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801171a:	4b2d      	ldr	r3, [pc, #180]	; (80117d0 <UART_SetConfig+0xac0>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f003 0320 	and.w	r3, r3, #32
 8011722:	2b00      	cmp	r3, #0
 8011724:	d009      	beq.n	801173a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011726:	4b2a      	ldr	r3, [pc, #168]	; (80117d0 <UART_SetConfig+0xac0>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	08db      	lsrs	r3, r3, #3
 801172c:	f003 0303 	and.w	r3, r3, #3
 8011730:	4a28      	ldr	r2, [pc, #160]	; (80117d4 <UART_SetConfig+0xac4>)
 8011732:	fa22 f303 	lsr.w	r3, r2, r3
 8011736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011738:	e00f      	b.n	801175a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801173a:	4b26      	ldr	r3, [pc, #152]	; (80117d4 <UART_SetConfig+0xac4>)
 801173c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801173e:	e00c      	b.n	801175a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011740:	4b25      	ldr	r3, [pc, #148]	; (80117d8 <UART_SetConfig+0xac8>)
 8011742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011744:	e009      	b.n	801175a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801174a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801174c:	e005      	b.n	801175a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801174e:	2300      	movs	r3, #0
 8011750:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011752:	2301      	movs	r3, #1
 8011754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011758:	bf00      	nop
    }

    if (pclk != 0U)
 801175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801175c:	2b00      	cmp	r3, #0
 801175e:	d021      	beq.n	80117a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011764:	4a1d      	ldr	r2, [pc, #116]	; (80117dc <UART_SetConfig+0xacc>)
 8011766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801176a:	461a      	mov	r2, r3
 801176c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801176e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	085b      	lsrs	r3, r3, #1
 8011778:	441a      	add	r2, r3
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011782:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011786:	2b0f      	cmp	r3, #15
 8011788:	d909      	bls.n	801179e <UART_SetConfig+0xa8e>
 801178a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011790:	d205      	bcs.n	801179e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011794:	b29a      	uxth	r2, r3
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	60da      	str	r2, [r3, #12]
 801179c:	e002      	b.n	80117a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	2201      	movs	r2, #1
 80117a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	2201      	movs	r2, #1
 80117b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	2200      	movs	r2, #0
 80117b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	2200      	movs	r2, #0
 80117be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80117c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3748      	adds	r7, #72	; 0x48
 80117c8:	46bd      	mov	sp, r7
 80117ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117ce:	bf00      	nop
 80117d0:	58024400 	.word	0x58024400
 80117d4:	03d09000 	.word	0x03d09000
 80117d8:	003d0900 	.word	0x003d0900
 80117dc:	080177c8 	.word	0x080177c8

080117e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ec:	f003 0308 	and.w	r3, r3, #8
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d00a      	beq.n	801180a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	430a      	orrs	r2, r1
 8011808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801180e:	f003 0301 	and.w	r3, r3, #1
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00a      	beq.n	801182c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	430a      	orrs	r2, r1
 801182a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011830:	f003 0302 	and.w	r3, r3, #2
 8011834:	2b00      	cmp	r3, #0
 8011836:	d00a      	beq.n	801184e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	430a      	orrs	r2, r1
 801184c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011852:	f003 0304 	and.w	r3, r3, #4
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00a      	beq.n	8011870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	430a      	orrs	r2, r1
 801186e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011874:	f003 0310 	and.w	r3, r3, #16
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00a      	beq.n	8011892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	430a      	orrs	r2, r1
 8011890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011896:	f003 0320 	and.w	r3, r3, #32
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00a      	beq.n	80118b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	430a      	orrs	r2, r1
 80118b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d01a      	beq.n	80118f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	430a      	orrs	r2, r1
 80118d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118de:	d10a      	bne.n	80118f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	430a      	orrs	r2, r1
 80118f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d00a      	beq.n	8011918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	430a      	orrs	r2, r1
 8011916:	605a      	str	r2, [r3, #4]
  }
}
 8011918:	bf00      	nop
 801191a:	370c      	adds	r7, #12
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b098      	sub	sp, #96	; 0x60
 8011928:	af02      	add	r7, sp, #8
 801192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011934:	f7f2 fa74 	bl	8003e20 <HAL_GetTick>
 8011938:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f003 0308 	and.w	r3, r3, #8
 8011944:	2b08      	cmp	r3, #8
 8011946:	d12f      	bne.n	80119a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011950:	2200      	movs	r2, #0
 8011952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 f88e 	bl	8011a78 <UART_WaitOnFlagUntilTimeout>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d022      	beq.n	80119a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196a:	e853 3f00 	ldrex	r3, [r3]
 801196e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011976:	653b      	str	r3, [r7, #80]	; 0x50
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	461a      	mov	r2, r3
 801197e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011980:	647b      	str	r3, [r7, #68]	; 0x44
 8011982:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011984:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011988:	e841 2300 	strex	r3, r2, [r1]
 801198c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1e6      	bne.n	8011962 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2220      	movs	r2, #32
 8011998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119a4:	2303      	movs	r3, #3
 80119a6:	e063      	b.n	8011a70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f003 0304 	and.w	r3, r3, #4
 80119b2:	2b04      	cmp	r3, #4
 80119b4:	d149      	bne.n	8011a4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119be:	2200      	movs	r2, #0
 80119c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 f857 	bl	8011a78 <UART_WaitOnFlagUntilTimeout>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d03c      	beq.n	8011a4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	e853 3f00 	ldrex	r3, [r3]
 80119dc:	623b      	str	r3, [r7, #32]
   return(result);
 80119de:	6a3b      	ldr	r3, [r7, #32]
 80119e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ee:	633b      	str	r3, [r7, #48]	; 0x30
 80119f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119f6:	e841 2300 	strex	r3, r2, [r1]
 80119fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80119fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1e6      	bne.n	80119d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3308      	adds	r3, #8
 8011a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	e853 3f00 	ldrex	r3, [r3]
 8011a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f023 0301 	bic.w	r3, r3, #1
 8011a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	3308      	adds	r3, #8
 8011a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a22:	61fa      	str	r2, [r7, #28]
 8011a24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a26:	69b9      	ldr	r1, [r7, #24]
 8011a28:	69fa      	ldr	r2, [r7, #28]
 8011a2a:	e841 2300 	strex	r3, r2, [r1]
 8011a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1e5      	bne.n	8011a02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2220      	movs	r2, #32
 8011a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2200      	movs	r2, #0
 8011a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a46:	2303      	movs	r3, #3
 8011a48:	e012      	b.n	8011a70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2220      	movs	r2, #32
 8011a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2220      	movs	r2, #32
 8011a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2200      	movs	r2, #0
 8011a64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a6e:	2300      	movs	r3, #0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3758      	adds	r7, #88	; 0x58
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	603b      	str	r3, [r7, #0]
 8011a84:	4613      	mov	r3, r2
 8011a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a88:	e04f      	b.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a90:	d04b      	beq.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a92:	f7f2 f9c5 	bl	8003e20 <HAL_GetTick>
 8011a96:	4602      	mov	r2, r0
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	69ba      	ldr	r2, [r7, #24]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d302      	bcc.n	8011aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d101      	bne.n	8011aac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011aa8:	2303      	movs	r3, #3
 8011aaa:	e04e      	b.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f003 0304 	and.w	r3, r3, #4
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d037      	beq.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	2b80      	cmp	r3, #128	; 0x80
 8011abe:	d034      	beq.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	2b40      	cmp	r3, #64	; 0x40
 8011ac4:	d031      	beq.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	69db      	ldr	r3, [r3, #28]
 8011acc:	f003 0308 	and.w	r3, r3, #8
 8011ad0:	2b08      	cmp	r3, #8
 8011ad2:	d110      	bne.n	8011af6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2208      	movs	r2, #8
 8011ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f000 f99d 	bl	8011e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2208      	movs	r2, #8
 8011ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2200      	movs	r2, #0
 8011aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011af2:	2301      	movs	r3, #1
 8011af4:	e029      	b.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	69db      	ldr	r3, [r3, #28]
 8011afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b04:	d111      	bne.n	8011b2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	f000 f983 	bl	8011e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2220      	movs	r2, #32
 8011b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2200      	movs	r2, #0
 8011b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b26:	2303      	movs	r3, #3
 8011b28:	e00f      	b.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	69da      	ldr	r2, [r3, #28]
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	4013      	ands	r3, r2
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	bf0c      	ite	eq
 8011b3a:	2301      	moveq	r3, #1
 8011b3c:	2300      	movne	r3, #0
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	461a      	mov	r2, r3
 8011b42:	79fb      	ldrb	r3, [r7, #7]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d0a0      	beq.n	8011a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
	...

08011b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b0a3      	sub	sp, #140	; 0x8c
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	88fa      	ldrh	r2, [r7, #6]
 8011b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	88fa      	ldrh	r2, [r7, #6]
 8011b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b86:	d10e      	bne.n	8011ba6 <UART_Start_Receive_IT+0x52>
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	691b      	ldr	r3, [r3, #16]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <UART_Start_Receive_IT+0x48>
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b9a:	e02d      	b.n	8011bf8 <UART_Start_Receive_IT+0xa4>
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	22ff      	movs	r2, #255	; 0xff
 8011ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ba4:	e028      	b.n	8011bf8 <UART_Start_Receive_IT+0xa4>
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	689b      	ldr	r3, [r3, #8]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10d      	bne.n	8011bca <UART_Start_Receive_IT+0x76>
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	691b      	ldr	r3, [r3, #16]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d104      	bne.n	8011bc0 <UART_Start_Receive_IT+0x6c>
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	22ff      	movs	r2, #255	; 0xff
 8011bba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bbe:	e01b      	b.n	8011bf8 <UART_Start_Receive_IT+0xa4>
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	227f      	movs	r2, #127	; 0x7f
 8011bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bc8:	e016      	b.n	8011bf8 <UART_Start_Receive_IT+0xa4>
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	689b      	ldr	r3, [r3, #8]
 8011bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011bd2:	d10d      	bne.n	8011bf0 <UART_Start_Receive_IT+0x9c>
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	691b      	ldr	r3, [r3, #16]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d104      	bne.n	8011be6 <UART_Start_Receive_IT+0x92>
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	227f      	movs	r2, #127	; 0x7f
 8011be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011be4:	e008      	b.n	8011bf8 <UART_Start_Receive_IT+0xa4>
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	223f      	movs	r2, #63	; 0x3f
 8011bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bee:	e003      	b.n	8011bf8 <UART_Start_Receive_IT+0xa4>
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2222      	movs	r2, #34	; 0x22
 8011c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	3308      	adds	r3, #8
 8011c0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c12:	e853 3f00 	ldrex	r3, [r3]
 8011c16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c1a:	f043 0301 	orr.w	r3, r3, #1
 8011c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	3308      	adds	r3, #8
 8011c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011c2c:	673a      	str	r2, [r7, #112]	; 0x70
 8011c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011c32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c34:	e841 2300 	strex	r3, r2, [r1]
 8011c38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1e3      	bne.n	8011c08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c48:	d14f      	bne.n	8011cea <UART_Start_Receive_IT+0x196>
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c50:	88fa      	ldrh	r2, [r7, #6]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d349      	bcc.n	8011cea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	689b      	ldr	r3, [r3, #8]
 8011c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c5e:	d107      	bne.n	8011c70 <UART_Start_Receive_IT+0x11c>
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	691b      	ldr	r3, [r3, #16]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d103      	bne.n	8011c70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	4a47      	ldr	r2, [pc, #284]	; (8011d88 <UART_Start_Receive_IT+0x234>)
 8011c6c:	675a      	str	r2, [r3, #116]	; 0x74
 8011c6e:	e002      	b.n	8011c76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	4a46      	ldr	r2, [pc, #280]	; (8011d8c <UART_Start_Receive_IT+0x238>)
 8011c74:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	691b      	ldr	r3, [r3, #16]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d01a      	beq.n	8011cb4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c86:	e853 3f00 	ldrex	r3, [r3]
 8011c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011ca2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011ca6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ca8:	e841 2300 	strex	r3, r2, [r1]
 8011cac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e4      	bne.n	8011c7e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	3308      	adds	r3, #8
 8011cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cbe:	e853 3f00 	ldrex	r3, [r3]
 8011cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	3308      	adds	r3, #8
 8011cd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011cd4:	64ba      	str	r2, [r7, #72]	; 0x48
 8011cd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cdc:	e841 2300 	strex	r3, r2, [r1]
 8011ce0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d1e5      	bne.n	8011cb4 <UART_Start_Receive_IT+0x160>
 8011ce8:	e046      	b.n	8011d78 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	689b      	ldr	r3, [r3, #8]
 8011cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011cf2:	d107      	bne.n	8011d04 <UART_Start_Receive_IT+0x1b0>
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	691b      	ldr	r3, [r3, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d103      	bne.n	8011d04 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	4a24      	ldr	r2, [pc, #144]	; (8011d90 <UART_Start_Receive_IT+0x23c>)
 8011d00:	675a      	str	r2, [r3, #116]	; 0x74
 8011d02:	e002      	b.n	8011d0a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	4a23      	ldr	r2, [pc, #140]	; (8011d94 <UART_Start_Receive_IT+0x240>)
 8011d08:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	691b      	ldr	r3, [r3, #16]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d019      	beq.n	8011d46 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1a:	e853 3f00 	ldrex	r3, [r3]
 8011d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011d26:	677b      	str	r3, [r7, #116]	; 0x74
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d30:	637b      	str	r3, [r7, #52]	; 0x34
 8011d32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d38:	e841 2300 	strex	r3, r2, [r1]
 8011d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1e6      	bne.n	8011d12 <UART_Start_Receive_IT+0x1be>
 8011d44:	e018      	b.n	8011d78 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	e853 3f00 	ldrex	r3, [r3]
 8011d52:	613b      	str	r3, [r7, #16]
   return(result);
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	f043 0320 	orr.w	r3, r3, #32
 8011d5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	461a      	mov	r2, r3
 8011d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d64:	623b      	str	r3, [r7, #32]
 8011d66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d68:	69f9      	ldr	r1, [r7, #28]
 8011d6a:	6a3a      	ldr	r2, [r7, #32]
 8011d6c:	e841 2300 	strex	r3, r2, [r1]
 8011d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d1e6      	bne.n	8011d46 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011d78:	2300      	movs	r3, #0
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	378c      	adds	r7, #140	; 0x8c
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr
 8011d86:	bf00      	nop
 8011d88:	0801276d 	.word	0x0801276d
 8011d8c:	0801240d 	.word	0x0801240d
 8011d90:	08012255 	.word	0x08012255
 8011d94:	0801209d 	.word	0x0801209d

08011d98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b08f      	sub	sp, #60	; 0x3c
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011da6:	6a3b      	ldr	r3, [r7, #32]
 8011da8:	e853 3f00 	ldrex	r3, [r3]
 8011dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011db4:	637b      	str	r3, [r7, #52]	; 0x34
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	461a      	mov	r2, r3
 8011dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dc0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dc6:	e841 2300 	strex	r3, r2, [r1]
 8011dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1e6      	bne.n	8011da0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	3308      	adds	r3, #8
 8011dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	e853 3f00 	ldrex	r3, [r3]
 8011de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011de8:	633b      	str	r3, [r7, #48]	; 0x30
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	3308      	adds	r3, #8
 8011df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011df2:	61ba      	str	r2, [r7, #24]
 8011df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011df6:	6979      	ldr	r1, [r7, #20]
 8011df8:	69ba      	ldr	r2, [r7, #24]
 8011dfa:	e841 2300 	strex	r3, r2, [r1]
 8011dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d1e5      	bne.n	8011dd2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2220      	movs	r2, #32
 8011e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011e0e:	bf00      	nop
 8011e10:	373c      	adds	r7, #60	; 0x3c
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr
	...

08011e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b095      	sub	sp, #84	; 0x54
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e2c:	e853 3f00 	ldrex	r3, [r3]
 8011e30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e42:	643b      	str	r3, [r7, #64]	; 0x40
 8011e44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e4a:	e841 2300 	strex	r3, r2, [r1]
 8011e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1e6      	bne.n	8011e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	3308      	adds	r3, #8
 8011e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	e853 3f00 	ldrex	r3, [r3]
 8011e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e66:	69fa      	ldr	r2, [r7, #28]
 8011e68:	4b1e      	ldr	r3, [pc, #120]	; (8011ee4 <UART_EndRxTransfer+0xc8>)
 8011e6a:	4013      	ands	r3, r2
 8011e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	3308      	adds	r3, #8
 8011e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e7e:	e841 2300 	strex	r3, r2, [r1]
 8011e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1e5      	bne.n	8011e56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d118      	bne.n	8011ec4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	e853 3f00 	ldrex	r3, [r3]
 8011e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	f023 0310 	bic.w	r3, r3, #16
 8011ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	461a      	mov	r2, r3
 8011eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eb0:	61bb      	str	r3, [r7, #24]
 8011eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb4:	6979      	ldr	r1, [r7, #20]
 8011eb6:	69ba      	ldr	r2, [r7, #24]
 8011eb8:	e841 2300 	strex	r3, r2, [r1]
 8011ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1e6      	bne.n	8011e92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2220      	movs	r2, #32
 8011ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011ed8:	bf00      	nop
 8011eda:	3754      	adds	r7, #84	; 0x54
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	effffffe 	.word	0xeffffffe

08011ee8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b090      	sub	sp, #64	; 0x40
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ef4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011efe:	d037      	beq.n	8011f70 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f02:	2200      	movs	r2, #0
 8011f04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	3308      	adds	r3, #8
 8011f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	e853 3f00 	ldrex	r3, [r3]
 8011f16:	623b      	str	r3, [r7, #32]
   return(result);
 8011f18:	6a3b      	ldr	r3, [r7, #32]
 8011f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	3308      	adds	r3, #8
 8011f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f28:	633a      	str	r2, [r7, #48]	; 0x30
 8011f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f30:	e841 2300 	strex	r3, r2, [r1]
 8011f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1e5      	bne.n	8011f08 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	e853 3f00 	ldrex	r3, [r3]
 8011f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f50:	637b      	str	r3, [r7, #52]	; 0x34
 8011f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	461a      	mov	r2, r3
 8011f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f5a:	61fb      	str	r3, [r7, #28]
 8011f5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5e:	69b9      	ldr	r1, [r7, #24]
 8011f60:	69fa      	ldr	r2, [r7, #28]
 8011f62:	e841 2300 	strex	r3, r2, [r1]
 8011f66:	617b      	str	r3, [r7, #20]
   return(result);
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1e6      	bne.n	8011f3c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f6e:	e002      	b.n	8011f76 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011f70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f72:	f7f0 f9a7 	bl	80022c4 <HAL_UART_TxCpltCallback>
}
 8011f76:	bf00      	nop
 8011f78:	3740      	adds	r7, #64	; 0x40
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f7fe fe9f 	bl	8010cd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f92:	bf00      	nop
 8011f94:	3710      	adds	r7, #16
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}

08011f9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011f9a:	b580      	push	{r7, lr}
 8011f9c:	b086      	sub	sp, #24
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	689b      	ldr	r3, [r3, #8]
 8011fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fc2:	2b80      	cmp	r3, #128	; 0x80
 8011fc4:	d109      	bne.n	8011fda <UART_DMAError+0x40>
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	2b21      	cmp	r3, #33	; 0x21
 8011fca:	d106      	bne.n	8011fda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011fd4:	6978      	ldr	r0, [r7, #20]
 8011fd6:	f7ff fedf 	bl	8011d98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	689b      	ldr	r3, [r3, #8]
 8011fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe4:	2b40      	cmp	r3, #64	; 0x40
 8011fe6:	d109      	bne.n	8011ffc <UART_DMAError+0x62>
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2b22      	cmp	r3, #34	; 0x22
 8011fec:	d106      	bne.n	8011ffc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011ff6:	6978      	ldr	r0, [r7, #20]
 8011ff8:	f7ff ff10 	bl	8011e1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012002:	f043 0210 	orr.w	r2, r3, #16
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801200c:	6978      	ldr	r0, [r7, #20]
 801200e:	f7fe fe69 	bl	8010ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012012:	bf00      	nop
 8012014:	3718      	adds	r7, #24
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b084      	sub	sp, #16
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2200      	movs	r2, #0
 801202c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2200      	movs	r2, #0
 8012034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f7fe fe53 	bl	8010ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801203e:	bf00      	nop
 8012040:	3710      	adds	r7, #16
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}

08012046 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012046:	b580      	push	{r7, lr}
 8012048:	b088      	sub	sp, #32
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	e853 3f00 	ldrex	r3, [r3]
 801205a:	60bb      	str	r3, [r7, #8]
   return(result);
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012062:	61fb      	str	r3, [r7, #28]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	461a      	mov	r2, r3
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	61bb      	str	r3, [r7, #24]
 801206e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012070:	6979      	ldr	r1, [r7, #20]
 8012072:	69ba      	ldr	r2, [r7, #24]
 8012074:	e841 2300 	strex	r3, r2, [r1]
 8012078:	613b      	str	r3, [r7, #16]
   return(result);
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1e6      	bne.n	801204e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2220      	movs	r2, #32
 8012084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7f0 f918 	bl	80022c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012094:	bf00      	nop
 8012096:	3720      	adds	r7, #32
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b09c      	sub	sp, #112	; 0x70
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120b4:	2b22      	cmp	r3, #34	; 0x22
 80120b6:	f040 80be 	bne.w	8012236 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80120c8:	b2d9      	uxtb	r1, r3
 80120ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120d4:	400a      	ands	r2, r1
 80120d6:	b2d2      	uxtb	r2, r2
 80120d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120de:	1c5a      	adds	r2, r3, #1
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	3b01      	subs	r3, #1
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f040 80a1 	bne.w	8012246 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801210c:	e853 3f00 	ldrex	r3, [r3]
 8012110:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012118:	66bb      	str	r3, [r7, #104]	; 0x68
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	461a      	mov	r2, r3
 8012120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012122:	65bb      	str	r3, [r7, #88]	; 0x58
 8012124:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012126:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801212a:	e841 2300 	strex	r3, r2, [r1]
 801212e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1e6      	bne.n	8012104 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	3308      	adds	r3, #8
 801213c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012140:	e853 3f00 	ldrex	r3, [r3]
 8012144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012148:	f023 0301 	bic.w	r3, r3, #1
 801214c:	667b      	str	r3, [r7, #100]	; 0x64
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	3308      	adds	r3, #8
 8012154:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012156:	647a      	str	r2, [r7, #68]	; 0x44
 8012158:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801215a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801215c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801215e:	e841 2300 	strex	r3, r2, [r1]
 8012162:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1e5      	bne.n	8012136 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2220      	movs	r2, #32
 801216e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	4a33      	ldr	r2, [pc, #204]	; (8012250 <UART_RxISR_8BIT+0x1b4>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d01f      	beq.n	80121c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012192:	2b00      	cmp	r3, #0
 8012194:	d018      	beq.n	80121c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	e853 3f00 	ldrex	r3, [r3]
 80121a2:	623b      	str	r3, [r7, #32]
   return(result);
 80121a4:	6a3b      	ldr	r3, [r7, #32]
 80121a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80121aa:	663b      	str	r3, [r7, #96]	; 0x60
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	461a      	mov	r2, r3
 80121b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121b4:	633b      	str	r3, [r7, #48]	; 0x30
 80121b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121bc:	e841 2300 	strex	r3, r2, [r1]
 80121c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1e6      	bne.n	8012196 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d12e      	bne.n	801222e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	e853 3f00 	ldrex	r3, [r3]
 80121e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f023 0310 	bic.w	r3, r3, #16
 80121ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	461a      	mov	r2, r3
 80121f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121f4:	61fb      	str	r3, [r7, #28]
 80121f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121f8:	69b9      	ldr	r1, [r7, #24]
 80121fa:	69fa      	ldr	r2, [r7, #28]
 80121fc:	e841 2300 	strex	r3, r2, [r1]
 8012200:	617b      	str	r3, [r7, #20]
   return(result);
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1e6      	bne.n	80121d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	69db      	ldr	r3, [r3, #28]
 801220e:	f003 0310 	and.w	r3, r3, #16
 8012212:	2b10      	cmp	r3, #16
 8012214:	d103      	bne.n	801221e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2210      	movs	r2, #16
 801221c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012224:	4619      	mov	r1, r3
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7fe fd66 	bl	8010cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801222c:	e00b      	b.n	8012246 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ee fa2a 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012234:	e007      	b.n	8012246 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	699a      	ldr	r2, [r3, #24]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f042 0208 	orr.w	r2, r2, #8
 8012244:	619a      	str	r2, [r3, #24]
}
 8012246:	bf00      	nop
 8012248:	3770      	adds	r7, #112	; 0x70
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	58000c00 	.word	0x58000c00

08012254 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b09c      	sub	sp, #112	; 0x70
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012262:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801226c:	2b22      	cmp	r3, #34	; 0x22
 801226e:	f040 80be 	bne.w	80123ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012278:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012280:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012282:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012286:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801228a:	4013      	ands	r3, r2
 801228c:	b29a      	uxth	r2, r3
 801228e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012290:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012296:	1c9a      	adds	r2, r3, #2
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	3b01      	subs	r3, #1
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f040 80a1 	bne.w	80123fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122c4:	e853 3f00 	ldrex	r3, [r3]
 80122c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122d0:	667b      	str	r3, [r7, #100]	; 0x64
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	461a      	mov	r2, r3
 80122d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122da:	657b      	str	r3, [r7, #84]	; 0x54
 80122dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80122e2:	e841 2300 	strex	r3, r2, [r1]
 80122e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d1e6      	bne.n	80122bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	3308      	adds	r3, #8
 80122f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f8:	e853 3f00 	ldrex	r3, [r3]
 80122fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012300:	f023 0301 	bic.w	r3, r3, #1
 8012304:	663b      	str	r3, [r7, #96]	; 0x60
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	3308      	adds	r3, #8
 801230c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801230e:	643a      	str	r2, [r7, #64]	; 0x40
 8012310:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012312:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012316:	e841 2300 	strex	r3, r2, [r1]
 801231a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1e5      	bne.n	80122ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2220      	movs	r2, #32
 8012326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	4a33      	ldr	r2, [pc, #204]	; (8012408 <UART_RxISR_16BIT+0x1b4>)
 801233c:	4293      	cmp	r3, r2
 801233e:	d01f      	beq.n	8012380 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801234a:	2b00      	cmp	r3, #0
 801234c:	d018      	beq.n	8012380 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012354:	6a3b      	ldr	r3, [r7, #32]
 8012356:	e853 3f00 	ldrex	r3, [r3]
 801235a:	61fb      	str	r3, [r7, #28]
   return(result);
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	461a      	mov	r2, r3
 801236a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801236c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801236e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012374:	e841 2300 	strex	r3, r2, [r1]
 8012378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1e6      	bne.n	801234e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012384:	2b01      	cmp	r3, #1
 8012386:	d12e      	bne.n	80123e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	e853 3f00 	ldrex	r3, [r3]
 801239a:	60bb      	str	r3, [r7, #8]
   return(result);
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	f023 0310 	bic.w	r3, r3, #16
 80123a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	461a      	mov	r2, r3
 80123aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123ac:	61bb      	str	r3, [r7, #24]
 80123ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b0:	6979      	ldr	r1, [r7, #20]
 80123b2:	69ba      	ldr	r2, [r7, #24]
 80123b4:	e841 2300 	strex	r3, r2, [r1]
 80123b8:	613b      	str	r3, [r7, #16]
   return(result);
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1e6      	bne.n	801238e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	69db      	ldr	r3, [r3, #28]
 80123c6:	f003 0310 	and.w	r3, r3, #16
 80123ca:	2b10      	cmp	r3, #16
 80123cc:	d103      	bne.n	80123d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	2210      	movs	r2, #16
 80123d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123dc:	4619      	mov	r1, r3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7fe fc8a 	bl	8010cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123e4:	e00b      	b.n	80123fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7ee f94e 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80123ec:	e007      	b.n	80123fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	699a      	ldr	r2, [r3, #24]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f042 0208 	orr.w	r2, r2, #8
 80123fc:	619a      	str	r2, [r3, #24]
}
 80123fe:	bf00      	nop
 8012400:	3770      	adds	r7, #112	; 0x70
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	58000c00 	.word	0x58000c00

0801240c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b0ac      	sub	sp, #176	; 0xb0
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801241a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	69db      	ldr	r3, [r3, #28]
 8012424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012442:	2b22      	cmp	r3, #34	; 0x22
 8012444:	f040 8180 	bne.w	8012748 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801244e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012452:	e123      	b.n	801269c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801245e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012462:	b2d9      	uxtb	r1, r3
 8012464:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012468:	b2da      	uxtb	r2, r3
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801246e:	400a      	ands	r2, r1
 8012470:	b2d2      	uxtb	r2, r2
 8012472:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012478:	1c5a      	adds	r2, r3, #1
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012484:	b29b      	uxth	r3, r3
 8012486:	3b01      	subs	r3, #1
 8012488:	b29a      	uxth	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	69db      	ldr	r3, [r3, #28]
 8012496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801249a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801249e:	f003 0307 	and.w	r3, r3, #7
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d053      	beq.n	801254e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80124a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124aa:	f003 0301 	and.w	r3, r3, #1
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d011      	beq.n	80124d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80124b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80124b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00b      	beq.n	80124d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2201      	movs	r2, #1
 80124c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124cc:	f043 0201 	orr.w	r2, r3, #1
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124da:	f003 0302 	and.w	r3, r3, #2
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d011      	beq.n	8012506 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80124e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124e6:	f003 0301 	and.w	r3, r3, #1
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d00b      	beq.n	8012506 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2202      	movs	r2, #2
 80124f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124fc:	f043 0204 	orr.w	r2, r3, #4
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801250a:	f003 0304 	and.w	r3, r3, #4
 801250e:	2b00      	cmp	r3, #0
 8012510:	d011      	beq.n	8012536 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012516:	f003 0301 	and.w	r3, r3, #1
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00b      	beq.n	8012536 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2204      	movs	r2, #4
 8012524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801252c:	f043 0202 	orr.w	r2, r3, #2
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801253c:	2b00      	cmp	r3, #0
 801253e:	d006      	beq.n	801254e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7fe fbcf 	bl	8010ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012554:	b29b      	uxth	r3, r3
 8012556:	2b00      	cmp	r3, #0
 8012558:	f040 80a0 	bne.w	801269c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012564:	e853 3f00 	ldrex	r3, [r3]
 8012568:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801256c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	461a      	mov	r2, r3
 801257a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801257e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012580:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012582:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012584:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012586:	e841 2300 	strex	r3, r2, [r1]
 801258a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801258c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1e4      	bne.n	801255c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	3308      	adds	r3, #8
 8012598:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801259a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801259c:	e853 3f00 	ldrex	r3, [r3]
 80125a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80125a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125a4:	4b6e      	ldr	r3, [pc, #440]	; (8012760 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80125a6:	4013      	ands	r3, r2
 80125a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	3308      	adds	r3, #8
 80125b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80125b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80125b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80125bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125be:	e841 2300 	strex	r3, r2, [r1]
 80125c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80125c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1e3      	bne.n	8012592 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2220      	movs	r2, #32
 80125ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2200      	movs	r2, #0
 80125d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4a60      	ldr	r2, [pc, #384]	; (8012764 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d021      	beq.n	801262c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d01a      	beq.n	801262c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125fe:	e853 3f00 	ldrex	r3, [r3]
 8012602:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801260a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	461a      	mov	r2, r3
 8012614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012618:	657b      	str	r3, [r7, #84]	; 0x54
 801261a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801261c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801261e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012620:	e841 2300 	strex	r3, r2, [r1]
 8012624:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012628:	2b00      	cmp	r3, #0
 801262a:	d1e4      	bne.n	80125f6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012630:	2b01      	cmp	r3, #1
 8012632:	d130      	bne.n	8012696 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012642:	e853 3f00 	ldrex	r3, [r3]
 8012646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264a:	f023 0310 	bic.w	r3, r3, #16
 801264e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	461a      	mov	r2, r3
 8012658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801265c:	643b      	str	r3, [r7, #64]	; 0x40
 801265e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012664:	e841 2300 	strex	r3, r2, [r1]
 8012668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1e4      	bne.n	801263a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	69db      	ldr	r3, [r3, #28]
 8012676:	f003 0310 	and.w	r3, r3, #16
 801267a:	2b10      	cmp	r3, #16
 801267c:	d103      	bne.n	8012686 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2210      	movs	r2, #16
 8012684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801268c:	4619      	mov	r1, r3
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7fe fb32 	bl	8010cf8 <HAL_UARTEx_RxEventCallback>
 8012694:	e002      	b.n	801269c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f7ed fff6 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801269c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d006      	beq.n	80126b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80126a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126a8:	f003 0320 	and.w	r3, r3, #32
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f47f aed1 	bne.w	8012454 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80126bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d049      	beq.n	8012758 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d242      	bcs.n	8012758 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	3308      	adds	r3, #8
 80126d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	e853 3f00 	ldrex	r3, [r3]
 80126e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	3308      	adds	r3, #8
 80126f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80126f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80126f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126fe:	e841 2300 	strex	r3, r2, [r1]
 8012702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1e3      	bne.n	80126d2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a16      	ldr	r2, [pc, #88]	; (8012768 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801270e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	e853 3f00 	ldrex	r3, [r3]
 801271c:	60bb      	str	r3, [r7, #8]
   return(result);
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	f043 0320 	orr.w	r3, r3, #32
 8012724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	461a      	mov	r2, r3
 801272e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012732:	61bb      	str	r3, [r7, #24]
 8012734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012736:	6979      	ldr	r1, [r7, #20]
 8012738:	69ba      	ldr	r2, [r7, #24]
 801273a:	e841 2300 	strex	r3, r2, [r1]
 801273e:	613b      	str	r3, [r7, #16]
   return(result);
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d1e4      	bne.n	8012710 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012746:	e007      	b.n	8012758 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	699a      	ldr	r2, [r3, #24]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f042 0208 	orr.w	r2, r2, #8
 8012756:	619a      	str	r2, [r3, #24]
}
 8012758:	bf00      	nop
 801275a:	37b0      	adds	r7, #176	; 0xb0
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	effffffe 	.word	0xeffffffe
 8012764:	58000c00 	.word	0x58000c00
 8012768:	0801209d 	.word	0x0801209d

0801276c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b0ae      	sub	sp, #184	; 0xb8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801277a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	69db      	ldr	r3, [r3, #28]
 8012784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127a2:	2b22      	cmp	r3, #34	; 0x22
 80127a4:	f040 8184 	bne.w	8012ab0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127ae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127b2:	e127      	b.n	8012a04 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80127c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80127ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80127ce:	4013      	ands	r3, r2
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127dc:	1c9a      	adds	r2, r3, #2
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	3b01      	subs	r3, #1
 80127ec:	b29a      	uxth	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	69db      	ldr	r3, [r3, #28]
 80127fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80127fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012802:	f003 0307 	and.w	r3, r3, #7
 8012806:	2b00      	cmp	r3, #0
 8012808:	d053      	beq.n	80128b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801280a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801280e:	f003 0301 	and.w	r3, r3, #1
 8012812:	2b00      	cmp	r3, #0
 8012814:	d011      	beq.n	801283a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801281e:	2b00      	cmp	r3, #0
 8012820:	d00b      	beq.n	801283a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2201      	movs	r2, #1
 8012828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012830:	f043 0201 	orr.w	r2, r3, #1
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801283a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801283e:	f003 0302 	and.w	r3, r3, #2
 8012842:	2b00      	cmp	r3, #0
 8012844:	d011      	beq.n	801286a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00b      	beq.n	801286a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2202      	movs	r2, #2
 8012858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012860:	f043 0204 	orr.w	r2, r3, #4
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801286a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801286e:	f003 0304 	and.w	r3, r3, #4
 8012872:	2b00      	cmp	r3, #0
 8012874:	d011      	beq.n	801289a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	d00b      	beq.n	801289a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2204      	movs	r2, #4
 8012888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012890:	f043 0202 	orr.w	r2, r3, #2
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d006      	beq.n	80128b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f7fe fa1d 	bl	8010ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f040 80a2 	bne.w	8012a04 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128c8:	e853 3f00 	ldrex	r3, [r3]
 80128cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	461a      	mov	r2, r3
 80128de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128e6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80128ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128ee:	e841 2300 	strex	r3, r2, [r1]
 80128f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80128f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1e2      	bne.n	80128c0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	3308      	adds	r3, #8
 8012900:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012904:	e853 3f00 	ldrex	r3, [r3]
 8012908:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801290a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801290c:	4b6e      	ldr	r3, [pc, #440]	; (8012ac8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801290e:	4013      	ands	r3, r2
 8012910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	3308      	adds	r3, #8
 801291a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801291e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012920:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012926:	e841 2300 	strex	r3, r2, [r1]
 801292a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801292c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1e3      	bne.n	80128fa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2220      	movs	r2, #32
 8012936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2200      	movs	r2, #0
 801293e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2200      	movs	r2, #0
 8012944:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a60      	ldr	r2, [pc, #384]	; (8012acc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d021      	beq.n	8012994 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801295a:	2b00      	cmp	r3, #0
 801295c:	d01a      	beq.n	8012994 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012966:	e853 3f00 	ldrex	r3, [r3]
 801296a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801296c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801296e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	461a      	mov	r2, r3
 801297c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012980:	65bb      	str	r3, [r7, #88]	; 0x58
 8012982:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012988:	e841 2300 	strex	r3, r2, [r1]
 801298c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801298e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1e4      	bne.n	801295e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012998:	2b01      	cmp	r3, #1
 801299a:	d130      	bne.n	80129fe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2200      	movs	r2, #0
 80129a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129aa:	e853 3f00 	ldrex	r3, [r3]
 80129ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129b2:	f023 0310 	bic.w	r3, r3, #16
 80129b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	461a      	mov	r2, r3
 80129c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80129c4:	647b      	str	r3, [r7, #68]	; 0x44
 80129c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129cc:	e841 2300 	strex	r3, r2, [r1]
 80129d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1e4      	bne.n	80129a2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	69db      	ldr	r3, [r3, #28]
 80129de:	f003 0310 	and.w	r3, r3, #16
 80129e2:	2b10      	cmp	r3, #16
 80129e4:	d103      	bne.n	80129ee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2210      	movs	r2, #16
 80129ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129f4:	4619      	mov	r1, r3
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7fe f97e 	bl	8010cf8 <HAL_UARTEx_RxEventCallback>
 80129fc:	e002      	b.n	8012a04 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7ed fe42 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d006      	beq.n	8012a1a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012a0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a10:	f003 0320 	and.w	r3, r3, #32
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f47f aecd 	bne.w	80127b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a20:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d049      	beq.n	8012ac0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d242      	bcs.n	8012ac0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	3308      	adds	r3, #8
 8012a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a44:	e853 3f00 	ldrex	r3, [r3]
 8012a48:	623b      	str	r3, [r7, #32]
   return(result);
 8012a4a:	6a3b      	ldr	r3, [r7, #32]
 8012a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	3308      	adds	r3, #8
 8012a5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8012a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a66:	e841 2300 	strex	r3, r2, [r1]
 8012a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1e3      	bne.n	8012a3a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4a16      	ldr	r2, [pc, #88]	; (8012ad0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012a76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	e853 3f00 	ldrex	r3, [r3]
 8012a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	f043 0320 	orr.w	r3, r3, #32
 8012a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	461a      	mov	r2, r3
 8012a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a9a:	61fb      	str	r3, [r7, #28]
 8012a9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a9e:	69b9      	ldr	r1, [r7, #24]
 8012aa0:	69fa      	ldr	r2, [r7, #28]
 8012aa2:	e841 2300 	strex	r3, r2, [r1]
 8012aa6:	617b      	str	r3, [r7, #20]
   return(result);
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d1e4      	bne.n	8012a78 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012aae:	e007      	b.n	8012ac0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	699a      	ldr	r2, [r3, #24]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f042 0208 	orr.w	r2, r2, #8
 8012abe:	619a      	str	r2, [r3, #24]
}
 8012ac0:	bf00      	nop
 8012ac2:	37b8      	adds	r7, #184	; 0xb8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	effffffe 	.word	0xeffffffe
 8012acc:	58000c00 	.word	0x58000c00
 8012ad0:	08012255 	.word	0x08012255

08012ad4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012adc:	bf00      	nop
 8012ade:	370c      	adds	r7, #12
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr

08012ae8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b083      	sub	sp, #12
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012af0:	bf00      	nop
 8012af2:	370c      	adds	r7, #12
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b04:	bf00      	nop
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012b10:	b480      	push	{r7}
 8012b12:	b089      	sub	sp, #36	; 0x24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	d101      	bne.n	8012b26 <HAL_UARTEx_EnableStopMode+0x16>
 8012b22:	2302      	movs	r3, #2
 8012b24:	e021      	b.n	8012b6a <HAL_UARTEx_EnableStopMode+0x5a>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2201      	movs	r2, #1
 8012b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	e853 3f00 	ldrex	r3, [r3]
 8012b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	f043 0302 	orr.w	r3, r3, #2
 8012b42:	61fb      	str	r3, [r7, #28]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	461a      	mov	r2, r3
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	61bb      	str	r3, [r7, #24]
 8012b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b50:	6979      	ldr	r1, [r7, #20]
 8012b52:	69ba      	ldr	r2, [r7, #24]
 8012b54:	e841 2300 	strex	r3, r2, [r1]
 8012b58:	613b      	str	r3, [r7, #16]
   return(result);
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1e6      	bne.n	8012b2e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b68:	2300      	movs	r3, #0
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3724      	adds	r7, #36	; 0x24
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b74:	4770      	bx	lr

08012b76 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b084      	sub	sp, #16
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d101      	bne.n	8012b8c <HAL_UARTEx_EnableFifoMode+0x16>
 8012b88:	2302      	movs	r3, #2
 8012b8a:	e02b      	b.n	8012be4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2224      	movs	r2, #36	; 0x24
 8012b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f022 0201 	bic.w	r2, r2, #1
 8012bb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012bba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012bc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f000 f8c3 	bl	8012d58 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2220      	movs	r2, #32
 8012bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012be2:	2300      	movs	r3, #0
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3710      	adds	r7, #16
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d101      	bne.n	8012c02 <HAL_UARTEx_DisableFifoMode+0x16>
 8012bfe:	2302      	movs	r3, #2
 8012c00:	e027      	b.n	8012c52 <HAL_UARTEx_DisableFifoMode+0x66>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2224      	movs	r2, #36	; 0x24
 8012c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f022 0201 	bic.w	r2, r2, #1
 8012c28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	68fa      	ldr	r2, [r7, #12]
 8012c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2220      	movs	r2, #32
 8012c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c50:	2300      	movs	r3, #0
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3714      	adds	r7, #20
 8012c56:	46bd      	mov	sp, r7
 8012c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5c:	4770      	bx	lr

08012c5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b084      	sub	sp, #16
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
 8012c66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d101      	bne.n	8012c76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c72:	2302      	movs	r3, #2
 8012c74:	e02d      	b.n	8012cd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2224      	movs	r2, #36	; 0x24
 8012c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f022 0201 	bic.w	r2, r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	683a      	ldr	r2, [r7, #0]
 8012cae:	430a      	orrs	r2, r1
 8012cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f850 	bl	8012d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2220      	movs	r2, #32
 8012cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}

08012cda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cda:	b580      	push	{r7, lr}
 8012cdc:	b084      	sub	sp, #16
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
 8012ce2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d101      	bne.n	8012cf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012cee:	2302      	movs	r3, #2
 8012cf0:	e02d      	b.n	8012d4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2224      	movs	r2, #36	; 0x24
 8012cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f022 0201 	bic.w	r2, r2, #1
 8012d18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	683a      	ldr	r2, [r7, #0]
 8012d2a:	430a      	orrs	r2, r1
 8012d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f000 f812 	bl	8012d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2220      	movs	r2, #32
 8012d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d4c:	2300      	movs	r3, #0
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3710      	adds	r7, #16
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
	...

08012d58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d108      	bne.n	8012d7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2201      	movs	r2, #1
 8012d74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d78:	e031      	b.n	8012dde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d7a:	2310      	movs	r3, #16
 8012d7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d7e:	2310      	movs	r3, #16
 8012d80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	0e5b      	lsrs	r3, r3, #25
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	f003 0307 	and.w	r3, r3, #7
 8012d90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	0f5b      	lsrs	r3, r3, #29
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	f003 0307 	and.w	r3, r3, #7
 8012da0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012da2:	7bbb      	ldrb	r3, [r7, #14]
 8012da4:	7b3a      	ldrb	r2, [r7, #12]
 8012da6:	4911      	ldr	r1, [pc, #68]	; (8012dec <UARTEx_SetNbDataToProcess+0x94>)
 8012da8:	5c8a      	ldrb	r2, [r1, r2]
 8012daa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012dae:	7b3a      	ldrb	r2, [r7, #12]
 8012db0:	490f      	ldr	r1, [pc, #60]	; (8012df0 <UARTEx_SetNbDataToProcess+0x98>)
 8012db2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012dc0:	7bfb      	ldrb	r3, [r7, #15]
 8012dc2:	7b7a      	ldrb	r2, [r7, #13]
 8012dc4:	4909      	ldr	r1, [pc, #36]	; (8012dec <UARTEx_SetNbDataToProcess+0x94>)
 8012dc6:	5c8a      	ldrb	r2, [r1, r2]
 8012dc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012dcc:	7b7a      	ldrb	r2, [r7, #13]
 8012dce:	4908      	ldr	r1, [pc, #32]	; (8012df0 <UARTEx_SetNbDataToProcess+0x98>)
 8012dd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012dde:	bf00      	nop
 8012de0:	3714      	adds	r7, #20
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop
 8012dec:	080177e0 	.word	0x080177e0
 8012df0:	080177e8 	.word	0x080177e8

08012df4 <__NVIC_SetPriority>:
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	6039      	str	r1, [r7, #0]
 8012dfe:	80fb      	strh	r3, [r7, #6]
 8012e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	db0a      	blt.n	8012e1e <__NVIC_SetPriority+0x2a>
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	b2da      	uxtb	r2, r3
 8012e0c:	490c      	ldr	r1, [pc, #48]	; (8012e40 <__NVIC_SetPriority+0x4c>)
 8012e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e12:	0112      	lsls	r2, r2, #4
 8012e14:	b2d2      	uxtb	r2, r2
 8012e16:	440b      	add	r3, r1
 8012e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8012e1c:	e00a      	b.n	8012e34 <__NVIC_SetPriority+0x40>
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	4908      	ldr	r1, [pc, #32]	; (8012e44 <__NVIC_SetPriority+0x50>)
 8012e24:	88fb      	ldrh	r3, [r7, #6]
 8012e26:	f003 030f 	and.w	r3, r3, #15
 8012e2a:	3b04      	subs	r3, #4
 8012e2c:	0112      	lsls	r2, r2, #4
 8012e2e:	b2d2      	uxtb	r2, r2
 8012e30:	440b      	add	r3, r1
 8012e32:	761a      	strb	r2, [r3, #24]
 8012e34:	bf00      	nop
 8012e36:	370c      	adds	r7, #12
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr
 8012e40:	e000e100 	.word	0xe000e100
 8012e44:	e000ed00 	.word	0xe000ed00

08012e48 <SysTick_Handler>:
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <SysTick_Handler+0x1c>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	f002 fcf0 	bl	8015834 <xTaskGetSchedulerState>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d001      	beq.n	8012e5e <SysTick_Handler+0x16>
 8012e5a:	f003 fb0d 	bl	8016478 <xPortSysTickHandler>
 8012e5e:	bf00      	nop
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	e000e010 	.word	0xe000e010

08012e68 <SVC_Setup>:
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	f06f 0004 	mvn.w	r0, #4
 8012e72:	f7ff ffbf 	bl	8012df4 <__NVIC_SetPriority>
 8012e76:	bf00      	nop
 8012e78:	bd80      	pop	{r7, pc}
	...

08012e7c <osKernelInitialize>:
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	f3ef 8305 	mrs	r3, IPSR
 8012e86:	603b      	str	r3, [r7, #0]
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d003      	beq.n	8012e96 <osKernelInitialize+0x1a>
 8012e8e:	f06f 0305 	mvn.w	r3, #5
 8012e92:	607b      	str	r3, [r7, #4]
 8012e94:	e00c      	b.n	8012eb0 <osKernelInitialize+0x34>
 8012e96:	4b0a      	ldr	r3, [pc, #40]	; (8012ec0 <osKernelInitialize+0x44>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d105      	bne.n	8012eaa <osKernelInitialize+0x2e>
 8012e9e:	4b08      	ldr	r3, [pc, #32]	; (8012ec0 <osKernelInitialize+0x44>)
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	601a      	str	r2, [r3, #0]
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	607b      	str	r3, [r7, #4]
 8012ea8:	e002      	b.n	8012eb0 <osKernelInitialize+0x34>
 8012eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eae:	607b      	str	r3, [r7, #4]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	370c      	adds	r7, #12
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr
 8012ebe:	bf00      	nop
 8012ec0:	24001110 	.word	0x24001110

08012ec4 <osKernelStart>:
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	f3ef 8305 	mrs	r3, IPSR
 8012ece:	603b      	str	r3, [r7, #0]
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d003      	beq.n	8012ede <osKernelStart+0x1a>
 8012ed6:	f06f 0305 	mvn.w	r3, #5
 8012eda:	607b      	str	r3, [r7, #4]
 8012edc:	e010      	b.n	8012f00 <osKernelStart+0x3c>
 8012ede:	4b0b      	ldr	r3, [pc, #44]	; (8012f0c <osKernelStart+0x48>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d109      	bne.n	8012efa <osKernelStart+0x36>
 8012ee6:	f7ff ffbf 	bl	8012e68 <SVC_Setup>
 8012eea:	4b08      	ldr	r3, [pc, #32]	; (8012f0c <osKernelStart+0x48>)
 8012eec:	2202      	movs	r2, #2
 8012eee:	601a      	str	r2, [r3, #0]
 8012ef0:	f001 ffb2 	bl	8014e58 <vTaskStartScheduler>
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	607b      	str	r3, [r7, #4]
 8012ef8:	e002      	b.n	8012f00 <osKernelStart+0x3c>
 8012efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012efe:	607b      	str	r3, [r7, #4]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	4618      	mov	r0, r3
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	24001110 	.word	0x24001110

08012f10 <osThreadNew>:
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08e      	sub	sp, #56	; 0x38
 8012f14:	af04      	add	r7, sp, #16
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	607a      	str	r2, [r7, #4]
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	613b      	str	r3, [r7, #16]
 8012f20:	f3ef 8305 	mrs	r3, IPSR
 8012f24:	617b      	str	r3, [r7, #20]
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d17e      	bne.n	801302a <osThreadNew+0x11a>
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d07b      	beq.n	801302a <osThreadNew+0x11a>
 8012f32:	2380      	movs	r3, #128	; 0x80
 8012f34:	623b      	str	r3, [r7, #32]
 8012f36:	2318      	movs	r3, #24
 8012f38:	61fb      	str	r3, [r7, #28]
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8012f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f42:	61bb      	str	r3, [r7, #24]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d045      	beq.n	8012fd6 <osThreadNew+0xc6>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <osThreadNew+0x48>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	627b      	str	r3, [r7, #36]	; 0x24
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	699b      	ldr	r3, [r3, #24]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <osThreadNew+0x56>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	699b      	ldr	r3, [r3, #24]
 8012f64:	61fb      	str	r3, [r7, #28]
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d008      	beq.n	8012f7e <osThreadNew+0x6e>
 8012f6c:	69fb      	ldr	r3, [r7, #28]
 8012f6e:	2b38      	cmp	r3, #56	; 0x38
 8012f70:	d805      	bhi.n	8012f7e <osThreadNew+0x6e>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	f003 0301 	and.w	r3, r3, #1
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d001      	beq.n	8012f82 <osThreadNew+0x72>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	e054      	b.n	801302c <osThreadNew+0x11c>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	695b      	ldr	r3, [r3, #20]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d003      	beq.n	8012f92 <osThreadNew+0x82>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	089b      	lsrs	r3, r3, #2
 8012f90:	623b      	str	r3, [r7, #32]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	689b      	ldr	r3, [r3, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00e      	beq.n	8012fb8 <osThreadNew+0xa8>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	2b5b      	cmp	r3, #91	; 0x5b
 8012fa0:	d90a      	bls.n	8012fb8 <osThreadNew+0xa8>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	691b      	ldr	r3, [r3, #16]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d006      	beq.n	8012fb8 <osThreadNew+0xa8>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	695b      	ldr	r3, [r3, #20]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d002      	beq.n	8012fb8 <osThreadNew+0xa8>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	61bb      	str	r3, [r7, #24]
 8012fb6:	e010      	b.n	8012fda <osThreadNew+0xca>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10c      	bne.n	8012fda <osThreadNew+0xca>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d108      	bne.n	8012fda <osThreadNew+0xca>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	691b      	ldr	r3, [r3, #16]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d104      	bne.n	8012fda <osThreadNew+0xca>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	61bb      	str	r3, [r7, #24]
 8012fd4:	e001      	b.n	8012fda <osThreadNew+0xca>
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	61bb      	str	r3, [r7, #24]
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d110      	bne.n	8013002 <osThreadNew+0xf2>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	691b      	ldr	r3, [r3, #16]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	6892      	ldr	r2, [r2, #8]
 8012fe8:	9202      	str	r2, [sp, #8]
 8012fea:	9301      	str	r3, [sp, #4]
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	9300      	str	r3, [sp, #0]
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	6a3a      	ldr	r2, [r7, #32]
 8012ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f001 fbe0 	bl	80147bc <xTaskCreateStatic>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	613b      	str	r3, [r7, #16]
 8013000:	e013      	b.n	801302a <osThreadNew+0x11a>
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d110      	bne.n	801302a <osThreadNew+0x11a>
 8013008:	6a3b      	ldr	r3, [r7, #32]
 801300a:	b29a      	uxth	r2, r3
 801300c:	f107 0310 	add.w	r3, r7, #16
 8013010:	9301      	str	r3, [sp, #4]
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f001 fc2b 	bl	8014876 <xTaskCreate>
 8013020:	4603      	mov	r3, r0
 8013022:	2b01      	cmp	r3, #1
 8013024:	d001      	beq.n	801302a <osThreadNew+0x11a>
 8013026:	2300      	movs	r3, #0
 8013028:	613b      	str	r3, [r7, #16]
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	4618      	mov	r0, r3
 801302e:	3728      	adds	r7, #40	; 0x28
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <osThreadYield>:
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
 801303a:	f3ef 8305 	mrs	r3, IPSR
 801303e:	603b      	str	r3, [r7, #0]
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d003      	beq.n	801304e <osThreadYield+0x1a>
 8013046:	f06f 0305 	mvn.w	r3, #5
 801304a:	607b      	str	r3, [r7, #4]
 801304c:	e009      	b.n	8013062 <osThreadYield+0x2e>
 801304e:	2300      	movs	r3, #0
 8013050:	607b      	str	r3, [r7, #4]
 8013052:	4b07      	ldr	r3, [pc, #28]	; (8013070 <osThreadYield+0x3c>)
 8013054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013058:	601a      	str	r2, [r3, #0]
 801305a:	f3bf 8f4f 	dsb	sy
 801305e:	f3bf 8f6f 	isb	sy
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr
 8013070:	e000ed04 	.word	0xe000ed04

08013074 <osThreadSuspend>:
 8013074:	b580      	push	{r7, lr}
 8013076:	b086      	sub	sp, #24
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	613b      	str	r3, [r7, #16]
 8013080:	f3ef 8305 	mrs	r3, IPSR
 8013084:	60fb      	str	r3, [r7, #12]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d003      	beq.n	8013094 <osThreadSuspend+0x20>
 801308c:	f06f 0305 	mvn.w	r3, #5
 8013090:	617b      	str	r3, [r7, #20]
 8013092:	e00b      	b.n	80130ac <osThreadSuspend+0x38>
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d103      	bne.n	80130a2 <osThreadSuspend+0x2e>
 801309a:	f06f 0303 	mvn.w	r3, #3
 801309e:	617b      	str	r3, [r7, #20]
 80130a0:	e004      	b.n	80130ac <osThreadSuspend+0x38>
 80130a2:	2300      	movs	r3, #0
 80130a4:	617b      	str	r3, [r7, #20]
 80130a6:	6938      	ldr	r0, [r7, #16]
 80130a8:	f001 fd5e 	bl	8014b68 <vTaskSuspend>
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	4618      	mov	r0, r3
 80130b0:	3718      	adds	r7, #24
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <osDelay>:
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b084      	sub	sp, #16
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
 80130be:	f3ef 8305 	mrs	r3, IPSR
 80130c2:	60bb      	str	r3, [r7, #8]
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d003      	beq.n	80130d2 <osDelay+0x1c>
 80130ca:	f06f 0305 	mvn.w	r3, #5
 80130ce:	60fb      	str	r3, [r7, #12]
 80130d0:	e007      	b.n	80130e2 <osDelay+0x2c>
 80130d2:	2300      	movs	r3, #0
 80130d4:	60fb      	str	r3, [r7, #12]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d002      	beq.n	80130e2 <osDelay+0x2c>
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f001 fd0f 	bl	8014b00 <vTaskDelay>
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	4618      	mov	r0, r3
 80130e6:	3710      	adds	r7, #16
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <osEventFlagsNew>:
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	2300      	movs	r3, #0
 80130f6:	617b      	str	r3, [r7, #20]
 80130f8:	f3ef 8305 	mrs	r3, IPSR
 80130fc:	60fb      	str	r3, [r7, #12]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d12d      	bne.n	8013160 <osEventFlagsNew+0x74>
 8013104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013108:	613b      	str	r3, [r7, #16]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d015      	beq.n	801313c <osEventFlagsNew+0x50>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d006      	beq.n	8013126 <osEventFlagsNew+0x3a>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	2b1f      	cmp	r3, #31
 801311e:	d902      	bls.n	8013126 <osEventFlagsNew+0x3a>
 8013120:	2301      	movs	r3, #1
 8013122:	613b      	str	r3, [r7, #16]
 8013124:	e00c      	b.n	8013140 <osEventFlagsNew+0x54>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d108      	bne.n	8013140 <osEventFlagsNew+0x54>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	68db      	ldr	r3, [r3, #12]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d104      	bne.n	8013140 <osEventFlagsNew+0x54>
 8013136:	2300      	movs	r3, #0
 8013138:	613b      	str	r3, [r7, #16]
 801313a:	e001      	b.n	8013140 <osEventFlagsNew+0x54>
 801313c:	2300      	movs	r3, #0
 801313e:	613b      	str	r3, [r7, #16]
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d106      	bne.n	8013154 <osEventFlagsNew+0x68>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	4618      	mov	r0, r3
 801314c:	f000 fa70 	bl	8013630 <xEventGroupCreateStatic>
 8013150:	6178      	str	r0, [r7, #20]
 8013152:	e005      	b.n	8013160 <osEventFlagsNew+0x74>
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d102      	bne.n	8013160 <osEventFlagsNew+0x74>
 801315a:	f000 faa0 	bl	801369e <xEventGroupCreate>
 801315e:	6178      	str	r0, [r7, #20]
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	4618      	mov	r0, r3
 8013164:	3718      	adds	r7, #24
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <osEventFlagsSet>:
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6039      	str	r1, [r7, #0]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	613b      	str	r3, [r7, #16]
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d004      	beq.n	801318a <osEventFlagsSet+0x1e>
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013186:	2b00      	cmp	r3, #0
 8013188:	d003      	beq.n	8013192 <osEventFlagsSet+0x26>
 801318a:	f06f 0303 	mvn.w	r3, #3
 801318e:	617b      	str	r3, [r7, #20]
 8013190:	e028      	b.n	80131e4 <osEventFlagsSet+0x78>
 8013192:	f3ef 8305 	mrs	r3, IPSR
 8013196:	60fb      	str	r3, [r7, #12]
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d01d      	beq.n	80131da <osEventFlagsSet+0x6e>
 801319e:	2300      	movs	r3, #0
 80131a0:	60bb      	str	r3, [r7, #8]
 80131a2:	f107 0308 	add.w	r3, r7, #8
 80131a6:	461a      	mov	r2, r3
 80131a8:	6839      	ldr	r1, [r7, #0]
 80131aa:	6938      	ldr	r0, [r7, #16]
 80131ac:	f000 fc98 	bl	8013ae0 <xEventGroupSetBitsFromISR>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d103      	bne.n	80131be <osEventFlagsSet+0x52>
 80131b6:	f06f 0302 	mvn.w	r3, #2
 80131ba:	617b      	str	r3, [r7, #20]
 80131bc:	e012      	b.n	80131e4 <osEventFlagsSet+0x78>
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	617b      	str	r3, [r7, #20]
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00d      	beq.n	80131e4 <osEventFlagsSet+0x78>
 80131c8:	4b09      	ldr	r3, [pc, #36]	; (80131f0 <osEventFlagsSet+0x84>)
 80131ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131ce:	601a      	str	r2, [r3, #0]
 80131d0:	f3bf 8f4f 	dsb	sy
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	e004      	b.n	80131e4 <osEventFlagsSet+0x78>
 80131da:	6839      	ldr	r1, [r7, #0]
 80131dc:	6938      	ldr	r0, [r7, #16]
 80131de:	f000 fbb7 	bl	8013950 <xEventGroupSetBits>
 80131e2:	6178      	str	r0, [r7, #20]
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	4618      	mov	r0, r3
 80131e8:	3718      	adds	r7, #24
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	e000ed04 	.word	0xe000ed04

080131f4 <osEventFlagsClear>:
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b086      	sub	sp, #24
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	6039      	str	r1, [r7, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	613b      	str	r3, [r7, #16]
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d004      	beq.n	8013212 <osEventFlagsClear+0x1e>
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801320e:	2b00      	cmp	r3, #0
 8013210:	d003      	beq.n	801321a <osEventFlagsClear+0x26>
 8013212:	f06f 0303 	mvn.w	r3, #3
 8013216:	617b      	str	r3, [r7, #20]
 8013218:	e019      	b.n	801324e <osEventFlagsClear+0x5a>
 801321a:	f3ef 8305 	mrs	r3, IPSR
 801321e:	60fb      	str	r3, [r7, #12]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d00e      	beq.n	8013244 <osEventFlagsClear+0x50>
 8013226:	6938      	ldr	r0, [r7, #16]
 8013228:	f000 fb6e 	bl	8013908 <xEventGroupGetBitsFromISR>
 801322c:	6178      	str	r0, [r7, #20]
 801322e:	6839      	ldr	r1, [r7, #0]
 8013230:	6938      	ldr	r0, [r7, #16]
 8013232:	f000 fb55 	bl	80138e0 <xEventGroupClearBitsFromISR>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d108      	bne.n	801324e <osEventFlagsClear+0x5a>
 801323c:	f06f 0302 	mvn.w	r3, #2
 8013240:	617b      	str	r3, [r7, #20]
 8013242:	e004      	b.n	801324e <osEventFlagsClear+0x5a>
 8013244:	6839      	ldr	r1, [r7, #0]
 8013246:	6938      	ldr	r0, [r7, #16]
 8013248:	f000 fb12 	bl	8013870 <xEventGroupClearBits>
 801324c:	6178      	str	r0, [r7, #20]
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	4618      	mov	r0, r3
 8013252:	3718      	adds	r7, #24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <osEventFlagsGet>:
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	613b      	str	r3, [r7, #16]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d102      	bne.n	8013270 <osEventFlagsGet+0x18>
 801326a:	2300      	movs	r3, #0
 801326c:	617b      	str	r3, [r7, #20]
 801326e:	e00f      	b.n	8013290 <osEventFlagsGet+0x38>
 8013270:	f3ef 8305 	mrs	r3, IPSR
 8013274:	60fb      	str	r3, [r7, #12]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d004      	beq.n	8013286 <osEventFlagsGet+0x2e>
 801327c:	6938      	ldr	r0, [r7, #16]
 801327e:	f000 fb43 	bl	8013908 <xEventGroupGetBitsFromISR>
 8013282:	6178      	str	r0, [r7, #20]
 8013284:	e004      	b.n	8013290 <osEventFlagsGet+0x38>
 8013286:	2100      	movs	r1, #0
 8013288:	6938      	ldr	r0, [r7, #16]
 801328a:	f000 faf1 	bl	8013870 <xEventGroupClearBits>
 801328e:	6178      	str	r0, [r7, #20]
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	4618      	mov	r0, r3
 8013294:	3718      	adds	r7, #24
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <osEventFlagsWait>:
 801329a:	b580      	push	{r7, lr}
 801329c:	b08c      	sub	sp, #48	; 0x30
 801329e:	af02      	add	r7, sp, #8
 80132a0:	60f8      	str	r0, [r7, #12]
 80132a2:	60b9      	str	r1, [r7, #8]
 80132a4:	607a      	str	r2, [r7, #4]
 80132a6:	603b      	str	r3, [r7, #0]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	61bb      	str	r3, [r7, #24]
 80132ac:	69bb      	ldr	r3, [r7, #24]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d004      	beq.n	80132bc <osEventFlagsWait+0x22>
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d003      	beq.n	80132c4 <osEventFlagsWait+0x2a>
 80132bc:	f06f 0303 	mvn.w	r3, #3
 80132c0:	61fb      	str	r3, [r7, #28]
 80132c2:	e04b      	b.n	801335c <osEventFlagsWait+0xc2>
 80132c4:	f3ef 8305 	mrs	r3, IPSR
 80132c8:	617b      	str	r3, [r7, #20]
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d003      	beq.n	80132d8 <osEventFlagsWait+0x3e>
 80132d0:	f06f 0305 	mvn.w	r3, #5
 80132d4:	61fb      	str	r3, [r7, #28]
 80132d6:	e041      	b.n	801335c <osEventFlagsWait+0xc2>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d002      	beq.n	80132e8 <osEventFlagsWait+0x4e>
 80132e2:	2301      	movs	r3, #1
 80132e4:	627b      	str	r3, [r7, #36]	; 0x24
 80132e6:	e001      	b.n	80132ec <osEventFlagsWait+0x52>
 80132e8:	2300      	movs	r3, #0
 80132ea:	627b      	str	r3, [r7, #36]	; 0x24
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f003 0302 	and.w	r3, r3, #2
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d002      	beq.n	80132fc <osEventFlagsWait+0x62>
 80132f6:	2300      	movs	r3, #0
 80132f8:	623b      	str	r3, [r7, #32]
 80132fa:	e001      	b.n	8013300 <osEventFlagsWait+0x66>
 80132fc:	2301      	movs	r3, #1
 80132fe:	623b      	str	r3, [r7, #32]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013306:	6a3a      	ldr	r2, [r7, #32]
 8013308:	68b9      	ldr	r1, [r7, #8]
 801330a:	69b8      	ldr	r0, [r7, #24]
 801330c:	f000 f9e2 	bl	80136d4 <xEventGroupWaitBits>
 8013310:	61f8      	str	r0, [r7, #28]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f003 0301 	and.w	r3, r3, #1
 8013318:	2b00      	cmp	r3, #0
 801331a:	d010      	beq.n	801333e <osEventFlagsWait+0xa4>
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	4013      	ands	r3, r2
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	429a      	cmp	r2, r3
 8013326:	d019      	beq.n	801335c <osEventFlagsWait+0xc2>
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d003      	beq.n	8013336 <osEventFlagsWait+0x9c>
 801332e:	f06f 0301 	mvn.w	r3, #1
 8013332:	61fb      	str	r3, [r7, #28]
 8013334:	e012      	b.n	801335c <osEventFlagsWait+0xc2>
 8013336:	f06f 0302 	mvn.w	r3, #2
 801333a:	61fb      	str	r3, [r7, #28]
 801333c:	e00e      	b.n	801335c <osEventFlagsWait+0xc2>
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	4013      	ands	r3, r2
 8013344:	2b00      	cmp	r3, #0
 8013346:	d109      	bne.n	801335c <osEventFlagsWait+0xc2>
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d003      	beq.n	8013356 <osEventFlagsWait+0xbc>
 801334e:	f06f 0301 	mvn.w	r3, #1
 8013352:	61fb      	str	r3, [r7, #28]
 8013354:	e002      	b.n	801335c <osEventFlagsWait+0xc2>
 8013356:	f06f 0302 	mvn.w	r3, #2
 801335a:	61fb      	str	r3, [r7, #28]
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	4618      	mov	r0, r3
 8013360:	3728      	adds	r7, #40	; 0x28
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <osMessageQueueNew>:
 8013366:	b580      	push	{r7, lr}
 8013368:	b08a      	sub	sp, #40	; 0x28
 801336a:	af02      	add	r7, sp, #8
 801336c:	60f8      	str	r0, [r7, #12]
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
 8013372:	2300      	movs	r3, #0
 8013374:	61fb      	str	r3, [r7, #28]
 8013376:	f3ef 8305 	mrs	r3, IPSR
 801337a:	613b      	str	r3, [r7, #16]
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d15f      	bne.n	8013442 <osMessageQueueNew+0xdc>
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d05c      	beq.n	8013442 <osMessageQueueNew+0xdc>
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d059      	beq.n	8013442 <osMessageQueueNew+0xdc>
 801338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013392:	61bb      	str	r3, [r7, #24]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d029      	beq.n	80133ee <osMessageQueueNew+0x88>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	689b      	ldr	r3, [r3, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d012      	beq.n	80133c8 <osMessageQueueNew+0x62>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	68db      	ldr	r3, [r3, #12]
 80133a6:	2b4f      	cmp	r3, #79	; 0x4f
 80133a8:	d90e      	bls.n	80133c8 <osMessageQueueNew+0x62>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d00a      	beq.n	80133c8 <osMessageQueueNew+0x62>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	695a      	ldr	r2, [r3, #20]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	68b9      	ldr	r1, [r7, #8]
 80133ba:	fb01 f303 	mul.w	r3, r1, r3
 80133be:	429a      	cmp	r2, r3
 80133c0:	d302      	bcc.n	80133c8 <osMessageQueueNew+0x62>
 80133c2:	2301      	movs	r3, #1
 80133c4:	61bb      	str	r3, [r7, #24]
 80133c6:	e014      	b.n	80133f2 <osMessageQueueNew+0x8c>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	689b      	ldr	r3, [r3, #8]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d110      	bne.n	80133f2 <osMessageQueueNew+0x8c>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10c      	bne.n	80133f2 <osMessageQueueNew+0x8c>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d108      	bne.n	80133f2 <osMessageQueueNew+0x8c>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	695b      	ldr	r3, [r3, #20]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d104      	bne.n	80133f2 <osMessageQueueNew+0x8c>
 80133e8:	2300      	movs	r3, #0
 80133ea:	61bb      	str	r3, [r7, #24]
 80133ec:	e001      	b.n	80133f2 <osMessageQueueNew+0x8c>
 80133ee:	2300      	movs	r3, #0
 80133f0:	61bb      	str	r3, [r7, #24]
 80133f2:	69bb      	ldr	r3, [r7, #24]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d10b      	bne.n	8013410 <osMessageQueueNew+0xaa>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	691a      	ldr	r2, [r3, #16]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	2100      	movs	r1, #0
 8013402:	9100      	str	r1, [sp, #0]
 8013404:	68b9      	ldr	r1, [r7, #8]
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f000 fc9a 	bl	8013d40 <xQueueGenericCreateStatic>
 801340c:	61f8      	str	r0, [r7, #28]
 801340e:	e008      	b.n	8013422 <osMessageQueueNew+0xbc>
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d105      	bne.n	8013422 <osMessageQueueNew+0xbc>
 8013416:	2200      	movs	r2, #0
 8013418:	68b9      	ldr	r1, [r7, #8]
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f000 fd08 	bl	8013e30 <xQueueGenericCreate>
 8013420:	61f8      	str	r0, [r7, #28]
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d00c      	beq.n	8013442 <osMessageQueueNew+0xdc>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d003      	beq.n	8013436 <osMessageQueueNew+0xd0>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	617b      	str	r3, [r7, #20]
 8013434:	e001      	b.n	801343a <osMessageQueueNew+0xd4>
 8013436:	2300      	movs	r3, #0
 8013438:	617b      	str	r3, [r7, #20]
 801343a:	6979      	ldr	r1, [r7, #20]
 801343c:	69f8      	ldr	r0, [r7, #28]
 801343e:	f001 f95f 	bl	8014700 <vQueueAddToRegistry>
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	4618      	mov	r0, r3
 8013446:	3720      	adds	r7, #32
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <osMessageQueuePut>:
 801344c:	b580      	push	{r7, lr}
 801344e:	b088      	sub	sp, #32
 8013450:	af00      	add	r7, sp, #0
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	603b      	str	r3, [r7, #0]
 8013458:	4613      	mov	r3, r2
 801345a:	71fb      	strb	r3, [r7, #7]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	61bb      	str	r3, [r7, #24]
 8013460:	2300      	movs	r3, #0
 8013462:	61fb      	str	r3, [r7, #28]
 8013464:	f3ef 8305 	mrs	r3, IPSR
 8013468:	617b      	str	r3, [r7, #20]
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d028      	beq.n	80134c2 <osMessageQueuePut+0x76>
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d005      	beq.n	8013482 <osMessageQueuePut+0x36>
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d002      	beq.n	8013482 <osMessageQueuePut+0x36>
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d003      	beq.n	801348a <osMessageQueuePut+0x3e>
 8013482:	f06f 0303 	mvn.w	r3, #3
 8013486:	61fb      	str	r3, [r7, #28]
 8013488:	e038      	b.n	80134fc <osMessageQueuePut+0xb0>
 801348a:	2300      	movs	r3, #0
 801348c:	613b      	str	r3, [r7, #16]
 801348e:	f107 0210 	add.w	r2, r7, #16
 8013492:	2300      	movs	r3, #0
 8013494:	68b9      	ldr	r1, [r7, #8]
 8013496:	69b8      	ldr	r0, [r7, #24]
 8013498:	f000 fe26 	bl	80140e8 <xQueueGenericSendFromISR>
 801349c:	4603      	mov	r3, r0
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d003      	beq.n	80134aa <osMessageQueuePut+0x5e>
 80134a2:	f06f 0302 	mvn.w	r3, #2
 80134a6:	61fb      	str	r3, [r7, #28]
 80134a8:	e028      	b.n	80134fc <osMessageQueuePut+0xb0>
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d025      	beq.n	80134fc <osMessageQueuePut+0xb0>
 80134b0:	4b15      	ldr	r3, [pc, #84]	; (8013508 <osMessageQueuePut+0xbc>)
 80134b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	f3bf 8f4f 	dsb	sy
 80134bc:	f3bf 8f6f 	isb	sy
 80134c0:	e01c      	b.n	80134fc <osMessageQueuePut+0xb0>
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d002      	beq.n	80134ce <osMessageQueuePut+0x82>
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d103      	bne.n	80134d6 <osMessageQueuePut+0x8a>
 80134ce:	f06f 0303 	mvn.w	r3, #3
 80134d2:	61fb      	str	r3, [r7, #28]
 80134d4:	e012      	b.n	80134fc <osMessageQueuePut+0xb0>
 80134d6:	2300      	movs	r3, #0
 80134d8:	683a      	ldr	r2, [r7, #0]
 80134da:	68b9      	ldr	r1, [r7, #8]
 80134dc:	69b8      	ldr	r0, [r7, #24]
 80134de:	f000 fd05 	bl	8013eec <xQueueGenericSend>
 80134e2:	4603      	mov	r3, r0
 80134e4:	2b01      	cmp	r3, #1
 80134e6:	d009      	beq.n	80134fc <osMessageQueuePut+0xb0>
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d003      	beq.n	80134f6 <osMessageQueuePut+0xaa>
 80134ee:	f06f 0301 	mvn.w	r3, #1
 80134f2:	61fb      	str	r3, [r7, #28]
 80134f4:	e002      	b.n	80134fc <osMessageQueuePut+0xb0>
 80134f6:	f06f 0302 	mvn.w	r3, #2
 80134fa:	61fb      	str	r3, [r7, #28]
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	4618      	mov	r0, r3
 8013500:	3720      	adds	r7, #32
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	e000ed04 	.word	0xe000ed04

0801350c <osMessageQueueGet>:
 801350c:	b580      	push	{r7, lr}
 801350e:	b088      	sub	sp, #32
 8013510:	af00      	add	r7, sp, #0
 8013512:	60f8      	str	r0, [r7, #12]
 8013514:	60b9      	str	r1, [r7, #8]
 8013516:	607a      	str	r2, [r7, #4]
 8013518:	603b      	str	r3, [r7, #0]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	61bb      	str	r3, [r7, #24]
 801351e:	2300      	movs	r3, #0
 8013520:	61fb      	str	r3, [r7, #28]
 8013522:	f3ef 8305 	mrs	r3, IPSR
 8013526:	617b      	str	r3, [r7, #20]
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d028      	beq.n	8013580 <osMessageQueueGet+0x74>
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d005      	beq.n	8013540 <osMessageQueueGet+0x34>
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d002      	beq.n	8013540 <osMessageQueueGet+0x34>
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d003      	beq.n	8013548 <osMessageQueueGet+0x3c>
 8013540:	f06f 0303 	mvn.w	r3, #3
 8013544:	61fb      	str	r3, [r7, #28]
 8013546:	e037      	b.n	80135b8 <osMessageQueueGet+0xac>
 8013548:	2300      	movs	r3, #0
 801354a:	613b      	str	r3, [r7, #16]
 801354c:	f107 0310 	add.w	r3, r7, #16
 8013550:	461a      	mov	r2, r3
 8013552:	68b9      	ldr	r1, [r7, #8]
 8013554:	69b8      	ldr	r0, [r7, #24]
 8013556:	f000 ff43 	bl	80143e0 <xQueueReceiveFromISR>
 801355a:	4603      	mov	r3, r0
 801355c:	2b01      	cmp	r3, #1
 801355e:	d003      	beq.n	8013568 <osMessageQueueGet+0x5c>
 8013560:	f06f 0302 	mvn.w	r3, #2
 8013564:	61fb      	str	r3, [r7, #28]
 8013566:	e027      	b.n	80135b8 <osMessageQueueGet+0xac>
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d024      	beq.n	80135b8 <osMessageQueueGet+0xac>
 801356e:	4b15      	ldr	r3, [pc, #84]	; (80135c4 <osMessageQueueGet+0xb8>)
 8013570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013574:	601a      	str	r2, [r3, #0]
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	f3bf 8f6f 	isb	sy
 801357e:	e01b      	b.n	80135b8 <osMessageQueueGet+0xac>
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d002      	beq.n	801358c <osMessageQueueGet+0x80>
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d103      	bne.n	8013594 <osMessageQueueGet+0x88>
 801358c:	f06f 0303 	mvn.w	r3, #3
 8013590:	61fb      	str	r3, [r7, #28]
 8013592:	e011      	b.n	80135b8 <osMessageQueueGet+0xac>
 8013594:	683a      	ldr	r2, [r7, #0]
 8013596:	68b9      	ldr	r1, [r7, #8]
 8013598:	69b8      	ldr	r0, [r7, #24]
 801359a:	f000 fe41 	bl	8014220 <xQueueReceive>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d009      	beq.n	80135b8 <osMessageQueueGet+0xac>
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d003      	beq.n	80135b2 <osMessageQueueGet+0xa6>
 80135aa:	f06f 0301 	mvn.w	r3, #1
 80135ae:	61fb      	str	r3, [r7, #28]
 80135b0:	e002      	b.n	80135b8 <osMessageQueueGet+0xac>
 80135b2:	f06f 0302 	mvn.w	r3, #2
 80135b6:	61fb      	str	r3, [r7, #28]
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	4618      	mov	r0, r3
 80135bc:	3720      	adds	r7, #32
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	e000ed04 	.word	0xe000ed04

080135c8 <vApplicationGetIdleTaskMemory>:
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	4a07      	ldr	r2, [pc, #28]	; (80135f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80135d8:	601a      	str	r2, [r3, #0]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	4a06      	ldr	r2, [pc, #24]	; (80135f8 <vApplicationGetIdleTaskMemory+0x30>)
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2280      	movs	r2, #128	; 0x80
 80135e4:	601a      	str	r2, [r3, #0]
 80135e6:	bf00      	nop
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop
 80135f4:	24001114 	.word	0x24001114
 80135f8:	24001170 	.word	0x24001170

080135fc <vApplicationGetTimerTaskMemory>:
 80135fc:	b480      	push	{r7}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	4a07      	ldr	r2, [pc, #28]	; (8013628 <vApplicationGetTimerTaskMemory+0x2c>)
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	4a06      	ldr	r2, [pc, #24]	; (801362c <vApplicationGetTimerTaskMemory+0x30>)
 8013612:	601a      	str	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f44f 7280 	mov.w	r2, #256	; 0x100
 801361a:	601a      	str	r2, [r3, #0]
 801361c:	bf00      	nop
 801361e:	3714      	adds	r7, #20
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr
 8013628:	24001370 	.word	0x24001370
 801362c:	240013cc 	.word	0x240013cc

08013630 <xEventGroupCreateStatic>:
 8013630:	b580      	push	{r7, lr}
 8013632:	b086      	sub	sp, #24
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d10a      	bne.n	8013654 <xEventGroupCreateStatic+0x24>
 801363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013642:	f383 8811 	msr	BASEPRI, r3
 8013646:	f3bf 8f6f 	isb	sy
 801364a:	f3bf 8f4f 	dsb	sy
 801364e:	613b      	str	r3, [r7, #16]
 8013650:	bf00      	nop
 8013652:	e7fe      	b.n	8013652 <xEventGroupCreateStatic+0x22>
 8013654:	2320      	movs	r3, #32
 8013656:	60bb      	str	r3, [r7, #8]
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	2b20      	cmp	r3, #32
 801365c:	d00a      	beq.n	8013674 <xEventGroupCreateStatic+0x44>
 801365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013662:	f383 8811 	msr	BASEPRI, r3
 8013666:	f3bf 8f6f 	isb	sy
 801366a:	f3bf 8f4f 	dsb	sy
 801366e:	60fb      	str	r3, [r7, #12]
 8013670:	bf00      	nop
 8013672:	e7fe      	b.n	8013672 <xEventGroupCreateStatic+0x42>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	617b      	str	r3, [r7, #20]
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00a      	beq.n	8013694 <xEventGroupCreateStatic+0x64>
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	2200      	movs	r2, #0
 8013682:	601a      	str	r2, [r3, #0]
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	3304      	adds	r3, #4
 8013688:	4618      	mov	r0, r3
 801368a:	f000 fa3d 	bl	8013b08 <vListInitialise>
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	2201      	movs	r2, #1
 8013692:	771a      	strb	r2, [r3, #28]
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	4618      	mov	r0, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <xEventGroupCreate>:
 801369e:	b580      	push	{r7, lr}
 80136a0:	b082      	sub	sp, #8
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	2020      	movs	r0, #32
 80136a6:	f002 ff77 	bl	8016598 <pvPortMalloc>
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d00a      	beq.n	80136c8 <xEventGroupCreate+0x2a>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2200      	movs	r2, #0
 80136b6:	601a      	str	r2, [r3, #0]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	3304      	adds	r3, #4
 80136bc:	4618      	mov	r0, r3
 80136be:	f000 fa23 	bl	8013b08 <vListInitialise>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2200      	movs	r2, #0
 80136c6:	771a      	strb	r2, [r3, #28]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	3708      	adds	r7, #8
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
	...

080136d4 <xEventGroupWaitBits>:
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b090      	sub	sp, #64	; 0x40
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
 80136e0:	603b      	str	r3, [r7, #0]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	637b      	str	r3, [r7, #52]	; 0x34
 80136e6:	2300      	movs	r3, #0
 80136e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80136ea:	2300      	movs	r3, #0
 80136ec:	633b      	str	r3, [r7, #48]	; 0x30
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10a      	bne.n	801370a <xEventGroupWaitBits+0x36>
 80136f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f8:	f383 8811 	msr	BASEPRI, r3
 80136fc:	f3bf 8f6f 	isb	sy
 8013700:	f3bf 8f4f 	dsb	sy
 8013704:	623b      	str	r3, [r7, #32]
 8013706:	bf00      	nop
 8013708:	e7fe      	b.n	8013708 <xEventGroupWaitBits+0x34>
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00a      	beq.n	801372a <xEventGroupWaitBits+0x56>
 8013714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	61fb      	str	r3, [r7, #28]
 8013726:	bf00      	nop
 8013728:	e7fe      	b.n	8013728 <xEventGroupWaitBits+0x54>
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10a      	bne.n	8013746 <xEventGroupWaitBits+0x72>
 8013730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013734:	f383 8811 	msr	BASEPRI, r3
 8013738:	f3bf 8f6f 	isb	sy
 801373c:	f3bf 8f4f 	dsb	sy
 8013740:	61bb      	str	r3, [r7, #24]
 8013742:	bf00      	nop
 8013744:	e7fe      	b.n	8013744 <xEventGroupWaitBits+0x70>
 8013746:	f002 f875 	bl	8015834 <xTaskGetSchedulerState>
 801374a:	4603      	mov	r3, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d102      	bne.n	8013756 <xEventGroupWaitBits+0x82>
 8013750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013752:	2b00      	cmp	r3, #0
 8013754:	d101      	bne.n	801375a <xEventGroupWaitBits+0x86>
 8013756:	2301      	movs	r3, #1
 8013758:	e000      	b.n	801375c <xEventGroupWaitBits+0x88>
 801375a:	2300      	movs	r3, #0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10a      	bne.n	8013776 <xEventGroupWaitBits+0xa2>
 8013760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013764:	f383 8811 	msr	BASEPRI, r3
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	617b      	str	r3, [r7, #20]
 8013772:	bf00      	nop
 8013774:	e7fe      	b.n	8013774 <xEventGroupWaitBits+0xa0>
 8013776:	f001 fbd5 	bl	8014f24 <vTaskSuspendAll>
 801377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013780:	683a      	ldr	r2, [r7, #0]
 8013782:	68b9      	ldr	r1, [r7, #8]
 8013784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013786:	f000 f988 	bl	8013a9a <prvTestWaitCondition>
 801378a:	62b8      	str	r0, [r7, #40]	; 0x28
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00e      	beq.n	80137b0 <xEventGroupWaitBits+0xdc>
 8013792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013796:	2300      	movs	r3, #0
 8013798:	64bb      	str	r3, [r7, #72]	; 0x48
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d028      	beq.n	80137f2 <xEventGroupWaitBits+0x11e>
 80137a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	43db      	mvns	r3, r3
 80137a8:	401a      	ands	r2, r3
 80137aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ac:	601a      	str	r2, [r3, #0]
 80137ae:	e020      	b.n	80137f2 <xEventGroupWaitBits+0x11e>
 80137b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d104      	bne.n	80137c0 <xEventGroupWaitBits+0xec>
 80137b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137ba:	2301      	movs	r3, #1
 80137bc:	633b      	str	r3, [r7, #48]	; 0x30
 80137be:	e018      	b.n	80137f2 <xEventGroupWaitBits+0x11e>
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d003      	beq.n	80137ce <xEventGroupWaitBits+0xfa>
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d003      	beq.n	80137dc <xEventGroupWaitBits+0x108>
 80137d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80137da:	63bb      	str	r3, [r7, #56]	; 0x38
 80137dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137de:	1d18      	adds	r0, r3, #4
 80137e0:	68ba      	ldr	r2, [r7, #8]
 80137e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e4:	4313      	orrs	r3, r2
 80137e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80137e8:	4619      	mov	r1, r3
 80137ea:	f001 fd9b 	bl	8015324 <vTaskPlaceOnUnorderedEventList>
 80137ee:	2300      	movs	r3, #0
 80137f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137f2:	f001 fba5 	bl	8014f40 <xTaskResumeAll>
 80137f6:	6278      	str	r0, [r7, #36]	; 0x24
 80137f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d031      	beq.n	8013862 <xEventGroupWaitBits+0x18e>
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	2b00      	cmp	r3, #0
 8013802:	d107      	bne.n	8013814 <xEventGroupWaitBits+0x140>
 8013804:	4b19      	ldr	r3, [pc, #100]	; (801386c <xEventGroupWaitBits+0x198>)
 8013806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801380a:	601a      	str	r2, [r3, #0]
 801380c:	f3bf 8f4f 	dsb	sy
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	f002 f89a 	bl	801594c <uxTaskResetEventItemValue>
 8013818:	63f8      	str	r0, [r7, #60]	; 0x3c
 801381a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013820:	2b00      	cmp	r3, #0
 8013822:	d11a      	bne.n	801385a <xEventGroupWaitBits+0x186>
 8013824:	f002 fd96 	bl	8016354 <vPortEnterCritical>
 8013828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801382e:	683a      	ldr	r2, [r7, #0]
 8013830:	68b9      	ldr	r1, [r7, #8]
 8013832:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013834:	f000 f931 	bl	8013a9a <prvTestWaitCondition>
 8013838:	4603      	mov	r3, r0
 801383a:	2b00      	cmp	r3, #0
 801383c:	d009      	beq.n	8013852 <xEventGroupWaitBits+0x17e>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d006      	beq.n	8013852 <xEventGroupWaitBits+0x17e>
 8013844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	43db      	mvns	r3, r3
 801384c:	401a      	ands	r2, r3
 801384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013850:	601a      	str	r2, [r3, #0]
 8013852:	2301      	movs	r3, #1
 8013854:	633b      	str	r3, [r7, #48]	; 0x30
 8013856:	f002 fdad 	bl	80163b4 <vPortExitCritical>
 801385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801385c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013864:	4618      	mov	r0, r3
 8013866:	3740      	adds	r7, #64	; 0x40
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	e000ed04 	.word	0xe000ed04

08013870 <xEventGroupClearBits>:
 8013870:	b580      	push	{r7, lr}
 8013872:	b086      	sub	sp, #24
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	617b      	str	r3, [r7, #20]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d10a      	bne.n	801389a <xEventGroupClearBits+0x2a>
 8013884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
 8013894:	60fb      	str	r3, [r7, #12]
 8013896:	bf00      	nop
 8013898:	e7fe      	b.n	8013898 <xEventGroupClearBits+0x28>
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d00a      	beq.n	80138ba <xEventGroupClearBits+0x4a>
 80138a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a8:	f383 8811 	msr	BASEPRI, r3
 80138ac:	f3bf 8f6f 	isb	sy
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	60bb      	str	r3, [r7, #8]
 80138b6:	bf00      	nop
 80138b8:	e7fe      	b.n	80138b8 <xEventGroupClearBits+0x48>
 80138ba:	f002 fd4b 	bl	8016354 <vPortEnterCritical>
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	613b      	str	r3, [r7, #16]
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	43db      	mvns	r3, r3
 80138cc:	401a      	ands	r2, r3
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	601a      	str	r2, [r3, #0]
 80138d2:	f002 fd6f 	bl	80163b4 <vPortExitCritical>
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	4618      	mov	r0, r3
 80138da:	3718      	adds	r7, #24
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <xEventGroupClearBitsFromISR>:
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
 80138ea:	2300      	movs	r3, #0
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	6879      	ldr	r1, [r7, #4]
 80138f0:	4804      	ldr	r0, [pc, #16]	; (8013904 <xEventGroupClearBitsFromISR+0x24>)
 80138f2:	f002 fbe5 	bl	80160c0 <xTimerPendFunctionCallFromISR>
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4618      	mov	r0, r3
 80138fc:	3710      	adds	r7, #16
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	08013a81 	.word	0x08013a81

08013908 <xEventGroupGetBitsFromISR>:
 8013908:	b480      	push	{r7}
 801390a:	b089      	sub	sp, #36	; 0x24
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	61fb      	str	r3, [r7, #28]
 8013914:	f3ef 8211 	mrs	r2, BASEPRI
 8013918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	60fa      	str	r2, [r7, #12]
 801392a:	60bb      	str	r3, [r7, #8]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	61bb      	str	r3, [r7, #24]
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	617b      	str	r3, [r7, #20]
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	613b      	str	r3, [r7, #16]
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	f383 8811 	msr	BASEPRI, r3
 8013940:	bf00      	nop
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	4618      	mov	r0, r3
 8013946:	3724      	adds	r7, #36	; 0x24
 8013948:	46bd      	mov	sp, r7
 801394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394e:	4770      	bx	lr

08013950 <xEventGroupSetBits>:
 8013950:	b580      	push	{r7, lr}
 8013952:	b08e      	sub	sp, #56	; 0x38
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	6039      	str	r1, [r7, #0]
 801395a:	2300      	movs	r3, #0
 801395c:	633b      	str	r3, [r7, #48]	; 0x30
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	62bb      	str	r3, [r7, #40]	; 0x28
 8013962:	2300      	movs	r3, #0
 8013964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d10a      	bne.n	8013982 <xEventGroupSetBits+0x32>
 801396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013970:	f383 8811 	msr	BASEPRI, r3
 8013974:	f3bf 8f6f 	isb	sy
 8013978:	f3bf 8f4f 	dsb	sy
 801397c:	613b      	str	r3, [r7, #16]
 801397e:	bf00      	nop
 8013980:	e7fe      	b.n	8013980 <xEventGroupSetBits+0x30>
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013988:	2b00      	cmp	r3, #0
 801398a:	d00a      	beq.n	80139a2 <xEventGroupSetBits+0x52>
 801398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013990:	f383 8811 	msr	BASEPRI, r3
 8013994:	f3bf 8f6f 	isb	sy
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	60fb      	str	r3, [r7, #12]
 801399e:	bf00      	nop
 80139a0:	e7fe      	b.n	80139a0 <xEventGroupSetBits+0x50>
 80139a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a4:	3304      	adds	r3, #4
 80139a6:	627b      	str	r3, [r7, #36]	; 0x24
 80139a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139aa:	3308      	adds	r3, #8
 80139ac:	623b      	str	r3, [r7, #32]
 80139ae:	f001 fab9 	bl	8014f24 <vTaskSuspendAll>
 80139b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b4:	68db      	ldr	r3, [r3, #12]
 80139b6:	637b      	str	r3, [r7, #52]	; 0x34
 80139b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	431a      	orrs	r2, r3
 80139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c2:	601a      	str	r2, [r3, #0]
 80139c4:	e03c      	b.n	8013a40 <xEventGroupSetBits+0xf0>
 80139c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	61fb      	str	r3, [r7, #28]
 80139cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	61bb      	str	r3, [r7, #24]
 80139d2:	2300      	movs	r3, #0
 80139d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139dc:	617b      	str	r3, [r7, #20]
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80139e4:	61bb      	str	r3, [r7, #24]
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d108      	bne.n	8013a02 <xEventGroupSetBits+0xb2>
 80139f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	4013      	ands	r3, r2
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d00b      	beq.n	8013a14 <xEventGroupSetBits+0xc4>
 80139fc:	2301      	movs	r3, #1
 80139fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a00:	e008      	b.n	8013a14 <xEventGroupSetBits+0xc4>
 8013a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	4013      	ands	r3, r2
 8013a0a:	69ba      	ldr	r2, [r7, #24]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d101      	bne.n	8013a14 <xEventGroupSetBits+0xc4>
 8013a10:	2301      	movs	r3, #1
 8013a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d010      	beq.n	8013a3c <xEventGroupSetBits+0xec>
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d003      	beq.n	8013a2c <xEventGroupSetBits+0xdc>
 8013a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013a34:	4619      	mov	r1, r3
 8013a36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a38:	f001 fd40 	bl	80154bc <vTaskRemoveFromUnorderedEventList>
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8013a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a42:	6a3b      	ldr	r3, [r7, #32]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d1be      	bne.n	80139c6 <xEventGroupSetBits+0x76>
 8013a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4e:	43db      	mvns	r3, r3
 8013a50:	401a      	ands	r2, r3
 8013a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a54:	601a      	str	r2, [r3, #0]
 8013a56:	f001 fa73 	bl	8014f40 <xTaskResumeAll>
 8013a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3738      	adds	r7, #56	; 0x38
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <vEventGroupSetBitsCallback>:
 8013a66:	b580      	push	{r7, lr}
 8013a68:	b082      	sub	sp, #8
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	6039      	str	r1, [r7, #0]
 8013a70:	6839      	ldr	r1, [r7, #0]
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7ff ff6c 	bl	8013950 <xEventGroupSetBits>
 8013a78:	bf00      	nop
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <vEventGroupClearBitsCallback>:
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
 8013a8a:	6839      	ldr	r1, [r7, #0]
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff feef 	bl	8013870 <xEventGroupClearBits>
 8013a92:	bf00      	nop
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <prvTestWaitCondition>:
 8013a9a:	b480      	push	{r7}
 8013a9c:	b087      	sub	sp, #28
 8013a9e:	af00      	add	r7, sp, #0
 8013aa0:	60f8      	str	r0, [r7, #12]
 8013aa2:	60b9      	str	r1, [r7, #8]
 8013aa4:	607a      	str	r2, [r7, #4]
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d107      	bne.n	8013ac0 <prvTestWaitCondition+0x26>
 8013ab0:	68fa      	ldr	r2, [r7, #12]
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	4013      	ands	r3, r2
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00a      	beq.n	8013ad0 <prvTestWaitCondition+0x36>
 8013aba:	2301      	movs	r3, #1
 8013abc:	617b      	str	r3, [r7, #20]
 8013abe:	e007      	b.n	8013ad0 <prvTestWaitCondition+0x36>
 8013ac0:	68fa      	ldr	r2, [r7, #12]
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	4013      	ands	r3, r2
 8013ac6:	68ba      	ldr	r2, [r7, #8]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d101      	bne.n	8013ad0 <prvTestWaitCondition+0x36>
 8013acc:	2301      	movs	r3, #1
 8013ace:	617b      	str	r3, [r7, #20]
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	371c      	adds	r7, #28
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013adc:	4770      	bx	lr
	...

08013ae0 <xEventGroupSetBitsFromISR>:
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b086      	sub	sp, #24
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	60b9      	str	r1, [r7, #8]
 8013aea:	607a      	str	r2, [r7, #4]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	68ba      	ldr	r2, [r7, #8]
 8013af0:	68f9      	ldr	r1, [r7, #12]
 8013af2:	4804      	ldr	r0, [pc, #16]	; (8013b04 <xEventGroupSetBitsFromISR+0x24>)
 8013af4:	f002 fae4 	bl	80160c0 <xTimerPendFunctionCallFromISR>
 8013af8:	6178      	str	r0, [r7, #20]
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	4618      	mov	r0, r3
 8013afe:	3718      	adds	r7, #24
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	08013a67 	.word	0x08013a67

08013b08 <vListInitialise>:
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f103 0208 	add.w	r2, r3, #8
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	605a      	str	r2, [r3, #4]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b20:	609a      	str	r2, [r3, #8]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f103 0208 	add.w	r2, r3, #8
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	60da      	str	r2, [r3, #12]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f103 0208 	add.w	r2, r3, #8
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	611a      	str	r2, [r3, #16]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	601a      	str	r2, [r3, #0]
 8013b3c:	bf00      	nop
 8013b3e:	370c      	adds	r7, #12
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <vListInitialiseItem>:
 8013b48:	b480      	push	{r7}
 8013b4a:	b083      	sub	sp, #12
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2200      	movs	r2, #0
 8013b54:	611a      	str	r2, [r3, #16]
 8013b56:	bf00      	nop
 8013b58:	370c      	adds	r7, #12
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr

08013b62 <vListInsertEnd>:
 8013b62:	b480      	push	{r7}
 8013b64:	b085      	sub	sp, #20
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	6078      	str	r0, [r7, #4]
 8013b6a:	6039      	str	r1, [r7, #0]
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	60fb      	str	r3, [r7, #12]
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	605a      	str	r2, [r3, #4]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	689a      	ldr	r2, [r3, #8]
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	609a      	str	r2, [r3, #8]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	683a      	ldr	r2, [r7, #0]
 8013b86:	605a      	str	r2, [r3, #4]
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	683a      	ldr	r2, [r7, #0]
 8013b8c:	609a      	str	r2, [r3, #8]
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	611a      	str	r2, [r3, #16]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	1c5a      	adds	r2, r3, #1
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	601a      	str	r2, [r3, #0]
 8013b9e:	bf00      	nop
 8013ba0:	3714      	adds	r7, #20
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr

08013baa <vListInsert>:
 8013baa:	b480      	push	{r7}
 8013bac:	b085      	sub	sp, #20
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
 8013bb2:	6039      	str	r1, [r7, #0]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	60bb      	str	r3, [r7, #8]
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bc0:	d103      	bne.n	8013bca <vListInsert+0x20>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	691b      	ldr	r3, [r3, #16]
 8013bc6:	60fb      	str	r3, [r7, #12]
 8013bc8:	e00c      	b.n	8013be4 <vListInsert+0x3a>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	3308      	adds	r3, #8
 8013bce:	60fb      	str	r3, [r7, #12]
 8013bd0:	e002      	b.n	8013bd8 <vListInsert+0x2e>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	60fb      	str	r3, [r7, #12]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d2f6      	bcs.n	8013bd2 <vListInsert+0x28>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	685a      	ldr	r2, [r3, #4]
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	605a      	str	r2, [r3, #4]
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	683a      	ldr	r2, [r7, #0]
 8013bf2:	609a      	str	r2, [r3, #8]
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	68fa      	ldr	r2, [r7, #12]
 8013bf8:	609a      	str	r2, [r3, #8]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	683a      	ldr	r2, [r7, #0]
 8013bfe:	605a      	str	r2, [r3, #4]
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	687a      	ldr	r2, [r7, #4]
 8013c04:	611a      	str	r2, [r3, #16]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	1c5a      	adds	r2, r3, #1
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	bf00      	nop
 8013c12:	3714      	adds	r7, #20
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <uxListRemove>:
 8013c1c:	b480      	push	{r7}
 8013c1e:	b085      	sub	sp, #20
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	691b      	ldr	r3, [r3, #16]
 8013c28:	60fb      	str	r3, [r7, #12]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	6892      	ldr	r2, [r2, #8]
 8013c32:	609a      	str	r2, [r3, #8]
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	6852      	ldr	r2, [r2, #4]
 8013c3c:	605a      	str	r2, [r3, #4]
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d103      	bne.n	8013c50 <uxListRemove+0x34>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	689a      	ldr	r2, [r3, #8]
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	605a      	str	r2, [r3, #4]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	611a      	str	r2, [r3, #16]
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	1e5a      	subs	r2, r3, #1
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	601a      	str	r2, [r3, #0]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4618      	mov	r0, r3
 8013c66:	3714      	adds	r7, #20
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr

08013c70 <xQueueGenericReset>:
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	60fb      	str	r3, [r7, #12]
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d10a      	bne.n	8013c9a <xQueueGenericReset+0x2a>
 8013c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c88:	f383 8811 	msr	BASEPRI, r3
 8013c8c:	f3bf 8f6f 	isb	sy
 8013c90:	f3bf 8f4f 	dsb	sy
 8013c94:	60bb      	str	r3, [r7, #8]
 8013c96:	bf00      	nop
 8013c98:	e7fe      	b.n	8013c98 <xQueueGenericReset+0x28>
 8013c9a:	f002 fb5b 	bl	8016354 <vPortEnterCritical>
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ca6:	68f9      	ldr	r1, [r7, #12]
 8013ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013caa:	fb01 f303 	mul.w	r3, r1, r3
 8013cae:	441a      	add	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	609a      	str	r2, [r3, #8]
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	681a      	ldr	r2, [r3, #0]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	605a      	str	r2, [r3, #4]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	68f9      	ldr	r1, [r7, #12]
 8013cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013cd0:	fb01 f303 	mul.w	r3, r1, r3
 8013cd4:	441a      	add	r2, r3
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	60da      	str	r2, [r3, #12]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	22ff      	movs	r2, #255	; 0xff
 8013cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	22ff      	movs	r2, #255	; 0xff
 8013ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d114      	bne.n	8013d1a <xQueueGenericReset+0xaa>
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d01a      	beq.n	8013d2e <xQueueGenericReset+0xbe>
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	3310      	adds	r3, #16
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f001 fb79 	bl	80153f4 <xTaskRemoveFromEventList>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d012      	beq.n	8013d2e <xQueueGenericReset+0xbe>
 8013d08:	4b0c      	ldr	r3, [pc, #48]	; (8013d3c <xQueueGenericReset+0xcc>)
 8013d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d0e:	601a      	str	r2, [r3, #0]
 8013d10:	f3bf 8f4f 	dsb	sy
 8013d14:	f3bf 8f6f 	isb	sy
 8013d18:	e009      	b.n	8013d2e <xQueueGenericReset+0xbe>
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	3310      	adds	r3, #16
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff fef2 	bl	8013b08 <vListInitialise>
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	3324      	adds	r3, #36	; 0x24
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7ff feed 	bl	8013b08 <vListInitialise>
 8013d2e:	f002 fb41 	bl	80163b4 <vPortExitCritical>
 8013d32:	2301      	movs	r3, #1
 8013d34:	4618      	mov	r0, r3
 8013d36:	3710      	adds	r7, #16
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	e000ed04 	.word	0xe000ed04

08013d40 <xQueueGenericCreateStatic>:
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b08e      	sub	sp, #56	; 0x38
 8013d44:	af02      	add	r7, sp, #8
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
 8013d4c:	603b      	str	r3, [r7, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d10a      	bne.n	8013d6a <xQueueGenericCreateStatic+0x2a>
 8013d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d58:	f383 8811 	msr	BASEPRI, r3
 8013d5c:	f3bf 8f6f 	isb	sy
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d66:	bf00      	nop
 8013d68:	e7fe      	b.n	8013d68 <xQueueGenericCreateStatic+0x28>
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10a      	bne.n	8013d86 <xQueueGenericCreateStatic+0x46>
 8013d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	627b      	str	r3, [r7, #36]	; 0x24
 8013d82:	bf00      	nop
 8013d84:	e7fe      	b.n	8013d84 <xQueueGenericCreateStatic+0x44>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d002      	beq.n	8013d92 <xQueueGenericCreateStatic+0x52>
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <xQueueGenericCreateStatic+0x56>
 8013d92:	2301      	movs	r3, #1
 8013d94:	e000      	b.n	8013d98 <xQueueGenericCreateStatic+0x58>
 8013d96:	2300      	movs	r3, #0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d10a      	bne.n	8013db2 <xQueueGenericCreateStatic+0x72>
 8013d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da0:	f383 8811 	msr	BASEPRI, r3
 8013da4:	f3bf 8f6f 	isb	sy
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	623b      	str	r3, [r7, #32]
 8013dae:	bf00      	nop
 8013db0:	e7fe      	b.n	8013db0 <xQueueGenericCreateStatic+0x70>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d102      	bne.n	8013dbe <xQueueGenericCreateStatic+0x7e>
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d101      	bne.n	8013dc2 <xQueueGenericCreateStatic+0x82>
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	e000      	b.n	8013dc4 <xQueueGenericCreateStatic+0x84>
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10a      	bne.n	8013dde <xQueueGenericCreateStatic+0x9e>
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	61fb      	str	r3, [r7, #28]
 8013dda:	bf00      	nop
 8013ddc:	e7fe      	b.n	8013ddc <xQueueGenericCreateStatic+0x9c>
 8013dde:	2350      	movs	r3, #80	; 0x50
 8013de0:	617b      	str	r3, [r7, #20]
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	2b50      	cmp	r3, #80	; 0x50
 8013de6:	d00a      	beq.n	8013dfe <xQueueGenericCreateStatic+0xbe>
 8013de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	61bb      	str	r3, [r7, #24]
 8013dfa:	bf00      	nop
 8013dfc:	e7fe      	b.n	8013dfc <xQueueGenericCreateStatic+0xbc>
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00d      	beq.n	8013e26 <xQueueGenericCreateStatic+0xe6>
 8013e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e18:	9300      	str	r3, [sp, #0]
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	68b9      	ldr	r1, [r7, #8]
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	f000 f83f 	bl	8013ea4 <prvInitialiseNewQueue>
 8013e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3730      	adds	r7, #48	; 0x30
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <xQueueGenericCreate>:
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b08a      	sub	sp, #40	; 0x28
 8013e34:	af02      	add	r7, sp, #8
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	71fb      	strb	r3, [r7, #7]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10a      	bne.n	8013e5a <xQueueGenericCreate+0x2a>
 8013e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e48:	f383 8811 	msr	BASEPRI, r3
 8013e4c:	f3bf 8f6f 	isb	sy
 8013e50:	f3bf 8f4f 	dsb	sy
 8013e54:	613b      	str	r3, [r7, #16]
 8013e56:	bf00      	nop
 8013e58:	e7fe      	b.n	8013e58 <xQueueGenericCreate+0x28>
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	68ba      	ldr	r2, [r7, #8]
 8013e5e:	fb02 f303 	mul.w	r3, r2, r3
 8013e62:	61fb      	str	r3, [r7, #28]
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	3350      	adds	r3, #80	; 0x50
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f002 fb95 	bl	8016598 <pvPortMalloc>
 8013e6e:	61b8      	str	r0, [r7, #24]
 8013e70:	69bb      	ldr	r3, [r7, #24]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d011      	beq.n	8013e9a <xQueueGenericCreate+0x6a>
 8013e76:	69bb      	ldr	r3, [r7, #24]
 8013e78:	617b      	str	r3, [r7, #20]
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	3350      	adds	r3, #80	; 0x50
 8013e7e:	617b      	str	r3, [r7, #20]
 8013e80:	69bb      	ldr	r3, [r7, #24]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013e88:	79fa      	ldrb	r2, [r7, #7]
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	9300      	str	r3, [sp, #0]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	697a      	ldr	r2, [r7, #20]
 8013e92:	68b9      	ldr	r1, [r7, #8]
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f000 f805 	bl	8013ea4 <prvInitialiseNewQueue>
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3720      	adds	r7, #32
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <prvInitialiseNewQueue>:
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	70fb      	strb	r3, [r7, #3]
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d103      	bne.n	8013ec0 <prvInitialiseNewQueue+0x1c>
 8013eb8:	69bb      	ldr	r3, [r7, #24]
 8013eba:	69ba      	ldr	r2, [r7, #24]
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	e002      	b.n	8013ec6 <prvInitialiseNewQueue+0x22>
 8013ec0:	69bb      	ldr	r3, [r7, #24]
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	601a      	str	r2, [r3, #0]
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	68fa      	ldr	r2, [r7, #12]
 8013eca:	63da      	str	r2, [r3, #60]	; 0x3c
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8013ed2:	2101      	movs	r1, #1
 8013ed4:	69b8      	ldr	r0, [r7, #24]
 8013ed6:	f7ff fecb 	bl	8013c70 <xQueueGenericReset>
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	78fa      	ldrb	r2, [r7, #3]
 8013ede:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8013ee2:	bf00      	nop
 8013ee4:	3710      	adds	r7, #16
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
	...

08013eec <xQueueGenericSend>:
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b08e      	sub	sp, #56	; 0x38
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	607a      	str	r2, [r7, #4]
 8013ef8:	603b      	str	r3, [r7, #0]
 8013efa:	2300      	movs	r3, #0
 8013efc:	637b      	str	r3, [r7, #52]	; 0x34
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	633b      	str	r3, [r7, #48]	; 0x30
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d10a      	bne.n	8013f1e <xQueueGenericSend+0x32>
 8013f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0c:	f383 8811 	msr	BASEPRI, r3
 8013f10:	f3bf 8f6f 	isb	sy
 8013f14:	f3bf 8f4f 	dsb	sy
 8013f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f1a:	bf00      	nop
 8013f1c:	e7fe      	b.n	8013f1c <xQueueGenericSend+0x30>
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d103      	bne.n	8013f2c <xQueueGenericSend+0x40>
 8013f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d101      	bne.n	8013f30 <xQueueGenericSend+0x44>
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	e000      	b.n	8013f32 <xQueueGenericSend+0x46>
 8013f30:	2300      	movs	r3, #0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d10a      	bne.n	8013f4c <xQueueGenericSend+0x60>
 8013f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3a:	f383 8811 	msr	BASEPRI, r3
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	627b      	str	r3, [r7, #36]	; 0x24
 8013f48:	bf00      	nop
 8013f4a:	e7fe      	b.n	8013f4a <xQueueGenericSend+0x5e>
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2b02      	cmp	r3, #2
 8013f50:	d103      	bne.n	8013f5a <xQueueGenericSend+0x6e>
 8013f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d101      	bne.n	8013f5e <xQueueGenericSend+0x72>
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	e000      	b.n	8013f60 <xQueueGenericSend+0x74>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d10a      	bne.n	8013f7a <xQueueGenericSend+0x8e>
 8013f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f68:	f383 8811 	msr	BASEPRI, r3
 8013f6c:	f3bf 8f6f 	isb	sy
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	623b      	str	r3, [r7, #32]
 8013f76:	bf00      	nop
 8013f78:	e7fe      	b.n	8013f78 <xQueueGenericSend+0x8c>
 8013f7a:	f001 fc5b 	bl	8015834 <xTaskGetSchedulerState>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d102      	bne.n	8013f8a <xQueueGenericSend+0x9e>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d101      	bne.n	8013f8e <xQueueGenericSend+0xa2>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e000      	b.n	8013f90 <xQueueGenericSend+0xa4>
 8013f8e:	2300      	movs	r3, #0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d10a      	bne.n	8013faa <xQueueGenericSend+0xbe>
 8013f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f98:	f383 8811 	msr	BASEPRI, r3
 8013f9c:	f3bf 8f6f 	isb	sy
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	61fb      	str	r3, [r7, #28]
 8013fa6:	bf00      	nop
 8013fa8:	e7fe      	b.n	8013fa8 <xQueueGenericSend+0xbc>
 8013faa:	f002 f9d3 	bl	8016354 <vPortEnterCritical>
 8013fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d302      	bcc.n	8013fc0 <xQueueGenericSend+0xd4>
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	2b02      	cmp	r3, #2
 8013fbe:	d129      	bne.n	8014014 <xQueueGenericSend+0x128>
 8013fc0:	683a      	ldr	r2, [r7, #0]
 8013fc2:	68b9      	ldr	r1, [r7, #8]
 8013fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fc6:	f000 fa8b 	bl	80144e0 <prvCopyDataToQueue>
 8013fca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d010      	beq.n	8013ff6 <xQueueGenericSend+0x10a>
 8013fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd6:	3324      	adds	r3, #36	; 0x24
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f001 fa0b 	bl	80153f4 <xTaskRemoveFromEventList>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d013      	beq.n	801400c <xQueueGenericSend+0x120>
 8013fe4:	4b3f      	ldr	r3, [pc, #252]	; (80140e4 <xQueueGenericSend+0x1f8>)
 8013fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fea:	601a      	str	r2, [r3, #0]
 8013fec:	f3bf 8f4f 	dsb	sy
 8013ff0:	f3bf 8f6f 	isb	sy
 8013ff4:	e00a      	b.n	801400c <xQueueGenericSend+0x120>
 8013ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d007      	beq.n	801400c <xQueueGenericSend+0x120>
 8013ffc:	4b39      	ldr	r3, [pc, #228]	; (80140e4 <xQueueGenericSend+0x1f8>)
 8013ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014002:	601a      	str	r2, [r3, #0]
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	f3bf 8f6f 	isb	sy
 801400c:	f002 f9d2 	bl	80163b4 <vPortExitCritical>
 8014010:	2301      	movs	r3, #1
 8014012:	e063      	b.n	80140dc <xQueueGenericSend+0x1f0>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d103      	bne.n	8014022 <xQueueGenericSend+0x136>
 801401a:	f002 f9cb 	bl	80163b4 <vPortExitCritical>
 801401e:	2300      	movs	r3, #0
 8014020:	e05c      	b.n	80140dc <xQueueGenericSend+0x1f0>
 8014022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014024:	2b00      	cmp	r3, #0
 8014026:	d106      	bne.n	8014036 <xQueueGenericSend+0x14a>
 8014028:	f107 0314 	add.w	r3, r7, #20
 801402c:	4618      	mov	r0, r3
 801402e:	f001 faa7 	bl	8015580 <vTaskInternalSetTimeOutState>
 8014032:	2301      	movs	r3, #1
 8014034:	637b      	str	r3, [r7, #52]	; 0x34
 8014036:	f002 f9bd 	bl	80163b4 <vPortExitCritical>
 801403a:	f000 ff73 	bl	8014f24 <vTaskSuspendAll>
 801403e:	f002 f989 	bl	8016354 <vPortEnterCritical>
 8014042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014048:	b25b      	sxtb	r3, r3
 801404a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801404e:	d103      	bne.n	8014058 <xQueueGenericSend+0x16c>
 8014050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014052:	2200      	movs	r2, #0
 8014054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801405e:	b25b      	sxtb	r3, r3
 8014060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014064:	d103      	bne.n	801406e <xQueueGenericSend+0x182>
 8014066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014068:	2200      	movs	r2, #0
 801406a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801406e:	f002 f9a1 	bl	80163b4 <vPortExitCritical>
 8014072:	1d3a      	adds	r2, r7, #4
 8014074:	f107 0314 	add.w	r3, r7, #20
 8014078:	4611      	mov	r1, r2
 801407a:	4618      	mov	r0, r3
 801407c:	f001 fa96 	bl	80155ac <xTaskCheckForTimeOut>
 8014080:	4603      	mov	r3, r0
 8014082:	2b00      	cmp	r3, #0
 8014084:	d124      	bne.n	80140d0 <xQueueGenericSend+0x1e4>
 8014086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014088:	f000 fb22 	bl	80146d0 <prvIsQueueFull>
 801408c:	4603      	mov	r3, r0
 801408e:	2b00      	cmp	r3, #0
 8014090:	d018      	beq.n	80140c4 <xQueueGenericSend+0x1d8>
 8014092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014094:	3310      	adds	r3, #16
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	4611      	mov	r1, r2
 801409a:	4618      	mov	r0, r3
 801409c:	f001 f91e 	bl	80152dc <vTaskPlaceOnEventList>
 80140a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140a2:	f000 faad 	bl	8014600 <prvUnlockQueue>
 80140a6:	f000 ff4b 	bl	8014f40 <xTaskResumeAll>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	f47f af7c 	bne.w	8013faa <xQueueGenericSend+0xbe>
 80140b2:	4b0c      	ldr	r3, [pc, #48]	; (80140e4 <xQueueGenericSend+0x1f8>)
 80140b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	f3bf 8f4f 	dsb	sy
 80140be:	f3bf 8f6f 	isb	sy
 80140c2:	e772      	b.n	8013faa <xQueueGenericSend+0xbe>
 80140c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140c6:	f000 fa9b 	bl	8014600 <prvUnlockQueue>
 80140ca:	f000 ff39 	bl	8014f40 <xTaskResumeAll>
 80140ce:	e76c      	b.n	8013faa <xQueueGenericSend+0xbe>
 80140d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140d2:	f000 fa95 	bl	8014600 <prvUnlockQueue>
 80140d6:	f000 ff33 	bl	8014f40 <xTaskResumeAll>
 80140da:	2300      	movs	r3, #0
 80140dc:	4618      	mov	r0, r3
 80140de:	3738      	adds	r7, #56	; 0x38
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	e000ed04 	.word	0xe000ed04

080140e8 <xQueueGenericSendFromISR>:
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b090      	sub	sp, #64	; 0x40
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
 80140f4:	603b      	str	r3, [r7, #0]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80140fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10a      	bne.n	8014116 <xQueueGenericSendFromISR+0x2e>
 8014100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014104:	f383 8811 	msr	BASEPRI, r3
 8014108:	f3bf 8f6f 	isb	sy
 801410c:	f3bf 8f4f 	dsb	sy
 8014110:	62bb      	str	r3, [r7, #40]	; 0x28
 8014112:	bf00      	nop
 8014114:	e7fe      	b.n	8014114 <xQueueGenericSendFromISR+0x2c>
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d103      	bne.n	8014124 <xQueueGenericSendFromISR+0x3c>
 801411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014120:	2b00      	cmp	r3, #0
 8014122:	d101      	bne.n	8014128 <xQueueGenericSendFromISR+0x40>
 8014124:	2301      	movs	r3, #1
 8014126:	e000      	b.n	801412a <xQueueGenericSendFromISR+0x42>
 8014128:	2300      	movs	r3, #0
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10a      	bne.n	8014144 <xQueueGenericSendFromISR+0x5c>
 801412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014132:	f383 8811 	msr	BASEPRI, r3
 8014136:	f3bf 8f6f 	isb	sy
 801413a:	f3bf 8f4f 	dsb	sy
 801413e:	627b      	str	r3, [r7, #36]	; 0x24
 8014140:	bf00      	nop
 8014142:	e7fe      	b.n	8014142 <xQueueGenericSendFromISR+0x5a>
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	2b02      	cmp	r3, #2
 8014148:	d103      	bne.n	8014152 <xQueueGenericSendFromISR+0x6a>
 801414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801414e:	2b01      	cmp	r3, #1
 8014150:	d101      	bne.n	8014156 <xQueueGenericSendFromISR+0x6e>
 8014152:	2301      	movs	r3, #1
 8014154:	e000      	b.n	8014158 <xQueueGenericSendFromISR+0x70>
 8014156:	2300      	movs	r3, #0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d10a      	bne.n	8014172 <xQueueGenericSendFromISR+0x8a>
 801415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014160:	f383 8811 	msr	BASEPRI, r3
 8014164:	f3bf 8f6f 	isb	sy
 8014168:	f3bf 8f4f 	dsb	sy
 801416c:	623b      	str	r3, [r7, #32]
 801416e:	bf00      	nop
 8014170:	e7fe      	b.n	8014170 <xQueueGenericSendFromISR+0x88>
 8014172:	f002 f9d1 	bl	8016518 <vPortValidateInterruptPriority>
 8014176:	f3ef 8211 	mrs	r2, BASEPRI
 801417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417e:	f383 8811 	msr	BASEPRI, r3
 8014182:	f3bf 8f6f 	isb	sy
 8014186:	f3bf 8f4f 	dsb	sy
 801418a:	61fa      	str	r2, [r7, #28]
 801418c:	61bb      	str	r3, [r7, #24]
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	637b      	str	r3, [r7, #52]	; 0x34
 8014192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801419a:	429a      	cmp	r2, r3
 801419c:	d302      	bcc.n	80141a4 <xQueueGenericSendFromISR+0xbc>
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d12f      	bne.n	8014204 <xQueueGenericSendFromISR+0x11c>
 80141a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80141ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141b4:	683a      	ldr	r2, [r7, #0]
 80141b6:	68b9      	ldr	r1, [r7, #8]
 80141b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141ba:	f000 f991 	bl	80144e0 <prvCopyDataToQueue>
 80141be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80141c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141c6:	d112      	bne.n	80141ee <xQueueGenericSendFromISR+0x106>
 80141c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d016      	beq.n	80141fe <xQueueGenericSendFromISR+0x116>
 80141d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d2:	3324      	adds	r3, #36	; 0x24
 80141d4:	4618      	mov	r0, r3
 80141d6:	f001 f90d 	bl	80153f4 <xTaskRemoveFromEventList>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d00e      	beq.n	80141fe <xQueueGenericSendFromISR+0x116>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d00b      	beq.n	80141fe <xQueueGenericSendFromISR+0x116>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2201      	movs	r2, #1
 80141ea:	601a      	str	r2, [r3, #0]
 80141ec:	e007      	b.n	80141fe <xQueueGenericSendFromISR+0x116>
 80141ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80141f2:	3301      	adds	r3, #1
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	b25a      	sxtb	r2, r3
 80141f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141fe:	2301      	movs	r3, #1
 8014200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014202:	e001      	b.n	8014208 <xQueueGenericSendFromISR+0x120>
 8014204:	2300      	movs	r3, #0
 8014206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801420a:	617b      	str	r3, [r7, #20]
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	bf00      	nop
 8014214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014216:	4618      	mov	r0, r3
 8014218:	3740      	adds	r7, #64	; 0x40
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
	...

08014220 <xQueueReceive>:
 8014220:	b580      	push	{r7, lr}
 8014222:	b08c      	sub	sp, #48	; 0x30
 8014224:	af00      	add	r7, sp, #0
 8014226:	60f8      	str	r0, [r7, #12]
 8014228:	60b9      	str	r1, [r7, #8]
 801422a:	607a      	str	r2, [r7, #4]
 801422c:	2300      	movs	r3, #0
 801422e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	62bb      	str	r3, [r7, #40]	; 0x28
 8014234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014236:	2b00      	cmp	r3, #0
 8014238:	d10a      	bne.n	8014250 <xQueueReceive+0x30>
 801423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423e:	f383 8811 	msr	BASEPRI, r3
 8014242:	f3bf 8f6f 	isb	sy
 8014246:	f3bf 8f4f 	dsb	sy
 801424a:	623b      	str	r3, [r7, #32]
 801424c:	bf00      	nop
 801424e:	e7fe      	b.n	801424e <xQueueReceive+0x2e>
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d103      	bne.n	801425e <xQueueReceive+0x3e>
 8014256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801425a:	2b00      	cmp	r3, #0
 801425c:	d101      	bne.n	8014262 <xQueueReceive+0x42>
 801425e:	2301      	movs	r3, #1
 8014260:	e000      	b.n	8014264 <xQueueReceive+0x44>
 8014262:	2300      	movs	r3, #0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d10a      	bne.n	801427e <xQueueReceive+0x5e>
 8014268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426c:	f383 8811 	msr	BASEPRI, r3
 8014270:	f3bf 8f6f 	isb	sy
 8014274:	f3bf 8f4f 	dsb	sy
 8014278:	61fb      	str	r3, [r7, #28]
 801427a:	bf00      	nop
 801427c:	e7fe      	b.n	801427c <xQueueReceive+0x5c>
 801427e:	f001 fad9 	bl	8015834 <xTaskGetSchedulerState>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d102      	bne.n	801428e <xQueueReceive+0x6e>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d101      	bne.n	8014292 <xQueueReceive+0x72>
 801428e:	2301      	movs	r3, #1
 8014290:	e000      	b.n	8014294 <xQueueReceive+0x74>
 8014292:	2300      	movs	r3, #0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d10a      	bne.n	80142ae <xQueueReceive+0x8e>
 8014298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801429c:	f383 8811 	msr	BASEPRI, r3
 80142a0:	f3bf 8f6f 	isb	sy
 80142a4:	f3bf 8f4f 	dsb	sy
 80142a8:	61bb      	str	r3, [r7, #24]
 80142aa:	bf00      	nop
 80142ac:	e7fe      	b.n	80142ac <xQueueReceive+0x8c>
 80142ae:	f002 f851 	bl	8016354 <vPortEnterCritical>
 80142b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142b6:	627b      	str	r3, [r7, #36]	; 0x24
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d01f      	beq.n	80142fe <xQueueReceive+0xde>
 80142be:	68b9      	ldr	r1, [r7, #8]
 80142c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142c2:	f000 f977 	bl	80145b4 <prvCopyDataFromQueue>
 80142c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c8:	1e5a      	subs	r2, r3, #1
 80142ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142cc:	639a      	str	r2, [r3, #56]	; 0x38
 80142ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d0:	691b      	ldr	r3, [r3, #16]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00f      	beq.n	80142f6 <xQueueReceive+0xd6>
 80142d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d8:	3310      	adds	r3, #16
 80142da:	4618      	mov	r0, r3
 80142dc:	f001 f88a 	bl	80153f4 <xTaskRemoveFromEventList>
 80142e0:	4603      	mov	r3, r0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d007      	beq.n	80142f6 <xQueueReceive+0xd6>
 80142e6:	4b3d      	ldr	r3, [pc, #244]	; (80143dc <xQueueReceive+0x1bc>)
 80142e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ec:	601a      	str	r2, [r3, #0]
 80142ee:	f3bf 8f4f 	dsb	sy
 80142f2:	f3bf 8f6f 	isb	sy
 80142f6:	f002 f85d 	bl	80163b4 <vPortExitCritical>
 80142fa:	2301      	movs	r3, #1
 80142fc:	e069      	b.n	80143d2 <xQueueReceive+0x1b2>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d103      	bne.n	801430c <xQueueReceive+0xec>
 8014304:	f002 f856 	bl	80163b4 <vPortExitCritical>
 8014308:	2300      	movs	r3, #0
 801430a:	e062      	b.n	80143d2 <xQueueReceive+0x1b2>
 801430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430e:	2b00      	cmp	r3, #0
 8014310:	d106      	bne.n	8014320 <xQueueReceive+0x100>
 8014312:	f107 0310 	add.w	r3, r7, #16
 8014316:	4618      	mov	r0, r3
 8014318:	f001 f932 	bl	8015580 <vTaskInternalSetTimeOutState>
 801431c:	2301      	movs	r3, #1
 801431e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014320:	f002 f848 	bl	80163b4 <vPortExitCritical>
 8014324:	f000 fdfe 	bl	8014f24 <vTaskSuspendAll>
 8014328:	f002 f814 	bl	8016354 <vPortEnterCritical>
 801432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014332:	b25b      	sxtb	r3, r3
 8014334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014338:	d103      	bne.n	8014342 <xQueueReceive+0x122>
 801433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801433c:	2200      	movs	r2, #0
 801433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014348:	b25b      	sxtb	r3, r3
 801434a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801434e:	d103      	bne.n	8014358 <xQueueReceive+0x138>
 8014350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014352:	2200      	movs	r2, #0
 8014354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014358:	f002 f82c 	bl	80163b4 <vPortExitCritical>
 801435c:	1d3a      	adds	r2, r7, #4
 801435e:	f107 0310 	add.w	r3, r7, #16
 8014362:	4611      	mov	r1, r2
 8014364:	4618      	mov	r0, r3
 8014366:	f001 f921 	bl	80155ac <xTaskCheckForTimeOut>
 801436a:	4603      	mov	r3, r0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d123      	bne.n	80143b8 <xQueueReceive+0x198>
 8014370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014372:	f000 f997 	bl	80146a4 <prvIsQueueEmpty>
 8014376:	4603      	mov	r3, r0
 8014378:	2b00      	cmp	r3, #0
 801437a:	d017      	beq.n	80143ac <xQueueReceive+0x18c>
 801437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801437e:	3324      	adds	r3, #36	; 0x24
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	4611      	mov	r1, r2
 8014384:	4618      	mov	r0, r3
 8014386:	f000 ffa9 	bl	80152dc <vTaskPlaceOnEventList>
 801438a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801438c:	f000 f938 	bl	8014600 <prvUnlockQueue>
 8014390:	f000 fdd6 	bl	8014f40 <xTaskResumeAll>
 8014394:	4603      	mov	r3, r0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d189      	bne.n	80142ae <xQueueReceive+0x8e>
 801439a:	4b10      	ldr	r3, [pc, #64]	; (80143dc <xQueueReceive+0x1bc>)
 801439c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143a0:	601a      	str	r2, [r3, #0]
 80143a2:	f3bf 8f4f 	dsb	sy
 80143a6:	f3bf 8f6f 	isb	sy
 80143aa:	e780      	b.n	80142ae <xQueueReceive+0x8e>
 80143ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ae:	f000 f927 	bl	8014600 <prvUnlockQueue>
 80143b2:	f000 fdc5 	bl	8014f40 <xTaskResumeAll>
 80143b6:	e77a      	b.n	80142ae <xQueueReceive+0x8e>
 80143b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ba:	f000 f921 	bl	8014600 <prvUnlockQueue>
 80143be:	f000 fdbf 	bl	8014f40 <xTaskResumeAll>
 80143c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143c4:	f000 f96e 	bl	80146a4 <prvIsQueueEmpty>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	f43f af6f 	beq.w	80142ae <xQueueReceive+0x8e>
 80143d0:	2300      	movs	r3, #0
 80143d2:	4618      	mov	r0, r3
 80143d4:	3730      	adds	r7, #48	; 0x30
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	e000ed04 	.word	0xe000ed04

080143e0 <xQueueReceiveFromISR>:
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b08e      	sub	sp, #56	; 0x38
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	633b      	str	r3, [r7, #48]	; 0x30
 80143f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d10a      	bne.n	801440c <xQueueReceiveFromISR+0x2c>
 80143f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fa:	f383 8811 	msr	BASEPRI, r3
 80143fe:	f3bf 8f6f 	isb	sy
 8014402:	f3bf 8f4f 	dsb	sy
 8014406:	623b      	str	r3, [r7, #32]
 8014408:	bf00      	nop
 801440a:	e7fe      	b.n	801440a <xQueueReceiveFromISR+0x2a>
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d103      	bne.n	801441a <xQueueReceiveFromISR+0x3a>
 8014412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014416:	2b00      	cmp	r3, #0
 8014418:	d101      	bne.n	801441e <xQueueReceiveFromISR+0x3e>
 801441a:	2301      	movs	r3, #1
 801441c:	e000      	b.n	8014420 <xQueueReceiveFromISR+0x40>
 801441e:	2300      	movs	r3, #0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d10a      	bne.n	801443a <xQueueReceiveFromISR+0x5a>
 8014424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014428:	f383 8811 	msr	BASEPRI, r3
 801442c:	f3bf 8f6f 	isb	sy
 8014430:	f3bf 8f4f 	dsb	sy
 8014434:	61fb      	str	r3, [r7, #28]
 8014436:	bf00      	nop
 8014438:	e7fe      	b.n	8014438 <xQueueReceiveFromISR+0x58>
 801443a:	f002 f86d 	bl	8016518 <vPortValidateInterruptPriority>
 801443e:	f3ef 8211 	mrs	r2, BASEPRI
 8014442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014446:	f383 8811 	msr	BASEPRI, r3
 801444a:	f3bf 8f6f 	isb	sy
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	61ba      	str	r2, [r7, #24]
 8014454:	617b      	str	r3, [r7, #20]
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	62fb      	str	r3, [r7, #44]	; 0x2c
 801445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801445e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014462:	2b00      	cmp	r3, #0
 8014464:	d02f      	beq.n	80144c6 <xQueueReceiveFromISR+0xe6>
 8014466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801446c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014470:	68b9      	ldr	r1, [r7, #8]
 8014472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014474:	f000 f89e 	bl	80145b4 <prvCopyDataFromQueue>
 8014478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447a:	1e5a      	subs	r2, r3, #1
 801447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801447e:	639a      	str	r2, [r3, #56]	; 0x38
 8014480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014488:	d112      	bne.n	80144b0 <xQueueReceiveFromISR+0xd0>
 801448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801448c:	691b      	ldr	r3, [r3, #16]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d016      	beq.n	80144c0 <xQueueReceiveFromISR+0xe0>
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	3310      	adds	r3, #16
 8014496:	4618      	mov	r0, r3
 8014498:	f000 ffac 	bl	80153f4 <xTaskRemoveFromEventList>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d00e      	beq.n	80144c0 <xQueueReceiveFromISR+0xe0>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d00b      	beq.n	80144c0 <xQueueReceiveFromISR+0xe0>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2201      	movs	r2, #1
 80144ac:	601a      	str	r2, [r3, #0]
 80144ae:	e007      	b.n	80144c0 <xQueueReceiveFromISR+0xe0>
 80144b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144b4:	3301      	adds	r3, #1
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	b25a      	sxtb	r2, r3
 80144ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144c0:	2301      	movs	r3, #1
 80144c2:	637b      	str	r3, [r7, #52]	; 0x34
 80144c4:	e001      	b.n	80144ca <xQueueReceiveFromISR+0xea>
 80144c6:	2300      	movs	r3, #0
 80144c8:	637b      	str	r3, [r7, #52]	; 0x34
 80144ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144cc:	613b      	str	r3, [r7, #16]
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	f383 8811 	msr	BASEPRI, r3
 80144d4:	bf00      	nop
 80144d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144d8:	4618      	mov	r0, r3
 80144da:	3738      	adds	r7, #56	; 0x38
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <prvCopyDataToQueue>:
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b086      	sub	sp, #24
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	60f8      	str	r0, [r7, #12]
 80144e8:	60b9      	str	r1, [r7, #8]
 80144ea:	607a      	str	r2, [r7, #4]
 80144ec:	2300      	movs	r3, #0
 80144ee:	617b      	str	r3, [r7, #20]
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144f4:	613b      	str	r3, [r7, #16]
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10d      	bne.n	801451a <prvCopyDataToQueue+0x3a>
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d14d      	bne.n	80145a2 <prvCopyDataToQueue+0xc2>
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	689b      	ldr	r3, [r3, #8]
 801450a:	4618      	mov	r0, r3
 801450c:	f001 f9b0 	bl	8015870 <xTaskPriorityDisinherit>
 8014510:	6178      	str	r0, [r7, #20]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	2200      	movs	r2, #0
 8014516:	609a      	str	r2, [r3, #8]
 8014518:	e043      	b.n	80145a2 <prvCopyDataToQueue+0xc2>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d119      	bne.n	8014554 <prvCopyDataToQueue+0x74>
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6858      	ldr	r0, [r3, #4]
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014528:	461a      	mov	r2, r3
 801452a:	68b9      	ldr	r1, [r7, #8]
 801452c:	f002 fa58 	bl	80169e0 <memcpy>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	685a      	ldr	r2, [r3, #4]
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014538:	441a      	add	r2, r3
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	605a      	str	r2, [r3, #4]
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	685a      	ldr	r2, [r3, #4]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	429a      	cmp	r2, r3
 8014548:	d32b      	bcc.n	80145a2 <prvCopyDataToQueue+0xc2>
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	605a      	str	r2, [r3, #4]
 8014552:	e026      	b.n	80145a2 <prvCopyDataToQueue+0xc2>
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	68d8      	ldr	r0, [r3, #12]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801455c:	461a      	mov	r2, r3
 801455e:	68b9      	ldr	r1, [r7, #8]
 8014560:	f002 fa3e 	bl	80169e0 <memcpy>
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	68da      	ldr	r2, [r3, #12]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801456c:	425b      	negs	r3, r3
 801456e:	441a      	add	r2, r3
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	60da      	str	r2, [r3, #12]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	68da      	ldr	r2, [r3, #12]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	429a      	cmp	r2, r3
 801457e:	d207      	bcs.n	8014590 <prvCopyDataToQueue+0xb0>
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	689a      	ldr	r2, [r3, #8]
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014588:	425b      	negs	r3, r3
 801458a:	441a      	add	r2, r3
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	60da      	str	r2, [r3, #12]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b02      	cmp	r3, #2
 8014594:	d105      	bne.n	80145a2 <prvCopyDataToQueue+0xc2>
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d002      	beq.n	80145a2 <prvCopyDataToQueue+0xc2>
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	3b01      	subs	r3, #1
 80145a0:	613b      	str	r3, [r7, #16]
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	1c5a      	adds	r2, r3, #1
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	639a      	str	r2, [r3, #56]	; 0x38
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	4618      	mov	r0, r3
 80145ae:	3718      	adds	r7, #24
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <prvCopyDataFromQueue>:
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d018      	beq.n	80145f8 <prvCopyDataFromQueue+0x44>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	68da      	ldr	r2, [r3, #12]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ce:	441a      	add	r2, r3
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	60da      	str	r2, [r3, #12]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	68da      	ldr	r2, [r3, #12]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	429a      	cmp	r2, r3
 80145de:	d303      	bcc.n	80145e8 <prvCopyDataFromQueue+0x34>
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681a      	ldr	r2, [r3, #0]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	60da      	str	r2, [r3, #12]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	68d9      	ldr	r1, [r3, #12]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145f0:	461a      	mov	r2, r3
 80145f2:	6838      	ldr	r0, [r7, #0]
 80145f4:	f002 f9f4 	bl	80169e0 <memcpy>
 80145f8:	bf00      	nop
 80145fa:	3708      	adds	r7, #8
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <prvUnlockQueue>:
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	f001 fea4 	bl	8016354 <vPortEnterCritical>
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014612:	73fb      	strb	r3, [r7, #15]
 8014614:	e011      	b.n	801463a <prvUnlockQueue+0x3a>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801461a:	2b00      	cmp	r3, #0
 801461c:	d012      	beq.n	8014644 <prvUnlockQueue+0x44>
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	3324      	adds	r3, #36	; 0x24
 8014622:	4618      	mov	r0, r3
 8014624:	f000 fee6 	bl	80153f4 <xTaskRemoveFromEventList>
 8014628:	4603      	mov	r3, r0
 801462a:	2b00      	cmp	r3, #0
 801462c:	d001      	beq.n	8014632 <prvUnlockQueue+0x32>
 801462e:	f001 f81f 	bl	8015670 <vTaskMissedYield>
 8014632:	7bfb      	ldrb	r3, [r7, #15]
 8014634:	3b01      	subs	r3, #1
 8014636:	b2db      	uxtb	r3, r3
 8014638:	73fb      	strb	r3, [r7, #15]
 801463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801463e:	2b00      	cmp	r3, #0
 8014640:	dce9      	bgt.n	8014616 <prvUnlockQueue+0x16>
 8014642:	e000      	b.n	8014646 <prvUnlockQueue+0x46>
 8014644:	bf00      	nop
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	22ff      	movs	r2, #255	; 0xff
 801464a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801464e:	f001 feb1 	bl	80163b4 <vPortExitCritical>
 8014652:	f001 fe7f 	bl	8016354 <vPortEnterCritical>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801465c:	73bb      	strb	r3, [r7, #14]
 801465e:	e011      	b.n	8014684 <prvUnlockQueue+0x84>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	691b      	ldr	r3, [r3, #16]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d012      	beq.n	801468e <prvUnlockQueue+0x8e>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	3310      	adds	r3, #16
 801466c:	4618      	mov	r0, r3
 801466e:	f000 fec1 	bl	80153f4 <xTaskRemoveFromEventList>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d001      	beq.n	801467c <prvUnlockQueue+0x7c>
 8014678:	f000 fffa 	bl	8015670 <vTaskMissedYield>
 801467c:	7bbb      	ldrb	r3, [r7, #14]
 801467e:	3b01      	subs	r3, #1
 8014680:	b2db      	uxtb	r3, r3
 8014682:	73bb      	strb	r3, [r7, #14]
 8014684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014688:	2b00      	cmp	r3, #0
 801468a:	dce9      	bgt.n	8014660 <prvUnlockQueue+0x60>
 801468c:	e000      	b.n	8014690 <prvUnlockQueue+0x90>
 801468e:	bf00      	nop
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	22ff      	movs	r2, #255	; 0xff
 8014694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014698:	f001 fe8c 	bl	80163b4 <vPortExitCritical>
 801469c:	bf00      	nop
 801469e:	3710      	adds	r7, #16
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <prvIsQueueEmpty>:
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b084      	sub	sp, #16
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	f001 fe52 	bl	8016354 <vPortEnterCritical>
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d102      	bne.n	80146be <prvIsQueueEmpty+0x1a>
 80146b8:	2301      	movs	r3, #1
 80146ba:	60fb      	str	r3, [r7, #12]
 80146bc:	e001      	b.n	80146c2 <prvIsQueueEmpty+0x1e>
 80146be:	2300      	movs	r3, #0
 80146c0:	60fb      	str	r3, [r7, #12]
 80146c2:	f001 fe77 	bl	80163b4 <vPortExitCritical>
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	4618      	mov	r0, r3
 80146ca:	3710      	adds	r7, #16
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <prvIsQueueFull>:
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b084      	sub	sp, #16
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	f001 fe3c 	bl	8016354 <vPortEnterCritical>
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d102      	bne.n	80146ee <prvIsQueueFull+0x1e>
 80146e8:	2301      	movs	r3, #1
 80146ea:	60fb      	str	r3, [r7, #12]
 80146ec:	e001      	b.n	80146f2 <prvIsQueueFull+0x22>
 80146ee:	2300      	movs	r3, #0
 80146f0:	60fb      	str	r3, [r7, #12]
 80146f2:	f001 fe5f 	bl	80163b4 <vPortExitCritical>
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	4618      	mov	r0, r3
 80146fa:	3710      	adds	r7, #16
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <vQueueAddToRegistry>:
 8014700:	b480      	push	{r7}
 8014702:	b085      	sub	sp, #20
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
 801470a:	2300      	movs	r3, #0
 801470c:	60fb      	str	r3, [r7, #12]
 801470e:	e014      	b.n	801473a <vQueueAddToRegistry+0x3a>
 8014710:	4a0f      	ldr	r2, [pc, #60]	; (8014750 <vQueueAddToRegistry+0x50>)
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d10b      	bne.n	8014734 <vQueueAddToRegistry+0x34>
 801471c:	490c      	ldr	r1, [pc, #48]	; (8014750 <vQueueAddToRegistry+0x50>)
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	683a      	ldr	r2, [r7, #0]
 8014722:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014726:	4a0a      	ldr	r2, [pc, #40]	; (8014750 <vQueueAddToRegistry+0x50>)
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	4413      	add	r3, r2
 801472e:	687a      	ldr	r2, [r7, #4]
 8014730:	605a      	str	r2, [r3, #4]
 8014732:	e006      	b.n	8014742 <vQueueAddToRegistry+0x42>
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	3301      	adds	r3, #1
 8014738:	60fb      	str	r3, [r7, #12]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2b07      	cmp	r3, #7
 801473e:	d9e7      	bls.n	8014710 <vQueueAddToRegistry+0x10>
 8014740:	bf00      	nop
 8014742:	bf00      	nop
 8014744:	3714      	adds	r7, #20
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	240017cc 	.word	0x240017cc

08014754 <vQueueWaitForMessageRestricted>:
 8014754:	b580      	push	{r7, lr}
 8014756:	b086      	sub	sp, #24
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	607a      	str	r2, [r7, #4]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	617b      	str	r3, [r7, #20]
 8014764:	f001 fdf6 	bl	8016354 <vPortEnterCritical>
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801476e:	b25b      	sxtb	r3, r3
 8014770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014774:	d103      	bne.n	801477e <vQueueWaitForMessageRestricted+0x2a>
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	2200      	movs	r2, #0
 801477a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014784:	b25b      	sxtb	r3, r3
 8014786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801478a:	d103      	bne.n	8014794 <vQueueWaitForMessageRestricted+0x40>
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	2200      	movs	r2, #0
 8014790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014794:	f001 fe0e 	bl	80163b4 <vPortExitCritical>
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801479c:	2b00      	cmp	r3, #0
 801479e:	d106      	bne.n	80147ae <vQueueWaitForMessageRestricted+0x5a>
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	3324      	adds	r3, #36	; 0x24
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	68b9      	ldr	r1, [r7, #8]
 80147a8:	4618      	mov	r0, r3
 80147aa:	f000 fdf7 	bl	801539c <vTaskPlaceOnEventListRestricted>
 80147ae:	6978      	ldr	r0, [r7, #20]
 80147b0:	f7ff ff26 	bl	8014600 <prvUnlockQueue>
 80147b4:	bf00      	nop
 80147b6:	3718      	adds	r7, #24
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <xTaskCreateStatic>:
 80147bc:	b580      	push	{r7, lr}
 80147be:	b08e      	sub	sp, #56	; 0x38
 80147c0:	af04      	add	r7, sp, #16
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
 80147c8:	603b      	str	r3, [r7, #0]
 80147ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10a      	bne.n	80147e6 <xTaskCreateStatic+0x2a>
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	623b      	str	r3, [r7, #32]
 80147e2:	bf00      	nop
 80147e4:	e7fe      	b.n	80147e4 <xTaskCreateStatic+0x28>
 80147e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d10a      	bne.n	8014802 <xTaskCreateStatic+0x46>
 80147ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f0:	f383 8811 	msr	BASEPRI, r3
 80147f4:	f3bf 8f6f 	isb	sy
 80147f8:	f3bf 8f4f 	dsb	sy
 80147fc:	61fb      	str	r3, [r7, #28]
 80147fe:	bf00      	nop
 8014800:	e7fe      	b.n	8014800 <xTaskCreateStatic+0x44>
 8014802:	235c      	movs	r3, #92	; 0x5c
 8014804:	613b      	str	r3, [r7, #16]
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	2b5c      	cmp	r3, #92	; 0x5c
 801480a:	d00a      	beq.n	8014822 <xTaskCreateStatic+0x66>
 801480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014810:	f383 8811 	msr	BASEPRI, r3
 8014814:	f3bf 8f6f 	isb	sy
 8014818:	f3bf 8f4f 	dsb	sy
 801481c:	61bb      	str	r3, [r7, #24]
 801481e:	bf00      	nop
 8014820:	e7fe      	b.n	8014820 <xTaskCreateStatic+0x64>
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014826:	2b00      	cmp	r3, #0
 8014828:	d01e      	beq.n	8014868 <xTaskCreateStatic+0xac>
 801482a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801482c:	2b00      	cmp	r3, #0
 801482e:	d01b      	beq.n	8014868 <xTaskCreateStatic+0xac>
 8014830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014832:	627b      	str	r3, [r7, #36]	; 0x24
 8014834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014838:	631a      	str	r2, [r3, #48]	; 0x30
 801483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483c:	2202      	movs	r2, #2
 801483e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8014842:	2300      	movs	r3, #0
 8014844:	9303      	str	r3, [sp, #12]
 8014846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014848:	9302      	str	r3, [sp, #8]
 801484a:	f107 0314 	add.w	r3, r7, #20
 801484e:	9301      	str	r3, [sp, #4]
 8014850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014852:	9300      	str	r3, [sp, #0]
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	68b9      	ldr	r1, [r7, #8]
 801485a:	68f8      	ldr	r0, [r7, #12]
 801485c:	f000 f850 	bl	8014900 <prvInitialiseNewTask>
 8014860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014862:	f000 f8dd 	bl	8014a20 <prvAddNewTaskToReadyList>
 8014866:	e001      	b.n	801486c <xTaskCreateStatic+0xb0>
 8014868:	2300      	movs	r3, #0
 801486a:	617b      	str	r3, [r7, #20]
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	4618      	mov	r0, r3
 8014870:	3728      	adds	r7, #40	; 0x28
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}

08014876 <xTaskCreate>:
 8014876:	b580      	push	{r7, lr}
 8014878:	b08c      	sub	sp, #48	; 0x30
 801487a:	af04      	add	r7, sp, #16
 801487c:	60f8      	str	r0, [r7, #12]
 801487e:	60b9      	str	r1, [r7, #8]
 8014880:	603b      	str	r3, [r7, #0]
 8014882:	4613      	mov	r3, r2
 8014884:	80fb      	strh	r3, [r7, #6]
 8014886:	88fb      	ldrh	r3, [r7, #6]
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	4618      	mov	r0, r3
 801488c:	f001 fe84 	bl	8016598 <pvPortMalloc>
 8014890:	6178      	str	r0, [r7, #20]
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d00e      	beq.n	80148b6 <xTaskCreate+0x40>
 8014898:	205c      	movs	r0, #92	; 0x5c
 801489a:	f001 fe7d 	bl	8016598 <pvPortMalloc>
 801489e:	61f8      	str	r0, [r7, #28]
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d003      	beq.n	80148ae <xTaskCreate+0x38>
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	697a      	ldr	r2, [r7, #20]
 80148aa:	631a      	str	r2, [r3, #48]	; 0x30
 80148ac:	e005      	b.n	80148ba <xTaskCreate+0x44>
 80148ae:	6978      	ldr	r0, [r7, #20]
 80148b0:	f001 ff3e 	bl	8016730 <vPortFree>
 80148b4:	e001      	b.n	80148ba <xTaskCreate+0x44>
 80148b6:	2300      	movs	r3, #0
 80148b8:	61fb      	str	r3, [r7, #28]
 80148ba:	69fb      	ldr	r3, [r7, #28]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d017      	beq.n	80148f0 <xTaskCreate+0x7a>
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	2200      	movs	r2, #0
 80148c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80148c8:	88fa      	ldrh	r2, [r7, #6]
 80148ca:	2300      	movs	r3, #0
 80148cc:	9303      	str	r3, [sp, #12]
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	9302      	str	r3, [sp, #8]
 80148d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d4:	9301      	str	r3, [sp, #4]
 80148d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	68b9      	ldr	r1, [r7, #8]
 80148de:	68f8      	ldr	r0, [r7, #12]
 80148e0:	f000 f80e 	bl	8014900 <prvInitialiseNewTask>
 80148e4:	69f8      	ldr	r0, [r7, #28]
 80148e6:	f000 f89b 	bl	8014a20 <prvAddNewTaskToReadyList>
 80148ea:	2301      	movs	r3, #1
 80148ec:	61bb      	str	r3, [r7, #24]
 80148ee:	e002      	b.n	80148f6 <xTaskCreate+0x80>
 80148f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80148f4:	61bb      	str	r3, [r7, #24]
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	4618      	mov	r0, r3
 80148fa:	3720      	adds	r7, #32
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <prvInitialiseNewTask>:
 8014900:	b580      	push	{r7, lr}
 8014902:	b088      	sub	sp, #32
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	607a      	str	r2, [r7, #4]
 801490c:	603b      	str	r3, [r7, #0]
 801490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014910:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	461a      	mov	r2, r3
 8014918:	21a5      	movs	r1, #165	; 0xa5
 801491a:	f002 f86f 	bl	80169fc <memset>
 801491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014922:	6879      	ldr	r1, [r7, #4]
 8014924:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014928:	440b      	add	r3, r1
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	4413      	add	r3, r2
 801492e:	61bb      	str	r3, [r7, #24]
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	f023 0307 	bic.w	r3, r3, #7
 8014936:	61bb      	str	r3, [r7, #24]
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	f003 0307 	and.w	r3, r3, #7
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00a      	beq.n	8014958 <prvInitialiseNewTask+0x58>
 8014942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014946:	f383 8811 	msr	BASEPRI, r3
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	617b      	str	r3, [r7, #20]
 8014954:	bf00      	nop
 8014956:	e7fe      	b.n	8014956 <prvInitialiseNewTask+0x56>
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d01f      	beq.n	801499e <prvInitialiseNewTask+0x9e>
 801495e:	2300      	movs	r3, #0
 8014960:	61fb      	str	r3, [r7, #28]
 8014962:	e012      	b.n	801498a <prvInitialiseNewTask+0x8a>
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	69fb      	ldr	r3, [r7, #28]
 8014968:	4413      	add	r3, r2
 801496a:	7819      	ldrb	r1, [r3, #0]
 801496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	4413      	add	r3, r2
 8014972:	3334      	adds	r3, #52	; 0x34
 8014974:	460a      	mov	r2, r1
 8014976:	701a      	strb	r2, [r3, #0]
 8014978:	68ba      	ldr	r2, [r7, #8]
 801497a:	69fb      	ldr	r3, [r7, #28]
 801497c:	4413      	add	r3, r2
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d006      	beq.n	8014992 <prvInitialiseNewTask+0x92>
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	3301      	adds	r3, #1
 8014988:	61fb      	str	r3, [r7, #28]
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	2b0f      	cmp	r3, #15
 801498e:	d9e9      	bls.n	8014964 <prvInitialiseNewTask+0x64>
 8014990:	e000      	b.n	8014994 <prvInitialiseNewTask+0x94>
 8014992:	bf00      	nop
 8014994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014996:	2200      	movs	r2, #0
 8014998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801499c:	e003      	b.n	80149a6 <prvInitialiseNewTask+0xa6>
 801499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a0:	2200      	movs	r2, #0
 80149a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80149a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a8:	2b37      	cmp	r3, #55	; 0x37
 80149aa:	d901      	bls.n	80149b0 <prvInitialiseNewTask+0xb0>
 80149ac:	2337      	movs	r3, #55	; 0x37
 80149ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80149b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80149b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80149bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149be:	2200      	movs	r2, #0
 80149c0:	651a      	str	r2, [r3, #80]	; 0x50
 80149c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c4:	3304      	adds	r3, #4
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff f8be 	bl	8013b48 <vListInitialiseItem>
 80149cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ce:	3318      	adds	r3, #24
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7ff f8b9 	bl	8013b48 <vListInitialiseItem>
 80149d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149da:	611a      	str	r2, [r3, #16]
 80149dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80149e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e4:	619a      	str	r2, [r3, #24]
 80149e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149ea:	625a      	str	r2, [r3, #36]	; 0x24
 80149ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ee:	2200      	movs	r2, #0
 80149f0:	655a      	str	r2, [r3, #84]	; 0x54
 80149f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f4:	2200      	movs	r2, #0
 80149f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80149fa:	683a      	ldr	r2, [r7, #0]
 80149fc:	68f9      	ldr	r1, [r7, #12]
 80149fe:	69b8      	ldr	r0, [r7, #24]
 8014a00:	f001 fb7e 	bl	8016100 <pxPortInitialiseStack>
 8014a04:	4602      	mov	r2, r0
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	601a      	str	r2, [r3, #0]
 8014a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d002      	beq.n	8014a16 <prvInitialiseNewTask+0x116>
 8014a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a14:	601a      	str	r2, [r3, #0]
 8014a16:	bf00      	nop
 8014a18:	3720      	adds	r7, #32
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
	...

08014a20 <prvAddNewTaskToReadyList>:
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	f001 fc94 	bl	8016354 <vPortEnterCritical>
 8014a2c:	4b2d      	ldr	r3, [pc, #180]	; (8014ae4 <prvAddNewTaskToReadyList+0xc4>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	3301      	adds	r3, #1
 8014a32:	4a2c      	ldr	r2, [pc, #176]	; (8014ae4 <prvAddNewTaskToReadyList+0xc4>)
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	4b2c      	ldr	r3, [pc, #176]	; (8014ae8 <prvAddNewTaskToReadyList+0xc8>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d109      	bne.n	8014a52 <prvAddNewTaskToReadyList+0x32>
 8014a3e:	4a2a      	ldr	r2, [pc, #168]	; (8014ae8 <prvAddNewTaskToReadyList+0xc8>)
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6013      	str	r3, [r2, #0]
 8014a44:	4b27      	ldr	r3, [pc, #156]	; (8014ae4 <prvAddNewTaskToReadyList+0xc4>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d110      	bne.n	8014a6e <prvAddNewTaskToReadyList+0x4e>
 8014a4c:	f000 fe34 	bl	80156b8 <prvInitialiseTaskLists>
 8014a50:	e00d      	b.n	8014a6e <prvAddNewTaskToReadyList+0x4e>
 8014a52:	4b26      	ldr	r3, [pc, #152]	; (8014aec <prvAddNewTaskToReadyList+0xcc>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d109      	bne.n	8014a6e <prvAddNewTaskToReadyList+0x4e>
 8014a5a:	4b23      	ldr	r3, [pc, #140]	; (8014ae8 <prvAddNewTaskToReadyList+0xc8>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d802      	bhi.n	8014a6e <prvAddNewTaskToReadyList+0x4e>
 8014a68:	4a1f      	ldr	r2, [pc, #124]	; (8014ae8 <prvAddNewTaskToReadyList+0xc8>)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6013      	str	r3, [r2, #0]
 8014a6e:	4b20      	ldr	r3, [pc, #128]	; (8014af0 <prvAddNewTaskToReadyList+0xd0>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	3301      	adds	r3, #1
 8014a74:	4a1e      	ldr	r2, [pc, #120]	; (8014af0 <prvAddNewTaskToReadyList+0xd0>)
 8014a76:	6013      	str	r3, [r2, #0]
 8014a78:	4b1d      	ldr	r3, [pc, #116]	; (8014af0 <prvAddNewTaskToReadyList+0xd0>)
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	645a      	str	r2, [r3, #68]	; 0x44
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a84:	4b1b      	ldr	r3, [pc, #108]	; (8014af4 <prvAddNewTaskToReadyList+0xd4>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d903      	bls.n	8014a94 <prvAddNewTaskToReadyList+0x74>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a90:	4a18      	ldr	r2, [pc, #96]	; (8014af4 <prvAddNewTaskToReadyList+0xd4>)
 8014a92:	6013      	str	r3, [r2, #0]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a98:	4613      	mov	r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4a15      	ldr	r2, [pc, #84]	; (8014af8 <prvAddNewTaskToReadyList+0xd8>)
 8014aa2:	441a      	add	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	3304      	adds	r3, #4
 8014aa8:	4619      	mov	r1, r3
 8014aaa:	4610      	mov	r0, r2
 8014aac:	f7ff f859 	bl	8013b62 <vListInsertEnd>
 8014ab0:	f001 fc80 	bl	80163b4 <vPortExitCritical>
 8014ab4:	4b0d      	ldr	r3, [pc, #52]	; (8014aec <prvAddNewTaskToReadyList+0xcc>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d00e      	beq.n	8014ada <prvAddNewTaskToReadyList+0xba>
 8014abc:	4b0a      	ldr	r3, [pc, #40]	; (8014ae8 <prvAddNewTaskToReadyList+0xc8>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d207      	bcs.n	8014ada <prvAddNewTaskToReadyList+0xba>
 8014aca:	4b0c      	ldr	r3, [pc, #48]	; (8014afc <prvAddNewTaskToReadyList+0xdc>)
 8014acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	f3bf 8f4f 	dsb	sy
 8014ad6:	f3bf 8f6f 	isb	sy
 8014ada:	bf00      	nop
 8014adc:	3708      	adds	r7, #8
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	24001ce0 	.word	0x24001ce0
 8014ae8:	2400180c 	.word	0x2400180c
 8014aec:	24001cec 	.word	0x24001cec
 8014af0:	24001cfc 	.word	0x24001cfc
 8014af4:	24001ce8 	.word	0x24001ce8
 8014af8:	24001810 	.word	0x24001810
 8014afc:	e000ed04 	.word	0xe000ed04

08014b00 <vTaskDelay>:
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	60fb      	str	r3, [r7, #12]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d017      	beq.n	8014b42 <vTaskDelay+0x42>
 8014b12:	4b13      	ldr	r3, [pc, #76]	; (8014b60 <vTaskDelay+0x60>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d00a      	beq.n	8014b30 <vTaskDelay+0x30>
 8014b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b1e:	f383 8811 	msr	BASEPRI, r3
 8014b22:	f3bf 8f6f 	isb	sy
 8014b26:	f3bf 8f4f 	dsb	sy
 8014b2a:	60bb      	str	r3, [r7, #8]
 8014b2c:	bf00      	nop
 8014b2e:	e7fe      	b.n	8014b2e <vTaskDelay+0x2e>
 8014b30:	f000 f9f8 	bl	8014f24 <vTaskSuspendAll>
 8014b34:	2100      	movs	r1, #0
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f000 ff20 	bl	801597c <prvAddCurrentTaskToDelayedList>
 8014b3c:	f000 fa00 	bl	8014f40 <xTaskResumeAll>
 8014b40:	60f8      	str	r0, [r7, #12]
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d107      	bne.n	8014b58 <vTaskDelay+0x58>
 8014b48:	4b06      	ldr	r3, [pc, #24]	; (8014b64 <vTaskDelay+0x64>)
 8014b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b4e:	601a      	str	r2, [r3, #0]
 8014b50:	f3bf 8f4f 	dsb	sy
 8014b54:	f3bf 8f6f 	isb	sy
 8014b58:	bf00      	nop
 8014b5a:	3710      	adds	r7, #16
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	24001d08 	.word	0x24001d08
 8014b64:	e000ed04 	.word	0xe000ed04

08014b68 <vTaskSuspend>:
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	f001 fbf0 	bl	8016354 <vPortEnterCritical>
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d102      	bne.n	8014b80 <vTaskSuspend+0x18>
 8014b7a:	4b30      	ldr	r3, [pc, #192]	; (8014c3c <vTaskSuspend+0xd4>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	e000      	b.n	8014b82 <vTaskSuspend+0x1a>
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	3304      	adds	r3, #4
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7ff f847 	bl	8013c1c <uxListRemove>
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d004      	beq.n	8014ba0 <vTaskSuspend+0x38>
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	3318      	adds	r3, #24
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7ff f83e 	bl	8013c1c <uxListRemove>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	3304      	adds	r3, #4
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	4826      	ldr	r0, [pc, #152]	; (8014c40 <vTaskSuspend+0xd8>)
 8014ba8:	f7fe ffdb 	bl	8013b62 <vListInsertEnd>
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	2b01      	cmp	r3, #1
 8014bb6:	d103      	bne.n	8014bc0 <vTaskSuspend+0x58>
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014bc0:	f001 fbf8 	bl	80163b4 <vPortExitCritical>
 8014bc4:	4b1f      	ldr	r3, [pc, #124]	; (8014c44 <vTaskSuspend+0xdc>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d005      	beq.n	8014bd8 <vTaskSuspend+0x70>
 8014bcc:	f001 fbc2 	bl	8016354 <vPortEnterCritical>
 8014bd0:	f000 fe10 	bl	80157f4 <prvResetNextTaskUnblockTime>
 8014bd4:	f001 fbee 	bl	80163b4 <vPortExitCritical>
 8014bd8:	4b18      	ldr	r3, [pc, #96]	; (8014c3c <vTaskSuspend+0xd4>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	68fa      	ldr	r2, [r7, #12]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d127      	bne.n	8014c32 <vTaskSuspend+0xca>
 8014be2:	4b18      	ldr	r3, [pc, #96]	; (8014c44 <vTaskSuspend+0xdc>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d017      	beq.n	8014c1a <vTaskSuspend+0xb2>
 8014bea:	4b17      	ldr	r3, [pc, #92]	; (8014c48 <vTaskSuspend+0xe0>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d00a      	beq.n	8014c08 <vTaskSuspend+0xa0>
 8014bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf6:	f383 8811 	msr	BASEPRI, r3
 8014bfa:	f3bf 8f6f 	isb	sy
 8014bfe:	f3bf 8f4f 	dsb	sy
 8014c02:	60bb      	str	r3, [r7, #8]
 8014c04:	bf00      	nop
 8014c06:	e7fe      	b.n	8014c06 <vTaskSuspend+0x9e>
 8014c08:	4b10      	ldr	r3, [pc, #64]	; (8014c4c <vTaskSuspend+0xe4>)
 8014c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c0e:	601a      	str	r2, [r3, #0]
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	f3bf 8f6f 	isb	sy
 8014c18:	e00b      	b.n	8014c32 <vTaskSuspend+0xca>
 8014c1a:	4b09      	ldr	r3, [pc, #36]	; (8014c40 <vTaskSuspend+0xd8>)
 8014c1c:	681a      	ldr	r2, [r3, #0]
 8014c1e:	4b0c      	ldr	r3, [pc, #48]	; (8014c50 <vTaskSuspend+0xe8>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d103      	bne.n	8014c2e <vTaskSuspend+0xc6>
 8014c26:	4b05      	ldr	r3, [pc, #20]	; (8014c3c <vTaskSuspend+0xd4>)
 8014c28:	2200      	movs	r2, #0
 8014c2a:	601a      	str	r2, [r3, #0]
 8014c2c:	e001      	b.n	8014c32 <vTaskSuspend+0xca>
 8014c2e:	f000 faf7 	bl	8015220 <vTaskSwitchContext>
 8014c32:	bf00      	nop
 8014c34:	3710      	adds	r7, #16
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	2400180c 	.word	0x2400180c
 8014c40:	24001ccc 	.word	0x24001ccc
 8014c44:	24001cec 	.word	0x24001cec
 8014c48:	24001d08 	.word	0x24001d08
 8014c4c:	e000ed04 	.word	0xe000ed04
 8014c50:	24001ce0 	.word	0x24001ce0

08014c54 <prvTaskIsTaskSuspended>:
 8014c54:	b480      	push	{r7}
 8014c56:	b087      	sub	sp, #28
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	617b      	str	r3, [r7, #20]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	613b      	str	r3, [r7, #16]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d10a      	bne.n	8014c80 <prvTaskIsTaskSuspended+0x2c>
 8014c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c6e:	f383 8811 	msr	BASEPRI, r3
 8014c72:	f3bf 8f6f 	isb	sy
 8014c76:	f3bf 8f4f 	dsb	sy
 8014c7a:	60fb      	str	r3, [r7, #12]
 8014c7c:	bf00      	nop
 8014c7e:	e7fe      	b.n	8014c7e <prvTaskIsTaskSuspended+0x2a>
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	695b      	ldr	r3, [r3, #20]
 8014c84:	4a0a      	ldr	r2, [pc, #40]	; (8014cb0 <prvTaskIsTaskSuspended+0x5c>)
 8014c86:	4293      	cmp	r3, r2
 8014c88:	d10a      	bne.n	8014ca0 <prvTaskIsTaskSuspended+0x4c>
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c8e:	4a09      	ldr	r2, [pc, #36]	; (8014cb4 <prvTaskIsTaskSuspended+0x60>)
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d005      	beq.n	8014ca0 <prvTaskIsTaskSuspended+0x4c>
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d101      	bne.n	8014ca0 <prvTaskIsTaskSuspended+0x4c>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	617b      	str	r3, [r7, #20]
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	371c      	adds	r7, #28
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	24001ccc 	.word	0x24001ccc
 8014cb4:	24001ca0 	.word	0x24001ca0

08014cb8 <vTaskResume>:
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	60fb      	str	r3, [r7, #12]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d10a      	bne.n	8014ce0 <vTaskResume+0x28>
 8014cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cce:	f383 8811 	msr	BASEPRI, r3
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	f3bf 8f4f 	dsb	sy
 8014cda:	60bb      	str	r3, [r7, #8]
 8014cdc:	bf00      	nop
 8014cde:	e7fe      	b.n	8014cde <vTaskResume+0x26>
 8014ce0:	4b20      	ldr	r3, [pc, #128]	; (8014d64 <vTaskResume+0xac>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d038      	beq.n	8014d5c <vTaskResume+0xa4>
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d035      	beq.n	8014d5c <vTaskResume+0xa4>
 8014cf0:	f001 fb30 	bl	8016354 <vPortEnterCritical>
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f7ff ffad 	bl	8014c54 <prvTaskIsTaskSuspended>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d02b      	beq.n	8014d58 <vTaskResume+0xa0>
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	3304      	adds	r3, #4
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7fe ff89 	bl	8013c1c <uxListRemove>
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d0e:	4b16      	ldr	r3, [pc, #88]	; (8014d68 <vTaskResume+0xb0>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d903      	bls.n	8014d1e <vTaskResume+0x66>
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d1a:	4a13      	ldr	r2, [pc, #76]	; (8014d68 <vTaskResume+0xb0>)
 8014d1c:	6013      	str	r3, [r2, #0]
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d22:	4613      	mov	r3, r2
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	4413      	add	r3, r2
 8014d28:	009b      	lsls	r3, r3, #2
 8014d2a:	4a10      	ldr	r2, [pc, #64]	; (8014d6c <vTaskResume+0xb4>)
 8014d2c:	441a      	add	r2, r3
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	3304      	adds	r3, #4
 8014d32:	4619      	mov	r1, r3
 8014d34:	4610      	mov	r0, r2
 8014d36:	f7fe ff14 	bl	8013b62 <vListInsertEnd>
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d3e:	4b09      	ldr	r3, [pc, #36]	; (8014d64 <vTaskResume+0xac>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d307      	bcc.n	8014d58 <vTaskResume+0xa0>
 8014d48:	4b09      	ldr	r3, [pc, #36]	; (8014d70 <vTaskResume+0xb8>)
 8014d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d4e:	601a      	str	r2, [r3, #0]
 8014d50:	f3bf 8f4f 	dsb	sy
 8014d54:	f3bf 8f6f 	isb	sy
 8014d58:	f001 fb2c 	bl	80163b4 <vPortExitCritical>
 8014d5c:	bf00      	nop
 8014d5e:	3710      	adds	r7, #16
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}
 8014d64:	2400180c 	.word	0x2400180c
 8014d68:	24001ce8 	.word	0x24001ce8
 8014d6c:	24001810 	.word	0x24001810
 8014d70:	e000ed04 	.word	0xe000ed04

08014d74 <xTaskResumeFromISR>:
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b08a      	sub	sp, #40	; 0x28
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	623b      	str	r3, [r7, #32]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d10a      	bne.n	8014da0 <xTaskResumeFromISR+0x2c>
 8014d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8e:	f383 8811 	msr	BASEPRI, r3
 8014d92:	f3bf 8f6f 	isb	sy
 8014d96:	f3bf 8f4f 	dsb	sy
 8014d9a:	61bb      	str	r3, [r7, #24]
 8014d9c:	bf00      	nop
 8014d9e:	e7fe      	b.n	8014d9e <xTaskResumeFromISR+0x2a>
 8014da0:	f001 fbba 	bl	8016518 <vPortValidateInterruptPriority>
 8014da4:	f3ef 8211 	mrs	r2, BASEPRI
 8014da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dac:	f383 8811 	msr	BASEPRI, r3
 8014db0:	f3bf 8f6f 	isb	sy
 8014db4:	f3bf 8f4f 	dsb	sy
 8014db8:	617a      	str	r2, [r7, #20]
 8014dba:	613b      	str	r3, [r7, #16]
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	61fb      	str	r3, [r7, #28]
 8014dc0:	6a38      	ldr	r0, [r7, #32]
 8014dc2:	f7ff ff47 	bl	8014c54 <prvTaskIsTaskSuspended>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d030      	beq.n	8014e2e <xTaskResumeFromISR+0xba>
 8014dcc:	4b1d      	ldr	r3, [pc, #116]	; (8014e44 <xTaskResumeFromISR+0xd0>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d126      	bne.n	8014e22 <xTaskResumeFromISR+0xae>
 8014dd4:	6a3b      	ldr	r3, [r7, #32]
 8014dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dd8:	4b1b      	ldr	r3, [pc, #108]	; (8014e48 <xTaskResumeFromISR+0xd4>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d301      	bcc.n	8014de6 <xTaskResumeFromISR+0x72>
 8014de2:	2301      	movs	r3, #1
 8014de4:	627b      	str	r3, [r7, #36]	; 0x24
 8014de6:	6a3b      	ldr	r3, [r7, #32]
 8014de8:	3304      	adds	r3, #4
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7fe ff16 	bl	8013c1c <uxListRemove>
 8014df0:	6a3b      	ldr	r3, [r7, #32]
 8014df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014df4:	4b15      	ldr	r3, [pc, #84]	; (8014e4c <xTaskResumeFromISR+0xd8>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d903      	bls.n	8014e04 <xTaskResumeFromISR+0x90>
 8014dfc:	6a3b      	ldr	r3, [r7, #32]
 8014dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e00:	4a12      	ldr	r2, [pc, #72]	; (8014e4c <xTaskResumeFromISR+0xd8>)
 8014e02:	6013      	str	r3, [r2, #0]
 8014e04:	6a3b      	ldr	r3, [r7, #32]
 8014e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e08:	4613      	mov	r3, r2
 8014e0a:	009b      	lsls	r3, r3, #2
 8014e0c:	4413      	add	r3, r2
 8014e0e:	009b      	lsls	r3, r3, #2
 8014e10:	4a0f      	ldr	r2, [pc, #60]	; (8014e50 <xTaskResumeFromISR+0xdc>)
 8014e12:	441a      	add	r2, r3
 8014e14:	6a3b      	ldr	r3, [r7, #32]
 8014e16:	3304      	adds	r3, #4
 8014e18:	4619      	mov	r1, r3
 8014e1a:	4610      	mov	r0, r2
 8014e1c:	f7fe fea1 	bl	8013b62 <vListInsertEnd>
 8014e20:	e005      	b.n	8014e2e <xTaskResumeFromISR+0xba>
 8014e22:	6a3b      	ldr	r3, [r7, #32]
 8014e24:	3318      	adds	r3, #24
 8014e26:	4619      	mov	r1, r3
 8014e28:	480a      	ldr	r0, [pc, #40]	; (8014e54 <xTaskResumeFromISR+0xe0>)
 8014e2a:	f7fe fe9a 	bl	8013b62 <vListInsertEnd>
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	60fb      	str	r3, [r7, #12]
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f383 8811 	msr	BASEPRI, r3
 8014e38:	bf00      	nop
 8014e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3728      	adds	r7, #40	; 0x28
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	24001d08 	.word	0x24001d08
 8014e48:	2400180c 	.word	0x2400180c
 8014e4c:	24001ce8 	.word	0x24001ce8
 8014e50:	24001810 	.word	0x24001810
 8014e54:	24001ca0 	.word	0x24001ca0

08014e58 <vTaskStartScheduler>:
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b08a      	sub	sp, #40	; 0x28
 8014e5c:	af04      	add	r7, sp, #16
 8014e5e:	2300      	movs	r3, #0
 8014e60:	60bb      	str	r3, [r7, #8]
 8014e62:	2300      	movs	r3, #0
 8014e64:	607b      	str	r3, [r7, #4]
 8014e66:	463a      	mov	r2, r7
 8014e68:	1d39      	adds	r1, r7, #4
 8014e6a:	f107 0308 	add.w	r3, r7, #8
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fe fbaa 	bl	80135c8 <vApplicationGetIdleTaskMemory>
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	68ba      	ldr	r2, [r7, #8]
 8014e7a:	9202      	str	r2, [sp, #8]
 8014e7c:	9301      	str	r3, [sp, #4]
 8014e7e:	2300      	movs	r3, #0
 8014e80:	9300      	str	r3, [sp, #0]
 8014e82:	2300      	movs	r3, #0
 8014e84:	460a      	mov	r2, r1
 8014e86:	4921      	ldr	r1, [pc, #132]	; (8014f0c <vTaskStartScheduler+0xb4>)
 8014e88:	4821      	ldr	r0, [pc, #132]	; (8014f10 <vTaskStartScheduler+0xb8>)
 8014e8a:	f7ff fc97 	bl	80147bc <xTaskCreateStatic>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	4a20      	ldr	r2, [pc, #128]	; (8014f14 <vTaskStartScheduler+0xbc>)
 8014e92:	6013      	str	r3, [r2, #0]
 8014e94:	4b1f      	ldr	r3, [pc, #124]	; (8014f14 <vTaskStartScheduler+0xbc>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d002      	beq.n	8014ea2 <vTaskStartScheduler+0x4a>
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	617b      	str	r3, [r7, #20]
 8014ea0:	e001      	b.n	8014ea6 <vTaskStartScheduler+0x4e>
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	617b      	str	r3, [r7, #20]
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d102      	bne.n	8014eb2 <vTaskStartScheduler+0x5a>
 8014eac:	f000 fdba 	bl	8015a24 <xTimerCreateTimerTask>
 8014eb0:	6178      	str	r0, [r7, #20]
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	d116      	bne.n	8014ee6 <vTaskStartScheduler+0x8e>
 8014eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ebc:	f383 8811 	msr	BASEPRI, r3
 8014ec0:	f3bf 8f6f 	isb	sy
 8014ec4:	f3bf 8f4f 	dsb	sy
 8014ec8:	613b      	str	r3, [r7, #16]
 8014eca:	bf00      	nop
 8014ecc:	4b12      	ldr	r3, [pc, #72]	; (8014f18 <vTaskStartScheduler+0xc0>)
 8014ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ed2:	601a      	str	r2, [r3, #0]
 8014ed4:	4b11      	ldr	r3, [pc, #68]	; (8014f1c <vTaskStartScheduler+0xc4>)
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	601a      	str	r2, [r3, #0]
 8014eda:	4b11      	ldr	r3, [pc, #68]	; (8014f20 <vTaskStartScheduler+0xc8>)
 8014edc:	2200      	movs	r2, #0
 8014ede:	601a      	str	r2, [r3, #0]
 8014ee0:	f001 f996 	bl	8016210 <xPortStartScheduler>
 8014ee4:	e00e      	b.n	8014f04 <vTaskStartScheduler+0xac>
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014eec:	d10a      	bne.n	8014f04 <vTaskStartScheduler+0xac>
 8014eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef2:	f383 8811 	msr	BASEPRI, r3
 8014ef6:	f3bf 8f6f 	isb	sy
 8014efa:	f3bf 8f4f 	dsb	sy
 8014efe:	60fb      	str	r3, [r7, #12]
 8014f00:	bf00      	nop
 8014f02:	e7fe      	b.n	8014f02 <vTaskStartScheduler+0xaa>
 8014f04:	bf00      	nop
 8014f06:	3718      	adds	r7, #24
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	08017678 	.word	0x08017678
 8014f10:	08015689 	.word	0x08015689
 8014f14:	24001d04 	.word	0x24001d04
 8014f18:	24001d00 	.word	0x24001d00
 8014f1c:	24001cec 	.word	0x24001cec
 8014f20:	24001ce4 	.word	0x24001ce4

08014f24 <vTaskSuspendAll>:
 8014f24:	b480      	push	{r7}
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	4b04      	ldr	r3, [pc, #16]	; (8014f3c <vTaskSuspendAll+0x18>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	4a03      	ldr	r2, [pc, #12]	; (8014f3c <vTaskSuspendAll+0x18>)
 8014f30:	6013      	str	r3, [r2, #0]
 8014f32:	bf00      	nop
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr
 8014f3c:	24001d08 	.word	0x24001d08

08014f40 <xTaskResumeAll>:
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	2300      	movs	r3, #0
 8014f48:	60fb      	str	r3, [r7, #12]
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	60bb      	str	r3, [r7, #8]
 8014f4e:	4b42      	ldr	r3, [pc, #264]	; (8015058 <xTaskResumeAll+0x118>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d10a      	bne.n	8014f6c <xTaskResumeAll+0x2c>
 8014f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5a:	f383 8811 	msr	BASEPRI, r3
 8014f5e:	f3bf 8f6f 	isb	sy
 8014f62:	f3bf 8f4f 	dsb	sy
 8014f66:	603b      	str	r3, [r7, #0]
 8014f68:	bf00      	nop
 8014f6a:	e7fe      	b.n	8014f6a <xTaskResumeAll+0x2a>
 8014f6c:	f001 f9f2 	bl	8016354 <vPortEnterCritical>
 8014f70:	4b39      	ldr	r3, [pc, #228]	; (8015058 <xTaskResumeAll+0x118>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	3b01      	subs	r3, #1
 8014f76:	4a38      	ldr	r2, [pc, #224]	; (8015058 <xTaskResumeAll+0x118>)
 8014f78:	6013      	str	r3, [r2, #0]
 8014f7a:	4b37      	ldr	r3, [pc, #220]	; (8015058 <xTaskResumeAll+0x118>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d162      	bne.n	8015048 <xTaskResumeAll+0x108>
 8014f82:	4b36      	ldr	r3, [pc, #216]	; (801505c <xTaskResumeAll+0x11c>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d05e      	beq.n	8015048 <xTaskResumeAll+0x108>
 8014f8a:	e02f      	b.n	8014fec <xTaskResumeAll+0xac>
 8014f8c:	4b34      	ldr	r3, [pc, #208]	; (8015060 <xTaskResumeAll+0x120>)
 8014f8e:	68db      	ldr	r3, [r3, #12]
 8014f90:	68db      	ldr	r3, [r3, #12]
 8014f92:	60fb      	str	r3, [r7, #12]
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	3318      	adds	r3, #24
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7fe fe3f 	bl	8013c1c <uxListRemove>
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	3304      	adds	r3, #4
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7fe fe3a 	bl	8013c1c <uxListRemove>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fac:	4b2d      	ldr	r3, [pc, #180]	; (8015064 <xTaskResumeAll+0x124>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d903      	bls.n	8014fbc <xTaskResumeAll+0x7c>
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb8:	4a2a      	ldr	r2, [pc, #168]	; (8015064 <xTaskResumeAll+0x124>)
 8014fba:	6013      	str	r3, [r2, #0]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc0:	4613      	mov	r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	4413      	add	r3, r2
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	4a27      	ldr	r2, [pc, #156]	; (8015068 <xTaskResumeAll+0x128>)
 8014fca:	441a      	add	r2, r3
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	3304      	adds	r3, #4
 8014fd0:	4619      	mov	r1, r3
 8014fd2:	4610      	mov	r0, r2
 8014fd4:	f7fe fdc5 	bl	8013b62 <vListInsertEnd>
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fdc:	4b23      	ldr	r3, [pc, #140]	; (801506c <xTaskResumeAll+0x12c>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d302      	bcc.n	8014fec <xTaskResumeAll+0xac>
 8014fe6:	4b22      	ldr	r3, [pc, #136]	; (8015070 <xTaskResumeAll+0x130>)
 8014fe8:	2201      	movs	r2, #1
 8014fea:	601a      	str	r2, [r3, #0]
 8014fec:	4b1c      	ldr	r3, [pc, #112]	; (8015060 <xTaskResumeAll+0x120>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d1cb      	bne.n	8014f8c <xTaskResumeAll+0x4c>
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d001      	beq.n	8014ffe <xTaskResumeAll+0xbe>
 8014ffa:	f000 fbfb 	bl	80157f4 <prvResetNextTaskUnblockTime>
 8014ffe:	4b1d      	ldr	r3, [pc, #116]	; (8015074 <xTaskResumeAll+0x134>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	607b      	str	r3, [r7, #4]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d010      	beq.n	801502c <xTaskResumeAll+0xec>
 801500a:	f000 f847 	bl	801509c <xTaskIncrementTick>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	d002      	beq.n	801501a <xTaskResumeAll+0xda>
 8015014:	4b16      	ldr	r3, [pc, #88]	; (8015070 <xTaskResumeAll+0x130>)
 8015016:	2201      	movs	r2, #1
 8015018:	601a      	str	r2, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	3b01      	subs	r3, #1
 801501e:	607b      	str	r3, [r7, #4]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1f1      	bne.n	801500a <xTaskResumeAll+0xca>
 8015026:	4b13      	ldr	r3, [pc, #76]	; (8015074 <xTaskResumeAll+0x134>)
 8015028:	2200      	movs	r2, #0
 801502a:	601a      	str	r2, [r3, #0]
 801502c:	4b10      	ldr	r3, [pc, #64]	; (8015070 <xTaskResumeAll+0x130>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d009      	beq.n	8015048 <xTaskResumeAll+0x108>
 8015034:	2301      	movs	r3, #1
 8015036:	60bb      	str	r3, [r7, #8]
 8015038:	4b0f      	ldr	r3, [pc, #60]	; (8015078 <xTaskResumeAll+0x138>)
 801503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801503e:	601a      	str	r2, [r3, #0]
 8015040:	f3bf 8f4f 	dsb	sy
 8015044:	f3bf 8f6f 	isb	sy
 8015048:	f001 f9b4 	bl	80163b4 <vPortExitCritical>
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	4618      	mov	r0, r3
 8015050:	3710      	adds	r7, #16
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	24001d08 	.word	0x24001d08
 801505c:	24001ce0 	.word	0x24001ce0
 8015060:	24001ca0 	.word	0x24001ca0
 8015064:	24001ce8 	.word	0x24001ce8
 8015068:	24001810 	.word	0x24001810
 801506c:	2400180c 	.word	0x2400180c
 8015070:	24001cf4 	.word	0x24001cf4
 8015074:	24001cf0 	.word	0x24001cf0
 8015078:	e000ed04 	.word	0xe000ed04

0801507c <xTaskGetTickCount>:
 801507c:	b480      	push	{r7}
 801507e:	b083      	sub	sp, #12
 8015080:	af00      	add	r7, sp, #0
 8015082:	4b05      	ldr	r3, [pc, #20]	; (8015098 <xTaskGetTickCount+0x1c>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	607b      	str	r3, [r7, #4]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	4618      	mov	r0, r3
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop
 8015098:	24001ce4 	.word	0x24001ce4

0801509c <xTaskIncrementTick>:
 801509c:	b580      	push	{r7, lr}
 801509e:	b086      	sub	sp, #24
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	2300      	movs	r3, #0
 80150a4:	617b      	str	r3, [r7, #20]
 80150a6:	4b53      	ldr	r3, [pc, #332]	; (80151f4 <xTaskIncrementTick+0x158>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	f040 8095 	bne.w	80151da <xTaskIncrementTick+0x13e>
 80150b0:	4b51      	ldr	r3, [pc, #324]	; (80151f8 <xTaskIncrementTick+0x15c>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	3301      	adds	r3, #1
 80150b6:	613b      	str	r3, [r7, #16]
 80150b8:	4a4f      	ldr	r2, [pc, #316]	; (80151f8 <xTaskIncrementTick+0x15c>)
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	6013      	str	r3, [r2, #0]
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d120      	bne.n	8015106 <xTaskIncrementTick+0x6a>
 80150c4:	4b4d      	ldr	r3, [pc, #308]	; (80151fc <xTaskIncrementTick+0x160>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d00a      	beq.n	80150e4 <xTaskIncrementTick+0x48>
 80150ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	603b      	str	r3, [r7, #0]
 80150e0:	bf00      	nop
 80150e2:	e7fe      	b.n	80150e2 <xTaskIncrementTick+0x46>
 80150e4:	4b45      	ldr	r3, [pc, #276]	; (80151fc <xTaskIncrementTick+0x160>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	60fb      	str	r3, [r7, #12]
 80150ea:	4b45      	ldr	r3, [pc, #276]	; (8015200 <xTaskIncrementTick+0x164>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4a43      	ldr	r2, [pc, #268]	; (80151fc <xTaskIncrementTick+0x160>)
 80150f0:	6013      	str	r3, [r2, #0]
 80150f2:	4a43      	ldr	r2, [pc, #268]	; (8015200 <xTaskIncrementTick+0x164>)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	6013      	str	r3, [r2, #0]
 80150f8:	4b42      	ldr	r3, [pc, #264]	; (8015204 <xTaskIncrementTick+0x168>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	3301      	adds	r3, #1
 80150fe:	4a41      	ldr	r2, [pc, #260]	; (8015204 <xTaskIncrementTick+0x168>)
 8015100:	6013      	str	r3, [r2, #0]
 8015102:	f000 fb77 	bl	80157f4 <prvResetNextTaskUnblockTime>
 8015106:	4b40      	ldr	r3, [pc, #256]	; (8015208 <xTaskIncrementTick+0x16c>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	693a      	ldr	r2, [r7, #16]
 801510c:	429a      	cmp	r2, r3
 801510e:	d349      	bcc.n	80151a4 <xTaskIncrementTick+0x108>
 8015110:	4b3a      	ldr	r3, [pc, #232]	; (80151fc <xTaskIncrementTick+0x160>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d104      	bne.n	8015124 <xTaskIncrementTick+0x88>
 801511a:	4b3b      	ldr	r3, [pc, #236]	; (8015208 <xTaskIncrementTick+0x16c>)
 801511c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015120:	601a      	str	r2, [r3, #0]
 8015122:	e03f      	b.n	80151a4 <xTaskIncrementTick+0x108>
 8015124:	4b35      	ldr	r3, [pc, #212]	; (80151fc <xTaskIncrementTick+0x160>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	68db      	ldr	r3, [r3, #12]
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	60bb      	str	r3, [r7, #8]
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	607b      	str	r3, [r7, #4]
 8015134:	693a      	ldr	r2, [r7, #16]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	429a      	cmp	r2, r3
 801513a:	d203      	bcs.n	8015144 <xTaskIncrementTick+0xa8>
 801513c:	4a32      	ldr	r2, [pc, #200]	; (8015208 <xTaskIncrementTick+0x16c>)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6013      	str	r3, [r2, #0]
 8015142:	e02f      	b.n	80151a4 <xTaskIncrementTick+0x108>
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	3304      	adds	r3, #4
 8015148:	4618      	mov	r0, r3
 801514a:	f7fe fd67 	bl	8013c1c <uxListRemove>
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015152:	2b00      	cmp	r3, #0
 8015154:	d004      	beq.n	8015160 <xTaskIncrementTick+0xc4>
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	3318      	adds	r3, #24
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe fd5e 	bl	8013c1c <uxListRemove>
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015164:	4b29      	ldr	r3, [pc, #164]	; (801520c <xTaskIncrementTick+0x170>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	429a      	cmp	r2, r3
 801516a:	d903      	bls.n	8015174 <xTaskIncrementTick+0xd8>
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015170:	4a26      	ldr	r2, [pc, #152]	; (801520c <xTaskIncrementTick+0x170>)
 8015172:	6013      	str	r3, [r2, #0]
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015178:	4613      	mov	r3, r2
 801517a:	009b      	lsls	r3, r3, #2
 801517c:	4413      	add	r3, r2
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	4a23      	ldr	r2, [pc, #140]	; (8015210 <xTaskIncrementTick+0x174>)
 8015182:	441a      	add	r2, r3
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	3304      	adds	r3, #4
 8015188:	4619      	mov	r1, r3
 801518a:	4610      	mov	r0, r2
 801518c:	f7fe fce9 	bl	8013b62 <vListInsertEnd>
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015194:	4b1f      	ldr	r3, [pc, #124]	; (8015214 <xTaskIncrementTick+0x178>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801519a:	429a      	cmp	r2, r3
 801519c:	d3b8      	bcc.n	8015110 <xTaskIncrementTick+0x74>
 801519e:	2301      	movs	r3, #1
 80151a0:	617b      	str	r3, [r7, #20]
 80151a2:	e7b5      	b.n	8015110 <xTaskIncrementTick+0x74>
 80151a4:	4b1b      	ldr	r3, [pc, #108]	; (8015214 <xTaskIncrementTick+0x178>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151aa:	4919      	ldr	r1, [pc, #100]	; (8015210 <xTaskIncrementTick+0x174>)
 80151ac:	4613      	mov	r3, r2
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	4413      	add	r3, r2
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	440b      	add	r3, r1
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	d901      	bls.n	80151c0 <xTaskIncrementTick+0x124>
 80151bc:	2301      	movs	r3, #1
 80151be:	617b      	str	r3, [r7, #20]
 80151c0:	4b15      	ldr	r3, [pc, #84]	; (8015218 <xTaskIncrementTick+0x17c>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d101      	bne.n	80151cc <xTaskIncrementTick+0x130>
 80151c8:	f7eb fa0c 	bl	80005e4 <vApplicationTickHook>
 80151cc:	4b13      	ldr	r3, [pc, #76]	; (801521c <xTaskIncrementTick+0x180>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d009      	beq.n	80151e8 <xTaskIncrementTick+0x14c>
 80151d4:	2301      	movs	r3, #1
 80151d6:	617b      	str	r3, [r7, #20]
 80151d8:	e006      	b.n	80151e8 <xTaskIncrementTick+0x14c>
 80151da:	4b0f      	ldr	r3, [pc, #60]	; (8015218 <xTaskIncrementTick+0x17c>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	3301      	adds	r3, #1
 80151e0:	4a0d      	ldr	r2, [pc, #52]	; (8015218 <xTaskIncrementTick+0x17c>)
 80151e2:	6013      	str	r3, [r2, #0]
 80151e4:	f7eb f9fe 	bl	80005e4 <vApplicationTickHook>
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	4618      	mov	r0, r3
 80151ec:	3718      	adds	r7, #24
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	24001d08 	.word	0x24001d08
 80151f8:	24001ce4 	.word	0x24001ce4
 80151fc:	24001c98 	.word	0x24001c98
 8015200:	24001c9c 	.word	0x24001c9c
 8015204:	24001cf8 	.word	0x24001cf8
 8015208:	24001d00 	.word	0x24001d00
 801520c:	24001ce8 	.word	0x24001ce8
 8015210:	24001810 	.word	0x24001810
 8015214:	2400180c 	.word	0x2400180c
 8015218:	24001cf0 	.word	0x24001cf0
 801521c:	24001cf4 	.word	0x24001cf4

08015220 <vTaskSwitchContext>:
 8015220:	b480      	push	{r7}
 8015222:	b085      	sub	sp, #20
 8015224:	af00      	add	r7, sp, #0
 8015226:	4b28      	ldr	r3, [pc, #160]	; (80152c8 <vTaskSwitchContext+0xa8>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d003      	beq.n	8015236 <vTaskSwitchContext+0x16>
 801522e:	4b27      	ldr	r3, [pc, #156]	; (80152cc <vTaskSwitchContext+0xac>)
 8015230:	2201      	movs	r2, #1
 8015232:	601a      	str	r2, [r3, #0]
 8015234:	e041      	b.n	80152ba <vTaskSwitchContext+0x9a>
 8015236:	4b25      	ldr	r3, [pc, #148]	; (80152cc <vTaskSwitchContext+0xac>)
 8015238:	2200      	movs	r2, #0
 801523a:	601a      	str	r2, [r3, #0]
 801523c:	4b24      	ldr	r3, [pc, #144]	; (80152d0 <vTaskSwitchContext+0xb0>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	60fb      	str	r3, [r7, #12]
 8015242:	e010      	b.n	8015266 <vTaskSwitchContext+0x46>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d10a      	bne.n	8015260 <vTaskSwitchContext+0x40>
 801524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801524e:	f383 8811 	msr	BASEPRI, r3
 8015252:	f3bf 8f6f 	isb	sy
 8015256:	f3bf 8f4f 	dsb	sy
 801525a:	607b      	str	r3, [r7, #4]
 801525c:	bf00      	nop
 801525e:	e7fe      	b.n	801525e <vTaskSwitchContext+0x3e>
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	3b01      	subs	r3, #1
 8015264:	60fb      	str	r3, [r7, #12]
 8015266:	491b      	ldr	r1, [pc, #108]	; (80152d4 <vTaskSwitchContext+0xb4>)
 8015268:	68fa      	ldr	r2, [r7, #12]
 801526a:	4613      	mov	r3, r2
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	4413      	add	r3, r2
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	440b      	add	r3, r1
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d0e4      	beq.n	8015244 <vTaskSwitchContext+0x24>
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	4613      	mov	r3, r2
 801527e:	009b      	lsls	r3, r3, #2
 8015280:	4413      	add	r3, r2
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	4a13      	ldr	r2, [pc, #76]	; (80152d4 <vTaskSwitchContext+0xb4>)
 8015286:	4413      	add	r3, r2
 8015288:	60bb      	str	r3, [r7, #8]
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	685a      	ldr	r2, [r3, #4]
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	605a      	str	r2, [r3, #4]
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	685a      	ldr	r2, [r3, #4]
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	3308      	adds	r3, #8
 801529c:	429a      	cmp	r2, r3
 801529e:	d104      	bne.n	80152aa <vTaskSwitchContext+0x8a>
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	685a      	ldr	r2, [r3, #4]
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	605a      	str	r2, [r3, #4]
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	4a09      	ldr	r2, [pc, #36]	; (80152d8 <vTaskSwitchContext+0xb8>)
 80152b2:	6013      	str	r3, [r2, #0]
 80152b4:	4a06      	ldr	r2, [pc, #24]	; (80152d0 <vTaskSwitchContext+0xb0>)
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	6013      	str	r3, [r2, #0]
 80152ba:	bf00      	nop
 80152bc:	3714      	adds	r7, #20
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr
 80152c6:	bf00      	nop
 80152c8:	24001d08 	.word	0x24001d08
 80152cc:	24001cf4 	.word	0x24001cf4
 80152d0:	24001ce8 	.word	0x24001ce8
 80152d4:	24001810 	.word	0x24001810
 80152d8:	2400180c 	.word	0x2400180c

080152dc <vTaskPlaceOnEventList>:
 80152dc:	b580      	push	{r7, lr}
 80152de:	b084      	sub	sp, #16
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d10a      	bne.n	8015302 <vTaskPlaceOnEventList+0x26>
 80152ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f0:	f383 8811 	msr	BASEPRI, r3
 80152f4:	f3bf 8f6f 	isb	sy
 80152f8:	f3bf 8f4f 	dsb	sy
 80152fc:	60fb      	str	r3, [r7, #12]
 80152fe:	bf00      	nop
 8015300:	e7fe      	b.n	8015300 <vTaskPlaceOnEventList+0x24>
 8015302:	4b07      	ldr	r3, [pc, #28]	; (8015320 <vTaskPlaceOnEventList+0x44>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	3318      	adds	r3, #24
 8015308:	4619      	mov	r1, r3
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f7fe fc4d 	bl	8013baa <vListInsert>
 8015310:	2101      	movs	r1, #1
 8015312:	6838      	ldr	r0, [r7, #0]
 8015314:	f000 fb32 	bl	801597c <prvAddCurrentTaskToDelayedList>
 8015318:	bf00      	nop
 801531a:	3710      	adds	r7, #16
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	2400180c 	.word	0x2400180c

08015324 <vTaskPlaceOnUnorderedEventList>:
 8015324:	b580      	push	{r7, lr}
 8015326:	b086      	sub	sp, #24
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d10a      	bne.n	801534c <vTaskPlaceOnUnorderedEventList+0x28>
 8015336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801533a:	f383 8811 	msr	BASEPRI, r3
 801533e:	f3bf 8f6f 	isb	sy
 8015342:	f3bf 8f4f 	dsb	sy
 8015346:	617b      	str	r3, [r7, #20]
 8015348:	bf00      	nop
 801534a:	e7fe      	b.n	801534a <vTaskPlaceOnUnorderedEventList+0x26>
 801534c:	4b11      	ldr	r3, [pc, #68]	; (8015394 <vTaskPlaceOnUnorderedEventList+0x70>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d10a      	bne.n	801536a <vTaskPlaceOnUnorderedEventList+0x46>
 8015354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015358:	f383 8811 	msr	BASEPRI, r3
 801535c:	f3bf 8f6f 	isb	sy
 8015360:	f3bf 8f4f 	dsb	sy
 8015364:	613b      	str	r3, [r7, #16]
 8015366:	bf00      	nop
 8015368:	e7fe      	b.n	8015368 <vTaskPlaceOnUnorderedEventList+0x44>
 801536a:	4b0b      	ldr	r3, [pc, #44]	; (8015398 <vTaskPlaceOnUnorderedEventList+0x74>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	68ba      	ldr	r2, [r7, #8]
 8015370:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015374:	619a      	str	r2, [r3, #24]
 8015376:	4b08      	ldr	r3, [pc, #32]	; (8015398 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	3318      	adds	r3, #24
 801537c:	4619      	mov	r1, r3
 801537e:	68f8      	ldr	r0, [r7, #12]
 8015380:	f7fe fbef 	bl	8013b62 <vListInsertEnd>
 8015384:	2101      	movs	r1, #1
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f000 faf8 	bl	801597c <prvAddCurrentTaskToDelayedList>
 801538c:	bf00      	nop
 801538e:	3718      	adds	r7, #24
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	24001d08 	.word	0x24001d08
 8015398:	2400180c 	.word	0x2400180c

0801539c <vTaskPlaceOnEventListRestricted>:
 801539c:	b580      	push	{r7, lr}
 801539e:	b086      	sub	sp, #24
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d10a      	bne.n	80153c4 <vTaskPlaceOnEventListRestricted+0x28>
 80153ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b2:	f383 8811 	msr	BASEPRI, r3
 80153b6:	f3bf 8f6f 	isb	sy
 80153ba:	f3bf 8f4f 	dsb	sy
 80153be:	617b      	str	r3, [r7, #20]
 80153c0:	bf00      	nop
 80153c2:	e7fe      	b.n	80153c2 <vTaskPlaceOnEventListRestricted+0x26>
 80153c4:	4b0a      	ldr	r3, [pc, #40]	; (80153f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	3318      	adds	r3, #24
 80153ca:	4619      	mov	r1, r3
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7fe fbc8 	bl	8013b62 <vListInsertEnd>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d002      	beq.n	80153de <vTaskPlaceOnEventListRestricted+0x42>
 80153d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153dc:	60bb      	str	r3, [r7, #8]
 80153de:	6879      	ldr	r1, [r7, #4]
 80153e0:	68b8      	ldr	r0, [r7, #8]
 80153e2:	f000 facb 	bl	801597c <prvAddCurrentTaskToDelayedList>
 80153e6:	bf00      	nop
 80153e8:	3718      	adds	r7, #24
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	2400180c 	.word	0x2400180c

080153f4 <xTaskRemoveFromEventList>:
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b086      	sub	sp, #24
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	613b      	str	r3, [r7, #16]
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d10a      	bne.n	8015420 <xTaskRemoveFromEventList+0x2c>
 801540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801540e:	f383 8811 	msr	BASEPRI, r3
 8015412:	f3bf 8f6f 	isb	sy
 8015416:	f3bf 8f4f 	dsb	sy
 801541a:	60fb      	str	r3, [r7, #12]
 801541c:	bf00      	nop
 801541e:	e7fe      	b.n	801541e <xTaskRemoveFromEventList+0x2a>
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	3318      	adds	r3, #24
 8015424:	4618      	mov	r0, r3
 8015426:	f7fe fbf9 	bl	8013c1c <uxListRemove>
 801542a:	4b1e      	ldr	r3, [pc, #120]	; (80154a4 <xTaskRemoveFromEventList+0xb0>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d11d      	bne.n	801546e <xTaskRemoveFromEventList+0x7a>
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	3304      	adds	r3, #4
 8015436:	4618      	mov	r0, r3
 8015438:	f7fe fbf0 	bl	8013c1c <uxListRemove>
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015440:	4b19      	ldr	r3, [pc, #100]	; (80154a8 <xTaskRemoveFromEventList+0xb4>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	429a      	cmp	r2, r3
 8015446:	d903      	bls.n	8015450 <xTaskRemoveFromEventList+0x5c>
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801544c:	4a16      	ldr	r2, [pc, #88]	; (80154a8 <xTaskRemoveFromEventList+0xb4>)
 801544e:	6013      	str	r3, [r2, #0]
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015454:	4613      	mov	r3, r2
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	4413      	add	r3, r2
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	4a13      	ldr	r2, [pc, #76]	; (80154ac <xTaskRemoveFromEventList+0xb8>)
 801545e:	441a      	add	r2, r3
 8015460:	693b      	ldr	r3, [r7, #16]
 8015462:	3304      	adds	r3, #4
 8015464:	4619      	mov	r1, r3
 8015466:	4610      	mov	r0, r2
 8015468:	f7fe fb7b 	bl	8013b62 <vListInsertEnd>
 801546c:	e005      	b.n	801547a <xTaskRemoveFromEventList+0x86>
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	3318      	adds	r3, #24
 8015472:	4619      	mov	r1, r3
 8015474:	480e      	ldr	r0, [pc, #56]	; (80154b0 <xTaskRemoveFromEventList+0xbc>)
 8015476:	f7fe fb74 	bl	8013b62 <vListInsertEnd>
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801547e:	4b0d      	ldr	r3, [pc, #52]	; (80154b4 <xTaskRemoveFromEventList+0xc0>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015484:	429a      	cmp	r2, r3
 8015486:	d905      	bls.n	8015494 <xTaskRemoveFromEventList+0xa0>
 8015488:	2301      	movs	r3, #1
 801548a:	617b      	str	r3, [r7, #20]
 801548c:	4b0a      	ldr	r3, [pc, #40]	; (80154b8 <xTaskRemoveFromEventList+0xc4>)
 801548e:	2201      	movs	r2, #1
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	e001      	b.n	8015498 <xTaskRemoveFromEventList+0xa4>
 8015494:	2300      	movs	r3, #0
 8015496:	617b      	str	r3, [r7, #20]
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	4618      	mov	r0, r3
 801549c:	3718      	adds	r7, #24
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	24001d08 	.word	0x24001d08
 80154a8:	24001ce8 	.word	0x24001ce8
 80154ac:	24001810 	.word	0x24001810
 80154b0:	24001ca0 	.word	0x24001ca0
 80154b4:	2400180c 	.word	0x2400180c
 80154b8:	24001cf4 	.word	0x24001cf4

080154bc <vTaskRemoveFromUnorderedEventList>:
 80154bc:	b580      	push	{r7, lr}
 80154be:	b086      	sub	sp, #24
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
 80154c6:	4b29      	ldr	r3, [pc, #164]	; (801556c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d10a      	bne.n	80154e4 <vTaskRemoveFromUnorderedEventList+0x28>
 80154ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d2:	f383 8811 	msr	BASEPRI, r3
 80154d6:	f3bf 8f6f 	isb	sy
 80154da:	f3bf 8f4f 	dsb	sy
 80154de:	613b      	str	r3, [r7, #16]
 80154e0:	bf00      	nop
 80154e2:	e7fe      	b.n	80154e2 <vTaskRemoveFromUnorderedEventList+0x26>
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	601a      	str	r2, [r3, #0]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68db      	ldr	r3, [r3, #12]
 80154f2:	617b      	str	r3, [r7, #20]
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d10a      	bne.n	8015510 <vTaskRemoveFromUnorderedEventList+0x54>
 80154fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154fe:	f383 8811 	msr	BASEPRI, r3
 8015502:	f3bf 8f6f 	isb	sy
 8015506:	f3bf 8f4f 	dsb	sy
 801550a:	60fb      	str	r3, [r7, #12]
 801550c:	bf00      	nop
 801550e:	e7fe      	b.n	801550e <vTaskRemoveFromUnorderedEventList+0x52>
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f7fe fb83 	bl	8013c1c <uxListRemove>
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	3304      	adds	r3, #4
 801551a:	4618      	mov	r0, r3
 801551c:	f7fe fb7e 	bl	8013c1c <uxListRemove>
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015524:	4b12      	ldr	r3, [pc, #72]	; (8015570 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	429a      	cmp	r2, r3
 801552a:	d903      	bls.n	8015534 <vTaskRemoveFromUnorderedEventList+0x78>
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015530:	4a0f      	ldr	r2, [pc, #60]	; (8015570 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015532:	6013      	str	r3, [r2, #0]
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015538:	4613      	mov	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4413      	add	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4a0c      	ldr	r2, [pc, #48]	; (8015574 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015542:	441a      	add	r2, r3
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	3304      	adds	r3, #4
 8015548:	4619      	mov	r1, r3
 801554a:	4610      	mov	r0, r2
 801554c:	f7fe fb09 	bl	8013b62 <vListInsertEnd>
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015554:	4b08      	ldr	r3, [pc, #32]	; (8015578 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801555a:	429a      	cmp	r2, r3
 801555c:	d902      	bls.n	8015564 <vTaskRemoveFromUnorderedEventList+0xa8>
 801555e:	4b07      	ldr	r3, [pc, #28]	; (801557c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015560:	2201      	movs	r2, #1
 8015562:	601a      	str	r2, [r3, #0]
 8015564:	bf00      	nop
 8015566:	3718      	adds	r7, #24
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	24001d08 	.word	0x24001d08
 8015570:	24001ce8 	.word	0x24001ce8
 8015574:	24001810 	.word	0x24001810
 8015578:	2400180c 	.word	0x2400180c
 801557c:	24001cf4 	.word	0x24001cf4

08015580 <vTaskInternalSetTimeOutState>:
 8015580:	b480      	push	{r7}
 8015582:	b083      	sub	sp, #12
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	4b06      	ldr	r3, [pc, #24]	; (80155a4 <vTaskInternalSetTimeOutState+0x24>)
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	601a      	str	r2, [r3, #0]
 8015590:	4b05      	ldr	r3, [pc, #20]	; (80155a8 <vTaskInternalSetTimeOutState+0x28>)
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	605a      	str	r2, [r3, #4]
 8015598:	bf00      	nop
 801559a:	370c      	adds	r7, #12
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr
 80155a4:	24001cf8 	.word	0x24001cf8
 80155a8:	24001ce4 	.word	0x24001ce4

080155ac <xTaskCheckForTimeOut>:
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b088      	sub	sp, #32
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d10a      	bne.n	80155d2 <xTaskCheckForTimeOut+0x26>
 80155bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c0:	f383 8811 	msr	BASEPRI, r3
 80155c4:	f3bf 8f6f 	isb	sy
 80155c8:	f3bf 8f4f 	dsb	sy
 80155cc:	613b      	str	r3, [r7, #16]
 80155ce:	bf00      	nop
 80155d0:	e7fe      	b.n	80155d0 <xTaskCheckForTimeOut+0x24>
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d10a      	bne.n	80155ee <xTaskCheckForTimeOut+0x42>
 80155d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155dc:	f383 8811 	msr	BASEPRI, r3
 80155e0:	f3bf 8f6f 	isb	sy
 80155e4:	f3bf 8f4f 	dsb	sy
 80155e8:	60fb      	str	r3, [r7, #12]
 80155ea:	bf00      	nop
 80155ec:	e7fe      	b.n	80155ec <xTaskCheckForTimeOut+0x40>
 80155ee:	f000 feb1 	bl	8016354 <vPortEnterCritical>
 80155f2:	4b1d      	ldr	r3, [pc, #116]	; (8015668 <xTaskCheckForTimeOut+0xbc>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	61bb      	str	r3, [r7, #24]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	69ba      	ldr	r2, [r7, #24]
 80155fe:	1ad3      	subs	r3, r2, r3
 8015600:	617b      	str	r3, [r7, #20]
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801560a:	d102      	bne.n	8015612 <xTaskCheckForTimeOut+0x66>
 801560c:	2300      	movs	r3, #0
 801560e:	61fb      	str	r3, [r7, #28]
 8015610:	e023      	b.n	801565a <xTaskCheckForTimeOut+0xae>
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	4b15      	ldr	r3, [pc, #84]	; (801566c <xTaskCheckForTimeOut+0xc0>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	429a      	cmp	r2, r3
 801561c:	d007      	beq.n	801562e <xTaskCheckForTimeOut+0x82>
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	685b      	ldr	r3, [r3, #4]
 8015622:	69ba      	ldr	r2, [r7, #24]
 8015624:	429a      	cmp	r2, r3
 8015626:	d302      	bcc.n	801562e <xTaskCheckForTimeOut+0x82>
 8015628:	2301      	movs	r3, #1
 801562a:	61fb      	str	r3, [r7, #28]
 801562c:	e015      	b.n	801565a <xTaskCheckForTimeOut+0xae>
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	697a      	ldr	r2, [r7, #20]
 8015634:	429a      	cmp	r2, r3
 8015636:	d20b      	bcs.n	8015650 <xTaskCheckForTimeOut+0xa4>
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	681a      	ldr	r2, [r3, #0]
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	1ad2      	subs	r2, r2, r3
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	601a      	str	r2, [r3, #0]
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7ff ff9b 	bl	8015580 <vTaskInternalSetTimeOutState>
 801564a:	2300      	movs	r3, #0
 801564c:	61fb      	str	r3, [r7, #28]
 801564e:	e004      	b.n	801565a <xTaskCheckForTimeOut+0xae>
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	2200      	movs	r2, #0
 8015654:	601a      	str	r2, [r3, #0]
 8015656:	2301      	movs	r3, #1
 8015658:	61fb      	str	r3, [r7, #28]
 801565a:	f000 feab 	bl	80163b4 <vPortExitCritical>
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	4618      	mov	r0, r3
 8015662:	3720      	adds	r7, #32
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}
 8015668:	24001ce4 	.word	0x24001ce4
 801566c:	24001cf8 	.word	0x24001cf8

08015670 <vTaskMissedYield>:
 8015670:	b480      	push	{r7}
 8015672:	af00      	add	r7, sp, #0
 8015674:	4b03      	ldr	r3, [pc, #12]	; (8015684 <vTaskMissedYield+0x14>)
 8015676:	2201      	movs	r2, #1
 8015678:	601a      	str	r2, [r3, #0]
 801567a:	bf00      	nop
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr
 8015684:	24001cf4 	.word	0x24001cf4

08015688 <prvIdleTask>:
 8015688:	b580      	push	{r7, lr}
 801568a:	b082      	sub	sp, #8
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
 8015690:	f000 f852 	bl	8015738 <prvCheckTasksWaitingTermination>
 8015694:	4b06      	ldr	r3, [pc, #24]	; (80156b0 <prvIdleTask+0x28>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b01      	cmp	r3, #1
 801569a:	d9f9      	bls.n	8015690 <prvIdleTask+0x8>
 801569c:	4b05      	ldr	r3, [pc, #20]	; (80156b4 <prvIdleTask+0x2c>)
 801569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156a2:	601a      	str	r2, [r3, #0]
 80156a4:	f3bf 8f4f 	dsb	sy
 80156a8:	f3bf 8f6f 	isb	sy
 80156ac:	e7f0      	b.n	8015690 <prvIdleTask+0x8>
 80156ae:	bf00      	nop
 80156b0:	24001810 	.word	0x24001810
 80156b4:	e000ed04 	.word	0xe000ed04

080156b8 <prvInitialiseTaskLists>:
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	2300      	movs	r3, #0
 80156c0:	607b      	str	r3, [r7, #4]
 80156c2:	e00c      	b.n	80156de <prvInitialiseTaskLists+0x26>
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	4613      	mov	r3, r2
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	4413      	add	r3, r2
 80156cc:	009b      	lsls	r3, r3, #2
 80156ce:	4a12      	ldr	r2, [pc, #72]	; (8015718 <prvInitialiseTaskLists+0x60>)
 80156d0:	4413      	add	r3, r2
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7fe fa18 	bl	8013b08 <vListInitialise>
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	3301      	adds	r3, #1
 80156dc:	607b      	str	r3, [r7, #4]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2b37      	cmp	r3, #55	; 0x37
 80156e2:	d9ef      	bls.n	80156c4 <prvInitialiseTaskLists+0xc>
 80156e4:	480d      	ldr	r0, [pc, #52]	; (801571c <prvInitialiseTaskLists+0x64>)
 80156e6:	f7fe fa0f 	bl	8013b08 <vListInitialise>
 80156ea:	480d      	ldr	r0, [pc, #52]	; (8015720 <prvInitialiseTaskLists+0x68>)
 80156ec:	f7fe fa0c 	bl	8013b08 <vListInitialise>
 80156f0:	480c      	ldr	r0, [pc, #48]	; (8015724 <prvInitialiseTaskLists+0x6c>)
 80156f2:	f7fe fa09 	bl	8013b08 <vListInitialise>
 80156f6:	480c      	ldr	r0, [pc, #48]	; (8015728 <prvInitialiseTaskLists+0x70>)
 80156f8:	f7fe fa06 	bl	8013b08 <vListInitialise>
 80156fc:	480b      	ldr	r0, [pc, #44]	; (801572c <prvInitialiseTaskLists+0x74>)
 80156fe:	f7fe fa03 	bl	8013b08 <vListInitialise>
 8015702:	4b0b      	ldr	r3, [pc, #44]	; (8015730 <prvInitialiseTaskLists+0x78>)
 8015704:	4a05      	ldr	r2, [pc, #20]	; (801571c <prvInitialiseTaskLists+0x64>)
 8015706:	601a      	str	r2, [r3, #0]
 8015708:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <prvInitialiseTaskLists+0x7c>)
 801570a:	4a05      	ldr	r2, [pc, #20]	; (8015720 <prvInitialiseTaskLists+0x68>)
 801570c:	601a      	str	r2, [r3, #0]
 801570e:	bf00      	nop
 8015710:	3708      	adds	r7, #8
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
 8015716:	bf00      	nop
 8015718:	24001810 	.word	0x24001810
 801571c:	24001c70 	.word	0x24001c70
 8015720:	24001c84 	.word	0x24001c84
 8015724:	24001ca0 	.word	0x24001ca0
 8015728:	24001cb4 	.word	0x24001cb4
 801572c:	24001ccc 	.word	0x24001ccc
 8015730:	24001c98 	.word	0x24001c98
 8015734:	24001c9c 	.word	0x24001c9c

08015738 <prvCheckTasksWaitingTermination>:
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	e019      	b.n	8015774 <prvCheckTasksWaitingTermination+0x3c>
 8015740:	f000 fe08 	bl	8016354 <vPortEnterCritical>
 8015744:	4b10      	ldr	r3, [pc, #64]	; (8015788 <prvCheckTasksWaitingTermination+0x50>)
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	68db      	ldr	r3, [r3, #12]
 801574a:	607b      	str	r3, [r7, #4]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	3304      	adds	r3, #4
 8015750:	4618      	mov	r0, r3
 8015752:	f7fe fa63 	bl	8013c1c <uxListRemove>
 8015756:	4b0d      	ldr	r3, [pc, #52]	; (801578c <prvCheckTasksWaitingTermination+0x54>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	3b01      	subs	r3, #1
 801575c:	4a0b      	ldr	r2, [pc, #44]	; (801578c <prvCheckTasksWaitingTermination+0x54>)
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <prvCheckTasksWaitingTermination+0x58>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	3b01      	subs	r3, #1
 8015766:	4a0a      	ldr	r2, [pc, #40]	; (8015790 <prvCheckTasksWaitingTermination+0x58>)
 8015768:	6013      	str	r3, [r2, #0]
 801576a:	f000 fe23 	bl	80163b4 <vPortExitCritical>
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 f810 	bl	8015794 <prvDeleteTCB>
 8015774:	4b06      	ldr	r3, [pc, #24]	; (8015790 <prvCheckTasksWaitingTermination+0x58>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d1e1      	bne.n	8015740 <prvCheckTasksWaitingTermination+0x8>
 801577c:	bf00      	nop
 801577e:	bf00      	nop
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	24001cb4 	.word	0x24001cb4
 801578c:	24001ce0 	.word	0x24001ce0
 8015790:	24001cc8 	.word	0x24001cc8

08015794 <prvDeleteTCB>:
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d108      	bne.n	80157b8 <prvDeleteTCB+0x24>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157aa:	4618      	mov	r0, r3
 80157ac:	f000 ffc0 	bl	8016730 <vPortFree>
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f000 ffbd 	bl	8016730 <vPortFree>
 80157b6:	e018      	b.n	80157ea <prvDeleteTCB+0x56>
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157be:	2b01      	cmp	r3, #1
 80157c0:	d103      	bne.n	80157ca <prvDeleteTCB+0x36>
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f000 ffb4 	bl	8016730 <vPortFree>
 80157c8:	e00f      	b.n	80157ea <prvDeleteTCB+0x56>
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157d0:	2b02      	cmp	r3, #2
 80157d2:	d00a      	beq.n	80157ea <prvDeleteTCB+0x56>
 80157d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d8:	f383 8811 	msr	BASEPRI, r3
 80157dc:	f3bf 8f6f 	isb	sy
 80157e0:	f3bf 8f4f 	dsb	sy
 80157e4:	60fb      	str	r3, [r7, #12]
 80157e6:	bf00      	nop
 80157e8:	e7fe      	b.n	80157e8 <prvDeleteTCB+0x54>
 80157ea:	bf00      	nop
 80157ec:	3710      	adds	r7, #16
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
	...

080157f4 <prvResetNextTaskUnblockTime>:
 80157f4:	b480      	push	{r7}
 80157f6:	b083      	sub	sp, #12
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	4b0c      	ldr	r3, [pc, #48]	; (801582c <prvResetNextTaskUnblockTime+0x38>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d104      	bne.n	801580e <prvResetNextTaskUnblockTime+0x1a>
 8015804:	4b0a      	ldr	r3, [pc, #40]	; (8015830 <prvResetNextTaskUnblockTime+0x3c>)
 8015806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801580a:	601a      	str	r2, [r3, #0]
 801580c:	e008      	b.n	8015820 <prvResetNextTaskUnblockTime+0x2c>
 801580e:	4b07      	ldr	r3, [pc, #28]	; (801582c <prvResetNextTaskUnblockTime+0x38>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	68db      	ldr	r3, [r3, #12]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	607b      	str	r3, [r7, #4]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	685b      	ldr	r3, [r3, #4]
 801581c:	4a04      	ldr	r2, [pc, #16]	; (8015830 <prvResetNextTaskUnblockTime+0x3c>)
 801581e:	6013      	str	r3, [r2, #0]
 8015820:	bf00      	nop
 8015822:	370c      	adds	r7, #12
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	24001c98 	.word	0x24001c98
 8015830:	24001d00 	.word	0x24001d00

08015834 <xTaskGetSchedulerState>:
 8015834:	b480      	push	{r7}
 8015836:	b083      	sub	sp, #12
 8015838:	af00      	add	r7, sp, #0
 801583a:	4b0b      	ldr	r3, [pc, #44]	; (8015868 <xTaskGetSchedulerState+0x34>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d102      	bne.n	8015848 <xTaskGetSchedulerState+0x14>
 8015842:	2301      	movs	r3, #1
 8015844:	607b      	str	r3, [r7, #4]
 8015846:	e008      	b.n	801585a <xTaskGetSchedulerState+0x26>
 8015848:	4b08      	ldr	r3, [pc, #32]	; (801586c <xTaskGetSchedulerState+0x38>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d102      	bne.n	8015856 <xTaskGetSchedulerState+0x22>
 8015850:	2302      	movs	r3, #2
 8015852:	607b      	str	r3, [r7, #4]
 8015854:	e001      	b.n	801585a <xTaskGetSchedulerState+0x26>
 8015856:	2300      	movs	r3, #0
 8015858:	607b      	str	r3, [r7, #4]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	24001cec 	.word	0x24001cec
 801586c:	24001d08 	.word	0x24001d08

08015870 <xTaskPriorityDisinherit>:
 8015870:	b580      	push	{r7, lr}
 8015872:	b086      	sub	sp, #24
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	613b      	str	r3, [r7, #16]
 801587c:	2300      	movs	r3, #0
 801587e:	617b      	str	r3, [r7, #20]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d056      	beq.n	8015934 <xTaskPriorityDisinherit+0xc4>
 8015886:	4b2e      	ldr	r3, [pc, #184]	; (8015940 <xTaskPriorityDisinherit+0xd0>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	693a      	ldr	r2, [r7, #16]
 801588c:	429a      	cmp	r2, r3
 801588e:	d00a      	beq.n	80158a6 <xTaskPriorityDisinherit+0x36>
 8015890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015894:	f383 8811 	msr	BASEPRI, r3
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	60fb      	str	r3, [r7, #12]
 80158a2:	bf00      	nop
 80158a4:	e7fe      	b.n	80158a4 <xTaskPriorityDisinherit+0x34>
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d10a      	bne.n	80158c4 <xTaskPriorityDisinherit+0x54>
 80158ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b2:	f383 8811 	msr	BASEPRI, r3
 80158b6:	f3bf 8f6f 	isb	sy
 80158ba:	f3bf 8f4f 	dsb	sy
 80158be:	60bb      	str	r3, [r7, #8]
 80158c0:	bf00      	nop
 80158c2:	e7fe      	b.n	80158c2 <xTaskPriorityDisinherit+0x52>
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158c8:	1e5a      	subs	r2, r3, #1
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	651a      	str	r2, [r3, #80]	; 0x50
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d02c      	beq.n	8015934 <xTaskPriorityDisinherit+0xc4>
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d128      	bne.n	8015934 <xTaskPriorityDisinherit+0xc4>
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	3304      	adds	r3, #4
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7fe f998 	bl	8013c1c <uxListRemove>
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	619a      	str	r2, [r3, #24]
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015904:	4b0f      	ldr	r3, [pc, #60]	; (8015944 <xTaskPriorityDisinherit+0xd4>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	429a      	cmp	r2, r3
 801590a:	d903      	bls.n	8015914 <xTaskPriorityDisinherit+0xa4>
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015910:	4a0c      	ldr	r2, [pc, #48]	; (8015944 <xTaskPriorityDisinherit+0xd4>)
 8015912:	6013      	str	r3, [r2, #0]
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015918:	4613      	mov	r3, r2
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	4413      	add	r3, r2
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	4a09      	ldr	r2, [pc, #36]	; (8015948 <xTaskPriorityDisinherit+0xd8>)
 8015922:	441a      	add	r2, r3
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	3304      	adds	r3, #4
 8015928:	4619      	mov	r1, r3
 801592a:	4610      	mov	r0, r2
 801592c:	f7fe f919 	bl	8013b62 <vListInsertEnd>
 8015930:	2301      	movs	r3, #1
 8015932:	617b      	str	r3, [r7, #20]
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	4618      	mov	r0, r3
 8015938:	3718      	adds	r7, #24
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	2400180c 	.word	0x2400180c
 8015944:	24001ce8 	.word	0x24001ce8
 8015948:	24001810 	.word	0x24001810

0801594c <uxTaskResetEventItemValue>:
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
 8015952:	4b09      	ldr	r3, [pc, #36]	; (8015978 <uxTaskResetEventItemValue+0x2c>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	699b      	ldr	r3, [r3, #24]
 8015958:	607b      	str	r3, [r7, #4]
 801595a:	4b07      	ldr	r3, [pc, #28]	; (8015978 <uxTaskResetEventItemValue+0x2c>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015960:	4b05      	ldr	r3, [pc, #20]	; (8015978 <uxTaskResetEventItemValue+0x2c>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015968:	619a      	str	r2, [r3, #24]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	4618      	mov	r0, r3
 801596e:	370c      	adds	r7, #12
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr
 8015978:	2400180c 	.word	0x2400180c

0801597c <prvAddCurrentTaskToDelayedList>:
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
 8015986:	4b21      	ldr	r3, [pc, #132]	; (8015a0c <prvAddCurrentTaskToDelayedList+0x90>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	60fb      	str	r3, [r7, #12]
 801598c:	4b20      	ldr	r3, [pc, #128]	; (8015a10 <prvAddCurrentTaskToDelayedList+0x94>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	3304      	adds	r3, #4
 8015992:	4618      	mov	r0, r3
 8015994:	f7fe f942 	bl	8013c1c <uxListRemove>
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801599e:	d10a      	bne.n	80159b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d007      	beq.n	80159b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80159a6:	4b1a      	ldr	r3, [pc, #104]	; (8015a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	3304      	adds	r3, #4
 80159ac:	4619      	mov	r1, r3
 80159ae:	4819      	ldr	r0, [pc, #100]	; (8015a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80159b0:	f7fe f8d7 	bl	8013b62 <vListInsertEnd>
 80159b4:	e026      	b.n	8015a04 <prvAddCurrentTaskToDelayedList+0x88>
 80159b6:	68fa      	ldr	r2, [r7, #12]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	4413      	add	r3, r2
 80159bc:	60bb      	str	r3, [r7, #8]
 80159be:	4b14      	ldr	r3, [pc, #80]	; (8015a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	68ba      	ldr	r2, [r7, #8]
 80159c4:	605a      	str	r2, [r3, #4]
 80159c6:	68ba      	ldr	r2, [r7, #8]
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d209      	bcs.n	80159e2 <prvAddCurrentTaskToDelayedList+0x66>
 80159ce:	4b12      	ldr	r3, [pc, #72]	; (8015a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	4b0f      	ldr	r3, [pc, #60]	; (8015a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	3304      	adds	r3, #4
 80159d8:	4619      	mov	r1, r3
 80159da:	4610      	mov	r0, r2
 80159dc:	f7fe f8e5 	bl	8013baa <vListInsert>
 80159e0:	e010      	b.n	8015a04 <prvAddCurrentTaskToDelayedList+0x88>
 80159e2:	4b0e      	ldr	r3, [pc, #56]	; (8015a1c <prvAddCurrentTaskToDelayedList+0xa0>)
 80159e4:	681a      	ldr	r2, [r3, #0]
 80159e6:	4b0a      	ldr	r3, [pc, #40]	; (8015a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	3304      	adds	r3, #4
 80159ec:	4619      	mov	r1, r3
 80159ee:	4610      	mov	r0, r2
 80159f0:	f7fe f8db 	bl	8013baa <vListInsert>
 80159f4:	4b0a      	ldr	r3, [pc, #40]	; (8015a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	68ba      	ldr	r2, [r7, #8]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d202      	bcs.n	8015a04 <prvAddCurrentTaskToDelayedList+0x88>
 80159fe:	4a08      	ldr	r2, [pc, #32]	; (8015a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	6013      	str	r3, [r2, #0]
 8015a04:	bf00      	nop
 8015a06:	3710      	adds	r7, #16
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	24001ce4 	.word	0x24001ce4
 8015a10:	2400180c 	.word	0x2400180c
 8015a14:	24001ccc 	.word	0x24001ccc
 8015a18:	24001c9c 	.word	0x24001c9c
 8015a1c:	24001c98 	.word	0x24001c98
 8015a20:	24001d00 	.word	0x24001d00

08015a24 <xTimerCreateTimerTask>:
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b08a      	sub	sp, #40	; 0x28
 8015a28:	af04      	add	r7, sp, #16
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	617b      	str	r3, [r7, #20]
 8015a2e:	f000 fb07 	bl	8016040 <prvCheckForValidListAndQueue>
 8015a32:	4b1c      	ldr	r3, [pc, #112]	; (8015aa4 <xTimerCreateTimerTask+0x80>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d021      	beq.n	8015a7e <xTimerCreateTimerTask+0x5a>
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	60fb      	str	r3, [r7, #12]
 8015a3e:	2300      	movs	r3, #0
 8015a40:	60bb      	str	r3, [r7, #8]
 8015a42:	1d3a      	adds	r2, r7, #4
 8015a44:	f107 0108 	add.w	r1, r7, #8
 8015a48:	f107 030c 	add.w	r3, r7, #12
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7fd fdd5 	bl	80135fc <vApplicationGetTimerTaskMemory>
 8015a52:	6879      	ldr	r1, [r7, #4]
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	68fa      	ldr	r2, [r7, #12]
 8015a58:	9202      	str	r2, [sp, #8]
 8015a5a:	9301      	str	r3, [sp, #4]
 8015a5c:	2302      	movs	r3, #2
 8015a5e:	9300      	str	r3, [sp, #0]
 8015a60:	2300      	movs	r3, #0
 8015a62:	460a      	mov	r2, r1
 8015a64:	4910      	ldr	r1, [pc, #64]	; (8015aa8 <xTimerCreateTimerTask+0x84>)
 8015a66:	4811      	ldr	r0, [pc, #68]	; (8015aac <xTimerCreateTimerTask+0x88>)
 8015a68:	f7fe fea8 	bl	80147bc <xTaskCreateStatic>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	4a10      	ldr	r2, [pc, #64]	; (8015ab0 <xTimerCreateTimerTask+0x8c>)
 8015a70:	6013      	str	r3, [r2, #0]
 8015a72:	4b0f      	ldr	r3, [pc, #60]	; (8015ab0 <xTimerCreateTimerTask+0x8c>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d001      	beq.n	8015a7e <xTimerCreateTimerTask+0x5a>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	617b      	str	r3, [r7, #20]
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d10a      	bne.n	8015a9a <xTimerCreateTimerTask+0x76>
 8015a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a88:	f383 8811 	msr	BASEPRI, r3
 8015a8c:	f3bf 8f6f 	isb	sy
 8015a90:	f3bf 8f4f 	dsb	sy
 8015a94:	613b      	str	r3, [r7, #16]
 8015a96:	bf00      	nop
 8015a98:	e7fe      	b.n	8015a98 <xTimerCreateTimerTask+0x74>
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3718      	adds	r7, #24
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	24001d3c 	.word	0x24001d3c
 8015aa8:	08017680 	.word	0x08017680
 8015aac:	08015be9 	.word	0x08015be9
 8015ab0:	24001d40 	.word	0x24001d40

08015ab4 <xTimerGenericCommand>:
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b08a      	sub	sp, #40	; 0x28
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
 8015ac0:	603b      	str	r3, [r7, #0]
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d10a      	bne.n	8015ae2 <xTimerGenericCommand+0x2e>
 8015acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad0:	f383 8811 	msr	BASEPRI, r3
 8015ad4:	f3bf 8f6f 	isb	sy
 8015ad8:	f3bf 8f4f 	dsb	sy
 8015adc:	623b      	str	r3, [r7, #32]
 8015ade:	bf00      	nop
 8015ae0:	e7fe      	b.n	8015ae0 <xTimerGenericCommand+0x2c>
 8015ae2:	4b1a      	ldr	r3, [pc, #104]	; (8015b4c <xTimerGenericCommand+0x98>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d02a      	beq.n	8015b40 <xTimerGenericCommand+0x8c>
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	613b      	str	r3, [r7, #16]
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	617b      	str	r3, [r7, #20]
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	61bb      	str	r3, [r7, #24]
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	2b05      	cmp	r3, #5
 8015afa:	dc18      	bgt.n	8015b2e <xTimerGenericCommand+0x7a>
 8015afc:	f7ff fe9a 	bl	8015834 <xTaskGetSchedulerState>
 8015b00:	4603      	mov	r3, r0
 8015b02:	2b02      	cmp	r3, #2
 8015b04:	d109      	bne.n	8015b1a <xTimerGenericCommand+0x66>
 8015b06:	4b11      	ldr	r3, [pc, #68]	; (8015b4c <xTimerGenericCommand+0x98>)
 8015b08:	6818      	ldr	r0, [r3, #0]
 8015b0a:	f107 0110 	add.w	r1, r7, #16
 8015b0e:	2300      	movs	r3, #0
 8015b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b12:	f7fe f9eb 	bl	8013eec <xQueueGenericSend>
 8015b16:	6278      	str	r0, [r7, #36]	; 0x24
 8015b18:	e012      	b.n	8015b40 <xTimerGenericCommand+0x8c>
 8015b1a:	4b0c      	ldr	r3, [pc, #48]	; (8015b4c <xTimerGenericCommand+0x98>)
 8015b1c:	6818      	ldr	r0, [r3, #0]
 8015b1e:	f107 0110 	add.w	r1, r7, #16
 8015b22:	2300      	movs	r3, #0
 8015b24:	2200      	movs	r2, #0
 8015b26:	f7fe f9e1 	bl	8013eec <xQueueGenericSend>
 8015b2a:	6278      	str	r0, [r7, #36]	; 0x24
 8015b2c:	e008      	b.n	8015b40 <xTimerGenericCommand+0x8c>
 8015b2e:	4b07      	ldr	r3, [pc, #28]	; (8015b4c <xTimerGenericCommand+0x98>)
 8015b30:	6818      	ldr	r0, [r3, #0]
 8015b32:	f107 0110 	add.w	r1, r7, #16
 8015b36:	2300      	movs	r3, #0
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	f7fe fad5 	bl	80140e8 <xQueueGenericSendFromISR>
 8015b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8015b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b42:	4618      	mov	r0, r3
 8015b44:	3728      	adds	r7, #40	; 0x28
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
 8015b4a:	bf00      	nop
 8015b4c:	24001d3c 	.word	0x24001d3c

08015b50 <prvProcessExpiredTimer>:
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b088      	sub	sp, #32
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	4b22      	ldr	r3, [pc, #136]	; (8015be4 <prvProcessExpiredTimer+0x94>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	617b      	str	r3, [r7, #20]
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	3304      	adds	r3, #4
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7fe f857 	bl	8013c1c <uxListRemove>
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b74:	f003 0304 	and.w	r3, r3, #4
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d022      	beq.n	8015bc2 <prvProcessExpiredTimer+0x72>
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	699a      	ldr	r2, [r3, #24]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	18d1      	adds	r1, r2, r3
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	6978      	ldr	r0, [r7, #20]
 8015b8a:	f000 f8d1 	bl	8015d30 <prvInsertTimerInActiveList>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d01f      	beq.n	8015bd4 <prvProcessExpiredTimer+0x84>
 8015b94:	2300      	movs	r3, #0
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	2300      	movs	r3, #0
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	2100      	movs	r1, #0
 8015b9e:	6978      	ldr	r0, [r7, #20]
 8015ba0:	f7ff ff88 	bl	8015ab4 <xTimerGenericCommand>
 8015ba4:	6138      	str	r0, [r7, #16]
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d113      	bne.n	8015bd4 <prvProcessExpiredTimer+0x84>
 8015bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb0:	f383 8811 	msr	BASEPRI, r3
 8015bb4:	f3bf 8f6f 	isb	sy
 8015bb8:	f3bf 8f4f 	dsb	sy
 8015bbc:	60fb      	str	r3, [r7, #12]
 8015bbe:	bf00      	nop
 8015bc0:	e7fe      	b.n	8015bc0 <prvProcessExpiredTimer+0x70>
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bc8:	f023 0301 	bic.w	r3, r3, #1
 8015bcc:	b2da      	uxtb	r2, r3
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	6a1b      	ldr	r3, [r3, #32]
 8015bd8:	6978      	ldr	r0, [r7, #20]
 8015bda:	4798      	blx	r3
 8015bdc:	bf00      	nop
 8015bde:	3718      	adds	r7, #24
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	24001d34 	.word	0x24001d34

08015be8 <prvTimerTask>:
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b084      	sub	sp, #16
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	f107 0308 	add.w	r3, r7, #8
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f000 f857 	bl	8015ca8 <prvGetNextExpireTime>
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	4619      	mov	r1, r3
 8015c00:	68f8      	ldr	r0, [r7, #12]
 8015c02:	f000 f803 	bl	8015c0c <prvProcessTimerOrBlockTask>
 8015c06:	f000 f8d5 	bl	8015db4 <prvProcessReceivedCommands>
 8015c0a:	e7f1      	b.n	8015bf0 <prvTimerTask+0x8>

08015c0c <prvProcessTimerOrBlockTask>:
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
 8015c16:	f7ff f985 	bl	8014f24 <vTaskSuspendAll>
 8015c1a:	f107 0308 	add.w	r3, r7, #8
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f000 f866 	bl	8015cf0 <prvSampleTimeNow>
 8015c24:	60f8      	str	r0, [r7, #12]
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d130      	bne.n	8015c8e <prvProcessTimerOrBlockTask+0x82>
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d10a      	bne.n	8015c48 <prvProcessTimerOrBlockTask+0x3c>
 8015c32:	687a      	ldr	r2, [r7, #4]
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d806      	bhi.n	8015c48 <prvProcessTimerOrBlockTask+0x3c>
 8015c3a:	f7ff f981 	bl	8014f40 <xTaskResumeAll>
 8015c3e:	68f9      	ldr	r1, [r7, #12]
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f7ff ff85 	bl	8015b50 <prvProcessExpiredTimer>
 8015c46:	e024      	b.n	8015c92 <prvProcessTimerOrBlockTask+0x86>
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d008      	beq.n	8015c60 <prvProcessTimerOrBlockTask+0x54>
 8015c4e:	4b13      	ldr	r3, [pc, #76]	; (8015c9c <prvProcessTimerOrBlockTask+0x90>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d101      	bne.n	8015c5c <prvProcessTimerOrBlockTask+0x50>
 8015c58:	2301      	movs	r3, #1
 8015c5a:	e000      	b.n	8015c5e <prvProcessTimerOrBlockTask+0x52>
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	603b      	str	r3, [r7, #0]
 8015c60:	4b0f      	ldr	r3, [pc, #60]	; (8015ca0 <prvProcessTimerOrBlockTask+0x94>)
 8015c62:	6818      	ldr	r0, [r3, #0]
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	683a      	ldr	r2, [r7, #0]
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	f7fe fd71 	bl	8014754 <vQueueWaitForMessageRestricted>
 8015c72:	f7ff f965 	bl	8014f40 <xTaskResumeAll>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d10a      	bne.n	8015c92 <prvProcessTimerOrBlockTask+0x86>
 8015c7c:	4b09      	ldr	r3, [pc, #36]	; (8015ca4 <prvProcessTimerOrBlockTask+0x98>)
 8015c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c82:	601a      	str	r2, [r3, #0]
 8015c84:	f3bf 8f4f 	dsb	sy
 8015c88:	f3bf 8f6f 	isb	sy
 8015c8c:	e001      	b.n	8015c92 <prvProcessTimerOrBlockTask+0x86>
 8015c8e:	f7ff f957 	bl	8014f40 <xTaskResumeAll>
 8015c92:	bf00      	nop
 8015c94:	3710      	adds	r7, #16
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	24001d38 	.word	0x24001d38
 8015ca0:	24001d3c 	.word	0x24001d3c
 8015ca4:	e000ed04 	.word	0xe000ed04

08015ca8 <prvGetNextExpireTime>:
 8015ca8:	b480      	push	{r7}
 8015caa:	b085      	sub	sp, #20
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	4b0e      	ldr	r3, [pc, #56]	; (8015cec <prvGetNextExpireTime+0x44>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d101      	bne.n	8015cbe <prvGetNextExpireTime+0x16>
 8015cba:	2201      	movs	r2, #1
 8015cbc:	e000      	b.n	8015cc0 <prvGetNextExpireTime+0x18>
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	601a      	str	r2, [r3, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d105      	bne.n	8015cd8 <prvGetNextExpireTime+0x30>
 8015ccc:	4b07      	ldr	r3, [pc, #28]	; (8015cec <prvGetNextExpireTime+0x44>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	60fb      	str	r3, [r7, #12]
 8015cd6:	e001      	b.n	8015cdc <prvGetNextExpireTime+0x34>
 8015cd8:	2300      	movs	r3, #0
 8015cda:	60fb      	str	r3, [r7, #12]
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3714      	adds	r7, #20
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	24001d34 	.word	0x24001d34

08015cf0 <prvSampleTimeNow>:
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
 8015cf8:	f7ff f9c0 	bl	801507c <xTaskGetTickCount>
 8015cfc:	60f8      	str	r0, [r7, #12]
 8015cfe:	4b0b      	ldr	r3, [pc, #44]	; (8015d2c <prvSampleTimeNow+0x3c>)
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	68fa      	ldr	r2, [r7, #12]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d205      	bcs.n	8015d14 <prvSampleTimeNow+0x24>
 8015d08:	f000 f936 	bl	8015f78 <prvSwitchTimerLists>
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	601a      	str	r2, [r3, #0]
 8015d12:	e002      	b.n	8015d1a <prvSampleTimeNow+0x2a>
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2200      	movs	r2, #0
 8015d18:	601a      	str	r2, [r3, #0]
 8015d1a:	4a04      	ldr	r2, [pc, #16]	; (8015d2c <prvSampleTimeNow+0x3c>)
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	6013      	str	r3, [r2, #0]
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	4618      	mov	r0, r3
 8015d24:	3710      	adds	r7, #16
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	24001d44 	.word	0x24001d44

08015d30 <prvInsertTimerInActiveList>:
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	60f8      	str	r0, [r7, #12]
 8015d38:	60b9      	str	r1, [r7, #8]
 8015d3a:	607a      	str	r2, [r7, #4]
 8015d3c:	603b      	str	r3, [r7, #0]
 8015d3e:	2300      	movs	r3, #0
 8015d40:	617b      	str	r3, [r7, #20]
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	68ba      	ldr	r2, [r7, #8]
 8015d46:	605a      	str	r2, [r3, #4]
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	68fa      	ldr	r2, [r7, #12]
 8015d4c:	611a      	str	r2, [r3, #16]
 8015d4e:	68ba      	ldr	r2, [r7, #8]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d812      	bhi.n	8015d7c <prvInsertTimerInActiveList+0x4c>
 8015d56:	687a      	ldr	r2, [r7, #4]
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	1ad2      	subs	r2, r2, r3
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	699b      	ldr	r3, [r3, #24]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d302      	bcc.n	8015d6a <prvInsertTimerInActiveList+0x3a>
 8015d64:	2301      	movs	r3, #1
 8015d66:	617b      	str	r3, [r7, #20]
 8015d68:	e01b      	b.n	8015da2 <prvInsertTimerInActiveList+0x72>
 8015d6a:	4b10      	ldr	r3, [pc, #64]	; (8015dac <prvInsertTimerInActiveList+0x7c>)
 8015d6c:	681a      	ldr	r2, [r3, #0]
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	3304      	adds	r3, #4
 8015d72:	4619      	mov	r1, r3
 8015d74:	4610      	mov	r0, r2
 8015d76:	f7fd ff18 	bl	8013baa <vListInsert>
 8015d7a:	e012      	b.n	8015da2 <prvInsertTimerInActiveList+0x72>
 8015d7c:	687a      	ldr	r2, [r7, #4]
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d206      	bcs.n	8015d92 <prvInsertTimerInActiveList+0x62>
 8015d84:	68ba      	ldr	r2, [r7, #8]
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d302      	bcc.n	8015d92 <prvInsertTimerInActiveList+0x62>
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	617b      	str	r3, [r7, #20]
 8015d90:	e007      	b.n	8015da2 <prvInsertTimerInActiveList+0x72>
 8015d92:	4b07      	ldr	r3, [pc, #28]	; (8015db0 <prvInsertTimerInActiveList+0x80>)
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	3304      	adds	r3, #4
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	4610      	mov	r0, r2
 8015d9e:	f7fd ff04 	bl	8013baa <vListInsert>
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	4618      	mov	r0, r3
 8015da6:	3718      	adds	r7, #24
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	24001d38 	.word	0x24001d38
 8015db0:	24001d34 	.word	0x24001d34

08015db4 <prvProcessReceivedCommands>:
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b08e      	sub	sp, #56	; 0x38
 8015db8:	af02      	add	r7, sp, #8
 8015dba:	e0ca      	b.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	da18      	bge.n	8015df4 <prvProcessReceivedCommands+0x40>
 8015dc2:	1d3b      	adds	r3, r7, #4
 8015dc4:	3304      	adds	r3, #4
 8015dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d10a      	bne.n	8015de4 <prvProcessReceivedCommands+0x30>
 8015dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	61fb      	str	r3, [r7, #28]
 8015de0:	bf00      	nop
 8015de2:	e7fe      	b.n	8015de2 <prvProcessReceivedCommands+0x2e>
 8015de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dea:	6850      	ldr	r0, [r2, #4]
 8015dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dee:	6892      	ldr	r2, [r2, #8]
 8015df0:	4611      	mov	r1, r2
 8015df2:	4798      	blx	r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	f2c0 80aa 	blt.w	8015f50 <prvProcessReceivedCommands+0x19c>
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e02:	695b      	ldr	r3, [r3, #20]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d004      	beq.n	8015e12 <prvProcessReceivedCommands+0x5e>
 8015e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7fd ff05 	bl	8013c1c <uxListRemove>
 8015e12:	463b      	mov	r3, r7
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7ff ff6b 	bl	8015cf0 <prvSampleTimeNow>
 8015e1a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2b09      	cmp	r3, #9
 8015e20:	f200 8097 	bhi.w	8015f52 <prvProcessReceivedCommands+0x19e>
 8015e24:	a201      	add	r2, pc, #4	; (adr r2, 8015e2c <prvProcessReceivedCommands+0x78>)
 8015e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e2a:	bf00      	nop
 8015e2c:	08015e55 	.word	0x08015e55
 8015e30:	08015e55 	.word	0x08015e55
 8015e34:	08015e55 	.word	0x08015e55
 8015e38:	08015ec9 	.word	0x08015ec9
 8015e3c:	08015edd 	.word	0x08015edd
 8015e40:	08015f27 	.word	0x08015f27
 8015e44:	08015e55 	.word	0x08015e55
 8015e48:	08015e55 	.word	0x08015e55
 8015e4c:	08015ec9 	.word	0x08015ec9
 8015e50:	08015edd 	.word	0x08015edd
 8015e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e5a:	f043 0301 	orr.w	r3, r3, #1
 8015e5e:	b2da      	uxtb	r2, r3
 8015e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015e66:	68ba      	ldr	r2, [r7, #8]
 8015e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6a:	699b      	ldr	r3, [r3, #24]
 8015e6c:	18d1      	adds	r1, r2, r3
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e74:	f7ff ff5c 	bl	8015d30 <prvInsertTimerInActiveList>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d069      	beq.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e80:	6a1b      	ldr	r3, [r3, #32]
 8015e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e84:	4798      	blx	r3
 8015e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e8c:	f003 0304 	and.w	r3, r3, #4
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d05e      	beq.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015e94:	68ba      	ldr	r2, [r7, #8]
 8015e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e98:	699b      	ldr	r3, [r3, #24]
 8015e9a:	441a      	add	r2, r3
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	9300      	str	r3, [sp, #0]
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	2100      	movs	r1, #0
 8015ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ea6:	f7ff fe05 	bl	8015ab4 <xTimerGenericCommand>
 8015eaa:	6238      	str	r0, [r7, #32]
 8015eac:	6a3b      	ldr	r3, [r7, #32]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d14f      	bne.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb6:	f383 8811 	msr	BASEPRI, r3
 8015eba:	f3bf 8f6f 	isb	sy
 8015ebe:	f3bf 8f4f 	dsb	sy
 8015ec2:	61bb      	str	r3, [r7, #24]
 8015ec4:	bf00      	nop
 8015ec6:	e7fe      	b.n	8015ec6 <prvProcessReceivedCommands+0x112>
 8015ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ece:	f023 0301 	bic.w	r3, r3, #1
 8015ed2:	b2da      	uxtb	r2, r3
 8015ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015eda:	e03a      	b.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ee2:	f043 0301 	orr.w	r3, r3, #1
 8015ee6:	b2da      	uxtb	r2, r3
 8015ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015eee:	68ba      	ldr	r2, [r7, #8]
 8015ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef2:	619a      	str	r2, [r3, #24]
 8015ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef6:	699b      	ldr	r3, [r3, #24]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10a      	bne.n	8015f12 <prvProcessReceivedCommands+0x15e>
 8015efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f00:	f383 8811 	msr	BASEPRI, r3
 8015f04:	f3bf 8f6f 	isb	sy
 8015f08:	f3bf 8f4f 	dsb	sy
 8015f0c:	617b      	str	r3, [r7, #20]
 8015f0e:	bf00      	nop
 8015f10:	e7fe      	b.n	8015f10 <prvProcessReceivedCommands+0x15c>
 8015f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f14:	699a      	ldr	r2, [r3, #24]
 8015f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f18:	18d1      	adds	r1, r2, r3
 8015f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f20:	f7ff ff06 	bl	8015d30 <prvInsertTimerInActiveList>
 8015f24:	e015      	b.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f2c:	f003 0302 	and.w	r3, r3, #2
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d103      	bne.n	8015f3c <prvProcessReceivedCommands+0x188>
 8015f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f36:	f000 fbfb 	bl	8016730 <vPortFree>
 8015f3a:	e00a      	b.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f42:	f023 0301 	bic.w	r3, r3, #1
 8015f46:	b2da      	uxtb	r2, r3
 8015f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f4e:	e000      	b.n	8015f52 <prvProcessReceivedCommands+0x19e>
 8015f50:	bf00      	nop
 8015f52:	4b08      	ldr	r3, [pc, #32]	; (8015f74 <prvProcessReceivedCommands+0x1c0>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	1d39      	adds	r1, r7, #4
 8015f58:	2200      	movs	r2, #0
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7fe f960 	bl	8014220 <xQueueReceive>
 8015f60:	4603      	mov	r3, r0
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f47f af2a 	bne.w	8015dbc <prvProcessReceivedCommands+0x8>
 8015f68:	bf00      	nop
 8015f6a:	bf00      	nop
 8015f6c:	3730      	adds	r7, #48	; 0x30
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	24001d3c 	.word	0x24001d3c

08015f78 <prvSwitchTimerLists>:
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b088      	sub	sp, #32
 8015f7c:	af02      	add	r7, sp, #8
 8015f7e:	e048      	b.n	8016012 <prvSwitchTimerLists+0x9a>
 8015f80:	4b2d      	ldr	r3, [pc, #180]	; (8016038 <prvSwitchTimerLists+0xc0>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	613b      	str	r3, [r7, #16]
 8015f8a:	4b2b      	ldr	r3, [pc, #172]	; (8016038 <prvSwitchTimerLists+0xc0>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	68db      	ldr	r3, [r3, #12]
 8015f92:	60fb      	str	r3, [r7, #12]
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	3304      	adds	r3, #4
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fd fe3f 	bl	8013c1c <uxListRemove>
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	6a1b      	ldr	r3, [r3, #32]
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	4798      	blx	r3
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fac:	f003 0304 	and.w	r3, r3, #4
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d02e      	beq.n	8016012 <prvSwitchTimerLists+0x9a>
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	699b      	ldr	r3, [r3, #24]
 8015fb8:	693a      	ldr	r2, [r7, #16]
 8015fba:	4413      	add	r3, r2
 8015fbc:	60bb      	str	r3, [r7, #8]
 8015fbe:	68ba      	ldr	r2, [r7, #8]
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d90e      	bls.n	8015fe4 <prvSwitchTimerLists+0x6c>
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	68ba      	ldr	r2, [r7, #8]
 8015fca:	605a      	str	r2, [r3, #4]
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	611a      	str	r2, [r3, #16]
 8015fd2:	4b19      	ldr	r3, [pc, #100]	; (8016038 <prvSwitchTimerLists+0xc0>)
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	3304      	adds	r3, #4
 8015fda:	4619      	mov	r1, r3
 8015fdc:	4610      	mov	r0, r2
 8015fde:	f7fd fde4 	bl	8013baa <vListInsert>
 8015fe2:	e016      	b.n	8016012 <prvSwitchTimerLists+0x9a>
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	2300      	movs	r3, #0
 8015fea:	693a      	ldr	r2, [r7, #16]
 8015fec:	2100      	movs	r1, #0
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f7ff fd60 	bl	8015ab4 <xTimerGenericCommand>
 8015ff4:	6078      	str	r0, [r7, #4]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10a      	bne.n	8016012 <prvSwitchTimerLists+0x9a>
 8015ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016000:	f383 8811 	msr	BASEPRI, r3
 8016004:	f3bf 8f6f 	isb	sy
 8016008:	f3bf 8f4f 	dsb	sy
 801600c:	603b      	str	r3, [r7, #0]
 801600e:	bf00      	nop
 8016010:	e7fe      	b.n	8016010 <prvSwitchTimerLists+0x98>
 8016012:	4b09      	ldr	r3, [pc, #36]	; (8016038 <prvSwitchTimerLists+0xc0>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d1b1      	bne.n	8015f80 <prvSwitchTimerLists+0x8>
 801601c:	4b06      	ldr	r3, [pc, #24]	; (8016038 <prvSwitchTimerLists+0xc0>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	617b      	str	r3, [r7, #20]
 8016022:	4b06      	ldr	r3, [pc, #24]	; (801603c <prvSwitchTimerLists+0xc4>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	4a04      	ldr	r2, [pc, #16]	; (8016038 <prvSwitchTimerLists+0xc0>)
 8016028:	6013      	str	r3, [r2, #0]
 801602a:	4a04      	ldr	r2, [pc, #16]	; (801603c <prvSwitchTimerLists+0xc4>)
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	6013      	str	r3, [r2, #0]
 8016030:	bf00      	nop
 8016032:	3718      	adds	r7, #24
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	24001d34 	.word	0x24001d34
 801603c:	24001d38 	.word	0x24001d38

08016040 <prvCheckForValidListAndQueue>:
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af02      	add	r7, sp, #8
 8016046:	f000 f985 	bl	8016354 <vPortEnterCritical>
 801604a:	4b15      	ldr	r3, [pc, #84]	; (80160a0 <prvCheckForValidListAndQueue+0x60>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d120      	bne.n	8016094 <prvCheckForValidListAndQueue+0x54>
 8016052:	4814      	ldr	r0, [pc, #80]	; (80160a4 <prvCheckForValidListAndQueue+0x64>)
 8016054:	f7fd fd58 	bl	8013b08 <vListInitialise>
 8016058:	4813      	ldr	r0, [pc, #76]	; (80160a8 <prvCheckForValidListAndQueue+0x68>)
 801605a:	f7fd fd55 	bl	8013b08 <vListInitialise>
 801605e:	4b13      	ldr	r3, [pc, #76]	; (80160ac <prvCheckForValidListAndQueue+0x6c>)
 8016060:	4a10      	ldr	r2, [pc, #64]	; (80160a4 <prvCheckForValidListAndQueue+0x64>)
 8016062:	601a      	str	r2, [r3, #0]
 8016064:	4b12      	ldr	r3, [pc, #72]	; (80160b0 <prvCheckForValidListAndQueue+0x70>)
 8016066:	4a10      	ldr	r2, [pc, #64]	; (80160a8 <prvCheckForValidListAndQueue+0x68>)
 8016068:	601a      	str	r2, [r3, #0]
 801606a:	2300      	movs	r3, #0
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	4b11      	ldr	r3, [pc, #68]	; (80160b4 <prvCheckForValidListAndQueue+0x74>)
 8016070:	4a11      	ldr	r2, [pc, #68]	; (80160b8 <prvCheckForValidListAndQueue+0x78>)
 8016072:	2110      	movs	r1, #16
 8016074:	200a      	movs	r0, #10
 8016076:	f7fd fe63 	bl	8013d40 <xQueueGenericCreateStatic>
 801607a:	4603      	mov	r3, r0
 801607c:	4a08      	ldr	r2, [pc, #32]	; (80160a0 <prvCheckForValidListAndQueue+0x60>)
 801607e:	6013      	str	r3, [r2, #0]
 8016080:	4b07      	ldr	r3, [pc, #28]	; (80160a0 <prvCheckForValidListAndQueue+0x60>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d005      	beq.n	8016094 <prvCheckForValidListAndQueue+0x54>
 8016088:	4b05      	ldr	r3, [pc, #20]	; (80160a0 <prvCheckForValidListAndQueue+0x60>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	490b      	ldr	r1, [pc, #44]	; (80160bc <prvCheckForValidListAndQueue+0x7c>)
 801608e:	4618      	mov	r0, r3
 8016090:	f7fe fb36 	bl	8014700 <vQueueAddToRegistry>
 8016094:	f000 f98e 	bl	80163b4 <vPortExitCritical>
 8016098:	bf00      	nop
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	24001d3c 	.word	0x24001d3c
 80160a4:	24001d0c 	.word	0x24001d0c
 80160a8:	24001d20 	.word	0x24001d20
 80160ac:	24001d34 	.word	0x24001d34
 80160b0:	24001d38 	.word	0x24001d38
 80160b4:	24001de8 	.word	0x24001de8
 80160b8:	24001d48 	.word	0x24001d48
 80160bc:	08017688 	.word	0x08017688

080160c0 <xTimerPendFunctionCallFromISR>:
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b08a      	sub	sp, #40	; 0x28
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
 80160cc:	603b      	str	r3, [r7, #0]
 80160ce:	f06f 0301 	mvn.w	r3, #1
 80160d2:	617b      	str	r3, [r7, #20]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	61bb      	str	r3, [r7, #24]
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	61fb      	str	r3, [r7, #28]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	623b      	str	r3, [r7, #32]
 80160e0:	4b06      	ldr	r3, [pc, #24]	; (80160fc <xTimerPendFunctionCallFromISR+0x3c>)
 80160e2:	6818      	ldr	r0, [r3, #0]
 80160e4:	f107 0114 	add.w	r1, r7, #20
 80160e8:	2300      	movs	r3, #0
 80160ea:	683a      	ldr	r2, [r7, #0]
 80160ec:	f7fd fffc 	bl	80140e8 <xQueueGenericSendFromISR>
 80160f0:	6278      	str	r0, [r7, #36]	; 0x24
 80160f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160f4:	4618      	mov	r0, r3
 80160f6:	3728      	adds	r7, #40	; 0x28
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}
 80160fc:	24001d3c 	.word	0x24001d3c

08016100 <pxPortInitialiseStack>:
 8016100:	b480      	push	{r7}
 8016102:	b085      	sub	sp, #20
 8016104:	af00      	add	r7, sp, #0
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	60b9      	str	r1, [r7, #8]
 801610a:	607a      	str	r2, [r7, #4]
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	3b04      	subs	r3, #4
 8016110:	60fb      	str	r3, [r7, #12]
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016118:	601a      	str	r2, [r3, #0]
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	3b04      	subs	r3, #4
 801611e:	60fb      	str	r3, [r7, #12]
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	f023 0201 	bic.w	r2, r3, #1
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	601a      	str	r2, [r3, #0]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	3b04      	subs	r3, #4
 801612e:	60fb      	str	r3, [r7, #12]
 8016130:	4a0c      	ldr	r2, [pc, #48]	; (8016164 <pxPortInitialiseStack+0x64>)
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	601a      	str	r2, [r3, #0]
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	3b14      	subs	r3, #20
 801613a:	60fb      	str	r3, [r7, #12]
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	601a      	str	r2, [r3, #0]
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	3b04      	subs	r3, #4
 8016146:	60fb      	str	r3, [r7, #12]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f06f 0202 	mvn.w	r2, #2
 801614e:	601a      	str	r2, [r3, #0]
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	3b20      	subs	r3, #32
 8016154:	60fb      	str	r3, [r7, #12]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	4618      	mov	r0, r3
 801615a:	3714      	adds	r7, #20
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr
 8016164:	08016169 	.word	0x08016169

08016168 <prvTaskExitError>:
 8016168:	b480      	push	{r7}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	2300      	movs	r3, #0
 8016170:	607b      	str	r3, [r7, #4]
 8016172:	4b12      	ldr	r3, [pc, #72]	; (80161bc <prvTaskExitError+0x54>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801617a:	d00a      	beq.n	8016192 <prvTaskExitError+0x2a>
 801617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016180:	f383 8811 	msr	BASEPRI, r3
 8016184:	f3bf 8f6f 	isb	sy
 8016188:	f3bf 8f4f 	dsb	sy
 801618c:	60fb      	str	r3, [r7, #12]
 801618e:	bf00      	nop
 8016190:	e7fe      	b.n	8016190 <prvTaskExitError+0x28>
 8016192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016196:	f383 8811 	msr	BASEPRI, r3
 801619a:	f3bf 8f6f 	isb	sy
 801619e:	f3bf 8f4f 	dsb	sy
 80161a2:	60bb      	str	r3, [r7, #8]
 80161a4:	bf00      	nop
 80161a6:	bf00      	nop
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d0fc      	beq.n	80161a8 <prvTaskExitError+0x40>
 80161ae:	bf00      	nop
 80161b0:	bf00      	nop
 80161b2:	3714      	adds	r7, #20
 80161b4:	46bd      	mov	sp, r7
 80161b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ba:	4770      	bx	lr
 80161bc:	240000a0 	.word	0x240000a0

080161c0 <SVC_Handler>:
 80161c0:	4b07      	ldr	r3, [pc, #28]	; (80161e0 <pxCurrentTCBConst2>)
 80161c2:	6819      	ldr	r1, [r3, #0]
 80161c4:	6808      	ldr	r0, [r1, #0]
 80161c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ca:	f380 8809 	msr	PSP, r0
 80161ce:	f3bf 8f6f 	isb	sy
 80161d2:	f04f 0000 	mov.w	r0, #0
 80161d6:	f380 8811 	msr	BASEPRI, r0
 80161da:	4770      	bx	lr
 80161dc:	f3af 8000 	nop.w

080161e0 <pxCurrentTCBConst2>:
 80161e0:	2400180c 	.word	0x2400180c
 80161e4:	bf00      	nop
 80161e6:	bf00      	nop

080161e8 <prvPortStartFirstTask>:
 80161e8:	4808      	ldr	r0, [pc, #32]	; (801620c <prvPortStartFirstTask+0x24>)
 80161ea:	6800      	ldr	r0, [r0, #0]
 80161ec:	6800      	ldr	r0, [r0, #0]
 80161ee:	f380 8808 	msr	MSP, r0
 80161f2:	f04f 0000 	mov.w	r0, #0
 80161f6:	f380 8814 	msr	CONTROL, r0
 80161fa:	b662      	cpsie	i
 80161fc:	b661      	cpsie	f
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	f3bf 8f6f 	isb	sy
 8016206:	df00      	svc	0
 8016208:	bf00      	nop
 801620a:	bf00      	nop
 801620c:	e000ed08 	.word	0xe000ed08

08016210 <xPortStartScheduler>:
 8016210:	b580      	push	{r7, lr}
 8016212:	b086      	sub	sp, #24
 8016214:	af00      	add	r7, sp, #0
 8016216:	4b46      	ldr	r3, [pc, #280]	; (8016330 <xPortStartScheduler+0x120>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4a46      	ldr	r2, [pc, #280]	; (8016334 <xPortStartScheduler+0x124>)
 801621c:	4293      	cmp	r3, r2
 801621e:	d10a      	bne.n	8016236 <xPortStartScheduler+0x26>
 8016220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016224:	f383 8811 	msr	BASEPRI, r3
 8016228:	f3bf 8f6f 	isb	sy
 801622c:	f3bf 8f4f 	dsb	sy
 8016230:	613b      	str	r3, [r7, #16]
 8016232:	bf00      	nop
 8016234:	e7fe      	b.n	8016234 <xPortStartScheduler+0x24>
 8016236:	4b3e      	ldr	r3, [pc, #248]	; (8016330 <xPortStartScheduler+0x120>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4a3f      	ldr	r2, [pc, #252]	; (8016338 <xPortStartScheduler+0x128>)
 801623c:	4293      	cmp	r3, r2
 801623e:	d10a      	bne.n	8016256 <xPortStartScheduler+0x46>
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	60fb      	str	r3, [r7, #12]
 8016252:	bf00      	nop
 8016254:	e7fe      	b.n	8016254 <xPortStartScheduler+0x44>
 8016256:	4b39      	ldr	r3, [pc, #228]	; (801633c <xPortStartScheduler+0x12c>)
 8016258:	617b      	str	r3, [r7, #20]
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	b2db      	uxtb	r3, r3
 8016260:	607b      	str	r3, [r7, #4]
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	22ff      	movs	r2, #255	; 0xff
 8016266:	701a      	strb	r2, [r3, #0]
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	b2db      	uxtb	r3, r3
 801626e:	70fb      	strb	r3, [r7, #3]
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016278:	b2da      	uxtb	r2, r3
 801627a:	4b31      	ldr	r3, [pc, #196]	; (8016340 <xPortStartScheduler+0x130>)
 801627c:	701a      	strb	r2, [r3, #0]
 801627e:	4b31      	ldr	r3, [pc, #196]	; (8016344 <xPortStartScheduler+0x134>)
 8016280:	2207      	movs	r2, #7
 8016282:	601a      	str	r2, [r3, #0]
 8016284:	e009      	b.n	801629a <xPortStartScheduler+0x8a>
 8016286:	4b2f      	ldr	r3, [pc, #188]	; (8016344 <xPortStartScheduler+0x134>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	3b01      	subs	r3, #1
 801628c:	4a2d      	ldr	r2, [pc, #180]	; (8016344 <xPortStartScheduler+0x134>)
 801628e:	6013      	str	r3, [r2, #0]
 8016290:	78fb      	ldrb	r3, [r7, #3]
 8016292:	b2db      	uxtb	r3, r3
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	b2db      	uxtb	r3, r3
 8016298:	70fb      	strb	r3, [r7, #3]
 801629a:	78fb      	ldrb	r3, [r7, #3]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162a2:	2b80      	cmp	r3, #128	; 0x80
 80162a4:	d0ef      	beq.n	8016286 <xPortStartScheduler+0x76>
 80162a6:	4b27      	ldr	r3, [pc, #156]	; (8016344 <xPortStartScheduler+0x134>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	f1c3 0307 	rsb	r3, r3, #7
 80162ae:	2b04      	cmp	r3, #4
 80162b0:	d00a      	beq.n	80162c8 <xPortStartScheduler+0xb8>
 80162b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b6:	f383 8811 	msr	BASEPRI, r3
 80162ba:	f3bf 8f6f 	isb	sy
 80162be:	f3bf 8f4f 	dsb	sy
 80162c2:	60bb      	str	r3, [r7, #8]
 80162c4:	bf00      	nop
 80162c6:	e7fe      	b.n	80162c6 <xPortStartScheduler+0xb6>
 80162c8:	4b1e      	ldr	r3, [pc, #120]	; (8016344 <xPortStartScheduler+0x134>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	021b      	lsls	r3, r3, #8
 80162ce:	4a1d      	ldr	r2, [pc, #116]	; (8016344 <xPortStartScheduler+0x134>)
 80162d0:	6013      	str	r3, [r2, #0]
 80162d2:	4b1c      	ldr	r3, [pc, #112]	; (8016344 <xPortStartScheduler+0x134>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80162da:	4a1a      	ldr	r2, [pc, #104]	; (8016344 <xPortStartScheduler+0x134>)
 80162dc:	6013      	str	r3, [r2, #0]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	b2da      	uxtb	r2, r3
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	701a      	strb	r2, [r3, #0]
 80162e6:	4b18      	ldr	r3, [pc, #96]	; (8016348 <xPortStartScheduler+0x138>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a17      	ldr	r2, [pc, #92]	; (8016348 <xPortStartScheduler+0x138>)
 80162ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80162f0:	6013      	str	r3, [r2, #0]
 80162f2:	4b15      	ldr	r3, [pc, #84]	; (8016348 <xPortStartScheduler+0x138>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a14      	ldr	r2, [pc, #80]	; (8016348 <xPortStartScheduler+0x138>)
 80162f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80162fc:	6013      	str	r3, [r2, #0]
 80162fe:	f000 f8dd 	bl	80164bc <vPortSetupTimerInterrupt>
 8016302:	4b12      	ldr	r3, [pc, #72]	; (801634c <xPortStartScheduler+0x13c>)
 8016304:	2200      	movs	r2, #0
 8016306:	601a      	str	r2, [r3, #0]
 8016308:	f000 f8fc 	bl	8016504 <vPortEnableVFP>
 801630c:	4b10      	ldr	r3, [pc, #64]	; (8016350 <xPortStartScheduler+0x140>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4a0f      	ldr	r2, [pc, #60]	; (8016350 <xPortStartScheduler+0x140>)
 8016312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016316:	6013      	str	r3, [r2, #0]
 8016318:	f7ff ff66 	bl	80161e8 <prvPortStartFirstTask>
 801631c:	f7fe ff80 	bl	8015220 <vTaskSwitchContext>
 8016320:	f7ff ff22 	bl	8016168 <prvTaskExitError>
 8016324:	2300      	movs	r3, #0
 8016326:	4618      	mov	r0, r3
 8016328:	3718      	adds	r7, #24
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	e000ed00 	.word	0xe000ed00
 8016334:	410fc271 	.word	0x410fc271
 8016338:	410fc270 	.word	0x410fc270
 801633c:	e000e400 	.word	0xe000e400
 8016340:	24001e38 	.word	0x24001e38
 8016344:	24001e3c 	.word	0x24001e3c
 8016348:	e000ed20 	.word	0xe000ed20
 801634c:	240000a0 	.word	0x240000a0
 8016350:	e000ef34 	.word	0xe000ef34

08016354 <vPortEnterCritical>:
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
 801635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801635e:	f383 8811 	msr	BASEPRI, r3
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	f3bf 8f4f 	dsb	sy
 801636a:	607b      	str	r3, [r7, #4]
 801636c:	bf00      	nop
 801636e:	4b0f      	ldr	r3, [pc, #60]	; (80163ac <vPortEnterCritical+0x58>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	3301      	adds	r3, #1
 8016374:	4a0d      	ldr	r2, [pc, #52]	; (80163ac <vPortEnterCritical+0x58>)
 8016376:	6013      	str	r3, [r2, #0]
 8016378:	4b0c      	ldr	r3, [pc, #48]	; (80163ac <vPortEnterCritical+0x58>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d10f      	bne.n	80163a0 <vPortEnterCritical+0x4c>
 8016380:	4b0b      	ldr	r3, [pc, #44]	; (80163b0 <vPortEnterCritical+0x5c>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	b2db      	uxtb	r3, r3
 8016386:	2b00      	cmp	r3, #0
 8016388:	d00a      	beq.n	80163a0 <vPortEnterCritical+0x4c>
 801638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801638e:	f383 8811 	msr	BASEPRI, r3
 8016392:	f3bf 8f6f 	isb	sy
 8016396:	f3bf 8f4f 	dsb	sy
 801639a:	603b      	str	r3, [r7, #0]
 801639c:	bf00      	nop
 801639e:	e7fe      	b.n	801639e <vPortEnterCritical+0x4a>
 80163a0:	bf00      	nop
 80163a2:	370c      	adds	r7, #12
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr
 80163ac:	240000a0 	.word	0x240000a0
 80163b0:	e000ed04 	.word	0xe000ed04

080163b4 <vPortExitCritical>:
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	4b12      	ldr	r3, [pc, #72]	; (8016404 <vPortExitCritical+0x50>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d10a      	bne.n	80163d8 <vPortExitCritical+0x24>
 80163c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c6:	f383 8811 	msr	BASEPRI, r3
 80163ca:	f3bf 8f6f 	isb	sy
 80163ce:	f3bf 8f4f 	dsb	sy
 80163d2:	607b      	str	r3, [r7, #4]
 80163d4:	bf00      	nop
 80163d6:	e7fe      	b.n	80163d6 <vPortExitCritical+0x22>
 80163d8:	4b0a      	ldr	r3, [pc, #40]	; (8016404 <vPortExitCritical+0x50>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	3b01      	subs	r3, #1
 80163de:	4a09      	ldr	r2, [pc, #36]	; (8016404 <vPortExitCritical+0x50>)
 80163e0:	6013      	str	r3, [r2, #0]
 80163e2:	4b08      	ldr	r3, [pc, #32]	; (8016404 <vPortExitCritical+0x50>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d105      	bne.n	80163f6 <vPortExitCritical+0x42>
 80163ea:	2300      	movs	r3, #0
 80163ec:	603b      	str	r3, [r7, #0]
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	f383 8811 	msr	BASEPRI, r3
 80163f4:	bf00      	nop
 80163f6:	bf00      	nop
 80163f8:	370c      	adds	r7, #12
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop
 8016404:	240000a0 	.word	0x240000a0
	...

08016410 <PendSV_Handler>:
 8016410:	f3ef 8009 	mrs	r0, PSP
 8016414:	f3bf 8f6f 	isb	sy
 8016418:	4b15      	ldr	r3, [pc, #84]	; (8016470 <pxCurrentTCBConst>)
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	f01e 0f10 	tst.w	lr, #16
 8016420:	bf08      	it	eq
 8016422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801642a:	6010      	str	r0, [r2, #0]
 801642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016434:	f380 8811 	msr	BASEPRI, r0
 8016438:	f3bf 8f4f 	dsb	sy
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f7fe feee 	bl	8015220 <vTaskSwitchContext>
 8016444:	f04f 0000 	mov.w	r0, #0
 8016448:	f380 8811 	msr	BASEPRI, r0
 801644c:	bc09      	pop	{r0, r3}
 801644e:	6819      	ldr	r1, [r3, #0]
 8016450:	6808      	ldr	r0, [r1, #0]
 8016452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016456:	f01e 0f10 	tst.w	lr, #16
 801645a:	bf08      	it	eq
 801645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016460:	f380 8809 	msr	PSP, r0
 8016464:	f3bf 8f6f 	isb	sy
 8016468:	4770      	bx	lr
 801646a:	bf00      	nop
 801646c:	f3af 8000 	nop.w

08016470 <pxCurrentTCBConst>:
 8016470:	2400180c 	.word	0x2400180c
 8016474:	bf00      	nop
 8016476:	bf00      	nop

08016478 <xPortSysTickHandler>:
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
 801647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016482:	f383 8811 	msr	BASEPRI, r3
 8016486:	f3bf 8f6f 	isb	sy
 801648a:	f3bf 8f4f 	dsb	sy
 801648e:	607b      	str	r3, [r7, #4]
 8016490:	bf00      	nop
 8016492:	f7fe fe03 	bl	801509c <xTaskIncrementTick>
 8016496:	4603      	mov	r3, r0
 8016498:	2b00      	cmp	r3, #0
 801649a:	d003      	beq.n	80164a4 <xPortSysTickHandler+0x2c>
 801649c:	4b06      	ldr	r3, [pc, #24]	; (80164b8 <xPortSysTickHandler+0x40>)
 801649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a2:	601a      	str	r2, [r3, #0]
 80164a4:	2300      	movs	r3, #0
 80164a6:	603b      	str	r3, [r7, #0]
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	f383 8811 	msr	BASEPRI, r3
 80164ae:	bf00      	nop
 80164b0:	bf00      	nop
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	e000ed04 	.word	0xe000ed04

080164bc <vPortSetupTimerInterrupt>:
 80164bc:	b480      	push	{r7}
 80164be:	af00      	add	r7, sp, #0
 80164c0:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <vPortSetupTimerInterrupt+0x34>)
 80164c2:	2200      	movs	r2, #0
 80164c4:	601a      	str	r2, [r3, #0]
 80164c6:	4b0b      	ldr	r3, [pc, #44]	; (80164f4 <vPortSetupTimerInterrupt+0x38>)
 80164c8:	2200      	movs	r2, #0
 80164ca:	601a      	str	r2, [r3, #0]
 80164cc:	4b0a      	ldr	r3, [pc, #40]	; (80164f8 <vPortSetupTimerInterrupt+0x3c>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	4a0a      	ldr	r2, [pc, #40]	; (80164fc <vPortSetupTimerInterrupt+0x40>)
 80164d2:	fba2 2303 	umull	r2, r3, r2, r3
 80164d6:	099b      	lsrs	r3, r3, #6
 80164d8:	4a09      	ldr	r2, [pc, #36]	; (8016500 <vPortSetupTimerInterrupt+0x44>)
 80164da:	3b01      	subs	r3, #1
 80164dc:	6013      	str	r3, [r2, #0]
 80164de:	4b04      	ldr	r3, [pc, #16]	; (80164f0 <vPortSetupTimerInterrupt+0x34>)
 80164e0:	2207      	movs	r2, #7
 80164e2:	601a      	str	r2, [r3, #0]
 80164e4:	bf00      	nop
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	e000e010 	.word	0xe000e010
 80164f4:	e000e018 	.word	0xe000e018
 80164f8:	24000090 	.word	0x24000090
 80164fc:	10624dd3 	.word	0x10624dd3
 8016500:	e000e014 	.word	0xe000e014

08016504 <vPortEnableVFP>:
 8016504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016514 <vPortEnableVFP+0x10>
 8016508:	6801      	ldr	r1, [r0, #0]
 801650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801650e:	6001      	str	r1, [r0, #0]
 8016510:	4770      	bx	lr
 8016512:	bf00      	nop
 8016514:	e000ed88 	.word	0xe000ed88

08016518 <vPortValidateInterruptPriority>:
 8016518:	b480      	push	{r7}
 801651a:	b085      	sub	sp, #20
 801651c:	af00      	add	r7, sp, #0
 801651e:	f3ef 8305 	mrs	r3, IPSR
 8016522:	60fb      	str	r3, [r7, #12]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b0f      	cmp	r3, #15
 8016528:	d914      	bls.n	8016554 <vPortValidateInterruptPriority+0x3c>
 801652a:	4a17      	ldr	r2, [pc, #92]	; (8016588 <vPortValidateInterruptPriority+0x70>)
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	4413      	add	r3, r2
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	72fb      	strb	r3, [r7, #11]
 8016534:	4b15      	ldr	r3, [pc, #84]	; (801658c <vPortValidateInterruptPriority+0x74>)
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	7afa      	ldrb	r2, [r7, #11]
 801653a:	429a      	cmp	r2, r3
 801653c:	d20a      	bcs.n	8016554 <vPortValidateInterruptPriority+0x3c>
 801653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016542:	f383 8811 	msr	BASEPRI, r3
 8016546:	f3bf 8f6f 	isb	sy
 801654a:	f3bf 8f4f 	dsb	sy
 801654e:	607b      	str	r3, [r7, #4]
 8016550:	bf00      	nop
 8016552:	e7fe      	b.n	8016552 <vPortValidateInterruptPriority+0x3a>
 8016554:	4b0e      	ldr	r3, [pc, #56]	; (8016590 <vPortValidateInterruptPriority+0x78>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801655c:	4b0d      	ldr	r3, [pc, #52]	; (8016594 <vPortValidateInterruptPriority+0x7c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	429a      	cmp	r2, r3
 8016562:	d90a      	bls.n	801657a <vPortValidateInterruptPriority+0x62>
 8016564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016568:	f383 8811 	msr	BASEPRI, r3
 801656c:	f3bf 8f6f 	isb	sy
 8016570:	f3bf 8f4f 	dsb	sy
 8016574:	603b      	str	r3, [r7, #0]
 8016576:	bf00      	nop
 8016578:	e7fe      	b.n	8016578 <vPortValidateInterruptPriority+0x60>
 801657a:	bf00      	nop
 801657c:	3714      	adds	r7, #20
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	e000e3f0 	.word	0xe000e3f0
 801658c:	24001e38 	.word	0x24001e38
 8016590:	e000ed0c 	.word	0xe000ed0c
 8016594:	24001e3c 	.word	0x24001e3c

08016598 <pvPortMalloc>:
 8016598:	b580      	push	{r7, lr}
 801659a:	b08a      	sub	sp, #40	; 0x28
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	2300      	movs	r3, #0
 80165a2:	61fb      	str	r3, [r7, #28]
 80165a4:	f7fe fcbe 	bl	8014f24 <vTaskSuspendAll>
 80165a8:	4b5b      	ldr	r3, [pc, #364]	; (8016718 <pvPortMalloc+0x180>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <pvPortMalloc+0x1c>
 80165b0:	f000 f920 	bl	80167f4 <prvHeapInit>
 80165b4:	4b59      	ldr	r3, [pc, #356]	; (801671c <pvPortMalloc+0x184>)
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	4013      	ands	r3, r2
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f040 8093 	bne.w	80166e8 <pvPortMalloc+0x150>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d01d      	beq.n	8016604 <pvPortMalloc+0x6c>
 80165c8:	2208      	movs	r2, #8
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	4413      	add	r3, r2
 80165ce:	607b      	str	r3, [r7, #4]
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f003 0307 	and.w	r3, r3, #7
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d014      	beq.n	8016604 <pvPortMalloc+0x6c>
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f023 0307 	bic.w	r3, r3, #7
 80165e0:	3308      	adds	r3, #8
 80165e2:	607b      	str	r3, [r7, #4]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f003 0307 	and.w	r3, r3, #7
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00a      	beq.n	8016604 <pvPortMalloc+0x6c>
 80165ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f2:	f383 8811 	msr	BASEPRI, r3
 80165f6:	f3bf 8f6f 	isb	sy
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	617b      	str	r3, [r7, #20]
 8016600:	bf00      	nop
 8016602:	e7fe      	b.n	8016602 <pvPortMalloc+0x6a>
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d06e      	beq.n	80166e8 <pvPortMalloc+0x150>
 801660a:	4b45      	ldr	r3, [pc, #276]	; (8016720 <pvPortMalloc+0x188>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	429a      	cmp	r2, r3
 8016612:	d869      	bhi.n	80166e8 <pvPortMalloc+0x150>
 8016614:	4b43      	ldr	r3, [pc, #268]	; (8016724 <pvPortMalloc+0x18c>)
 8016616:	623b      	str	r3, [r7, #32]
 8016618:	4b42      	ldr	r3, [pc, #264]	; (8016724 <pvPortMalloc+0x18c>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	627b      	str	r3, [r7, #36]	; 0x24
 801661e:	e004      	b.n	801662a <pvPortMalloc+0x92>
 8016620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016622:	623b      	str	r3, [r7, #32]
 8016624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	627b      	str	r3, [r7, #36]	; 0x24
 801662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	429a      	cmp	r2, r3
 8016632:	d903      	bls.n	801663c <pvPortMalloc+0xa4>
 8016634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d1f1      	bne.n	8016620 <pvPortMalloc+0x88>
 801663c:	4b36      	ldr	r3, [pc, #216]	; (8016718 <pvPortMalloc+0x180>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016642:	429a      	cmp	r2, r3
 8016644:	d050      	beq.n	80166e8 <pvPortMalloc+0x150>
 8016646:	6a3b      	ldr	r3, [r7, #32]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	2208      	movs	r2, #8
 801664c:	4413      	add	r3, r2
 801664e:	61fb      	str	r3, [r7, #28]
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	6a3b      	ldr	r3, [r7, #32]
 8016656:	601a      	str	r2, [r3, #0]
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	685a      	ldr	r2, [r3, #4]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	1ad2      	subs	r2, r2, r3
 8016660:	2308      	movs	r3, #8
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	429a      	cmp	r2, r3
 8016666:	d91f      	bls.n	80166a8 <pvPortMalloc+0x110>
 8016668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	4413      	add	r3, r2
 801666e:	61bb      	str	r3, [r7, #24]
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	f003 0307 	and.w	r3, r3, #7
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00a      	beq.n	8016690 <pvPortMalloc+0xf8>
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	613b      	str	r3, [r7, #16]
 801668c:	bf00      	nop
 801668e:	e7fe      	b.n	801668e <pvPortMalloc+0xf6>
 8016690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016692:	685a      	ldr	r2, [r3, #4]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	1ad2      	subs	r2, r2, r3
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	605a      	str	r2, [r3, #4]
 801669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	605a      	str	r2, [r3, #4]
 80166a2:	69b8      	ldr	r0, [r7, #24]
 80166a4:	f000 f908 	bl	80168b8 <prvInsertBlockIntoFreeList>
 80166a8:	4b1d      	ldr	r3, [pc, #116]	; (8016720 <pvPortMalloc+0x188>)
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	1ad3      	subs	r3, r2, r3
 80166b2:	4a1b      	ldr	r2, [pc, #108]	; (8016720 <pvPortMalloc+0x188>)
 80166b4:	6013      	str	r3, [r2, #0]
 80166b6:	4b1a      	ldr	r3, [pc, #104]	; (8016720 <pvPortMalloc+0x188>)
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	4b1b      	ldr	r3, [pc, #108]	; (8016728 <pvPortMalloc+0x190>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	429a      	cmp	r2, r3
 80166c0:	d203      	bcs.n	80166ca <pvPortMalloc+0x132>
 80166c2:	4b17      	ldr	r3, [pc, #92]	; (8016720 <pvPortMalloc+0x188>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	4a18      	ldr	r2, [pc, #96]	; (8016728 <pvPortMalloc+0x190>)
 80166c8:	6013      	str	r3, [r2, #0]
 80166ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166cc:	685a      	ldr	r2, [r3, #4]
 80166ce:	4b13      	ldr	r3, [pc, #76]	; (801671c <pvPortMalloc+0x184>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	431a      	orrs	r2, r3
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	605a      	str	r2, [r3, #4]
 80166d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166da:	2200      	movs	r2, #0
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	4b13      	ldr	r3, [pc, #76]	; (801672c <pvPortMalloc+0x194>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	3301      	adds	r3, #1
 80166e4:	4a11      	ldr	r2, [pc, #68]	; (801672c <pvPortMalloc+0x194>)
 80166e6:	6013      	str	r3, [r2, #0]
 80166e8:	f7fe fc2a 	bl	8014f40 <xTaskResumeAll>
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	f003 0307 	and.w	r3, r3, #7
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00a      	beq.n	801670c <pvPortMalloc+0x174>
 80166f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	60fb      	str	r3, [r7, #12]
 8016708:	bf00      	nop
 801670a:	e7fe      	b.n	801670a <pvPortMalloc+0x172>
 801670c:	69fb      	ldr	r3, [r7, #28]
 801670e:	4618      	mov	r0, r3
 8016710:	3728      	adds	r7, #40	; 0x28
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	24005a48 	.word	0x24005a48
 801671c:	24005a5c 	.word	0x24005a5c
 8016720:	24005a4c 	.word	0x24005a4c
 8016724:	24005a40 	.word	0x24005a40
 8016728:	24005a50 	.word	0x24005a50
 801672c:	24005a54 	.word	0x24005a54

08016730 <vPortFree>:
 8016730:	b580      	push	{r7, lr}
 8016732:	b086      	sub	sp, #24
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	617b      	str	r3, [r7, #20]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d04d      	beq.n	80167de <vPortFree+0xae>
 8016742:	2308      	movs	r3, #8
 8016744:	425b      	negs	r3, r3
 8016746:	697a      	ldr	r2, [r7, #20]
 8016748:	4413      	add	r3, r2
 801674a:	617b      	str	r3, [r7, #20]
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	613b      	str	r3, [r7, #16]
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	685a      	ldr	r2, [r3, #4]
 8016754:	4b24      	ldr	r3, [pc, #144]	; (80167e8 <vPortFree+0xb8>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4013      	ands	r3, r2
 801675a:	2b00      	cmp	r3, #0
 801675c:	d10a      	bne.n	8016774 <vPortFree+0x44>
 801675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016762:	f383 8811 	msr	BASEPRI, r3
 8016766:	f3bf 8f6f 	isb	sy
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	60fb      	str	r3, [r7, #12]
 8016770:	bf00      	nop
 8016772:	e7fe      	b.n	8016772 <vPortFree+0x42>
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d00a      	beq.n	8016792 <vPortFree+0x62>
 801677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016780:	f383 8811 	msr	BASEPRI, r3
 8016784:	f3bf 8f6f 	isb	sy
 8016788:	f3bf 8f4f 	dsb	sy
 801678c:	60bb      	str	r3, [r7, #8]
 801678e:	bf00      	nop
 8016790:	e7fe      	b.n	8016790 <vPortFree+0x60>
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	685a      	ldr	r2, [r3, #4]
 8016796:	4b14      	ldr	r3, [pc, #80]	; (80167e8 <vPortFree+0xb8>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4013      	ands	r3, r2
 801679c:	2b00      	cmp	r3, #0
 801679e:	d01e      	beq.n	80167de <vPortFree+0xae>
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d11a      	bne.n	80167de <vPortFree+0xae>
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	685a      	ldr	r2, [r3, #4]
 80167ac:	4b0e      	ldr	r3, [pc, #56]	; (80167e8 <vPortFree+0xb8>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	43db      	mvns	r3, r3
 80167b2:	401a      	ands	r2, r3
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	605a      	str	r2, [r3, #4]
 80167b8:	f7fe fbb4 	bl	8014f24 <vTaskSuspendAll>
 80167bc:	693b      	ldr	r3, [r7, #16]
 80167be:	685a      	ldr	r2, [r3, #4]
 80167c0:	4b0a      	ldr	r3, [pc, #40]	; (80167ec <vPortFree+0xbc>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4413      	add	r3, r2
 80167c6:	4a09      	ldr	r2, [pc, #36]	; (80167ec <vPortFree+0xbc>)
 80167c8:	6013      	str	r3, [r2, #0]
 80167ca:	6938      	ldr	r0, [r7, #16]
 80167cc:	f000 f874 	bl	80168b8 <prvInsertBlockIntoFreeList>
 80167d0:	4b07      	ldr	r3, [pc, #28]	; (80167f0 <vPortFree+0xc0>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	3301      	adds	r3, #1
 80167d6:	4a06      	ldr	r2, [pc, #24]	; (80167f0 <vPortFree+0xc0>)
 80167d8:	6013      	str	r3, [r2, #0]
 80167da:	f7fe fbb1 	bl	8014f40 <xTaskResumeAll>
 80167de:	bf00      	nop
 80167e0:	3718      	adds	r7, #24
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	24005a5c 	.word	0x24005a5c
 80167ec:	24005a4c 	.word	0x24005a4c
 80167f0:	24005a58 	.word	0x24005a58

080167f4 <prvHeapInit>:
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80167fe:	60bb      	str	r3, [r7, #8]
 8016800:	4b27      	ldr	r3, [pc, #156]	; (80168a0 <prvHeapInit+0xac>)
 8016802:	60fb      	str	r3, [r7, #12]
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	f003 0307 	and.w	r3, r3, #7
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00c      	beq.n	8016828 <prvHeapInit+0x34>
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	3307      	adds	r3, #7
 8016812:	60fb      	str	r3, [r7, #12]
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f023 0307 	bic.w	r3, r3, #7
 801681a:	60fb      	str	r3, [r7, #12]
 801681c:	68ba      	ldr	r2, [r7, #8]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	4a1f      	ldr	r2, [pc, #124]	; (80168a0 <prvHeapInit+0xac>)
 8016824:	4413      	add	r3, r2
 8016826:	60bb      	str	r3, [r7, #8]
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	607b      	str	r3, [r7, #4]
 801682c:	4a1d      	ldr	r2, [pc, #116]	; (80168a4 <prvHeapInit+0xb0>)
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	6013      	str	r3, [r2, #0]
 8016832:	4b1c      	ldr	r3, [pc, #112]	; (80168a4 <prvHeapInit+0xb0>)
 8016834:	2200      	movs	r2, #0
 8016836:	605a      	str	r2, [r3, #4]
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	68ba      	ldr	r2, [r7, #8]
 801683c:	4413      	add	r3, r2
 801683e:	60fb      	str	r3, [r7, #12]
 8016840:	2208      	movs	r2, #8
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	1a9b      	subs	r3, r3, r2
 8016846:	60fb      	str	r3, [r7, #12]
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f023 0307 	bic.w	r3, r3, #7
 801684e:	60fb      	str	r3, [r7, #12]
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	4a15      	ldr	r2, [pc, #84]	; (80168a8 <prvHeapInit+0xb4>)
 8016854:	6013      	str	r3, [r2, #0]
 8016856:	4b14      	ldr	r3, [pc, #80]	; (80168a8 <prvHeapInit+0xb4>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	2200      	movs	r2, #0
 801685c:	605a      	str	r2, [r3, #4]
 801685e:	4b12      	ldr	r3, [pc, #72]	; (80168a8 <prvHeapInit+0xb4>)
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2200      	movs	r2, #0
 8016864:	601a      	str	r2, [r3, #0]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	603b      	str	r3, [r7, #0]
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	68fa      	ldr	r2, [r7, #12]
 801686e:	1ad2      	subs	r2, r2, r3
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	605a      	str	r2, [r3, #4]
 8016874:	4b0c      	ldr	r3, [pc, #48]	; (80168a8 <prvHeapInit+0xb4>)
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	601a      	str	r2, [r3, #0]
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	4a0a      	ldr	r2, [pc, #40]	; (80168ac <prvHeapInit+0xb8>)
 8016882:	6013      	str	r3, [r2, #0]
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	4a09      	ldr	r2, [pc, #36]	; (80168b0 <prvHeapInit+0xbc>)
 801688a:	6013      	str	r3, [r2, #0]
 801688c:	4b09      	ldr	r3, [pc, #36]	; (80168b4 <prvHeapInit+0xc0>)
 801688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016892:	601a      	str	r2, [r3, #0]
 8016894:	bf00      	nop
 8016896:	3714      	adds	r7, #20
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	24001e40 	.word	0x24001e40
 80168a4:	24005a40 	.word	0x24005a40
 80168a8:	24005a48 	.word	0x24005a48
 80168ac:	24005a50 	.word	0x24005a50
 80168b0:	24005a4c 	.word	0x24005a4c
 80168b4:	24005a5c 	.word	0x24005a5c

080168b8 <prvInsertBlockIntoFreeList>:
 80168b8:	b480      	push	{r7}
 80168ba:	b085      	sub	sp, #20
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
 80168c0:	4b28      	ldr	r3, [pc, #160]	; (8016964 <prvInsertBlockIntoFreeList+0xac>)
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	e002      	b.n	80168cc <prvInsertBlockIntoFreeList+0x14>
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	60fb      	str	r3, [r7, #12]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d8f7      	bhi.n	80168c6 <prvInsertBlockIntoFreeList+0xe>
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	60bb      	str	r3, [r7, #8]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	68ba      	ldr	r2, [r7, #8]
 80168e0:	4413      	add	r3, r2
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d108      	bne.n	80168fa <prvInsertBlockIntoFreeList+0x42>
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	685a      	ldr	r2, [r3, #4]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	441a      	add	r2, r3
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	605a      	str	r2, [r3, #4]
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	607b      	str	r3, [r7, #4]
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	60bb      	str	r3, [r7, #8]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	441a      	add	r2, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	429a      	cmp	r2, r3
 801690c:	d118      	bne.n	8016940 <prvInsertBlockIntoFreeList+0x88>
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	4b15      	ldr	r3, [pc, #84]	; (8016968 <prvInsertBlockIntoFreeList+0xb0>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	429a      	cmp	r2, r3
 8016918:	d00d      	beq.n	8016936 <prvInsertBlockIntoFreeList+0x7e>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	685a      	ldr	r2, [r3, #4]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	441a      	add	r2, r3
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	605a      	str	r2, [r3, #4]
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	681a      	ldr	r2, [r3, #0]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	601a      	str	r2, [r3, #0]
 8016934:	e008      	b.n	8016948 <prvInsertBlockIntoFreeList+0x90>
 8016936:	4b0c      	ldr	r3, [pc, #48]	; (8016968 <prvInsertBlockIntoFreeList+0xb0>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	601a      	str	r2, [r3, #0]
 801693e:	e003      	b.n	8016948 <prvInsertBlockIntoFreeList+0x90>
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	601a      	str	r2, [r3, #0]
 8016948:	68fa      	ldr	r2, [r7, #12]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	429a      	cmp	r2, r3
 801694e:	d002      	beq.n	8016956 <prvInsertBlockIntoFreeList+0x9e>
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	601a      	str	r2, [r3, #0]
 8016956:	bf00      	nop
 8016958:	3714      	adds	r7, #20
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	24005a40 	.word	0x24005a40
 8016968:	24005a48 	.word	0x24005a48

0801696c <__errno>:
 801696c:	4b01      	ldr	r3, [pc, #4]	; (8016974 <__errno+0x8>)
 801696e:	6818      	ldr	r0, [r3, #0]
 8016970:	4770      	bx	lr
 8016972:	bf00      	nop
 8016974:	240000a4 	.word	0x240000a4

08016978 <__libc_init_array>:
 8016978:	b570      	push	{r4, r5, r6, lr}
 801697a:	4d0d      	ldr	r5, [pc, #52]	; (80169b0 <__libc_init_array+0x38>)
 801697c:	4c0d      	ldr	r4, [pc, #52]	; (80169b4 <__libc_init_array+0x3c>)
 801697e:	1b64      	subs	r4, r4, r5
 8016980:	10a4      	asrs	r4, r4, #2
 8016982:	2600      	movs	r6, #0
 8016984:	42a6      	cmp	r6, r4
 8016986:	d109      	bne.n	801699c <__libc_init_array+0x24>
 8016988:	4d0b      	ldr	r5, [pc, #44]	; (80169b8 <__libc_init_array+0x40>)
 801698a:	4c0c      	ldr	r4, [pc, #48]	; (80169bc <__libc_init_array+0x44>)
 801698c:	f000 fd3c 	bl	8017408 <_init>
 8016990:	1b64      	subs	r4, r4, r5
 8016992:	10a4      	asrs	r4, r4, #2
 8016994:	2600      	movs	r6, #0
 8016996:	42a6      	cmp	r6, r4
 8016998:	d105      	bne.n	80169a6 <__libc_init_array+0x2e>
 801699a:	bd70      	pop	{r4, r5, r6, pc}
 801699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80169a0:	4798      	blx	r3
 80169a2:	3601      	adds	r6, #1
 80169a4:	e7ee      	b.n	8016984 <__libc_init_array+0xc>
 80169a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169aa:	4798      	blx	r3
 80169ac:	3601      	adds	r6, #1
 80169ae:	e7f2      	b.n	8016996 <__libc_init_array+0x1e>
 80169b0:	0801785c 	.word	0x0801785c
 80169b4:	0801785c 	.word	0x0801785c
 80169b8:	0801785c 	.word	0x0801785c
 80169bc:	08017860 	.word	0x08017860

080169c0 <malloc>:
 80169c0:	4b02      	ldr	r3, [pc, #8]	; (80169cc <malloc+0xc>)
 80169c2:	4601      	mov	r1, r0
 80169c4:	6818      	ldr	r0, [r3, #0]
 80169c6:	f000 b88d 	b.w	8016ae4 <_malloc_r>
 80169ca:	bf00      	nop
 80169cc:	240000a4 	.word	0x240000a4

080169d0 <free>:
 80169d0:	4b02      	ldr	r3, [pc, #8]	; (80169dc <free+0xc>)
 80169d2:	4601      	mov	r1, r0
 80169d4:	6818      	ldr	r0, [r3, #0]
 80169d6:	f000 b819 	b.w	8016a0c <_free_r>
 80169da:	bf00      	nop
 80169dc:	240000a4 	.word	0x240000a4

080169e0 <memcpy>:
 80169e0:	440a      	add	r2, r1
 80169e2:	4291      	cmp	r1, r2
 80169e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80169e8:	d100      	bne.n	80169ec <memcpy+0xc>
 80169ea:	4770      	bx	lr
 80169ec:	b510      	push	{r4, lr}
 80169ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169f6:	4291      	cmp	r1, r2
 80169f8:	d1f9      	bne.n	80169ee <memcpy+0xe>
 80169fa:	bd10      	pop	{r4, pc}

080169fc <memset>:
 80169fc:	4402      	add	r2, r0
 80169fe:	4603      	mov	r3, r0
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d100      	bne.n	8016a06 <memset+0xa>
 8016a04:	4770      	bx	lr
 8016a06:	f803 1b01 	strb.w	r1, [r3], #1
 8016a0a:	e7f9      	b.n	8016a00 <memset+0x4>

08016a0c <_free_r>:
 8016a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a0e:	2900      	cmp	r1, #0
 8016a10:	d044      	beq.n	8016a9c <_free_r+0x90>
 8016a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a16:	9001      	str	r0, [sp, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8016a1e:	bfb8      	it	lt
 8016a20:	18e4      	addlt	r4, r4, r3
 8016a22:	f000 fc39 	bl	8017298 <__malloc_lock>
 8016a26:	4a1e      	ldr	r2, [pc, #120]	; (8016aa0 <_free_r+0x94>)
 8016a28:	9801      	ldr	r0, [sp, #4]
 8016a2a:	6813      	ldr	r3, [r2, #0]
 8016a2c:	b933      	cbnz	r3, 8016a3c <_free_r+0x30>
 8016a2e:	6063      	str	r3, [r4, #4]
 8016a30:	6014      	str	r4, [r2, #0]
 8016a32:	b003      	add	sp, #12
 8016a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a38:	f000 bc34 	b.w	80172a4 <__malloc_unlock>
 8016a3c:	42a3      	cmp	r3, r4
 8016a3e:	d908      	bls.n	8016a52 <_free_r+0x46>
 8016a40:	6825      	ldr	r5, [r4, #0]
 8016a42:	1961      	adds	r1, r4, r5
 8016a44:	428b      	cmp	r3, r1
 8016a46:	bf01      	itttt	eq
 8016a48:	6819      	ldreq	r1, [r3, #0]
 8016a4a:	685b      	ldreq	r3, [r3, #4]
 8016a4c:	1949      	addeq	r1, r1, r5
 8016a4e:	6021      	streq	r1, [r4, #0]
 8016a50:	e7ed      	b.n	8016a2e <_free_r+0x22>
 8016a52:	461a      	mov	r2, r3
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	b10b      	cbz	r3, 8016a5c <_free_r+0x50>
 8016a58:	42a3      	cmp	r3, r4
 8016a5a:	d9fa      	bls.n	8016a52 <_free_r+0x46>
 8016a5c:	6811      	ldr	r1, [r2, #0]
 8016a5e:	1855      	adds	r5, r2, r1
 8016a60:	42a5      	cmp	r5, r4
 8016a62:	d10b      	bne.n	8016a7c <_free_r+0x70>
 8016a64:	6824      	ldr	r4, [r4, #0]
 8016a66:	4421      	add	r1, r4
 8016a68:	1854      	adds	r4, r2, r1
 8016a6a:	42a3      	cmp	r3, r4
 8016a6c:	6011      	str	r1, [r2, #0]
 8016a6e:	d1e0      	bne.n	8016a32 <_free_r+0x26>
 8016a70:	681c      	ldr	r4, [r3, #0]
 8016a72:	685b      	ldr	r3, [r3, #4]
 8016a74:	6053      	str	r3, [r2, #4]
 8016a76:	4421      	add	r1, r4
 8016a78:	6011      	str	r1, [r2, #0]
 8016a7a:	e7da      	b.n	8016a32 <_free_r+0x26>
 8016a7c:	d902      	bls.n	8016a84 <_free_r+0x78>
 8016a7e:	230c      	movs	r3, #12
 8016a80:	6003      	str	r3, [r0, #0]
 8016a82:	e7d6      	b.n	8016a32 <_free_r+0x26>
 8016a84:	6825      	ldr	r5, [r4, #0]
 8016a86:	1961      	adds	r1, r4, r5
 8016a88:	428b      	cmp	r3, r1
 8016a8a:	bf04      	itt	eq
 8016a8c:	6819      	ldreq	r1, [r3, #0]
 8016a8e:	685b      	ldreq	r3, [r3, #4]
 8016a90:	6063      	str	r3, [r4, #4]
 8016a92:	bf04      	itt	eq
 8016a94:	1949      	addeq	r1, r1, r5
 8016a96:	6021      	streq	r1, [r4, #0]
 8016a98:	6054      	str	r4, [r2, #4]
 8016a9a:	e7ca      	b.n	8016a32 <_free_r+0x26>
 8016a9c:	b003      	add	sp, #12
 8016a9e:	bd30      	pop	{r4, r5, pc}
 8016aa0:	24005a60 	.word	0x24005a60

08016aa4 <sbrk_aligned>:
 8016aa4:	b570      	push	{r4, r5, r6, lr}
 8016aa6:	4e0e      	ldr	r6, [pc, #56]	; (8016ae0 <sbrk_aligned+0x3c>)
 8016aa8:	460c      	mov	r4, r1
 8016aaa:	6831      	ldr	r1, [r6, #0]
 8016aac:	4605      	mov	r5, r0
 8016aae:	b911      	cbnz	r1, 8016ab6 <sbrk_aligned+0x12>
 8016ab0:	f000 f902 	bl	8016cb8 <_sbrk_r>
 8016ab4:	6030      	str	r0, [r6, #0]
 8016ab6:	4621      	mov	r1, r4
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f000 f8fd 	bl	8016cb8 <_sbrk_r>
 8016abe:	1c43      	adds	r3, r0, #1
 8016ac0:	d00a      	beq.n	8016ad8 <sbrk_aligned+0x34>
 8016ac2:	1cc4      	adds	r4, r0, #3
 8016ac4:	f024 0403 	bic.w	r4, r4, #3
 8016ac8:	42a0      	cmp	r0, r4
 8016aca:	d007      	beq.n	8016adc <sbrk_aligned+0x38>
 8016acc:	1a21      	subs	r1, r4, r0
 8016ace:	4628      	mov	r0, r5
 8016ad0:	f000 f8f2 	bl	8016cb8 <_sbrk_r>
 8016ad4:	3001      	adds	r0, #1
 8016ad6:	d101      	bne.n	8016adc <sbrk_aligned+0x38>
 8016ad8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016adc:	4620      	mov	r0, r4
 8016ade:	bd70      	pop	{r4, r5, r6, pc}
 8016ae0:	24005a64 	.word	0x24005a64

08016ae4 <_malloc_r>:
 8016ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae8:	1ccd      	adds	r5, r1, #3
 8016aea:	f025 0503 	bic.w	r5, r5, #3
 8016aee:	3508      	adds	r5, #8
 8016af0:	2d0c      	cmp	r5, #12
 8016af2:	bf38      	it	cc
 8016af4:	250c      	movcc	r5, #12
 8016af6:	2d00      	cmp	r5, #0
 8016af8:	4607      	mov	r7, r0
 8016afa:	db01      	blt.n	8016b00 <_malloc_r+0x1c>
 8016afc:	42a9      	cmp	r1, r5
 8016afe:	d905      	bls.n	8016b0c <_malloc_r+0x28>
 8016b00:	230c      	movs	r3, #12
 8016b02:	603b      	str	r3, [r7, #0]
 8016b04:	2600      	movs	r6, #0
 8016b06:	4630      	mov	r0, r6
 8016b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b0c:	4e2e      	ldr	r6, [pc, #184]	; (8016bc8 <_malloc_r+0xe4>)
 8016b0e:	f000 fbc3 	bl	8017298 <__malloc_lock>
 8016b12:	6833      	ldr	r3, [r6, #0]
 8016b14:	461c      	mov	r4, r3
 8016b16:	bb34      	cbnz	r4, 8016b66 <_malloc_r+0x82>
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	f7ff ffc2 	bl	8016aa4 <sbrk_aligned>
 8016b20:	1c43      	adds	r3, r0, #1
 8016b22:	4604      	mov	r4, r0
 8016b24:	d14d      	bne.n	8016bc2 <_malloc_r+0xde>
 8016b26:	6834      	ldr	r4, [r6, #0]
 8016b28:	4626      	mov	r6, r4
 8016b2a:	2e00      	cmp	r6, #0
 8016b2c:	d140      	bne.n	8016bb0 <_malloc_r+0xcc>
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	4631      	mov	r1, r6
 8016b32:	4638      	mov	r0, r7
 8016b34:	eb04 0803 	add.w	r8, r4, r3
 8016b38:	f000 f8be 	bl	8016cb8 <_sbrk_r>
 8016b3c:	4580      	cmp	r8, r0
 8016b3e:	d13a      	bne.n	8016bb6 <_malloc_r+0xd2>
 8016b40:	6821      	ldr	r1, [r4, #0]
 8016b42:	3503      	adds	r5, #3
 8016b44:	1a6d      	subs	r5, r5, r1
 8016b46:	f025 0503 	bic.w	r5, r5, #3
 8016b4a:	3508      	adds	r5, #8
 8016b4c:	2d0c      	cmp	r5, #12
 8016b4e:	bf38      	it	cc
 8016b50:	250c      	movcc	r5, #12
 8016b52:	4629      	mov	r1, r5
 8016b54:	4638      	mov	r0, r7
 8016b56:	f7ff ffa5 	bl	8016aa4 <sbrk_aligned>
 8016b5a:	3001      	adds	r0, #1
 8016b5c:	d02b      	beq.n	8016bb6 <_malloc_r+0xd2>
 8016b5e:	6823      	ldr	r3, [r4, #0]
 8016b60:	442b      	add	r3, r5
 8016b62:	6023      	str	r3, [r4, #0]
 8016b64:	e00e      	b.n	8016b84 <_malloc_r+0xa0>
 8016b66:	6822      	ldr	r2, [r4, #0]
 8016b68:	1b52      	subs	r2, r2, r5
 8016b6a:	d41e      	bmi.n	8016baa <_malloc_r+0xc6>
 8016b6c:	2a0b      	cmp	r2, #11
 8016b6e:	d916      	bls.n	8016b9e <_malloc_r+0xba>
 8016b70:	1961      	adds	r1, r4, r5
 8016b72:	42a3      	cmp	r3, r4
 8016b74:	6025      	str	r5, [r4, #0]
 8016b76:	bf18      	it	ne
 8016b78:	6059      	strne	r1, [r3, #4]
 8016b7a:	6863      	ldr	r3, [r4, #4]
 8016b7c:	bf08      	it	eq
 8016b7e:	6031      	streq	r1, [r6, #0]
 8016b80:	5162      	str	r2, [r4, r5]
 8016b82:	604b      	str	r3, [r1, #4]
 8016b84:	4638      	mov	r0, r7
 8016b86:	f104 060b 	add.w	r6, r4, #11
 8016b8a:	f000 fb8b 	bl	80172a4 <__malloc_unlock>
 8016b8e:	f026 0607 	bic.w	r6, r6, #7
 8016b92:	1d23      	adds	r3, r4, #4
 8016b94:	1af2      	subs	r2, r6, r3
 8016b96:	d0b6      	beq.n	8016b06 <_malloc_r+0x22>
 8016b98:	1b9b      	subs	r3, r3, r6
 8016b9a:	50a3      	str	r3, [r4, r2]
 8016b9c:	e7b3      	b.n	8016b06 <_malloc_r+0x22>
 8016b9e:	6862      	ldr	r2, [r4, #4]
 8016ba0:	42a3      	cmp	r3, r4
 8016ba2:	bf0c      	ite	eq
 8016ba4:	6032      	streq	r2, [r6, #0]
 8016ba6:	605a      	strne	r2, [r3, #4]
 8016ba8:	e7ec      	b.n	8016b84 <_malloc_r+0xa0>
 8016baa:	4623      	mov	r3, r4
 8016bac:	6864      	ldr	r4, [r4, #4]
 8016bae:	e7b2      	b.n	8016b16 <_malloc_r+0x32>
 8016bb0:	4634      	mov	r4, r6
 8016bb2:	6876      	ldr	r6, [r6, #4]
 8016bb4:	e7b9      	b.n	8016b2a <_malloc_r+0x46>
 8016bb6:	230c      	movs	r3, #12
 8016bb8:	603b      	str	r3, [r7, #0]
 8016bba:	4638      	mov	r0, r7
 8016bbc:	f000 fb72 	bl	80172a4 <__malloc_unlock>
 8016bc0:	e7a1      	b.n	8016b06 <_malloc_r+0x22>
 8016bc2:	6025      	str	r5, [r4, #0]
 8016bc4:	e7de      	b.n	8016b84 <_malloc_r+0xa0>
 8016bc6:	bf00      	nop
 8016bc8:	24005a60 	.word	0x24005a60

08016bcc <_puts_r>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	460e      	mov	r6, r1
 8016bd0:	4605      	mov	r5, r0
 8016bd2:	b118      	cbz	r0, 8016bdc <_puts_r+0x10>
 8016bd4:	6983      	ldr	r3, [r0, #24]
 8016bd6:	b90b      	cbnz	r3, 8016bdc <_puts_r+0x10>
 8016bd8:	f000 fa58 	bl	801708c <__sinit>
 8016bdc:	69ab      	ldr	r3, [r5, #24]
 8016bde:	68ac      	ldr	r4, [r5, #8]
 8016be0:	b913      	cbnz	r3, 8016be8 <_puts_r+0x1c>
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 fa52 	bl	801708c <__sinit>
 8016be8:	4b2c      	ldr	r3, [pc, #176]	; (8016c9c <_puts_r+0xd0>)
 8016bea:	429c      	cmp	r4, r3
 8016bec:	d120      	bne.n	8016c30 <_puts_r+0x64>
 8016bee:	686c      	ldr	r4, [r5, #4]
 8016bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bf2:	07db      	lsls	r3, r3, #31
 8016bf4:	d405      	bmi.n	8016c02 <_puts_r+0x36>
 8016bf6:	89a3      	ldrh	r3, [r4, #12]
 8016bf8:	0598      	lsls	r0, r3, #22
 8016bfa:	d402      	bmi.n	8016c02 <_puts_r+0x36>
 8016bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bfe:	f000 fae3 	bl	80171c8 <__retarget_lock_acquire_recursive>
 8016c02:	89a3      	ldrh	r3, [r4, #12]
 8016c04:	0719      	lsls	r1, r3, #28
 8016c06:	d51d      	bpl.n	8016c44 <_puts_r+0x78>
 8016c08:	6923      	ldr	r3, [r4, #16]
 8016c0a:	b1db      	cbz	r3, 8016c44 <_puts_r+0x78>
 8016c0c:	3e01      	subs	r6, #1
 8016c0e:	68a3      	ldr	r3, [r4, #8]
 8016c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c14:	3b01      	subs	r3, #1
 8016c16:	60a3      	str	r3, [r4, #8]
 8016c18:	bb39      	cbnz	r1, 8016c6a <_puts_r+0x9e>
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	da38      	bge.n	8016c90 <_puts_r+0xc4>
 8016c1e:	4622      	mov	r2, r4
 8016c20:	210a      	movs	r1, #10
 8016c22:	4628      	mov	r0, r5
 8016c24:	f000 f858 	bl	8016cd8 <__swbuf_r>
 8016c28:	3001      	adds	r0, #1
 8016c2a:	d011      	beq.n	8016c50 <_puts_r+0x84>
 8016c2c:	250a      	movs	r5, #10
 8016c2e:	e011      	b.n	8016c54 <_puts_r+0x88>
 8016c30:	4b1b      	ldr	r3, [pc, #108]	; (8016ca0 <_puts_r+0xd4>)
 8016c32:	429c      	cmp	r4, r3
 8016c34:	d101      	bne.n	8016c3a <_puts_r+0x6e>
 8016c36:	68ac      	ldr	r4, [r5, #8]
 8016c38:	e7da      	b.n	8016bf0 <_puts_r+0x24>
 8016c3a:	4b1a      	ldr	r3, [pc, #104]	; (8016ca4 <_puts_r+0xd8>)
 8016c3c:	429c      	cmp	r4, r3
 8016c3e:	bf08      	it	eq
 8016c40:	68ec      	ldreq	r4, [r5, #12]
 8016c42:	e7d5      	b.n	8016bf0 <_puts_r+0x24>
 8016c44:	4621      	mov	r1, r4
 8016c46:	4628      	mov	r0, r5
 8016c48:	f000 f898 	bl	8016d7c <__swsetup_r>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d0dd      	beq.n	8016c0c <_puts_r+0x40>
 8016c50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c56:	07da      	lsls	r2, r3, #31
 8016c58:	d405      	bmi.n	8016c66 <_puts_r+0x9a>
 8016c5a:	89a3      	ldrh	r3, [r4, #12]
 8016c5c:	059b      	lsls	r3, r3, #22
 8016c5e:	d402      	bmi.n	8016c66 <_puts_r+0x9a>
 8016c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c62:	f000 fab2 	bl	80171ca <__retarget_lock_release_recursive>
 8016c66:	4628      	mov	r0, r5
 8016c68:	bd70      	pop	{r4, r5, r6, pc}
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	da04      	bge.n	8016c78 <_puts_r+0xac>
 8016c6e:	69a2      	ldr	r2, [r4, #24]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	dc06      	bgt.n	8016c82 <_puts_r+0xb6>
 8016c74:	290a      	cmp	r1, #10
 8016c76:	d004      	beq.n	8016c82 <_puts_r+0xb6>
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	1c5a      	adds	r2, r3, #1
 8016c7c:	6022      	str	r2, [r4, #0]
 8016c7e:	7019      	strb	r1, [r3, #0]
 8016c80:	e7c5      	b.n	8016c0e <_puts_r+0x42>
 8016c82:	4622      	mov	r2, r4
 8016c84:	4628      	mov	r0, r5
 8016c86:	f000 f827 	bl	8016cd8 <__swbuf_r>
 8016c8a:	3001      	adds	r0, #1
 8016c8c:	d1bf      	bne.n	8016c0e <_puts_r+0x42>
 8016c8e:	e7df      	b.n	8016c50 <_puts_r+0x84>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	250a      	movs	r5, #10
 8016c94:	1c5a      	adds	r2, r3, #1
 8016c96:	6022      	str	r2, [r4, #0]
 8016c98:	701d      	strb	r5, [r3, #0]
 8016c9a:	e7db      	b.n	8016c54 <_puts_r+0x88>
 8016c9c:	08017814 	.word	0x08017814
 8016ca0:	08017834 	.word	0x08017834
 8016ca4:	080177f4 	.word	0x080177f4

08016ca8 <puts>:
 8016ca8:	4b02      	ldr	r3, [pc, #8]	; (8016cb4 <puts+0xc>)
 8016caa:	4601      	mov	r1, r0
 8016cac:	6818      	ldr	r0, [r3, #0]
 8016cae:	f7ff bf8d 	b.w	8016bcc <_puts_r>
 8016cb2:	bf00      	nop
 8016cb4:	240000a4 	.word	0x240000a4

08016cb8 <_sbrk_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d06      	ldr	r5, [pc, #24]	; (8016cd4 <_sbrk_r+0x1c>)
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	602b      	str	r3, [r5, #0]
 8016cc4:	f7ec ff74 	bl	8003bb0 <_sbrk>
 8016cc8:	1c43      	adds	r3, r0, #1
 8016cca:	d102      	bne.n	8016cd2 <_sbrk_r+0x1a>
 8016ccc:	682b      	ldr	r3, [r5, #0]
 8016cce:	b103      	cbz	r3, 8016cd2 <_sbrk_r+0x1a>
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	24005a6c 	.word	0x24005a6c

08016cd8 <__swbuf_r>:
 8016cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cda:	460e      	mov	r6, r1
 8016cdc:	4614      	mov	r4, r2
 8016cde:	4605      	mov	r5, r0
 8016ce0:	b118      	cbz	r0, 8016cea <__swbuf_r+0x12>
 8016ce2:	6983      	ldr	r3, [r0, #24]
 8016ce4:	b90b      	cbnz	r3, 8016cea <__swbuf_r+0x12>
 8016ce6:	f000 f9d1 	bl	801708c <__sinit>
 8016cea:	4b21      	ldr	r3, [pc, #132]	; (8016d70 <__swbuf_r+0x98>)
 8016cec:	429c      	cmp	r4, r3
 8016cee:	d12b      	bne.n	8016d48 <__swbuf_r+0x70>
 8016cf0:	686c      	ldr	r4, [r5, #4]
 8016cf2:	69a3      	ldr	r3, [r4, #24]
 8016cf4:	60a3      	str	r3, [r4, #8]
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	071a      	lsls	r2, r3, #28
 8016cfa:	d52f      	bpl.n	8016d5c <__swbuf_r+0x84>
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	b36b      	cbz	r3, 8016d5c <__swbuf_r+0x84>
 8016d00:	6923      	ldr	r3, [r4, #16]
 8016d02:	6820      	ldr	r0, [r4, #0]
 8016d04:	1ac0      	subs	r0, r0, r3
 8016d06:	6963      	ldr	r3, [r4, #20]
 8016d08:	b2f6      	uxtb	r6, r6
 8016d0a:	4283      	cmp	r3, r0
 8016d0c:	4637      	mov	r7, r6
 8016d0e:	dc04      	bgt.n	8016d1a <__swbuf_r+0x42>
 8016d10:	4621      	mov	r1, r4
 8016d12:	4628      	mov	r0, r5
 8016d14:	f000 f926 	bl	8016f64 <_fflush_r>
 8016d18:	bb30      	cbnz	r0, 8016d68 <__swbuf_r+0x90>
 8016d1a:	68a3      	ldr	r3, [r4, #8]
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	60a3      	str	r3, [r4, #8]
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	1c5a      	adds	r2, r3, #1
 8016d24:	6022      	str	r2, [r4, #0]
 8016d26:	701e      	strb	r6, [r3, #0]
 8016d28:	6963      	ldr	r3, [r4, #20]
 8016d2a:	3001      	adds	r0, #1
 8016d2c:	4283      	cmp	r3, r0
 8016d2e:	d004      	beq.n	8016d3a <__swbuf_r+0x62>
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	07db      	lsls	r3, r3, #31
 8016d34:	d506      	bpl.n	8016d44 <__swbuf_r+0x6c>
 8016d36:	2e0a      	cmp	r6, #10
 8016d38:	d104      	bne.n	8016d44 <__swbuf_r+0x6c>
 8016d3a:	4621      	mov	r1, r4
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	f000 f911 	bl	8016f64 <_fflush_r>
 8016d42:	b988      	cbnz	r0, 8016d68 <__swbuf_r+0x90>
 8016d44:	4638      	mov	r0, r7
 8016d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d48:	4b0a      	ldr	r3, [pc, #40]	; (8016d74 <__swbuf_r+0x9c>)
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d101      	bne.n	8016d52 <__swbuf_r+0x7a>
 8016d4e:	68ac      	ldr	r4, [r5, #8]
 8016d50:	e7cf      	b.n	8016cf2 <__swbuf_r+0x1a>
 8016d52:	4b09      	ldr	r3, [pc, #36]	; (8016d78 <__swbuf_r+0xa0>)
 8016d54:	429c      	cmp	r4, r3
 8016d56:	bf08      	it	eq
 8016d58:	68ec      	ldreq	r4, [r5, #12]
 8016d5a:	e7ca      	b.n	8016cf2 <__swbuf_r+0x1a>
 8016d5c:	4621      	mov	r1, r4
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f000 f80c 	bl	8016d7c <__swsetup_r>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d0cb      	beq.n	8016d00 <__swbuf_r+0x28>
 8016d68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016d6c:	e7ea      	b.n	8016d44 <__swbuf_r+0x6c>
 8016d6e:	bf00      	nop
 8016d70:	08017814 	.word	0x08017814
 8016d74:	08017834 	.word	0x08017834
 8016d78:	080177f4 	.word	0x080177f4

08016d7c <__swsetup_r>:
 8016d7c:	4b32      	ldr	r3, [pc, #200]	; (8016e48 <__swsetup_r+0xcc>)
 8016d7e:	b570      	push	{r4, r5, r6, lr}
 8016d80:	681d      	ldr	r5, [r3, #0]
 8016d82:	4606      	mov	r6, r0
 8016d84:	460c      	mov	r4, r1
 8016d86:	b125      	cbz	r5, 8016d92 <__swsetup_r+0x16>
 8016d88:	69ab      	ldr	r3, [r5, #24]
 8016d8a:	b913      	cbnz	r3, 8016d92 <__swsetup_r+0x16>
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	f000 f97d 	bl	801708c <__sinit>
 8016d92:	4b2e      	ldr	r3, [pc, #184]	; (8016e4c <__swsetup_r+0xd0>)
 8016d94:	429c      	cmp	r4, r3
 8016d96:	d10f      	bne.n	8016db8 <__swsetup_r+0x3c>
 8016d98:	686c      	ldr	r4, [r5, #4]
 8016d9a:	89a3      	ldrh	r3, [r4, #12]
 8016d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016da0:	0719      	lsls	r1, r3, #28
 8016da2:	d42c      	bmi.n	8016dfe <__swsetup_r+0x82>
 8016da4:	06dd      	lsls	r5, r3, #27
 8016da6:	d411      	bmi.n	8016dcc <__swsetup_r+0x50>
 8016da8:	2309      	movs	r3, #9
 8016daa:	6033      	str	r3, [r6, #0]
 8016dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016db0:	81a3      	strh	r3, [r4, #12]
 8016db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db6:	e03e      	b.n	8016e36 <__swsetup_r+0xba>
 8016db8:	4b25      	ldr	r3, [pc, #148]	; (8016e50 <__swsetup_r+0xd4>)
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	d101      	bne.n	8016dc2 <__swsetup_r+0x46>
 8016dbe:	68ac      	ldr	r4, [r5, #8]
 8016dc0:	e7eb      	b.n	8016d9a <__swsetup_r+0x1e>
 8016dc2:	4b24      	ldr	r3, [pc, #144]	; (8016e54 <__swsetup_r+0xd8>)
 8016dc4:	429c      	cmp	r4, r3
 8016dc6:	bf08      	it	eq
 8016dc8:	68ec      	ldreq	r4, [r5, #12]
 8016dca:	e7e6      	b.n	8016d9a <__swsetup_r+0x1e>
 8016dcc:	0758      	lsls	r0, r3, #29
 8016dce:	d512      	bpl.n	8016df6 <__swsetup_r+0x7a>
 8016dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dd2:	b141      	cbz	r1, 8016de6 <__swsetup_r+0x6a>
 8016dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dd8:	4299      	cmp	r1, r3
 8016dda:	d002      	beq.n	8016de2 <__swsetup_r+0x66>
 8016ddc:	4630      	mov	r0, r6
 8016dde:	f7ff fe15 	bl	8016a0c <_free_r>
 8016de2:	2300      	movs	r3, #0
 8016de4:	6363      	str	r3, [r4, #52]	; 0x34
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016dec:	81a3      	strh	r3, [r4, #12]
 8016dee:	2300      	movs	r3, #0
 8016df0:	6063      	str	r3, [r4, #4]
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f043 0308 	orr.w	r3, r3, #8
 8016dfc:	81a3      	strh	r3, [r4, #12]
 8016dfe:	6923      	ldr	r3, [r4, #16]
 8016e00:	b94b      	cbnz	r3, 8016e16 <__swsetup_r+0x9a>
 8016e02:	89a3      	ldrh	r3, [r4, #12]
 8016e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e0c:	d003      	beq.n	8016e16 <__swsetup_r+0x9a>
 8016e0e:	4621      	mov	r1, r4
 8016e10:	4630      	mov	r0, r6
 8016e12:	f000 fa01 	bl	8017218 <__smakebuf_r>
 8016e16:	89a0      	ldrh	r0, [r4, #12]
 8016e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e1c:	f010 0301 	ands.w	r3, r0, #1
 8016e20:	d00a      	beq.n	8016e38 <__swsetup_r+0xbc>
 8016e22:	2300      	movs	r3, #0
 8016e24:	60a3      	str	r3, [r4, #8]
 8016e26:	6963      	ldr	r3, [r4, #20]
 8016e28:	425b      	negs	r3, r3
 8016e2a:	61a3      	str	r3, [r4, #24]
 8016e2c:	6923      	ldr	r3, [r4, #16]
 8016e2e:	b943      	cbnz	r3, 8016e42 <__swsetup_r+0xc6>
 8016e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e34:	d1ba      	bne.n	8016dac <__swsetup_r+0x30>
 8016e36:	bd70      	pop	{r4, r5, r6, pc}
 8016e38:	0781      	lsls	r1, r0, #30
 8016e3a:	bf58      	it	pl
 8016e3c:	6963      	ldrpl	r3, [r4, #20]
 8016e3e:	60a3      	str	r3, [r4, #8]
 8016e40:	e7f4      	b.n	8016e2c <__swsetup_r+0xb0>
 8016e42:	2000      	movs	r0, #0
 8016e44:	e7f7      	b.n	8016e36 <__swsetup_r+0xba>
 8016e46:	bf00      	nop
 8016e48:	240000a4 	.word	0x240000a4
 8016e4c:	08017814 	.word	0x08017814
 8016e50:	08017834 	.word	0x08017834
 8016e54:	080177f4 	.word	0x080177f4

08016e58 <__sflush_r>:
 8016e58:	898a      	ldrh	r2, [r1, #12]
 8016e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5e:	4605      	mov	r5, r0
 8016e60:	0710      	lsls	r0, r2, #28
 8016e62:	460c      	mov	r4, r1
 8016e64:	d458      	bmi.n	8016f18 <__sflush_r+0xc0>
 8016e66:	684b      	ldr	r3, [r1, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	dc05      	bgt.n	8016e78 <__sflush_r+0x20>
 8016e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	dc02      	bgt.n	8016e78 <__sflush_r+0x20>
 8016e72:	2000      	movs	r0, #0
 8016e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e7a:	2e00      	cmp	r6, #0
 8016e7c:	d0f9      	beq.n	8016e72 <__sflush_r+0x1a>
 8016e7e:	2300      	movs	r3, #0
 8016e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e84:	682f      	ldr	r7, [r5, #0]
 8016e86:	602b      	str	r3, [r5, #0]
 8016e88:	d032      	beq.n	8016ef0 <__sflush_r+0x98>
 8016e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e8c:	89a3      	ldrh	r3, [r4, #12]
 8016e8e:	075a      	lsls	r2, r3, #29
 8016e90:	d505      	bpl.n	8016e9e <__sflush_r+0x46>
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	1ac0      	subs	r0, r0, r3
 8016e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e98:	b10b      	cbz	r3, 8016e9e <__sflush_r+0x46>
 8016e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e9c:	1ac0      	subs	r0, r0, r3
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ea4:	6a21      	ldr	r1, [r4, #32]
 8016ea6:	4628      	mov	r0, r5
 8016ea8:	47b0      	blx	r6
 8016eaa:	1c43      	adds	r3, r0, #1
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	d106      	bne.n	8016ebe <__sflush_r+0x66>
 8016eb0:	6829      	ldr	r1, [r5, #0]
 8016eb2:	291d      	cmp	r1, #29
 8016eb4:	d82c      	bhi.n	8016f10 <__sflush_r+0xb8>
 8016eb6:	4a2a      	ldr	r2, [pc, #168]	; (8016f60 <__sflush_r+0x108>)
 8016eb8:	40ca      	lsrs	r2, r1
 8016eba:	07d6      	lsls	r6, r2, #31
 8016ebc:	d528      	bpl.n	8016f10 <__sflush_r+0xb8>
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	6062      	str	r2, [r4, #4]
 8016ec2:	04d9      	lsls	r1, r3, #19
 8016ec4:	6922      	ldr	r2, [r4, #16]
 8016ec6:	6022      	str	r2, [r4, #0]
 8016ec8:	d504      	bpl.n	8016ed4 <__sflush_r+0x7c>
 8016eca:	1c42      	adds	r2, r0, #1
 8016ecc:	d101      	bne.n	8016ed2 <__sflush_r+0x7a>
 8016ece:	682b      	ldr	r3, [r5, #0]
 8016ed0:	b903      	cbnz	r3, 8016ed4 <__sflush_r+0x7c>
 8016ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8016ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ed6:	602f      	str	r7, [r5, #0]
 8016ed8:	2900      	cmp	r1, #0
 8016eda:	d0ca      	beq.n	8016e72 <__sflush_r+0x1a>
 8016edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ee0:	4299      	cmp	r1, r3
 8016ee2:	d002      	beq.n	8016eea <__sflush_r+0x92>
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	f7ff fd91 	bl	8016a0c <_free_r>
 8016eea:	2000      	movs	r0, #0
 8016eec:	6360      	str	r0, [r4, #52]	; 0x34
 8016eee:	e7c1      	b.n	8016e74 <__sflush_r+0x1c>
 8016ef0:	6a21      	ldr	r1, [r4, #32]
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	47b0      	blx	r6
 8016ef8:	1c41      	adds	r1, r0, #1
 8016efa:	d1c7      	bne.n	8016e8c <__sflush_r+0x34>
 8016efc:	682b      	ldr	r3, [r5, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d0c4      	beq.n	8016e8c <__sflush_r+0x34>
 8016f02:	2b1d      	cmp	r3, #29
 8016f04:	d001      	beq.n	8016f0a <__sflush_r+0xb2>
 8016f06:	2b16      	cmp	r3, #22
 8016f08:	d101      	bne.n	8016f0e <__sflush_r+0xb6>
 8016f0a:	602f      	str	r7, [r5, #0]
 8016f0c:	e7b1      	b.n	8016e72 <__sflush_r+0x1a>
 8016f0e:	89a3      	ldrh	r3, [r4, #12]
 8016f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f14:	81a3      	strh	r3, [r4, #12]
 8016f16:	e7ad      	b.n	8016e74 <__sflush_r+0x1c>
 8016f18:	690f      	ldr	r7, [r1, #16]
 8016f1a:	2f00      	cmp	r7, #0
 8016f1c:	d0a9      	beq.n	8016e72 <__sflush_r+0x1a>
 8016f1e:	0793      	lsls	r3, r2, #30
 8016f20:	680e      	ldr	r6, [r1, #0]
 8016f22:	bf08      	it	eq
 8016f24:	694b      	ldreq	r3, [r1, #20]
 8016f26:	600f      	str	r7, [r1, #0]
 8016f28:	bf18      	it	ne
 8016f2a:	2300      	movne	r3, #0
 8016f2c:	eba6 0807 	sub.w	r8, r6, r7
 8016f30:	608b      	str	r3, [r1, #8]
 8016f32:	f1b8 0f00 	cmp.w	r8, #0
 8016f36:	dd9c      	ble.n	8016e72 <__sflush_r+0x1a>
 8016f38:	6a21      	ldr	r1, [r4, #32]
 8016f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f3c:	4643      	mov	r3, r8
 8016f3e:	463a      	mov	r2, r7
 8016f40:	4628      	mov	r0, r5
 8016f42:	47b0      	blx	r6
 8016f44:	2800      	cmp	r0, #0
 8016f46:	dc06      	bgt.n	8016f56 <__sflush_r+0xfe>
 8016f48:	89a3      	ldrh	r3, [r4, #12]
 8016f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f4e:	81a3      	strh	r3, [r4, #12]
 8016f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f54:	e78e      	b.n	8016e74 <__sflush_r+0x1c>
 8016f56:	4407      	add	r7, r0
 8016f58:	eba8 0800 	sub.w	r8, r8, r0
 8016f5c:	e7e9      	b.n	8016f32 <__sflush_r+0xda>
 8016f5e:	bf00      	nop
 8016f60:	20400001 	.word	0x20400001

08016f64 <_fflush_r>:
 8016f64:	b538      	push	{r3, r4, r5, lr}
 8016f66:	690b      	ldr	r3, [r1, #16]
 8016f68:	4605      	mov	r5, r0
 8016f6a:	460c      	mov	r4, r1
 8016f6c:	b913      	cbnz	r3, 8016f74 <_fflush_r+0x10>
 8016f6e:	2500      	movs	r5, #0
 8016f70:	4628      	mov	r0, r5
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	b118      	cbz	r0, 8016f7e <_fflush_r+0x1a>
 8016f76:	6983      	ldr	r3, [r0, #24]
 8016f78:	b90b      	cbnz	r3, 8016f7e <_fflush_r+0x1a>
 8016f7a:	f000 f887 	bl	801708c <__sinit>
 8016f7e:	4b14      	ldr	r3, [pc, #80]	; (8016fd0 <_fflush_r+0x6c>)
 8016f80:	429c      	cmp	r4, r3
 8016f82:	d11b      	bne.n	8016fbc <_fflush_r+0x58>
 8016f84:	686c      	ldr	r4, [r5, #4]
 8016f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d0ef      	beq.n	8016f6e <_fflush_r+0xa>
 8016f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f90:	07d0      	lsls	r0, r2, #31
 8016f92:	d404      	bmi.n	8016f9e <_fflush_r+0x3a>
 8016f94:	0599      	lsls	r1, r3, #22
 8016f96:	d402      	bmi.n	8016f9e <_fflush_r+0x3a>
 8016f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f9a:	f000 f915 	bl	80171c8 <__retarget_lock_acquire_recursive>
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f7ff ff59 	bl	8016e58 <__sflush_r>
 8016fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fa8:	07da      	lsls	r2, r3, #31
 8016faa:	4605      	mov	r5, r0
 8016fac:	d4e0      	bmi.n	8016f70 <_fflush_r+0xc>
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	059b      	lsls	r3, r3, #22
 8016fb2:	d4dd      	bmi.n	8016f70 <_fflush_r+0xc>
 8016fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fb6:	f000 f908 	bl	80171ca <__retarget_lock_release_recursive>
 8016fba:	e7d9      	b.n	8016f70 <_fflush_r+0xc>
 8016fbc:	4b05      	ldr	r3, [pc, #20]	; (8016fd4 <_fflush_r+0x70>)
 8016fbe:	429c      	cmp	r4, r3
 8016fc0:	d101      	bne.n	8016fc6 <_fflush_r+0x62>
 8016fc2:	68ac      	ldr	r4, [r5, #8]
 8016fc4:	e7df      	b.n	8016f86 <_fflush_r+0x22>
 8016fc6:	4b04      	ldr	r3, [pc, #16]	; (8016fd8 <_fflush_r+0x74>)
 8016fc8:	429c      	cmp	r4, r3
 8016fca:	bf08      	it	eq
 8016fcc:	68ec      	ldreq	r4, [r5, #12]
 8016fce:	e7da      	b.n	8016f86 <_fflush_r+0x22>
 8016fd0:	08017814 	.word	0x08017814
 8016fd4:	08017834 	.word	0x08017834
 8016fd8:	080177f4 	.word	0x080177f4

08016fdc <std>:
 8016fdc:	2300      	movs	r3, #0
 8016fde:	b510      	push	{r4, lr}
 8016fe0:	4604      	mov	r4, r0
 8016fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8016fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fea:	6083      	str	r3, [r0, #8]
 8016fec:	8181      	strh	r1, [r0, #12]
 8016fee:	6643      	str	r3, [r0, #100]	; 0x64
 8016ff0:	81c2      	strh	r2, [r0, #14]
 8016ff2:	6183      	str	r3, [r0, #24]
 8016ff4:	4619      	mov	r1, r3
 8016ff6:	2208      	movs	r2, #8
 8016ff8:	305c      	adds	r0, #92	; 0x5c
 8016ffa:	f7ff fcff 	bl	80169fc <memset>
 8016ffe:	4b05      	ldr	r3, [pc, #20]	; (8017014 <std+0x38>)
 8017000:	6263      	str	r3, [r4, #36]	; 0x24
 8017002:	4b05      	ldr	r3, [pc, #20]	; (8017018 <std+0x3c>)
 8017004:	62a3      	str	r3, [r4, #40]	; 0x28
 8017006:	4b05      	ldr	r3, [pc, #20]	; (801701c <std+0x40>)
 8017008:	62e3      	str	r3, [r4, #44]	; 0x2c
 801700a:	4b05      	ldr	r3, [pc, #20]	; (8017020 <std+0x44>)
 801700c:	6224      	str	r4, [r4, #32]
 801700e:	6323      	str	r3, [r4, #48]	; 0x30
 8017010:	bd10      	pop	{r4, pc}
 8017012:	bf00      	nop
 8017014:	080172b1 	.word	0x080172b1
 8017018:	080172d3 	.word	0x080172d3
 801701c:	0801730b 	.word	0x0801730b
 8017020:	0801732f 	.word	0x0801732f

08017024 <_cleanup_r>:
 8017024:	4901      	ldr	r1, [pc, #4]	; (801702c <_cleanup_r+0x8>)
 8017026:	f000 b8af 	b.w	8017188 <_fwalk_reent>
 801702a:	bf00      	nop
 801702c:	08016f65 	.word	0x08016f65

08017030 <__sfmoreglue>:
 8017030:	b570      	push	{r4, r5, r6, lr}
 8017032:	2268      	movs	r2, #104	; 0x68
 8017034:	1e4d      	subs	r5, r1, #1
 8017036:	4355      	muls	r5, r2
 8017038:	460e      	mov	r6, r1
 801703a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801703e:	f7ff fd51 	bl	8016ae4 <_malloc_r>
 8017042:	4604      	mov	r4, r0
 8017044:	b140      	cbz	r0, 8017058 <__sfmoreglue+0x28>
 8017046:	2100      	movs	r1, #0
 8017048:	e9c0 1600 	strd	r1, r6, [r0]
 801704c:	300c      	adds	r0, #12
 801704e:	60a0      	str	r0, [r4, #8]
 8017050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017054:	f7ff fcd2 	bl	80169fc <memset>
 8017058:	4620      	mov	r0, r4
 801705a:	bd70      	pop	{r4, r5, r6, pc}

0801705c <__sfp_lock_acquire>:
 801705c:	4801      	ldr	r0, [pc, #4]	; (8017064 <__sfp_lock_acquire+0x8>)
 801705e:	f000 b8b3 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 8017062:	bf00      	nop
 8017064:	24005a69 	.word	0x24005a69

08017068 <__sfp_lock_release>:
 8017068:	4801      	ldr	r0, [pc, #4]	; (8017070 <__sfp_lock_release+0x8>)
 801706a:	f000 b8ae 	b.w	80171ca <__retarget_lock_release_recursive>
 801706e:	bf00      	nop
 8017070:	24005a69 	.word	0x24005a69

08017074 <__sinit_lock_acquire>:
 8017074:	4801      	ldr	r0, [pc, #4]	; (801707c <__sinit_lock_acquire+0x8>)
 8017076:	f000 b8a7 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 801707a:	bf00      	nop
 801707c:	24005a6a 	.word	0x24005a6a

08017080 <__sinit_lock_release>:
 8017080:	4801      	ldr	r0, [pc, #4]	; (8017088 <__sinit_lock_release+0x8>)
 8017082:	f000 b8a2 	b.w	80171ca <__retarget_lock_release_recursive>
 8017086:	bf00      	nop
 8017088:	24005a6a 	.word	0x24005a6a

0801708c <__sinit>:
 801708c:	b510      	push	{r4, lr}
 801708e:	4604      	mov	r4, r0
 8017090:	f7ff fff0 	bl	8017074 <__sinit_lock_acquire>
 8017094:	69a3      	ldr	r3, [r4, #24]
 8017096:	b11b      	cbz	r3, 80170a0 <__sinit+0x14>
 8017098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709c:	f7ff bff0 	b.w	8017080 <__sinit_lock_release>
 80170a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170a4:	6523      	str	r3, [r4, #80]	; 0x50
 80170a6:	4b13      	ldr	r3, [pc, #76]	; (80170f4 <__sinit+0x68>)
 80170a8:	4a13      	ldr	r2, [pc, #76]	; (80170f8 <__sinit+0x6c>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80170ae:	42a3      	cmp	r3, r4
 80170b0:	bf04      	itt	eq
 80170b2:	2301      	moveq	r3, #1
 80170b4:	61a3      	streq	r3, [r4, #24]
 80170b6:	4620      	mov	r0, r4
 80170b8:	f000 f820 	bl	80170fc <__sfp>
 80170bc:	6060      	str	r0, [r4, #4]
 80170be:	4620      	mov	r0, r4
 80170c0:	f000 f81c 	bl	80170fc <__sfp>
 80170c4:	60a0      	str	r0, [r4, #8]
 80170c6:	4620      	mov	r0, r4
 80170c8:	f000 f818 	bl	80170fc <__sfp>
 80170cc:	2200      	movs	r2, #0
 80170ce:	60e0      	str	r0, [r4, #12]
 80170d0:	2104      	movs	r1, #4
 80170d2:	6860      	ldr	r0, [r4, #4]
 80170d4:	f7ff ff82 	bl	8016fdc <std>
 80170d8:	68a0      	ldr	r0, [r4, #8]
 80170da:	2201      	movs	r2, #1
 80170dc:	2109      	movs	r1, #9
 80170de:	f7ff ff7d 	bl	8016fdc <std>
 80170e2:	68e0      	ldr	r0, [r4, #12]
 80170e4:	2202      	movs	r2, #2
 80170e6:	2112      	movs	r1, #18
 80170e8:	f7ff ff78 	bl	8016fdc <std>
 80170ec:	2301      	movs	r3, #1
 80170ee:	61a3      	str	r3, [r4, #24]
 80170f0:	e7d2      	b.n	8017098 <__sinit+0xc>
 80170f2:	bf00      	nop
 80170f4:	080177f0 	.word	0x080177f0
 80170f8:	08017025 	.word	0x08017025

080170fc <__sfp>:
 80170fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170fe:	4607      	mov	r7, r0
 8017100:	f7ff ffac 	bl	801705c <__sfp_lock_acquire>
 8017104:	4b1e      	ldr	r3, [pc, #120]	; (8017180 <__sfp+0x84>)
 8017106:	681e      	ldr	r6, [r3, #0]
 8017108:	69b3      	ldr	r3, [r6, #24]
 801710a:	b913      	cbnz	r3, 8017112 <__sfp+0x16>
 801710c:	4630      	mov	r0, r6
 801710e:	f7ff ffbd 	bl	801708c <__sinit>
 8017112:	3648      	adds	r6, #72	; 0x48
 8017114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017118:	3b01      	subs	r3, #1
 801711a:	d503      	bpl.n	8017124 <__sfp+0x28>
 801711c:	6833      	ldr	r3, [r6, #0]
 801711e:	b30b      	cbz	r3, 8017164 <__sfp+0x68>
 8017120:	6836      	ldr	r6, [r6, #0]
 8017122:	e7f7      	b.n	8017114 <__sfp+0x18>
 8017124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017128:	b9d5      	cbnz	r5, 8017160 <__sfp+0x64>
 801712a:	4b16      	ldr	r3, [pc, #88]	; (8017184 <__sfp+0x88>)
 801712c:	60e3      	str	r3, [r4, #12]
 801712e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017132:	6665      	str	r5, [r4, #100]	; 0x64
 8017134:	f000 f847 	bl	80171c6 <__retarget_lock_init_recursive>
 8017138:	f7ff ff96 	bl	8017068 <__sfp_lock_release>
 801713c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017144:	6025      	str	r5, [r4, #0]
 8017146:	61a5      	str	r5, [r4, #24]
 8017148:	2208      	movs	r2, #8
 801714a:	4629      	mov	r1, r5
 801714c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017150:	f7ff fc54 	bl	80169fc <memset>
 8017154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801715c:	4620      	mov	r0, r4
 801715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017160:	3468      	adds	r4, #104	; 0x68
 8017162:	e7d9      	b.n	8017118 <__sfp+0x1c>
 8017164:	2104      	movs	r1, #4
 8017166:	4638      	mov	r0, r7
 8017168:	f7ff ff62 	bl	8017030 <__sfmoreglue>
 801716c:	4604      	mov	r4, r0
 801716e:	6030      	str	r0, [r6, #0]
 8017170:	2800      	cmp	r0, #0
 8017172:	d1d5      	bne.n	8017120 <__sfp+0x24>
 8017174:	f7ff ff78 	bl	8017068 <__sfp_lock_release>
 8017178:	230c      	movs	r3, #12
 801717a:	603b      	str	r3, [r7, #0]
 801717c:	e7ee      	b.n	801715c <__sfp+0x60>
 801717e:	bf00      	nop
 8017180:	080177f0 	.word	0x080177f0
 8017184:	ffff0001 	.word	0xffff0001

08017188 <_fwalk_reent>:
 8017188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801718c:	4606      	mov	r6, r0
 801718e:	4688      	mov	r8, r1
 8017190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017194:	2700      	movs	r7, #0
 8017196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801719a:	f1b9 0901 	subs.w	r9, r9, #1
 801719e:	d505      	bpl.n	80171ac <_fwalk_reent+0x24>
 80171a0:	6824      	ldr	r4, [r4, #0]
 80171a2:	2c00      	cmp	r4, #0
 80171a4:	d1f7      	bne.n	8017196 <_fwalk_reent+0xe>
 80171a6:	4638      	mov	r0, r7
 80171a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171ac:	89ab      	ldrh	r3, [r5, #12]
 80171ae:	2b01      	cmp	r3, #1
 80171b0:	d907      	bls.n	80171c2 <_fwalk_reent+0x3a>
 80171b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171b6:	3301      	adds	r3, #1
 80171b8:	d003      	beq.n	80171c2 <_fwalk_reent+0x3a>
 80171ba:	4629      	mov	r1, r5
 80171bc:	4630      	mov	r0, r6
 80171be:	47c0      	blx	r8
 80171c0:	4307      	orrs	r7, r0
 80171c2:	3568      	adds	r5, #104	; 0x68
 80171c4:	e7e9      	b.n	801719a <_fwalk_reent+0x12>

080171c6 <__retarget_lock_init_recursive>:
 80171c6:	4770      	bx	lr

080171c8 <__retarget_lock_acquire_recursive>:
 80171c8:	4770      	bx	lr

080171ca <__retarget_lock_release_recursive>:
 80171ca:	4770      	bx	lr

080171cc <__swhatbuf_r>:
 80171cc:	b570      	push	{r4, r5, r6, lr}
 80171ce:	460e      	mov	r6, r1
 80171d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171d4:	2900      	cmp	r1, #0
 80171d6:	b096      	sub	sp, #88	; 0x58
 80171d8:	4614      	mov	r4, r2
 80171da:	461d      	mov	r5, r3
 80171dc:	da08      	bge.n	80171f0 <__swhatbuf_r+0x24>
 80171de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171e2:	2200      	movs	r2, #0
 80171e4:	602a      	str	r2, [r5, #0]
 80171e6:	061a      	lsls	r2, r3, #24
 80171e8:	d410      	bmi.n	801720c <__swhatbuf_r+0x40>
 80171ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171ee:	e00e      	b.n	801720e <__swhatbuf_r+0x42>
 80171f0:	466a      	mov	r2, sp
 80171f2:	f000 f8c3 	bl	801737c <_fstat_r>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	dbf1      	blt.n	80171de <__swhatbuf_r+0x12>
 80171fa:	9a01      	ldr	r2, [sp, #4]
 80171fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017204:	425a      	negs	r2, r3
 8017206:	415a      	adcs	r2, r3
 8017208:	602a      	str	r2, [r5, #0]
 801720a:	e7ee      	b.n	80171ea <__swhatbuf_r+0x1e>
 801720c:	2340      	movs	r3, #64	; 0x40
 801720e:	2000      	movs	r0, #0
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	b016      	add	sp, #88	; 0x58
 8017214:	bd70      	pop	{r4, r5, r6, pc}
	...

08017218 <__smakebuf_r>:
 8017218:	898b      	ldrh	r3, [r1, #12]
 801721a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801721c:	079d      	lsls	r5, r3, #30
 801721e:	4606      	mov	r6, r0
 8017220:	460c      	mov	r4, r1
 8017222:	d507      	bpl.n	8017234 <__smakebuf_r+0x1c>
 8017224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017228:	6023      	str	r3, [r4, #0]
 801722a:	6123      	str	r3, [r4, #16]
 801722c:	2301      	movs	r3, #1
 801722e:	6163      	str	r3, [r4, #20]
 8017230:	b002      	add	sp, #8
 8017232:	bd70      	pop	{r4, r5, r6, pc}
 8017234:	ab01      	add	r3, sp, #4
 8017236:	466a      	mov	r2, sp
 8017238:	f7ff ffc8 	bl	80171cc <__swhatbuf_r>
 801723c:	9900      	ldr	r1, [sp, #0]
 801723e:	4605      	mov	r5, r0
 8017240:	4630      	mov	r0, r6
 8017242:	f7ff fc4f 	bl	8016ae4 <_malloc_r>
 8017246:	b948      	cbnz	r0, 801725c <__smakebuf_r+0x44>
 8017248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801724c:	059a      	lsls	r2, r3, #22
 801724e:	d4ef      	bmi.n	8017230 <__smakebuf_r+0x18>
 8017250:	f023 0303 	bic.w	r3, r3, #3
 8017254:	f043 0302 	orr.w	r3, r3, #2
 8017258:	81a3      	strh	r3, [r4, #12]
 801725a:	e7e3      	b.n	8017224 <__smakebuf_r+0xc>
 801725c:	4b0d      	ldr	r3, [pc, #52]	; (8017294 <__smakebuf_r+0x7c>)
 801725e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017260:	89a3      	ldrh	r3, [r4, #12]
 8017262:	6020      	str	r0, [r4, #0]
 8017264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017268:	81a3      	strh	r3, [r4, #12]
 801726a:	9b00      	ldr	r3, [sp, #0]
 801726c:	6163      	str	r3, [r4, #20]
 801726e:	9b01      	ldr	r3, [sp, #4]
 8017270:	6120      	str	r0, [r4, #16]
 8017272:	b15b      	cbz	r3, 801728c <__smakebuf_r+0x74>
 8017274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017278:	4630      	mov	r0, r6
 801727a:	f000 f891 	bl	80173a0 <_isatty_r>
 801727e:	b128      	cbz	r0, 801728c <__smakebuf_r+0x74>
 8017280:	89a3      	ldrh	r3, [r4, #12]
 8017282:	f023 0303 	bic.w	r3, r3, #3
 8017286:	f043 0301 	orr.w	r3, r3, #1
 801728a:	81a3      	strh	r3, [r4, #12]
 801728c:	89a0      	ldrh	r0, [r4, #12]
 801728e:	4305      	orrs	r5, r0
 8017290:	81a5      	strh	r5, [r4, #12]
 8017292:	e7cd      	b.n	8017230 <__smakebuf_r+0x18>
 8017294:	08017025 	.word	0x08017025

08017298 <__malloc_lock>:
 8017298:	4801      	ldr	r0, [pc, #4]	; (80172a0 <__malloc_lock+0x8>)
 801729a:	f7ff bf95 	b.w	80171c8 <__retarget_lock_acquire_recursive>
 801729e:	bf00      	nop
 80172a0:	24005a68 	.word	0x24005a68

080172a4 <__malloc_unlock>:
 80172a4:	4801      	ldr	r0, [pc, #4]	; (80172ac <__malloc_unlock+0x8>)
 80172a6:	f7ff bf90 	b.w	80171ca <__retarget_lock_release_recursive>
 80172aa:	bf00      	nop
 80172ac:	24005a68 	.word	0x24005a68

080172b0 <__sread>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	460c      	mov	r4, r1
 80172b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b8:	f000 f894 	bl	80173e4 <_read_r>
 80172bc:	2800      	cmp	r0, #0
 80172be:	bfab      	itete	ge
 80172c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172c2:	89a3      	ldrhlt	r3, [r4, #12]
 80172c4:	181b      	addge	r3, r3, r0
 80172c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172ca:	bfac      	ite	ge
 80172cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80172ce:	81a3      	strhlt	r3, [r4, #12]
 80172d0:	bd10      	pop	{r4, pc}

080172d2 <__swrite>:
 80172d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d6:	461f      	mov	r7, r3
 80172d8:	898b      	ldrh	r3, [r1, #12]
 80172da:	05db      	lsls	r3, r3, #23
 80172dc:	4605      	mov	r5, r0
 80172de:	460c      	mov	r4, r1
 80172e0:	4616      	mov	r6, r2
 80172e2:	d505      	bpl.n	80172f0 <__swrite+0x1e>
 80172e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172e8:	2302      	movs	r3, #2
 80172ea:	2200      	movs	r2, #0
 80172ec:	f000 f868 	bl	80173c0 <_lseek_r>
 80172f0:	89a3      	ldrh	r3, [r4, #12]
 80172f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172fa:	81a3      	strh	r3, [r4, #12]
 80172fc:	4632      	mov	r2, r6
 80172fe:	463b      	mov	r3, r7
 8017300:	4628      	mov	r0, r5
 8017302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017306:	f000 b817 	b.w	8017338 <_write_r>

0801730a <__sseek>:
 801730a:	b510      	push	{r4, lr}
 801730c:	460c      	mov	r4, r1
 801730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017312:	f000 f855 	bl	80173c0 <_lseek_r>
 8017316:	1c43      	adds	r3, r0, #1
 8017318:	89a3      	ldrh	r3, [r4, #12]
 801731a:	bf15      	itete	ne
 801731c:	6560      	strne	r0, [r4, #84]	; 0x54
 801731e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017326:	81a3      	strheq	r3, [r4, #12]
 8017328:	bf18      	it	ne
 801732a:	81a3      	strhne	r3, [r4, #12]
 801732c:	bd10      	pop	{r4, pc}

0801732e <__sclose>:
 801732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017332:	f000 b813 	b.w	801735c <_close_r>
	...

08017338 <_write_r>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	4d07      	ldr	r5, [pc, #28]	; (8017358 <_write_r+0x20>)
 801733c:	4604      	mov	r4, r0
 801733e:	4608      	mov	r0, r1
 8017340:	4611      	mov	r1, r2
 8017342:	2200      	movs	r2, #0
 8017344:	602a      	str	r2, [r5, #0]
 8017346:	461a      	mov	r2, r3
 8017348:	f7ec fbe1 	bl	8003b0e <_write>
 801734c:	1c43      	adds	r3, r0, #1
 801734e:	d102      	bne.n	8017356 <_write_r+0x1e>
 8017350:	682b      	ldr	r3, [r5, #0]
 8017352:	b103      	cbz	r3, 8017356 <_write_r+0x1e>
 8017354:	6023      	str	r3, [r4, #0]
 8017356:	bd38      	pop	{r3, r4, r5, pc}
 8017358:	24005a6c 	.word	0x24005a6c

0801735c <_close_r>:
 801735c:	b538      	push	{r3, r4, r5, lr}
 801735e:	4d06      	ldr	r5, [pc, #24]	; (8017378 <_close_r+0x1c>)
 8017360:	2300      	movs	r3, #0
 8017362:	4604      	mov	r4, r0
 8017364:	4608      	mov	r0, r1
 8017366:	602b      	str	r3, [r5, #0]
 8017368:	f7ec fbed 	bl	8003b46 <_close>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <_close_r+0x1a>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	b103      	cbz	r3, 8017376 <_close_r+0x1a>
 8017374:	6023      	str	r3, [r4, #0]
 8017376:	bd38      	pop	{r3, r4, r5, pc}
 8017378:	24005a6c 	.word	0x24005a6c

0801737c <_fstat_r>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4d07      	ldr	r5, [pc, #28]	; (801739c <_fstat_r+0x20>)
 8017380:	2300      	movs	r3, #0
 8017382:	4604      	mov	r4, r0
 8017384:	4608      	mov	r0, r1
 8017386:	4611      	mov	r1, r2
 8017388:	602b      	str	r3, [r5, #0]
 801738a:	f7ec fbe8 	bl	8003b5e <_fstat>
 801738e:	1c43      	adds	r3, r0, #1
 8017390:	d102      	bne.n	8017398 <_fstat_r+0x1c>
 8017392:	682b      	ldr	r3, [r5, #0]
 8017394:	b103      	cbz	r3, 8017398 <_fstat_r+0x1c>
 8017396:	6023      	str	r3, [r4, #0]
 8017398:	bd38      	pop	{r3, r4, r5, pc}
 801739a:	bf00      	nop
 801739c:	24005a6c 	.word	0x24005a6c

080173a0 <_isatty_r>:
 80173a0:	b538      	push	{r3, r4, r5, lr}
 80173a2:	4d06      	ldr	r5, [pc, #24]	; (80173bc <_isatty_r+0x1c>)
 80173a4:	2300      	movs	r3, #0
 80173a6:	4604      	mov	r4, r0
 80173a8:	4608      	mov	r0, r1
 80173aa:	602b      	str	r3, [r5, #0]
 80173ac:	f7ec fbe7 	bl	8003b7e <_isatty>
 80173b0:	1c43      	adds	r3, r0, #1
 80173b2:	d102      	bne.n	80173ba <_isatty_r+0x1a>
 80173b4:	682b      	ldr	r3, [r5, #0]
 80173b6:	b103      	cbz	r3, 80173ba <_isatty_r+0x1a>
 80173b8:	6023      	str	r3, [r4, #0]
 80173ba:	bd38      	pop	{r3, r4, r5, pc}
 80173bc:	24005a6c 	.word	0x24005a6c

080173c0 <_lseek_r>:
 80173c0:	b538      	push	{r3, r4, r5, lr}
 80173c2:	4d07      	ldr	r5, [pc, #28]	; (80173e0 <_lseek_r+0x20>)
 80173c4:	4604      	mov	r4, r0
 80173c6:	4608      	mov	r0, r1
 80173c8:	4611      	mov	r1, r2
 80173ca:	2200      	movs	r2, #0
 80173cc:	602a      	str	r2, [r5, #0]
 80173ce:	461a      	mov	r2, r3
 80173d0:	f7ec fbe0 	bl	8003b94 <_lseek>
 80173d4:	1c43      	adds	r3, r0, #1
 80173d6:	d102      	bne.n	80173de <_lseek_r+0x1e>
 80173d8:	682b      	ldr	r3, [r5, #0]
 80173da:	b103      	cbz	r3, 80173de <_lseek_r+0x1e>
 80173dc:	6023      	str	r3, [r4, #0]
 80173de:	bd38      	pop	{r3, r4, r5, pc}
 80173e0:	24005a6c 	.word	0x24005a6c

080173e4 <_read_r>:
 80173e4:	b538      	push	{r3, r4, r5, lr}
 80173e6:	4d07      	ldr	r5, [pc, #28]	; (8017404 <_read_r+0x20>)
 80173e8:	4604      	mov	r4, r0
 80173ea:	4608      	mov	r0, r1
 80173ec:	4611      	mov	r1, r2
 80173ee:	2200      	movs	r2, #0
 80173f0:	602a      	str	r2, [r5, #0]
 80173f2:	461a      	mov	r2, r3
 80173f4:	f7ec fb6e 	bl	8003ad4 <_read>
 80173f8:	1c43      	adds	r3, r0, #1
 80173fa:	d102      	bne.n	8017402 <_read_r+0x1e>
 80173fc:	682b      	ldr	r3, [r5, #0]
 80173fe:	b103      	cbz	r3, 8017402 <_read_r+0x1e>
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	bd38      	pop	{r3, r4, r5, pc}
 8017404:	24005a6c 	.word	0x24005a6c

08017408 <_init>:
 8017408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801740a:	bf00      	nop
 801740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801740e:	bc08      	pop	{r3}
 8017410:	469e      	mov	lr, r3
 8017412:	4770      	bx	lr

08017414 <_fini>:
 8017414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017416:	bf00      	nop
 8017418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801741a:	bc08      	pop	{r3}
 801741c:	469e      	mov	lr, r3
 801741e:	4770      	bx	lr
