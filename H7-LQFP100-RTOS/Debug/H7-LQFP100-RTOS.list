
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018820  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08018ac0  08018ac0  00028ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018f58  08018f58  00028f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018f60  08018f60  00028f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018f64  08018f64  00028f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08018f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067e0  24000100  08019064  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240068e0  08019064  000368e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c44a  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070ed  00000000  00000000  0006c574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002918  00000000  00000000  00073668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002630  00000000  00000000  00075f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b35  00000000  00000000  000785b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cb36  00000000  00000000  000bd0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00195114  00000000  00000000  000f9c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028ed2f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b2ec  00000000  00000000  0028ed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018aa8 	.word	0x08018aa8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08018aa8 	.word	0x08018aa8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 ffb1 	bl	80045d0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fe2c 	bl	80022d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f8cc 	bl	8005820 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fe1f 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 fa0f 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fe06 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 fa01 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fdf8 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f9f3 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fdea 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f9e5 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fddc 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f9d6 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fdcd 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f9c7 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fdbe 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f9b8 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fdaf 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f9a9 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fda0 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f99a 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd91 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f98b 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fd82 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f97c 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fd73 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fe99 	bl	80045d0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fd14 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f904 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fcfb 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f8f6 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fced 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f8e8 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fcdf 	bl	80022d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f8da 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fcd1 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fb2a 	bl	8009054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fb1e 	bl	8009054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fb12 	bl	8009054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fc97 	bl	80063a8 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fc26 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fb52 	bl	8004188 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fb4c 	bl	8004188 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fc37 	bl	80063a8 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fbc6 	bl	80022d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f017 fa85 	bl	801809c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 ffff 	bl	8005b9c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb94 	bl	80022d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 fa1a 	bl	8005ffc <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fb7f 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f9fd 	bl	8009054 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fb82 	bl	80063a8 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fb11 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 ff44 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 ff5b 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 ff1b 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 ff32 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 ff13 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 ff2a 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 ff0b 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 ff22 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f004 ff03 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f004 ff1a 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f004 fefb 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f004 ff12 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f004 fef3 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f004 ff0a 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f004 feeb 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f004 ff02 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f004 fee3 	bl	8005b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f004 fefa 	bl	8005b80 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <vApplicationTickHook+0x18>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <vApplicationTickHook+0x18>)
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	24001a54 	.word	0x24001a54

08000db4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <MX_FREERTOS_Init+0x98>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <MX_FREERTOS_Init+0x9c>)
 8000dd6:	f013 ff91 	bl	8014cfc <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_FREERTOS_Init+0xa0>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000de0:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_FREERTOS_Init+0xa4>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <MX_FREERTOS_Init+0xa8>)
 8000de6:	f013 ff89 	bl	8014cfc <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <MX_FREERTOS_Init+0xac>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000df0:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <MX_FREERTOS_Init+0xb0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <MX_FREERTOS_Init+0xb4>)
 8000df6:	f013 ff81 	bl	8014cfc <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <MX_FREERTOS_Init+0xb8>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <MX_FREERTOS_Init+0xbc>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_FREERTOS_Init+0xc0>)
 8000e06:	f013 ff79 	bl	8014cfc <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <MX_FREERTOS_Init+0xc4>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <MX_FREERTOS_Init+0xc8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_FREERTOS_Init+0xcc>)
 8000e16:	f013 ff71 	bl	8014cfc <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <MX_FREERTOS_Init+0xd0>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000e20:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <MX_FREERTOS_Init+0xd4>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	481f      	ldr	r0, [pc, #124]	; (8000ea4 <MX_FREERTOS_Init+0xd8>)
 8000e26:	f013 ff69 	bl	8014cfc <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <MX_FREERTOS_Init+0xdc>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <MX_FREERTOS_Init+0xe0>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_FREERTOS_Init+0xe4>)
 8000e36:	f013 ff61 	bl	8014cfc <osThreadNew>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <MX_FREERTOS_Init+0xe8>)
 8000e3e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <MX_FREERTOS_Init+0xec>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <MX_FREERTOS_Init+0xf0>)
 8000e46:	f013 ff59 	bl	8014cfc <osThreadNew>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_FREERTOS_Init+0xf4>)
 8000e4e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_FREERTOS_Init+0xf8>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_FREERTOS_Init+0xfc>)
 8000e56:	f013 ff51 	bl	8014cfc <osThreadNew>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <MX_FREERTOS_Init+0x100>)
 8000e5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08018d28 	.word	0x08018d28
 8000e68:	08000ed1 	.word	0x08000ed1
 8000e6c:	24000360 	.word	0x24000360
 8000e70:	08018d4c 	.word	0x08018d4c
 8000e74:	08000ef9 	.word	0x08000ef9
 8000e78:	240005c0 	.word	0x240005c0
 8000e7c:	08018d70 	.word	0x08018d70
 8000e80:	08000f21 	.word	0x08000f21
 8000e84:	24000820 	.word	0x24000820
 8000e88:	08018d94 	.word	0x08018d94
 8000e8c:	08000f49 	.word	0x08000f49
 8000e90:	24000a80 	.word	0x24000a80
 8000e94:	08018db8 	.word	0x08018db8
 8000e98:	08000fc1 	.word	0x08000fc1
 8000e9c:	24000ce0 	.word	0x24000ce0
 8000ea0:	08018ddc 	.word	0x08018ddc
 8000ea4:	08001039 	.word	0x08001039
 8000ea8:	24000f40 	.word	0x24000f40
 8000eac:	08018e00 	.word	0x08018e00
 8000eb0:	080010e5 	.word	0x080010e5
 8000eb4:	240011a0 	.word	0x240011a0
 8000eb8:	08018e24 	.word	0x08018e24
 8000ebc:	08001115 	.word	0x08001115
 8000ec0:	24001400 	.word	0x24001400
 8000ec4:	08018e48 	.word	0x08018e48
 8000ec8:	080011dd 	.word	0x080011dd
 8000ecc:	24001660 	.word	0x24001660

08000ed0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <PMT_init+0x24>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	f014 f88c 	bl	8015000 <osEventFlagsWait>

		create_pmt_packet();
 8000ee8:	f001 f9f8 	bl	80022dc <create_pmt_packet>

		osThreadYield();
 8000eec:	f013 ff98 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ef0:	e7f2      	b.n	8000ed8 <PMT_init+0x8>
 8000ef2:	bf00      	nop
 8000ef4:	24001a04 	.word	0x24001a04

08000ef8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <ERPA_init+0x24>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	f014 f878 	bl	8015000 <osEventFlagsWait>

		create_erpa_packet();
 8000f10:	f001 fa2a 	bl	8002368 <create_erpa_packet>

		osThreadYield();
 8000f14:	f013 ff84 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f18:	e7f2      	b.n	8000f00 <ERPA_init+0x8>
 8000f1a:	bf00      	nop
 8000f1c:	24001a04 	.word	0x24001a04

08000f20 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HK_init+0x24>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	f014 f864 	bl	8015000 <osEventFlagsWait>

		create_hk_packet();
 8000f38:	f001 fa74 	bl	8002424 <create_hk_packet>

		osThreadYield();
 8000f3c:	f013 ff70 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f40:	e7f2      	b.n	8000f28 <HK_init+0x8>
 8000f42:	bf00      	nop
 8000f44:	24001a04 	.word	0x24001a04

08000f48 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <AUTOINIT_init+0x70>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	f014 f850 	bl	8015000 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e012      	b.n	8000f8c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <AUTOINIT_init+0x74>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <AUTOINIT_init+0x74>)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f008 fa32 	bl	80093e4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f013 ff6d 	bl	8014e60 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	dde9      	ble.n	8000f66 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f92:	2308      	movs	r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	e008      	b.n	8000faa <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 ffbc 	bl	8003f1c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	ddf3      	ble.n	8000f98 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000fb0:	f013 ff36 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fb4:	e7cc      	b.n	8000f50 <AUTOINIT_init+0x8>
 8000fb6:	bf00      	nop
 8000fb8:	24001a08 	.word	0x24001a08
 8000fbc:	08018e6c 	.word	0x08018e6c

08000fc0 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <AUTODEINIT_init+0x70>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	f014 f814 	bl	8015000 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fd8:	230d      	movs	r3, #13
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e008      	b.n	8000ff0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ff99 	bl	8003f1c <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	dcf3      	bgt.n	8000fde <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	e012      	b.n	8001022 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <AUTODEINIT_init+0x74>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <AUTODEINIT_init+0x74>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f008 f9e7 	bl	80093e4 <HAL_GPIO_WritePin>
			osDelay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f013 ff22 	bl	8014e60 <osDelay>
		for (int i = 6; i >= 0; i--) {
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3b01      	subs	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dae9      	bge.n	8000ffc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8001028:	f013 fefa 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800102c:	e7cc      	b.n	8000fc8 <AUTODEINIT_init+0x8>
 800102e:	bf00      	nop
 8001030:	24001a08 	.word	0x24001a08
 8001034:	08018e6c 	.word	0x08018e6c

08001038 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <Voltage_Monitor_init+0xa8>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	f013 ffd8 	bl	8015000 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001050:	f002 ff8e 	bl	8003f70 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001054:	f002 ff82 	bl	8003f5c <get_rail_monitor>
 8001058:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e03b      	b.n	80010d8 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	461a      	mov	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4413      	add	r3, r2
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d02d      	beq.n	80010d2 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	461a      	mov	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	8898      	ldrh	r0, [r3, #4]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	461a      	mov	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	891b      	ldrh	r3, [r3, #8]
 800109a:	4619      	mov	r1, r3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	461a      	mov	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	88db      	ldrh	r3, [r3, #6]
 80010ae:	461a      	mov	r2, r3
 80010b0:	f002 ffc0 	bl	8004034 <in_range>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10b      	bne.n	80010d2 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	461a      	mov	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	785a      	ldrb	r2, [r3, #1]
 80010cc:	3201      	adds	r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b11      	cmp	r3, #17
 80010dc:	ddc0      	ble.n	8001060 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010de:	e7af      	b.n	8001040 <Voltage_Monitor_init+0x8>
 80010e0:	24001a08 	.word	0x24001a08

080010e4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <STOP_init+0x2c>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f4:	2200      	movs	r2, #0
 80010f6:	2102      	movs	r1, #2
 80010f8:	f013 ff82 	bl	8015000 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <STOP_init+0x2c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f013 ff4a 	bl	8014f9c <osEventFlagsClear>

	  enter_stop();
 8001108:	f001 f8c4 	bl	8002294 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800110c:	e7ee      	b.n	80010ec <STOP_init+0x8>
 800110e:	bf00      	nop
 8001110:	24001a08 	.word	0x24001a08

08001114 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <Science_init+0xa8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	f013 ff6a 	bl	8015000 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e012      	b.n	8001158 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <Science_init+0xac>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <Science_init+0xac>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	f008 f94c 	bl	80093e4 <HAL_GPIO_WritePin>
			osDelay(200);
 800114c:	20c8      	movs	r0, #200	; 0xc8
 800114e:	f013 fe87 	bl	8014e60 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b08      	cmp	r3, #8
 800115c:	dde9      	ble.n	8001132 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800115e:	2308      	movs	r3, #8
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	e008      	b.n	8001176 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fed6 	bl	8003f1c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b10      	cmp	r3, #16
 800117a:	ddf3      	ble.n	8001164 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2320      	movs	r3, #32
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <Science_init+0xb0>)
 8001188:	2100      	movs	r1, #0
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <Science_init+0xb4>)
 800118c:	f004 fd80 	bl	8005c90 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <Science_init+0xb8>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <Science_init+0xbc>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800119c:	f001 fa90 	bl	80026c0 <reset_packet_sequence_numbers>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 80011a0:	210c      	movs	r1, #12
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <Science_init+0xc0>)
 80011a4:	f00f fbc8 	bl	8010938 <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 80011a8:	2100      	movs	r1, #0
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <Science_init+0xc4>)
 80011ac:	f00f fbc4 	bl	8010938 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80011b0:	b662      	cpsie	i
}
 80011b2:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 80011b4:	f013 fe34 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80011b8:	e7b0      	b.n	800111c <Science_init+0x8>
 80011ba:	bf00      	nop
 80011bc:	24001a0c 	.word	0x24001a0c
 80011c0:	08018e6c 	.word	0x08018e6c
 80011c4:	24000000 	.word	0x24000000
 80011c8:	240002d4 	.word	0x240002d4
 80011cc:	24001a50 	.word	0x24001a50
 80011d0:	24001a54 	.word	0x24001a54
 80011d4:	24001d70 	.word	0x24001d70
 80011d8:	24001d24 	.word	0x24001d24

080011dc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <Idle_init+0x8c>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	f013 ff06 	bl	8015000 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011f4:	210c      	movs	r1, #12
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <Idle_init+0x90>)
 80011f8:	f00f fcf8 	bl	8010bec <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011fc:	2100      	movs	r1, #0
 80011fe:	481c      	ldr	r0, [pc, #112]	; (8001270 <Idle_init+0x94>)
 8001200:	f00f fcf4 	bl	8010bec <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <Idle_init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800120a:	2100      	movs	r1, #0
 800120c:	481a      	ldr	r0, [pc, #104]	; (8001278 <Idle_init+0x9c>)
 800120e:	f004 fdff 	bl	8005e10 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001212:	2310      	movs	r3, #16
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e008      	b.n	800122a <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fe7c 	bl	8003f1c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3b01      	subs	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b07      	cmp	r3, #7
 800122e:	dcf3      	bgt.n	8001218 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001230:	2308      	movs	r3, #8
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	e012      	b.n	800125c <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <Idle_init+0xa0>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <Idle_init+0xa0>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	f008 f8ca 	bl	80093e4 <HAL_GPIO_WritePin>
			osDelay(200);
 8001250:	20c8      	movs	r0, #200	; 0xc8
 8001252:	f013 fe05 	bl	8014e60 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3b01      	subs	r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dae9      	bge.n	8001236 <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 8001262:	f013 fddd 	bl	8014e20 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001266:	e7bd      	b.n	80011e4 <Idle_init+0x8>
 8001268:	24001a0c 	.word	0x24001a0c
 800126c:	24001d70 	.word	0x24001d70
 8001270:	24001d24 	.word	0x24001d24
 8001274:	24001a50 	.word	0x24001a50
 8001278:	240002d4 	.word	0x240002d4
 800127c:	08018e6c 	.word	0x08018e6c

08001280 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <MX_GPIO_Init+0xe8>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	4a32      	ldr	r2, [pc, #200]	; (8001368 <MX_GPIO_Init+0xe8>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b25      	ldr	r3, [pc, #148]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a23      	ldr	r2, [pc, #140]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_GPIO_Init+0xe8>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_GPIO_Init+0xe8>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001314:	4815      	ldr	r0, [pc, #84]	; (800136c <MX_GPIO_Init+0xec>)
 8001316:	f008 f865 	bl	80093e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2164      	movs	r1, #100	; 0x64
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_GPIO_Init+0xf0>)
 8001320:	f008 f860 	bl	80093e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001324:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001328:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132e:	2302      	movs	r3, #2
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0xec>)
 800133e:	f007 fe89 	bl	8009054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800134a:	2302      	movs	r3, #2
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0xf0>)
 800135a:	f007 fe7b 	bl	8009054 <HAL_GPIO_Init>

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	58024400 	.word	0x58024400
 800136c:	58020800 	.word	0x58020800
 8001370:	58020400 	.word	0x58020400

08001374 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_I2C1_Init+0x78>)
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_I2C1_Init+0x7c>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_I2C1_Init+0x78>)
 8001380:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <MX_I2C1_Init+0x80>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_I2C1_Init+0x78>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_I2C1_Init+0x78>)
 800138c:	2201      	movs	r2, #1
 800138e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_I2C1_Init+0x78>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_I2C1_Init+0x78>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_I2C1_Init+0x78>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_I2C1_Init+0x78>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_I2C1_Init+0x78>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ae:	480f      	ldr	r0, [pc, #60]	; (80013ec <MX_I2C1_Init+0x78>)
 80013b0:	f008 f832 	bl	8009418 <HAL_I2C_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ba:	f000 ff89 	bl	80022d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <MX_I2C1_Init+0x78>)
 80013c2:	f00a fad1 	bl	800b968 <HAL_I2CEx_ConfigAnalogFilter>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013cc:	f000 ff80 	bl	80022d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_I2C1_Init+0x78>)
 80013d4:	f00a fb13 	bl	800b9fe <HAL_I2CEx_ConfigDigitalFilter>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013de:	f000 ff77 	bl	80022d0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f00a fb58 	bl	800ba98 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	240018c0 	.word	0x240018c0
 80013f0:	40005400 	.word	0x40005400
 80013f4:	00100517 	.word	0x00100517

080013f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0ba      	sub	sp, #232	; 0xe8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	22c0      	movs	r2, #192	; 0xc0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f016 fe3f 	bl	801809c <memset>
  if(i2cHandle->Instance==I2C1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a5d      	ldr	r2, [pc, #372]	; (8001598 <HAL_I2C_MspInit+0x1a0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	f040 80b3 	bne.w	8001590 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800142a:	f04f 0208 	mov.w	r2, #8
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f00b fbeb 	bl	800cc1c <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800144c:	f000 ff40 	bl	80022d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b52      	ldr	r3, [pc, #328]	; (800159c <HAL_I2C_MspInit+0x1a4>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_I2C_MspInit+0x1a4>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <HAL_I2C_MspInit+0x1a4>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001492:	4619      	mov	r1, r3
 8001494:	4842      	ldr	r0, [pc, #264]	; (80015a0 <HAL_I2C_MspInit+0x1a8>)
 8001496:	f007 fddd 	bl	8009054 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <HAL_I2C_MspInit+0x1a4>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a0:	4a3e      	ldr	r2, [pc, #248]	; (800159c <HAL_I2C_MspInit+0x1a4>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_I2C_MspInit+0x1a4>)
 80014ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014ba:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <HAL_I2C_MspInit+0x1b0>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014c0:	2222      	movs	r2, #34	; 0x22
 80014c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014f0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014f8:	482a      	ldr	r0, [pc, #168]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 80014fa:	f004 ff55 	bl	80063a8 <HAL_DMA_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8001504:	f000 fee4 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
 800150e:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <HAL_I2C_MspInit+0x1ac>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001516:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <HAL_I2C_MspInit+0x1b8>)
 8001518:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 800151c:	2221      	movs	r2, #33	; 0x21
 800151e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001548:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800154c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001556:	f004 ff27 	bl	80063a8 <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001560:	f000 feb6 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <HAL_I2C_MspInit+0x1b4>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2105      	movs	r1, #5
 8001574:	201f      	movs	r0, #31
 8001576:	f004 fae9 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800157a:	201f      	movs	r0, #31
 800157c:	f004 fb00 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	2020      	movs	r0, #32
 8001586:	f004 fae1 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800158a:	2020      	movs	r0, #32
 800158c:	f004 faf8 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001590:	bf00      	nop
 8001592:	37e8      	adds	r7, #232	; 0xe8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40005400 	.word	0x40005400
 800159c:	58024400 	.word	0x58024400
 80015a0:	58020400 	.word	0x58020400
 80015a4:	24001914 	.word	0x24001914
 80015a8:	400200a0 	.word	0x400200a0
 80015ac:	2400198c 	.word	0x2400198c
 80015b0:	400200b8 	.word	0x400200b8

080015b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015b8:	f3bf 8f4f 	dsb	sy
}
 80015bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <__NVIC_SystemReset+0x24>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015c6:	4904      	ldr	r1, [pc, #16]	; (80015d8 <__NVIC_SystemReset+0x24>)
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_SystemReset+0x28>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <__NVIC_SystemReset+0x20>
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	05fa0004 	.word	0x05fa0004

080015e0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d106      	bne.n	80015fe <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2101      	movs	r1, #1
 80015f6:	4618      	mov	r0, r3
 80015f8:	f013 fc8c 	bl	8014f14 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80015fc:	e02d      	b.n	800165a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	else if (htim == &htim2) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d126      	bne.n	8001654 <HAL_TIM_OC_DelayElapsedCallback+0x74>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2102      	movs	r1, #2
 800160c:	4618      	mov	r0, r3
 800160e:	f013 fc81 	bl	8014f14 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b20      	cmp	r3, #32
 800161a:	d113      	bne.n	8001644 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f013 fc76 	bl	8014f14 <osEventFlagsSet>
			if (HK_ENABLED){
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_TIM_OC_DelayElapsedCallback+0x5e>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2104      	movs	r1, #4
 8001638:	4618      	mov	r0, r3
 800163a:	f013 fc6b 	bl	8014f14 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001650:	701a      	strb	r2, [r3, #0]
}
 8001652:	e002      	b.n	800165a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		printf("Unknown Timer Interrupt\n");
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001656:	f016 fd97 	bl	8018188 <puts>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24001d24 	.word	0x24001d24
 8001668:	24001a04 	.word	0x24001a04
 800166c:	24001d70 	.word	0x24001d70
 8001670:	24001a58 	.word	0x24001a58
 8001674:	24001a08 	.word	0x24001a08
 8001678:	24001a50 	.word	0x24001a50
 800167c:	08018b38 	.word	0x08018b38

08001680 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af02      	add	r7, sp, #8
 8001686:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	49f2      	ldr	r1, [pc, #968]	; (8001a54 <HAL_UART_RxCpltCallback+0x3d4>)
 800168c:	48f2      	ldr	r0, [pc, #968]	; (8001a58 <HAL_UART_RxCpltCallback+0x3d8>)
 800168e:	f010 fe33 	bl	80122f8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001692:	4bf0      	ldr	r3, [pc, #960]	; (8001a54 <HAL_UART_RxCpltCallback+0x3d4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2be0      	cmp	r3, #224	; 0xe0
 800169c:	f200 8419 	bhi.w	8001ed2 <HAL_UART_RxCpltCallback+0x852>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <HAL_UART_RxCpltCallback+0x28>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	08001a41 	.word	0x08001a41
 80016ac:	08001a85 	.word	0x08001a85
 80016b0:	08001af5 	.word	0x08001af5
 80016b4:	08001b2f 	.word	0x08001b2f
 80016b8:	08001b67 	.word	0x08001b67
 80016bc:	08001ba1 	.word	0x08001ba1
 80016c0:	08001bdd 	.word	0x08001bdd
 80016c4:	08001c19 	.word	0x08001c19
 80016c8:	08001c53 	.word	0x08001c53
 80016cc:	08001c87 	.word	0x08001c87
 80016d0:	08001cb3 	.word	0x08001cb3
 80016d4:	08001cdf 	.word	0x08001cdf
 80016d8:	08001d09 	.word	0x08001d09
 80016dc:	08001de5 	.word	0x08001de5
 80016e0:	08001e4d 	.word	0x08001e4d
 80016e4:	08001e75 	.word	0x08001e75
 80016e8:	08001a2d 	.word	0x08001a2d
 80016ec:	08001a69 	.word	0x08001a69
 80016f0:	08001ad7 	.word	0x08001ad7
 80016f4:	08001b13 	.word	0x08001b13
 80016f8:	08001b4b 	.word	0x08001b4b
 80016fc:	08001b83 	.word	0x08001b83
 8001700:	08001bbf 	.word	0x08001bbf
 8001704:	08001bfb 	.word	0x08001bfb
 8001708:	08001c37 	.word	0x08001c37
 800170c:	08001c6f 	.word	0x08001c6f
 8001710:	08001c97 	.word	0x08001c97
 8001714:	08001cc3 	.word	0x08001cc3
 8001718:	08001cef 	.word	0x08001cef
 800171c:	08001d17 	.word	0x08001d17
 8001720:	08001e25 	.word	0x08001e25
 8001724:	08001ed3 	.word	0x08001ed3
 8001728:	08001ed3 	.word	0x08001ed3
 800172c:	08001ed3 	.word	0x08001ed3
 8001730:	08001ed3 	.word	0x08001ed3
 8001734:	08001ed3 	.word	0x08001ed3
 8001738:	08001ed3 	.word	0x08001ed3
 800173c:	08001ed3 	.word	0x08001ed3
 8001740:	08001ed3 	.word	0x08001ed3
 8001744:	08001ed3 	.word	0x08001ed3
 8001748:	08001ed3 	.word	0x08001ed3
 800174c:	08001ed3 	.word	0x08001ed3
 8001750:	08001ed3 	.word	0x08001ed3
 8001754:	08001ed3 	.word	0x08001ed3
 8001758:	08001ed3 	.word	0x08001ed3
 800175c:	08001ed3 	.word	0x08001ed3
 8001760:	08001ed3 	.word	0x08001ed3
 8001764:	08001ed3 	.word	0x08001ed3
 8001768:	08001ed3 	.word	0x08001ed3
 800176c:	08001ed3 	.word	0x08001ed3
 8001770:	08001ed3 	.word	0x08001ed3
 8001774:	08001ed3 	.word	0x08001ed3
 8001778:	08001ed3 	.word	0x08001ed3
 800177c:	08001ed3 	.word	0x08001ed3
 8001780:	08001ed3 	.word	0x08001ed3
 8001784:	08001ed3 	.word	0x08001ed3
 8001788:	08001ed3 	.word	0x08001ed3
 800178c:	08001ed3 	.word	0x08001ed3
 8001790:	08001ed3 	.word	0x08001ed3
 8001794:	08001ed3 	.word	0x08001ed3
 8001798:	08001ed3 	.word	0x08001ed3
 800179c:	08001ed3 	.word	0x08001ed3
 80017a0:	08001ed3 	.word	0x08001ed3
 80017a4:	08001ed3 	.word	0x08001ed3
 80017a8:	08001ed3 	.word	0x08001ed3
 80017ac:	08001ed3 	.word	0x08001ed3
 80017b0:	08001ed3 	.word	0x08001ed3
 80017b4:	08001ed3 	.word	0x08001ed3
 80017b8:	08001ed3 	.word	0x08001ed3
 80017bc:	08001ed3 	.word	0x08001ed3
 80017c0:	08001ed3 	.word	0x08001ed3
 80017c4:	08001ed3 	.word	0x08001ed3
 80017c8:	08001ed3 	.word	0x08001ed3
 80017cc:	08001ed3 	.word	0x08001ed3
 80017d0:	08001ed3 	.word	0x08001ed3
 80017d4:	08001ed3 	.word	0x08001ed3
 80017d8:	08001ed3 	.word	0x08001ed3
 80017dc:	08001ed3 	.word	0x08001ed3
 80017e0:	08001ed3 	.word	0x08001ed3
 80017e4:	08001ed3 	.word	0x08001ed3
 80017e8:	08001ed3 	.word	0x08001ed3
 80017ec:	08001ed3 	.word	0x08001ed3
 80017f0:	08001ed3 	.word	0x08001ed3
 80017f4:	08001ed3 	.word	0x08001ed3
 80017f8:	08001ed3 	.word	0x08001ed3
 80017fc:	08001ed3 	.word	0x08001ed3
 8001800:	08001ed3 	.word	0x08001ed3
 8001804:	08001ed3 	.word	0x08001ed3
 8001808:	08001ed3 	.word	0x08001ed3
 800180c:	08001ed3 	.word	0x08001ed3
 8001810:	08001ed3 	.word	0x08001ed3
 8001814:	08001ed3 	.word	0x08001ed3
 8001818:	08001ed3 	.word	0x08001ed3
 800181c:	08001ed3 	.word	0x08001ed3
 8001820:	08001ed3 	.word	0x08001ed3
 8001824:	08001ed3 	.word	0x08001ed3
 8001828:	08001ed3 	.word	0x08001ed3
 800182c:	08001ed3 	.word	0x08001ed3
 8001830:	08001ed3 	.word	0x08001ed3
 8001834:	08001ed3 	.word	0x08001ed3
 8001838:	08001ed3 	.word	0x08001ed3
 800183c:	08001ed3 	.word	0x08001ed3
 8001840:	08001ed3 	.word	0x08001ed3
 8001844:	08001ed3 	.word	0x08001ed3
 8001848:	08001ed3 	.word	0x08001ed3
 800184c:	08001ed3 	.word	0x08001ed3
 8001850:	08001ed3 	.word	0x08001ed3
 8001854:	08001ed3 	.word	0x08001ed3
 8001858:	08001ed3 	.word	0x08001ed3
 800185c:	08001ed3 	.word	0x08001ed3
 8001860:	08001ed3 	.word	0x08001ed3
 8001864:	08001ed3 	.word	0x08001ed3
 8001868:	08001ed3 	.word	0x08001ed3
 800186c:	08001ed3 	.word	0x08001ed3
 8001870:	08001ed3 	.word	0x08001ed3
 8001874:	08001ed3 	.word	0x08001ed3
 8001878:	08001ed3 	.word	0x08001ed3
 800187c:	08001ed3 	.word	0x08001ed3
 8001880:	08001ed3 	.word	0x08001ed3
 8001884:	08001ed3 	.word	0x08001ed3
 8001888:	08001ed3 	.word	0x08001ed3
 800188c:	08001ed3 	.word	0x08001ed3
 8001890:	08001ed3 	.word	0x08001ed3
 8001894:	08001ed3 	.word	0x08001ed3
 8001898:	08001ed3 	.word	0x08001ed3
 800189c:	08001ed3 	.word	0x08001ed3
 80018a0:	08001ed3 	.word	0x08001ed3
 80018a4:	08001ed3 	.word	0x08001ed3
 80018a8:	08001ed3 	.word	0x08001ed3
 80018ac:	08001ed3 	.word	0x08001ed3
 80018b0:	08001ed3 	.word	0x08001ed3
 80018b4:	08001ed3 	.word	0x08001ed3
 80018b8:	08001ed3 	.word	0x08001ed3
 80018bc:	08001ed3 	.word	0x08001ed3
 80018c0:	08001ed3 	.word	0x08001ed3
 80018c4:	08001ed3 	.word	0x08001ed3
 80018c8:	08001ed3 	.word	0x08001ed3
 80018cc:	08001ed3 	.word	0x08001ed3
 80018d0:	08001ed3 	.word	0x08001ed3
 80018d4:	08001ed3 	.word	0x08001ed3
 80018d8:	08001ed3 	.word	0x08001ed3
 80018dc:	08001ed3 	.word	0x08001ed3
 80018e0:	08001ed3 	.word	0x08001ed3
 80018e4:	08001ed3 	.word	0x08001ed3
 80018e8:	08001ed3 	.word	0x08001ed3
 80018ec:	08001ed3 	.word	0x08001ed3
 80018f0:	08001ed3 	.word	0x08001ed3
 80018f4:	08001ed3 	.word	0x08001ed3
 80018f8:	08001ed3 	.word	0x08001ed3
 80018fc:	08001ed3 	.word	0x08001ed3
 8001900:	08001ed3 	.word	0x08001ed3
 8001904:	08001ed3 	.word	0x08001ed3
 8001908:	08001ed3 	.word	0x08001ed3
 800190c:	08001ed3 	.word	0x08001ed3
 8001910:	08001ed3 	.word	0x08001ed3
 8001914:	08001ed3 	.word	0x08001ed3
 8001918:	08001ed3 	.word	0x08001ed3
 800191c:	08001ed3 	.word	0x08001ed3
 8001920:	08001ed3 	.word	0x08001ed3
 8001924:	08001ed3 	.word	0x08001ed3
 8001928:	08001ed3 	.word	0x08001ed3
 800192c:	08001ed3 	.word	0x08001ed3
 8001930:	08001ed3 	.word	0x08001ed3
 8001934:	08001ed3 	.word	0x08001ed3
 8001938:	08001ed3 	.word	0x08001ed3
 800193c:	08001ed3 	.word	0x08001ed3
 8001940:	08001ed3 	.word	0x08001ed3
 8001944:	08001ed3 	.word	0x08001ed3
 8001948:	08001ed3 	.word	0x08001ed3
 800194c:	08001ed3 	.word	0x08001ed3
 8001950:	08001ed3 	.word	0x08001ed3
 8001954:	08001ed3 	.word	0x08001ed3
 8001958:	08001ed3 	.word	0x08001ed3
 800195c:	08001ed3 	.word	0x08001ed3
 8001960:	08001ed3 	.word	0x08001ed3
 8001964:	08001eb1 	.word	0x08001eb1
 8001968:	08001ed3 	.word	0x08001ed3
 800196c:	08001ed3 	.word	0x08001ed3
 8001970:	08001ed3 	.word	0x08001ed3
 8001974:	08001ed3 	.word	0x08001ed3
 8001978:	08001ed3 	.word	0x08001ed3
 800197c:	08001ed3 	.word	0x08001ed3
 8001980:	08001ed3 	.word	0x08001ed3
 8001984:	08001ed3 	.word	0x08001ed3
 8001988:	08001ed3 	.word	0x08001ed3
 800198c:	08001ed3 	.word	0x08001ed3
 8001990:	08001ed3 	.word	0x08001ed3
 8001994:	08001ed3 	.word	0x08001ed3
 8001998:	08001ed3 	.word	0x08001ed3
 800199c:	08001ed3 	.word	0x08001ed3
 80019a0:	08001ed3 	.word	0x08001ed3
 80019a4:	08001eb7 	.word	0x08001eb7
 80019a8:	08001ed3 	.word	0x08001ed3
 80019ac:	08001ed3 	.word	0x08001ed3
 80019b0:	08001ed3 	.word	0x08001ed3
 80019b4:	08001ed3 	.word	0x08001ed3
 80019b8:	08001ed3 	.word	0x08001ed3
 80019bc:	08001ed3 	.word	0x08001ed3
 80019c0:	08001ed3 	.word	0x08001ed3
 80019c4:	08001ed3 	.word	0x08001ed3
 80019c8:	08001ed3 	.word	0x08001ed3
 80019cc:	08001ed3 	.word	0x08001ed3
 80019d0:	08001ed3 	.word	0x08001ed3
 80019d4:	08001ed3 	.word	0x08001ed3
 80019d8:	08001ed3 	.word	0x08001ed3
 80019dc:	08001ed3 	.word	0x08001ed3
 80019e0:	08001ed3 	.word	0x08001ed3
 80019e4:	08001ec5 	.word	0x08001ec5
 80019e8:	08001e9d 	.word	0x08001e9d
 80019ec:	08001ed3 	.word	0x08001ed3
 80019f0:	08001ed3 	.word	0x08001ed3
 80019f4:	08001ed3 	.word	0x08001ed3
 80019f8:	08001ed3 	.word	0x08001ed3
 80019fc:	08001ed3 	.word	0x08001ed3
 8001a00:	08001ed3 	.word	0x08001ed3
 8001a04:	08001ed3 	.word	0x08001ed3
 8001a08:	08001ed3 	.word	0x08001ed3
 8001a0c:	08001ed3 	.word	0x08001ed3
 8001a10:	08001ed3 	.word	0x08001ed3
 8001a14:	08001ed3 	.word	0x08001ed3
 8001a18:	08001ed3 	.word	0x08001ed3
 8001a1c:	08001ed3 	.word	0x08001ed3
 8001a20:	08001ed3 	.word	0x08001ed3
 8001a24:	08001ed3 	.word	0x08001ed3
 8001a28:	08001e89 	.word	0x08001e89
	case 0x10: {
		printf("SDN1 ON\n");
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <HAL_UART_RxCpltCallback+0x3dc>)
 8001a2e:	f016 fbab 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_UART_RxCpltCallback+0x3e0>)
 8001a34:	2104      	movs	r1, #4
 8001a36:	2201      	movs	r2, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f007 fcd3 	bl	80093e4 <HAL_GPIO_WritePin>
		break;
 8001a3e:	e253      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001a40:	4808      	ldr	r0, [pc, #32]	; (8001a64 <HAL_UART_RxCpltCallback+0x3e4>)
 8001a42:	f016 fba1 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_UART_RxCpltCallback+0x3e0>)
 8001a48:	2104      	movs	r1, #4
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f007 fcc9 	bl	80093e4 <HAL_GPIO_WritePin>
		break;
 8001a52:	e249      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
 8001a54:	24001a10 	.word	0x24001a10
 8001a58:	24001dbc 	.word	0x24001dbc
 8001a5c:	08018b50 	.word	0x08018b50
 8001a60:	58020400 	.word	0x58020400
 8001a64:	08018b58 	.word	0x08018b58
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001a68:	48bb      	ldr	r0, [pc, #748]	; (8001d58 <HAL_UART_RxCpltCallback+0x6d8>)
 8001a6a:	f016 fb8d 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001a6e:	4bbb      	ldr	r3, [pc, #748]	; (8001d5c <HAL_UART_RxCpltCallback+0x6dc>)
 8001a70:	2120      	movs	r1, #32
 8001a72:	2201      	movs	r2, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f007 fcb5 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2008      	movs	r0, #8
 8001a7e:	f002 fa4d 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001a82:	e231      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001a84:	48b6      	ldr	r0, [pc, #728]	; (8001d60 <HAL_UART_RxCpltCallback+0x6e0>)
 8001a86:	f016 fb7f 	bl	8018188 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e00f      	b.n	8001ab0 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001a90:	4ab4      	ldr	r2, [pc, #720]	; (8001d64 <HAL_UART_RxCpltCallback+0x6e4>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a98:	4ab2      	ldr	r2, [pc, #712]	; (8001d64 <HAL_UART_RxCpltCallback+0x6e4>)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	889b      	ldrh	r3, [r3, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f007 fc9d 	bl	80093e4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	dcec      	bgt.n	8001a90 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	e008      	b.n	8001ace <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fa2a 	bl	8003f1c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	dcf3      	bgt.n	8001abc <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001ad4:	e208      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001ad6:	48a4      	ldr	r0, [pc, #656]	; (8001d68 <HAL_UART_RxCpltCallback+0x6e8>)
 8001ad8:	f016 fb56 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8001adc:	4ba3      	ldr	r3, [pc, #652]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fc7d 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8001aea:	2101      	movs	r1, #1
 8001aec:	2009      	movs	r0, #9
 8001aee:	f002 fa15 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001af2:	e1f9      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8001af4:	489e      	ldr	r0, [pc, #632]	; (8001d70 <HAL_UART_RxCpltCallback+0x6f0>)
 8001af6:	f016 fb47 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8001afa:	4b9c      	ldr	r3, [pc, #624]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b00:	2200      	movs	r2, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fc6e 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2009      	movs	r0, #9
 8001b0c:	f002 fa06 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001b10:	e1ea      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001b12:	4898      	ldr	r0, [pc, #608]	; (8001d74 <HAL_UART_RxCpltCallback+0x6f4>)
 8001b14:	f016 fb38 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001b18:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fc60 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001b24:	2101      	movs	r1, #1
 8001b26:	200a      	movs	r0, #10
 8001b28:	f002 f9f8 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001b2c:	e1dc      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001b2e:	4892      	ldr	r0, [pc, #584]	; (8001d78 <HAL_UART_RxCpltCallback+0x6f8>)
 8001b30:	f016 fb2a 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001b34:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 fc52 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	200a      	movs	r0, #10
 8001b44:	f002 f9ea 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001b48:	e1ce      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001b4a:	488c      	ldr	r0, [pc, #560]	; (8001d7c <HAL_UART_RxCpltCallback+0x6fc>)
 8001b4c:	f016 fb1c 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001b50:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001b52:	2140      	movs	r1, #64	; 0x40
 8001b54:	2201      	movs	r2, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 fc44 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	200b      	movs	r0, #11
 8001b60:	f002 f9dc 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001b64:	e1c0      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001b66:	4886      	ldr	r0, [pc, #536]	; (8001d80 <HAL_UART_RxCpltCallback+0x700>)
 8001b68:	f016 fb0e 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001b6c:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	2200      	movs	r2, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fc36 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	200b      	movs	r0, #11
 8001b7c:	f002 f9ce 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001b80:	e1b2      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001b82:	4880      	ldr	r0, [pc, #512]	; (8001d84 <HAL_UART_RxCpltCallback+0x704>)
 8001b84:	f016 fb00 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001b88:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f007 fc27 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001b96:	2101      	movs	r1, #1
 8001b98:	200c      	movs	r0, #12
 8001b9a:	f002 f9bf 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001b9e:	e1a3      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001ba0:	4879      	ldr	r0, [pc, #484]	; (8001d88 <HAL_UART_RxCpltCallback+0x708>)
 8001ba2:	f016 faf1 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001ba6:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bac:	2200      	movs	r2, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 fc18 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200c      	movs	r0, #12
 8001bb8:	f002 f9b0 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001bbc:	e194      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001bbe:	4873      	ldr	r0, [pc, #460]	; (8001d8c <HAL_UART_RxCpltCallback+0x70c>)
 8001bc0:	f016 fae2 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001bc4:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 fc09 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	200d      	movs	r0, #13
 8001bd6:	f002 f9a1 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001bda:	e185      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001bdc:	486c      	ldr	r0, [pc, #432]	; (8001d90 <HAL_UART_RxCpltCallback+0x710>)
 8001bde:	f016 fad3 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001be2:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be8:	2200      	movs	r2, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f007 fbfa 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200d      	movs	r0, #13
 8001bf4:	f002 f992 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001bf8:	e176      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001bfa:	4866      	ldr	r0, [pc, #408]	; (8001d94 <HAL_UART_RxCpltCallback+0x714>)
 8001bfc:	f016 fac4 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001c00:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c06:	2201      	movs	r2, #1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f007 fbeb 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	200f      	movs	r0, #15
 8001c12:	f002 f983 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001c16:	e167      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001c18:	485f      	ldr	r0, [pc, #380]	; (8001d98 <HAL_UART_RxCpltCallback+0x718>)
 8001c1a:	f016 fab5 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_UART_RxCpltCallback+0x6ec>)
 8001c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c24:	2200      	movs	r2, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f007 fbdc 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f002 f974 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001c34:	e158      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001c36:	4859      	ldr	r0, [pc, #356]	; (8001d9c <HAL_UART_RxCpltCallback+0x71c>)
 8001c38:	f016 faa6 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_UART_RxCpltCallback+0x6dc>)
 8001c3e:	2140      	movs	r1, #64	; 0x40
 8001c40:	2201      	movs	r2, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 fbce 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001c48:	2101      	movs	r1, #1
 8001c4a:	2010      	movs	r0, #16
 8001c4c:	f002 f966 	bl	8003f1c <set_rail_monitor_enable>

		break;
 8001c50:	e14a      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001c52:	4853      	ldr	r0, [pc, #332]	; (8001da0 <HAL_UART_RxCpltCallback+0x720>)
 8001c54:	f016 fa98 	bl	8018188 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001c58:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_UART_RxCpltCallback+0x6dc>)
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f007 fbc0 	bl	80093e4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001c64:	2100      	movs	r1, #0
 8001c66:	2010      	movs	r0, #16
 8001c68:	f002 f958 	bl	8003f1c <set_rail_monitor_enable>
		break;
 8001c6c:	e13c      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001c6e:	484d      	ldr	r0, [pc, #308]	; (8001da4 <HAL_UART_RxCpltCallback+0x724>)
 8001c70:	f016 fa8a 	bl	8018188 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2320      	movs	r3, #32
 8001c7a:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_UART_RxCpltCallback+0x728>)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	484b      	ldr	r0, [pc, #300]	; (8001dac <HAL_UART_RxCpltCallback+0x72c>)
 8001c80:	f004 f806 	bl	8005c90 <HAL_DAC_Start_DMA>
		break;
 8001c84:	e130      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001c86:	484a      	ldr	r0, [pc, #296]	; (8001db0 <HAL_UART_RxCpltCallback+0x730>)
 8001c88:	f016 fa7e 	bl	8018188 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4847      	ldr	r0, [pc, #284]	; (8001dac <HAL_UART_RxCpltCallback+0x72c>)
 8001c90:	f004 f8be 	bl	8005e10 <HAL_DAC_Stop_DMA>
		break;
 8001c94:	e128      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001c96:	4847      	ldr	r0, [pc, #284]	; (8001db4 <HAL_UART_RxCpltCallback+0x734>)
 8001c98:	f016 fa76 	bl	8018188 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c9c:	210c      	movs	r1, #12
 8001c9e:	4846      	ldr	r0, [pc, #280]	; (8001db8 <HAL_UART_RxCpltCallback+0x738>)
 8001ca0:	f00e fe4a 	bl	8010938 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <HAL_UART_RxCpltCallback+0x73c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2102      	movs	r1, #2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f013 f932 	bl	8014f14 <osEventFlagsSet>

		break;
 8001cb0:	e11a      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001cb2:	4843      	ldr	r0, [pc, #268]	; (8001dc0 <HAL_UART_RxCpltCallback+0x740>)
 8001cb4:	f016 fa68 	bl	8018188 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001cb8:	210c      	movs	r1, #12
 8001cba:	483f      	ldr	r0, [pc, #252]	; (8001db8 <HAL_UART_RxCpltCallback+0x738>)
 8001cbc:	f00e ff96 	bl	8010bec <HAL_TIM_OC_Stop_IT>
		break;
 8001cc0:	e112      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001cc2:	4840      	ldr	r0, [pc, #256]	; (8001dc4 <HAL_UART_RxCpltCallback+0x744>)
 8001cc4:	f016 fa60 	bl	8018188 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	483f      	ldr	r0, [pc, #252]	; (8001dc8 <HAL_UART_RxCpltCallback+0x748>)
 8001ccc:	f00e fe34 	bl	8010938 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_UART_RxCpltCallback+0x73c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f013 f91c 	bl	8014f14 <osEventFlagsSet>
		break;
 8001cdc:	e104      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001cde:	483b      	ldr	r0, [pc, #236]	; (8001dcc <HAL_UART_RxCpltCallback+0x74c>)
 8001ce0:	f016 fa52 	bl	8018188 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4838      	ldr	r0, [pc, #224]	; (8001dc8 <HAL_UART_RxCpltCallback+0x748>)
 8001ce8:	f00e ff80 	bl	8010bec <HAL_TIM_OC_Stop_IT>
		break;
 8001cec:	e0fc      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001cee:	4838      	ldr	r0, [pc, #224]	; (8001dd0 <HAL_UART_RxCpltCallback+0x750>)
 8001cf0:	f016 fa4a 	bl	8018188 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_UART_RxCpltCallback+0x73c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f013 f90a 	bl	8014f14 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_UART_RxCpltCallback+0x754>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
		break;
 8001d06:	e0ef      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001d08:	4833      	ldr	r0, [pc, #204]	; (8001dd8 <HAL_UART_RxCpltCallback+0x758>)
 8001d0a:	f016 fa3d 	bl	8018188 <puts>
		HK_ENABLED = 0;
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_UART_RxCpltCallback+0x754>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		break;
 8001d14:	e0e8      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001d16:	4831      	ldr	r0, [pc, #196]	; (8001ddc <HAL_UART_RxCpltCallback+0x75c>)
 8001d18:	f016 fa36 	bl	8018188 <puts>
		if (step < 14) {
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_UART_RxCpltCallback+0x760>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b0d      	cmp	r3, #13
 8001d24:	f200 80d9 	bhi.w	8001eda <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_UART_RxCpltCallback+0x760>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3302      	adds	r3, #2
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_UART_RxCpltCallback+0x760>)
 8001d34:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_UART_RxCpltCallback+0x760>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_UART_RxCpltCallback+0x728>)
 8001d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <HAL_UART_RxCpltCallback+0x72c>)
 8001d4a:	f004 f904 	bl	8005f56 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4816      	ldr	r0, [pc, #88]	; (8001dac <HAL_UART_RxCpltCallback+0x72c>)
 8001d52:	f003 ff45 	bl	8005be0 <HAL_DAC_Start>
		}
		break;
 8001d56:	e0c0      	b.n	8001eda <HAL_UART_RxCpltCallback+0x85a>
 8001d58:	08018b64 	.word	0x08018b64
 8001d5c:	58020400 	.word	0x58020400
 8001d60:	08018b70 	.word	0x08018b70
 8001d64:	08018e6c 	.word	0x08018e6c
 8001d68:	08018b7c 	.word	0x08018b7c
 8001d6c:	58020800 	.word	0x58020800
 8001d70:	08018b88 	.word	0x08018b88
 8001d74:	08018b98 	.word	0x08018b98
 8001d78:	08018ba4 	.word	0x08018ba4
 8001d7c:	08018bb0 	.word	0x08018bb0
 8001d80:	08018bbc 	.word	0x08018bbc
 8001d84:	08018bcc 	.word	0x08018bcc
 8001d88:	08018bd8 	.word	0x08018bd8
 8001d8c:	08018be4 	.word	0x08018be4
 8001d90:	08018bf0 	.word	0x08018bf0
 8001d94:	08018bfc 	.word	0x08018bfc
 8001d98:	08018c0c 	.word	0x08018c0c
 8001d9c:	08018c1c 	.word	0x08018c1c
 8001da0:	08018c28 	.word	0x08018c28
 8001da4:	08018c38 	.word	0x08018c38
 8001da8:	24000000 	.word	0x24000000
 8001dac:	240002d4 	.word	0x240002d4
 8001db0:	08018c48 	.word	0x08018c48
 8001db4:	08018c58 	.word	0x08018c58
 8001db8:	24001d70 	.word	0x24001d70
 8001dbc:	24001a04 	.word	0x24001a04
 8001dc0:	08018c60 	.word	0x08018c60
 8001dc4:	08018c6c 	.word	0x08018c6c
 8001dc8:	24001d24 	.word	0x24001d24
 8001dcc:	08018c74 	.word	0x08018c74
 8001dd0:	08018c7c 	.word	0x08018c7c
 8001dd4:	24001a50 	.word	0x24001a50
 8001dd8:	08018c84 	.word	0x08018c84
 8001ddc:	08018c8c 	.word	0x08018c8c
 8001de0:	24001a51 	.word	0x24001a51
	}
	case 0x0D: {
		printf("Step Down\n");
 8001de4:	4842      	ldr	r0, [pc, #264]	; (8001ef0 <HAL_UART_RxCpltCallback+0x870>)
 8001de6:	f016 f9cf 	bl	8018188 <puts>
		if (step > 1) {
 8001dea:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_UART_RxCpltCallback+0x874>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d974      	bls.n	8001ede <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_UART_RxCpltCallback+0x874>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b02      	subs	r3, #2
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_UART_RxCpltCallback+0x874>)
 8001e00:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_UART_RxCpltCallback+0x874>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_UART_RxCpltCallback+0x878>)
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	4839      	ldr	r0, [pc, #228]	; (8001efc <HAL_UART_RxCpltCallback+0x87c>)
 8001e16:	f004 f89e 	bl	8005f56 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4837      	ldr	r0, [pc, #220]	; (8001efc <HAL_UART_RxCpltCallback+0x87c>)
 8001e1e:	f003 fedf 	bl	8005be0 <HAL_DAC_Start>
		}
		break;
 8001e22:	e05c      	b.n	8001ede <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001e24:	4836      	ldr	r0, [pc, #216]	; (8001f00 <HAL_UART_RxCpltCallback+0x880>)
 8001e26:	f016 f9af 	bl	8018188 <puts>
		if (cadence <= 50000) {
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d855      	bhi.n	8001ee2 <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e3e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001e4a:	e04a      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001e4c:	482e      	ldr	r0, [pc, #184]	; (8001f08 <HAL_UART_RxCpltCallback+0x888>)
 8001e4e:	f016 f99b 	bl	8018188 <puts>
		if (cadence >= 6250) {
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f641 0269 	movw	r2, #6249	; 0x1869
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d943      	bls.n	8001ee6 <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e66:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_UART_RxCpltCallback+0x884>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001e72:	e038      	b.n	8001ee6 <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001e74:	4825      	ldr	r0, [pc, #148]	; (8001f0c <HAL_UART_RxCpltCallback+0x88c>)
 8001e76:	f016 f987 	bl	8018188 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_UART_RxCpltCallback+0x890>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f013 f847 	bl	8014f14 <osEventFlagsSet>
		break;
 8001e86:	e02f      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001e88:	4822      	ldr	r0, [pc, #136]	; (8001f14 <HAL_UART_RxCpltCallback+0x894>)
 8001e8a:	f016 f97d 	bl	8018188 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_UART_RxCpltCallback+0x890>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2104      	movs	r1, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f013 f83d 	bl	8014f14 <osEventFlagsSet>
		break;
 8001e9a:	e025      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001e9c:	481e      	ldr	r0, [pc, #120]	; (8001f18 <HAL_UART_RxCpltCallback+0x898>)
 8001e9e:	f016 f973 	bl	8018188 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_UART_RxCpltCallback+0x890>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2108      	movs	r1, #8
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f013 f833 	bl	8014f14 <osEventFlagsSet>
		break;
 8001eae:	e01b      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001eb0:	f000 f958 	bl	8002164 <sync>
		break;
 8001eb4:	e018      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_UART_RxCpltCallback+0x89c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f013 f829 	bl	8014f14 <osEventFlagsSet>
		break;
 8001ec2:	e011      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_RxCpltCallback+0x89c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f013 f822 	bl	8014f14 <osEventFlagsSet>
		break;
 8001ed0:	e00a      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <HAL_UART_RxCpltCallback+0x8a0>)
 8001ed4:	f016 f958 	bl	8018188 <puts>
		break;
 8001ed8:	e006      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001eda:	bf00      	nop
 8001edc:	e004      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001ede:	bf00      	nop
 8001ee0:	e002      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001ee2:	bf00      	nop
 8001ee4:	e000      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001ee6:	bf00      	nop
	}
	}
}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	08018c94 	.word	0x08018c94
 8001ef4:	24001a51 	.word	0x24001a51
 8001ef8:	24000000 	.word	0x24000000
 8001efc:	240002d4 	.word	0x240002d4
 8001f00:	08018ca0 	.word	0x08018ca0
 8001f04:	24000080 	.word	0x24000080
 8001f08:	08018cac 	.word	0x08018cac
 8001f0c:	08018cb8 	.word	0x08018cb8
 8001f10:	24001a08 	.word	0x24001a08
 8001f14:	08018cc8 	.word	0x08018cc8
 8001f18:	08018cd4 	.word	0x08018cd4
 8001f1c:	24001a0c 	.word	0x24001a0c
 8001f20:	08018ce0 	.word	0x08018ce0

08001f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f28:	f002 f8c6 	bl	80040b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2c:	f000 f824 	bl	8001f78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f30:	f000 f8a2 	bl	8002078 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f34:	f7ff f9a4 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f38:	f7fe fed6 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f3c:	f001 fd26 	bl	800398c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f40:	f7ff fa18 	bl	8001374 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001f44:	f000 fe5c 	bl	8002c00 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001f48:	f001 fb48 	bl	80035dc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f4c:	f001 fa98 	bl	8003480 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001f50:	f7fe fc6a 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001f54:	f7fe fb46 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001f58:	f7fe fe12 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001f5c:	f000 fdf8 	bl	8002b50 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f60:	f000 fbc4 	bl	80026ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001f64:	f000 f8b8 	bl	80020d8 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f68:	f012 fe7e 	bl	8014c68 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f6c:	f7fe ff2e 	bl	8000dcc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f70:	f012 fe9e 	bl	8014cb0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001f74:	e7fe      	b.n	8001f74 <main+0x50>
	...

08001f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09c      	sub	sp, #112	; 0x70
 8001f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	224c      	movs	r2, #76	; 0x4c
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f016 f888 	bl	801809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2220      	movs	r2, #32
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f016 f882 	bl	801809c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f009 fddd 	bl	800bb58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <SystemClock_Config+0xf8>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	4a32      	ldr	r2, [pc, #200]	; (8002070 <SystemClock_Config+0xf8>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <SystemClock_Config+0xf8>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <SystemClock_Config+0xfc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fc0:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <SystemClock_Config+0xfc>)
 8001fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <SystemClock_Config+0xfc>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001fd4:	bf00      	nop
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <SystemClock_Config+0xfc>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe2:	d1f8      	bne.n	8001fd6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001fee:	2309      	movs	r3, #9
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff2:	2340      	movs	r3, #64	; 0x40
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ffe:	2304      	movs	r3, #4
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002002:	2318      	movs	r3, #24
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002006:	2302      	movs	r3, #2
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800200a:	2302      	movs	r3, #2
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800200e:	2302      	movs	r3, #2
 8002010:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002012:	2308      	movs	r3, #8
 8002014:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002016:	2302      	movs	r3, #2
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4618      	mov	r0, r3
 8002024:	f009 fdd2 	bl	800bbcc <HAL_RCC_OscConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800202e:	f000 f94f 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002032:	233f      	movs	r3, #63	; 0x3f
 8002034:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002036:	2303      	movs	r3, #3
 8002038:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f00a fa12 	bl	800c480 <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8002062:	f000 f935 	bl	80022d0 <Error_Handler>
  }
}
 8002066:	bf00      	nop
 8002068:	3770      	adds	r7, #112	; 0x70
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	58000400 	.word	0x58000400
 8002074:	58024800 	.word	0x58024800

08002078 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0b0      	sub	sp, #192	; 0xc0
 800207c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207e:	463b      	mov	r3, r7
 8002080:	22c0      	movs	r2, #192	; 0xc0
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f016 f809 	bl	801809c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800208a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002096:	2304      	movs	r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800209a:	2318      	movs	r3, #24
 800209c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800209e:	2308      	movs	r3, #8
 80020a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80020ae:	2320      	movs	r3, #32
 80020b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4618      	mov	r0, r3
 80020c0:	f00a fdac 	bl	800cc1c <HAL_RCCEx_PeriphCLKConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80020ca:	f000 f901 	bl	80022d0 <Error_Handler>
  }
}
 80020ce:	bf00      	nop
 80020d0:	37c0      	adds	r7, #192	; 0xc0
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 80020dc:	2000      	movs	r0, #0
 80020de:	f012 feda 	bl	8014e96 <osEventFlagsNew>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <system_setup+0x78>)
 80020e6:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <system_setup+0x78>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d100      	bne.n	80020f2 <system_setup+0x1a>
        while (1);
 80020f0:	e7fe      	b.n	80020f0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f012 fecf 	bl	8014e96 <osEventFlagsNew>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <system_setup+0x7c>)
 80020fc:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <system_setup+0x7c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <system_setup+0x30>
        while (1);
 8002106:	e7fe      	b.n	8002106 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002108:	2000      	movs	r0, #0
 800210a:	f012 fec4 	bl	8014e96 <osEventFlagsNew>
 800210e:	4603      	mov	r3, r0
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <system_setup+0x80>)
 8002112:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <system_setup+0x80>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d100      	bne.n	800211e <system_setup+0x46>
        while (1);
 800211c:	e7fe      	b.n	800211c <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 800211e:	f001 fd3f 	bl	8003ba0 <voltage_monitor_init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d100      	bne.n	800212a <system_setup+0x52>
		while (1);
 8002128:	e7fe      	b.n	8002128 <system_setup+0x50>
	}


	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 800212a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800212e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8002134:	f000 fb6c 	bl	8002810 <init_adc_dma>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d100      	bne.n	8002140 <system_setup+0x68>
		while (1);
 800213e:	e7fe      	b.n	800213e <system_setup+0x66>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	4906      	ldr	r1, [pc, #24]	; (800215c <system_setup+0x84>)
 8002144:	4806      	ldr	r0, [pc, #24]	; (8002160 <system_setup+0x88>)
 8002146:	f010 f8d7 	bl	80122f8 <HAL_UART_Receive_IT>

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	24001a04 	.word	0x24001a04
 8002154:	24001a08 	.word	0x24001a08
 8002158:	24001a0c 	.word	0x24001a0c
 800215c:	24001a10 	.word	0x24001a10
 8002160:	24001dbc 	.word	0x24001dbc

08002164 <sync>:

void sync() {
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	send_ACK();
 800216a:	f000 f81f 	bl	80021ac <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800216e:	480d      	ldr	r0, [pc, #52]	; (80021a4 <sync+0x40>)
 8002170:	f010 f90e 	bl	8012390 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002174:	2364      	movs	r3, #100	; 0x64
 8002176:	2209      	movs	r2, #9
 8002178:	490b      	ldr	r1, [pc, #44]	; (80021a8 <sync+0x44>)
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <sync+0x40>)
 800217c:	f00f fff4 	bl	8012168 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <sync+0x44>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2bff      	cmp	r3, #255	; 0xff
 800218a:	d1f3      	bne.n	8002174 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800218c:	2201      	movs	r2, #1
 800218e:	4906      	ldr	r1, [pc, #24]	; (80021a8 <sync+0x44>)
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <sync+0x40>)
 8002192:	f010 f8b1 	bl	80122f8 <HAL_UART_Receive_IT>

	send_ACK();
 8002196:	f000 f809 	bl	80021ac <send_ACK>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	24001dbc 	.word	0x24001dbc
 80021a8:	24001a10 	.word	0x24001a10

080021ac <send_ACK>:

void send_ACK() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <send_ACK+0x1c>)
 80021b2:	22ff      	movs	r2, #255	; 0xff
 80021b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	2201      	movs	r2, #1
 80021ba:	4903      	ldr	r1, [pc, #12]	; (80021c8 <send_ACK+0x1c>)
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <send_ACK+0x20>)
 80021be:	f00f ff45 	bl	801204c <HAL_UART_Transmit>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	24001a5c 	.word	0x24001a5c
 80021cc:	24001dbc 	.word	0x24001dbc

080021d0 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <get_current_step+0xc0>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d04a      	beq.n	800227c <get_current_step+0xac>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ec:	da48      	bge.n	8002280 <get_current_step+0xb0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d03f      	beq.n	8002278 <get_current_step+0xa8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021fe:	4293      	cmp	r3, r2
 8002200:	dc3e      	bgt.n	8002280 <get_current_step+0xb0>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002208:	4293      	cmp	r3, r2
 800220a:	d033      	beq.n	8002274 <get_current_step+0xa4>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002212:	da35      	bge.n	8002280 <get_current_step+0xb0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800221a:	4293      	cmp	r3, r2
 800221c:	d028      	beq.n	8002270 <get_current_step+0xa0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002224:	4293      	cmp	r3, r2
 8002226:	dc2b      	bgt.n	8002280 <get_current_step+0xb0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f240 7245 	movw	r2, #1861	; 0x745
 800222e:	4293      	cmp	r3, r2
 8002230:	d01c      	beq.n	800226c <get_current_step+0x9c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f240 7245 	movw	r2, #1861	; 0x745
 8002238:	4293      	cmp	r3, r2
 800223a:	dc21      	bgt.n	8002280 <get_current_step+0xb0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002242:	4293      	cmp	r3, r2
 8002244:	d010      	beq.n	8002268 <get_current_step+0x98>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800224c:	4293      	cmp	r3, r2
 800224e:	dc17      	bgt.n	8002280 <get_current_step+0xb0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <get_current_step+0x90>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800225c:	d002      	beq.n	8002264 <get_current_step+0x94>
 800225e:	e00f      	b.n	8002280 <get_current_step+0xb0>
	case 0:
		return 0;
 8002260:	2300      	movs	r3, #0
 8002262:	e00e      	b.n	8002282 <get_current_step+0xb2>
	case 620:
		return 1;
 8002264:	2301      	movs	r3, #1
 8002266:	e00c      	b.n	8002282 <get_current_step+0xb2>
	case 1241:
		return 2;
 8002268:	2302      	movs	r3, #2
 800226a:	e00a      	b.n	8002282 <get_current_step+0xb2>
	case 1861:
		return 3;
 800226c:	2303      	movs	r3, #3
 800226e:	e008      	b.n	8002282 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002270:	2304      	movs	r3, #4
 8002272:	e006      	b.n	8002282 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002274:	2305      	movs	r3, #5
 8002276:	e004      	b.n	8002282 <get_current_step+0xb2>
	case 3723:
		return 6;
 8002278:	2306      	movs	r3, #6
 800227a:	e002      	b.n	8002282 <get_current_step+0xb2>
	case 4095:
		return 7;
 800227c:	2307      	movs	r3, #7
 800227e:	e000      	b.n	8002282 <get_current_step+0xb2>
	default:
		return -1;
 8002280:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40007400 	.word	0x40007400

08002294 <enter_stop>:

void enter_stop() {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	  send_ACK();
 8002298:	f7ff ff88 	bl	80021ac <send_ACK>

	  vTaskSuspendAll();
 800229c:	f014 f992 	bl	80165c4 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80022a0:	2101      	movs	r1, #1
 80022a2:	2001      	movs	r0, #1
 80022a4:	f009 fc1c 	bl	800bae0 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80022a8:	f7ff f984 	bl	80015b4 <__NVIC_SystemReset>

080022ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022be:	f001 ff37 	bl	8004130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40001000 	.word	0x40001000

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
}
 80022d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022d8:	e7fe      	b.n	80022d8 <Error_Handler+0x8>
	...

080022dc <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80022e2:	bf00      	nop
 80022e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e8:	481c      	ldr	r0, [pc, #112]	; (800235c <create_pmt_packet+0x80>)
 80022ea:	f007 f863 	bl	80093b4 <HAL_GPIO_ReadPin>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f7      	bne.n	80022e4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 faa8 	bl	800384c <get_uptime>
	sample_pmt_spi(pmt_spi);
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fad9 	bl	80028b8 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002306:	23bb      	movs	r3, #187	; 0xbb
 8002308:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 800230a:	23bb      	movs	r3, #187	; 0xbb
 800230c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <create_pmt_packet+0x84>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <create_pmt_packet+0x84>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002322:	7a3b      	ldrb	r3, [r7, #8]
 8002324:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002326:	7a7b      	ldrb	r3, [r7, #9]
 8002328:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800232a:	793b      	ldrb	r3, [r7, #4]
 800232c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 800232e:	797b      	ldrb	r3, [r7, #5]
 8002330:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2364      	movs	r3, #100	; 0x64
 8002340:	220a      	movs	r2, #10
 8002342:	4808      	ldr	r0, [pc, #32]	; (8002364 <create_pmt_packet+0x88>)
 8002344:	f00f fe82 	bl	801204c <HAL_UART_Transmit>

	pmt_seq++;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <create_pmt_packet+0x84>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <create_pmt_packet+0x84>)
 8002352:	801a      	strh	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58020000 	.word	0x58020000
 8002360:	24001a5e 	.word	0x24001a5e
 8002364:	24001dbc 	.word	0x24001dbc

08002368 <create_erpa_packet>:


void create_erpa_packet() {
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800236e:	bf00      	nop
 8002370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002374:	4828      	ldr	r0, [pc, #160]	; (8002418 <create_erpa_packet+0xb0>)
 8002376:	f007 f81d 	bl	80093b4 <HAL_GPIO_ReadPin>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f7      	bne.n	8002370 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002380:	23ff      	movs	r3, #255	; 0xff
 8002382:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f001 fa60 	bl	800384c <get_uptime>
	sweep_step = get_current_step();
 800238c:	f7ff ff20 	bl	80021d0 <get_current_step>
 8002390:	4603      	mov	r3, r0
 8002392:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	4618      	mov	r0, r3
 800239a:	f000 faad 	bl	80028f8 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fac8 	bl	8002938 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80023a8:	23aa      	movs	r3, #170	; 0xaa
 80023aa:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 80023ac:	23aa      	movs	r3, #170	; 0xaa
 80023ae:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <create_erpa_packet+0xb4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <create_erpa_packet+0xb4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <create_erpa_packet+0xb4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80023d0:	893b      	ldrh	r3, [r7, #8]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80023da:	893b      	ldrh	r3, [r7, #8]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80023e0:	7b3b      	ldrb	r3, [r7, #12]
 80023e2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80023e4:	7b7b      	ldrb	r3, [r7, #13]
 80023e6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80023e8:	793b      	ldrb	r3, [r7, #4]
 80023ea:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80023ec:	797b      	ldrb	r3, [r7, #5]
 80023ee:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80023f8:	f107 0110 	add.w	r1, r7, #16
 80023fc:	2364      	movs	r3, #100	; 0x64
 80023fe:	220e      	movs	r2, #14
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <create_erpa_packet+0xb8>)
 8002402:	f00f fe23 	bl	801204c <HAL_UART_Transmit>

	erpa_seq++;
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <create_erpa_packet+0xb4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <create_erpa_packet+0xb4>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	58020400 	.word	0x58020400
 800241c:	24001a60 	.word	0x24001a60
 8002420:	24001dbc 	.word	0x24001dbc

08002424 <create_hk_packet>:


void create_hk_packet() {
 8002424:	b580      	push	{r7, lr}
 8002426:	b094      	sub	sp, #80	; 0x50
 8002428:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fa0d 	bl	800384c <get_uptime>
	get_timestamp(timestamp);
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4618      	mov	r0, r3
 8002438:	f001 fa58 	bl	80038ec <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 800243c:	f001 fd8e 	bl	8003f5c <get_rail_monitor>
 8002440:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002442:	23cc      	movs	r3, #204	; 0xcc
 8002444:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002446:	23cc      	movs	r3, #204	; 0xcc
 8002448:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800244a:	4b9b      	ldr	r3, [pc, #620]	; (80026b8 <create_hk_packet+0x294>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	b29b      	uxth	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002456:	4b98      	ldr	r3, [pc, #608]	; (80026b8 <create_hk_packet+0x294>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800245e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002460:	889b      	ldrh	r3, [r3, #4]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b29b      	uxth	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800246a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246c:	889b      	ldrh	r3, [r3, #4]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002474:	330a      	adds	r3, #10
 8002476:	889b      	ldrh	r3, [r3, #4]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b29b      	uxth	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002482:	330a      	adds	r3, #10
 8002484:	889b      	ldrh	r3, [r3, #4]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 800248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248c:	3314      	adds	r3, #20
 800248e:	889b      	ldrh	r3, [r3, #4]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249a:	3314      	adds	r3, #20
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	331e      	adds	r3, #30
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b2:	331e      	adds	r3, #30
 80024b4:	889b      	ldrh	r3, [r3, #4]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	889b      	ldrh	r3, [r3, #4]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	3328      	adds	r3, #40	; 0x28
 80024ce:	889b      	ldrh	r3, [r3, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	3332      	adds	r3, #50	; 0x32
 80024da:	889b      	ldrh	r3, [r3, #4]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80024e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e8:	3332      	adds	r3, #50	; 0x32
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	333c      	adds	r3, #60	; 0x3c
 80024f6:	889b      	ldrh	r3, [r3, #4]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002504:	333c      	adds	r3, #60	; 0x3c
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	3346      	adds	r3, #70	; 0x46
 8002512:	889b      	ldrh	r3, [r3, #4]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	b29b      	uxth	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800251e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002520:	3346      	adds	r3, #70	; 0x46
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	3350      	adds	r3, #80	; 0x50
 800252e:	889b      	ldrh	r3, [r3, #4]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	b29b      	uxth	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800253a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253c:	3350      	adds	r3, #80	; 0x50
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	335a      	adds	r3, #90	; 0x5a
 800254a:	889b      	ldrh	r3, [r3, #4]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	335a      	adds	r3, #90	; 0x5a
 800255a:	889b      	ldrh	r3, [r3, #4]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	3364      	adds	r3, #100	; 0x64
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	b29b      	uxth	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002574:	3364      	adds	r3, #100	; 0x64
 8002576:	889b      	ldrh	r3, [r3, #4]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 800257e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002580:	336e      	adds	r3, #110	; 0x6e
 8002582:	889b      	ldrh	r3, [r3, #4]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	b29b      	uxth	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002590:	336e      	adds	r3, #110	; 0x6e
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 800259a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259c:	3378      	adds	r3, #120	; 0x78
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	3378      	adds	r3, #120	; 0x78
 80025ae:	889b      	ldrh	r3, [r3, #4]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80025b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b8:	3382      	adds	r3, #130	; 0x82
 80025ba:	889b      	ldrh	r3, [r3, #4]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	3382      	adds	r3, #130	; 0x82
 80025ca:	889b      	ldrh	r3, [r3, #4]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80025d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d4:	338c      	adds	r3, #140	; 0x8c
 80025d6:	889b      	ldrh	r3, [r3, #4]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	338c      	adds	r3, #140	; 0x8c
 80025e6:	889b      	ldrh	r3, [r3, #4]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	3396      	adds	r3, #150	; 0x96
 80025f2:	889b      	ldrh	r3, [r3, #4]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80025fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002600:	3396      	adds	r3, #150	; 0x96
 8002602:	889b      	ldrh	r3, [r3, #4]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 800260a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260c:	33a0      	adds	r3, #160	; 0xa0
 800260e:	889b      	ldrh	r3, [r3, #4]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	b29b      	uxth	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 800261a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261c:	33a0      	adds	r3, #160	; 0xa0
 800261e:	889b      	ldrh	r3, [r3, #4]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002628:	33aa      	adds	r3, #170	; 0xaa
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	b29b      	uxth	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002638:	33aa      	adds	r3, #170	; 0xaa
 800263a:	889b      	ldrh	r3, [r3, #4]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002642:	7a3b      	ldrb	r3, [r7, #8]
 8002644:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002648:	7a7b      	ldrb	r3, [r7, #9]
 800264a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 800264e:	7abb      	ldrb	r3, [r7, #10]
 8002650:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 800265a:	7b3b      	ldrb	r3, [r7, #12]
 800265c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002660:	7b7b      	ldrb	r3, [r7, #13]
 8002662:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002672:	7c3b      	ldrb	r3, [r7, #16]
 8002674:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002678:	7c7b      	ldrb	r3, [r7, #17]
 800267a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 800267e:	793b      	ldrb	r3, [r7, #4]
 8002680:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002684:	797b      	ldrb	r3, [r7, #5]
 8002686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8002696:	f107 0114 	add.w	r1, r7, #20
 800269a:	2364      	movs	r3, #100	; 0x64
 800269c:	2236      	movs	r2, #54	; 0x36
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <create_hk_packet+0x298>)
 80026a0:	f00f fcd4 	bl	801204c <HAL_UART_Transmit>

	hk_seq++;
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <create_hk_packet+0x294>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <create_hk_packet+0x294>)
 80026ae:	801a      	strh	r2, [r3, #0]
}
 80026b0:	bf00      	nop
 80026b2:	3750      	adds	r7, #80	; 0x50
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	24001a64 	.word	0x24001a64
 80026bc:	24001dbc 	.word	0x24001dbc

080026c0 <reset_packet_sequence_numbers>:
	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
}



void reset_packet_sequence_numbers() {
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <reset_packet_sequence_numbers+0x20>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <reset_packet_sequence_numbers+0x24>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <reset_packet_sequence_numbers+0x28>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	801a      	strh	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	24001a5e 	.word	0x24001a5e
 80026e4:	24001a60 	.word	0x24001a60
 80026e8:	24001a64 	.word	0x24001a64

080026ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002700:	2300      	movs	r3, #0
 8002702:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002706:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <MX_RTC_Init+0xb8>)
 8002708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <MX_RTC_Init+0xb4>)
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8002710:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002712:	2263      	movs	r2, #99	; 0x63
 8002714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002718:	f242 720f 	movw	r2, #9999	; 0x270f
 800271c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <MX_RTC_Init+0xb4>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002736:	481a      	ldr	r0, [pc, #104]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002738:	f00c ff6e 	bl	800f618 <HAL_RTC_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002742:	f7ff fdc5 	bl	80022d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002746:	2300      	movs	r3, #0
 8002748:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800274a:	2300      	movs	r3, #0
 800274c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800274e:	2300      	movs	r3, #0
 8002750:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2201      	movs	r2, #1
 800275e:	4619      	mov	r1, r3
 8002760:	480f      	ldr	r0, [pc, #60]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002762:	f00c ffdb 	bl	800f71c <HAL_RTC_SetTime>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800276c:	f7ff fdb0 	bl	80022d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002770:	2301      	movs	r3, #1
 8002772:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002774:	2301      	movs	r3, #1
 8002776:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002778:	2301      	movs	r3, #1
 800277a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800277c:	2300      	movs	r3, #0
 800277e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	2201      	movs	r2, #1
 8002784:	4619      	mov	r1, r3
 8002786:	4806      	ldr	r0, [pc, #24]	; (80027a0 <MX_RTC_Init+0xb4>)
 8002788:	f00d f8c2 	bl	800f910 <HAL_RTC_SetDate>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002792:	f7ff fd9d 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	24001a68 	.word	0x24001a68
 80027a4:	58004000 	.word	0x58004000

080027a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0b2      	sub	sp, #200	; 0xc8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	22c0      	movs	r2, #192	; 0xc0
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f015 fc6f 	bl	801809c <memset>
  if(rtcHandle->Instance==RTC)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_RTC_MspInit+0x5c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d118      	bne.n	80027fa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_RTC_MspInit+0x60>)
 80027d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f00a fa1c 	bl	800cc1c <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80027ea:	f7ff fd71 	bl	80022d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_RTC_MspInit+0x64>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_RTC_MspInit+0x64>)
 80027f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	37c8      	adds	r7, #200	; 0xc8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	58004000 	.word	0x58004000
 8002808:	00019300 	.word	0x00019300
 800280c:	58024400 	.word	0x58024400

08002810 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800281a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800281e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002822:	481f      	ldr	r0, [pc, #124]	; (80028a0 <init_adc_dma+0x90>)
 8002824:	f002 ff98 	bl	8005758 <HAL_ADCEx_Calibration_Start>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800282e:	f7ff fd4f 	bl	80022d0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002832:	220b      	movs	r2, #11
 8002834:	491b      	ldr	r1, [pc, #108]	; (80028a4 <init_adc_dma+0x94>)
 8002836:	481a      	ldr	r0, [pc, #104]	; (80028a0 <init_adc_dma+0x90>)
 8002838:	f002 f86c 	bl	8004914 <HAL_ADC_Start_DMA>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002842:	f7ff fd45 	bl	80022d0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002846:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800284a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800284e:	4816      	ldr	r0, [pc, #88]	; (80028a8 <init_adc_dma+0x98>)
 8002850:	f002 ff82 	bl	8005758 <HAL_ADCEx_Calibration_Start>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800285a:	f7ff fd39 	bl	80022d0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800285e:	2204      	movs	r2, #4
 8002860:	4912      	ldr	r1, [pc, #72]	; (80028ac <init_adc_dma+0x9c>)
 8002862:	4811      	ldr	r0, [pc, #68]	; (80028a8 <init_adc_dma+0x98>)
 8002864:	f002 f856 	bl	8004914 <HAL_ADC_Start_DMA>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800286e:	f7ff fd2f 	bl	80022d0 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <init_adc_dma+0xa0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <init_adc_dma+0xa0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002880:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <init_adc_dma+0xa4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <init_adc_dma+0xa4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]


	status = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	71fb      	strb	r3, [r7, #7]

	return status;
 8002896:	79fb      	ldrb	r3, [r7, #7]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2400011c 	.word	0x2400011c
 80028a4:	24001aa0 	.word	0x24001aa0
 80028a8:	24000180 	.word	0x24000180
 80028ac:	24001ac0 	.word	0x24001ac0
 80028b0:	24001b5c 	.word	0x24001b5c
 80028b4:	24001ad4 	.word	0x24001ad4

080028b8 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80028c0:	2201      	movs	r2, #1
 80028c2:	490b      	ldr	r1, [pc, #44]	; (80028f0 <sample_pmt_spi+0x38>)
 80028c4:	480b      	ldr	r0, [pc, #44]	; (80028f4 <sample_pmt_spi+0x3c>)
 80028c6:	f00d faed 	bl	800fea4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <sample_pmt_spi+0x38>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <sample_pmt_spi+0x38>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3301      	adds	r3, #1
 80028e4:	7bba      	ldrb	r2, [r7, #14]
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	24001acc 	.word	0x24001acc
 80028f4:	24001ad4 	.word	0x24001ad4

080028f8 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8002900:	2201      	movs	r2, #1
 8002902:	490b      	ldr	r1, [pc, #44]	; (8002930 <sample_erpa_spi+0x38>)
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <sample_erpa_spi+0x3c>)
 8002906:	f00d facd 	bl	800fea4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <sample_erpa_spi+0x38>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <sample_erpa_spi+0x38>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	7bba      	ldrb	r2, [r7, #14]
 8002926:	701a      	strb	r2, [r3, #0]
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	24001ac8 	.word	0x24001ac8
 8002934:	24001b5c 	.word	0x24001b5c

08002938 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <sample_erpa_adc+0x20>)
 8002942:	885b      	ldrh	r3, [r3, #2]
 8002944:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	89fa      	ldrh	r2, [r7, #14]
 800294a:	801a      	strh	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	24001aa0 	.word	0x24001aa0

0800295c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002964:	2390      	movs	r3, #144	; 0x90
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f8a2 	bl	8002ab0 <poll_i2c_sensor>
 800296c:	4603      	mov	r3, r0
 800296e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002970:	2394      	movs	r3, #148	; 0x94
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f89c 	bl	8002ab0 <poll_i2c_sensor>
 8002978:	4603      	mov	r3, r0
 800297a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800297c:	2392      	movs	r3, #146	; 0x92
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f896 	bl	8002ab0 <poll_i2c_sensor>
 8002984:	4603      	mov	r3, r0
 8002986:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002988:	2396      	movs	r3, #150	; 0x96
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f890 	bl	8002ab0 <poll_i2c_sensor>
 8002990:	4603      	mov	r3, r0
 8002992:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	89fa      	ldrh	r2, [r7, #14]
 8002998:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3302      	adds	r3, #2
 800299e:	89ba      	ldrh	r2, [r7, #12]
 80029a0:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	897a      	ldrh	r2, [r7, #10]
 80029a8:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3306      	adds	r3, #6
 80029ae:	893a      	ldrh	r2, [r7, #8]
 80029b0:	801a      	strh	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029c6:	8a9b      	ldrh	r3, [r3, #20]
 80029c8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029cc:	8a1b      	ldrh	r3, [r3, #16]
 80029ce:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029d2:	899b      	ldrh	r3, [r3, #12]
 80029d4:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029d8:	8a5b      	ldrh	r3, [r3, #18]
 80029da:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029de:	889b      	ldrh	r3, [r3, #4]
 80029e0:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029e4:	88db      	ldrh	r3, [r3, #6]
 80029e6:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029ea:	89db      	ldrh	r3, [r3, #14]
 80029ec:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029f0:	891b      	ldrh	r3, [r3, #8]
 80029f2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <sample_hk_adc1+0xa0>)
 80029fc:	895b      	ldrh	r3, [r3, #10]
 80029fe:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8bfa      	ldrh	r2, [r7, #30]
 8002a04:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	8bba      	ldrh	r2, [r7, #28]
 8002a0c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	8b7a      	ldrh	r2, [r7, #26]
 8002a14:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3306      	adds	r3, #6
 8002a1a:	8b3a      	ldrh	r2, [r7, #24]
 8002a1c:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3308      	adds	r3, #8
 8002a22:	8afa      	ldrh	r2, [r7, #22]
 8002a24:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	330a      	adds	r3, #10
 8002a2a:	8aba      	ldrh	r2, [r7, #20]
 8002a2c:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	330c      	adds	r3, #12
 8002a32:	8a7a      	ldrh	r2, [r7, #18]
 8002a34:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	330e      	adds	r3, #14
 8002a3a:	8a3a      	ldrh	r2, [r7, #16]
 8002a3c:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3310      	adds	r3, #16
 8002a42:	89fa      	ldrh	r2, [r7, #14]
 8002a44:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3312      	adds	r3, #18
 8002a4a:	89ba      	ldrh	r2, [r7, #12]
 8002a4c:	801a      	strh	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	24001aa0 	.word	0x24001aa0

08002a60 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <sample_hk_adc3+0x4c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <sample_hk_adc3+0x4c>)
 8002a70:	885b      	ldrh	r3, [r3, #2]
 8002a72:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <sample_hk_adc3+0x4c>)
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <sample_hk_adc3+0x4c>)
 8002a7c:	88db      	ldrh	r3, [r3, #6]
 8002a7e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	89fa      	ldrh	r2, [r7, #14]
 8002a84:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	89ba      	ldrh	r2, [r7, #12]
 8002a8c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	897a      	ldrh	r2, [r7, #10]
 8002a94:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3306      	adds	r3, #6
 8002a9a:	893a      	ldrh	r2, [r7, #8]
 8002a9c:	801a      	strh	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	24001ac0 	.word	0x24001ac0

08002ab0 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8002aba:	2200      	movs	r2, #0
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <poll_i2c_sensor+0x90>)
 8002abe:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <poll_i2c_sensor+0x90>)
 8002ac8:	481e      	ldr	r0, [pc, #120]	; (8002b44 <poll_i2c_sensor+0x94>)
 8002aca:	f006 fd41 	bl	8009550 <HAL_I2C_Master_Transmit_DMA>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002ad2:	7b7b      	ldrb	r3, [r7, #13]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8002ad8:	481b      	ldr	r0, [pc, #108]	; (8002b48 <poll_i2c_sensor+0x98>)
 8002ada:	f015 fb55 	bl	8018188 <puts>
 8002ade:	e028      	b.n	8002b32 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8002ae0:	bf00      	nop
 8002ae2:	4818      	ldr	r0, [pc, #96]	; (8002b44 <poll_i2c_sensor+0x94>)
 8002ae4:	f007 f81b 	bl	8009b1e <HAL_I2C_GetState>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d1f9      	bne.n	8002ae2 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	b299      	uxth	r1, r3
 8002af2:	2302      	movs	r3, #2
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <poll_i2c_sensor+0x90>)
 8002af6:	4813      	ldr	r0, [pc, #76]	; (8002b44 <poll_i2c_sensor+0x94>)
 8002af8:	f006 fe3e 	bl	8009778 <HAL_I2C_Master_Receive_DMA>
 8002afc:	4603      	mov	r3, r0
 8002afe:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002b00:	7b7b      	ldrb	r3, [r7, #13]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002b06:	4811      	ldr	r0, [pc, #68]	; (8002b4c <poll_i2c_sensor+0x9c>)
 8002b08:	f015 fb3e 	bl	8018188 <puts>
 8002b0c:	e011      	b.n	8002b32 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8002b0e:	bf00      	nop
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <poll_i2c_sensor+0x94>)
 8002b12:	f007 f804 	bl	8009b1e <HAL_I2C_GetState>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d1f9      	bne.n	8002b10 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <poll_i2c_sensor+0x90>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8002b24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <poll_i2c_sensor+0x90>)
 8002b2a:	7852      	ldrb	r2, [r2, #1]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	10db      	asrs	r3, r3, #3
 8002b30:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	24001ad0 	.word	0x24001ad0
 8002b44:	240018c0 	.word	0x240018c0
 8002b48:	08018cf0 	.word	0x08018cf0
 8002b4c:	08018d00 	.word	0x08018d00

08002b50 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b56:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <MX_SPI1_Init+0xac>)
 8002b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b68:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b70:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b86:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002b8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b98:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_SPI1_Init+0xa8>)
 8002be4:	f00d f83a 	bl	800fc5c <HAL_SPI_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002bee:	f7ff fb6f 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	24001ad4 	.word	0x24001ad4
 8002bfc:	40013000 	.word	0x40013000

08002c00 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c06:	4a29      	ldr	r2, [pc, #164]	; (8002cac <MX_SPI2_Init+0xac>)
 8002c08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c0a:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c18:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c36:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002c3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_SPI2_Init+0xa8>)
 8002c94:	f00c ffe2 	bl	800fc5c <HAL_SPI_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002c9e:	f7ff fb17 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	24001b5c 	.word	0x24001b5c
 8002cac:	40003800 	.word	0x40003800

08002cb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0bc      	sub	sp, #240	; 0xf0
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc8:	f107 0318 	add.w	r3, r7, #24
 8002ccc:	22c0      	movs	r2, #192	; 0xc0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f015 f9e3 	bl	801809c <memset>
  if(spiHandle->Instance==SPI1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a83      	ldr	r2, [pc, #524]	; (8002ee8 <HAL_SPI_MspInit+0x238>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d17c      	bne.n	8002dda <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf0:	f107 0318 	add.w	r3, r7, #24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f009 ff91 	bl	800cc1c <HAL_RCCEx_PeriphCLKConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002d00:	f7ff fae6 	bl	80022d0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d04:	4b79      	ldr	r3, [pc, #484]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d0a:	4a78      	ldr	r2, [pc, #480]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d28:	4a70      	ldr	r2, [pc, #448]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002d2a:	f043 0302 	orr.w	r3, r3, #2
 8002d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d32:	4b6e      	ldr	r3, [pc, #440]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002d40:	2318      	movs	r3, #24
 8002d42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d58:	2305      	movs	r3, #5
 8002d5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d62:	4619      	mov	r1, r3
 8002d64:	4862      	ldr	r0, [pc, #392]	; (8002ef0 <HAL_SPI_MspInit+0x240>)
 8002d66:	f006 f975 	bl	8009054 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002d6a:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d6c:	4a62      	ldr	r2, [pc, #392]	; (8002ef8 <HAL_SPI_MspInit+0x248>)
 8002d6e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d70:	4b60      	ldr	r3, [pc, #384]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d72:	2225      	movs	r2, #37	; 0x25
 8002d74:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d76:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7c:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d82:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d88:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d90:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d92:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d98:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da0:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da6:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002dac:	4851      	ldr	r0, [pc, #324]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002dae:	f003 fafb 	bl	80063a8 <HAL_DMA_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002db8:	f7ff fa8a 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a4d      	ldr	r2, [pc, #308]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002dc0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002dc2:	4a4c      	ldr	r2, [pc, #304]	; (8002ef4 <HAL_SPI_MspInit+0x244>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2105      	movs	r1, #5
 8002dcc:	2023      	movs	r0, #35	; 0x23
 8002dce:	f002 febd 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002dd2:	2023      	movs	r0, #35	; 0x23
 8002dd4:	f002 fed4 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002dd8:	e081      	b.n	8002ede <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a47      	ldr	r2, [pc, #284]	; (8002efc <HAL_SPI_MspInit+0x24c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d17c      	bne.n	8002ede <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f009 ff0f 	bl	800cc1c <HAL_RCCEx_PeriphCLKConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8002e04:	f7ff fa64 	bl	80022d0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0e:	4a37      	ldr	r2, [pc, #220]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e26:	4b31      	ldr	r3, [pc, #196]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_SPI_MspInit+0x23c>)
 8002e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002e44:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4821      	ldr	r0, [pc, #132]	; (8002ef0 <HAL_SPI_MspInit+0x240>)
 8002e6c:	f006 f8f2 	bl	8009054 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002e70:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_SPI_MspInit+0x254>)
 8002e74:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e78:	2227      	movs	r2, #39	; 0x27
 8002e7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e96:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e9e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002eb2:	4813      	ldr	r0, [pc, #76]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002eb4:	f003 fa78 	bl	80063a8 <HAL_DMA_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8002ebe:	f7ff fa07 	bl	80022d0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002ec6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_SPI_MspInit+0x250>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	2024      	movs	r0, #36	; 0x24
 8002ed4:	f002 fe3a 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002ed8:	2024      	movs	r0, #36	; 0x24
 8002eda:	f002 fe51 	bl	8005b80 <HAL_NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	37f0      	adds	r7, #240	; 0xf0
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40013000 	.word	0x40013000
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	58020400 	.word	0x58020400
 8002ef4:	24001be4 	.word	0x24001be4
 8002ef8:	40020070 	.word	0x40020070
 8002efc:	40003800 	.word	0x40003800
 8002f00:	24001c5c 	.word	0x24001c5c
 8002f04:	40020058 	.word	0x40020058

08002f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_MspInit+0x38>)
 8002f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_MspInit+0x38>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_MspInit+0x38>)
 8002f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f06f 0001 	mvn.w	r0, #1
 8002f34:	f002 fe0a 	bl	8005b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	58024400 	.word	0x58024400

08002f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b090      	sub	sp, #64	; 0x40
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	d827      	bhi.n	8002fa2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002f52:	2200      	movs	r2, #0
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	2036      	movs	r0, #54	; 0x36
 8002f58:	f002 fdf8 	bl	8005b4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f5c:	2036      	movs	r0, #54	; 0x36
 8002f5e:	f002 fe0f 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_InitTick+0xc4>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f68:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_InitTick+0xc8>)
 8002f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6e:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_InitTick+0xc8>)
 8002f70:	f043 0310 	orr.w	r3, r3, #16
 8002f74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_InitTick+0xc8>)
 8002f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f86:	f107 0210 	add.w	r2, r7, #16
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f009 fe01 	bl	800cb98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_InitTick+0x6a>
 8002fa0:	e001      	b.n	8002fa6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02b      	b.n	8002ffe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f009 fdcb 	bl	800cb40 <HAL_RCC_GetPCLK1Freq>
 8002faa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002fac:	e004      	b.n	8002fb8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fae:	f009 fdc7 	bl	800cb40 <HAL_RCC_GetPCLK1Freq>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fba:	4a15      	ldr	r2, [pc, #84]	; (8003010 <HAL_InitTick+0xcc>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_InitTick+0xd0>)
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <HAL_InitTick+0xd4>)
 8002fca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_InitTick+0xd0>)
 8002fce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_InitTick+0xd0>)
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_InitTick+0xd0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_InitTick+0xd0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fe6:	480b      	ldr	r0, [pc, #44]	; (8003014 <HAL_InitTick+0xd0>)
 8002fe8:	f00d fbd7 	bl	801079a <HAL_TIM_Base_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ff2:	4808      	ldr	r0, [pc, #32]	; (8003014 <HAL_InitTick+0xd0>)
 8002ff4:	f00d fc28 	bl	8010848 <HAL_TIM_Base_Start_IT>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	e000      	b.n	8002ffe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3740      	adds	r7, #64	; 0x40
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2400008c 	.word	0x2400008c
 800300c:	58024400 	.word	0x58024400
 8003010:	431bde83 	.word	0x431bde83
 8003014:	24001cd4 	.word	0x24001cd4
 8003018:	40001000 	.word	0x40001000

0800301c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003020:	e7fe      	b.n	8003020 <NMI_Handler+0x4>

08003022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <HardFault_Handler+0x4>

08003028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <MemManage_Handler+0x4>

0800302e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003032:	e7fe      	b.n	8003032 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003038:	e7fe      	b.n	8003038 <UsageFault_Handler+0x4>

0800303a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <DMA1_Stream0_IRQHandler+0x10>)
 800304e:	f004 fcd5 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	240001e4 	.word	0x240001e4

0800305c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <DMA1_Stream1_IRQHandler+0x10>)
 8003062:	f004 fccb 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2400025c 	.word	0x2400025c

08003070 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <DMA1_Stream2_IRQHandler+0x10>)
 8003076:	f004 fcc1 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	24001e50 	.word	0x24001e50

08003084 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <DMA1_Stream3_IRQHandler+0x10>)
 800308a:	f004 fcb7 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24001c5c 	.word	0x24001c5c

08003098 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <DMA1_Stream4_IRQHandler+0x10>)
 800309e:	f004 fcad 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	24001be4 	.word	0x24001be4

080030ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <DMA1_Stream5_IRQHandler+0x10>)
 80030b2:	f004 fca3 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	240002e8 	.word	0x240002e8

080030c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <DMA1_Stream6_IRQHandler+0x10>)
 80030c6:	f004 fc99 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	24001914 	.word	0x24001914

080030d4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <TIM1_BRK_IRQHandler+0x10>)
 80030da:	f00d fecc 	bl	8010e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	24001d24 	.word	0x24001d24

080030e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <TIM1_UP_IRQHandler+0x10>)
 80030ee:	f00d fec2 	bl	8010e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	24001d24 	.word	0x24001d24

080030fc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <TIM1_TRG_COM_IRQHandler+0x10>)
 8003102:	f00d feb8 	bl	8010e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	24001d24 	.word	0x24001d24

08003110 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <TIM1_CC_IRQHandler+0x10>)
 8003116:	f00d feae 	bl	8010e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	24001d24 	.word	0x24001d24

08003124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM2_IRQHandler+0x10>)
 800312a:	f00d fea4 	bl	8010e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	24001d70 	.word	0x24001d70

08003138 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <I2C1_EV_IRQHandler+0x10>)
 800313e:	f006 fc0b 	bl	8009958 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	240018c0 	.word	0x240018c0

0800314c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <I2C1_ER_IRQHandler+0x10>)
 8003152:	f006 fc1b 	bl	800998c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	240018c0 	.word	0x240018c0

08003160 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <SPI1_IRQHandler+0x10>)
 8003166:	f00c ffe5 	bl	8010134 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	24001ad4 	.word	0x24001ad4

08003174 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <SPI2_IRQHandler+0x10>)
 800317a:	f00c ffdb 	bl	8010134 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	24001b5c 	.word	0x24001b5c

08003188 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <USART1_IRQHandler+0x10>)
 800318e:	f00f f9b5 	bl	80124fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	24001dbc 	.word	0x24001dbc

0800319c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <DMA1_Stream7_IRQHandler+0x10>)
 80031a2:	f004 fc2b 	bl	80079fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2400198c 	.word	0x2400198c

080031b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <TIM6_DAC_IRQHandler+0x20>)
 80031b6:	791b      	ldrb	r3, [r3, #4]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80031be:	4804      	ldr	r0, [pc, #16]	; (80031d0 <TIM6_DAC_IRQHandler+0x20>)
 80031c0:	f002 fe73 	bl	8005eaa <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <TIM6_DAC_IRQHandler+0x24>)
 80031c6:	f00d fe56 	bl	8010e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	240002d4 	.word	0x240002d4
 80031d4:	24001cd4 	.word	0x24001cd4

080031d8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <ITM_SendChar+0x48>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <ITM_SendChar+0x48>)
 80031e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ec:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <ITM_SendChar+0x4c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <ITM_SendChar+0x4c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80031fa:	bf00      	nop
 80031fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f8      	beq.n	80031fc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800320a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	6013      	str	r3, [r2, #0]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000edfc 	.word	0xe000edfc
 8003224:	e0000e00 	.word	0xe0000e00

08003228 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e00a      	b.n	8003250 <_read+0x28>
		*ptr++ = __io_getchar();
 800323a:	f3af 8000 	nop.w
 800323e:	4601      	mov	r1, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	60ba      	str	r2, [r7, #8]
 8003246:	b2ca      	uxtb	r2, r1
 8003248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbf0      	blt.n	800323a <_read+0x12>
	}

	return len;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e009      	b.n	8003288 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffab 	bl	80031d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbf1      	blt.n	8003274 <_write+0x12>
	}
	return len;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_close>:

int _close(int file) {
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c2:	605a      	str	r2, [r3, #4]
	return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_isatty>:

int _isatty(int file) {
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
		errno = ENOMEM;
 8003334:	f014 fe7a 	bl	801802c <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	24080000 	.word	0x24080000
 8003364:	00000400 	.word	0x00000400
 8003368:	24001d20 	.word	0x24001d20
 800336c:	240068e0 	.word	0x240068e0

08003370 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003374:	4b37      	ldr	r3, [pc, #220]	; (8003454 <SystemInit+0xe4>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	4a36      	ldr	r2, [pc, #216]	; (8003454 <SystemInit+0xe4>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <SystemInit+0xe8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2b06      	cmp	r3, #6
 800338e:	d807      	bhi.n	80033a0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <SystemInit+0xe8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 030f 	bic.w	r3, r3, #15
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <SystemInit+0xe8>)
 800339a:	f043 0307 	orr.w	r3, r3, #7
 800339e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <SystemInit+0xec>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2d      	ldr	r2, [pc, #180]	; (800345c <SystemInit+0xec>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <SystemInit+0xec>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <SystemInit+0xec>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4929      	ldr	r1, [pc, #164]	; (800345c <SystemInit+0xec>)
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <SystemInit+0xf0>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <SystemInit+0xe8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <SystemInit+0xe8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 030f 	bic.w	r3, r3, #15
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <SystemInit+0xe8>)
 80033d4:	f043 0307 	orr.w	r3, r3, #7
 80033d8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <SystemInit+0xec>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80033e0:	4b1e      	ldr	r3, [pc, #120]	; (800345c <SystemInit+0xec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <SystemInit+0xec>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <SystemInit+0xec>)
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <SystemInit+0xf4>)
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <SystemInit+0xec>)
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <SystemInit+0xf8>)
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <SystemInit+0xec>)
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <SystemInit+0xfc>)
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <SystemInit+0xec>)
 8003400:	2200      	movs	r2, #0
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <SystemInit+0xec>)
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <SystemInit+0xfc>)
 8003408:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <SystemInit+0xec>)
 800340c:	2200      	movs	r2, #0
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <SystemInit+0xec>)
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <SystemInit+0xfc>)
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <SystemInit+0xec>)
 8003418:	2200      	movs	r2, #0
 800341a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <SystemInit+0xec>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0e      	ldr	r2, [pc, #56]	; (800345c <SystemInit+0xec>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <SystemInit+0xec>)
 800342a:	2200      	movs	r2, #0
 800342c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <SystemInit+0x100>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <SystemInit+0x104>)
 8003434:	4013      	ands	r3, r2
 8003436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343a:	d202      	bcs.n	8003442 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <SystemInit+0x108>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <SystemInit+0x10c>)
 8003444:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003448:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	52002000 	.word	0x52002000
 800345c:	58024400 	.word	0x58024400
 8003460:	eaf6ed7f 	.word	0xeaf6ed7f
 8003464:	02020200 	.word	0x02020200
 8003468:	01ff0000 	.word	0x01ff0000
 800346c:	01010280 	.word	0x01010280
 8003470:	5c001000 	.word	0x5c001000
 8003474:	ffff0000 	.word	0xffff0000
 8003478:	51008108 	.word	0x51008108
 800347c:	52004000 	.word	0x52004000

08003480 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b09a      	sub	sp, #104	; 0x68
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003494:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
 80034b0:	615a      	str	r2, [r3, #20]
 80034b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	222c      	movs	r2, #44	; 0x2c
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f014 fdee 	bl	801809c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034c0:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034c2:	4a45      	ldr	r2, [pc, #276]	; (80035d8 <MX_TIM1_Init+0x158>)
 80034c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 80034c6:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034c8:	224a      	movs	r2, #74	; 0x4a
 80034ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80034d2:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034d4:	f24f 4223 	movw	r2, #62499	; 0xf423
 80034d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034da:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034e0:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034ec:	4839      	ldr	r0, [pc, #228]	; (80035d4 <MX_TIM1_Init+0x154>)
 80034ee:	f00d f954 	bl	801079a <HAL_TIM_Base_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80034f8:	f7fe feea 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003500:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003502:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003506:	4619      	mov	r1, r3
 8003508:	4832      	ldr	r0, [pc, #200]	; (80035d4 <MX_TIM1_Init+0x154>)
 800350a:	f00d fecf 	bl	80112ac <HAL_TIM_ConfigClockSource>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003514:	f7fe fedc 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003518:	482e      	ldr	r0, [pc, #184]	; (80035d4 <MX_TIM1_Init+0x154>)
 800351a:	f00d fc4b 	bl	8010db4 <HAL_TIM_PWM_Init>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003524:	f7fe fed4 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003528:	2300      	movs	r3, #0
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800352c:	2300      	movs	r3, #0
 800352e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003534:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003538:	4619      	mov	r1, r3
 800353a:	4826      	ldr	r0, [pc, #152]	; (80035d4 <MX_TIM1_Init+0x154>)
 800353c:	f00e fc0c 	bl	8011d58 <HAL_TIMEx_MasterConfigSynchronization>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003546:	f7fe fec3 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800354a:	2360      	movs	r3, #96	; 0x60
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800354e:	f240 13df 	movw	r3, #479	; 0x1df
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003554:	2300      	movs	r3, #0
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003558:	2300      	movs	r3, #0
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800356c:	2200      	movs	r2, #0
 800356e:	4619      	mov	r1, r3
 8003570:	4818      	ldr	r0, [pc, #96]	; (80035d4 <MX_TIM1_Init+0x154>)
 8003572:	f00d fd87 	bl	8011084 <HAL_TIM_PWM_ConfigChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800357c:	f7fe fea8 	bl	80022d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003598:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4807      	ldr	r0, [pc, #28]	; (80035d4 <MX_TIM1_Init+0x154>)
 80035b6:	f00e fc5d 	bl	8011e74 <HAL_TIMEx_ConfigBreakDeadTime>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80035c0:	f7fe fe86 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035c4:	4803      	ldr	r0, [pc, #12]	; (80035d4 <MX_TIM1_Init+0x154>)
 80035c6:	f000 f8dd 	bl	8003784 <HAL_TIM_MspPostInit>

}
 80035ca:	bf00      	nop
 80035cc:	3768      	adds	r7, #104	; 0x68
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	24001d24 	.word	0x24001d24
 80035d8:	40010000 	.word	0x40010000

080035dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08e      	sub	sp, #56	; 0x38
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035fc:	463b      	mov	r3, r7
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	611a      	str	r2, [r3, #16]
 800360a:	615a      	str	r2, [r3, #20]
 800360c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003614:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003618:	224a      	movs	r2, #74	; 0x4a
 800361a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <MX_TIM2_Init+0xe8>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003624:	f640 4234 	movw	r2, #3124	; 0xc34
 8003628:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <MX_TIM2_Init+0xe8>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003636:	4823      	ldr	r0, [pc, #140]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003638:	f00d f8af 	bl	801079a <HAL_TIM_Base_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003642:	f7fe fe45 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800364c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003650:	4619      	mov	r1, r3
 8003652:	481c      	ldr	r0, [pc, #112]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003654:	f00d fe2a 	bl	80112ac <HAL_TIM_ConfigClockSource>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800365e:	f7fe fe37 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003662:	4818      	ldr	r0, [pc, #96]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003664:	f00d fba6 	bl	8010db4 <HAL_TIM_PWM_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800366e:	f7fe fe2f 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003672:	2320      	movs	r3, #32
 8003674:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	4619      	mov	r1, r3
 8003680:	4810      	ldr	r0, [pc, #64]	; (80036c4 <MX_TIM2_Init+0xe8>)
 8003682:	f00e fb69 	bl	8011d58 <HAL_TIMEx_MasterConfigSynchronization>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800368c:	f7fe fe20 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003690:	2360      	movs	r3, #96	; 0x60
 8003692:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036a0:	463b      	mov	r3, r7
 80036a2:	220c      	movs	r2, #12
 80036a4:	4619      	mov	r1, r3
 80036a6:	4807      	ldr	r0, [pc, #28]	; (80036c4 <MX_TIM2_Init+0xe8>)
 80036a8:	f00d fcec 	bl	8011084 <HAL_TIM_PWM_ConfigChannel>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80036b2:	f7fe fe0d 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036b6:	4803      	ldr	r0, [pc, #12]	; (80036c4 <MX_TIM2_Init+0xe8>)
 80036b8:	f000 f864 	bl	8003784 <HAL_TIM_MspPostInit>

}
 80036bc:	bf00      	nop
 80036be:	3738      	adds	r7, #56	; 0x38
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	24001d70 	.word	0x24001d70

080036c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <HAL_TIM_Base_MspInit+0xb4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d12f      	bne.n	800373a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_TIM_Base_MspInit+0xb8>)
 80036dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <HAL_TIM_Base_MspInit+0xb8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_TIM_Base_MspInit+0xb8>)
 80036ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80036f8:	2200      	movs	r2, #0
 80036fa:	2105      	movs	r1, #5
 80036fc:	2018      	movs	r0, #24
 80036fe:	f002 fa25 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003702:	2018      	movs	r0, #24
 8003704:	f002 fa3c 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2105      	movs	r1, #5
 800370c:	2019      	movs	r0, #25
 800370e:	f002 fa1d 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003712:	2019      	movs	r0, #25
 8003714:	f002 fa34 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003718:	2200      	movs	r2, #0
 800371a:	2105      	movs	r1, #5
 800371c:	201a      	movs	r0, #26
 800371e:	f002 fa15 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003722:	201a      	movs	r0, #26
 8003724:	f002 fa2c 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2105      	movs	r1, #5
 800372c:	201b      	movs	r0, #27
 800372e:	f002 fa0d 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003732:	201b      	movs	r0, #27
 8003734:	f002 fa24 	bl	8005b80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003738:	e01b      	b.n	8003772 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d116      	bne.n	8003772 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_TIM_Base_MspInit+0xb8>)
 8003746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <HAL_TIM_Base_MspInit+0xb8>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_TIM_Base_MspInit+0xb8>)
 8003756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2105      	movs	r1, #5
 8003766:	201c      	movs	r0, #28
 8003768:	f002 f9f0 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800376c:	201c      	movs	r0, #28
 800376e:	f002 fa07 	bl	8005b80 <HAL_NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	58024400 	.word	0x58024400

08003784 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_TIM_MspPostInit+0xb8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d120      	bne.n	80037e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	4619      	mov	r1, r3
 80037e0:	4818      	ldr	r0, [pc, #96]	; (8003844 <HAL_TIM_MspPostInit+0xc0>)
 80037e2:	f005 fc37 	bl	8009054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037e6:	e024      	b.n	8003832 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d11f      	bne.n	8003832 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037fa:	f043 0302 	orr.w	r3, r3, #2
 80037fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 8003804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <HAL_TIM_MspPostInit+0xc4>)
 800382e:	f005 fc11 	bl	8009054 <HAL_GPIO_Init>
}
 8003832:	bf00      	nop
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	58024400 	.word	0x58024400
 8003844:	58020000 	.word	0x58020000
 8003848:	58020400 	.word	0x58020400

0800384c <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <get_uptime+0x94>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 800385e:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <get_uptime+0x98>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <get_uptime+0x94>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	429a      	cmp	r2, r3
 800386c:	d005      	beq.n	800387a <get_uptime+0x2e>
		ms = uptime_millis;
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <get_uptime+0x94>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <get_uptime+0x98>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003880:	fb03 f202 	mul.w	r2, r3, r2
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <get_uptime+0x98>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	3301      	adds	r3, #1
 800388a:	4917      	ldr	r1, [pc, #92]	; (80038e8 <get_uptime+0x9c>)
 800388c:	fba1 1303 	umull	r1, r3, r1, r3
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	fbb1 f3f3 	udiv	r3, r1, r3
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <get_uptime+0x5a>
		uptime = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	0c1a      	lsrs	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	0a1a      	lsrs	r2, r3, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3302      	adds	r3, #2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3303      	adds	r3, #3
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	24001a54 	.word	0x24001a54
 80038e4:	e000e010 	.word	0xe000e010
 80038e8:	10624dd3 	.word	0x10624dd3

080038ec <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	2200      	movs	r2, #0
 80038fa:	4619      	mov	r1, r3
 80038fc:	4821      	ldr	r0, [pc, #132]	; (8003984 <get_timestamp+0x98>)
 80038fe:	f00b ffab 	bl	800f858 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	2200      	movs	r2, #0
 8003908:	4619      	mov	r1, r3
 800390a:	481e      	ldr	r0, [pc, #120]	; (8003984 <get_timestamp+0x98>)
 800390c:	f00c f888 	bl	800fa20 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2264      	movs	r2, #100	; 0x64
 8003914:	fb03 f202 	mul.w	r2, r3, r2
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <get_timestamp+0x9c>)
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3301      	adds	r3, #1
 8003928:	7b7a      	ldrb	r2, [r7, #13]
 800392a:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3302      	adds	r3, #2
 8003930:	7bba      	ldrb	r2, [r7, #14]
 8003932:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3303      	adds	r3, #3
 8003938:	7c3a      	ldrb	r2, [r7, #16]
 800393a:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	7c7a      	ldrb	r2, [r7, #17]
 8003942:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3305      	adds	r3, #5
 8003948:	7cba      	ldrb	r2, [r7, #18]
 800394a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	0e1a      	lsrs	r2, r3, #24
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3306      	adds	r3, #6
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	0c1a      	lsrs	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3307      	adds	r3, #7
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	0a1a      	lsrs	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3308      	adds	r3, #8
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3309      	adds	r3, #9
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	24001a68 	.word	0x24001a68
 8003988:	000f4240 	.word	0x000f4240

0800398c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003992:	4a31      	ldr	r2, [pc, #196]	; (8003a58 <MX_USART1_UART_Init+0xcc>)
 8003994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003998:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800399c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039b0:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039b2:	220c      	movs	r2, #12
 80039b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039d4:	481f      	ldr	r0, [pc, #124]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039d6:	f00e fae9 	bl	8011fac <HAL_UART_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80039e0:	f7fe fc76 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039e4:	2100      	movs	r1, #0
 80039e6:	481b      	ldr	r0, [pc, #108]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039e8:	f011 f82f 	bl	8014a4a <HAL_UARTEx_SetTxFifoThreshold>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80039f2:	f7fe fc6d 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039f6:	2100      	movs	r1, #0
 80039f8:	4816      	ldr	r0, [pc, #88]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 80039fa:	f011 f864 	bl	8014ac6 <HAL_UARTEx_SetRxFifoThreshold>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a04:	f7fe fc64 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a08:	4812      	ldr	r0, [pc, #72]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a0a:	f010 ffe5 	bl	80149d8 <HAL_UARTEx_DisableFifoMode>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a14:	f7fe fc5c 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003a18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a1c:	480d      	ldr	r0, [pc, #52]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a1e:	f011 f852 	bl	8014ac6 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8003a22:	480c      	ldr	r0, [pc, #48]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a24:	f010 ff9d 	bl	8014962 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003a28:	480a      	ldr	r0, [pc, #40]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a2a:	f010 ff67 	bl	80148fc <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a3c:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <MX_USART1_UART_Init+0xc8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a4c:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24001dbc 	.word	0x24001dbc
 8003a58:	40011000 	.word	0x40011000

08003a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0ba      	sub	sp, #232	; 0xe8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a74:	f107 0310 	add.w	r3, r7, #16
 8003a78:	22c0      	movs	r2, #192	; 0xc0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f014 fb0d 	bl	801809c <memset>
  if(uartHandle->Instance==USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <HAL_UART_MspInit+0x130>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d17b      	bne.n	8003b84 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a8c:	f04f 0201 	mov.w	r2, #1
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003a98:	2318      	movs	r3, #24
 8003a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a9e:	f107 0310 	add.w	r3, r7, #16
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f009 f8ba 	bl	800cc1c <HAL_RCCEx_PeriphCLKConfig>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003aae:	f7fe fc0f 	bl	80022d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab8:	4a35      	ldr	r2, [pc, #212]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003aba:	f043 0310 	orr.w	r3, r3, #16
 8003abe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ac2:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad6:	4a2e      	ldr	r2, [pc, #184]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003aee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b08:	2307      	movs	r3, #7
 8003b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b12:	4619      	mov	r1, r3
 8003b14:	481f      	ldr	r0, [pc, #124]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b16:	f005 fa9d 	bl	8009054 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <HAL_UART_MspInit+0x140>)
 8003b1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b22:	222a      	movs	r2, #42	; 0x2a
 8003b24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b28:	2240      	movs	r2, #64	; 0x40
 8003b2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b58:	480f      	ldr	r0, [pc, #60]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b5a:	f002 fc25 	bl	80063a8 <HAL_DMA_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003b64:	f7fe fbb4 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2105      	movs	r1, #5
 8003b78:	2025      	movs	r0, #37	; 0x25
 8003b7a:	f001 ffe7 	bl	8005b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b7e:	2025      	movs	r0, #37	; 0x25
 8003b80:	f001 fffe 	bl	8005b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b84:	bf00      	nop
 8003b86:	37e8      	adds	r7, #232	; 0xe8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40011000 	.word	0x40011000
 8003b90:	58024400 	.word	0x58024400
 8003b94:	58020000 	.word	0x58020000
 8003b98:	24001e50 	.word	0x24001e50
 8003b9c:	40020040 	.word	0x40020040

08003ba0 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003baa:	4bc2      	ldr	r3, [pc, #776]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003bb0:	4bc0      	ldr	r3, [pc, #768]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003bb6:	4bbf      	ldr	r3, [pc, #764]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003bbc:	4bbd      	ldr	r3, [pc, #756]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bc2:	4bbc      	ldr	r3, [pc, #752]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bc8:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003bca:	4bba      	ldr	r3, [pc, #744]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003bd0:	4bb8      	ldr	r3, [pc, #736]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003bd6:	4bb7      	ldr	r3, [pc, #732]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003bdc:	4bb5      	ldr	r3, [pc, #724]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003be2:	4bb4      	ldr	r3, [pc, #720]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003be8:	4bb2      	ldr	r3, [pc, #712]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bea:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bee:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003bf0:	4bb0      	ldr	r3, [pc, #704]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003bf6:	4baf      	ldr	r3, [pc, #700]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003bfc:	4bad      	ldr	r3, [pc, #692]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003c02:	4bac      	ldr	r3, [pc, #688]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003c08:	4baa      	ldr	r3, [pc, #680]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c0e:	4ba9      	ldr	r3, [pc, #676]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c10:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c14:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003c16:	4ba7      	ldr	r3, [pc, #668]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003c1c:	4ba5      	ldr	r3, [pc, #660]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c1e:	2203      	movs	r2, #3
 8003c20:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003c22:	4ba4      	ldr	r3, [pc, #656]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003c28:	4ba2      	ldr	r3, [pc, #648]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003c30:	4ba0      	ldr	r3, [pc, #640]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c36:	4b9f      	ldr	r3, [pc, #636]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c38:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c3c:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003c3e:	4b9d      	ldr	r3, [pc, #628]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003c44:	4b9b      	ldr	r3, [pc, #620]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c46:	2204      	movs	r2, #4
 8003c48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003c4c:	4b99      	ldr	r3, [pc, #612]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003c54:	4b97      	ldr	r3, [pc, #604]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003c5c:	4b95      	ldr	r3, [pc, #596]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c62:	4b94      	ldr	r3, [pc, #592]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c64:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c68:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003c6a:	4b92      	ldr	r3, [pc, #584]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003c70:	4b90      	ldr	r3, [pc, #576]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c72:	2205      	movs	r2, #5
 8003c74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003c78:	4b8e      	ldr	r3, [pc, #568]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003c80:	4b8c      	ldr	r3, [pc, #560]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003c88:	4b8a      	ldr	r3, [pc, #552]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c8e:	4b89      	ldr	r3, [pc, #548]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c90:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c94:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003c96:	4b87      	ldr	r3, [pc, #540]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003c9c:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003ca4:	4b83      	ldr	r3, [pc, #524]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003cac:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003cb4:	4b7f      	ldr	r3, [pc, #508]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cbc:	4b7d      	ldr	r3, [pc, #500]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cc2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003cc6:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003cce:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003cd6:	4b77      	ldr	r3, [pc, #476]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003cde:	4b75      	ldr	r3, [pc, #468]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003ce6:	4b73      	ldr	r3, [pc, #460]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cee:	4b71      	ldr	r3, [pc, #452]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cf4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003cf8:	4b6e      	ldr	r3, [pc, #440]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003d00:	4b6c      	ldr	r3, [pc, #432]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d02:	2208      	movs	r2, #8
 8003d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003d08:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003d10:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d22:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003d26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003d2a:	4b62      	ldr	r3, [pc, #392]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d2c:	f640 3283 	movw	r2, #2947	; 0xb83
 8003d30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003d34:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d36:	2209      	movs	r2, #9
 8003d38:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003d3c:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003d44:	4b5b      	ldr	r3, [pc, #364]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003d4c:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003d54:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d56:	f640 7245 	movw	r2, #3909	; 0xf45
 8003d5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003d5e:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003d66:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d68:	220a      	movs	r2, #10
 8003d6a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003d6e:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003d76:	4b4f      	ldr	r3, [pc, #316]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003d7e:	4b4d      	ldr	r3, [pc, #308]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003d86:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d88:	f640 7245 	movw	r2, #3909	; 0xf45
 8003d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003d90:	4b48      	ldr	r3, [pc, #288]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d92:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003d96:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003d9a:	4b46      	ldr	r3, [pc, #280]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003d9c:	220b      	movs	r2, #11
 8003d9e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003da2:	4b44      	ldr	r3, [pc, #272]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003daa:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003db2:	4b40      	ldr	r3, [pc, #256]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003dbc:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003dc0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003dc6:	f640 6276 	movw	r2, #3702	; 0xe76
 8003dca:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003dce:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003dd0:	220c      	movs	r2, #12
 8003dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003dd6:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003dde:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003dee:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003df0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003df4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003df8:	4b2e      	ldr	r3, [pc, #184]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e02:	220d      	movs	r2, #13
 8003e04:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003e10:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e22:	f640 7238 	movw	r2, #3896	; 0xf38
 8003e26:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e2c:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003e30:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003e34:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e36:	220e      	movs	r2, #14
 8003e38:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003e44:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e56:	f640 7245 	movw	r2, #3909	; 0xf45
 8003e5a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e60:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003e64:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003e68:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e8a:	f241 0264 	movw	r2, #4196	; 0x1064
 8003e8e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003eaa:	4b02      	ldr	r3, [pc, #8]	; (8003eb4 <voltage_monitor_init+0x314>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003eb2:	e001      	b.n	8003eb8 <voltage_monitor_init+0x318>
 8003eb4:	24001ec8 	.word	0x24001ec8
	rail_monitor[RAIL_n800v].data = 0;
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <voltage_monitor_init+0x378>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <voltage_monitor_init+0x378>)
 8003ec2:	f640 5208 	movw	r2, #3336	; 0xd08
 8003ec6:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <voltage_monitor_init+0x378>)
 8003ecc:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003ed0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <voltage_monitor_init+0x378>)
 8003ed6:	2211      	movs	r2, #17
 8003ed8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <voltage_monitor_init+0x378>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <voltage_monitor_init+0x378>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <voltage_monitor_init+0x378>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <voltage_monitor_init+0x378>)
 8003ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003efa:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <voltage_monitor_init+0x378>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	71fb      	strb	r3, [r7, #7]

	return status;
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	24001ec8 	.word	0x24001ec8

08003f1c <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	460a      	mov	r2, r1
 8003f26:	71fb      	strb	r3, [r7, #7]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003f30:	79fa      	ldrb	r2, [r7, #7]
 8003f32:	4909      	ldr	r1, [pc, #36]	; (8003f58 <set_rail_monitor_enable+0x3c>)
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3302      	adds	r3, #2
 8003f40:	79ba      	ldrb	r2, [r7, #6]
 8003f42:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]

	return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	24001ec8 	.word	0x24001ec8

08003f5c <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <get_rail_monitor+0x10>)
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	24001ec8 	.word	0x24001ec8

08003f70 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fcec 	bl	800295c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe fd17 	bl	80029bc <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fd64 	bl	8002a60 <sample_hk_adc3>
 8003f98:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003f9a:	4b25      	ldr	r3, [pc, #148]	; (8004030 <set_rail_monitor+0xc0>)
 8003f9c:	809a      	strh	r2, [r3, #4]
 8003f9e:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003fa0:	4b23      	ldr	r3, [pc, #140]	; (8004030 <set_rail_monitor+0xc0>)
 8003fa2:	81da      	strh	r2, [r3, #14]
 8003fa4:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <set_rail_monitor+0xc0>)
 8003fa8:	831a      	strh	r2, [r3, #24]
 8003faa:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <set_rail_monitor+0xc0>)
 8003fae:	845a      	strh	r2, [r3, #34]	; 0x22
 8003fb0:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <set_rail_monitor+0xc0>)
 8003fb4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <set_rail_monitor+0xc0>)
 8003fba:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fbc:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <set_rail_monitor+0xc0>)
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003fc4:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <set_rail_monitor+0xc0>)
 8003fc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003fcc:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <set_rail_monitor+0xc0>)
 8003fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003fd4:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <set_rail_monitor+0xc0>)
 8003fd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8003fdc:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <set_rail_monitor+0xc0>)
 8003fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8003fe4:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <set_rail_monitor+0xc0>)
 8003fe8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003fec:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <set_rail_monitor+0xc0>)
 8003ff0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003ff4:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <set_rail_monitor+0xc0>)
 8003ff8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003ffc:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <set_rail_monitor+0xc0>)
 8004000:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8004004:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <set_rail_monitor+0xc0>)
 8004008:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800400c:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <set_rail_monitor+0xc0>)
 8004010:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004014:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <set_rail_monitor+0xc0>)
 8004018:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8004022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004026:	4618      	mov	r0, r3
 8004028:	3728      	adds	r7, #40	; 0x28
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	24001ec8 	.word	0x24001ec8

08004034 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8004042:	89fb      	ldrh	r3, [r7, #14]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	db05      	blt.n	8004056 <in_range+0x22>
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	dc01      	bgt.n	8004056 <in_range+0x22>
		return 1;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <in_range+0x24>
	}
	return 0;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800409c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004068:	f7ff f982 	bl	8003370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800406c:	480c      	ldr	r0, [pc, #48]	; (80040a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800406e:	490d      	ldr	r1, [pc, #52]	; (80040a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004074:	e002      	b.n	800407c <LoopCopyDataInit>

08004076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800407a:	3304      	adds	r3, #4

0800407c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800407c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800407e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004080:	d3f9      	bcc.n	8004076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004084:	4c0a      	ldr	r4, [pc, #40]	; (80040b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004088:	e001      	b.n	800408e <LoopFillZerobss>

0800408a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800408a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800408c:	3204      	adds	r2, #4

0800408e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800408e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004090:	d3fb      	bcc.n	800408a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004092:	f013 ffd1 	bl	8018038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004096:	f7fd ff45 	bl	8001f24 <main>
  bx  lr
 800409a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800409c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80040a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040a4:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 80040a8:	08018f68 	.word	0x08018f68
  ldr r2, =_sbss
 80040ac:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80040b0:	240068e0 	.word	0x240068e0

080040b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b4:	e7fe      	b.n	80040b4 <ADC3_IRQHandler>
	...

080040b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040be:	2003      	movs	r0, #3
 80040c0:	f001 fd39 	bl	8005b36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040c4:	f008 fb92 	bl	800c7ec <HAL_RCC_GetSysClockFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_Init+0x68>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	4913      	ldr	r1, [pc, #76]	; (8004124 <HAL_Init+0x6c>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_Init+0x68>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <HAL_Init+0x6c>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <HAL_Init+0x70>)
 80040fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040fc:	4a0b      	ldr	r2, [pc, #44]	; (800412c <HAL_Init+0x74>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004102:	2005      	movs	r0, #5
 8004104:	f7fe ff1e 	bl	8002f44 <HAL_InitTick>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e002      	b.n	8004118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004112:	f7fe fef9 	bl	8002f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	58024400 	.word	0x58024400
 8004124:	08018eb4 	.word	0x08018eb4
 8004128:	24000088 	.word	0x24000088
 800412c:	24000084 	.word	0x24000084

08004130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_IncTick+0x20>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_IncTick+0x24>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4413      	add	r3, r2
 8004140:	4a04      	ldr	r2, [pc, #16]	; (8004154 <HAL_IncTick+0x24>)
 8004142:	6013      	str	r3, [r2, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	24000090 	.word	0x24000090
 8004154:	24001f7c 	.word	0x24001f7c

08004158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return uwTick;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_GetTick+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	24001f7c 	.word	0x24001f7c

08004170 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_GetREVID+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0c1b      	lsrs	r3, r3, #16
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	5c001000 	.word	0x5c001000

08004188 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	43db      	mvns	r3, r3
 800419a:	401a      	ands	r2, r3
 800419c:	4904      	ldr	r1, [pc, #16]	; (80041b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	58000400 	.word	0x58000400

080041b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3360      	adds	r3, #96	; 0x60
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	430b      	orrs	r3, r1
 800424a:	431a      	orrs	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	611a      	str	r2, [r3, #16]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800428e:	b480      	push	{r7}
 8004290:	b087      	sub	sp, #28
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3360      	adds	r3, #96	; 0x60
 800429e:	461a      	mov	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	601a      	str	r2, [r3, #0]
  }
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b087      	sub	sp, #28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3330      	adds	r3, #48	; 0x30
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	4413      	add	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	211f      	movs	r1, #31
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	401a      	ands	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0e9b      	lsrs	r3, r3, #26
 8004322:	f003 011f 	and.w	r1, r3, #31
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f023 0203 	bic.w	r2, r3, #3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3314      	adds	r3, #20
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0e5b      	lsrs	r3, r3, #25
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	0d1b      	lsrs	r3, r3, #20
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2107      	movs	r1, #7
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	401a      	ands	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	431a      	orrs	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	43db      	mvns	r3, r3
 80043da:	401a      	ands	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0318 	and.w	r3, r3, #24
 80043e2:	4908      	ldr	r1, [pc, #32]	; (8004404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043e4:	40d9      	lsrs	r1, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	400b      	ands	r3, r1
 80043ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	000fffff 	.word	0x000fffff

08004408 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 031f 	and.w	r3, r3, #31
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6093      	str	r3, [r2, #8]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	5fffffc0 	.word	0x5fffffc0

08004448 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445c:	d101      	bne.n	8004462 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <LL_ADC_EnableInternalRegulator+0x24>)
 800447e:	4013      	ands	r3, r2
 8004480:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	6fffffc0 	.word	0x6fffffc0

08004498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ac:	d101      	bne.n	80044b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <LL_ADC_Enable+0x24>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	7fffffc0 	.word	0x7fffffc0

080044e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <LL_ADC_Disable+0x24>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	f043 0202 	orr.w	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	7fffffc0 	.word	0x7fffffc0

08004510 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <LL_ADC_IsEnabled+0x18>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <LL_ADC_IsEnabled+0x1a>
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d101      	bne.n	800454e <LL_ADC_IsDisableOngoing+0x18>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_IsDisableOngoing+0x1a>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <LL_ADC_REG_StartConversion+0x24>)
 800456a:	4013      	ands	r3, r2
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	7fffffc0 	.word	0x7fffffc0

08004584 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b04      	cmp	r3, #4
 8004596:	d101      	bne.n	800459c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d101      	bne.n	80045c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e18f      	b.n	800490a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fc f9a7 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff19 	bl	8004448 <LL_ADC_IsDeepPowerDownEnabled>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff feff 	bl	8004424 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff34 	bl	8004498 <LL_ADC_IsInternalRegulatorEnabled>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d114      	bne.n	8004660 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff18 	bl	8004470 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004640:	4b87      	ldr	r3, [pc, #540]	; (8004860 <HAL_ADC_Init+0x290>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	4a87      	ldr	r2, [pc, #540]	; (8004864 <HAL_ADC_Init+0x294>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004652:	e002      	b.n	800465a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f9      	bne.n	8004654 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff17 	bl	8004498 <LL_ADC_IsInternalRegulatorEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10d      	bne.n	800468c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f043 0210 	orr.w	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff77 	bl	8004584 <LL_ADC_REG_IsConversionOngoing>
 8004696:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 8129 	bne.w	80048f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 8125 	bne.w	80048f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff ff24 	bl	8004510 <LL_ADC_IsEnabled>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d136      	bne.n	800473c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a65      	ldr	r2, [pc, #404]	; (8004868 <HAL_ADC_Init+0x298>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_ADC_Init+0x112>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a63      	ldr	r2, [pc, #396]	; (800486c <HAL_ADC_Init+0x29c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10e      	bne.n	8004700 <HAL_ADC_Init+0x130>
 80046e2:	4861      	ldr	r0, [pc, #388]	; (8004868 <HAL_ADC_Init+0x298>)
 80046e4:	f7ff ff14 	bl	8004510 <LL_ADC_IsEnabled>
 80046e8:	4604      	mov	r4, r0
 80046ea:	4860      	ldr	r0, [pc, #384]	; (800486c <HAL_ADC_Init+0x29c>)
 80046ec:	f7ff ff10 	bl	8004510 <LL_ADC_IsEnabled>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4323      	orrs	r3, r4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e008      	b.n	8004712 <HAL_ADC_Init+0x142>
 8004700:	485b      	ldr	r0, [pc, #364]	; (8004870 <HAL_ADC_Init+0x2a0>)
 8004702:	f7ff ff05 	bl	8004510 <LL_ADC_IsEnabled>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d012      	beq.n	800473c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a53      	ldr	r2, [pc, #332]	; (8004868 <HAL_ADC_Init+0x298>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_ADC_Init+0x15a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a51      	ldr	r2, [pc, #324]	; (800486c <HAL_ADC_Init+0x29c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d101      	bne.n	800472e <HAL_ADC_Init+0x15e>
 800472a:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_ADC_Init+0x2a4>)
 800472c:	e000      	b.n	8004730 <HAL_ADC_Init+0x160>
 800472e:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_ADC_Init+0x2a8>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f7ff fd3c 	bl	80041b4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800473c:	f7ff fd18 	bl	8004170 <HAL_GetREVID>
 8004740:	4603      	mov	r3, r0
 8004742:	f241 0203 	movw	r2, #4099	; 0x1003
 8004746:	4293      	cmp	r3, r2
 8004748:	d914      	bls.n	8004774 <HAL_ADC_Init+0x1a4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b10      	cmp	r3, #16
 8004750:	d110      	bne.n	8004774 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7d5b      	ldrb	r3, [r3, #21]
 8004756:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800475c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004762:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7f1b      	ldrb	r3, [r3, #28]
 8004768:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800476a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800476c:	f043 030c 	orr.w	r3, r3, #12
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e00d      	b.n	8004790 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7d5b      	ldrb	r3, [r3, #21]
 8004778:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800477e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004784:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7f1b      	ldrb	r3, [r3, #28]
 800478a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800478c:	4313      	orrs	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7f1b      	ldrb	r3, [r3, #28]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d106      	bne.n	80047a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	3b01      	subs	r3, #1
 800479e:	045b      	lsls	r3, r3, #17
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4b2c      	ldr	r3, [pc, #176]	; (800487c <HAL_ADC_Init+0x2ac>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	430b      	orrs	r3, r1
 80047d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fed2 	bl	8004584 <LL_ADC_REG_IsConversionOngoing>
 80047e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fedf 	bl	80045aa <LL_ADC_INJ_IsConversionOngoing>
 80047ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d15f      	bne.n	80048b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d15c      	bne.n	80048b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7d1b      	ldrb	r3, [r3, #20]
 80047fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <HAL_ADC_Init+0x2b0>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	430b      	orrs	r3, r1
 800481a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004822:	2b01      	cmp	r3, #1
 8004824:	d130      	bne.n	8004888 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_ADC_Init+0x2b4>)
 8004834:	4013      	ands	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800483a:	3a01      	subs	r2, #1
 800483c:	0411      	lsls	r1, r2, #16
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800484e:	430a      	orrs	r2, r1
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	611a      	str	r2, [r3, #16]
 800485c:	e01c      	b.n	8004898 <HAL_ADC_Init+0x2c8>
 800485e:	bf00      	nop
 8004860:	24000084 	.word	0x24000084
 8004864:	053e2d63 	.word	0x053e2d63
 8004868:	40022000 	.word	0x40022000
 800486c:	40022100 	.word	0x40022100
 8004870:	58026000 	.word	0x58026000
 8004874:	40022300 	.word	0x40022300
 8004878:	58026300 	.word	0x58026300
 800487c:	fff0c003 	.word	0xfff0c003
 8004880:	ffffbffc 	.word	0xffffbffc
 8004884:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fdec 	bl	800548c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10c      	bne.n	80048d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	f023 010f 	bic.w	r1, r3, #15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
 80048d4:	e007      	b.n	80048e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 020f 	bic.w	r2, r2, #15
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
 80048f6:	e007      	b.n	8004908 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f043 0210 	orr.w	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004908:	7ffb      	ldrb	r3, [r7, #31]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}
 8004912:	bf00      	nop

08004914 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_ADC_Start_DMA+0x168>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_ADC_Start_DMA+0x20>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a54      	ldr	r2, [pc, #336]	; (8004a80 <HAL_ADC_Start_DMA+0x16c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_ADC_Start_DMA+0x24>
 8004934:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <HAL_ADC_Start_DMA+0x170>)
 8004936:	e000      	b.n	800493a <HAL_ADC_Start_DMA+0x26>
 8004938:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <HAL_ADC_Start_DMA+0x174>)
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fd64 	bl	8004408 <LL_ADC_GetMultimode>
 8004940:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fe1c 	bl	8004584 <LL_ADC_REG_IsConversionOngoing>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 808c 	bne.w	8004a6c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_ADC_Start_DMA+0x4e>
 800495e:	2302      	movs	r3, #2
 8004960:	e087      	b.n	8004a72 <HAL_ADC_Start_DMA+0x15e>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b05      	cmp	r3, #5
 8004974:	d002      	beq.n	800497c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b09      	cmp	r3, #9
 800497a:	d170      	bne.n	8004a5e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fc07 	bl	8005190 <ADC_Enable>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d163      	bne.n	8004a54 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004990:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <HAL_ADC_Start_DMA+0x178>)
 8004992:	4013      	ands	r3, r2
 8004994:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a37      	ldr	r2, [pc, #220]	; (8004a80 <HAL_ADC_Start_DMA+0x16c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d002      	beq.n	80049ac <HAL_ADC_Start_DMA+0x98>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	e000      	b.n	80049ae <HAL_ADC_Start_DMA+0x9a>
 80049ac:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <HAL_ADC_Start_DMA+0x168>)
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d002      	beq.n	80049bc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d006      	beq.n	80049e2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	f023 0206 	bic.w	r2, r3, #6
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	659a      	str	r2, [r3, #88]	; 0x58
 80049e0:	e002      	b.n	80049e8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <HAL_ADC_Start_DMA+0x17c>)
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <HAL_ADC_Start_DMA+0x180>)
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fc:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <HAL_ADC_Start_DMA+0x184>)
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	221c      	movs	r2, #28
 8004a06:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0210 	orr.w	r2, r2, #16
 8004a1e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7ff fc89 	bl	8004342 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3340      	adds	r3, #64	; 0x40
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f002 f80e 	bl	8006a60 <HAL_DMA_Start_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fd85 	bl	800455c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a52:	e00d      	b.n	8004a70 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a5c:	e008      	b.n	8004a70 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a6a:	e001      	b.n	8004a70 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40022000 	.word	0x40022000
 8004a80:	40022100 	.word	0x40022100
 8004a84:	40022300 	.word	0x40022300
 8004a88:	58026300 	.word	0x58026300
 8004a8c:	fffff0fe 	.word	0xfffff0fe
 8004a90:	08005363 	.word	0x08005363
 8004a94:	0800543b 	.word	0x0800543b
 8004a98:	08005457 	.word	0x08005457

08004a9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b0a1      	sub	sp, #132	; 0x84
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a65      	ldr	r2, [pc, #404]	; (8004c88 <HAL_ADC_ConfigChannel+0x1b0>)
 8004af2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x2a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e32e      	b.n	8005160 <HAL_ADC_ConfigChannel+0x688>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fd38 	bl	8004584 <LL_ADC_REG_IsConversionOngoing>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 8313 	bne.w	8005142 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db2c      	blt.n	8004b7e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d108      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x6a>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	0e9b      	lsrs	r3, r3, #26
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	e016      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x98>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b52:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	e003      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b60:	fab3 f383 	clz	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	69d1      	ldr	r1, [r2, #28]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7ff fbad 	bl	80042ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fcf5 	bl	8004584 <LL_ADC_REG_IsConversionOngoing>
 8004b9a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fd02 	bl	80045aa <LL_ADC_INJ_IsConversionOngoing>
 8004ba6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 80b8 	bne.w	8004d20 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 80b4 	bne.w	8004d20 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f7ff fbcf 	bl	8004368 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bca:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <HAL_ADC_ConfigChannel+0x1b4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd6:	d10b      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x118>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	e01d      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x154>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x13e>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	e00a      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x154>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d02c      	beq.n	8004c90 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6919      	ldr	r1, [r3, #16]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c44:	f7ff faea 	bl	800421c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6919      	ldr	r1, [r3, #16]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	7e5b      	ldrb	r3, [r3, #25]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d102      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x186>
 8004c58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c5c:	e000      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x188>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	461a      	mov	r2, r3
 8004c62:	f7ff fb14 	bl	800428e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6919      	ldr	r1, [r3, #16]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	7e1b      	ldrb	r3, [r3, #24]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x1a4>
 8004c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c7a:	e000      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x1a6>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7ff faec 	bl	800425c <LL_ADC_SetDataRightShift>
 8004c84:	e04c      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x248>
 8004c86:	bf00      	nop
 8004c88:	47ff0000 	.word	0x47ff0000
 8004c8c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	069b      	lsls	r3, r3, #26
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d107      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	069b      	lsls	r3, r3, #26
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d107      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cd6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	069b      	lsls	r3, r3, #26
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d107      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cfa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	069b      	lsls	r3, r3, #26
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d107      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fbf3 	bl	8004510 <LL_ADC_IsEnabled>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 8211 	bne.w	8005154 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7ff fb3e 	bl	80043c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4aa1      	ldr	r2, [pc, #644]	; (8004fd0 <HAL_ADC_ConfigChannel+0x4f8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	f040 812e 	bne.w	8004fac <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x2a0>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0e9b      	lsrs	r3, r3, #26
 8004d66:	3301      	adds	r3, #1
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	bf94      	ite	ls
 8004d70:	2301      	movls	r3, #1
 8004d72:	2300      	movhi	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e019      	b.n	8004dac <HAL_ADC_ConfigChannel+0x2d4>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004d90:	2320      	movs	r3, #32
 8004d92:	e003      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2b09      	cmp	r3, #9
 8004da4:	bf94      	ite	ls
 8004da6:	2301      	movls	r3, #1
 8004da8:	2300      	movhi	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d079      	beq.n	8004ea4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d107      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x2f4>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	0e9b      	lsrs	r3, r3, #26
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	069b      	lsls	r3, r3, #26
 8004dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dca:	e015      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x320>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ddc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004de4:	2320      	movs	r3, #32
 8004de6:	e003      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	069b      	lsls	r3, r3, #26
 8004df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x340>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0e9b      	lsrs	r3, r3, #26
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f303 	lsl.w	r3, r1, r3
 8004e16:	e017      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x370>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004e30:	2320      	movs	r3, #32
 8004e32:	e003      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x396>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0e9b      	lsrs	r3, r3, #26
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f003 021f 	and.w	r2, r3, #31
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	051b      	lsls	r3, r3, #20
 8004e6c:	e018      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x3c8>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	fa93 f3a3 	rbit	r3, r3
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004e86:	2320      	movs	r3, #32
 8004e88:	e003      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	fab3 f383 	clz	r3, r3
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3301      	adds	r3, #1
 8004e94:	f003 021f 	and.w	r2, r3, #31
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	e07e      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x3e8>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	0e9b      	lsrs	r3, r3, #26
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	069b      	lsls	r3, r3, #26
 8004eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ebe:	e015      	b.n	8004eec <HAL_ADC_ConfigChannel+0x414>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	e003      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	069b      	lsls	r3, r3, #26
 8004ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x434>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	0e9b      	lsrs	r3, r3, #26
 8004efe:	3301      	adds	r3, #1
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2101      	movs	r1, #1
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	e017      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x464>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	61bb      	str	r3, [r7, #24]
  return result;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004f24:	2320      	movs	r3, #32
 8004f26:	e003      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	fab3 f383 	clz	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2101      	movs	r1, #1
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	ea42 0103 	orr.w	r1, r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10d      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x490>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	0e9b      	lsrs	r3, r3, #26
 8004f52:	3301      	adds	r3, #1
 8004f54:	f003 021f 	and.w	r2, r3, #31
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3b1e      	subs	r3, #30
 8004f60:	051b      	lsls	r3, r3, #20
 8004f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f66:	e01b      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x4c8>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	60fb      	str	r3, [r7, #12]
  return result;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004f80:	2320      	movs	r3, #32
 8004f82:	e003      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f003 021f 	and.w	r2, r3, #31
 8004f92:	4613      	mov	r3, r2
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4413      	add	r3, r2
 8004f98:	3b1e      	subs	r3, #30
 8004f9a:	051b      	lsls	r3, r3, #20
 8004f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f7ff f9de 	bl	8004368 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f280 80cf 	bge.w	8005154 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <HAL_ADC_ConfigChannel+0x4fc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_ADC_ConfigChannel+0x4f2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <HAL_ADC_ConfigChannel+0x500>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10a      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x508>
 8004fca:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <HAL_ADC_ConfigChannel+0x504>)
 8004fcc:	e009      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x50a>
 8004fce:	bf00      	nop
 8004fd0:	47ff0000 	.word	0x47ff0000
 8004fd4:	40022000 	.word	0x40022000
 8004fd8:	40022100 	.word	0x40022100
 8004fdc:	40022300 	.word	0x40022300
 8004fe0:	4b61      	ldr	r3, [pc, #388]	; (8005168 <HAL_ADC_ConfigChannel+0x690>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff f90c 	bl	8004200 <LL_ADC_GetCommonPathInternalCh>
 8004fe8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a5f      	ldr	r2, [pc, #380]	; (800516c <HAL_ADC_ConfigChannel+0x694>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0x526>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a5d      	ldr	r2, [pc, #372]	; (8005170 <HAL_ADC_ConfigChannel+0x698>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10e      	bne.n	800501c <HAL_ADC_ConfigChannel+0x544>
 8004ffe:	485b      	ldr	r0, [pc, #364]	; (800516c <HAL_ADC_ConfigChannel+0x694>)
 8005000:	f7ff fa86 	bl	8004510 <LL_ADC_IsEnabled>
 8005004:	4604      	mov	r4, r0
 8005006:	485a      	ldr	r0, [pc, #360]	; (8005170 <HAL_ADC_ConfigChannel+0x698>)
 8005008:	f7ff fa82 	bl	8004510 <LL_ADC_IsEnabled>
 800500c:	4603      	mov	r3, r0
 800500e:	4323      	orrs	r3, r4
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e008      	b.n	800502e <HAL_ADC_ConfigChannel+0x556>
 800501c:	4855      	ldr	r0, [pc, #340]	; (8005174 <HAL_ADC_ConfigChannel+0x69c>)
 800501e:	f7ff fa77 	bl	8004510 <LL_ADC_IsEnabled>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d07d      	beq.n	800512e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a50      	ldr	r2, [pc, #320]	; (8005178 <HAL_ADC_ConfigChannel+0x6a0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d130      	bne.n	800509e <HAL_ADC_ConfigChannel+0x5c6>
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d12b      	bne.n	800509e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	; (8005174 <HAL_ADC_ConfigChannel+0x69c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	f040 8081 	bne.w	8005154 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a45      	ldr	r2, [pc, #276]	; (800516c <HAL_ADC_ConfigChannel+0x694>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_ADC_ConfigChannel+0x58e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a43      	ldr	r2, [pc, #268]	; (8005170 <HAL_ADC_ConfigChannel+0x698>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_ADC_ConfigChannel+0x592>
 8005066:	4a45      	ldr	r2, [pc, #276]	; (800517c <HAL_ADC_ConfigChannel+0x6a4>)
 8005068:	e000      	b.n	800506c <HAL_ADC_ConfigChannel+0x594>
 800506a:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <HAL_ADC_ConfigChannel+0x690>)
 800506c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7ff f8b0 	bl	80041da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_ADC_ConfigChannel+0x6a8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	099b      	lsrs	r3, r3, #6
 8005080:	4a40      	ldr	r2, [pc, #256]	; (8005184 <HAL_ADC_ConfigChannel+0x6ac>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	3301      	adds	r3, #1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800508e:	e002      	b.n	8005096 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	3b01      	subs	r3, #1
 8005094:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f9      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800509c:	e05a      	b.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a39      	ldr	r2, [pc, #228]	; (8005188 <HAL_ADC_ConfigChannel+0x6b0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d11e      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x60e>
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d119      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <HAL_ADC_ConfigChannel+0x69c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d14b      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	; (800516c <HAL_ADC_ConfigChannel+0x694>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x5f8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <HAL_ADC_ConfigChannel+0x698>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x5fc>
 80050d0:	4a2a      	ldr	r2, [pc, #168]	; (800517c <HAL_ADC_ConfigChannel+0x6a4>)
 80050d2:	e000      	b.n	80050d6 <HAL_ADC_ConfigChannel+0x5fe>
 80050d4:	4a24      	ldr	r2, [pc, #144]	; (8005168 <HAL_ADC_ConfigChannel+0x690>)
 80050d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7ff f87b 	bl	80041da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050e4:	e036      	b.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a28      	ldr	r2, [pc, #160]	; (800518c <HAL_ADC_ConfigChannel+0x6b4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d131      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d12c      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <HAL_ADC_ConfigChannel+0x69c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d127      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a18      	ldr	r2, [pc, #96]	; (800516c <HAL_ADC_ConfigChannel+0x694>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_ADC_ConfigChannel+0x640>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <HAL_ADC_ConfigChannel+0x698>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_ADC_ConfigChannel+0x644>
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_ADC_ConfigChannel+0x6a4>)
 800511a:	e000      	b.n	800511e <HAL_ADC_ConfigChannel+0x646>
 800511c:	4a12      	ldr	r2, [pc, #72]	; (8005168 <HAL_ADC_ConfigChannel+0x690>)
 800511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f7ff f857 	bl	80041da <LL_ADC_SetCommonPathInternalCh>
 800512c:	e012      	b.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005140:	e008      	b.n	8005154 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f043 0220 	orr.w	r2, r3, #32
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800515c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005160:	4618      	mov	r0, r3
 8005162:	3784      	adds	r7, #132	; 0x84
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	58026300 	.word	0x58026300
 800516c:	40022000 	.word	0x40022000
 8005170:	40022100 	.word	0x40022100
 8005174:	58026000 	.word	0x58026000
 8005178:	cb840000 	.word	0xcb840000
 800517c:	40022300 	.word	0x40022300
 8005180:	24000084 	.word	0x24000084
 8005184:	053e2d63 	.word	0x053e2d63
 8005188:	c7520000 	.word	0xc7520000
 800518c:	cfb80000 	.word	0xcfb80000

08005190 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff f9b7 	bl	8004510 <LL_ADC_IsEnabled>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d16e      	bne.n	8005286 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <ADC_Enable+0x100>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f043 0210 	orr.w	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e05a      	b.n	8005288 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff f972 	bl	80044c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051dc:	f7fe ffbc 	bl	8004158 <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2b      	ldr	r2, [pc, #172]	; (8005294 <ADC_Enable+0x104>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <ADC_Enable+0x66>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a29      	ldr	r2, [pc, #164]	; (8005298 <ADC_Enable+0x108>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d101      	bne.n	80051fa <ADC_Enable+0x6a>
 80051f6:	4b29      	ldr	r3, [pc, #164]	; (800529c <ADC_Enable+0x10c>)
 80051f8:	e000      	b.n	80051fc <ADC_Enable+0x6c>
 80051fa:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <ADC_Enable+0x110>)
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff f903 	bl	8004408 <LL_ADC_GetMultimode>
 8005202:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a23      	ldr	r2, [pc, #140]	; (8005298 <ADC_Enable+0x108>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d002      	beq.n	8005214 <ADC_Enable+0x84>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	e000      	b.n	8005216 <ADC_Enable+0x86>
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <ADC_Enable+0x104>)
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	4293      	cmp	r3, r2
 800521c:	d02c      	beq.n	8005278 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d130      	bne.n	8005286 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005224:	e028      	b.n	8005278 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f970 	bl	8004510 <LL_ADC_IsEnabled>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff f940 	bl	80044c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005240:	f7fe ff8a 	bl	8004158 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d914      	bls.n	8005278 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d00d      	beq.n	8005278 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	f043 0201 	orr.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e007      	b.n	8005288 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d1cf      	bne.n	8005226 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	8000003f 	.word	0x8000003f
 8005294:	40022000 	.word	0x40022000
 8005298:	40022100 	.word	0x40022100
 800529c:	40022300 	.word	0x40022300
 80052a0:	58026300 	.word	0x58026300

080052a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff f940 	bl	8004536 <LL_ADC_IsDisableOngoing>
 80052b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff f927 	bl	8004510 <LL_ADC_IsEnabled>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d047      	beq.n	8005358 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d144      	bne.n	8005358 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030d 	and.w	r3, r3, #13
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10c      	bne.n	80052f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff f901 	bl	80044e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2203      	movs	r2, #3
 80052ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052ee:	f7fe ff33 	bl	8004158 <HAL_GetTick>
 80052f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052f4:	e029      	b.n	800534a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f043 0210 	orr.w	r2, r3, #16
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	f043 0201 	orr.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e023      	b.n	800535a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005312:	f7fe ff21 	bl	8004158 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d914      	bls.n	800534a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f043 0210 	orr.w	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	f043 0201 	orr.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e007      	b.n	800535a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1dc      	bne.n	8005312 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005378:	2b00      	cmp	r3, #0
 800537a:	d14b      	bne.n	8005414 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe ff92 	bl	80042c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d032      	beq.n	800540c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d12b      	bne.n	800540c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11f      	bne.n	800540c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
 80053d8:	e018      	b.n	800540c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d111      	bne.n	800540c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fb45 	bl	8004a9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005412:	e00e      	b.n	8005432 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fb4f 	bl	8004ac4 <HAL_ADC_ErrorCallback>
}
 8005426:	e004      	b.n	8005432 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fb31 	bl	8004ab0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	f043 0204 	orr.w	r2, r3, #4
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff fb21 	bl	8004ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7a      	ldr	r2, [pc, #488]	; (8005684 <ADC_ConfigureBoostMode+0x1f8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <ADC_ConfigureBoostMode+0x1c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a79      	ldr	r2, [pc, #484]	; (8005688 <ADC_ConfigureBoostMode+0x1fc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d109      	bne.n	80054bc <ADC_ConfigureBoostMode+0x30>
 80054a8:	4b78      	ldr	r3, [pc, #480]	; (800568c <ADC_ConfigureBoostMode+0x200>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e008      	b.n	80054ce <ADC_ConfigureBoostMode+0x42>
 80054bc:	4b74      	ldr	r3, [pc, #464]	; (8005690 <ADC_ConfigureBoostMode+0x204>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01c      	beq.n	800550c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80054d2:	f007 fb05 	bl	800cae0 <HAL_RCC_GetHCLKFreq>
 80054d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054e0:	d010      	beq.n	8005504 <ADC_ConfigureBoostMode+0x78>
 80054e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054e6:	d873      	bhi.n	80055d0 <ADC_ConfigureBoostMode+0x144>
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ec:	d002      	beq.n	80054f4 <ADC_ConfigureBoostMode+0x68>
 80054ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f2:	d16d      	bne.n	80055d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	60fb      	str	r3, [r7, #12]
        break;
 8005502:	e068      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	60fb      	str	r3, [r7, #12]
        break;
 800550a:	e064      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800550c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f008 fd8c 	bl	800e030 <HAL_RCCEx_GetPeriphCLKFreq>
 8005518:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005522:	d051      	beq.n	80055c8 <ADC_ConfigureBoostMode+0x13c>
 8005524:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005528:	d854      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 800552a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800552e:	d047      	beq.n	80055c0 <ADC_ConfigureBoostMode+0x134>
 8005530:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005534:	d84e      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 8005536:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800553a:	d03d      	beq.n	80055b8 <ADC_ConfigureBoostMode+0x12c>
 800553c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005540:	d848      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 8005542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005546:	d033      	beq.n	80055b0 <ADC_ConfigureBoostMode+0x124>
 8005548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800554c:	d842      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 800554e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005552:	d029      	beq.n	80055a8 <ADC_ConfigureBoostMode+0x11c>
 8005554:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005558:	d83c      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 800555a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800555e:	d01a      	beq.n	8005596 <ADC_ConfigureBoostMode+0x10a>
 8005560:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005564:	d836      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 8005566:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800556a:	d014      	beq.n	8005596 <ADC_ConfigureBoostMode+0x10a>
 800556c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005570:	d830      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005576:	d00e      	beq.n	8005596 <ADC_ConfigureBoostMode+0x10a>
 8005578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557c:	d82a      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 800557e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005582:	d008      	beq.n	8005596 <ADC_ConfigureBoostMode+0x10a>
 8005584:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005588:	d824      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x148>
 800558a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800558e:	d002      	beq.n	8005596 <ADC_ConfigureBoostMode+0x10a>
 8005590:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005594:	d11e      	bne.n	80055d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	60fb      	str	r3, [r7, #12]
        break;
 80055a6:	e016      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	60fb      	str	r3, [r7, #12]
        break;
 80055ae:	e012      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	60fb      	str	r3, [r7, #12]
        break;
 80055b6:	e00e      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	60fb      	str	r3, [r7, #12]
        break;
 80055be:	e00a      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	09db      	lsrs	r3, r3, #7
 80055c4:	60fb      	str	r3, [r7, #12]
        break;
 80055c6:	e006      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	60fb      	str	r3, [r7, #12]
        break;
 80055ce:	e002      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80055d4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80055d6:	f7fe fdcb 	bl	8004170 <HAL_GetREVID>
 80055da:	4603      	mov	r3, r0
 80055dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d815      	bhi.n	8005610 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <ADC_ConfigureBoostMode+0x208>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d908      	bls.n	80055fe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80055fc:	e03e      	b.n	800567c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800560c:	609a      	str	r2, [r3, #8]
}
 800560e:	e035      	b.n	800567c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <ADC_ConfigureBoostMode+0x20c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d808      	bhi.n	8005630 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800562c:	609a      	str	r2, [r3, #8]
}
 800562e:	e025      	b.n	800567c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a1a      	ldr	r2, [pc, #104]	; (800569c <ADC_ConfigureBoostMode+0x210>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d80a      	bhi.n	800564e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800564a:	609a      	str	r2, [r3, #8]
}
 800564c:	e016      	b.n	800567c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <ADC_ConfigureBoostMode+0x214>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d80a      	bhi.n	800566c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005668:	609a      	str	r2, [r3, #8]
}
 800566a:	e007      	b.n	800567c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40022000 	.word	0x40022000
 8005688:	40022100 	.word	0x40022100
 800568c:	40022300 	.word	0x40022300
 8005690:	58026300 	.word	0x58026300
 8005694:	01312d00 	.word	0x01312d00
 8005698:	005f5e10 	.word	0x005f5e10
 800569c:	00bebc20 	.word	0x00bebc20
 80056a0:	017d7840 	.word	0x017d7840

080056a4 <LL_ADC_IsEnabled>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <LL_ADC_IsEnabled+0x18>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <LL_ADC_IsEnabled+0x1a>
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <LL_ADC_StartCalibration>:
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <LL_ADC_StartCalibration+0x38>)
 80056de:	4013      	ands	r3, r2
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056ec:	430a      	orrs	r2, r1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	3ffeffc0 	.word	0x3ffeffc0

08005708 <LL_ADC_IsCalibrationOnGoing>:
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571c:	d101      	bne.n	8005722 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <LL_ADC_REG_IsConversionOngoing>:
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b04      	cmp	r3, #4
 8005742:	d101      	bne.n	8005748 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_ADCEx_Calibration_Start+0x1e>
 8005772:	2302      	movs	r3, #2
 8005774:	e04c      	b.n	8005810 <HAL_ADCEx_Calibration_Start+0xb8>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fd90 	bl	80052a4 <ADC_Disable>
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d135      	bne.n	80057fa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005792:	4b21      	ldr	r3, [pc, #132]	; (8005818 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005794:	4013      	ands	r3, r2
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ff90 	bl	80056cc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057ac:	e014      	b.n	80057d8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3301      	adds	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_ADCEx_Calibration_Start+0xc4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d30d      	bcc.n	80057d8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f023 0312 	bic.w	r3, r3, #18
 80057c4:	f043 0210 	orr.w	r2, r3, #16
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e01b      	b.n	8005810 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff ff93 	bl	8005708 <LL_ADC_IsCalibrationOnGoing>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e2      	bne.n	80057ae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	f023 0303 	bic.w	r3, r3, #3
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
 80057f8:	e005      	b.n	8005806 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	f043 0210 	orr.w	r2, r3, #16
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800580e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	ffffeefd 	.word	0xffffeefd
 800581c:	25c3f800 	.word	0x25c3f800

08005820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b09f      	sub	sp, #124	; 0x7c
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800583a:	2302      	movs	r3, #2
 800583c:	e0be      	b.n	80059bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005846:	2300      	movs	r3, #0
 8005848:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800584a:	2300      	movs	r3, #0
 800584c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a5c      	ldr	r2, [pc, #368]	; (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d102      	bne.n	800585e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005858:	4b5b      	ldr	r3, [pc, #364]	; (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	e001      	b.n	8005862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e09d      	b.n	80059bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff54 	bl	8005730 <LL_ADC_REG_IsConversionOngoing>
 8005888:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff ff4e 	bl	8005730 <LL_ADC_REG_IsConversionOngoing>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d17f      	bne.n	800599a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800589a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800589c:	2b00      	cmp	r3, #0
 800589e:	d17c      	bne.n	800599a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a47      	ldr	r2, [pc, #284]	; (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a46      	ldr	r2, [pc, #280]	; (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d101      	bne.n	80058b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80058b4:	4b45      	ldr	r3, [pc, #276]	; (80059cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058b6:	e000      	b.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80058b8:	4b45      	ldr	r3, [pc, #276]	; (80059d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d039      	beq.n	8005938 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a38      	ldr	r2, [pc, #224]	; (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10e      	bne.n	8005908 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80058ea:	4836      	ldr	r0, [pc, #216]	; (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058ec:	f7ff feda 	bl	80056a4 <LL_ADC_IsEnabled>
 80058f0:	4604      	mov	r4, r0
 80058f2:	4835      	ldr	r0, [pc, #212]	; (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058f4:	f7ff fed6 	bl	80056a4 <LL_ADC_IsEnabled>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4323      	orrs	r3, r4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e008      	b.n	800591a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005908:	4832      	ldr	r0, [pc, #200]	; (80059d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800590a:	f7ff fecb 	bl	80056a4 <LL_ADC_IsEnabled>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d047      	beq.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005924:	4013      	ands	r3, r2
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	430a      	orrs	r2, r1
 8005930:	431a      	orrs	r2, r3
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005936:	e03a      	b.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10e      	bne.n	8005976 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005958:	481a      	ldr	r0, [pc, #104]	; (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800595a:	f7ff fea3 	bl	80056a4 <LL_ADC_IsEnabled>
 800595e:	4604      	mov	r4, r0
 8005960:	4819      	ldr	r0, [pc, #100]	; (80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005962:	f7ff fe9f 	bl	80056a4 <LL_ADC_IsEnabled>
 8005966:	4603      	mov	r3, r0
 8005968:	4323      	orrs	r3, r4
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e008      	b.n	8005988 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005976:	4817      	ldr	r0, [pc, #92]	; (80059d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005978:	f7ff fe94 	bl	80056a4 <LL_ADC_IsEnabled>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	bf0c      	ite	eq
 8005982:	2301      	moveq	r3, #1
 8005984:	2300      	movne	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d010      	beq.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005992:	4013      	ands	r3, r2
 8005994:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005996:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005998:	e009      	b.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80059ac:	e000      	b.n	80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80059bc:	4618      	mov	r0, r3
 80059be:	377c      	adds	r7, #124	; 0x7c
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd90      	pop	{r4, r7, pc}
 80059c4:	40022000 	.word	0x40022000
 80059c8:	40022100 	.word	0x40022100
 80059cc:	40022300 	.word	0x40022300
 80059d0:	58026300 	.word	0x58026300
 80059d4:	58026000 	.word	0x58026000
 80059d8:	fffff0e0 	.word	0xfffff0e0

080059dc <__NVIC_SetPriorityGrouping>:
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <__NVIC_SetPriorityGrouping+0x40>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059f8:	4013      	ands	r3, r2
 80059fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <__NVIC_SetPriorityGrouping+0x44>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a0a:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <__NVIC_SetPriorityGrouping+0x40>)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	60d3      	str	r3, [r2, #12]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	e000ed00 	.word	0xe000ed00
 8005a20:	05fa0000 	.word	0x05fa0000

08005a24 <__NVIC_GetPriorityGrouping>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <__NVIC_GetPriorityGrouping+0x18>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	f003 0307 	and.w	r3, r3, #7
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <__NVIC_EnableIRQ>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	db0b      	blt.n	8005a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	f003 021f 	and.w	r2, r3, #31
 8005a58:	4907      	ldr	r1, [pc, #28]	; (8005a78 <__NVIC_EnableIRQ+0x38>)
 8005a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2001      	movs	r0, #1
 8005a62:	fa00 f202 	lsl.w	r2, r0, r2
 8005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	e000e100 	.word	0xe000e100

08005a7c <__NVIC_SetPriority>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db0a      	blt.n	8005aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	490c      	ldr	r1, [pc, #48]	; (8005ac8 <__NVIC_SetPriority+0x4c>)
 8005a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a9a:	0112      	lsls	r2, r2, #4
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005aa4:	e00a      	b.n	8005abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	4908      	ldr	r1, [pc, #32]	; (8005acc <__NVIC_SetPriority+0x50>)
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	0112      	lsls	r2, r2, #4
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	440b      	add	r3, r1
 8005aba:	761a      	strb	r2, [r3, #24]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000e100 	.word	0xe000e100
 8005acc:	e000ed00 	.word	0xe000ed00

08005ad0 <NVIC_EncodePriority>:
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b089      	sub	sp, #36	; 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f1c3 0307 	rsb	r3, r3, #7
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	bf28      	it	cs
 8005aee:	2304      	movcs	r3, #4
 8005af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2b06      	cmp	r3, #6
 8005af8:	d902      	bls.n	8005b00 <NVIC_EncodePriority+0x30>
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3b03      	subs	r3, #3
 8005afe:	e000      	b.n	8005b02 <NVIC_EncodePriority+0x32>
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	401a      	ands	r2, r3
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b22:	43d9      	mvns	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b28:	4313      	orrs	r3, r2
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3724      	adds	r7, #36	; 0x24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ff4c 	bl	80059dc <__NVIC_SetPriorityGrouping>
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b5a:	f7ff ff63 	bl	8005a24 <__NVIC_GetPriorityGrouping>
 8005b5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	6978      	ldr	r0, [r7, #20]
 8005b66:	f7ff ffb3 	bl	8005ad0 <NVIC_EncodePriority>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff ff82 	bl	8005a7c <__NVIC_SetPriority>
}
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff ff56 	bl	8005a40 <__NVIC_EnableIRQ>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e014      	b.n	8005bd8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	791b      	ldrb	r3, [r3, #4]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb f810 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e046      	b.n	8005c82 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	795b      	ldrb	r3, [r3, #5]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_DAC_Start+0x20>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e040      	b.n	8005c82 <HAL_DAC_Start+0xa2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2201      	movs	r2, #1
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d11d      	bne.n	8005c74 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	e014      	b.n	8005c74 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d107      	bne.n	8005c74 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0202 	orr.w	r2, r2, #2
 8005c72:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0a2      	b.n	8005dee <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	795b      	ldrb	r3, [r3, #5]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_DAC_Start_DMA+0x24>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e09c      	b.n	8005dee <HAL_DAC_Start_DMA+0x15e>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d129      	bne.n	8005d1a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	4a4b      	ldr	r2, [pc, #300]	; (8005df8 <HAL_DAC_Start_DMA+0x168>)
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <HAL_DAC_Start_DMA+0x16c>)
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4a49      	ldr	r2, [pc, #292]	; (8005e00 <HAL_DAC_Start_DMA+0x170>)
 8005cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_DAC_Start_DMA+0x6c>
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d005      	beq.n	8005d06 <HAL_DAC_Start_DMA+0x76>
 8005cfa:	e009      	b.n	8005d10 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	613b      	str	r3, [r7, #16]
        break;
 8005d04:	e033      	b.n	8005d6e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	613b      	str	r3, [r7, #16]
        break;
 8005d0e:	e02e      	b.n	8005d6e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3310      	adds	r3, #16
 8005d16:	613b      	str	r3, [r7, #16]
        break;
 8005d18:	e029      	b.n	8005d6e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	4a39      	ldr	r2, [pc, #228]	; (8005e04 <HAL_DAC_Start_DMA+0x174>)
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <HAL_DAC_Start_DMA+0x178>)
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	4a37      	ldr	r2, [pc, #220]	; (8005e0c <HAL_DAC_Start_DMA+0x17c>)
 8005d30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d40:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_DAC_Start_DMA+0xc0>
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d005      	beq.n	8005d5a <HAL_DAC_Start_DMA+0xca>
 8005d4e:	e009      	b.n	8005d64 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	613b      	str	r3, [r7, #16]
        break;
 8005d58:	e009      	b.n	8005d6e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3318      	adds	r3, #24
 8005d60:	613b      	str	r3, [r7, #16]
        break;
 8005d62:	e004      	b.n	8005d6e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	331c      	adds	r3, #28
 8005d6a:	613b      	str	r3, [r7, #16]
        break;
 8005d6c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d111      	bne.n	8005d98 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6898      	ldr	r0, [r3, #8]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	f000 fe67 	bl	8006a60 <HAL_DMA_Start_IT>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]
 8005d96:	e010      	b.n	8005dba <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005da6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68d8      	ldr	r0, [r3, #12]
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	f000 fe55 	bl	8006a60 <HAL_DMA_Start_IT>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10c      	bne.n	8005de0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e005      	b.n	8005dec <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	08006281 	.word	0x08006281
 8005dfc:	080062a3 	.word	0x080062a3
 8005e00:	080062bf 	.word	0x080062bf
 8005e04:	0800633d 	.word	0x0800633d
 8005e08:	0800635f 	.word	0x0800635f
 8005e0c:	0800637b 	.word	0x0800637b

08005e10 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e03e      	b.n	8005ea2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43da      	mvns	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	400a      	ands	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2201      	movs	r2, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43da      	mvns	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 f863 	bl	8006f34 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e00c      	b.n	8005e9a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 f855 	bl	8006f34 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005e98:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01d      	beq.n	8005f08 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d018      	beq.n	8005f08 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f043 0201 	orr.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f00:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f86f 	bl	8005fe6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01d      	beq.n	8005f4e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d018      	beq.n	8005f4e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f46:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9ed 	bl	8006328 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e015      	b.n	8005f9e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	3308      	adds	r3, #8
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e004      	b.n	8005f94 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	3314      	adds	r3, #20
 8005f92:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	461a      	mov	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_DAC_ConfigChannel+0x1e>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e12a      	b.n	8006274 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	795b      	ldrb	r3, [r3, #5]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_DAC_ConfigChannel+0x2e>
 8006026:	2302      	movs	r3, #2
 8006028:	e124      	b.n	8006274 <HAL_DAC_ConfigChannel+0x278>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2202      	movs	r2, #2
 8006034:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d17a      	bne.n	8006134 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800603e:	f7fe f88b 	bl	8004158 <HAL_GetTick>
 8006042:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d13d      	bne.n	80060c6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800604a:	e018      	b.n	800607e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800604c:	f7fe f884 	bl	8004158 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	d911      	bls.n	800607e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006060:	4b86      	ldr	r3, [pc, #536]	; (800627c <HAL_DAC_ConfigChannel+0x280>)
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f043 0208 	orr.w	r2, r3, #8
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2203      	movs	r2, #3
 8006078:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0fa      	b.n	8006274 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006084:	4b7d      	ldr	r3, [pc, #500]	; (800627c <HAL_DAC_ConfigChannel+0x280>)
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1df      	bne.n	800604c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	6992      	ldr	r2, [r2, #24]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40
 8006096:	e020      	b.n	80060da <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006098:	f7fe f85e 	bl	8004158 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d90f      	bls.n	80060c6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da0a      	bge.n	80060c6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f043 0208 	orr.w	r2, r3, #8
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2203      	movs	r2, #3
 80060c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e0d6      	b.n	8006274 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dbe3      	blt.n	8006098 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	6992      	ldr	r2, [r2, #24]
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80060ea:	fa01 f303 	lsl.w	r3, r1, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	ea02 0103 	and.w	r1, r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	409a      	lsls	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	21ff      	movs	r1, #255	; 0xff
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	ea02 0103 	and.w	r1, r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6a1a      	ldr	r2, [r3, #32]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	409a      	lsls	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d11d      	bne.n	8006178 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	221f      	movs	r2, #31
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2207      	movs	r2, #7
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4013      	ands	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d102      	bne.n	80061a2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800619c:	2300      	movs	r3, #0
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
 80061a0:	e00f      	b.n	80061c2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d102      	bne.n	80061b0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80061aa:	2301      	movs	r3, #1
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
 80061ae:	e008      	b.n	80061c2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80061b8:	2301      	movs	r3, #1
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
 80061bc:	e001      	b.n	80061c2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43da      	mvns	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	400a      	ands	r2, r1
 8006208:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	f640 72fe 	movw	r2, #4094	; 0xffe
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4313      	orrs	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	22c0      	movs	r2, #192	; 0xc0
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43da      	mvns	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	400a      	ands	r2, r1
 8006262:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006274:	4618      	mov	r0, r3
 8006276:	3728      	adds	r7, #40	; 0x28
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20008000 	.word	0x20008000

08006280 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe8b 	bl	8005faa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	711a      	strb	r2, [r3, #4]
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fe84 	bl	8005fbe <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f043 0204 	orr.w	r2, r3, #4
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fe7a 	bl	8005fd2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	711a      	strb	r2, [r3, #4]
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff ffce 	bl	80062ec <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	711a      	strb	r2, [r3, #4]
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ffc7 	bl	8006300 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f043 0204 	orr.w	r2, r3, #4
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff ffbd 	bl	8006314 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	711a      	strb	r2, [r3, #4]
}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80063b0:	f7fd fed2 	bl	8004158 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e316      	b.n	80069ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a66      	ldr	r2, [pc, #408]	; (8006560 <HAL_DMA_Init+0x1b8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a65      	ldr	r2, [pc, #404]	; (8006564 <HAL_DMA_Init+0x1bc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a63      	ldr	r2, [pc, #396]	; (8006568 <HAL_DMA_Init+0x1c0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a62      	ldr	r2, [pc, #392]	; (800656c <HAL_DMA_Init+0x1c4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a60      	ldr	r2, [pc, #384]	; (8006570 <HAL_DMA_Init+0x1c8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5f      	ldr	r2, [pc, #380]	; (8006574 <HAL_DMA_Init+0x1cc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a5d      	ldr	r2, [pc, #372]	; (8006578 <HAL_DMA_Init+0x1d0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5c      	ldr	r2, [pc, #368]	; (800657c <HAL_DMA_Init+0x1d4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a5a      	ldr	r2, [pc, #360]	; (8006580 <HAL_DMA_Init+0x1d8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a59      	ldr	r2, [pc, #356]	; (8006584 <HAL_DMA_Init+0x1dc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a57      	ldr	r2, [pc, #348]	; (8006588 <HAL_DMA_Init+0x1e0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a56      	ldr	r2, [pc, #344]	; (800658c <HAL_DMA_Init+0x1e4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a54      	ldr	r2, [pc, #336]	; (8006590 <HAL_DMA_Init+0x1e8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a53      	ldr	r2, [pc, #332]	; (8006594 <HAL_DMA_Init+0x1ec>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a51      	ldr	r2, [pc, #324]	; (8006598 <HAL_DMA_Init+0x1f0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_Init+0xb8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a50      	ldr	r2, [pc, #320]	; (800659c <HAL_DMA_Init+0x1f4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_DMA_Init+0xbc>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_DMA_Init+0xbe>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 813b 	beq.w	80066e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a37      	ldr	r2, [pc, #220]	; (8006560 <HAL_DMA_Init+0x1b8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04a      	beq.n	800651c <HAL_DMA_Init+0x174>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a36      	ldr	r2, [pc, #216]	; (8006564 <HAL_DMA_Init+0x1bc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d045      	beq.n	800651c <HAL_DMA_Init+0x174>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a34      	ldr	r2, [pc, #208]	; (8006568 <HAL_DMA_Init+0x1c0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d040      	beq.n	800651c <HAL_DMA_Init+0x174>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a33      	ldr	r2, [pc, #204]	; (800656c <HAL_DMA_Init+0x1c4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d03b      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a31      	ldr	r2, [pc, #196]	; (8006570 <HAL_DMA_Init+0x1c8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d036      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a30      	ldr	r2, [pc, #192]	; (8006574 <HAL_DMA_Init+0x1cc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d031      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_DMA_Init+0x1d0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02c      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	; (800657c <HAL_DMA_Init+0x1d4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d027      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_DMA_Init+0x1d8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_DMA_Init+0x1dc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_DMA_Init+0x1e0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_DMA_Init+0x1e4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_DMA_Init+0x1e8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_DMA_Init+0x174>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_DMA_Init+0x1ec>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_DMA_Init+0x174>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_DMA_Init+0x1f0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_DMA_Init+0x174>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_DMA_Init+0x1f4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d108      	bne.n	800652e <HAL_DMA_Init+0x186>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e007      	b.n	800653e <HAL_DMA_Init+0x196>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800653e:	e02f      	b.n	80065a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006540:	f7fd fe0a 	bl	8004158 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b05      	cmp	r3, #5
 800654c:	d928      	bls.n	80065a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2203      	movs	r2, #3
 8006558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e246      	b.n	80069ee <HAL_DMA_Init+0x646>
 8006560:	40020010 	.word	0x40020010
 8006564:	40020028 	.word	0x40020028
 8006568:	40020040 	.word	0x40020040
 800656c:	40020058 	.word	0x40020058
 8006570:	40020070 	.word	0x40020070
 8006574:	40020088 	.word	0x40020088
 8006578:	400200a0 	.word	0x400200a0
 800657c:	400200b8 	.word	0x400200b8
 8006580:	40020410 	.word	0x40020410
 8006584:	40020428 	.word	0x40020428
 8006588:	40020440 	.word	0x40020440
 800658c:	40020458 	.word	0x40020458
 8006590:	40020470 	.word	0x40020470
 8006594:	40020488 	.word	0x40020488
 8006598:	400204a0 	.word	0x400204a0
 800659c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1c8      	bne.n	8006540 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4b83      	ldr	r3, [pc, #524]	; (80067c8 <HAL_DMA_Init+0x420>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80065c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d107      	bne.n	8006604 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	4313      	orrs	r3, r2
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006604:	4b71      	ldr	r3, [pc, #452]	; (80067cc <HAL_DMA_Init+0x424>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b71      	ldr	r3, [pc, #452]	; (80067d0 <HAL_DMA_Init+0x428>)
 800660a:	4013      	ands	r3, r2
 800660c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006610:	d328      	bcc.n	8006664 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b28      	cmp	r3, #40	; 0x28
 8006618:	d903      	bls.n	8006622 <HAL_DMA_Init+0x27a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b2e      	cmp	r3, #46	; 0x2e
 8006620:	d917      	bls.n	8006652 <HAL_DMA_Init+0x2aa>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d903      	bls.n	8006632 <HAL_DMA_Init+0x28a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b42      	cmp	r3, #66	; 0x42
 8006630:	d90f      	bls.n	8006652 <HAL_DMA_Init+0x2aa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b46      	cmp	r3, #70	; 0x46
 8006638:	d903      	bls.n	8006642 <HAL_DMA_Init+0x29a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b48      	cmp	r3, #72	; 0x48
 8006640:	d907      	bls.n	8006652 <HAL_DMA_Init+0x2aa>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b4e      	cmp	r3, #78	; 0x4e
 8006648:	d905      	bls.n	8006656 <HAL_DMA_Init+0x2ae>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b52      	cmp	r3, #82	; 0x52
 8006650:	d801      	bhi.n	8006656 <HAL_DMA_Init+0x2ae>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <HAL_DMA_Init+0x2b0>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006662:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	2b04      	cmp	r3, #4
 800668c:	d117      	bne.n	80066be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f002 fb4d 	bl	8008d40 <DMA_CheckFifoParam>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2240      	movs	r2, #64	; 0x40
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e197      	b.n	80069ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f002 fa88 	bl	8008bdc <DMA_CalcBaseAndBitshift>
 80066cc:	4603      	mov	r3, r0
 80066ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	223f      	movs	r2, #63	; 0x3f
 80066da:	409a      	lsls	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	e0cd      	b.n	800687e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a3b      	ldr	r2, [pc, #236]	; (80067d4 <HAL_DMA_Init+0x42c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a39      	ldr	r2, [pc, #228]	; (80067d8 <HAL_DMA_Init+0x430>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a38      	ldr	r2, [pc, #224]	; (80067dc <HAL_DMA_Init+0x434>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a36      	ldr	r2, [pc, #216]	; (80067e0 <HAL_DMA_Init+0x438>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a35      	ldr	r2, [pc, #212]	; (80067e4 <HAL_DMA_Init+0x43c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a33      	ldr	r2, [pc, #204]	; (80067e8 <HAL_DMA_Init+0x440>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a32      	ldr	r2, [pc, #200]	; (80067ec <HAL_DMA_Init+0x444>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_DMA_Init+0x38a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a30      	ldr	r2, [pc, #192]	; (80067f0 <HAL_DMA_Init+0x448>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_DMA_Init+0x38e>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <HAL_DMA_Init+0x390>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8097 	beq.w	800686c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a24      	ldr	r2, [pc, #144]	; (80067d4 <HAL_DMA_Init+0x42c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d021      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_DMA_Init+0x430>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01c      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_DMA_Init+0x434>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d017      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <HAL_DMA_Init+0x438>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d012      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <HAL_DMA_Init+0x43c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00d      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <HAL_DMA_Init+0x440>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d008      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_DMA_Init+0x444>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <HAL_DMA_Init+0x3e4>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <HAL_DMA_Init+0x448>)
 800678a:	4293      	cmp	r3, r2
 800678c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <HAL_DMA_Init+0x44c>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d020      	beq.n	80067f8 <HAL_DMA_Init+0x450>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d102      	bne.n	80067c4 <HAL_DMA_Init+0x41c>
 80067be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067c2:	e01a      	b.n	80067fa <HAL_DMA_Init+0x452>
 80067c4:	2300      	movs	r3, #0
 80067c6:	e018      	b.n	80067fa <HAL_DMA_Init+0x452>
 80067c8:	fe10803f 	.word	0xfe10803f
 80067cc:	5c001000 	.word	0x5c001000
 80067d0:	ffff0000 	.word	0xffff0000
 80067d4:	58025408 	.word	0x58025408
 80067d8:	5802541c 	.word	0x5802541c
 80067dc:	58025430 	.word	0x58025430
 80067e0:	58025444 	.word	0x58025444
 80067e4:	58025458 	.word	0x58025458
 80067e8:	5802546c 	.word	0x5802546c
 80067ec:	58025480 	.word	0x58025480
 80067f0:	58025494 	.word	0x58025494
 80067f4:	fffe000f 	.word	0xfffe000f
 80067f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68d2      	ldr	r2, [r2, #12]
 80067fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006818:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006828:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	4b6e      	ldr	r3, [pc, #440]	; (80069f8 <HAL_DMA_Init+0x650>)
 8006840:	4413      	add	r3, r2
 8006842:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <HAL_DMA_Init+0x654>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	009a      	lsls	r2, r3, #2
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f002 f9c3 	bl	8008bdc <DMA_CalcBaseAndBitshift>
 8006856:	4603      	mov	r3, r0
 8006858:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2201      	movs	r2, #1
 8006864:	409a      	lsls	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	e008      	b.n	800687e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2203      	movs	r2, #3
 8006876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e0b7      	b.n	80069ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a5f      	ldr	r2, [pc, #380]	; (8006a00 <HAL_DMA_Init+0x658>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d072      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a5d      	ldr	r2, [pc, #372]	; (8006a04 <HAL_DMA_Init+0x65c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d06d      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5c      	ldr	r2, [pc, #368]	; (8006a08 <HAL_DMA_Init+0x660>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d068      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5a      	ldr	r2, [pc, #360]	; (8006a0c <HAL_DMA_Init+0x664>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d063      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a59      	ldr	r2, [pc, #356]	; (8006a10 <HAL_DMA_Init+0x668>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d05e      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a57      	ldr	r2, [pc, #348]	; (8006a14 <HAL_DMA_Init+0x66c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d059      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a56      	ldr	r2, [pc, #344]	; (8006a18 <HAL_DMA_Init+0x670>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d054      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a54      	ldr	r2, [pc, #336]	; (8006a1c <HAL_DMA_Init+0x674>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d04f      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a53      	ldr	r2, [pc, #332]	; (8006a20 <HAL_DMA_Init+0x678>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04a      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a51      	ldr	r2, [pc, #324]	; (8006a24 <HAL_DMA_Init+0x67c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a50      	ldr	r2, [pc, #320]	; (8006a28 <HAL_DMA_Init+0x680>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d040      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a4e      	ldr	r2, [pc, #312]	; (8006a2c <HAL_DMA_Init+0x684>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a4d      	ldr	r2, [pc, #308]	; (8006a30 <HAL_DMA_Init+0x688>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d036      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4b      	ldr	r2, [pc, #300]	; (8006a34 <HAL_DMA_Init+0x68c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d031      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4a      	ldr	r2, [pc, #296]	; (8006a38 <HAL_DMA_Init+0x690>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02c      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a48      	ldr	r2, [pc, #288]	; (8006a3c <HAL_DMA_Init+0x694>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d027      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a47      	ldr	r2, [pc, #284]	; (8006a40 <HAL_DMA_Init+0x698>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a45      	ldr	r2, [pc, #276]	; (8006a44 <HAL_DMA_Init+0x69c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01d      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a44      	ldr	r2, [pc, #272]	; (8006a48 <HAL_DMA_Init+0x6a0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <HAL_DMA_Init+0x6a4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a41      	ldr	r2, [pc, #260]	; (8006a50 <HAL_DMA_Init+0x6a8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <HAL_DMA_Init+0x6ac>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a3e      	ldr	r2, [pc, #248]	; (8006a58 <HAL_DMA_Init+0x6b0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_DMA_Init+0x5c6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <HAL_DMA_Init+0x6b4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <HAL_DMA_Init+0x5ca>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <HAL_DMA_Init+0x5cc>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d032      	beq.n	80069de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f002 fa5d 	bl	8008e38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d102      	bne.n	800698c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d010      	beq.n	80069cc <HAL_DMA_Init+0x624>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d80c      	bhi.n	80069cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f002 fada 	bl	8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	e008      	b.n	80069de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	a7fdabf8 	.word	0xa7fdabf8
 80069fc:	cccccccd 	.word	0xcccccccd
 8006a00:	40020010 	.word	0x40020010
 8006a04:	40020028 	.word	0x40020028
 8006a08:	40020040 	.word	0x40020040
 8006a0c:	40020058 	.word	0x40020058
 8006a10:	40020070 	.word	0x40020070
 8006a14:	40020088 	.word	0x40020088
 8006a18:	400200a0 	.word	0x400200a0
 8006a1c:	400200b8 	.word	0x400200b8
 8006a20:	40020410 	.word	0x40020410
 8006a24:	40020428 	.word	0x40020428
 8006a28:	40020440 	.word	0x40020440
 8006a2c:	40020458 	.word	0x40020458
 8006a30:	40020470 	.word	0x40020470
 8006a34:	40020488 	.word	0x40020488
 8006a38:	400204a0 	.word	0x400204a0
 8006a3c:	400204b8 	.word	0x400204b8
 8006a40:	58025408 	.word	0x58025408
 8006a44:	5802541c 	.word	0x5802541c
 8006a48:	58025430 	.word	0x58025430
 8006a4c:	58025444 	.word	0x58025444
 8006a50:	58025458 	.word	0x58025458
 8006a54:	5802546c 	.word	0x5802546c
 8006a58:	58025480 	.word	0x58025480
 8006a5c:	58025494 	.word	0x58025494

08006a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e226      	b.n	8006eca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_DMA_Start_IT+0x2a>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e21f      	b.n	8006eca <HAL_DMA_Start_IT+0x46a>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	f040 820a 	bne.w	8006eb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a68      	ldr	r2, [pc, #416]	; (8006c54 <HAL_DMA_Start_IT+0x1f4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a66      	ldr	r2, [pc, #408]	; (8006c58 <HAL_DMA_Start_IT+0x1f8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a65      	ldr	r2, [pc, #404]	; (8006c5c <HAL_DMA_Start_IT+0x1fc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a63      	ldr	r2, [pc, #396]	; (8006c60 <HAL_DMA_Start_IT+0x200>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a62      	ldr	r2, [pc, #392]	; (8006c64 <HAL_DMA_Start_IT+0x204>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a60      	ldr	r2, [pc, #384]	; (8006c68 <HAL_DMA_Start_IT+0x208>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a5f      	ldr	r2, [pc, #380]	; (8006c6c <HAL_DMA_Start_IT+0x20c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a5d      	ldr	r2, [pc, #372]	; (8006c70 <HAL_DMA_Start_IT+0x210>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a5c      	ldr	r2, [pc, #368]	; (8006c74 <HAL_DMA_Start_IT+0x214>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5a      	ldr	r2, [pc, #360]	; (8006c78 <HAL_DMA_Start_IT+0x218>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a59      	ldr	r2, [pc, #356]	; (8006c7c <HAL_DMA_Start_IT+0x21c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a57      	ldr	r2, [pc, #348]	; (8006c80 <HAL_DMA_Start_IT+0x220>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a56      	ldr	r2, [pc, #344]	; (8006c84 <HAL_DMA_Start_IT+0x224>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a54      	ldr	r2, [pc, #336]	; (8006c88 <HAL_DMA_Start_IT+0x228>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a53      	ldr	r2, [pc, #332]	; (8006c8c <HAL_DMA_Start_IT+0x22c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_Start_IT+0xee>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a51      	ldr	r2, [pc, #324]	; (8006c90 <HAL_DMA_Start_IT+0x230>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <HAL_DMA_Start_IT+0x100>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e007      	b.n	8006b70 <HAL_DMA_Start_IT+0x110>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 fe84 	bl	8008884 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a34      	ldr	r2, [pc, #208]	; (8006c54 <HAL_DMA_Start_IT+0x1f4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04a      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a33      	ldr	r2, [pc, #204]	; (8006c58 <HAL_DMA_Start_IT+0x1f8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d045      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a31      	ldr	r2, [pc, #196]	; (8006c5c <HAL_DMA_Start_IT+0x1fc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d040      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a30      	ldr	r2, [pc, #192]	; (8006c60 <HAL_DMA_Start_IT+0x200>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d03b      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2e      	ldr	r2, [pc, #184]	; (8006c64 <HAL_DMA_Start_IT+0x204>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d036      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <HAL_DMA_Start_IT+0x208>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d031      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <HAL_DMA_Start_IT+0x20c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d02c      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2a      	ldr	r2, [pc, #168]	; (8006c70 <HAL_DMA_Start_IT+0x210>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d027      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <HAL_DMA_Start_IT+0x214>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <HAL_DMA_Start_IT+0x218>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d01d      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a25      	ldr	r2, [pc, #148]	; (8006c7c <HAL_DMA_Start_IT+0x21c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a24      	ldr	r2, [pc, #144]	; (8006c80 <HAL_DMA_Start_IT+0x220>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <HAL_DMA_Start_IT+0x224>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <HAL_DMA_Start_IT+0x228>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_DMA_Start_IT+0x22c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_DMA_Start_IT+0x1bc>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <HAL_DMA_Start_IT+0x230>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d101      	bne.n	8006c20 <HAL_DMA_Start_IT+0x1c0>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <HAL_DMA_Start_IT+0x1c2>
 8006c20:	2300      	movs	r3, #0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d036      	beq.n	8006c94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f023 021e 	bic.w	r2, r3, #30
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0216 	orr.w	r2, r2, #22
 8006c38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d03e      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0208 	orr.w	r2, r2, #8
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e035      	b.n	8006cc0 <HAL_DMA_Start_IT+0x260>
 8006c54:	40020010 	.word	0x40020010
 8006c58:	40020028 	.word	0x40020028
 8006c5c:	40020040 	.word	0x40020040
 8006c60:	40020058 	.word	0x40020058
 8006c64:	40020070 	.word	0x40020070
 8006c68:	40020088 	.word	0x40020088
 8006c6c:	400200a0 	.word	0x400200a0
 8006c70:	400200b8 	.word	0x400200b8
 8006c74:	40020410 	.word	0x40020410
 8006c78:	40020428 	.word	0x40020428
 8006c7c:	40020440 	.word	0x40020440
 8006c80:	40020458 	.word	0x40020458
 8006c84:	40020470 	.word	0x40020470
 8006c88:	40020488 	.word	0x40020488
 8006c8c:	400204a0 	.word	0x400204a0
 8006c90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f023 020e 	bic.w	r2, r3, #14
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 020a 	orr.w	r2, r2, #10
 8006ca6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0204 	orr.w	r2, r2, #4
 8006cbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a83      	ldr	r2, [pc, #524]	; (8006ed4 <HAL_DMA_Start_IT+0x474>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d072      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a82      	ldr	r2, [pc, #520]	; (8006ed8 <HAL_DMA_Start_IT+0x478>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d06d      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a80      	ldr	r2, [pc, #512]	; (8006edc <HAL_DMA_Start_IT+0x47c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d068      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a7f      	ldr	r2, [pc, #508]	; (8006ee0 <HAL_DMA_Start_IT+0x480>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d063      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a7d      	ldr	r2, [pc, #500]	; (8006ee4 <HAL_DMA_Start_IT+0x484>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d05e      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a7c      	ldr	r2, [pc, #496]	; (8006ee8 <HAL_DMA_Start_IT+0x488>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d059      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a7a      	ldr	r2, [pc, #488]	; (8006eec <HAL_DMA_Start_IT+0x48c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d054      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a79      	ldr	r2, [pc, #484]	; (8006ef0 <HAL_DMA_Start_IT+0x490>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d04f      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a77      	ldr	r2, [pc, #476]	; (8006ef4 <HAL_DMA_Start_IT+0x494>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d04a      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a76      	ldr	r2, [pc, #472]	; (8006ef8 <HAL_DMA_Start_IT+0x498>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d045      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a74      	ldr	r2, [pc, #464]	; (8006efc <HAL_DMA_Start_IT+0x49c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d040      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a73      	ldr	r2, [pc, #460]	; (8006f00 <HAL_DMA_Start_IT+0x4a0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d03b      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a71      	ldr	r2, [pc, #452]	; (8006f04 <HAL_DMA_Start_IT+0x4a4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d036      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a70      	ldr	r2, [pc, #448]	; (8006f08 <HAL_DMA_Start_IT+0x4a8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d031      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a6e      	ldr	r2, [pc, #440]	; (8006f0c <HAL_DMA_Start_IT+0x4ac>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d02c      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a6d      	ldr	r2, [pc, #436]	; (8006f10 <HAL_DMA_Start_IT+0x4b0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d027      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a6b      	ldr	r2, [pc, #428]	; (8006f14 <HAL_DMA_Start_IT+0x4b4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d022      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a6a      	ldr	r2, [pc, #424]	; (8006f18 <HAL_DMA_Start_IT+0x4b8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d01d      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a68      	ldr	r2, [pc, #416]	; (8006f1c <HAL_DMA_Start_IT+0x4bc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a67      	ldr	r2, [pc, #412]	; (8006f20 <HAL_DMA_Start_IT+0x4c0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a65      	ldr	r2, [pc, #404]	; (8006f24 <HAL_DMA_Start_IT+0x4c4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a64      	ldr	r2, [pc, #400]	; (8006f28 <HAL_DMA_Start_IT+0x4c8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a62      	ldr	r2, [pc, #392]	; (8006f2c <HAL_DMA_Start_IT+0x4cc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_DMA_Start_IT+0x350>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a61      	ldr	r2, [pc, #388]	; (8006f30 <HAL_DMA_Start_IT+0x4d0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d101      	bne.n	8006db4 <HAL_DMA_Start_IT+0x354>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <HAL_DMA_Start_IT+0x356>
 8006db4:	2300      	movs	r3, #0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01a      	beq.n	8006df0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a37      	ldr	r2, [pc, #220]	; (8006ed4 <HAL_DMA_Start_IT+0x474>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d04a      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a36      	ldr	r2, [pc, #216]	; (8006ed8 <HAL_DMA_Start_IT+0x478>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d045      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a34      	ldr	r2, [pc, #208]	; (8006edc <HAL_DMA_Start_IT+0x47c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d040      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a33      	ldr	r2, [pc, #204]	; (8006ee0 <HAL_DMA_Start_IT+0x480>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d03b      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a31      	ldr	r2, [pc, #196]	; (8006ee4 <HAL_DMA_Start_IT+0x484>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d036      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a30      	ldr	r2, [pc, #192]	; (8006ee8 <HAL_DMA_Start_IT+0x488>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d031      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2e      	ldr	r2, [pc, #184]	; (8006eec <HAL_DMA_Start_IT+0x48c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02c      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2d      	ldr	r2, [pc, #180]	; (8006ef0 <HAL_DMA_Start_IT+0x490>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d027      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <HAL_DMA_Start_IT+0x494>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d022      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <HAL_DMA_Start_IT+0x498>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d01d      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a28      	ldr	r2, [pc, #160]	; (8006efc <HAL_DMA_Start_IT+0x49c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <HAL_DMA_Start_IT+0x4a0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <HAL_DMA_Start_IT+0x4a4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a24      	ldr	r2, [pc, #144]	; (8006f08 <HAL_DMA_Start_IT+0x4a8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a22      	ldr	r2, [pc, #136]	; (8006f0c <HAL_DMA_Start_IT+0x4ac>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_DMA_Start_IT+0x430>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <HAL_DMA_Start_IT+0x4b0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d108      	bne.n	8006ea2 <HAL_DMA_Start_IT+0x442>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e012      	b.n	8006ec8 <HAL_DMA_Start_IT+0x468>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0201 	orr.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e009      	b.n	8006ec8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40020010 	.word	0x40020010
 8006ed8:	40020028 	.word	0x40020028
 8006edc:	40020040 	.word	0x40020040
 8006ee0:	40020058 	.word	0x40020058
 8006ee4:	40020070 	.word	0x40020070
 8006ee8:	40020088 	.word	0x40020088
 8006eec:	400200a0 	.word	0x400200a0
 8006ef0:	400200b8 	.word	0x400200b8
 8006ef4:	40020410 	.word	0x40020410
 8006ef8:	40020428 	.word	0x40020428
 8006efc:	40020440 	.word	0x40020440
 8006f00:	40020458 	.word	0x40020458
 8006f04:	40020470 	.word	0x40020470
 8006f08:	40020488 	.word	0x40020488
 8006f0c:	400204a0 	.word	0x400204a0
 8006f10:	400204b8 	.word	0x400204b8
 8006f14:	58025408 	.word	0x58025408
 8006f18:	5802541c 	.word	0x5802541c
 8006f1c:	58025430 	.word	0x58025430
 8006f20:	58025444 	.word	0x58025444
 8006f24:	58025458 	.word	0x58025458
 8006f28:	5802546c 	.word	0x5802546c
 8006f2c:	58025480 	.word	0x58025480
 8006f30:	58025494 	.word	0x58025494

08006f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006f3c:	f7fd f90c 	bl	8004158 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e2dc      	b.n	8007506 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d008      	beq.n	8006f6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2280      	movs	r2, #128	; 0x80
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e2cd      	b.n	8007506 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a76      	ldr	r2, [pc, #472]	; (8007148 <HAL_DMA_Abort+0x214>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d04a      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a74      	ldr	r2, [pc, #464]	; (800714c <HAL_DMA_Abort+0x218>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d045      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a73      	ldr	r2, [pc, #460]	; (8007150 <HAL_DMA_Abort+0x21c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d040      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a71      	ldr	r2, [pc, #452]	; (8007154 <HAL_DMA_Abort+0x220>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d03b      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a70      	ldr	r2, [pc, #448]	; (8007158 <HAL_DMA_Abort+0x224>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d036      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a6e      	ldr	r2, [pc, #440]	; (800715c <HAL_DMA_Abort+0x228>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d031      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a6d      	ldr	r2, [pc, #436]	; (8007160 <HAL_DMA_Abort+0x22c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d02c      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a6b      	ldr	r2, [pc, #428]	; (8007164 <HAL_DMA_Abort+0x230>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d027      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a6a      	ldr	r2, [pc, #424]	; (8007168 <HAL_DMA_Abort+0x234>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d022      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a68      	ldr	r2, [pc, #416]	; (800716c <HAL_DMA_Abort+0x238>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01d      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a67      	ldr	r2, [pc, #412]	; (8007170 <HAL_DMA_Abort+0x23c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d018      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a65      	ldr	r2, [pc, #404]	; (8007174 <HAL_DMA_Abort+0x240>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a64      	ldr	r2, [pc, #400]	; (8007178 <HAL_DMA_Abort+0x244>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00e      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a62      	ldr	r2, [pc, #392]	; (800717c <HAL_DMA_Abort+0x248>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d009      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a61      	ldr	r2, [pc, #388]	; (8007180 <HAL_DMA_Abort+0x24c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d004      	beq.n	800700a <HAL_DMA_Abort+0xd6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a5f      	ldr	r2, [pc, #380]	; (8007184 <HAL_DMA_Abort+0x250>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d101      	bne.n	800700e <HAL_DMA_Abort+0xda>
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <HAL_DMA_Abort+0xdc>
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d013      	beq.n	800703c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 021e 	bic.w	r2, r2, #30
 8007022:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007032:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e00a      	b.n	8007052 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 020e 	bic.w	r2, r2, #14
 800704a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a3c      	ldr	r2, [pc, #240]	; (8007148 <HAL_DMA_Abort+0x214>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d072      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a3a      	ldr	r2, [pc, #232]	; (800714c <HAL_DMA_Abort+0x218>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d06d      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a39      	ldr	r2, [pc, #228]	; (8007150 <HAL_DMA_Abort+0x21c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d068      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a37      	ldr	r2, [pc, #220]	; (8007154 <HAL_DMA_Abort+0x220>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d063      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a36      	ldr	r2, [pc, #216]	; (8007158 <HAL_DMA_Abort+0x224>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d05e      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a34      	ldr	r2, [pc, #208]	; (800715c <HAL_DMA_Abort+0x228>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d059      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a33      	ldr	r2, [pc, #204]	; (8007160 <HAL_DMA_Abort+0x22c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d054      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a31      	ldr	r2, [pc, #196]	; (8007164 <HAL_DMA_Abort+0x230>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d04f      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a30      	ldr	r2, [pc, #192]	; (8007168 <HAL_DMA_Abort+0x234>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d04a      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2e      	ldr	r2, [pc, #184]	; (800716c <HAL_DMA_Abort+0x238>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d045      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2d      	ldr	r2, [pc, #180]	; (8007170 <HAL_DMA_Abort+0x23c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d040      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a2b      	ldr	r2, [pc, #172]	; (8007174 <HAL_DMA_Abort+0x240>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a2a      	ldr	r2, [pc, #168]	; (8007178 <HAL_DMA_Abort+0x244>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d036      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a28      	ldr	r2, [pc, #160]	; (800717c <HAL_DMA_Abort+0x248>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d031      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a27      	ldr	r2, [pc, #156]	; (8007180 <HAL_DMA_Abort+0x24c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d02c      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a25      	ldr	r2, [pc, #148]	; (8007184 <HAL_DMA_Abort+0x250>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d027      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a24      	ldr	r2, [pc, #144]	; (8007188 <HAL_DMA_Abort+0x254>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a22      	ldr	r2, [pc, #136]	; (800718c <HAL_DMA_Abort+0x258>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a21      	ldr	r2, [pc, #132]	; (8007190 <HAL_DMA_Abort+0x25c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <HAL_DMA_Abort+0x260>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <HAL_DMA_Abort+0x264>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <HAL_DMA_Abort+0x268>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1b      	ldr	r2, [pc, #108]	; (80071a0 <HAL_DMA_Abort+0x26c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_DMA_Abort+0x20e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <HAL_DMA_Abort+0x270>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d132      	bne.n	80071a8 <HAL_DMA_Abort+0x274>
 8007142:	2301      	movs	r3, #1
 8007144:	e031      	b.n	80071aa <HAL_DMA_Abort+0x276>
 8007146:	bf00      	nop
 8007148:	40020010 	.word	0x40020010
 800714c:	40020028 	.word	0x40020028
 8007150:	40020040 	.word	0x40020040
 8007154:	40020058 	.word	0x40020058
 8007158:	40020070 	.word	0x40020070
 800715c:	40020088 	.word	0x40020088
 8007160:	400200a0 	.word	0x400200a0
 8007164:	400200b8 	.word	0x400200b8
 8007168:	40020410 	.word	0x40020410
 800716c:	40020428 	.word	0x40020428
 8007170:	40020440 	.word	0x40020440
 8007174:	40020458 	.word	0x40020458
 8007178:	40020470 	.word	0x40020470
 800717c:	40020488 	.word	0x40020488
 8007180:	400204a0 	.word	0x400204a0
 8007184:	400204b8 	.word	0x400204b8
 8007188:	58025408 	.word	0x58025408
 800718c:	5802541c 	.word	0x5802541c
 8007190:	58025430 	.word	0x58025430
 8007194:	58025444 	.word	0x58025444
 8007198:	58025458 	.word	0x58025458
 800719c:	5802546c 	.word	0x5802546c
 80071a0:	58025480 	.word	0x58025480
 80071a4:	58025494 	.word	0x58025494
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a6d      	ldr	r2, [pc, #436]	; (8007378 <HAL_DMA_Abort+0x444>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d04a      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a6b      	ldr	r2, [pc, #428]	; (800737c <HAL_DMA_Abort+0x448>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d045      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a6a      	ldr	r2, [pc, #424]	; (8007380 <HAL_DMA_Abort+0x44c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d040      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a68      	ldr	r2, [pc, #416]	; (8007384 <HAL_DMA_Abort+0x450>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d03b      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a67      	ldr	r2, [pc, #412]	; (8007388 <HAL_DMA_Abort+0x454>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d036      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a65      	ldr	r2, [pc, #404]	; (800738c <HAL_DMA_Abort+0x458>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d031      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a64      	ldr	r2, [pc, #400]	; (8007390 <HAL_DMA_Abort+0x45c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d02c      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a62      	ldr	r2, [pc, #392]	; (8007394 <HAL_DMA_Abort+0x460>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d027      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a61      	ldr	r2, [pc, #388]	; (8007398 <HAL_DMA_Abort+0x464>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d022      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a5f      	ldr	r2, [pc, #380]	; (800739c <HAL_DMA_Abort+0x468>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d01d      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a5e      	ldr	r2, [pc, #376]	; (80073a0 <HAL_DMA_Abort+0x46c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d018      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a5c      	ldr	r2, [pc, #368]	; (80073a4 <HAL_DMA_Abort+0x470>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d013      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a5b      	ldr	r2, [pc, #364]	; (80073a8 <HAL_DMA_Abort+0x474>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00e      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a59      	ldr	r2, [pc, #356]	; (80073ac <HAL_DMA_Abort+0x478>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d009      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_DMA_Abort+0x47c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_DMA_Abort+0x32a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a56      	ldr	r2, [pc, #344]	; (80073b4 <HAL_DMA_Abort+0x480>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <HAL_DMA_Abort+0x33c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <HAL_DMA_Abort+0x34c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0201 	bic.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007280:	e013      	b.n	80072aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007282:	f7fc ff69 	bl	8004158 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b05      	cmp	r3, #5
 800728e:	d90c      	bls.n	80072aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e12d      	b.n	8007506 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <HAL_DMA_Abort+0x444>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d04a      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2d      	ldr	r2, [pc, #180]	; (800737c <HAL_DMA_Abort+0x448>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d045      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a2c      	ldr	r2, [pc, #176]	; (8007380 <HAL_DMA_Abort+0x44c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d040      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <HAL_DMA_Abort+0x450>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d03b      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a29      	ldr	r2, [pc, #164]	; (8007388 <HAL_DMA_Abort+0x454>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d036      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <HAL_DMA_Abort+0x458>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d031      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a26      	ldr	r2, [pc, #152]	; (8007390 <HAL_DMA_Abort+0x45c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d02c      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a24      	ldr	r2, [pc, #144]	; (8007394 <HAL_DMA_Abort+0x460>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d027      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a23      	ldr	r2, [pc, #140]	; (8007398 <HAL_DMA_Abort+0x464>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d022      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a21      	ldr	r2, [pc, #132]	; (800739c <HAL_DMA_Abort+0x468>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d01d      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a20      	ldr	r2, [pc, #128]	; (80073a0 <HAL_DMA_Abort+0x46c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d018      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <HAL_DMA_Abort+0x470>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d013      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_DMA_Abort+0x474>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00e      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1b      	ldr	r2, [pc, #108]	; (80073ac <HAL_DMA_Abort+0x478>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d009      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1a      	ldr	r2, [pc, #104]	; (80073b0 <HAL_DMA_Abort+0x47c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d004      	beq.n	8007356 <HAL_DMA_Abort+0x422>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <HAL_DMA_Abort+0x480>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d101      	bne.n	800735a <HAL_DMA_Abort+0x426>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <HAL_DMA_Abort+0x428>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02b      	beq.n	80073b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007364:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736a:	f003 031f 	and.w	r3, r3, #31
 800736e:	223f      	movs	r2, #63	; 0x3f
 8007370:	409a      	lsls	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	609a      	str	r2, [r3, #8]
 8007376:	e02a      	b.n	80073ce <HAL_DMA_Abort+0x49a>
 8007378:	40020010 	.word	0x40020010
 800737c:	40020028 	.word	0x40020028
 8007380:	40020040 	.word	0x40020040
 8007384:	40020058 	.word	0x40020058
 8007388:	40020070 	.word	0x40020070
 800738c:	40020088 	.word	0x40020088
 8007390:	400200a0 	.word	0x400200a0
 8007394:	400200b8 	.word	0x400200b8
 8007398:	40020410 	.word	0x40020410
 800739c:	40020428 	.word	0x40020428
 80073a0:	40020440 	.word	0x40020440
 80073a4:	40020458 	.word	0x40020458
 80073a8:	40020470 	.word	0x40020470
 80073ac:	40020488 	.word	0x40020488
 80073b0:	400204a0 	.word	0x400204a0
 80073b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2201      	movs	r2, #1
 80073c8:	409a      	lsls	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a4f      	ldr	r2, [pc, #316]	; (8007510 <HAL_DMA_Abort+0x5dc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d072      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a4d      	ldr	r2, [pc, #308]	; (8007514 <HAL_DMA_Abort+0x5e0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d06d      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a4c      	ldr	r2, [pc, #304]	; (8007518 <HAL_DMA_Abort+0x5e4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d068      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a4a      	ldr	r2, [pc, #296]	; (800751c <HAL_DMA_Abort+0x5e8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d063      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a49      	ldr	r2, [pc, #292]	; (8007520 <HAL_DMA_Abort+0x5ec>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d05e      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a47      	ldr	r2, [pc, #284]	; (8007524 <HAL_DMA_Abort+0x5f0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d059      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a46      	ldr	r2, [pc, #280]	; (8007528 <HAL_DMA_Abort+0x5f4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d054      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a44      	ldr	r2, [pc, #272]	; (800752c <HAL_DMA_Abort+0x5f8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d04f      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a43      	ldr	r2, [pc, #268]	; (8007530 <HAL_DMA_Abort+0x5fc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d04a      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a41      	ldr	r2, [pc, #260]	; (8007534 <HAL_DMA_Abort+0x600>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d045      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a40      	ldr	r2, [pc, #256]	; (8007538 <HAL_DMA_Abort+0x604>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d040      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a3e      	ldr	r2, [pc, #248]	; (800753c <HAL_DMA_Abort+0x608>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d03b      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a3d      	ldr	r2, [pc, #244]	; (8007540 <HAL_DMA_Abort+0x60c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d036      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a3b      	ldr	r2, [pc, #236]	; (8007544 <HAL_DMA_Abort+0x610>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d031      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3a      	ldr	r2, [pc, #232]	; (8007548 <HAL_DMA_Abort+0x614>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d02c      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a38      	ldr	r2, [pc, #224]	; (800754c <HAL_DMA_Abort+0x618>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d027      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a37      	ldr	r2, [pc, #220]	; (8007550 <HAL_DMA_Abort+0x61c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a35      	ldr	r2, [pc, #212]	; (8007554 <HAL_DMA_Abort+0x620>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01d      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a34      	ldr	r2, [pc, #208]	; (8007558 <HAL_DMA_Abort+0x624>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d018      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a32      	ldr	r2, [pc, #200]	; (800755c <HAL_DMA_Abort+0x628>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d013      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a31      	ldr	r2, [pc, #196]	; (8007560 <HAL_DMA_Abort+0x62c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00e      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2f      	ldr	r2, [pc, #188]	; (8007564 <HAL_DMA_Abort+0x630>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d009      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a2e      	ldr	r2, [pc, #184]	; (8007568 <HAL_DMA_Abort+0x634>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <HAL_DMA_Abort+0x58a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a2c      	ldr	r2, [pc, #176]	; (800756c <HAL_DMA_Abort+0x638>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d101      	bne.n	80074c2 <HAL_DMA_Abort+0x58e>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_DMA_Abort+0x590>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d015      	beq.n	80074f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00c      	beq.n	80074f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40020010 	.word	0x40020010
 8007514:	40020028 	.word	0x40020028
 8007518:	40020040 	.word	0x40020040
 800751c:	40020058 	.word	0x40020058
 8007520:	40020070 	.word	0x40020070
 8007524:	40020088 	.word	0x40020088
 8007528:	400200a0 	.word	0x400200a0
 800752c:	400200b8 	.word	0x400200b8
 8007530:	40020410 	.word	0x40020410
 8007534:	40020428 	.word	0x40020428
 8007538:	40020440 	.word	0x40020440
 800753c:	40020458 	.word	0x40020458
 8007540:	40020470 	.word	0x40020470
 8007544:	40020488 	.word	0x40020488
 8007548:	400204a0 	.word	0x400204a0
 800754c:	400204b8 	.word	0x400204b8
 8007550:	58025408 	.word	0x58025408
 8007554:	5802541c 	.word	0x5802541c
 8007558:	58025430 	.word	0x58025430
 800755c:	58025444 	.word	0x58025444
 8007560:	58025458 	.word	0x58025458
 8007564:	5802546c 	.word	0x5802546c
 8007568:	58025480 	.word	0x58025480
 800756c:	58025494 	.word	0x58025494

08007570 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e237      	b.n	80079f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d004      	beq.n	8007598 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2280      	movs	r2, #128	; 0x80
 8007592:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e22c      	b.n	80079f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5c      	ldr	r2, [pc, #368]	; (8007710 <HAL_DMA_Abort_IT+0x1a0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d04a      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5b      	ldr	r2, [pc, #364]	; (8007714 <HAL_DMA_Abort_IT+0x1a4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d045      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a59      	ldr	r2, [pc, #356]	; (8007718 <HAL_DMA_Abort_IT+0x1a8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d040      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a58      	ldr	r2, [pc, #352]	; (800771c <HAL_DMA_Abort_IT+0x1ac>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d03b      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a56      	ldr	r2, [pc, #344]	; (8007720 <HAL_DMA_Abort_IT+0x1b0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d036      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a55      	ldr	r2, [pc, #340]	; (8007724 <HAL_DMA_Abort_IT+0x1b4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d031      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a53      	ldr	r2, [pc, #332]	; (8007728 <HAL_DMA_Abort_IT+0x1b8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d02c      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a52      	ldr	r2, [pc, #328]	; (800772c <HAL_DMA_Abort_IT+0x1bc>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d027      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a50      	ldr	r2, [pc, #320]	; (8007730 <HAL_DMA_Abort_IT+0x1c0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a4f      	ldr	r2, [pc, #316]	; (8007734 <HAL_DMA_Abort_IT+0x1c4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d01d      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a4d      	ldr	r2, [pc, #308]	; (8007738 <HAL_DMA_Abort_IT+0x1c8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a4c      	ldr	r2, [pc, #304]	; (800773c <HAL_DMA_Abort_IT+0x1cc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a4a      	ldr	r2, [pc, #296]	; (8007740 <HAL_DMA_Abort_IT+0x1d0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a49      	ldr	r2, [pc, #292]	; (8007744 <HAL_DMA_Abort_IT+0x1d4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a47      	ldr	r2, [pc, #284]	; (8007748 <HAL_DMA_Abort_IT+0x1d8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_DMA_Abort_IT+0xc8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a46      	ldr	r2, [pc, #280]	; (800774c <HAL_DMA_Abort_IT+0x1dc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d101      	bne.n	800763c <HAL_DMA_Abort_IT+0xcc>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <HAL_DMA_Abort_IT+0xce>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8086 	beq.w	8007750 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2204      	movs	r2, #4
 8007648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2f      	ldr	r2, [pc, #188]	; (8007710 <HAL_DMA_Abort_IT+0x1a0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d04a      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a2e      	ldr	r2, [pc, #184]	; (8007714 <HAL_DMA_Abort_IT+0x1a4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d045      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <HAL_DMA_Abort_IT+0x1a8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d040      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2b      	ldr	r2, [pc, #172]	; (800771c <HAL_DMA_Abort_IT+0x1ac>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d03b      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a29      	ldr	r2, [pc, #164]	; (8007720 <HAL_DMA_Abort_IT+0x1b0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d036      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a28      	ldr	r2, [pc, #160]	; (8007724 <HAL_DMA_Abort_IT+0x1b4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d031      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_DMA_Abort_IT+0x1b8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02c      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a25      	ldr	r2, [pc, #148]	; (800772c <HAL_DMA_Abort_IT+0x1bc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d027      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a23      	ldr	r2, [pc, #140]	; (8007730 <HAL_DMA_Abort_IT+0x1c0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d022      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a22      	ldr	r2, [pc, #136]	; (8007734 <HAL_DMA_Abort_IT+0x1c4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d01d      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a20      	ldr	r2, [pc, #128]	; (8007738 <HAL_DMA_Abort_IT+0x1c8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d018      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1f      	ldr	r2, [pc, #124]	; (800773c <HAL_DMA_Abort_IT+0x1cc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d013      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1d      	ldr	r2, [pc, #116]	; (8007740 <HAL_DMA_Abort_IT+0x1d0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00e      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <HAL_DMA_Abort_IT+0x1d4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d009      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <HAL_DMA_Abort_IT+0x1d8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d004      	beq.n	80076ec <HAL_DMA_Abort_IT+0x17c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a19      	ldr	r2, [pc, #100]	; (800774c <HAL_DMA_Abort_IT+0x1dc>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d108      	bne.n	80076fe <HAL_DMA_Abort_IT+0x18e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	e178      	b.n	80079f0 <HAL_DMA_Abort_IT+0x480>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e16f      	b.n	80079f0 <HAL_DMA_Abort_IT+0x480>
 8007710:	40020010 	.word	0x40020010
 8007714:	40020028 	.word	0x40020028
 8007718:	40020040 	.word	0x40020040
 800771c:	40020058 	.word	0x40020058
 8007720:	40020070 	.word	0x40020070
 8007724:	40020088 	.word	0x40020088
 8007728:	400200a0 	.word	0x400200a0
 800772c:	400200b8 	.word	0x400200b8
 8007730:	40020410 	.word	0x40020410
 8007734:	40020428 	.word	0x40020428
 8007738:	40020440 	.word	0x40020440
 800773c:	40020458 	.word	0x40020458
 8007740:	40020470 	.word	0x40020470
 8007744:	40020488 	.word	0x40020488
 8007748:	400204a0 	.word	0x400204a0
 800774c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 020e 	bic.w	r2, r2, #14
 800775e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a6c      	ldr	r2, [pc, #432]	; (8007918 <HAL_DMA_Abort_IT+0x3a8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d04a      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a6b      	ldr	r2, [pc, #428]	; (800791c <HAL_DMA_Abort_IT+0x3ac>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d045      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a69      	ldr	r2, [pc, #420]	; (8007920 <HAL_DMA_Abort_IT+0x3b0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d040      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a68      	ldr	r2, [pc, #416]	; (8007924 <HAL_DMA_Abort_IT+0x3b4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d03b      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a66      	ldr	r2, [pc, #408]	; (8007928 <HAL_DMA_Abort_IT+0x3b8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d036      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a65      	ldr	r2, [pc, #404]	; (800792c <HAL_DMA_Abort_IT+0x3bc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d031      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a63      	ldr	r2, [pc, #396]	; (8007930 <HAL_DMA_Abort_IT+0x3c0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02c      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a62      	ldr	r2, [pc, #392]	; (8007934 <HAL_DMA_Abort_IT+0x3c4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d027      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a60      	ldr	r2, [pc, #384]	; (8007938 <HAL_DMA_Abort_IT+0x3c8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a5f      	ldr	r2, [pc, #380]	; (800793c <HAL_DMA_Abort_IT+0x3cc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01d      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a5d      	ldr	r2, [pc, #372]	; (8007940 <HAL_DMA_Abort_IT+0x3d0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a5c      	ldr	r2, [pc, #368]	; (8007944 <HAL_DMA_Abort_IT+0x3d4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a5a      	ldr	r2, [pc, #360]	; (8007948 <HAL_DMA_Abort_IT+0x3d8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a59      	ldr	r2, [pc, #356]	; (800794c <HAL_DMA_Abort_IT+0x3dc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a57      	ldr	r2, [pc, #348]	; (8007950 <HAL_DMA_Abort_IT+0x3e0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_DMA_Abort_IT+0x290>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a56      	ldr	r2, [pc, #344]	; (8007954 <HAL_DMA_Abort_IT+0x3e4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d108      	bne.n	8007812 <HAL_DMA_Abort_IT+0x2a2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	e007      	b.n	8007822 <HAL_DMA_Abort_IT+0x2b2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <HAL_DMA_Abort_IT+0x3a8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d072      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a3a      	ldr	r2, [pc, #232]	; (800791c <HAL_DMA_Abort_IT+0x3ac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d06d      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a39      	ldr	r2, [pc, #228]	; (8007920 <HAL_DMA_Abort_IT+0x3b0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d068      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a37      	ldr	r2, [pc, #220]	; (8007924 <HAL_DMA_Abort_IT+0x3b4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d063      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a36      	ldr	r2, [pc, #216]	; (8007928 <HAL_DMA_Abort_IT+0x3b8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d05e      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a34      	ldr	r2, [pc, #208]	; (800792c <HAL_DMA_Abort_IT+0x3bc>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d059      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a33      	ldr	r2, [pc, #204]	; (8007930 <HAL_DMA_Abort_IT+0x3c0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d054      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a31      	ldr	r2, [pc, #196]	; (8007934 <HAL_DMA_Abort_IT+0x3c4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d04f      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a30      	ldr	r2, [pc, #192]	; (8007938 <HAL_DMA_Abort_IT+0x3c8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d04a      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a2e      	ldr	r2, [pc, #184]	; (800793c <HAL_DMA_Abort_IT+0x3cc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d045      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a2d      	ldr	r2, [pc, #180]	; (8007940 <HAL_DMA_Abort_IT+0x3d0>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d040      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a2b      	ldr	r2, [pc, #172]	; (8007944 <HAL_DMA_Abort_IT+0x3d4>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d03b      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a2a      	ldr	r2, [pc, #168]	; (8007948 <HAL_DMA_Abort_IT+0x3d8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d036      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a28      	ldr	r2, [pc, #160]	; (800794c <HAL_DMA_Abort_IT+0x3dc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d031      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a27      	ldr	r2, [pc, #156]	; (8007950 <HAL_DMA_Abort_IT+0x3e0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d02c      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a25      	ldr	r2, [pc, #148]	; (8007954 <HAL_DMA_Abort_IT+0x3e4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d027      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a24      	ldr	r2, [pc, #144]	; (8007958 <HAL_DMA_Abort_IT+0x3e8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d022      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a22      	ldr	r2, [pc, #136]	; (800795c <HAL_DMA_Abort_IT+0x3ec>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01d      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a21      	ldr	r2, [pc, #132]	; (8007960 <HAL_DMA_Abort_IT+0x3f0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d018      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <HAL_DMA_Abort_IT+0x3f4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <HAL_DMA_Abort_IT+0x3f8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00e      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1c      	ldr	r2, [pc, #112]	; (800796c <HAL_DMA_Abort_IT+0x3fc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <HAL_DMA_Abort_IT+0x400>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_DMA_Abort_IT+0x3a2>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a19      	ldr	r2, [pc, #100]	; (8007974 <HAL_DMA_Abort_IT+0x404>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d132      	bne.n	8007978 <HAL_DMA_Abort_IT+0x408>
 8007912:	2301      	movs	r3, #1
 8007914:	e031      	b.n	800797a <HAL_DMA_Abort_IT+0x40a>
 8007916:	bf00      	nop
 8007918:	40020010 	.word	0x40020010
 800791c:	40020028 	.word	0x40020028
 8007920:	40020040 	.word	0x40020040
 8007924:	40020058 	.word	0x40020058
 8007928:	40020070 	.word	0x40020070
 800792c:	40020088 	.word	0x40020088
 8007930:	400200a0 	.word	0x400200a0
 8007934:	400200b8 	.word	0x400200b8
 8007938:	40020410 	.word	0x40020410
 800793c:	40020428 	.word	0x40020428
 8007940:	40020440 	.word	0x40020440
 8007944:	40020458 	.word	0x40020458
 8007948:	40020470 	.word	0x40020470
 800794c:	40020488 	.word	0x40020488
 8007950:	400204a0 	.word	0x400204a0
 8007954:	400204b8 	.word	0x400204b8
 8007958:	58025408 	.word	0x58025408
 800795c:	5802541c 	.word	0x5802541c
 8007960:	58025430 	.word	0x58025430
 8007964:	58025444 	.word	0x58025444
 8007968:	58025458 	.word	0x58025458
 800796c:	5802546c 	.word	0x5802546c
 8007970:	58025480 	.word	0x58025480
 8007974:	58025494 	.word	0x58025494
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d028      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800798c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	2201      	movs	r2, #1
 800799e:	409a      	lsls	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	; 0x28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a08:	4b67      	ldr	r3, [pc, #412]	; (8007ba8 <HAL_DMA_IRQHandler+0x1ac>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a67      	ldr	r2, [pc, #412]	; (8007bac <HAL_DMA_IRQHandler+0x1b0>)
 8007a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a12:	0a9b      	lsrs	r3, r3, #10
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a5f      	ldr	r2, [pc, #380]	; (8007bb0 <HAL_DMA_IRQHandler+0x1b4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d04a      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a5d      	ldr	r2, [pc, #372]	; (8007bb4 <HAL_DMA_IRQHandler+0x1b8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d045      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a5c      	ldr	r2, [pc, #368]	; (8007bb8 <HAL_DMA_IRQHandler+0x1bc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d040      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a5a      	ldr	r2, [pc, #360]	; (8007bbc <HAL_DMA_IRQHandler+0x1c0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d03b      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a59      	ldr	r2, [pc, #356]	; (8007bc0 <HAL_DMA_IRQHandler+0x1c4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d036      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a57      	ldr	r2, [pc, #348]	; (8007bc4 <HAL_DMA_IRQHandler+0x1c8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d031      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a56      	ldr	r2, [pc, #344]	; (8007bc8 <HAL_DMA_IRQHandler+0x1cc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d02c      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a54      	ldr	r2, [pc, #336]	; (8007bcc <HAL_DMA_IRQHandler+0x1d0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d027      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a53      	ldr	r2, [pc, #332]	; (8007bd0 <HAL_DMA_IRQHandler+0x1d4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d022      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a51      	ldr	r2, [pc, #324]	; (8007bd4 <HAL_DMA_IRQHandler+0x1d8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01d      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a50      	ldr	r2, [pc, #320]	; (8007bd8 <HAL_DMA_IRQHandler+0x1dc>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d018      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a4e      	ldr	r2, [pc, #312]	; (8007bdc <HAL_DMA_IRQHandler+0x1e0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a4d      	ldr	r2, [pc, #308]	; (8007be0 <HAL_DMA_IRQHandler+0x1e4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a4b      	ldr	r2, [pc, #300]	; (8007be4 <HAL_DMA_IRQHandler+0x1e8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a4a      	ldr	r2, [pc, #296]	; (8007be8 <HAL_DMA_IRQHandler+0x1ec>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_DMA_IRQHandler+0xd2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a48      	ldr	r2, [pc, #288]	; (8007bec <HAL_DMA_IRQHandler+0x1f0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d101      	bne.n	8007ad2 <HAL_DMA_IRQHandler+0xd6>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_DMA_IRQHandler+0xd8>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 842b 	beq.w	8008330 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	f003 031f 	and.w	r3, r3, #31
 8007ae2:	2208      	movs	r2, #8
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80a2 	beq.w	8007c34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2e      	ldr	r2, [pc, #184]	; (8007bb0 <HAL_DMA_IRQHandler+0x1b4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d04a      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a2d      	ldr	r2, [pc, #180]	; (8007bb4 <HAL_DMA_IRQHandler+0x1b8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d045      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2b      	ldr	r2, [pc, #172]	; (8007bb8 <HAL_DMA_IRQHandler+0x1bc>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d040      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <HAL_DMA_IRQHandler+0x1c0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d03b      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <HAL_DMA_IRQHandler+0x1c4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d036      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <HAL_DMA_IRQHandler+0x1c8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d031      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a25      	ldr	r2, [pc, #148]	; (8007bc8 <HAL_DMA_IRQHandler+0x1cc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d02c      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a24      	ldr	r2, [pc, #144]	; (8007bcc <HAL_DMA_IRQHandler+0x1d0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d027      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a22      	ldr	r2, [pc, #136]	; (8007bd0 <HAL_DMA_IRQHandler+0x1d4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d022      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a21      	ldr	r2, [pc, #132]	; (8007bd4 <HAL_DMA_IRQHandler+0x1d8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d01d      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <HAL_DMA_IRQHandler+0x1dc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d018      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1e      	ldr	r2, [pc, #120]	; (8007bdc <HAL_DMA_IRQHandler+0x1e0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d013      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <HAL_DMA_IRQHandler+0x1e4>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00e      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1b      	ldr	r2, [pc, #108]	; (8007be4 <HAL_DMA_IRQHandler+0x1e8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d009      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <HAL_DMA_IRQHandler+0x1ec>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d004      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x194>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a18      	ldr	r2, [pc, #96]	; (8007bec <HAL_DMA_IRQHandler+0x1f0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d12f      	bne.n	8007bf0 <HAL_DMA_IRQHandler+0x1f4>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bf14      	ite	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	2300      	moveq	r3, #0
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	e02e      	b.n	8007c04 <HAL_DMA_IRQHandler+0x208>
 8007ba6:	bf00      	nop
 8007ba8:	24000084 	.word	0x24000084
 8007bac:	1b4e81b5 	.word	0x1b4e81b5
 8007bb0:	40020010 	.word	0x40020010
 8007bb4:	40020028 	.word	0x40020028
 8007bb8:	40020040 	.word	0x40020040
 8007bbc:	40020058 	.word	0x40020058
 8007bc0:	40020070 	.word	0x40020070
 8007bc4:	40020088 	.word	0x40020088
 8007bc8:	400200a0 	.word	0x400200a0
 8007bcc:	400200b8 	.word	0x400200b8
 8007bd0:	40020410 	.word	0x40020410
 8007bd4:	40020428 	.word	0x40020428
 8007bd8:	40020440 	.word	0x40020440
 8007bdc:	40020458 	.word	0x40020458
 8007be0:	40020470 	.word	0x40020470
 8007be4:	40020488 	.word	0x40020488
 8007be8:	400204a0 	.word	0x400204a0
 8007bec:	400204b8 	.word	0x400204b8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf14      	ite	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	2300      	moveq	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d015      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0204 	bic.w	r2, r2, #4
 8007c16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	2208      	movs	r2, #8
 8007c22:	409a      	lsls	r2, r3
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2c:	f043 0201 	orr.w	r2, r3, #1
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d06e      	beq.n	8007d28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a69      	ldr	r2, [pc, #420]	; (8007df4 <HAL_DMA_IRQHandler+0x3f8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d04a      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a67      	ldr	r2, [pc, #412]	; (8007df8 <HAL_DMA_IRQHandler+0x3fc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d045      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a66      	ldr	r2, [pc, #408]	; (8007dfc <HAL_DMA_IRQHandler+0x400>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d040      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a64      	ldr	r2, [pc, #400]	; (8007e00 <HAL_DMA_IRQHandler+0x404>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d03b      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a63      	ldr	r2, [pc, #396]	; (8007e04 <HAL_DMA_IRQHandler+0x408>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d036      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a61      	ldr	r2, [pc, #388]	; (8007e08 <HAL_DMA_IRQHandler+0x40c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d031      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a60      	ldr	r2, [pc, #384]	; (8007e0c <HAL_DMA_IRQHandler+0x410>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d02c      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a5e      	ldr	r2, [pc, #376]	; (8007e10 <HAL_DMA_IRQHandler+0x414>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d027      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a5d      	ldr	r2, [pc, #372]	; (8007e14 <HAL_DMA_IRQHandler+0x418>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d022      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5b      	ldr	r2, [pc, #364]	; (8007e18 <HAL_DMA_IRQHandler+0x41c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d01d      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a5a      	ldr	r2, [pc, #360]	; (8007e1c <HAL_DMA_IRQHandler+0x420>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d018      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a58      	ldr	r2, [pc, #352]	; (8007e20 <HAL_DMA_IRQHandler+0x424>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d013      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a57      	ldr	r2, [pc, #348]	; (8007e24 <HAL_DMA_IRQHandler+0x428>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00e      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a55      	ldr	r2, [pc, #340]	; (8007e28 <HAL_DMA_IRQHandler+0x42c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d009      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a54      	ldr	r2, [pc, #336]	; (8007e2c <HAL_DMA_IRQHandler+0x430>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d004      	beq.n	8007cea <HAL_DMA_IRQHandler+0x2ee>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a52      	ldr	r2, [pc, #328]	; (8007e30 <HAL_DMA_IRQHandler+0x434>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d10a      	bne.n	8007d00 <HAL_DMA_IRQHandler+0x304>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	e003      	b.n	8007d08 <HAL_DMA_IRQHandler+0x30c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00d      	beq.n	8007d28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2201      	movs	r2, #1
 8007d16:	409a      	lsls	r2, r3
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	f043 0202 	orr.w	r2, r3, #2
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	2204      	movs	r2, #4
 8007d32:	409a      	lsls	r2, r3
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 808f 	beq.w	8007e5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a2c      	ldr	r2, [pc, #176]	; (8007df4 <HAL_DMA_IRQHandler+0x3f8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d04a      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <HAL_DMA_IRQHandler+0x3fc>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d045      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a29      	ldr	r2, [pc, #164]	; (8007dfc <HAL_DMA_IRQHandler+0x400>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d040      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a27      	ldr	r2, [pc, #156]	; (8007e00 <HAL_DMA_IRQHandler+0x404>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d03b      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a26      	ldr	r2, [pc, #152]	; (8007e04 <HAL_DMA_IRQHandler+0x408>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d036      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a24      	ldr	r2, [pc, #144]	; (8007e08 <HAL_DMA_IRQHandler+0x40c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d031      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a23      	ldr	r2, [pc, #140]	; (8007e0c <HAL_DMA_IRQHandler+0x410>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d02c      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <HAL_DMA_IRQHandler+0x414>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d027      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a20      	ldr	r2, [pc, #128]	; (8007e14 <HAL_DMA_IRQHandler+0x418>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d022      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <HAL_DMA_IRQHandler+0x41c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d01d      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1d      	ldr	r2, [pc, #116]	; (8007e1c <HAL_DMA_IRQHandler+0x420>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d018      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <HAL_DMA_IRQHandler+0x424>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d013      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a1a      	ldr	r2, [pc, #104]	; (8007e24 <HAL_DMA_IRQHandler+0x428>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00e      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <HAL_DMA_IRQHandler+0x42c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d009      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <HAL_DMA_IRQHandler+0x430>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d004      	beq.n	8007dde <HAL_DMA_IRQHandler+0x3e2>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <HAL_DMA_IRQHandler+0x434>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d12a      	bne.n	8007e34 <HAL_DMA_IRQHandler+0x438>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	bf14      	ite	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	e023      	b.n	8007e3c <HAL_DMA_IRQHandler+0x440>
 8007df4:	40020010 	.word	0x40020010
 8007df8:	40020028 	.word	0x40020028
 8007dfc:	40020040 	.word	0x40020040
 8007e00:	40020058 	.word	0x40020058
 8007e04:	40020070 	.word	0x40020070
 8007e08:	40020088 	.word	0x40020088
 8007e0c:	400200a0 	.word	0x400200a0
 8007e10:	400200b8 	.word	0x400200b8
 8007e14:	40020410 	.word	0x40020410
 8007e18:	40020428 	.word	0x40020428
 8007e1c:	40020440 	.word	0x40020440
 8007e20:	40020458 	.word	0x40020458
 8007e24:	40020470 	.word	0x40020470
 8007e28:	40020488 	.word	0x40020488
 8007e2c:	400204a0 	.word	0x400204a0
 8007e30:	400204b8 	.word	0x400204b8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00d      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	2204      	movs	r2, #4
 8007e4a:	409a      	lsls	r2, r3
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e54:	f043 0204 	orr.w	r2, r3, #4
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2210      	movs	r2, #16
 8007e66:	409a      	lsls	r2, r3
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80a6 	beq.w	8007fbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a85      	ldr	r2, [pc, #532]	; (800808c <HAL_DMA_IRQHandler+0x690>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d04a      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a83      	ldr	r2, [pc, #524]	; (8008090 <HAL_DMA_IRQHandler+0x694>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d045      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a82      	ldr	r2, [pc, #520]	; (8008094 <HAL_DMA_IRQHandler+0x698>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d040      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a80      	ldr	r2, [pc, #512]	; (8008098 <HAL_DMA_IRQHandler+0x69c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d03b      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a7f      	ldr	r2, [pc, #508]	; (800809c <HAL_DMA_IRQHandler+0x6a0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d036      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a7d      	ldr	r2, [pc, #500]	; (80080a0 <HAL_DMA_IRQHandler+0x6a4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d031      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a7c      	ldr	r2, [pc, #496]	; (80080a4 <HAL_DMA_IRQHandler+0x6a8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d02c      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a7a      	ldr	r2, [pc, #488]	; (80080a8 <HAL_DMA_IRQHandler+0x6ac>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d027      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a79      	ldr	r2, [pc, #484]	; (80080ac <HAL_DMA_IRQHandler+0x6b0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d022      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a77      	ldr	r2, [pc, #476]	; (80080b0 <HAL_DMA_IRQHandler+0x6b4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01d      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a76      	ldr	r2, [pc, #472]	; (80080b4 <HAL_DMA_IRQHandler+0x6b8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d018      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a74      	ldr	r2, [pc, #464]	; (80080b8 <HAL_DMA_IRQHandler+0x6bc>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d013      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a73      	ldr	r2, [pc, #460]	; (80080bc <HAL_DMA_IRQHandler+0x6c0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00e      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a71      	ldr	r2, [pc, #452]	; (80080c0 <HAL_DMA_IRQHandler+0x6c4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d009      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a70      	ldr	r2, [pc, #448]	; (80080c4 <HAL_DMA_IRQHandler+0x6c8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d004      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x516>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a6e      	ldr	r2, [pc, #440]	; (80080c8 <HAL_DMA_IRQHandler+0x6cc>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d10a      	bne.n	8007f28 <HAL_DMA_IRQHandler+0x52c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bf14      	ite	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	2300      	moveq	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	e009      	b.n	8007f3c <HAL_DMA_IRQHandler+0x540>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bf14      	ite	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	2300      	moveq	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03e      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f44:	f003 031f 	and.w	r3, r3, #31
 8007f48:	2210      	movs	r2, #16
 8007f4a:	409a      	lsls	r2, r3
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d024      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
 8007f7c:	e01f      	b.n	8007fbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01b      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
 8007f8e:	e016      	b.n	8007fbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d107      	bne.n	8007fae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0208 	bic.w	r2, r2, #8
 8007fac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	409a      	lsls	r2, r3
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8110 	beq.w	80081f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2c      	ldr	r2, [pc, #176]	; (800808c <HAL_DMA_IRQHandler+0x690>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d04a      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2b      	ldr	r2, [pc, #172]	; (8008090 <HAL_DMA_IRQHandler+0x694>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d045      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a29      	ldr	r2, [pc, #164]	; (8008094 <HAL_DMA_IRQHandler+0x698>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d040      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a28      	ldr	r2, [pc, #160]	; (8008098 <HAL_DMA_IRQHandler+0x69c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d03b      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a26      	ldr	r2, [pc, #152]	; (800809c <HAL_DMA_IRQHandler+0x6a0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d036      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a25      	ldr	r2, [pc, #148]	; (80080a0 <HAL_DMA_IRQHandler+0x6a4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d031      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a23      	ldr	r2, [pc, #140]	; (80080a4 <HAL_DMA_IRQHandler+0x6a8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d02c      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a22      	ldr	r2, [pc, #136]	; (80080a8 <HAL_DMA_IRQHandler+0x6ac>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d027      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a20      	ldr	r2, [pc, #128]	; (80080ac <HAL_DMA_IRQHandler+0x6b0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d022      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <HAL_DMA_IRQHandler+0x6b4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d01d      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <HAL_DMA_IRQHandler+0x6b8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d018      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a1c      	ldr	r2, [pc, #112]	; (80080b8 <HAL_DMA_IRQHandler+0x6bc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d013      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a1a      	ldr	r2, [pc, #104]	; (80080bc <HAL_DMA_IRQHandler+0x6c0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d00e      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a19      	ldr	r2, [pc, #100]	; (80080c0 <HAL_DMA_IRQHandler+0x6c4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d009      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a17      	ldr	r2, [pc, #92]	; (80080c4 <HAL_DMA_IRQHandler+0x6c8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d004      	beq.n	8008074 <HAL_DMA_IRQHandler+0x678>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a16      	ldr	r2, [pc, #88]	; (80080c8 <HAL_DMA_IRQHandler+0x6cc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d12b      	bne.n	80080cc <HAL_DMA_IRQHandler+0x6d0>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b00      	cmp	r3, #0
 8008080:	bf14      	ite	ne
 8008082:	2301      	movne	r3, #1
 8008084:	2300      	moveq	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	e02a      	b.n	80080e0 <HAL_DMA_IRQHandler+0x6e4>
 800808a:	bf00      	nop
 800808c:	40020010 	.word	0x40020010
 8008090:	40020028 	.word	0x40020028
 8008094:	40020040 	.word	0x40020040
 8008098:	40020058 	.word	0x40020058
 800809c:	40020070 	.word	0x40020070
 80080a0:	40020088 	.word	0x40020088
 80080a4:	400200a0 	.word	0x400200a0
 80080a8:	400200b8 	.word	0x400200b8
 80080ac:	40020410 	.word	0x40020410
 80080b0:	40020428 	.word	0x40020428
 80080b4:	40020440 	.word	0x40020440
 80080b8:	40020458 	.word	0x40020458
 80080bc:	40020470 	.word	0x40020470
 80080c0:	40020488 	.word	0x40020488
 80080c4:	400204a0 	.word	0x400204a0
 80080c8:	400204b8 	.word	0x400204b8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8087 	beq.w	80081f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ea:	f003 031f 	and.w	r3, r3, #31
 80080ee:	2220      	movs	r2, #32
 80080f0:	409a      	lsls	r2, r3
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d139      	bne.n	8008176 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0216 	bic.w	r2, r2, #22
 8008110:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695a      	ldr	r2, [r3, #20]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008120:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <HAL_DMA_IRQHandler+0x736>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0208 	bic.w	r2, r2, #8
 8008140:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	223f      	movs	r2, #63	; 0x3f
 800814c:	409a      	lsls	r2, r3
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 834a 	beq.w	8008800 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
          }
          return;
 8008174:	e344      	b.n	8008800 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d018      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d108      	bne.n	80081a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	2b00      	cmp	r3, #0
 8008198:	d02c      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	e027      	b.n	80081f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d023      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
 80081b4:	e01e      	b.n	80081f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10f      	bne.n	80081e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0210 	bic.w	r2, r2, #16
 80081d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8306 	beq.w	800880a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8088 	beq.w	800831c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2204      	movs	r2, #4
 8008210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a7a      	ldr	r2, [pc, #488]	; (8008404 <HAL_DMA_IRQHandler+0xa08>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d04a      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a79      	ldr	r2, [pc, #484]	; (8008408 <HAL_DMA_IRQHandler+0xa0c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d045      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a77      	ldr	r2, [pc, #476]	; (800840c <HAL_DMA_IRQHandler+0xa10>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d040      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a76      	ldr	r2, [pc, #472]	; (8008410 <HAL_DMA_IRQHandler+0xa14>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d03b      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a74      	ldr	r2, [pc, #464]	; (8008414 <HAL_DMA_IRQHandler+0xa18>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d036      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a73      	ldr	r2, [pc, #460]	; (8008418 <HAL_DMA_IRQHandler+0xa1c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d031      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a71      	ldr	r2, [pc, #452]	; (800841c <HAL_DMA_IRQHandler+0xa20>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d02c      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a70      	ldr	r2, [pc, #448]	; (8008420 <HAL_DMA_IRQHandler+0xa24>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d027      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a6e      	ldr	r2, [pc, #440]	; (8008424 <HAL_DMA_IRQHandler+0xa28>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a6d      	ldr	r2, [pc, #436]	; (8008428 <HAL_DMA_IRQHandler+0xa2c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d01d      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6b      	ldr	r2, [pc, #428]	; (800842c <HAL_DMA_IRQHandler+0xa30>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a6a      	ldr	r2, [pc, #424]	; (8008430 <HAL_DMA_IRQHandler+0xa34>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a68      	ldr	r2, [pc, #416]	; (8008434 <HAL_DMA_IRQHandler+0xa38>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a67      	ldr	r2, [pc, #412]	; (8008438 <HAL_DMA_IRQHandler+0xa3c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a65      	ldr	r2, [pc, #404]	; (800843c <HAL_DMA_IRQHandler+0xa40>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x8b8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a64      	ldr	r2, [pc, #400]	; (8008440 <HAL_DMA_IRQHandler+0xa44>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d108      	bne.n	80082c6 <HAL_DMA_IRQHandler+0x8ca>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e007      	b.n	80082d6 <HAL_DMA_IRQHandler+0x8da>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0201 	bic.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082de:	429a      	cmp	r2, r3
 80082e0:	d307      	bcc.n	80082f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f2      	bne.n	80082d6 <HAL_DMA_IRQHandler+0x8da>
 80082f0:	e000      	b.n	80082f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80082f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2203      	movs	r2, #3
 8008306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800830a:	e003      	b.n	8008314 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8272 	beq.w	800880a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	e26c      	b.n	800880a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a43      	ldr	r2, [pc, #268]	; (8008444 <HAL_DMA_IRQHandler+0xa48>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d022      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a42      	ldr	r2, [pc, #264]	; (8008448 <HAL_DMA_IRQHandler+0xa4c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d01d      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a40      	ldr	r2, [pc, #256]	; (800844c <HAL_DMA_IRQHandler+0xa50>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d018      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a3f      	ldr	r2, [pc, #252]	; (8008450 <HAL_DMA_IRQHandler+0xa54>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d013      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <HAL_DMA_IRQHandler+0xa58>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00e      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a3c      	ldr	r2, [pc, #240]	; (8008458 <HAL_DMA_IRQHandler+0xa5c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d009      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a3a      	ldr	r2, [pc, #232]	; (800845c <HAL_DMA_IRQHandler+0xa60>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <HAL_DMA_IRQHandler+0x984>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a39      	ldr	r2, [pc, #228]	; (8008460 <HAL_DMA_IRQHandler+0xa64>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d101      	bne.n	8008384 <HAL_DMA_IRQHandler+0x988>
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <HAL_DMA_IRQHandler+0x98a>
 8008384:	2300      	movs	r3, #0
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 823f 	beq.w	800880a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2204      	movs	r2, #4
 800839e:	409a      	lsls	r2, r3
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4013      	ands	r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80cd 	beq.w	8008544 <HAL_DMA_IRQHandler+0xb48>
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80c7 	beq.w	8008544 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ba:	f003 031f 	and.w	r3, r3, #31
 80083be:	2204      	movs	r2, #4
 80083c0:	409a      	lsls	r2, r3
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d049      	beq.n	8008464 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d109      	bne.n	80083ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8210 	beq.w	8008804 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ec:	e20a      	b.n	8008804 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8206 	beq.w	8008804 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008400:	e200      	b.n	8008804 <HAL_DMA_IRQHandler+0xe08>
 8008402:	bf00      	nop
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
 8008444:	58025408 	.word	0x58025408
 8008448:	5802541c 	.word	0x5802541c
 800844c:	58025430 	.word	0x58025430
 8008450:	58025444 	.word	0x58025444
 8008454:	58025458 	.word	0x58025458
 8008458:	5802546c 	.word	0x5802546c
 800845c:	58025480 	.word	0x58025480
 8008460:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d160      	bne.n	8008530 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a7f      	ldr	r2, [pc, #508]	; (8008670 <HAL_DMA_IRQHandler+0xc74>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d04a      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a7d      	ldr	r2, [pc, #500]	; (8008674 <HAL_DMA_IRQHandler+0xc78>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d045      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a7c      	ldr	r2, [pc, #496]	; (8008678 <HAL_DMA_IRQHandler+0xc7c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d040      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7a      	ldr	r2, [pc, #488]	; (800867c <HAL_DMA_IRQHandler+0xc80>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d03b      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a79      	ldr	r2, [pc, #484]	; (8008680 <HAL_DMA_IRQHandler+0xc84>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d036      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a77      	ldr	r2, [pc, #476]	; (8008684 <HAL_DMA_IRQHandler+0xc88>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d031      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a76      	ldr	r2, [pc, #472]	; (8008688 <HAL_DMA_IRQHandler+0xc8c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d02c      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a74      	ldr	r2, [pc, #464]	; (800868c <HAL_DMA_IRQHandler+0xc90>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d027      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a73      	ldr	r2, [pc, #460]	; (8008690 <HAL_DMA_IRQHandler+0xc94>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d022      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a71      	ldr	r2, [pc, #452]	; (8008694 <HAL_DMA_IRQHandler+0xc98>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d01d      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a70      	ldr	r2, [pc, #448]	; (8008698 <HAL_DMA_IRQHandler+0xc9c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d018      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6e      	ldr	r2, [pc, #440]	; (800869c <HAL_DMA_IRQHandler+0xca0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a6d      	ldr	r2, [pc, #436]	; (80086a0 <HAL_DMA_IRQHandler+0xca4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00e      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a6b      	ldr	r2, [pc, #428]	; (80086a4 <HAL_DMA_IRQHandler+0xca8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a6a      	ldr	r2, [pc, #424]	; (80086a8 <HAL_DMA_IRQHandler+0xcac>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d004      	beq.n	800850e <HAL_DMA_IRQHandler+0xb12>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a68      	ldr	r2, [pc, #416]	; (80086ac <HAL_DMA_IRQHandler+0xcb0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d108      	bne.n	8008520 <HAL_DMA_IRQHandler+0xb24>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0208 	bic.w	r2, r2, #8
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e007      	b.n	8008530 <HAL_DMA_IRQHandler+0xb34>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0204 	bic.w	r2, r2, #4
 800852e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8165 	beq.w	8008804 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008542:	e15f      	b.n	8008804 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	2202      	movs	r2, #2
 800854e:	409a      	lsls	r2, r3
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	4013      	ands	r3, r2
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80c5 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xce8>
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 80bf 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	2202      	movs	r2, #2
 8008570:	409a      	lsls	r2, r3
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d018      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 813a 	beq.w	8008808 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800859c:	e134      	b.n	8008808 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8130 	beq.w	8008808 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085b0:	e12a      	b.n	8008808 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f003 0320 	and.w	r3, r3, #32
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8089 	bne.w	80086d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2b      	ldr	r2, [pc, #172]	; (8008670 <HAL_DMA_IRQHandler+0xc74>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d04a      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a29      	ldr	r2, [pc, #164]	; (8008674 <HAL_DMA_IRQHandler+0xc78>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d045      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a28      	ldr	r2, [pc, #160]	; (8008678 <HAL_DMA_IRQHandler+0xc7c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d040      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a26      	ldr	r2, [pc, #152]	; (800867c <HAL_DMA_IRQHandler+0xc80>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d03b      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a25      	ldr	r2, [pc, #148]	; (8008680 <HAL_DMA_IRQHandler+0xc84>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d036      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a23      	ldr	r2, [pc, #140]	; (8008684 <HAL_DMA_IRQHandler+0xc88>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d031      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a22      	ldr	r2, [pc, #136]	; (8008688 <HAL_DMA_IRQHandler+0xc8c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d02c      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a20      	ldr	r2, [pc, #128]	; (800868c <HAL_DMA_IRQHandler+0xc90>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d027      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <HAL_DMA_IRQHandler+0xc94>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d022      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <HAL_DMA_IRQHandler+0xc98>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d01d      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <HAL_DMA_IRQHandler+0xc9c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d018      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1a      	ldr	r2, [pc, #104]	; (800869c <HAL_DMA_IRQHandler+0xca0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d013      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <HAL_DMA_IRQHandler+0xca4>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00e      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <HAL_DMA_IRQHandler+0xca8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d009      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <HAL_DMA_IRQHandler+0xcac>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d004      	beq.n	800865e <HAL_DMA_IRQHandler+0xc62>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a14      	ldr	r2, [pc, #80]	; (80086ac <HAL_DMA_IRQHandler+0xcb0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d128      	bne.n	80086b0 <HAL_DMA_IRQHandler+0xcb4>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0214 	bic.w	r2, r2, #20
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e027      	b.n	80086c0 <HAL_DMA_IRQHandler+0xcc4>
 8008670:	40020010 	.word	0x40020010
 8008674:	40020028 	.word	0x40020028
 8008678:	40020040 	.word	0x40020040
 800867c:	40020058 	.word	0x40020058
 8008680:	40020070 	.word	0x40020070
 8008684:	40020088 	.word	0x40020088
 8008688:	400200a0 	.word	0x400200a0
 800868c:	400200b8 	.word	0x400200b8
 8008690:	40020410 	.word	0x40020410
 8008694:	40020428 	.word	0x40020428
 8008698:	40020440 	.word	0x40020440
 800869c:	40020458 	.word	0x40020458
 80086a0:	40020470 	.word	0x40020470
 80086a4:	40020488 	.word	0x40020488
 80086a8:	400204a0 	.word	0x400204a0
 80086ac:	400204b8 	.word	0x400204b8
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 020a 	bic.w	r2, r2, #10
 80086be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 8097 	beq.w	8008808 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e2:	e091      	b.n	8008808 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2208      	movs	r2, #8
 80086ee:	409a      	lsls	r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8088 	beq.w	800880a <HAL_DMA_IRQHandler+0xe0e>
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8082 	beq.w	800880a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a41      	ldr	r2, [pc, #260]	; (8008810 <HAL_DMA_IRQHandler+0xe14>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d04a      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a3f      	ldr	r2, [pc, #252]	; (8008814 <HAL_DMA_IRQHandler+0xe18>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d045      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a3e      	ldr	r2, [pc, #248]	; (8008818 <HAL_DMA_IRQHandler+0xe1c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d040      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a3c      	ldr	r2, [pc, #240]	; (800881c <HAL_DMA_IRQHandler+0xe20>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d03b      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a3b      	ldr	r2, [pc, #236]	; (8008820 <HAL_DMA_IRQHandler+0xe24>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d036      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a39      	ldr	r2, [pc, #228]	; (8008824 <HAL_DMA_IRQHandler+0xe28>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d031      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a38      	ldr	r2, [pc, #224]	; (8008828 <HAL_DMA_IRQHandler+0xe2c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d02c      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a36      	ldr	r2, [pc, #216]	; (800882c <HAL_DMA_IRQHandler+0xe30>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d027      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a35      	ldr	r2, [pc, #212]	; (8008830 <HAL_DMA_IRQHandler+0xe34>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d022      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a33      	ldr	r2, [pc, #204]	; (8008834 <HAL_DMA_IRQHandler+0xe38>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d01d      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a32      	ldr	r2, [pc, #200]	; (8008838 <HAL_DMA_IRQHandler+0xe3c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d018      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a30      	ldr	r2, [pc, #192]	; (800883c <HAL_DMA_IRQHandler+0xe40>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d013      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a2f      	ldr	r2, [pc, #188]	; (8008840 <HAL_DMA_IRQHandler+0xe44>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00e      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a2d      	ldr	r2, [pc, #180]	; (8008844 <HAL_DMA_IRQHandler+0xe48>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d009      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a2c      	ldr	r2, [pc, #176]	; (8008848 <HAL_DMA_IRQHandler+0xe4c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d004      	beq.n	80087a6 <HAL_DMA_IRQHandler+0xdaa>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a2a      	ldr	r2, [pc, #168]	; (800884c <HAL_DMA_IRQHandler+0xe50>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d108      	bne.n	80087b8 <HAL_DMA_IRQHandler+0xdbc>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 021c 	bic.w	r2, r2, #28
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e007      	b.n	80087c8 <HAL_DMA_IRQHandler+0xdcc>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 020e 	bic.w	r2, r2, #14
 80087c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087cc:	f003 031f 	and.w	r3, r3, #31
 80087d0:	2201      	movs	r2, #1
 80087d2:	409a      	lsls	r2, r3
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
 80087fe:	e004      	b.n	800880a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008800:	bf00      	nop
 8008802:	e002      	b.n	800880a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008808:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800880a:	3728      	adds	r7, #40	; 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40020010 	.word	0x40020010
 8008814:	40020028 	.word	0x40020028
 8008818:	40020040 	.word	0x40020040
 800881c:	40020058 	.word	0x40020058
 8008820:	40020070 	.word	0x40020070
 8008824:	40020088 	.word	0x40020088
 8008828:	400200a0 	.word	0x400200a0
 800882c:	400200b8 	.word	0x400200b8
 8008830:	40020410 	.word	0x40020410
 8008834:	40020428 	.word	0x40020428
 8008838:	40020440 	.word	0x40020440
 800883c:	40020458 	.word	0x40020458
 8008840:	40020470 	.word	0x40020470
 8008844:	40020488 	.word	0x40020488
 8008848:	400204a0 	.word	0x400204a0
 800884c:	400204b8 	.word	0x400204b8

08008850 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800885e:	b2db      	uxtb	r3, r3
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008896:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a7f      	ldr	r2, [pc, #508]	; (8008aa0 <DMA_SetConfig+0x21c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d072      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a7d      	ldr	r2, [pc, #500]	; (8008aa4 <DMA_SetConfig+0x220>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d06d      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a7c      	ldr	r2, [pc, #496]	; (8008aa8 <DMA_SetConfig+0x224>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d068      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a7a      	ldr	r2, [pc, #488]	; (8008aac <DMA_SetConfig+0x228>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d063      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a79      	ldr	r2, [pc, #484]	; (8008ab0 <DMA_SetConfig+0x22c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d05e      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a77      	ldr	r2, [pc, #476]	; (8008ab4 <DMA_SetConfig+0x230>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d059      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a76      	ldr	r2, [pc, #472]	; (8008ab8 <DMA_SetConfig+0x234>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d054      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a74      	ldr	r2, [pc, #464]	; (8008abc <DMA_SetConfig+0x238>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d04f      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a73      	ldr	r2, [pc, #460]	; (8008ac0 <DMA_SetConfig+0x23c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d04a      	beq.n	800898e <DMA_SetConfig+0x10a>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a71      	ldr	r2, [pc, #452]	; (8008ac4 <DMA_SetConfig+0x240>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d045      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a70      	ldr	r2, [pc, #448]	; (8008ac8 <DMA_SetConfig+0x244>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d040      	beq.n	800898e <DMA_SetConfig+0x10a>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a6e      	ldr	r2, [pc, #440]	; (8008acc <DMA_SetConfig+0x248>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d03b      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a6d      	ldr	r2, [pc, #436]	; (8008ad0 <DMA_SetConfig+0x24c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d036      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a6b      	ldr	r2, [pc, #428]	; (8008ad4 <DMA_SetConfig+0x250>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d031      	beq.n	800898e <DMA_SetConfig+0x10a>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a6a      	ldr	r2, [pc, #424]	; (8008ad8 <DMA_SetConfig+0x254>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d02c      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a68      	ldr	r2, [pc, #416]	; (8008adc <DMA_SetConfig+0x258>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d027      	beq.n	800898e <DMA_SetConfig+0x10a>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a67      	ldr	r2, [pc, #412]	; (8008ae0 <DMA_SetConfig+0x25c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d022      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a65      	ldr	r2, [pc, #404]	; (8008ae4 <DMA_SetConfig+0x260>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01d      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a64      	ldr	r2, [pc, #400]	; (8008ae8 <DMA_SetConfig+0x264>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d018      	beq.n	800898e <DMA_SetConfig+0x10a>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a62      	ldr	r2, [pc, #392]	; (8008aec <DMA_SetConfig+0x268>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d013      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a61      	ldr	r2, [pc, #388]	; (8008af0 <DMA_SetConfig+0x26c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00e      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5f      	ldr	r2, [pc, #380]	; (8008af4 <DMA_SetConfig+0x270>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d009      	beq.n	800898e <DMA_SetConfig+0x10a>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a5e      	ldr	r2, [pc, #376]	; (8008af8 <DMA_SetConfig+0x274>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d004      	beq.n	800898e <DMA_SetConfig+0x10a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a5c      	ldr	r2, [pc, #368]	; (8008afc <DMA_SetConfig+0x278>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d101      	bne.n	8008992 <DMA_SetConfig+0x10e>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <DMA_SetConfig+0x110>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00d      	beq.n	80089b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a39      	ldr	r2, [pc, #228]	; (8008aa0 <DMA_SetConfig+0x21c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d04a      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a38      	ldr	r2, [pc, #224]	; (8008aa4 <DMA_SetConfig+0x220>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d045      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a36      	ldr	r2, [pc, #216]	; (8008aa8 <DMA_SetConfig+0x224>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d040      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a35      	ldr	r2, [pc, #212]	; (8008aac <DMA_SetConfig+0x228>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d03b      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a33      	ldr	r2, [pc, #204]	; (8008ab0 <DMA_SetConfig+0x22c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d036      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a32      	ldr	r2, [pc, #200]	; (8008ab4 <DMA_SetConfig+0x230>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d031      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a30      	ldr	r2, [pc, #192]	; (8008ab8 <DMA_SetConfig+0x234>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d02c      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a2f      	ldr	r2, [pc, #188]	; (8008abc <DMA_SetConfig+0x238>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d027      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a2d      	ldr	r2, [pc, #180]	; (8008ac0 <DMA_SetConfig+0x23c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d022      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a2c      	ldr	r2, [pc, #176]	; (8008ac4 <DMA_SetConfig+0x240>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d01d      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a2a      	ldr	r2, [pc, #168]	; (8008ac8 <DMA_SetConfig+0x244>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d018      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a29      	ldr	r2, [pc, #164]	; (8008acc <DMA_SetConfig+0x248>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d013      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a27      	ldr	r2, [pc, #156]	; (8008ad0 <DMA_SetConfig+0x24c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00e      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <DMA_SetConfig+0x250>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a24      	ldr	r2, [pc, #144]	; (8008ad8 <DMA_SetConfig+0x254>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <DMA_SetConfig+0x1d0>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a23      	ldr	r2, [pc, #140]	; (8008adc <DMA_SetConfig+0x258>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d101      	bne.n	8008a58 <DMA_SetConfig+0x1d4>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e000      	b.n	8008a5a <DMA_SetConfig+0x1d6>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d059      	beq.n	8008b12 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	223f      	movs	r2, #63	; 0x3f
 8008a68:	409a      	lsls	r2, r3
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a7c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d138      	bne.n	8008b00 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a9e:	e086      	b.n	8008bae <DMA_SetConfig+0x32a>
 8008aa0:	40020010 	.word	0x40020010
 8008aa4:	40020028 	.word	0x40020028
 8008aa8:	40020040 	.word	0x40020040
 8008aac:	40020058 	.word	0x40020058
 8008ab0:	40020070 	.word	0x40020070
 8008ab4:	40020088 	.word	0x40020088
 8008ab8:	400200a0 	.word	0x400200a0
 8008abc:	400200b8 	.word	0x400200b8
 8008ac0:	40020410 	.word	0x40020410
 8008ac4:	40020428 	.word	0x40020428
 8008ac8:	40020440 	.word	0x40020440
 8008acc:	40020458 	.word	0x40020458
 8008ad0:	40020470 	.word	0x40020470
 8008ad4:	40020488 	.word	0x40020488
 8008ad8:	400204a0 	.word	0x400204a0
 8008adc:	400204b8 	.word	0x400204b8
 8008ae0:	58025408 	.word	0x58025408
 8008ae4:	5802541c 	.word	0x5802541c
 8008ae8:	58025430 	.word	0x58025430
 8008aec:	58025444 	.word	0x58025444
 8008af0:	58025458 	.word	0x58025458
 8008af4:	5802546c 	.word	0x5802546c
 8008af8:	58025480 	.word	0x58025480
 8008afc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	60da      	str	r2, [r3, #12]
}
 8008b10:	e04d      	b.n	8008bae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a29      	ldr	r2, [pc, #164]	; (8008bbc <DMA_SetConfig+0x338>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d022      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a27      	ldr	r2, [pc, #156]	; (8008bc0 <DMA_SetConfig+0x33c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d01d      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a26      	ldr	r2, [pc, #152]	; (8008bc4 <DMA_SetConfig+0x340>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d018      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a24      	ldr	r2, [pc, #144]	; (8008bc8 <DMA_SetConfig+0x344>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d013      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a23      	ldr	r2, [pc, #140]	; (8008bcc <DMA_SetConfig+0x348>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00e      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a21      	ldr	r2, [pc, #132]	; (8008bd0 <DMA_SetConfig+0x34c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d009      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <DMA_SetConfig+0x350>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d004      	beq.n	8008b62 <DMA_SetConfig+0x2de>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a1e      	ldr	r2, [pc, #120]	; (8008bd8 <DMA_SetConfig+0x354>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d101      	bne.n	8008b66 <DMA_SetConfig+0x2e2>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <DMA_SetConfig+0x2e4>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d020      	beq.n	8008bae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2201      	movs	r2, #1
 8008b76:	409a      	lsls	r2, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d108      	bne.n	8008b9e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	60da      	str	r2, [r3, #12]
}
 8008b9c:	e007      	b.n	8008bae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	60da      	str	r2, [r3, #12]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	58025408 	.word	0x58025408
 8008bc0:	5802541c 	.word	0x5802541c
 8008bc4:	58025430 	.word	0x58025430
 8008bc8:	58025444 	.word	0x58025444
 8008bcc:	58025458 	.word	0x58025458
 8008bd0:	5802546c 	.word	0x5802546c
 8008bd4:	58025480 	.word	0x58025480
 8008bd8:	58025494 	.word	0x58025494

08008bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a42      	ldr	r2, [pc, #264]	; (8008cf4 <DMA_CalcBaseAndBitshift+0x118>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d04a      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a41      	ldr	r2, [pc, #260]	; (8008cf8 <DMA_CalcBaseAndBitshift+0x11c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d045      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a3f      	ldr	r2, [pc, #252]	; (8008cfc <DMA_CalcBaseAndBitshift+0x120>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d040      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a3e      	ldr	r2, [pc, #248]	; (8008d00 <DMA_CalcBaseAndBitshift+0x124>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d03b      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a3c      	ldr	r2, [pc, #240]	; (8008d04 <DMA_CalcBaseAndBitshift+0x128>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d036      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3b      	ldr	r2, [pc, #236]	; (8008d08 <DMA_CalcBaseAndBitshift+0x12c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d031      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a39      	ldr	r2, [pc, #228]	; (8008d0c <DMA_CalcBaseAndBitshift+0x130>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d02c      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a38      	ldr	r2, [pc, #224]	; (8008d10 <DMA_CalcBaseAndBitshift+0x134>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d027      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a36      	ldr	r2, [pc, #216]	; (8008d14 <DMA_CalcBaseAndBitshift+0x138>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d022      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a35      	ldr	r2, [pc, #212]	; (8008d18 <DMA_CalcBaseAndBitshift+0x13c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d01d      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a33      	ldr	r2, [pc, #204]	; (8008d1c <DMA_CalcBaseAndBitshift+0x140>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d018      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a32      	ldr	r2, [pc, #200]	; (8008d20 <DMA_CalcBaseAndBitshift+0x144>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a30      	ldr	r2, [pc, #192]	; (8008d24 <DMA_CalcBaseAndBitshift+0x148>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00e      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a2f      	ldr	r2, [pc, #188]	; (8008d28 <DMA_CalcBaseAndBitshift+0x14c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d009      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a2d      	ldr	r2, [pc, #180]	; (8008d2c <DMA_CalcBaseAndBitshift+0x150>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <DMA_CalcBaseAndBitshift+0xa8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2c      	ldr	r2, [pc, #176]	; (8008d30 <DMA_CalcBaseAndBitshift+0x154>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d101      	bne.n	8008c88 <DMA_CalcBaseAndBitshift+0xac>
 8008c84:	2301      	movs	r3, #1
 8008c86:	e000      	b.n	8008c8a <DMA_CalcBaseAndBitshift+0xae>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d024      	beq.n	8008cd8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	3b10      	subs	r3, #16
 8008c96:	4a27      	ldr	r2, [pc, #156]	; (8008d34 <DMA_CalcBaseAndBitshift+0x158>)
 8008c98:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9c:	091b      	lsrs	r3, r3, #4
 8008c9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	4a24      	ldr	r2, [pc, #144]	; (8008d38 <DMA_CalcBaseAndBitshift+0x15c>)
 8008ca8:	5cd3      	ldrb	r3, [r2, r3]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d908      	bls.n	8008cc8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4b1f      	ldr	r3, [pc, #124]	; (8008d3c <DMA_CalcBaseAndBitshift+0x160>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	1d1a      	adds	r2, r3, #4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8008cc6:	e00d      	b.n	8008ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <DMA_CalcBaseAndBitshift+0x160>)
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8008cd6:	e005      	b.n	8008ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	40020010 	.word	0x40020010
 8008cf8:	40020028 	.word	0x40020028
 8008cfc:	40020040 	.word	0x40020040
 8008d00:	40020058 	.word	0x40020058
 8008d04:	40020070 	.word	0x40020070
 8008d08:	40020088 	.word	0x40020088
 8008d0c:	400200a0 	.word	0x400200a0
 8008d10:	400200b8 	.word	0x400200b8
 8008d14:	40020410 	.word	0x40020410
 8008d18:	40020428 	.word	0x40020428
 8008d1c:	40020440 	.word	0x40020440
 8008d20:	40020458 	.word	0x40020458
 8008d24:	40020470 	.word	0x40020470
 8008d28:	40020488 	.word	0x40020488
 8008d2c:	400204a0 	.word	0x400204a0
 8008d30:	400204b8 	.word	0x400204b8
 8008d34:	aaaaaaab 	.word	0xaaaaaaab
 8008d38:	08018ec4 	.word	0x08018ec4
 8008d3c:	fffffc00 	.word	0xfffffc00

08008d40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d120      	bne.n	8008d96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d858      	bhi.n	8008e0e <DMA_CheckFifoParam+0xce>
 8008d5c:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <DMA_CheckFifoParam+0x24>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008d87 	.word	0x08008d87
 8008d6c:	08008d75 	.word	0x08008d75
 8008d70:	08008e0f 	.word	0x08008e0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d048      	beq.n	8008e12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d84:	e045      	b.n	8008e12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d8e:	d142      	bne.n	8008e16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d94:	e03f      	b.n	8008e16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d9e:	d123      	bne.n	8008de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d838      	bhi.n	8008e1a <DMA_CheckFifoParam+0xda>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <DMA_CheckFifoParam+0x70>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc7 	.word	0x08008dc7
 8008db8:	08008dc1 	.word	0x08008dc1
 8008dbc:	08008dd9 	.word	0x08008dd9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	73fb      	strb	r3, [r7, #15]
        break;
 8008dc4:	e030      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d025      	beq.n	8008e1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008dd6:	e022      	b.n	8008e1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008de0:	d11f      	bne.n	8008e22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008de6:	e01c      	b.n	8008e22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d902      	bls.n	8008df6 <DMA_CheckFifoParam+0xb6>
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d003      	beq.n	8008dfc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008df4:	e018      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
        break;
 8008dfa:	e015      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00e      	beq.n	8008e26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	e00b      	b.n	8008e26 <DMA_CheckFifoParam+0xe6>
        break;
 8008e0e:	bf00      	nop
 8008e10:	e00a      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        break;
 8008e12:	bf00      	nop
 8008e14:	e008      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        break;
 8008e16:	bf00      	nop
 8008e18:	e006      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        break;
 8008e1a:	bf00      	nop
 8008e1c:	e004      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        break;
 8008e1e:	bf00      	nop
 8008e20:	e002      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
        break;
 8008e22:	bf00      	nop
 8008e24:	e000      	b.n	8008e28 <DMA_CheckFifoParam+0xe8>
    break;
 8008e26:	bf00      	nop
    }
  }

  return status;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a38      	ldr	r2, [pc, #224]	; (8008f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d022      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a36      	ldr	r2, [pc, #216]	; (8008f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d01d      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a35      	ldr	r2, [pc, #212]	; (8008f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d018      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a33      	ldr	r2, [pc, #204]	; (8008f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d013      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a32      	ldr	r2, [pc, #200]	; (8008f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00e      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a30      	ldr	r2, [pc, #192]	; (8008f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d009      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a2f      	ldr	r2, [pc, #188]	; (8008f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d004      	beq.n	8008e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a2d      	ldr	r2, [pc, #180]	; (8008f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d101      	bne.n	8008e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01a      	beq.n	8008ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	3b08      	subs	r3, #8
 8008ea8:	4a28      	ldr	r2, [pc, #160]	; (8008f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	091b      	lsrs	r3, r3, #4
 8008eb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4b26      	ldr	r3, [pc, #152]	; (8008f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a24      	ldr	r2, [pc, #144]	; (8008f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008ec4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	2201      	movs	r2, #1
 8008ece:	409a      	lsls	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ed4:	e024      	b.n	8008f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	3b10      	subs	r3, #16
 8008ede:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee4:	091b      	lsrs	r3, r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4a1c      	ldr	r2, [pc, #112]	; (8008f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d806      	bhi.n	8008efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4a1b      	ldr	r2, [pc, #108]	; (8008f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d902      	bls.n	8008efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3308      	adds	r3, #8
 8008efc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a16      	ldr	r2, [pc, #88]	; (8008f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008f10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	2201      	movs	r2, #1
 8008f1a:	409a      	lsls	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	58025408 	.word	0x58025408
 8008f30:	5802541c 	.word	0x5802541c
 8008f34:	58025430 	.word	0x58025430
 8008f38:	58025444 	.word	0x58025444
 8008f3c:	58025458 	.word	0x58025458
 8008f40:	5802546c 	.word	0x5802546c
 8008f44:	58025480 	.word	0x58025480
 8008f48:	58025494 	.word	0x58025494
 8008f4c:	cccccccd 	.word	0xcccccccd
 8008f50:	16009600 	.word	0x16009600
 8008f54:	58025880 	.word	0x58025880
 8008f58:	aaaaaaab 	.word	0xaaaaaaab
 8008f5c:	400204b8 	.word	0x400204b8
 8008f60:	4002040f 	.word	0x4002040f
 8008f64:	10008200 	.word	0x10008200
 8008f68:	40020880 	.word	0x40020880

08008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d04a      	beq.n	8009018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d847      	bhi.n	8009018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a25      	ldr	r2, [pc, #148]	; (8009024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d022      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a24      	ldr	r2, [pc, #144]	; (8009028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d01d      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a22      	ldr	r2, [pc, #136]	; (800902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d018      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a21      	ldr	r2, [pc, #132]	; (8009030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d013      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a1f      	ldr	r2, [pc, #124]	; (8009034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00e      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1e      	ldr	r2, [pc, #120]	; (8009038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d009      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1c      	ldr	r2, [pc, #112]	; (800903c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d101      	bne.n	8008fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	461a      	mov	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a15      	ldr	r2, [pc, #84]	; (8009048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ff4:	671a      	str	r2, [r3, #112]	; 0x70
 8008ff6:	e009      	b.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4b14      	ldr	r3, [pc, #80]	; (800904c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a11      	ldr	r2, [pc, #68]	; (8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800900a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3b01      	subs	r3, #1
 8009010:	2201      	movs	r2, #1
 8009012:	409a      	lsls	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009018:	bf00      	nop
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	58025408 	.word	0x58025408
 8009028:	5802541c 	.word	0x5802541c
 800902c:	58025430 	.word	0x58025430
 8009030:	58025444 	.word	0x58025444
 8009034:	58025458 	.word	0x58025458
 8009038:	5802546c 	.word	0x5802546c
 800903c:	58025480 	.word	0x58025480
 8009040:	58025494 	.word	0x58025494
 8009044:	1600963f 	.word	0x1600963f
 8009048:	58025940 	.word	0x58025940
 800904c:	1000823f 	.word	0x1000823f
 8009050:	40020940 	.word	0x40020940

08009054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009054:	b480      	push	{r7}
 8009056:	b089      	sub	sp, #36	; 0x24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009062:	4b89      	ldr	r3, [pc, #548]	; (8009288 <HAL_GPIO_Init+0x234>)
 8009064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009066:	e194      	b.n	8009392 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	2101      	movs	r1, #1
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	4013      	ands	r3, r2
 8009076:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 8186 	beq.w	800938c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d005      	beq.n	8009098 <HAL_GPIO_Init+0x44>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d130      	bne.n	80090fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	2203      	movs	r2, #3
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	43db      	mvns	r3, r3
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	4013      	ands	r3, r2
 80090ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68da      	ldr	r2, [r3, #12]
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	fa02 f303 	lsl.w	r3, r2, r3
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	4313      	orrs	r3, r2
 80090c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80090ce:	2201      	movs	r2, #1
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	fa02 f303 	lsl.w	r3, r2, r3
 80090d6:	43db      	mvns	r3, r3
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	4013      	ands	r3, r2
 80090dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	091b      	lsrs	r3, r3, #4
 80090e4:	f003 0201 	and.w	r2, r3, #1
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	2b03      	cmp	r3, #3
 8009104:	d017      	beq.n	8009136 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	2203      	movs	r2, #3
 8009112:	fa02 f303 	lsl.w	r3, r2, r3
 8009116:	43db      	mvns	r3, r3
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	4013      	ands	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	4313      	orrs	r3, r2
 800912e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b02      	cmp	r3, #2
 8009140:	d123      	bne.n	800918a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	08da      	lsrs	r2, r3, #3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3208      	adds	r2, #8
 800914a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	220f      	movs	r2, #15
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	43db      	mvns	r3, r3
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	4013      	ands	r3, r2
 8009164:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f003 0307 	and.w	r3, r3, #7
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	fa02 f303 	lsl.w	r3, r2, r3
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	4313      	orrs	r3, r2
 800917a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	08da      	lsrs	r2, r3, #3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3208      	adds	r2, #8
 8009184:	69b9      	ldr	r1, [r7, #24]
 8009186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	2203      	movs	r2, #3
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	43db      	mvns	r3, r3
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	4013      	ands	r3, r2
 80091a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f003 0203 	and.w	r2, r3, #3
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	fa02 f303 	lsl.w	r3, r2, r3
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 80e0 	beq.w	800938c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091cc:	4b2f      	ldr	r3, [pc, #188]	; (800928c <HAL_GPIO_Init+0x238>)
 80091ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80091d2:	4a2e      	ldr	r2, [pc, #184]	; (800928c <HAL_GPIO_Init+0x238>)
 80091d4:	f043 0302 	orr.w	r3, r3, #2
 80091d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80091dc:	4b2b      	ldr	r3, [pc, #172]	; (800928c <HAL_GPIO_Init+0x238>)
 80091de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091ea:	4a29      	ldr	r2, [pc, #164]	; (8009290 <HAL_GPIO_Init+0x23c>)
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	3302      	adds	r3, #2
 80091f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	220f      	movs	r2, #15
 8009202:	fa02 f303 	lsl.w	r3, r2, r3
 8009206:	43db      	mvns	r3, r3
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	4013      	ands	r3, r2
 800920c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a20      	ldr	r2, [pc, #128]	; (8009294 <HAL_GPIO_Init+0x240>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d052      	beq.n	80092bc <HAL_GPIO_Init+0x268>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <HAL_GPIO_Init+0x244>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d031      	beq.n	8009282 <HAL_GPIO_Init+0x22e>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a1e      	ldr	r2, [pc, #120]	; (800929c <HAL_GPIO_Init+0x248>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d02b      	beq.n	800927e <HAL_GPIO_Init+0x22a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a1d      	ldr	r2, [pc, #116]	; (80092a0 <HAL_GPIO_Init+0x24c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d025      	beq.n	800927a <HAL_GPIO_Init+0x226>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a1c      	ldr	r2, [pc, #112]	; (80092a4 <HAL_GPIO_Init+0x250>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d01f      	beq.n	8009276 <HAL_GPIO_Init+0x222>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a1b      	ldr	r2, [pc, #108]	; (80092a8 <HAL_GPIO_Init+0x254>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d019      	beq.n	8009272 <HAL_GPIO_Init+0x21e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a1a      	ldr	r2, [pc, #104]	; (80092ac <HAL_GPIO_Init+0x258>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d013      	beq.n	800926e <HAL_GPIO_Init+0x21a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a19      	ldr	r2, [pc, #100]	; (80092b0 <HAL_GPIO_Init+0x25c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00d      	beq.n	800926a <HAL_GPIO_Init+0x216>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a18      	ldr	r2, [pc, #96]	; (80092b4 <HAL_GPIO_Init+0x260>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d007      	beq.n	8009266 <HAL_GPIO_Init+0x212>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a17      	ldr	r2, [pc, #92]	; (80092b8 <HAL_GPIO_Init+0x264>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d101      	bne.n	8009262 <HAL_GPIO_Init+0x20e>
 800925e:	2309      	movs	r3, #9
 8009260:	e02d      	b.n	80092be <HAL_GPIO_Init+0x26a>
 8009262:	230a      	movs	r3, #10
 8009264:	e02b      	b.n	80092be <HAL_GPIO_Init+0x26a>
 8009266:	2308      	movs	r3, #8
 8009268:	e029      	b.n	80092be <HAL_GPIO_Init+0x26a>
 800926a:	2307      	movs	r3, #7
 800926c:	e027      	b.n	80092be <HAL_GPIO_Init+0x26a>
 800926e:	2306      	movs	r3, #6
 8009270:	e025      	b.n	80092be <HAL_GPIO_Init+0x26a>
 8009272:	2305      	movs	r3, #5
 8009274:	e023      	b.n	80092be <HAL_GPIO_Init+0x26a>
 8009276:	2304      	movs	r3, #4
 8009278:	e021      	b.n	80092be <HAL_GPIO_Init+0x26a>
 800927a:	2303      	movs	r3, #3
 800927c:	e01f      	b.n	80092be <HAL_GPIO_Init+0x26a>
 800927e:	2302      	movs	r3, #2
 8009280:	e01d      	b.n	80092be <HAL_GPIO_Init+0x26a>
 8009282:	2301      	movs	r3, #1
 8009284:	e01b      	b.n	80092be <HAL_GPIO_Init+0x26a>
 8009286:	bf00      	nop
 8009288:	58000080 	.word	0x58000080
 800928c:	58024400 	.word	0x58024400
 8009290:	58000400 	.word	0x58000400
 8009294:	58020000 	.word	0x58020000
 8009298:	58020400 	.word	0x58020400
 800929c:	58020800 	.word	0x58020800
 80092a0:	58020c00 	.word	0x58020c00
 80092a4:	58021000 	.word	0x58021000
 80092a8:	58021400 	.word	0x58021400
 80092ac:	58021800 	.word	0x58021800
 80092b0:	58021c00 	.word	0x58021c00
 80092b4:	58022000 	.word	0x58022000
 80092b8:	58022400 	.word	0x58022400
 80092bc:	2300      	movs	r3, #0
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	f002 0203 	and.w	r2, r2, #3
 80092c4:	0092      	lsls	r2, r2, #2
 80092c6:	4093      	lsls	r3, r2
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092ce:	4938      	ldr	r1, [pc, #224]	; (80093b0 <HAL_GPIO_Init+0x35c>)
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	089b      	lsrs	r3, r3, #2
 80092d4:	3302      	adds	r3, #2
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80092dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	43db      	mvns	r3, r3
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4013      	ands	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	4313      	orrs	r3, r2
 8009300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800930a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	43db      	mvns	r3, r3
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	4013      	ands	r3, r2
 800931a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4313      	orrs	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	43db      	mvns	r3, r3
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	4013      	ands	r3, r2
 8009346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	43db      	mvns	r3, r3
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	4013      	ands	r3, r2
 8009370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	3301      	adds	r3, #1
 8009390:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	f47f ae63 	bne.w	8009068 <HAL_GPIO_Init+0x14>
  }
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	3724      	adds	r7, #36	; 0x24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	58000400 	.word	0x58000400

080093b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	887b      	ldrh	r3, [r7, #2]
 80093c6:	4013      	ands	r3, r2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093cc:	2301      	movs	r3, #1
 80093ce:	73fb      	strb	r3, [r7, #15]
 80093d0:	e001      	b.n	80093d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	807b      	strh	r3, [r7, #2]
 80093f0:	4613      	mov	r3, r2
 80093f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093f4:	787b      	ldrb	r3, [r7, #1]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093fa:	887a      	ldrh	r2, [r7, #2]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009400:	e003      	b.n	800940a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009402:	887b      	ldrh	r3, [r7, #2]
 8009404:	041a      	lsls	r2, r3, #16
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	619a      	str	r2, [r3, #24]
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
	...

08009418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e08b      	b.n	8009542 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d106      	bne.n	8009444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7f7 ffda 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2224      	movs	r2, #36	; 0x24
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d107      	bne.n	8009492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800948e:	609a      	str	r2, [r3, #8]
 8009490:	e006      	b.n	80094a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689a      	ldr	r2, [r3, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800949e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d108      	bne.n	80094ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	e007      	b.n	80094ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6859      	ldr	r1, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	4b1d      	ldr	r3, [pc, #116]	; (800954c <HAL_I2C_Init+0x134>)
 80094d6:	430b      	orrs	r3, r1
 80094d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69d9      	ldr	r1, [r3, #28]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1a      	ldr	r2, [r3, #32]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	02008000 	.word	0x02008000

08009550 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	; 0x28
 8009554:	af02      	add	r7, sp, #8
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	461a      	mov	r2, r3
 800955c:	460b      	mov	r3, r1
 800955e:	817b      	strh	r3, [r7, #10]
 8009560:	4613      	mov	r3, r2
 8009562:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b20      	cmp	r3, #32
 8009572:	f040 80ef 	bne.w	8009754 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009584:	d101      	bne.n	800958a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8009586:	2302      	movs	r3, #2
 8009588:	e0e5      	b.n	8009756 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_I2C_Master_Transmit_DMA+0x48>
 8009594:	2302      	movs	r3, #2
 8009596:	e0de      	b.n	8009756 <HAL_I2C_Master_Transmit_DMA+0x206>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2221      	movs	r2, #33	; 0x21
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2210      	movs	r2, #16
 80095ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	893a      	ldrh	r2, [r7, #8]
 80095c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4a66      	ldr	r2, [pc, #408]	; (8009760 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80095c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4a66      	ldr	r2, [pc, #408]	; (8009764 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80095cc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	2bff      	cmp	r3, #255	; 0xff
 80095d6:	d906      	bls.n	80095e6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	22ff      	movs	r2, #255	; 0xff
 80095dc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80095de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	e007      	b.n	80095f6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80095f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095f4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01a      	beq.n	8009634 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	781a      	ldrb	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009618:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d074      	beq.n	8009726 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	2b00      	cmp	r3, #0
 8009642:	d022      	beq.n	800968a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	4a47      	ldr	r2, [pc, #284]	; (8009768 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800964a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	4a46      	ldr	r2, [pc, #280]	; (800976c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8009652:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	2200      	movs	r2, #0
 800965a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	2200      	movs	r2, #0
 8009662:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009674:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800967a:	f7fd f9f1 	bl	8006a60 <HAL_DMA_Start_IT>
 800967e:	4603      	mov	r3, r0
 8009680:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d13a      	bne.n	80096fe <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8009688:	e013      	b.n	80096b2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e051      	b.n	8009756 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	3301      	adds	r3, #1
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	8979      	ldrh	r1, [r7, #10]
 80096be:	4b2c      	ldr	r3, [pc, #176]	; (8009770 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f002 f83b 	bl	800b740 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80096e4:	2110      	movs	r1, #16
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f002 f85c 	bl	800b7a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	e028      	b.n	8009750 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009712:	f043 0210 	orr.w	r2, r3, #16
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e017      	b.n	8009756 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4a12      	ldr	r2, [pc, #72]	; (8009774 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800972a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	b2da      	uxtb	r2, r3
 8009730:	8979      	ldrh	r1, [r7, #10]
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f002 f800 	bl	800b740 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009748:	2101      	movs	r1, #1
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f002 f82a 	bl	800b7a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	e000      	b.n	8009756 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009754:	2302      	movs	r3, #2
  }
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	ffff0000 	.word	0xffff0000
 8009764:	08009fab 	.word	0x08009fab
 8009768:	0800b363 	.word	0x0800b363
 800976c:	0800b491 	.word	0x0800b491
 8009770:	80002000 	.word	0x80002000
 8009774:	08009b3b 	.word	0x08009b3b

08009778 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	461a      	mov	r2, r3
 8009784:	460b      	mov	r3, r1
 8009786:	817b      	strh	r3, [r7, #10]
 8009788:	4613      	mov	r3, r2
 800978a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b20      	cmp	r3, #32
 8009796:	f040 80cd 	bne.w	8009934 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097a8:	d101      	bne.n	80097ae <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80097aa:	2302      	movs	r3, #2
 80097ac:	e0c3      	b.n	8009936 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <HAL_I2C_Master_Receive_DMA+0x44>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e0bc      	b.n	8009936 <HAL_I2C_Master_Receive_DMA+0x1be>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2222      	movs	r2, #34	; 0x22
 80097c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2210      	movs	r2, #16
 80097d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	893a      	ldrh	r2, [r7, #8]
 80097e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4a55      	ldr	r2, [pc, #340]	; (8009940 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80097ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a55      	ldr	r2, [pc, #340]	; (8009944 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80097f0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2bff      	cmp	r3, #255	; 0xff
 80097fa:	d906      	bls.n	800980a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	22ff      	movs	r2, #255	; 0xff
 8009800:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e007      	b.n	800981a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009818:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d070      	beq.n	8009904 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d020      	beq.n	800986c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982e:	4a46      	ldr	r2, [pc, #280]	; (8009948 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8009830:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	4a45      	ldr	r2, [pc, #276]	; (800994c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8009838:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	2200      	movs	r2, #0
 8009840:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009846:	2200      	movs	r2, #0
 8009848:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3324      	adds	r3, #36	; 0x24
 8009854:	4619      	mov	r1, r3
 8009856:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800985c:	f7fd f900 	bl	8006a60 <HAL_DMA_Start_IT>
 8009860:	4603      	mov	r3, r0
 8009862:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009864:	7cfb      	ldrb	r3, [r7, #19]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d138      	bne.n	80098dc <HAL_I2C_Master_Receive_DMA+0x164>
 800986a:	e013      	b.n	8009894 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e050      	b.n	8009936 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009898:	b2da      	uxtb	r2, r3
 800989a:	8979      	ldrh	r1, [r7, #10]
 800989c:	4b2c      	ldr	r3, [pc, #176]	; (8009950 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f001 ff4c 	bl	800b740 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80098c2:	2110      	movs	r1, #16
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f001 ff6d 	bl	800b7a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	e029      	b.n	8009930 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2220      	movs	r2, #32
 80098e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f0:	f043 0210 	orr.w	r2, r3, #16
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e018      	b.n	8009936 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4a13      	ldr	r2, [pc, #76]	; (8009954 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8009908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800990e:	b2da      	uxtb	r2, r3
 8009910:	8979      	ldrh	r1, [r7, #10]
 8009912:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f001 ff10 	bl	800b740 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009928:	2102      	movs	r1, #2
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f001 ff3a 	bl	800b7a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	e000      	b.n	8009936 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8009934:	2302      	movs	r3, #2
  }
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	ffff0000 	.word	0xffff0000
 8009944:	08009fab 	.word	0x08009fab
 8009948:	0800b3f9 	.word	0x0800b3f9
 800994c:	0800b491 	.word	0x0800b491
 8009950:	80002400 	.word	0x80002400
 8009954:	08009b3b 	.word	0x08009b3b

08009958 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	68f9      	ldr	r1, [r7, #12]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
  }
}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d010      	beq.n	80099d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	09db      	lsrs	r3, r3, #7
 80099b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c0:	f043 0201 	orr.w	r2, r3, #1
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	0a9b      	lsrs	r3, r3, #10
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d010      	beq.n	8009a00 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	09db      	lsrs	r3, r3, #7
 80099e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ee:	f043 0208 	orr.w	r2, r3, #8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	0a5b      	lsrs	r3, r3, #9
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d010      	beq.n	8009a2e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	09db      	lsrs	r3, r3, #7
 8009a10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00a      	beq.n	8009a2e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1c:	f043 0202 	orr.w	r2, r3, #2
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f003 030b 	and.w	r3, r3, #11
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 fb53 	bl	800b0ec <I2C_ITError>
  }
}
 8009a46:	bf00      	nop
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009a6a:	bf00      	nop
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009a7e:	bf00      	nop
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b2c:	b2db      	uxtb	r3, r3
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b088      	sub	sp, #32
 8009b3e:	af02      	add	r7, sp, #8
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d101      	bne.n	8009b58 <I2C_Master_ISR_IT+0x1e>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e120      	b.n	8009d9a <I2C_Master_ISR_IT+0x260>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	091b      	lsrs	r3, r3, #4
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d013      	beq.n	8009b94 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	091b      	lsrs	r3, r3, #4
 8009b70:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00d      	beq.n	8009b94 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2210      	movs	r2, #16
 8009b7e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b84:	f043 0204 	orr.w	r2, r3, #4
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f001 fbc4 	bl	800b31a <I2C_Flush_TXDR>
 8009b92:	e0ed      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	089b      	lsrs	r3, r3, #2
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d023      	beq.n	8009be8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	089b      	lsrs	r3, r3, #2
 8009ba4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01d      	beq.n	8009be8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0304 	bic.w	r3, r3, #4
 8009bb2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	b2d2      	uxtb	r2, r2
 8009bc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009be6:	e0c3      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	099b      	lsrs	r3, r3, #6
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d12a      	bne.n	8009c4a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d024      	beq.n	8009c4a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	085b      	lsrs	r3, r3, #1
 8009c04:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d01e      	beq.n	8009c4a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80ac 	beq.w	8009d70 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c32:	3b01      	subs	r3, #1
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8009c48:	e092      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	09db      	lsrs	r3, r3, #7
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d05d      	beq.n	8009d12 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	099b      	lsrs	r3, r3, #6
 8009c5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d057      	beq.n	8009d12 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d040      	beq.n	8009cee <I2C_Master_ISR_IT+0x1b4>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d13c      	bne.n	8009cee <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c80:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2bff      	cmp	r3, #255	; 0xff
 8009c8a:	d90e      	bls.n	8009caa <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	22ff      	movs	r2, #255	; 0xff
 8009c90:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	8a79      	ldrh	r1, [r7, #18]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f001 fd4c 	bl	800b740 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ca8:	e032      	b.n	8009d10 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cbc:	d00b      	beq.n	8009cd6 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	8a79      	ldrh	r1, [r7, #18]
 8009cca:	2000      	movs	r0, #0
 8009ccc:	9000      	str	r0, [sp, #0]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f001 fd36 	bl	800b740 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cd4:	e01c      	b.n	8009d10 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	8a79      	ldrh	r1, [r7, #18]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f001 fd2a 	bl	800b740 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cec:	e010      	b.n	8009d10 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cfc:	d003      	beq.n	8009d06 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fdde 	bl	800a8c0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d04:	e034      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009d06:	2140      	movs	r1, #64	; 0x40
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f001 f9ef 	bl	800b0ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d0e:	e02f      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
 8009d10:	e02e      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	099b      	lsrs	r3, r3, #6
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d028      	beq.n	8009d70 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	099b      	lsrs	r3, r3, #6
 8009d22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d022      	beq.n	8009d70 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d119      	bne.n	8009d68 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d42:	d015      	beq.n	8009d70 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d4c:	d108      	bne.n	8009d60 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d5c:	605a      	str	r2, [r3, #4]
 8009d5e:	e007      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 fdad 	bl	800a8c0 <I2C_ITMasterSeqCplt>
 8009d66:	e003      	b.n	8009d70 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009d68:	2140      	movs	r1, #64	; 0x40
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f001 f9be 	bl	800b0ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	095b      	lsrs	r3, r3, #5
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	095b      	lsrs	r3, r3, #5
 8009d80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009d88:	6979      	ldr	r1, [r7, #20]
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 fe34 	bl	800a9f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d101      	bne.n	8009dc6 <I2C_Slave_ISR_IT+0x24>
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e0ed      	b.n	8009fa2 <I2C_Slave_ISR_IT+0x200>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	095b      	lsrs	r3, r3, #5
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	095b      	lsrs	r3, r3, #5
 8009dde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009de6:	6939      	ldr	r1, [r7, #16]
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fecf 	bl	800ab8c <I2C_ITSlaveCplt>
 8009dee:	e0d3      	b.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	091b      	lsrs	r3, r3, #4
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d04d      	beq.n	8009e98 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	091b      	lsrs	r3, r3, #4
 8009e00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d047      	beq.n	8009e98 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d128      	bne.n	8009e64 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b28      	cmp	r3, #40	; 0x28
 8009e1c:	d108      	bne.n	8009e30 <I2C_Slave_ISR_IT+0x8e>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e24:	d104      	bne.n	8009e30 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009e26:	6939      	ldr	r1, [r7, #16]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f001 f909 	bl	800b040 <I2C_ITListenCplt>
 8009e2e:	e032      	b.n	8009e96 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b29      	cmp	r3, #41	; 0x29
 8009e3a:	d10e      	bne.n	8009e5a <I2C_Slave_ISR_IT+0xb8>
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e42:	d00a      	beq.n	8009e5a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2210      	movs	r2, #16
 8009e4a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f001 fa64 	bl	800b31a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 fd71 	bl	800a93a <I2C_ITSlaveSeqCplt>
 8009e58:	e01d      	b.n	8009e96 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2210      	movs	r2, #16
 8009e60:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009e62:	e096      	b.n	8009f92 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2210      	movs	r2, #16
 8009e6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e70:	f043 0204 	orr.w	r2, r3, #4
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <I2C_Slave_ISR_IT+0xe6>
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e84:	f040 8085 	bne.w	8009f92 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f001 f92c 	bl	800b0ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009e94:	e07d      	b.n	8009f92 <I2C_Slave_ISR_IT+0x1f0>
 8009e96:	e07c      	b.n	8009f92 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	089b      	lsrs	r3, r3, #2
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d030      	beq.n	8009f06 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	089b      	lsrs	r3, r3, #2
 8009ea8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d02a      	beq.n	8009f06 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d018      	beq.n	8009eec <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d14f      	bne.n	8009f96 <I2C_Slave_ISR_IT+0x1f4>
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009efc:	d04b      	beq.n	8009f96 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 fd1b 	bl	800a93a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009f04:	e047      	b.n	8009f96 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	08db      	lsrs	r3, r3, #3
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	08db      	lsrs	r3, r3, #3
 8009f16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009f1e:	6939      	ldr	r1, [r7, #16]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fc49 	bl	800a7b8 <I2C_ITAddrCplt>
 8009f26:	e037      	b.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	085b      	lsrs	r3, r3, #1
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d031      	beq.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	085b      	lsrs	r3, r3, #1
 8009f38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d02b      	beq.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d018      	beq.n	8009f7c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	781a      	ldrb	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
 8009f7a:	e00d      	b.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f82:	d002      	beq.n	8009f8a <I2C_Slave_ISR_IT+0x1e8>
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fcd5 	bl	800a93a <I2C_ITSlaveSeqCplt>
 8009f90:	e002      	b.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8009f92:	bf00      	nop
 8009f94:	e000      	b.n	8009f98 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8009f96:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b088      	sub	sp, #32
 8009fae:	af02      	add	r7, sp, #8
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <I2C_Master_ISR_DMA+0x1a>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e0e1      	b.n	800a188 <I2C_Master_ISR_DMA+0x1de>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	091b      	lsrs	r3, r3, #4
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d017      	beq.n	800a008 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	091b      	lsrs	r3, r3, #4
 8009fdc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d011      	beq.n	800a008 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2210      	movs	r2, #16
 8009fea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff0:	f043 0204 	orr.w	r2, r3, #4
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009ff8:	2120      	movs	r1, #32
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f001 fbd2 	bl	800b7a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f001 f98a 	bl	800b31a <I2C_Flush_TXDR>
 800a006:	e0ba      	b.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	09db      	lsrs	r3, r3, #7
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	2b00      	cmp	r3, #0
 800a012:	d072      	beq.n	800a0fa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	099b      	lsrs	r3, r3, #6
 800a018:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d06c      	beq.n	800a0fa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a02e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a034:	b29b      	uxth	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d04e      	beq.n	800a0d8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	b29b      	uxth	r3, r3
 800a042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a046:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2bff      	cmp	r3, #255	; 0xff
 800a050:	d906      	bls.n	800a060 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	22ff      	movs	r2, #255	; 0xff
 800a056:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	e010      	b.n	800a082 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a072:	d003      	beq.n	800a07c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e002      	b.n	800a082 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a07c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a080:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a086:	b2da      	uxtb	r2, r3
 800a088:	8a79      	ldrh	r1, [r7, #18]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f001 fb55 	bl	800b740 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b22      	cmp	r3, #34	; 0x22
 800a0b2:	d108      	bne.n	800a0c6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a0c4:	e05b      	b.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a0d6:	e052      	b.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0e6:	d003      	beq.n	800a0f0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fbe9 	bl	800a8c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a0ee:	e046      	b.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a0f0:	2140      	movs	r1, #64	; 0x40
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fffa 	bl	800b0ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a0f8:	e041      	b.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	099b      	lsrs	r3, r3, #6
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d029      	beq.n	800a15a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	099b      	lsrs	r3, r3, #6
 800a10a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d023      	beq.n	800a15a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a116:	b29b      	uxth	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d119      	bne.n	800a150 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a12a:	d027      	beq.n	800a17c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a134:	d108      	bne.n	800a148 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a144:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a146:	e019      	b.n	800a17c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fbb9 	bl	800a8c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a14e:	e015      	b.n	800a17c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a150:	2140      	movs	r1, #64	; 0x40
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 ffca 	bl	800b0ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a158:	e010      	b.n	800a17c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	095b      	lsrs	r3, r3, #5
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	095b      	lsrs	r3, r3, #5
 800a16a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a172:	68b9      	ldr	r1, [r7, #8]
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 fc3f 	bl	800a9f8 <I2C_ITMasterCplt>
 800a17a:	e000      	b.n	800a17e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a17c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af02      	add	r7, sp, #8
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800a19c:	4b92      	ldr	r3, [pc, #584]	; (800a3e8 <I2C_Mem_ISR_DMA+0x258>)
 800a19e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <I2C_Mem_ISR_DMA+0x1e>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e118      	b.n	800a3e0 <I2C_Mem_ISR_DMA+0x250>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	091b      	lsrs	r3, r3, #4
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d017      	beq.n	800a1f2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	091b      	lsrs	r3, r3, #4
 800a1c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d011      	beq.n	800a1f2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2210      	movs	r2, #16
 800a1d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1da:	f043 0204 	orr.w	r2, r3, #4
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a1e2:	2120      	movs	r1, #32
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f001 fadd 	bl	800b7a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f001 f895 	bl	800b31a <I2C_Flush_TXDR>
 800a1f0:	e0f1      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	085b      	lsrs	r3, r3, #1
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00f      	beq.n	800a21e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	085b      	lsrs	r3, r3, #1
 800a202:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a206:	2b00      	cmp	r3, #0
 800a208:	d009      	beq.n	800a21e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a212:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a21a:	651a      	str	r2, [r3, #80]	; 0x50
 800a21c:	e0db      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	09db      	lsrs	r3, r3, #7
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d060      	beq.n	800a2ec <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	099b      	lsrs	r3, r3, #6
 800a22e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a232:	2b00      	cmp	r3, #0
 800a234:	d05a      	beq.n	800a2ec <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a236:	2101      	movs	r1, #1
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f001 fb37 	bl	800b8ac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a23e:	2110      	movs	r1, #16
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f001 faaf 	bl	800b7a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d048      	beq.n	800a2e2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a254:	b29b      	uxth	r3, r3
 800a256:	2bff      	cmp	r3, #255	; 0xff
 800a258:	d910      	bls.n	800a27c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	22ff      	movs	r2, #255	; 0xff
 800a25e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a264:	b299      	uxth	r1, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f001 fa63 	bl	800b740 <I2C_TransferConfig>
 800a27a:	e011      	b.n	800a2a0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a280:	b29a      	uxth	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a28a:	b299      	uxth	r1, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a290:	b2da      	uxtb	r2, r3
 800a292:	2300      	movs	r3, #0
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f001 fa50 	bl	800b740 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b22      	cmp	r3, #34	; 0x22
 800a2bc:	d108      	bne.n	800a2d0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a2ce:	e082      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a2e0:	e079      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a2e2:	2140      	movs	r1, #64	; 0x40
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 ff01 	bl	800b0ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a2ea:	e074      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	099b      	lsrs	r3, r3, #6
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d05e      	beq.n	800a3b6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	099b      	lsrs	r3, r3, #6
 800a2fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a300:	2b00      	cmp	r3, #0
 800a302:	d058      	beq.n	800a3b6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a304:	2101      	movs	r1, #1
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f001 fad0 	bl	800b8ac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a30c:	2110      	movs	r1, #16
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f001 fa48 	bl	800b7a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b22      	cmp	r3, #34	; 0x22
 800a31e:	d101      	bne.n	800a324 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800a320:	4b32      	ldr	r3, [pc, #200]	; (800a3ec <I2C_Mem_ISR_DMA+0x25c>)
 800a322:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a328:	b29b      	uxth	r3, r3
 800a32a:	2bff      	cmp	r3, #255	; 0xff
 800a32c:	d910      	bls.n	800a350 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	22ff      	movs	r2, #255	; 0xff
 800a332:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a338:	b299      	uxth	r1, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f001 f9f9 	bl	800b740 <I2C_TransferConfig>
 800a34e:	e011      	b.n	800a374 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35e:	b299      	uxth	r1, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a364:	b2da      	uxtb	r2, r3
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f001 f9e6 	bl	800b740 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	b29a      	uxth	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b22      	cmp	r3, #34	; 0x22
 800a390:	d108      	bne.n	800a3a4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3a0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a3a2:	e018      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a3b4:	e00f      	b.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	095b      	lsrs	r3, r3, #5
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d009      	beq.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	095b      	lsrs	r3, r3, #5
 800a3c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a3ce:	68b9      	ldr	r1, [r7, #8]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fb11 	bl	800a9f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	80002000 	.word	0x80002000
 800a3ec:	80002400 	.word	0x80002400

0800a3f0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d101      	bne.n	800a414 <I2C_Slave_ISR_DMA+0x24>
 800a410:	2302      	movs	r3, #2
 800a412:	e1cc      	b.n	800a7ae <I2C_Slave_ISR_DMA+0x3be>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	095b      	lsrs	r3, r3, #5
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a430:	2b00      	cmp	r3, #0
 800a432:	d004      	beq.n	800a43e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a434:	68b9      	ldr	r1, [r7, #8]
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fba8 	bl	800ab8c <I2C_ITSlaveCplt>
 800a43c:	e1b2      	b.n	800a7a4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	091b      	lsrs	r3, r3, #4
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 819c 	beq.w	800a784 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	091b      	lsrs	r3, r3, #4
 800a450:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 8195 	beq.w	800a784 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0b9b      	lsrs	r3, r3, #14
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	0bdb      	lsrs	r3, r3, #15
 800a46a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 8181 	beq.w	800a776 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d07c      	beq.n	800a576 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	0bdb      	lsrs	r3, r3, #15
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d076      	beq.n	800a576 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a75      	ldr	r2, [pc, #468]	; (800a664 <I2C_Slave_ISR_DMA+0x274>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d059      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a73      	ldr	r2, [pc, #460]	; (800a668 <I2C_Slave_ISR_DMA+0x278>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d053      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a71      	ldr	r2, [pc, #452]	; (800a66c <I2C_Slave_ISR_DMA+0x27c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d04d      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a6f      	ldr	r2, [pc, #444]	; (800a670 <I2C_Slave_ISR_DMA+0x280>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d047      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a6d      	ldr	r2, [pc, #436]	; (800a674 <I2C_Slave_ISR_DMA+0x284>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d041      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a6b      	ldr	r2, [pc, #428]	; (800a678 <I2C_Slave_ISR_DMA+0x288>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d03b      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a69      	ldr	r2, [pc, #420]	; (800a67c <I2C_Slave_ISR_DMA+0x28c>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d035      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a67      	ldr	r2, [pc, #412]	; (800a680 <I2C_Slave_ISR_DMA+0x290>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d02f      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a65      	ldr	r2, [pc, #404]	; (800a684 <I2C_Slave_ISR_DMA+0x294>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d029      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a63      	ldr	r2, [pc, #396]	; (800a688 <I2C_Slave_ISR_DMA+0x298>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d023      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a61      	ldr	r2, [pc, #388]	; (800a68c <I2C_Slave_ISR_DMA+0x29c>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d01d      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a5f      	ldr	r2, [pc, #380]	; (800a690 <I2C_Slave_ISR_DMA+0x2a0>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d017      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a5d      	ldr	r2, [pc, #372]	; (800a694 <I2C_Slave_ISR_DMA+0x2a4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d011      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a5b      	ldr	r2, [pc, #364]	; (800a698 <I2C_Slave_ISR_DMA+0x2a8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00b      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a59      	ldr	r2, [pc, #356]	; (800a69c <I2C_Slave_ISR_DMA+0x2ac>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d005      	beq.n	800a548 <I2C_Slave_ISR_DMA+0x158>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a57      	ldr	r2, [pc, #348]	; (800a6a0 <I2C_Slave_ISR_DMA+0x2b0>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d109      	bne.n	800a55c <I2C_Slave_ISR_DMA+0x16c>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	bf0c      	ite	eq
 800a554:	2301      	moveq	r3, #1
 800a556:	2300      	movne	r3, #0
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	e008      	b.n	800a56e <I2C_Slave_ISR_DMA+0x17e>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	bf0c      	ite	eq
 800a568:	2301      	moveq	r3, #1
 800a56a:	2300      	movne	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800a572:	2301      	movs	r3, #1
 800a574:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 809f 	beq.w	800a6be <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	0b9b      	lsrs	r3, r3, #14
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 8098 	beq.w	800a6be <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a33      	ldr	r2, [pc, #204]	; (800a664 <I2C_Slave_ISR_DMA+0x274>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d059      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a31      	ldr	r2, [pc, #196]	; (800a668 <I2C_Slave_ISR_DMA+0x278>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d053      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a2f      	ldr	r2, [pc, #188]	; (800a66c <I2C_Slave_ISR_DMA+0x27c>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d04d      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <I2C_Slave_ISR_DMA+0x280>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d047      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a2b      	ldr	r2, [pc, #172]	; (800a674 <I2C_Slave_ISR_DMA+0x284>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d041      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a29      	ldr	r2, [pc, #164]	; (800a678 <I2C_Slave_ISR_DMA+0x288>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d03b      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a27      	ldr	r2, [pc, #156]	; (800a67c <I2C_Slave_ISR_DMA+0x28c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d035      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a25      	ldr	r2, [pc, #148]	; (800a680 <I2C_Slave_ISR_DMA+0x290>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d02f      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a23      	ldr	r2, [pc, #140]	; (800a684 <I2C_Slave_ISR_DMA+0x294>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d029      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a21      	ldr	r2, [pc, #132]	; (800a688 <I2C_Slave_ISR_DMA+0x298>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d023      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <I2C_Slave_ISR_DMA+0x29c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d01d      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a1d      	ldr	r2, [pc, #116]	; (800a690 <I2C_Slave_ISR_DMA+0x2a0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d017      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1b      	ldr	r2, [pc, #108]	; (800a694 <I2C_Slave_ISR_DMA+0x2a4>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d011      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a19      	ldr	r2, [pc, #100]	; (800a698 <I2C_Slave_ISR_DMA+0x2a8>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00b      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a17      	ldr	r2, [pc, #92]	; (800a69c <I2C_Slave_ISR_DMA+0x2ac>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d005      	beq.n	800a64e <I2C_Slave_ISR_DMA+0x25e>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a15      	ldr	r2, [pc, #84]	; (800a6a0 <I2C_Slave_ISR_DMA+0x2b0>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d12a      	bne.n	800a6a4 <I2C_Slave_ISR_DMA+0x2b4>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	bf0c      	ite	eq
 800a65a:	2301      	moveq	r3, #1
 800a65c:	2300      	movne	r3, #0
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	e029      	b.n	800a6b6 <I2C_Slave_ISR_DMA+0x2c6>
 800a662:	bf00      	nop
 800a664:	40020010 	.word	0x40020010
 800a668:	40020028 	.word	0x40020028
 800a66c:	40020040 	.word	0x40020040
 800a670:	40020058 	.word	0x40020058
 800a674:	40020070 	.word	0x40020070
 800a678:	40020088 	.word	0x40020088
 800a67c:	400200a0 	.word	0x400200a0
 800a680:	400200b8 	.word	0x400200b8
 800a684:	40020410 	.word	0x40020410
 800a688:	40020428 	.word	0x40020428
 800a68c:	40020440 	.word	0x40020440
 800a690:	40020458 	.word	0x40020458
 800a694:	40020470 	.word	0x40020470
 800a698:	40020488 	.word	0x40020488
 800a69c:	400204a0 	.word	0x400204a0
 800a6a0:	400204b8 	.word	0x400204b8
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2301      	moveq	r3, #1
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d128      	bne.n	800a716 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b28      	cmp	r3, #40	; 0x28
 800a6ce:	d108      	bne.n	800a6e2 <I2C_Slave_ISR_DMA+0x2f2>
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6d6:	d104      	bne.n	800a6e2 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 fcb0 	bl	800b040 <I2C_ITListenCplt>
 800a6e0:	e048      	b.n	800a774 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b29      	cmp	r3, #41	; 0x29
 800a6ec:	d10e      	bne.n	800a70c <I2C_Slave_ISR_DMA+0x31c>
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a6f4:	d00a      	beq.n	800a70c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2210      	movs	r2, #16
 800a6fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fe0b 	bl	800b31a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 f918 	bl	800a93a <I2C_ITSlaveSeqCplt>
 800a70a:	e033      	b.n	800a774 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2210      	movs	r2, #16
 800a712:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a714:	e034      	b.n	800a780 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2210      	movs	r2, #16
 800a71c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a722:	f043 0204 	orr.w	r2, r3, #4
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a730:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <I2C_Slave_ISR_DMA+0x350>
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a73e:	d11f      	bne.n	800a780 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	2b21      	cmp	r3, #33	; 0x21
 800a744:	d002      	beq.n	800a74c <I2C_Slave_ISR_DMA+0x35c>
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	2b29      	cmp	r3, #41	; 0x29
 800a74a:	d103      	bne.n	800a754 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2221      	movs	r2, #33	; 0x21
 800a750:	631a      	str	r2, [r3, #48]	; 0x30
 800a752:	e008      	b.n	800a766 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	2b22      	cmp	r3, #34	; 0x22
 800a758:	d002      	beq.n	800a760 <I2C_Slave_ISR_DMA+0x370>
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	2b2a      	cmp	r3, #42	; 0x2a
 800a75e:	d102      	bne.n	800a766 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2222      	movs	r2, #34	; 0x22
 800a764:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76a:	4619      	mov	r1, r3
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 fcbd 	bl	800b0ec <I2C_ITError>
      if (treatdmanack == 1U)
 800a772:	e005      	b.n	800a780 <I2C_Slave_ISR_DMA+0x390>
 800a774:	e004      	b.n	800a780 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2210      	movs	r2, #16
 800a77c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a77e:	e011      	b.n	800a7a4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800a780:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a782:	e00f      	b.n	800a7a4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	08db      	lsrs	r3, r3, #3
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d009      	beq.n	800a7a4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	08db      	lsrs	r3, r3, #3
 800a794:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f80a 	bl	800a7b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop

0800a7b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7ce:	2b28      	cmp	r3, #40	; 0x28
 800a7d0:	d16a      	bne.n	800a8a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	0c1b      	lsrs	r3, r3, #16
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	0c1b      	lsrs	r3, r3, #16
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a7f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	b29b      	uxth	r3, r3
 800a808:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a80c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d138      	bne.n	800a888 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a816:	897b      	ldrh	r3, [r7, #10]
 800a818:	09db      	lsrs	r3, r3, #7
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	89bb      	ldrh	r3, [r7, #12]
 800a81e:	4053      	eors	r3, r2
 800a820:	b29b      	uxth	r3, r3
 800a822:	f003 0306 	and.w	r3, r3, #6
 800a826:	2b00      	cmp	r3, #0
 800a828:	d11c      	bne.n	800a864 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a82a:	897b      	ldrh	r3, [r7, #10]
 800a82c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d13b      	bne.n	800a8b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2208      	movs	r2, #8
 800a84c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a856:	89ba      	ldrh	r2, [r7, #12]
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff f91e 	bl	8009a9e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a862:	e029      	b.n	800a8b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a864:	893b      	ldrh	r3, [r7, #8]
 800a866:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 f81d 	bl	800b8ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a87a:	89ba      	ldrh	r2, [r7, #12]
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff f90c 	bl	8009a9e <HAL_I2C_AddrCallback>
}
 800a886:	e017      	b.n	800a8b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 f80d 	bl	800b8ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a89a:	89ba      	ldrh	r2, [r7, #12]
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff f8fc 	bl	8009a9e <HAL_I2C_AddrCallback>
}
 800a8a6:	e007      	b.n	800a8b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2208      	movs	r2, #8
 800a8ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b21      	cmp	r3, #33	; 0x21
 800a8da:	d115      	bne.n	800a908 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2211      	movs	r2, #17
 800a8e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 ffda 	bl	800b8ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff f8a4 	bl	8009a4e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a906:	e014      	b.n	800a932 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2212      	movs	r2, #18
 800a914:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a91c:	2102      	movs	r1, #2
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 ffc4 	bl	800b8ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff f898 	bl	8009a62 <HAL_I2C_MasterRxCpltCallback>
}
 800a932:	bf00      	nop
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	0b9b      	lsrs	r3, r3, #14
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d008      	beq.n	800a970 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	e00d      	b.n	800a98c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	0bdb      	lsrs	r3, r3, #15
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a98a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b29      	cmp	r3, #41	; 0x29
 800a996:	d112      	bne.n	800a9be <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2228      	movs	r2, #40	; 0x28
 800a99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2221      	movs	r2, #33	; 0x21
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 ff7f 	bl	800b8ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff f85d 	bl	8009a76 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a9bc:	e017      	b.n	800a9ee <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9c8:	d111      	bne.n	800a9ee <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2228      	movs	r2, #40	; 0x28
 800a9ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2222      	movs	r2, #34	; 0x22
 800a9d6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a9d8:	2102      	movs	r1, #2
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 ff66 	bl	800b8ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff f84e 	bl	8009a8a <HAL_I2C_SlaveRxCpltCallback>
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b21      	cmp	r3, #33	; 0x21
 800aa18:	d107      	bne.n	800aa2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 ff45 	bl	800b8ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2211      	movs	r2, #17
 800aa26:	631a      	str	r2, [r3, #48]	; 0x30
 800aa28:	e00c      	b.n	800aa44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b22      	cmp	r3, #34	; 0x22
 800aa34:	d106      	bne.n	800aa44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aa36:	2102      	movs	r1, #2
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 ff37 	bl	800b8ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2212      	movs	r2, #18
 800aa42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6859      	ldr	r1, [r3, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b4d      	ldr	r3, [pc, #308]	; (800ab84 <I2C_ITMasterCplt+0x18c>)
 800aa50:	400b      	ands	r3, r1
 800aa52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a4a      	ldr	r2, [pc, #296]	; (800ab88 <I2C_ITMasterCplt+0x190>)
 800aa5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	091b      	lsrs	r3, r3, #4
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d009      	beq.n	800aa80 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2210      	movs	r2, #16
 800aa72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa78:	f043 0204 	orr.w	r2, r3, #4
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b60      	cmp	r3, #96	; 0x60
 800aa8a:	d10b      	bne.n	800aaa4 <I2C_ITMasterCplt+0xac>
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	089b      	lsrs	r3, r3, #2
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fc38 	bl	800b31a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b60      	cmp	r3, #96	; 0x60
 800aaba:	d002      	beq.n	800aac2 <I2C_ITMasterCplt+0xca>
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d006      	beq.n	800aad0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fb0f 	bl	800b0ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aace:	e054      	b.n	800ab7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b21      	cmp	r3, #33	; 0x21
 800aada:	d124      	bne.n	800ab26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d10b      	bne.n	800ab0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7fe ffe1 	bl	8009ace <HAL_I2C_MemTxCpltCallback>
}
 800ab0c:	e035      	b.n	800ab7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7fe ff95 	bl	8009a4e <HAL_I2C_MasterTxCpltCallback>
}
 800ab24:	e029      	b.n	800ab7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b22      	cmp	r3, #34	; 0x22
 800ab30:	d123      	bne.n	800ab7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b40      	cmp	r3, #64	; 0x40
 800ab4a:	d10b      	bne.n	800ab64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7fe ffc0 	bl	8009ae2 <HAL_I2C_MemRxCpltCallback>
}
 800ab62:	e00a      	b.n	800ab7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7fe ff74 	bl	8009a62 <HAL_I2C_MasterRxCpltCallback>
}
 800ab7a:	bf00      	nop
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	fe00e800 	.word	0xfe00e800
 800ab88:	ffff0000 	.word	0xffff0000

0800ab8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2220      	movs	r2, #32
 800abb6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800abb8:	7afb      	ldrb	r3, [r7, #11]
 800abba:	2b21      	cmp	r3, #33	; 0x21
 800abbc:	d002      	beq.n	800abc4 <I2C_ITSlaveCplt+0x38>
 800abbe:	7afb      	ldrb	r3, [r7, #11]
 800abc0:	2b29      	cmp	r3, #41	; 0x29
 800abc2:	d108      	bne.n	800abd6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800abc4:	f248 0101 	movw	r1, #32769	; 0x8001
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fe6f 	bl	800b8ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2221      	movs	r2, #33	; 0x21
 800abd2:	631a      	str	r2, [r3, #48]	; 0x30
 800abd4:	e019      	b.n	800ac0a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800abd6:	7afb      	ldrb	r3, [r7, #11]
 800abd8:	2b22      	cmp	r3, #34	; 0x22
 800abda:	d002      	beq.n	800abe2 <I2C_ITSlaveCplt+0x56>
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	2b2a      	cmp	r3, #42	; 0x2a
 800abe0:	d108      	bne.n	800abf4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800abe2:	f248 0102 	movw	r1, #32770	; 0x8002
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fe60 	bl	800b8ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2222      	movs	r2, #34	; 0x22
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30
 800abf2:	e00a      	b.n	800ac0a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	2b28      	cmp	r3, #40	; 0x28
 800abf8:	d107      	bne.n	800ac0a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800abfa:	f248 0103 	movw	r1, #32771	; 0x8003
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fe54 	bl	800b8ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac18:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6859      	ldr	r1, [r3, #4]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	4b80      	ldr	r3, [pc, #512]	; (800ae28 <I2C_ITSlaveCplt+0x29c>)
 800ac26:	400b      	ands	r3, r1
 800ac28:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fb75 	bl	800b31a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	0b9b      	lsrs	r3, r3, #14
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d07a      	beq.n	800ad32 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 8112 	beq.w	800ae7a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a73      	ldr	r2, [pc, #460]	; (800ae2c <I2C_ITSlaveCplt+0x2a0>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d059      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a71      	ldr	r2, [pc, #452]	; (800ae30 <I2C_ITSlaveCplt+0x2a4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d053      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a6f      	ldr	r2, [pc, #444]	; (800ae34 <I2C_ITSlaveCplt+0x2a8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d04d      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a6d      	ldr	r2, [pc, #436]	; (800ae38 <I2C_ITSlaveCplt+0x2ac>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d047      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a6b      	ldr	r2, [pc, #428]	; (800ae3c <I2C_ITSlaveCplt+0x2b0>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d041      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a69      	ldr	r2, [pc, #420]	; (800ae40 <I2C_ITSlaveCplt+0x2b4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d03b      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a67      	ldr	r2, [pc, #412]	; (800ae44 <I2C_ITSlaveCplt+0x2b8>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d035      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a65      	ldr	r2, [pc, #404]	; (800ae48 <I2C_ITSlaveCplt+0x2bc>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d02f      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a63      	ldr	r2, [pc, #396]	; (800ae4c <I2C_ITSlaveCplt+0x2c0>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d029      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a61      	ldr	r2, [pc, #388]	; (800ae50 <I2C_ITSlaveCplt+0x2c4>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d023      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a5f      	ldr	r2, [pc, #380]	; (800ae54 <I2C_ITSlaveCplt+0x2c8>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d01d      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a5d      	ldr	r2, [pc, #372]	; (800ae58 <I2C_ITSlaveCplt+0x2cc>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d017      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a5b      	ldr	r2, [pc, #364]	; (800ae5c <I2C_ITSlaveCplt+0x2d0>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d011      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a59      	ldr	r2, [pc, #356]	; (800ae60 <I2C_ITSlaveCplt+0x2d4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d00b      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a57      	ldr	r2, [pc, #348]	; (800ae64 <I2C_ITSlaveCplt+0x2d8>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d005      	beq.n	800ad16 <I2C_ITSlaveCplt+0x18a>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a55      	ldr	r2, [pc, #340]	; (800ae68 <I2C_ITSlaveCplt+0x2dc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d105      	bne.n	800ad22 <I2C_ITSlaveCplt+0x196>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	e004      	b.n	800ad2c <I2C_ITSlaveCplt+0x1a0>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800ad30:	e0a3      	b.n	800ae7a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	0bdb      	lsrs	r3, r3, #15
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 809d 	beq.w	800ae7a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 8090 	beq.w	800ae7a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a32      	ldr	r2, [pc, #200]	; (800ae2c <I2C_ITSlaveCplt+0x2a0>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d059      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a30      	ldr	r2, [pc, #192]	; (800ae30 <I2C_ITSlaveCplt+0x2a4>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d053      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2e      	ldr	r2, [pc, #184]	; (800ae34 <I2C_ITSlaveCplt+0x2a8>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d04d      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a2c      	ldr	r2, [pc, #176]	; (800ae38 <I2C_ITSlaveCplt+0x2ac>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d047      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a2a      	ldr	r2, [pc, #168]	; (800ae3c <I2C_ITSlaveCplt+0x2b0>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d041      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a28      	ldr	r2, [pc, #160]	; (800ae40 <I2C_ITSlaveCplt+0x2b4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d03b      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a26      	ldr	r2, [pc, #152]	; (800ae44 <I2C_ITSlaveCplt+0x2b8>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d035      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a24      	ldr	r2, [pc, #144]	; (800ae48 <I2C_ITSlaveCplt+0x2bc>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02f      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a22      	ldr	r2, [pc, #136]	; (800ae4c <I2C_ITSlaveCplt+0x2c0>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d029      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a20      	ldr	r2, [pc, #128]	; (800ae50 <I2C_ITSlaveCplt+0x2c4>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d023      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a1e      	ldr	r2, [pc, #120]	; (800ae54 <I2C_ITSlaveCplt+0x2c8>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d01d      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a1c      	ldr	r2, [pc, #112]	; (800ae58 <I2C_ITSlaveCplt+0x2cc>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d017      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1a      	ldr	r2, [pc, #104]	; (800ae5c <I2C_ITSlaveCplt+0x2d0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d011      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a18      	ldr	r2, [pc, #96]	; (800ae60 <I2C_ITSlaveCplt+0x2d4>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00b      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a16      	ldr	r2, [pc, #88]	; (800ae64 <I2C_ITSlaveCplt+0x2d8>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d005      	beq.n	800ae1a <I2C_ITSlaveCplt+0x28e>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a14      	ldr	r2, [pc, #80]	; (800ae68 <I2C_ITSlaveCplt+0x2dc>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d128      	bne.n	800ae6c <I2C_ITSlaveCplt+0x2e0>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	e027      	b.n	800ae76 <I2C_ITSlaveCplt+0x2ea>
 800ae26:	bf00      	nop
 800ae28:	fe00e800 	.word	0xfe00e800
 800ae2c:	40020010 	.word	0x40020010
 800ae30:	40020028 	.word	0x40020028
 800ae34:	40020040 	.word	0x40020040
 800ae38:	40020058 	.word	0x40020058
 800ae3c:	40020070 	.word	0x40020070
 800ae40:	40020088 	.word	0x40020088
 800ae44:	400200a0 	.word	0x400200a0
 800ae48:	400200b8 	.word	0x400200b8
 800ae4c:	40020410 	.word	0x40020410
 800ae50:	40020428 	.word	0x40020428
 800ae54:	40020440 	.word	0x40020440
 800ae58:	40020458 	.word	0x40020458
 800ae5c:	40020470 	.word	0x40020470
 800ae60:	40020488 	.word	0x40020488
 800ae64:	400204a0 	.word	0x400204a0
 800ae68:	400204b8 	.word	0x400204b8
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	089b      	lsrs	r3, r3, #2
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d020      	beq.n	800aec8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f023 0304 	bic.w	r3, r3, #4
 800ae8c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	b2d2      	uxtb	r2, r2
 800ae9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00c      	beq.n	800aec8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aecc:	b29b      	uxth	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d005      	beq.n	800aede <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed6:	f043 0204 	orr.w	r2, r3, #4
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	091b      	lsrs	r3, r3, #4
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d04a      	beq.n	800af80 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	091b      	lsrs	r3, r3, #4
 800aeee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d044      	beq.n	800af80 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d128      	bne.n	800af52 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b28      	cmp	r3, #40	; 0x28
 800af0a:	d108      	bne.n	800af1e <I2C_ITSlaveCplt+0x392>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af12:	d104      	bne.n	800af1e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800af14:	6979      	ldr	r1, [r7, #20]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f892 	bl	800b040 <I2C_ITListenCplt>
 800af1c:	e030      	b.n	800af80 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b29      	cmp	r3, #41	; 0x29
 800af28:	d10e      	bne.n	800af48 <I2C_ITSlaveCplt+0x3bc>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af30:	d00a      	beq.n	800af48 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2210      	movs	r2, #16
 800af38:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f9ed 	bl	800b31a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff fcfa 	bl	800a93a <I2C_ITSlaveSeqCplt>
 800af46:	e01b      	b.n	800af80 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2210      	movs	r2, #16
 800af4e:	61da      	str	r2, [r3, #28]
 800af50:	e016      	b.n	800af80 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2210      	movs	r2, #16
 800af58:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5e:	f043 0204 	orr.w	r2, r3, #4
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <I2C_ITSlaveCplt+0x3e8>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af72:	d105      	bne.n	800af80 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f8b6 	bl	800b0ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af92:	2b00      	cmp	r3, #0
 800af94:	d010      	beq.n	800afb8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f8a5 	bl	800b0ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b28      	cmp	r3, #40	; 0x28
 800afac:	d141      	bne.n	800b032 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800afae:	6979      	ldr	r1, [r7, #20]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f845 	bl	800b040 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afb6:	e03c      	b.n	800b032 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800afc0:	d014      	beq.n	800afec <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff fcb9 	bl	800a93a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <I2C_ITSlaveCplt+0x4b0>)
 800afcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7fe fd68 	bl	8009aba <HAL_I2C_ListenCpltCallback>
}
 800afea:	e022      	b.n	800b032 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b22      	cmp	r3, #34	; 0x22
 800aff6:	d10e      	bne.n	800b016 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2220      	movs	r2, #32
 800affc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7fe fd3b 	bl	8009a8a <HAL_I2C_SlaveRxCpltCallback>
}
 800b014:	e00d      	b.n	800b032 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7fe fd22 	bl	8009a76 <HAL_I2C_SlaveTxCpltCallback>
}
 800b032:	bf00      	nop
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	ffff0000 	.word	0xffff0000

0800b040 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a26      	ldr	r2, [pc, #152]	; (800b0e8 <I2C_ITListenCplt+0xa8>)
 800b04e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2220      	movs	r2, #32
 800b05a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	089b      	lsrs	r3, r3, #2
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	d022      	beq.n	800b0be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b094:	2b00      	cmp	r3, #0
 800b096:	d012      	beq.n	800b0be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b6:	f043 0204 	orr.w	r2, r3, #4
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b0be:	f248 0103 	movw	r1, #32771	; 0x8003
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fbf2 	bl	800b8ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2210      	movs	r2, #16
 800b0ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7fe fcee 	bl	8009aba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b0de:	bf00      	nop
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	ffff0000 	.word	0xffff0000

0800b0ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0fc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a6d      	ldr	r2, [pc, #436]	; (800b2c0 <I2C_ITError+0x1d4>)
 800b10a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	431a      	orrs	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	2b28      	cmp	r3, #40	; 0x28
 800b122:	d005      	beq.n	800b130 <I2C_ITError+0x44>
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	2b29      	cmp	r3, #41	; 0x29
 800b128:	d002      	beq.n	800b130 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	2b2a      	cmp	r3, #42	; 0x2a
 800b12e:	d10b      	bne.n	800b148 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b130:	2103      	movs	r1, #3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fbba 	bl	800b8ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2228      	movs	r2, #40	; 0x28
 800b13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a60      	ldr	r2, [pc, #384]	; (800b2c4 <I2C_ITError+0x1d8>)
 800b144:	635a      	str	r2, [r3, #52]	; 0x34
 800b146:	e030      	b.n	800b1aa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b148:	f248 0103 	movw	r1, #32771	; 0x8003
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fbad 	bl	800b8ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f8e1 	bl	800b31a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b60      	cmp	r3, #96	; 0x60
 800b162:	d01f      	beq.n	800b1a4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b20      	cmp	r3, #32
 800b178:	d114      	bne.n	800b1a4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f003 0310 	and.w	r3, r3, #16
 800b184:	2b10      	cmp	r3, #16
 800b186:	d109      	bne.n	800b19c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2210      	movs	r2, #16
 800b18e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b194:	f043 0204 	orr.w	r2, r3, #4
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d039      	beq.n	800b22c <I2C_ITError+0x140>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b11      	cmp	r3, #17
 800b1bc:	d002      	beq.n	800b1c4 <I2C_ITError+0xd8>
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b21      	cmp	r3, #33	; 0x21
 800b1c2:	d133      	bne.n	800b22c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1d2:	d107      	bne.n	800b1e4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b1e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fd fb31 	bl	8008850 <HAL_DMA_GetState>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d017      	beq.n	800b224 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f8:	4a33      	ldr	r2, [pc, #204]	; (800b2c8 <I2C_ITError+0x1dc>)
 800b1fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fc f9b1 	bl	8007570 <HAL_DMA_Abort_IT>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d04d      	beq.n	800b2b0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b21e:	4610      	mov	r0, r2
 800b220:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b222:	e045      	b.n	800b2b0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f851 	bl	800b2cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b22a:	e041      	b.n	800b2b0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d039      	beq.n	800b2a8 <I2C_ITError+0x1bc>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b12      	cmp	r3, #18
 800b238:	d002      	beq.n	800b240 <I2C_ITError+0x154>
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b22      	cmp	r3, #34	; 0x22
 800b23e:	d133      	bne.n	800b2a8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b24e:	d107      	bne.n	800b260 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b25e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b264:	4618      	mov	r0, r3
 800b266:	f7fd faf3 	bl	8008850 <HAL_DMA_GetState>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d017      	beq.n	800b2a0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b274:	4a14      	ldr	r2, [pc, #80]	; (800b2c8 <I2C_ITError+0x1dc>)
 800b276:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b284:	4618      	mov	r0, r3
 800b286:	f7fc f973 	bl	8007570 <HAL_DMA_Abort_IT>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d011      	beq.n	800b2b4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b29a:	4610      	mov	r0, r2
 800b29c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b29e:	e009      	b.n	800b2b4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f813 	bl	800b2cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2a6:	e005      	b.n	800b2b4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f80f 	bl	800b2cc <I2C_TreatErrorCallback>
  }
}
 800b2ae:	e002      	b.n	800b2b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b2b0:	bf00      	nop
 800b2b2:	e000      	b.n	800b2b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2b4:	bf00      	nop
}
 800b2b6:	bf00      	nop
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	ffff0000 	.word	0xffff0000
 800b2c4:	08009da3 	.word	0x08009da3
 800b2c8:	0800b705 	.word	0x0800b705

0800b2cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b60      	cmp	r3, #96	; 0x60
 800b2de:	d10e      	bne.n	800b2fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fe fc07 	bl	8009b0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b2fc:	e009      	b.n	800b312 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7fe fbf2 	bl	8009af6 <HAL_I2C_ErrorCallback>
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d103      	bne.n	800b338 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2200      	movs	r2, #0
 800b336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b01      	cmp	r3, #1
 800b344:	d007      	beq.n	800b356 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	699a      	ldr	r2, [r3, #24]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f042 0201 	orr.w	r2, r2, #1
 800b354:	619a      	str	r2, [r3, #24]
  }
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b37e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b384:	b29b      	uxth	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d104      	bne.n	800b394 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b38a:	2120      	movs	r1, #32
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 fa09 	bl	800b7a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b392:	e02d      	b.n	800b3f0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b39c:	441a      	add	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	2bff      	cmp	r3, #255	; 0xff
 800b3aa:	d903      	bls.n	800b3b4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	22ff      	movs	r2, #255	; 0xff
 800b3b0:	851a      	strh	r2, [r3, #40]	; 0x28
 800b3b2:	e004      	b.n	800b3be <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3328      	adds	r3, #40	; 0x28
 800b3ce:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b3d4:	f7fb fb44 	bl	8006a60 <HAL_DMA_Start_IT>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b3de:	2110      	movs	r1, #16
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fe83 	bl	800b0ec <I2C_ITError>
}
 800b3e6:	e003      	b.n	800b3f0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b3e8:	2140      	movs	r1, #64	; 0x40
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 f9da 	bl	800b7a4 <I2C_Enable_IRQ>
}
 800b3f0:	bf00      	nop
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b414:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b420:	2120      	movs	r1, #32
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 f9be 	bl	800b7a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b428:	e02d      	b.n	800b486 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b432:	441a      	add	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	2bff      	cmp	r3, #255	; 0xff
 800b440:	d903      	bls.n	800b44a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	22ff      	movs	r2, #255	; 0xff
 800b446:	851a      	strh	r2, [r3, #40]	; 0x28
 800b448:	e004      	b.n	800b454 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3324      	adds	r3, #36	; 0x24
 800b45e:	4619      	mov	r1, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b46a:	f7fb faf9 	bl	8006a60 <HAL_DMA_Start_IT>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b474:	2110      	movs	r1, #16
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff fe38 	bl	800b0ec <I2C_ITError>
}
 800b47c:	e003      	b.n	800b486 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b47e:	2140      	movs	r1, #64	; 0x40
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f98f 	bl	800b7a4 <I2C_Enable_IRQ>
}
 800b486:	bf00      	nop
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d076      	beq.n	800b598 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a71      	ldr	r2, [pc, #452]	; (800b678 <I2C_DMAError+0x1e8>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d059      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a6f      	ldr	r2, [pc, #444]	; (800b67c <I2C_DMAError+0x1ec>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d053      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a6d      	ldr	r2, [pc, #436]	; (800b680 <I2C_DMAError+0x1f0>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d04d      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a6b      	ldr	r2, [pc, #428]	; (800b684 <I2C_DMAError+0x1f4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d047      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a69      	ldr	r2, [pc, #420]	; (800b688 <I2C_DMAError+0x1f8>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d041      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a67      	ldr	r2, [pc, #412]	; (800b68c <I2C_DMAError+0x1fc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d03b      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a65      	ldr	r2, [pc, #404]	; (800b690 <I2C_DMAError+0x200>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d035      	beq.n	800b56a <I2C_DMAError+0xda>
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a63      	ldr	r2, [pc, #396]	; (800b694 <I2C_DMAError+0x204>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d02f      	beq.n	800b56a <I2C_DMAError+0xda>
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a61      	ldr	r2, [pc, #388]	; (800b698 <I2C_DMAError+0x208>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d029      	beq.n	800b56a <I2C_DMAError+0xda>
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a5f      	ldr	r2, [pc, #380]	; (800b69c <I2C_DMAError+0x20c>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d023      	beq.n	800b56a <I2C_DMAError+0xda>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a5d      	ldr	r2, [pc, #372]	; (800b6a0 <I2C_DMAError+0x210>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d01d      	beq.n	800b56a <I2C_DMAError+0xda>
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a5b      	ldr	r2, [pc, #364]	; (800b6a4 <I2C_DMAError+0x214>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d017      	beq.n	800b56a <I2C_DMAError+0xda>
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a59      	ldr	r2, [pc, #356]	; (800b6a8 <I2C_DMAError+0x218>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d011      	beq.n	800b56a <I2C_DMAError+0xda>
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a57      	ldr	r2, [pc, #348]	; (800b6ac <I2C_DMAError+0x21c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d00b      	beq.n	800b56a <I2C_DMAError+0xda>
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a55      	ldr	r2, [pc, #340]	; (800b6b0 <I2C_DMAError+0x220>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d005      	beq.n	800b56a <I2C_DMAError+0xda>
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a53      	ldr	r2, [pc, #332]	; (800b6b4 <I2C_DMAError+0x224>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d109      	bne.n	800b57e <I2C_DMAError+0xee>
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	bf0c      	ite	eq
 800b576:	2301      	moveq	r3, #1
 800b578:	2300      	movne	r3, #0
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	e008      	b.n	800b590 <I2C_DMAError+0x100>
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	bf0c      	ite	eq
 800b58a:	2301      	moveq	r3, #1
 800b58c:	2300      	movne	r3, #0
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800b594:	2301      	movs	r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 8098 	beq.w	800b6d2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a33      	ldr	r2, [pc, #204]	; (800b678 <I2C_DMAError+0x1e8>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d059      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a31      	ldr	r2, [pc, #196]	; (800b67c <I2C_DMAError+0x1ec>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d053      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a2f      	ldr	r2, [pc, #188]	; (800b680 <I2C_DMAError+0x1f0>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d04d      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a2d      	ldr	r2, [pc, #180]	; (800b684 <I2C_DMAError+0x1f4>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d047      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a2b      	ldr	r2, [pc, #172]	; (800b688 <I2C_DMAError+0x1f8>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d041      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a29      	ldr	r2, [pc, #164]	; (800b68c <I2C_DMAError+0x1fc>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d03b      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a27      	ldr	r2, [pc, #156]	; (800b690 <I2C_DMAError+0x200>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d035      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a25      	ldr	r2, [pc, #148]	; (800b694 <I2C_DMAError+0x204>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d02f      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a23      	ldr	r2, [pc, #140]	; (800b698 <I2C_DMAError+0x208>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d029      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a21      	ldr	r2, [pc, #132]	; (800b69c <I2C_DMAError+0x20c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d023      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <I2C_DMAError+0x210>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d01d      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <I2C_DMAError+0x214>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d017      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a1b      	ldr	r2, [pc, #108]	; (800b6a8 <I2C_DMAError+0x218>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d011      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a19      	ldr	r2, [pc, #100]	; (800b6ac <I2C_DMAError+0x21c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d00b      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a17      	ldr	r2, [pc, #92]	; (800b6b0 <I2C_DMAError+0x220>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d005      	beq.n	800b662 <I2C_DMAError+0x1d2>
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a15      	ldr	r2, [pc, #84]	; (800b6b4 <I2C_DMAError+0x224>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d12a      	bne.n	800b6b8 <I2C_DMAError+0x228>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	bf0c      	ite	eq
 800b66e:	2301      	moveq	r3, #1
 800b670:	2300      	movne	r3, #0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	e029      	b.n	800b6ca <I2C_DMAError+0x23a>
 800b676:	bf00      	nop
 800b678:	40020010 	.word	0x40020010
 800b67c:	40020028 	.word	0x40020028
 800b680:	40020040 	.word	0x40020040
 800b684:	40020058 	.word	0x40020058
 800b688:	40020070 	.word	0x40020070
 800b68c:	40020088 	.word	0x40020088
 800b690:	400200a0 	.word	0x400200a0
 800b694:	400200b8 	.word	0x400200b8
 800b698:	40020410 	.word	0x40020410
 800b69c:	40020428 	.word	0x40020428
 800b6a0:	40020440 	.word	0x40020440
 800b6a4:	40020458 	.word	0x40020458
 800b6a8:	40020470 	.word	0x40020470
 800b6ac:	40020488 	.word	0x40020488
 800b6b0:	400204a0 	.word	0x400204a0
 800b6b4:	400204b8 	.word	0x400204b8
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bf0c      	ite	eq
 800b6c4:	2301      	moveq	r3, #1
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7fd f8ca 	bl	800886c <HAL_DMA_GetError>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d00e      	beq.n	800b6fc <I2C_DMAError+0x26c>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00b      	beq.n	800b6fc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6f2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b6f4:	2110      	movs	r1, #16
 800b6f6:	68b8      	ldr	r0, [r7, #8]
 800b6f8:	f7ff fcf8 	bl	800b0ec <I2C_ITError>
  }
}
 800b6fc:	bf00      	nop
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b710:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	2200      	movs	r2, #0
 800b720:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72e:	2200      	movs	r2, #0
 800b730:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff fdca 	bl	800b2cc <I2C_TreatErrorCallback>
}
 800b738:	bf00      	nop
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	607b      	str	r3, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	817b      	strh	r3, [r7, #10]
 800b74e:	4613      	mov	r3, r2
 800b750:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b752:	897b      	ldrh	r3, [r7, #10]
 800b754:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b758:	7a7b      	ldrb	r3, [r7, #9]
 800b75a:	041b      	lsls	r3, r3, #16
 800b75c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b760:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	4313      	orrs	r3, r2
 800b76a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b76e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	0d5b      	lsrs	r3, r3, #21
 800b77a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b77e:	4b08      	ldr	r3, [pc, #32]	; (800b7a0 <I2C_TransferConfig+0x60>)
 800b780:	430b      	orrs	r3, r1
 800b782:	43db      	mvns	r3, r3
 800b784:	ea02 0103 	and.w	r1, r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	430a      	orrs	r2, r1
 800b790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b792:	bf00      	nop
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	03ff63ff 	.word	0x03ff63ff

0800b7a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b8:	4a39      	ldr	r2, [pc, #228]	; (800b8a0 <I2C_Enable_IRQ+0xfc>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d032      	beq.n	800b824 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b7c2:	4a38      	ldr	r2, [pc, #224]	; (800b8a4 <I2C_Enable_IRQ+0x100>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d02d      	beq.n	800b824 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b7cc:	4a36      	ldr	r2, [pc, #216]	; (800b8a8 <I2C_Enable_IRQ+0x104>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d028      	beq.n	800b824 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b7d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da03      	bge.n	800b7e2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b7e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b7e2:	887b      	ldrh	r3, [r7, #2]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b7f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b7f4:	887b      	ldrh	r3, [r7, #2]
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b804:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b806:	887b      	ldrh	r3, [r7, #2]
 800b808:	2b10      	cmp	r3, #16
 800b80a:	d103      	bne.n	800b814 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b812:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b814:	887b      	ldrh	r3, [r7, #2]
 800b816:	2b20      	cmp	r3, #32
 800b818:	d133      	bne.n	800b882 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f043 0320 	orr.w	r3, r3, #32
 800b820:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b822:	e02e      	b.n	800b882 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	da03      	bge.n	800b834 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b832:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b834:	887b      	ldrh	r3, [r7, #2]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b844:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b846:	887b      	ldrh	r3, [r7, #2]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b856:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b858:	887b      	ldrh	r3, [r7, #2]
 800b85a:	2b10      	cmp	r3, #16
 800b85c:	d103      	bne.n	800b866 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b864:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b866:	887b      	ldrh	r3, [r7, #2]
 800b868:	2b20      	cmp	r3, #32
 800b86a:	d103      	bne.n	800b874 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b872:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b874:	887b      	ldrh	r3, [r7, #2]
 800b876:	2b40      	cmp	r3, #64	; 0x40
 800b878:	d103      	bne.n	800b882 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b880:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6819      	ldr	r1, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	430a      	orrs	r2, r1
 800b890:	601a      	str	r2, [r3, #0]
}
 800b892:	bf00      	nop
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	08009fab 	.word	0x08009fab
 800b8a4:	0800a3f1 	.word	0x0800a3f1
 800b8a8:	0800a191 	.word	0x0800a191

0800b8ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b8bc:	887b      	ldrh	r3, [r7, #2]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00f      	beq.n	800b8e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b8cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b8da:	2b28      	cmp	r3, #40	; 0x28
 800b8dc:	d003      	beq.n	800b8e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b8e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b8e6:	887b      	ldrh	r3, [r7, #2]
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00f      	beq.n	800b910 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b8f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b904:	2b28      	cmp	r3, #40	; 0x28
 800b906:	d003      	beq.n	800b910 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b90e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b914:	2b00      	cmp	r3, #0
 800b916:	da03      	bge.n	800b920 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b91e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b920:	887b      	ldrh	r3, [r7, #2]
 800b922:	2b10      	cmp	r3, #16
 800b924:	d103      	bne.n	800b92e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b92c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b92e:	887b      	ldrh	r3, [r7, #2]
 800b930:	2b20      	cmp	r3, #32
 800b932:	d103      	bne.n	800b93c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f043 0320 	orr.w	r3, r3, #32
 800b93a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b93c:	887b      	ldrh	r3, [r7, #2]
 800b93e:	2b40      	cmp	r3, #64	; 0x40
 800b940:	d103      	bne.n	800b94a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b948:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6819      	ldr	r1, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	43da      	mvns	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	400a      	ands	r2, r1
 800b95a:	601a      	str	r2, [r3, #0]
}
 800b95c:	bf00      	nop
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b20      	cmp	r3, #32
 800b97c:	d138      	bne.n	800b9f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b984:	2b01      	cmp	r3, #1
 800b986:	d101      	bne.n	800b98c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b988:	2302      	movs	r3, #2
 800b98a:	e032      	b.n	800b9f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2224      	movs	r2, #36	; 0x24
 800b998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f022 0201 	bic.w	r2, r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6819      	ldr	r1, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f042 0201 	orr.w	r2, r2, #1
 800b9da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	e000      	b.n	800b9f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9f0:	2302      	movs	r3, #2
  }
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d139      	bne.n	800ba88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d101      	bne.n	800ba22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba1e:	2302      	movs	r3, #2
 800ba20:	e033      	b.n	800ba8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2224      	movs	r2, #36	; 0x24
 800ba2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 0201 	bic.w	r2, r2, #1
 800ba40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f042 0201 	orr.w	r2, r2, #1
 800ba72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	e000      	b.n	800ba8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ba88:	2302      	movs	r3, #2
  }
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
	...

0800ba98 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800baa0:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800baa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baa6:	4a0c      	ldr	r2, [pc, #48]	; (800bad8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800baa8:	f043 0302 	orr.w	r3, r3, #2
 800baac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bab0:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800bab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800babe:	4b07      	ldr	r3, [pc, #28]	; (800badc <HAL_I2CEx_EnableFastModePlus+0x44>)
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	4906      	ldr	r1, [pc, #24]	; (800badc <HAL_I2CEx_EnableFastModePlus+0x44>)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	604b      	str	r3, [r1, #4]
}
 800baca:	bf00      	nop
 800bacc:	3714      	adds	r7, #20
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	58024400 	.word	0x58024400
 800badc:	58000400 	.word	0x58000400

0800bae0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800baec:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <HAL_PWR_EnterSTOPMode+0x70>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f023 0201 	bic.w	r2, r3, #1
 800baf4:	4916      	ldr	r1, [pc, #88]	; (800bb50 <HAL_PWR_EnterSTOPMode+0x70>)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800bafc:	4b14      	ldr	r3, [pc, #80]	; (800bb50 <HAL_PWR_EnterSTOPMode+0x70>)
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb02:	f023 0305 	bic.w	r3, r3, #5
 800bb06:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800bb08:	4b11      	ldr	r3, [pc, #68]	; (800bb50 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	4a10      	ldr	r2, [pc, #64]	; (800bb50 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb0e:	f023 0302 	bic.w	r3, r3, #2
 800bb12:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800bb14:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	4a0e      	ldr	r2, [pc, #56]	; (800bb54 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb1a:	f043 0304 	orr.w	r3, r3, #4
 800bb1e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb20:	f3bf 8f4f 	dsb	sy
}
 800bb24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb26:	f3bf 8f6f 	isb	sy
}
 800bb2a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d101      	bne.n	800bb36 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800bb32:	bf30      	wfi
 800bb34:	e000      	b.n	800bb38 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800bb36:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800bb38:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	4a05      	ldr	r2, [pc, #20]	; (800bb54 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb3e:	f023 0304 	bic.w	r3, r3, #4
 800bb42:	6113      	str	r3, [r2, #16]
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	58024800 	.word	0x58024800
 800bb54:	e000ed00 	.word	0xe000ed00

0800bb58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bb60:	4b19      	ldr	r3, [pc, #100]	; (800bbc8 <HAL_PWREx_ConfigSupply+0x70>)
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f003 0304 	and.w	r3, r3, #4
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d00a      	beq.n	800bb82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bb6c:	4b16      	ldr	r3, [pc, #88]	; (800bbc8 <HAL_PWREx_ConfigSupply+0x70>)
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d001      	beq.n	800bb7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e01f      	b.n	800bbbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e01d      	b.n	800bbbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bb82:	4b11      	ldr	r3, [pc, #68]	; (800bbc8 <HAL_PWREx_ConfigSupply+0x70>)
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	f023 0207 	bic.w	r2, r3, #7
 800bb8a:	490f      	ldr	r1, [pc, #60]	; (800bbc8 <HAL_PWREx_ConfigSupply+0x70>)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bb92:	f7f8 fae1 	bl	8004158 <HAL_GetTick>
 800bb96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bb98:	e009      	b.n	800bbae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bb9a:	f7f8 fadd 	bl	8004158 <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bba8:	d901      	bls.n	800bbae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e007      	b.n	800bbbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bbae:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <HAL_PWREx_ConfigSupply+0x70>)
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbba:	d1ee      	bne.n	800bb9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	58024800 	.word	0x58024800

0800bbcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08c      	sub	sp, #48	; 0x30
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d102      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	f000 bc48 	b.w	800c470 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 8088 	beq.w	800bcfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbee:	4b99      	ldr	r3, [pc, #612]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bbf8:	4b96      	ldr	r3, [pc, #600]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	2b10      	cmp	r3, #16
 800bc02:	d007      	beq.n	800bc14 <HAL_RCC_OscConfig+0x48>
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	2b18      	cmp	r3, #24
 800bc08:	d111      	bne.n	800bc2e <HAL_RCC_OscConfig+0x62>
 800bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0c:	f003 0303 	and.w	r3, r3, #3
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d10c      	bne.n	800bc2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc14:	4b8f      	ldr	r3, [pc, #572]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d06d      	beq.n	800bcfc <HAL_RCC_OscConfig+0x130>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d169      	bne.n	800bcfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	f000 bc21 	b.w	800c470 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc36:	d106      	bne.n	800bc46 <HAL_RCC_OscConfig+0x7a>
 800bc38:	4b86      	ldr	r3, [pc, #536]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a85      	ldr	r2, [pc, #532]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	e02e      	b.n	800bca4 <HAL_RCC_OscConfig+0xd8>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10c      	bne.n	800bc68 <HAL_RCC_OscConfig+0x9c>
 800bc4e:	4b81      	ldr	r3, [pc, #516]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a80      	ldr	r2, [pc, #512]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	4b7e      	ldr	r3, [pc, #504]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a7d      	ldr	r2, [pc, #500]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	e01d      	b.n	800bca4 <HAL_RCC_OscConfig+0xd8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc70:	d10c      	bne.n	800bc8c <HAL_RCC_OscConfig+0xc0>
 800bc72:	4b78      	ldr	r3, [pc, #480]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a77      	ldr	r2, [pc, #476]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	4b75      	ldr	r3, [pc, #468]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a74      	ldr	r2, [pc, #464]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	e00b      	b.n	800bca4 <HAL_RCC_OscConfig+0xd8>
 800bc8c:	4b71      	ldr	r3, [pc, #452]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a70      	ldr	r2, [pc, #448]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	4b6e      	ldr	r3, [pc, #440]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a6d      	ldr	r2, [pc, #436]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bc9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d013      	beq.n	800bcd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcac:	f7f8 fa54 	bl	8004158 <HAL_GetTick>
 800bcb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcb2:	e008      	b.n	800bcc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcb4:	f7f8 fa50 	bl	8004158 <HAL_GetTick>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	2b64      	cmp	r3, #100	; 0x64
 800bcc0:	d901      	bls.n	800bcc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e3d4      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcc6:	4b63      	ldr	r3, [pc, #396]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0f0      	beq.n	800bcb4 <HAL_RCC_OscConfig+0xe8>
 800bcd2:	e014      	b.n	800bcfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd4:	f7f8 fa40 	bl	8004158 <HAL_GetTick>
 800bcd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bcda:	e008      	b.n	800bcee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcdc:	f7f8 fa3c 	bl	8004158 <HAL_GetTick>
 800bce0:	4602      	mov	r2, r0
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2b64      	cmp	r3, #100	; 0x64
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e3c0      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bcee:	4b59      	ldr	r3, [pc, #356]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f0      	bne.n	800bcdc <HAL_RCC_OscConfig+0x110>
 800bcfa:	e000      	b.n	800bcfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 0302 	and.w	r3, r3, #2
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 80ca 	beq.w	800bea0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd0c:	4b51      	ldr	r3, [pc, #324]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd16:	4b4f      	ldr	r3, [pc, #316]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d007      	beq.n	800bd32 <HAL_RCC_OscConfig+0x166>
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	2b18      	cmp	r3, #24
 800bd26:	d156      	bne.n	800bdd6 <HAL_RCC_OscConfig+0x20a>
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d151      	bne.n	800bdd6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd32:	4b48      	ldr	r3, [pc, #288]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d005      	beq.n	800bd4a <HAL_RCC_OscConfig+0x17e>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d101      	bne.n	800bd4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e392      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bd4a:	4b42      	ldr	r3, [pc, #264]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f023 0219 	bic.w	r2, r3, #25
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	493f      	ldr	r1, [pc, #252]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd5c:	f7f8 f9fc 	bl	8004158 <HAL_GetTick>
 800bd60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd62:	e008      	b.n	800bd76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd64:	f7f8 f9f8 	bl	8004158 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d901      	bls.n	800bd76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e37c      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd76:	4b37      	ldr	r3, [pc, #220]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0f0      	beq.n	800bd64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd82:	f7f8 f9f5 	bl	8004170 <HAL_GetREVID>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f241 0203 	movw	r2, #4099	; 0x1003
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d817      	bhi.n	800bdc0 <HAL_RCC_OscConfig+0x1f4>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b40      	cmp	r3, #64	; 0x40
 800bd96:	d108      	bne.n	800bdaa <HAL_RCC_OscConfig+0x1de>
 800bd98:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bda0:	4a2c      	ldr	r2, [pc, #176]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bda2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bda6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bda8:	e07a      	b.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdaa:	4b2a      	ldr	r3, [pc, #168]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	031b      	lsls	r3, r3, #12
 800bdb8:	4926      	ldr	r1, [pc, #152]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdbe:	e06f      	b.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdc0:	4b24      	ldr	r3, [pc, #144]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	061b      	lsls	r3, r3, #24
 800bdce:	4921      	ldr	r1, [pc, #132]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdd4:	e064      	b.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d047      	beq.n	800be6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bdde:	4b1d      	ldr	r3, [pc, #116]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f023 0219 	bic.w	r2, r3, #25
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	491a      	ldr	r1, [pc, #104]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdf0:	f7f8 f9b2 	bl	8004158 <HAL_GetTick>
 800bdf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdf6:	e008      	b.n	800be0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdf8:	f7f8 f9ae 	bl	8004158 <HAL_GetTick>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	2b02      	cmp	r3, #2
 800be04:	d901      	bls.n	800be0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e332      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be0a:	4b12      	ldr	r3, [pc, #72]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0f0      	beq.n	800bdf8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be16:	f7f8 f9ab 	bl	8004170 <HAL_GetREVID>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f241 0203 	movw	r2, #4099	; 0x1003
 800be20:	4293      	cmp	r3, r2
 800be22:	d819      	bhi.n	800be58 <HAL_RCC_OscConfig+0x28c>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	2b40      	cmp	r3, #64	; 0x40
 800be2a:	d108      	bne.n	800be3e <HAL_RCC_OscConfig+0x272>
 800be2c:	4b09      	ldr	r3, [pc, #36]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800be34:	4a07      	ldr	r2, [pc, #28]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800be36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be3a:	6053      	str	r3, [r2, #4]
 800be3c:	e030      	b.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	031b      	lsls	r3, r3, #12
 800be4c:	4901      	ldr	r1, [pc, #4]	; (800be54 <HAL_RCC_OscConfig+0x288>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	604b      	str	r3, [r1, #4]
 800be52:	e025      	b.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
 800be54:	58024400 	.word	0x58024400
 800be58:	4b9a      	ldr	r3, [pc, #616]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	061b      	lsls	r3, r3, #24
 800be66:	4997      	ldr	r1, [pc, #604]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	604b      	str	r3, [r1, #4]
 800be6c:	e018      	b.n	800bea0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be6e:	4b95      	ldr	r3, [pc, #596]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a94      	ldr	r2, [pc, #592]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800be74:	f023 0301 	bic.w	r3, r3, #1
 800be78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be7a:	f7f8 f96d 	bl	8004158 <HAL_GetTick>
 800be7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800be80:	e008      	b.n	800be94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be82:	f7f8 f969 	bl	8004158 <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d901      	bls.n	800be94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e2ed      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800be94:	4b8b      	ldr	r3, [pc, #556]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0304 	and.w	r3, r3, #4
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f0      	bne.n	800be82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 0310 	and.w	r3, r3, #16
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80a9 	beq.w	800c000 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800beae:	4b85      	ldr	r3, [pc, #532]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800beb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800beb8:	4b82      	ldr	r3, [pc, #520]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800beba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	2b08      	cmp	r3, #8
 800bec2:	d007      	beq.n	800bed4 <HAL_RCC_OscConfig+0x308>
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b18      	cmp	r3, #24
 800bec8:	d13a      	bne.n	800bf40 <HAL_RCC_OscConfig+0x374>
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f003 0303 	and.w	r3, r3, #3
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d135      	bne.n	800bf40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bed4:	4b7b      	ldr	r3, [pc, #492]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <HAL_RCC_OscConfig+0x320>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	2b80      	cmp	r3, #128	; 0x80
 800bee6:	d001      	beq.n	800beec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e2c1      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800beec:	f7f8 f940 	bl	8004170 <HAL_GetREVID>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f241 0203 	movw	r2, #4099	; 0x1003
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d817      	bhi.n	800bf2a <HAL_RCC_OscConfig+0x35e>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	2b20      	cmp	r3, #32
 800bf00:	d108      	bne.n	800bf14 <HAL_RCC_OscConfig+0x348>
 800bf02:	4b70      	ldr	r3, [pc, #448]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bf0a:	4a6e      	ldr	r2, [pc, #440]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf12:	e075      	b.n	800c000 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf14:	4b6b      	ldr	r3, [pc, #428]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	069b      	lsls	r3, r3, #26
 800bf22:	4968      	ldr	r1, [pc, #416]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf24:	4313      	orrs	r3, r2
 800bf26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf28:	e06a      	b.n	800c000 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf2a:	4b66      	ldr	r3, [pc, #408]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	061b      	lsls	r3, r3, #24
 800bf38:	4962      	ldr	r1, [pc, #392]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf3e:	e05f      	b.n	800c000 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	69db      	ldr	r3, [r3, #28]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d042      	beq.n	800bfce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bf48:	4b5e      	ldr	r3, [pc, #376]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a5d      	ldr	r2, [pc, #372]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf54:	f7f8 f900 	bl	8004158 <HAL_GetTick>
 800bf58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf5a:	e008      	b.n	800bf6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bf5c:	f7f8 f8fc 	bl	8004158 <HAL_GetTick>
 800bf60:	4602      	mov	r2, r0
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d901      	bls.n	800bf6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e280      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf6e:	4b55      	ldr	r3, [pc, #340]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0f0      	beq.n	800bf5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf7a:	f7f8 f8f9 	bl	8004170 <HAL_GetREVID>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f241 0203 	movw	r2, #4099	; 0x1003
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d817      	bhi.n	800bfb8 <HAL_RCC_OscConfig+0x3ec>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	2b20      	cmp	r3, #32
 800bf8e:	d108      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x3d6>
 800bf90:	4b4c      	ldr	r3, [pc, #304]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bf98:	4a4a      	ldr	r2, [pc, #296]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bf9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf9e:	6053      	str	r3, [r2, #4]
 800bfa0:	e02e      	b.n	800c000 <HAL_RCC_OscConfig+0x434>
 800bfa2:	4b48      	ldr	r3, [pc, #288]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	069b      	lsls	r3, r3, #26
 800bfb0:	4944      	ldr	r1, [pc, #272]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	604b      	str	r3, [r1, #4]
 800bfb6:	e023      	b.n	800c000 <HAL_RCC_OscConfig+0x434>
 800bfb8:	4b42      	ldr	r3, [pc, #264]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a1b      	ldr	r3, [r3, #32]
 800bfc4:	061b      	lsls	r3, r3, #24
 800bfc6:	493f      	ldr	r1, [pc, #252]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	60cb      	str	r3, [r1, #12]
 800bfcc:	e018      	b.n	800c000 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bfce:	4b3d      	ldr	r3, [pc, #244]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a3c      	ldr	r2, [pc, #240]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bfd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfda:	f7f8 f8bd 	bl	8004158 <HAL_GetTick>
 800bfde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bfe0:	e008      	b.n	800bff4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bfe2:	f7f8 f8b9 	bl	8004158 <HAL_GetTick>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d901      	bls.n	800bff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e23d      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bff4:	4b33      	ldr	r3, [pc, #204]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f0      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0308 	and.w	r3, r3, #8
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d036      	beq.n	800c07a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d019      	beq.n	800c048 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c014:	4b2b      	ldr	r3, [pc, #172]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c018:	4a2a      	ldr	r2, [pc, #168]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c01a:	f043 0301 	orr.w	r3, r3, #1
 800c01e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c020:	f7f8 f89a 	bl	8004158 <HAL_GetTick>
 800c024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c026:	e008      	b.n	800c03a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c028:	f7f8 f896 	bl	8004158 <HAL_GetTick>
 800c02c:	4602      	mov	r2, r0
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	2b02      	cmp	r3, #2
 800c034:	d901      	bls.n	800c03a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c036:	2303      	movs	r3, #3
 800c038:	e21a      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c03a:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c03e:	f003 0302 	and.w	r3, r3, #2
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0f0      	beq.n	800c028 <HAL_RCC_OscConfig+0x45c>
 800c046:	e018      	b.n	800c07a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c048:	4b1e      	ldr	r3, [pc, #120]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04c:	4a1d      	ldr	r2, [pc, #116]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c04e:	f023 0301 	bic.w	r3, r3, #1
 800c052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c054:	f7f8 f880 	bl	8004158 <HAL_GetTick>
 800c058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c05a:	e008      	b.n	800c06e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c05c:	f7f8 f87c 	bl	8004158 <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	2b02      	cmp	r3, #2
 800c068:	d901      	bls.n	800c06e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e200      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c06e:	4b15      	ldr	r3, [pc, #84]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f0      	bne.n	800c05c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d039      	beq.n	800c0fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d01c      	beq.n	800c0c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c08e:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a0c      	ldr	r2, [pc, #48]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c098:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c09a:	f7f8 f85d 	bl	8004158 <HAL_GetTick>
 800c09e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c0a0:	e008      	b.n	800c0b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0a2:	f7f8 f859 	bl	8004158 <HAL_GetTick>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d901      	bls.n	800c0b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e1dd      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c0b4:	4b03      	ldr	r3, [pc, #12]	; (800c0c4 <HAL_RCC_OscConfig+0x4f8>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0f0      	beq.n	800c0a2 <HAL_RCC_OscConfig+0x4d6>
 800c0c0:	e01b      	b.n	800c0fa <HAL_RCC_OscConfig+0x52e>
 800c0c2:	bf00      	nop
 800c0c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c0c8:	4b9b      	ldr	r3, [pc, #620]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a9a      	ldr	r2, [pc, #616]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c0ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c0d4:	f7f8 f840 	bl	8004158 <HAL_GetTick>
 800c0d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c0da:	e008      	b.n	800c0ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0dc:	f7f8 f83c 	bl	8004158 <HAL_GetTick>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d901      	bls.n	800c0ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e1c0      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c0ee:	4b92      	ldr	r3, [pc, #584]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1f0      	bne.n	800c0dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 8081 	beq.w	800c20a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c108:	4b8c      	ldr	r3, [pc, #560]	; (800c33c <HAL_RCC_OscConfig+0x770>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a8b      	ldr	r2, [pc, #556]	; (800c33c <HAL_RCC_OscConfig+0x770>)
 800c10e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c114:	f7f8 f820 	bl	8004158 <HAL_GetTick>
 800c118:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c11a:	e008      	b.n	800c12e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c11c:	f7f8 f81c 	bl	8004158 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b64      	cmp	r3, #100	; 0x64
 800c128:	d901      	bls.n	800c12e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e1a0      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c12e:	4b83      	ldr	r3, [pc, #524]	; (800c33c <HAL_RCC_OscConfig+0x770>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f0      	beq.n	800c11c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d106      	bne.n	800c150 <HAL_RCC_OscConfig+0x584>
 800c142:	4b7d      	ldr	r3, [pc, #500]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c146:	4a7c      	ldr	r2, [pc, #496]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c148:	f043 0301 	orr.w	r3, r3, #1
 800c14c:	6713      	str	r3, [r2, #112]	; 0x70
 800c14e:	e02d      	b.n	800c1ac <HAL_RCC_OscConfig+0x5e0>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10c      	bne.n	800c172 <HAL_RCC_OscConfig+0x5a6>
 800c158:	4b77      	ldr	r3, [pc, #476]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15c:	4a76      	ldr	r2, [pc, #472]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c15e:	f023 0301 	bic.w	r3, r3, #1
 800c162:	6713      	str	r3, [r2, #112]	; 0x70
 800c164:	4b74      	ldr	r3, [pc, #464]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c168:	4a73      	ldr	r2, [pc, #460]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c16a:	f023 0304 	bic.w	r3, r3, #4
 800c16e:	6713      	str	r3, [r2, #112]	; 0x70
 800c170:	e01c      	b.n	800c1ac <HAL_RCC_OscConfig+0x5e0>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	2b05      	cmp	r3, #5
 800c178:	d10c      	bne.n	800c194 <HAL_RCC_OscConfig+0x5c8>
 800c17a:	4b6f      	ldr	r3, [pc, #444]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c17e:	4a6e      	ldr	r2, [pc, #440]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c180:	f043 0304 	orr.w	r3, r3, #4
 800c184:	6713      	str	r3, [r2, #112]	; 0x70
 800c186:	4b6c      	ldr	r3, [pc, #432]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18a:	4a6b      	ldr	r2, [pc, #428]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c18c:	f043 0301 	orr.w	r3, r3, #1
 800c190:	6713      	str	r3, [r2, #112]	; 0x70
 800c192:	e00b      	b.n	800c1ac <HAL_RCC_OscConfig+0x5e0>
 800c194:	4b68      	ldr	r3, [pc, #416]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c198:	4a67      	ldr	r2, [pc, #412]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c19a:	f023 0301 	bic.w	r3, r3, #1
 800c19e:	6713      	str	r3, [r2, #112]	; 0x70
 800c1a0:	4b65      	ldr	r3, [pc, #404]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a4:	4a64      	ldr	r2, [pc, #400]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c1a6:	f023 0304 	bic.w	r3, r3, #4
 800c1aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d015      	beq.n	800c1e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1b4:	f7f7 ffd0 	bl	8004158 <HAL_GetTick>
 800c1b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1ba:	e00a      	b.n	800c1d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1bc:	f7f7 ffcc 	bl	8004158 <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d901      	bls.n	800c1d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e14e      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1d2:	4b59      	ldr	r3, [pc, #356]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d6:	f003 0302 	and.w	r3, r3, #2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0ee      	beq.n	800c1bc <HAL_RCC_OscConfig+0x5f0>
 800c1de:	e014      	b.n	800c20a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1e0:	f7f7 ffba 	bl	8004158 <HAL_GetTick>
 800c1e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c1e6:	e00a      	b.n	800c1fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1e8:	f7f7 ffb6 	bl	8004158 <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d901      	bls.n	800c1fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e138      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c1fe:	4b4e      	ldr	r3, [pc, #312]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c202:	f003 0302 	and.w	r3, r3, #2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1ee      	bne.n	800c1e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 812d 	beq.w	800c46e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c214:	4b48      	ldr	r3, [pc, #288]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c21c:	2b18      	cmp	r3, #24
 800c21e:	f000 80bd 	beq.w	800c39c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	2b02      	cmp	r3, #2
 800c228:	f040 809e 	bne.w	800c368 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c22c:	4b42      	ldr	r3, [pc, #264]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a41      	ldr	r2, [pc, #260]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c238:	f7f7 ff8e 	bl	8004158 <HAL_GetTick>
 800c23c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c23e:	e008      	b.n	800c252 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c240:	f7f7 ff8a 	bl	8004158 <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e10e      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c252:	4b39      	ldr	r3, [pc, #228]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1f0      	bne.n	800c240 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c25e:	4b36      	ldr	r3, [pc, #216]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c262:	4b37      	ldr	r3, [pc, #220]	; (800c340 <HAL_RCC_OscConfig+0x774>)
 800c264:	4013      	ands	r3, r2
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c26e:	0112      	lsls	r2, r2, #4
 800c270:	430a      	orrs	r2, r1
 800c272:	4931      	ldr	r1, [pc, #196]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c274:	4313      	orrs	r3, r2
 800c276:	628b      	str	r3, [r1, #40]	; 0x28
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27c:	3b01      	subs	r3, #1
 800c27e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c286:	3b01      	subs	r3, #1
 800c288:	025b      	lsls	r3, r3, #9
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	431a      	orrs	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c292:	3b01      	subs	r3, #1
 800c294:	041b      	lsls	r3, r3, #16
 800c296:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	061b      	lsls	r3, r3, #24
 800c2a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2a8:	4923      	ldr	r1, [pc, #140]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c2ae:	4b22      	ldr	r3, [pc, #136]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b2:	4a21      	ldr	r2, [pc, #132]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2b4:	f023 0301 	bic.w	r3, r3, #1
 800c2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c2ba:	4b1f      	ldr	r3, [pc, #124]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2be:	4b21      	ldr	r3, [pc, #132]	; (800c344 <HAL_RCC_OscConfig+0x778>)
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c2c6:	00d2      	lsls	r2, r2, #3
 800c2c8:	491b      	ldr	r1, [pc, #108]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c2ce:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d2:	f023 020c 	bic.w	r2, r3, #12
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	4917      	ldr	r1, [pc, #92]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c2e0:	4b15      	ldr	r3, [pc, #84]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	f023 0202 	bic.w	r2, r3, #2
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ec:	4912      	ldr	r1, [pc, #72]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c2f2:	4b11      	ldr	r3, [pc, #68]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f6:	4a10      	ldr	r2, [pc, #64]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c2f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2fe:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c302:	4a0d      	ldr	r2, [pc, #52]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c308:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c30a:	4b0b      	ldr	r3, [pc, #44]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	4a0a      	ldr	r2, [pc, #40]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c316:	4b08      	ldr	r3, [pc, #32]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31a:	4a07      	ldr	r2, [pc, #28]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c31c:	f043 0301 	orr.w	r3, r3, #1
 800c320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a04      	ldr	r2, [pc, #16]	; (800c338 <HAL_RCC_OscConfig+0x76c>)
 800c328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c32c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c32e:	f7f7 ff13 	bl	8004158 <HAL_GetTick>
 800c332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c334:	e011      	b.n	800c35a <HAL_RCC_OscConfig+0x78e>
 800c336:	bf00      	nop
 800c338:	58024400 	.word	0x58024400
 800c33c:	58024800 	.word	0x58024800
 800c340:	fffffc0c 	.word	0xfffffc0c
 800c344:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c348:	f7f7 ff06 	bl	8004158 <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	2b02      	cmp	r3, #2
 800c354:	d901      	bls.n	800c35a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	e08a      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c35a:	4b47      	ldr	r3, [pc, #284]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f0      	beq.n	800c348 <HAL_RCC_OscConfig+0x77c>
 800c366:	e082      	b.n	800c46e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c368:	4b43      	ldr	r3, [pc, #268]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a42      	ldr	r2, [pc, #264]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c36e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c374:	f7f7 fef0 	bl	8004158 <HAL_GetTick>
 800c378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c37a:	e008      	b.n	800c38e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c37c:	f7f7 feec 	bl	8004158 <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b02      	cmp	r3, #2
 800c388:	d901      	bls.n	800c38e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e070      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c38e:	4b3a      	ldr	r3, [pc, #232]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1f0      	bne.n	800c37c <HAL_RCC_OscConfig+0x7b0>
 800c39a:	e068      	b.n	800c46e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c39c:	4b36      	ldr	r3, [pc, #216]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c3a2:	4b35      	ldr	r3, [pc, #212]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d031      	beq.n	800c414 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f003 0203 	and.w	r2, r3, #3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d12a      	bne.n	800c414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	091b      	lsrs	r3, r3, #4
 800c3c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d122      	bne.n	800c414 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d11a      	bne.n	800c414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	0a5b      	lsrs	r3, r3, #9
 800c3e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d111      	bne.n	800c414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	0c1b      	lsrs	r3, r3, #16
 800c3f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d108      	bne.n	800c414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	0e1b      	lsrs	r3, r3, #24
 800c406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c410:	429a      	cmp	r2, r3
 800c412:	d001      	beq.n	800c418 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e02b      	b.n	800c470 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c418:	4b17      	ldr	r3, [pc, #92]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41c:	08db      	lsrs	r3, r3, #3
 800c41e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c422:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d01f      	beq.n	800c46e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	4a11      	ldr	r2, [pc, #68]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c434:	f023 0301 	bic.w	r3, r3, #1
 800c438:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c43a:	f7f7 fe8d 	bl	8004158 <HAL_GetTick>
 800c43e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c440:	bf00      	nop
 800c442:	f7f7 fe89 	bl	8004158 <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d0f9      	beq.n	800c442 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c44e:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c452:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <HAL_RCC_OscConfig+0x8b0>)
 800c454:	4013      	ands	r3, r2
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c45a:	00d2      	lsls	r2, r2, #3
 800c45c:	4906      	ldr	r1, [pc, #24]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c45e:	4313      	orrs	r3, r2
 800c460:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	4a04      	ldr	r2, [pc, #16]	; (800c478 <HAL_RCC_OscConfig+0x8ac>)
 800c468:	f043 0301 	orr.w	r3, r3, #1
 800c46c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3730      	adds	r7, #48	; 0x30
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	58024400 	.word	0x58024400
 800c47c:	ffff0007 	.word	0xffff0007

0800c480 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e19c      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c494:	4b8a      	ldr	r3, [pc, #552]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 030f 	and.w	r3, r3, #15
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d910      	bls.n	800c4c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4a2:	4b87      	ldr	r3, [pc, #540]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f023 020f 	bic.w	r2, r3, #15
 800c4aa:	4985      	ldr	r1, [pc, #532]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4b2:	4b83      	ldr	r3, [pc, #524]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d001      	beq.n	800c4c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e184      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 0304 	and.w	r3, r3, #4
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d010      	beq.n	800c4f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	691a      	ldr	r2, [r3, #16]
 800c4d4:	4b7b      	ldr	r3, [pc, #492]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d908      	bls.n	800c4f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c4e0:	4b78      	ldr	r3, [pc, #480]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	4975      	ldr	r1, [pc, #468]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 0308 	and.w	r3, r3, #8
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d010      	beq.n	800c520 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	695a      	ldr	r2, [r3, #20]
 800c502:	4b70      	ldr	r3, [pc, #448]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c504:	69db      	ldr	r3, [r3, #28]
 800c506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d908      	bls.n	800c520 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c50e:	4b6d      	ldr	r3, [pc, #436]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	496a      	ldr	r1, [pc, #424]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c51c:	4313      	orrs	r3, r2
 800c51e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 0310 	and.w	r3, r3, #16
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d010      	beq.n	800c54e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	699a      	ldr	r2, [r3, #24]
 800c530:	4b64      	ldr	r3, [pc, #400]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c538:	429a      	cmp	r2, r3
 800c53a:	d908      	bls.n	800c54e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c53c:	4b61      	ldr	r3, [pc, #388]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	495e      	ldr	r1, [pc, #376]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0320 	and.w	r3, r3, #32
 800c556:	2b00      	cmp	r3, #0
 800c558:	d010      	beq.n	800c57c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	69da      	ldr	r2, [r3, #28]
 800c55e:	4b59      	ldr	r3, [pc, #356]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c566:	429a      	cmp	r2, r3
 800c568:	d908      	bls.n	800c57c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c56a:	4b56      	ldr	r3, [pc, #344]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	4953      	ldr	r1, [pc, #332]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0302 	and.w	r3, r3, #2
 800c584:	2b00      	cmp	r3, #0
 800c586:	d010      	beq.n	800c5aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68da      	ldr	r2, [r3, #12]
 800c58c:	4b4d      	ldr	r3, [pc, #308]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	429a      	cmp	r2, r3
 800c596:	d908      	bls.n	800c5aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c598:	4b4a      	ldr	r3, [pc, #296]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	f023 020f 	bic.w	r2, r3, #15
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	4947      	ldr	r1, [pc, #284]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0301 	and.w	r3, r3, #1
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d055      	beq.n	800c662 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c5b6:	4b43      	ldr	r3, [pc, #268]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	4940      	ldr	r1, [pc, #256]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d107      	bne.n	800c5e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c5d0:	4b3c      	ldr	r3, [pc, #240]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d121      	bne.n	800c620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e0f6      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d107      	bne.n	800c5f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c5e8:	4b36      	ldr	r3, [pc, #216]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d115      	bne.n	800c620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e0ea      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d107      	bne.n	800c610 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c600:	4b30      	ldr	r3, [pc, #192]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d109      	bne.n	800c620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e0de      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c610:	4b2c      	ldr	r3, [pc, #176]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e0d6      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c620:	4b28      	ldr	r3, [pc, #160]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	f023 0207 	bic.w	r2, r3, #7
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	4925      	ldr	r1, [pc, #148]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c632:	f7f7 fd91 	bl	8004158 <HAL_GetTick>
 800c636:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c638:	e00a      	b.n	800c650 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c63a:	f7f7 fd8d 	bl	8004158 <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	f241 3288 	movw	r2, #5000	; 0x1388
 800c648:	4293      	cmp	r3, r2
 800c64a:	d901      	bls.n	800c650 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e0be      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c650:	4b1c      	ldr	r3, [pc, #112]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	429a      	cmp	r2, r3
 800c660:	d1eb      	bne.n	800c63a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d010      	beq.n	800c690 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68da      	ldr	r2, [r3, #12]
 800c672:	4b14      	ldr	r3, [pc, #80]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	f003 030f 	and.w	r3, r3, #15
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d208      	bcs.n	800c690 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c67e:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	f023 020f 	bic.w	r2, r3, #15
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	490e      	ldr	r1, [pc, #56]	; (800c6c4 <HAL_RCC_ClockConfig+0x244>)
 800c68c:	4313      	orrs	r3, r2
 800c68e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c690:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 030f 	and.w	r3, r3, #15
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d214      	bcs.n	800c6c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c69e:	4b08      	ldr	r3, [pc, #32]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f023 020f 	bic.w	r2, r3, #15
 800c6a6:	4906      	ldr	r1, [pc, #24]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ae:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <HAL_RCC_ClockConfig+0x240>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 030f 	and.w	r3, r3, #15
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d005      	beq.n	800c6c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e086      	b.n	800c7ce <HAL_RCC_ClockConfig+0x34e>
 800c6c0:	52002000 	.word	0x52002000
 800c6c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d010      	beq.n	800c6f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691a      	ldr	r2, [r3, #16]
 800c6d8:	4b3f      	ldr	r3, [pc, #252]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d208      	bcs.n	800c6f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c6e4:	4b3c      	ldr	r3, [pc, #240]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	4939      	ldr	r1, [pc, #228]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 0308 	and.w	r3, r3, #8
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d010      	beq.n	800c724 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695a      	ldr	r2, [r3, #20]
 800c706:	4b34      	ldr	r3, [pc, #208]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c708:	69db      	ldr	r3, [r3, #28]
 800c70a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c70e:	429a      	cmp	r2, r3
 800c710:	d208      	bcs.n	800c724 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c712:	4b31      	ldr	r3, [pc, #196]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	492e      	ldr	r1, [pc, #184]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c720:	4313      	orrs	r3, r2
 800c722:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0310 	and.w	r3, r3, #16
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d010      	beq.n	800c752 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	4b28      	ldr	r3, [pc, #160]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d208      	bcs.n	800c752 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c740:	4b25      	ldr	r3, [pc, #148]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	4922      	ldr	r1, [pc, #136]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c74e:	4313      	orrs	r3, r2
 800c750:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0320 	and.w	r3, r3, #32
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d010      	beq.n	800c780 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	69da      	ldr	r2, [r3, #28]
 800c762:	4b1d      	ldr	r3, [pc, #116]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d208      	bcs.n	800c780 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c76e:	4b1a      	ldr	r3, [pc, #104]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	69db      	ldr	r3, [r3, #28]
 800c77a:	4917      	ldr	r1, [pc, #92]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c77c:	4313      	orrs	r3, r2
 800c77e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c780:	f000 f834 	bl	800c7ec <HAL_RCC_GetSysClockFreq>
 800c784:	4602      	mov	r2, r0
 800c786:	4b14      	ldr	r3, [pc, #80]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	0a1b      	lsrs	r3, r3, #8
 800c78c:	f003 030f 	and.w	r3, r3, #15
 800c790:	4912      	ldr	r1, [pc, #72]	; (800c7dc <HAL_RCC_ClockConfig+0x35c>)
 800c792:	5ccb      	ldrb	r3, [r1, r3]
 800c794:	f003 031f 	and.w	r3, r3, #31
 800c798:	fa22 f303 	lsr.w	r3, r2, r3
 800c79c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c79e:	4b0e      	ldr	r3, [pc, #56]	; (800c7d8 <HAL_RCC_ClockConfig+0x358>)
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	f003 030f 	and.w	r3, r3, #15
 800c7a6:	4a0d      	ldr	r2, [pc, #52]	; (800c7dc <HAL_RCC_ClockConfig+0x35c>)
 800c7a8:	5cd3      	ldrb	r3, [r2, r3]
 800c7aa:	f003 031f 	and.w	r3, r3, #31
 800c7ae:	693a      	ldr	r2, [r7, #16]
 800c7b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7b4:	4a0a      	ldr	r2, [pc, #40]	; (800c7e0 <HAL_RCC_ClockConfig+0x360>)
 800c7b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c7b8:	4a0a      	ldr	r2, [pc, #40]	; (800c7e4 <HAL_RCC_ClockConfig+0x364>)
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c7be:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <HAL_RCC_ClockConfig+0x368>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7f6 fbbe 	bl	8002f44 <HAL_InitTick>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	58024400 	.word	0x58024400
 800c7dc:	08018eb4 	.word	0x08018eb4
 800c7e0:	24000088 	.word	0x24000088
 800c7e4:	24000084 	.word	0x24000084
 800c7e8:	2400008c 	.word	0x2400008c

0800c7ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b089      	sub	sp, #36	; 0x24
 800c7f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7f2:	4bb3      	ldr	r3, [pc, #716]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7fa:	2b18      	cmp	r3, #24
 800c7fc:	f200 8155 	bhi.w	800caaa <HAL_RCC_GetSysClockFreq+0x2be>
 800c800:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c806:	bf00      	nop
 800c808:	0800c86d 	.word	0x0800c86d
 800c80c:	0800caab 	.word	0x0800caab
 800c810:	0800caab 	.word	0x0800caab
 800c814:	0800caab 	.word	0x0800caab
 800c818:	0800caab 	.word	0x0800caab
 800c81c:	0800caab 	.word	0x0800caab
 800c820:	0800caab 	.word	0x0800caab
 800c824:	0800caab 	.word	0x0800caab
 800c828:	0800c893 	.word	0x0800c893
 800c82c:	0800caab 	.word	0x0800caab
 800c830:	0800caab 	.word	0x0800caab
 800c834:	0800caab 	.word	0x0800caab
 800c838:	0800caab 	.word	0x0800caab
 800c83c:	0800caab 	.word	0x0800caab
 800c840:	0800caab 	.word	0x0800caab
 800c844:	0800caab 	.word	0x0800caab
 800c848:	0800c899 	.word	0x0800c899
 800c84c:	0800caab 	.word	0x0800caab
 800c850:	0800caab 	.word	0x0800caab
 800c854:	0800caab 	.word	0x0800caab
 800c858:	0800caab 	.word	0x0800caab
 800c85c:	0800caab 	.word	0x0800caab
 800c860:	0800caab 	.word	0x0800caab
 800c864:	0800caab 	.word	0x0800caab
 800c868:	0800c89f 	.word	0x0800c89f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86c:	4b94      	ldr	r3, [pc, #592]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0320 	and.w	r3, r3, #32
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c878:	4b91      	ldr	r3, [pc, #580]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	08db      	lsrs	r3, r3, #3
 800c87e:	f003 0303 	and.w	r3, r3, #3
 800c882:	4a90      	ldr	r2, [pc, #576]	; (800cac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c884:	fa22 f303 	lsr.w	r3, r2, r3
 800c888:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c88a:	e111      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c88c:	4b8d      	ldr	r3, [pc, #564]	; (800cac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c88e:	61bb      	str	r3, [r7, #24]
      break;
 800c890:	e10e      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c892:	4b8d      	ldr	r3, [pc, #564]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c894:	61bb      	str	r3, [r7, #24]
      break;
 800c896:	e10b      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c898:	4b8c      	ldr	r3, [pc, #560]	; (800cacc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c89a:	61bb      	str	r3, [r7, #24]
      break;
 800c89c:	e108      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c89e:	4b88      	ldr	r3, [pc, #544]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a2:	f003 0303 	and.w	r3, r3, #3
 800c8a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c8a8:	4b85      	ldr	r3, [pc, #532]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ac:	091b      	lsrs	r3, r3, #4
 800c8ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c8b4:	4b82      	ldr	r3, [pc, #520]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c8be:	4b80      	ldr	r3, [pc, #512]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c2:	08db      	lsrs	r3, r3, #3
 800c8c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	fb02 f303 	mul.w	r3, r2, r3
 800c8ce:	ee07 3a90 	vmov	s15, r3
 800c8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 80e1 	beq.w	800caa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	f000 8083 	beq.w	800c9f0 <HAL_RCC_GetSysClockFreq+0x204>
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	f200 80a1 	bhi.w	800ca34 <HAL_RCC_GetSysClockFreq+0x248>
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <HAL_RCC_GetSysClockFreq+0x114>
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d056      	beq.n	800c9ac <HAL_RCC_GetSysClockFreq+0x1c0>
 800c8fe:	e099      	b.n	800ca34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c900:	4b6f      	ldr	r3, [pc, #444]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0320 	and.w	r3, r3, #32
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d02d      	beq.n	800c968 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c90c:	4b6c      	ldr	r3, [pc, #432]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	08db      	lsrs	r3, r3, #3
 800c912:	f003 0303 	and.w	r3, r3, #3
 800c916:	4a6b      	ldr	r2, [pc, #428]	; (800cac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c918:	fa22 f303 	lsr.w	r3, r2, r3
 800c91c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c936:	4b62      	ldr	r3, [pc, #392]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93e:	ee07 3a90 	vmov	s15, r3
 800c942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c946:	ed97 6a02 	vldr	s12, [r7, #8]
 800c94a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c962:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c966:	e087      	b.n	800ca78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	ee07 3a90 	vmov	s15, r3
 800c96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c972:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cad4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c97a:	4b51      	ldr	r3, [pc, #324]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c982:	ee07 3a90 	vmov	s15, r3
 800c986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c98a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c98e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c99a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c9aa:	e065      	b.n	800ca78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c9ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9be:	4b40      	ldr	r3, [pc, #256]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c6:	ee07 3a90 	vmov	s15, r3
 800c9ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c9ee:	e043      	b.n	800ca78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	ee07 3a90 	vmov	s15, r3
 800c9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cadc <HAL_RCC_GetSysClockFreq+0x2f0>
 800c9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca02:	4b2f      	ldr	r3, [pc, #188]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca12:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca32:	e021      	b.n	800ca78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca46:	4b1e      	ldr	r3, [pc, #120]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ca78:	4b11      	ldr	r3, [pc, #68]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7c:	0a5b      	lsrs	r3, r3, #9
 800ca7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca82:	3301      	adds	r3, #1
 800ca84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	ee07 3a90 	vmov	s15, r3
 800ca8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca9c:	ee17 3a90 	vmov	r3, s15
 800caa0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800caa2:	e005      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800caa4:	2300      	movs	r3, #0
 800caa6:	61bb      	str	r3, [r7, #24]
      break;
 800caa8:	e002      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800caac:	61bb      	str	r3, [r7, #24]
      break;
 800caae:	bf00      	nop
  }

  return sysclockfreq;
 800cab0:	69bb      	ldr	r3, [r7, #24]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3724      	adds	r7, #36	; 0x24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	58024400 	.word	0x58024400
 800cac4:	03d09000 	.word	0x03d09000
 800cac8:	003d0900 	.word	0x003d0900
 800cacc:	017d7840 	.word	0x017d7840
 800cad0:	46000000 	.word	0x46000000
 800cad4:	4c742400 	.word	0x4c742400
 800cad8:	4a742400 	.word	0x4a742400
 800cadc:	4bbebc20 	.word	0x4bbebc20

0800cae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cae6:	f7ff fe81 	bl	800c7ec <HAL_RCC_GetSysClockFreq>
 800caea:	4602      	mov	r2, r0
 800caec:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <HAL_RCC_GetHCLKFreq+0x50>)
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	0a1b      	lsrs	r3, r3, #8
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	490f      	ldr	r1, [pc, #60]	; (800cb34 <HAL_RCC_GetHCLKFreq+0x54>)
 800caf8:	5ccb      	ldrb	r3, [r1, r3]
 800cafa:	f003 031f 	and.w	r3, r3, #31
 800cafe:	fa22 f303 	lsr.w	r3, r2, r3
 800cb02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb04:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	f003 030f 	and.w	r3, r3, #15
 800cb0c:	4a09      	ldr	r2, [pc, #36]	; (800cb34 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb0e:	5cd3      	ldrb	r3, [r2, r3]
 800cb10:	f003 031f 	and.w	r3, r3, #31
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1a:	4a07      	ldr	r2, [pc, #28]	; (800cb38 <HAL_RCC_GetHCLKFreq+0x58>)
 800cb1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb1e:	4a07      	ldr	r2, [pc, #28]	; (800cb3c <HAL_RCC_GetHCLKFreq+0x5c>)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cb24:	4b04      	ldr	r3, [pc, #16]	; (800cb38 <HAL_RCC_GetHCLKFreq+0x58>)
 800cb26:	681b      	ldr	r3, [r3, #0]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	58024400 	.word	0x58024400
 800cb34:	08018eb4 	.word	0x08018eb4
 800cb38:	24000088 	.word	0x24000088
 800cb3c:	24000084 	.word	0x24000084

0800cb40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cb44:	f7ff ffcc 	bl	800cae0 <HAL_RCC_GetHCLKFreq>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	4b06      	ldr	r3, [pc, #24]	; (800cb64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb4c:	69db      	ldr	r3, [r3, #28]
 800cb4e:	091b      	lsrs	r3, r3, #4
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	4904      	ldr	r1, [pc, #16]	; (800cb68 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cb56:	5ccb      	ldrb	r3, [r1, r3]
 800cb58:	f003 031f 	and.w	r3, r3, #31
 800cb5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	58024400 	.word	0x58024400
 800cb68:	08018eb4 	.word	0x08018eb4

0800cb6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cb70:	f7ff ffb6 	bl	800cae0 <HAL_RCC_GetHCLKFreq>
 800cb74:	4602      	mov	r2, r0
 800cb76:	4b06      	ldr	r3, [pc, #24]	; (800cb90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	0a1b      	lsrs	r3, r3, #8
 800cb7c:	f003 0307 	and.w	r3, r3, #7
 800cb80:	4904      	ldr	r1, [pc, #16]	; (800cb94 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cb82:	5ccb      	ldrb	r3, [r1, r3]
 800cb84:	f003 031f 	and.w	r3, r3, #31
 800cb88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	58024400 	.word	0x58024400
 800cb94:	08018eb4 	.word	0x08018eb4

0800cb98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	223f      	movs	r2, #63	; 0x3f
 800cba6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cba8:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f003 0207 	and.w	r2, r3, #7
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800cbb4:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800cbc0:	4b14      	ldr	r3, [pc, #80]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	f003 020f 	and.w	r2, r3, #15
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800cbcc:	4b11      	ldr	r3, [pc, #68]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800cbd8:	4b0e      	ldr	r3, [pc, #56]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbda:	69db      	ldr	r3, [r3, #28]
 800cbdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800cbe4:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbe6:	69db      	ldr	r3, [r3, #28]
 800cbe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800cbf0:	4b08      	ldr	r3, [pc, #32]	; (800cc14 <HAL_RCC_GetClockConfig+0x7c>)
 800cbf2:	6a1b      	ldr	r3, [r3, #32]
 800cbf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cbfc:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <HAL_RCC_GetClockConfig+0x80>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 020f 	and.w	r2, r3, #15
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	601a      	str	r2, [r3, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	58024400 	.word	0x58024400
 800cc18:	52002000 	.word	0x52002000

0800cc1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc20:	b0ca      	sub	sp, #296	; 0x128
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800cc40:	2500      	movs	r5, #0
 800cc42:	ea54 0305 	orrs.w	r3, r4, r5
 800cc46:	d049      	beq.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc52:	d02f      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc58:	d828      	bhi.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc5e:	d01a      	beq.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc64:	d822      	bhi.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc6e:	d007      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc70:	e01c      	b.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc72:	4bb8      	ldr	r3, [pc, #736]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc76:	4ab7      	ldr	r2, [pc, #732]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc7e:	e01a      	b.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc84:	3308      	adds	r3, #8
 800cc86:	2102      	movs	r1, #2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f002 fb61 	bl	800f350 <RCCEx_PLL2_Config>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc94:	e00f      	b.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc9a:	3328      	adds	r3, #40	; 0x28
 800cc9c:	2102      	movs	r1, #2
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f002 fc08 	bl	800f4b4 <RCCEx_PLL3_Config>
 800cca4:	4603      	mov	r3, r0
 800cca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccaa:	e004      	b.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccb2:	e000      	b.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ccb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10a      	bne.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ccbe:	4ba5      	ldr	r3, [pc, #660]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ccc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cccc:	4aa1      	ldr	r2, [pc, #644]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccce:	430b      	orrs	r3, r1
 800ccd0:	6513      	str	r3, [r2, #80]	; 0x50
 800ccd2:	e003      	b.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ccdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800cce8:	f04f 0900 	mov.w	r9, #0
 800ccec:	ea58 0309 	orrs.w	r3, r8, r9
 800ccf0:	d047      	beq.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ccf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d82a      	bhi.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ccfc:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ccfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd02:	bf00      	nop
 800cd04:	0800cd19 	.word	0x0800cd19
 800cd08:	0800cd27 	.word	0x0800cd27
 800cd0c:	0800cd3d 	.word	0x0800cd3d
 800cd10:	0800cd5b 	.word	0x0800cd5b
 800cd14:	0800cd5b 	.word	0x0800cd5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd18:	4b8e      	ldr	r3, [pc, #568]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	4a8d      	ldr	r2, [pc, #564]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd24:	e01a      	b.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f002 fb0e 	bl	800f350 <RCCEx_PLL2_Config>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd3a:	e00f      	b.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd40:	3328      	adds	r3, #40	; 0x28
 800cd42:	2100      	movs	r1, #0
 800cd44:	4618      	mov	r0, r3
 800cd46:	f002 fbb5 	bl	800f4b4 <RCCEx_PLL3_Config>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd50:	e004      	b.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd58:	e000      	b.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10a      	bne.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd64:	4b7b      	ldr	r3, [pc, #492]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd68:	f023 0107 	bic.w	r1, r3, #7
 800cd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd72:	4a78      	ldr	r2, [pc, #480]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd74:	430b      	orrs	r3, r1
 800cd76:	6513      	str	r3, [r2, #80]	; 0x50
 800cd78:	e003      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800cd8e:	f04f 0b00 	mov.w	fp, #0
 800cd92:	ea5a 030b 	orrs.w	r3, sl, fp
 800cd96:	d04c      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cd98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda2:	d030      	beq.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda8:	d829      	bhi.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdaa:	2bc0      	cmp	r3, #192	; 0xc0
 800cdac:	d02d      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cdae:	2bc0      	cmp	r3, #192	; 0xc0
 800cdb0:	d825      	bhi.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdb2:	2b80      	cmp	r3, #128	; 0x80
 800cdb4:	d018      	beq.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cdb6:	2b80      	cmp	r3, #128	; 0x80
 800cdb8:	d821      	bhi.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cdbe:	2b40      	cmp	r3, #64	; 0x40
 800cdc0:	d007      	beq.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cdc2:	e01c      	b.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdc4:	4b63      	ldr	r3, [pc, #396]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc8:	4a62      	ldr	r2, [pc, #392]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdd0:	e01c      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4618      	mov	r0, r3
 800cddc:	f002 fab8 	bl	800f350 <RCCEx_PLL2_Config>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cde6:	e011      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdec:	3328      	adds	r3, #40	; 0x28
 800cdee:	2100      	movs	r1, #0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f002 fb5f 	bl	800f4b4 <RCCEx_PLL3_Config>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdfc:	e006      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce04:	e002      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ce06:	bf00      	nop
 800ce08:	e000      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ce0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ce14:	4b4f      	ldr	r3, [pc, #316]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ce1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce22:	4a4c      	ldr	r2, [pc, #304]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce24:	430b      	orrs	r3, r1
 800ce26:	6513      	str	r3, [r2, #80]	; 0x50
 800ce28:	e003      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ce32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ce3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ce42:	2300      	movs	r3, #0
 800ce44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ce48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	d053      	beq.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ce52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce5e:	d035      	beq.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ce60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce64:	d82e      	bhi.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce6a:	d031      	beq.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ce6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce70:	d828      	bhi.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce76:	d01a      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ce78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce7c:	d822      	bhi.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d003      	beq.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ce82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce86:	d007      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ce88:	e01c      	b.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce8a:	4b32      	ldr	r3, [pc, #200]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8e:	4a31      	ldr	r2, [pc, #196]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce96:	e01c      	b.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	2100      	movs	r1, #0
 800cea0:	4618      	mov	r0, r3
 800cea2:	f002 fa55 	bl	800f350 <RCCEx_PLL2_Config>
 800cea6:	4603      	mov	r3, r0
 800cea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ceac:	e011      	b.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ceae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceb2:	3328      	adds	r3, #40	; 0x28
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f002 fafc 	bl	800f4b4 <RCCEx_PLL3_Config>
 800cebc:	4603      	mov	r3, r0
 800cebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cec2:	e006      	b.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ceca:	e002      	b.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cecc:	bf00      	nop
 800cece:	e000      	b.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ced0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ced2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ceda:	4b1e      	ldr	r3, [pc, #120]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cedc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cede:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800cee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ceea:	4a1a      	ldr	r2, [pc, #104]	; (800cf54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ceec:	430b      	orrs	r3, r1
 800ceee:	6593      	str	r3, [r2, #88]	; 0x58
 800cef0:	e003      	b.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cf06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cf10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cf14:	460b      	mov	r3, r1
 800cf16:	4313      	orrs	r3, r2
 800cf18:	d056      	beq.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cf1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf26:	d038      	beq.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cf28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf2c:	d831      	bhi.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf32:	d034      	beq.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cf34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf38:	d82b      	bhi.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf3e:	d01d      	beq.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cf40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf44:	d825      	bhi.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d006      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cf4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf4e:	d00a      	beq.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cf50:	e01f      	b.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf52:	bf00      	nop
 800cf54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf58:	4ba2      	ldr	r3, [pc, #648]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5c:	4aa1      	ldr	r2, [pc, #644]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf64:	e01c      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f002 f9ee 	bl	800f350 <RCCEx_PLL2_Config>
 800cf74:	4603      	mov	r3, r0
 800cf76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cf7a:	e011      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf80:	3328      	adds	r3, #40	; 0x28
 800cf82:	2100      	movs	r1, #0
 800cf84:	4618      	mov	r0, r3
 800cf86:	f002 fa95 	bl	800f4b4 <RCCEx_PLL3_Config>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf90:	e006      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf98:	e002      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf9a:	bf00      	nop
 800cf9c:	e000      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10b      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cfa8:	4b8e      	ldr	r3, [pc, #568]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cfb8:	4a8a      	ldr	r2, [pc, #552]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfba:	430b      	orrs	r3, r1
 800cfbc:	6593      	str	r3, [r2, #88]	; 0x58
 800cfbe:	e003      	b.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cfd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cfde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	d03a      	beq.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfee:	2b30      	cmp	r3, #48	; 0x30
 800cff0:	d01f      	beq.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cff2:	2b30      	cmp	r3, #48	; 0x30
 800cff4:	d819      	bhi.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cff6:	2b20      	cmp	r3, #32
 800cff8:	d00c      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cffa:	2b20      	cmp	r3, #32
 800cffc:	d815      	bhi.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d019      	beq.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d002:	2b10      	cmp	r3, #16
 800d004:	d111      	bne.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d006:	4b77      	ldr	r3, [pc, #476]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00a:	4a76      	ldr	r2, [pc, #472]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d00c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d012:	e011      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d018:	3308      	adds	r3, #8
 800d01a:	2102      	movs	r1, #2
 800d01c:	4618      	mov	r0, r3
 800d01e:	f002 f997 	bl	800f350 <RCCEx_PLL2_Config>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d028:	e006      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d030:	e002      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d032:	bf00      	nop
 800d034:	e000      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d036:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d040:	4b68      	ldr	r3, [pc, #416]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d044:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d04e:	4a65      	ldr	r2, [pc, #404]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d050:	430b      	orrs	r3, r1
 800d052:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d054:	e003      	b.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d05a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d06a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d06e:	2300      	movs	r3, #0
 800d070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d074:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d078:	460b      	mov	r3, r1
 800d07a:	4313      	orrs	r3, r2
 800d07c:	d051      	beq.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d088:	d035      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d08a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d08e:	d82e      	bhi.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d090:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d094:	d031      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d09a:	d828      	bhi.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d09c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0a0:	d01a      	beq.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d0a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0a6:	d822      	bhi.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d003      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0b0:	d007      	beq.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d0b2:	e01c      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0b4:	4b4b      	ldr	r3, [pc, #300]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b8:	4a4a      	ldr	r2, [pc, #296]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0c0:	e01c      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f002 f940 	bl	800f350 <RCCEx_PLL2_Config>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0d6:	e011      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0dc:	3328      	adds	r3, #40	; 0x28
 800d0de:	2100      	movs	r1, #0
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f002 f9e7 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0ec:	e006      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d0f4:	e002      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0f6:	bf00      	nop
 800d0f8:	e000      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10a      	bne.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d104:	4b37      	ldr	r3, [pc, #220]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d108:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d112:	4a34      	ldr	r2, [pc, #208]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d114:	430b      	orrs	r3, r1
 800d116:	6513      	str	r3, [r2, #80]	; 0x50
 800d118:	e003      	b.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d11a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d11e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d12e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d132:	2300      	movs	r3, #0
 800d134:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d138:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d13c:	460b      	mov	r3, r1
 800d13e:	4313      	orrs	r3, r2
 800d140:	d056      	beq.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d14c:	d033      	beq.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d14e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d152:	d82c      	bhi.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d154:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d158:	d02f      	beq.n	800d1ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d15a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d15e:	d826      	bhi.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d160:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d164:	d02b      	beq.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d166:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d16a:	d820      	bhi.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d16c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d170:	d012      	beq.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d176:	d81a      	bhi.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d022      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d17c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d180:	d115      	bne.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d186:	3308      	adds	r3, #8
 800d188:	2101      	movs	r1, #1
 800d18a:	4618      	mov	r0, r3
 800d18c:	f002 f8e0 	bl	800f350 <RCCEx_PLL2_Config>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d196:	e015      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d19c:	3328      	adds	r3, #40	; 0x28
 800d19e:	2101      	movs	r1, #1
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f002 f987 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d1ac:	e00a      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1b4:	e006      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1b6:	bf00      	nop
 800d1b8:	e004      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1ba:	bf00      	nop
 800d1bc:	e002      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1be:	bf00      	nop
 800d1c0:	e000      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10d      	bne.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1da:	4a02      	ldr	r2, [pc, #8]	; (800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1dc:	430b      	orrs	r3, r1
 800d1de:	6513      	str	r3, [r2, #80]	; 0x50
 800d1e0:	e006      	b.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d1e2:	bf00      	nop
 800d1e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d1fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d200:	2300      	movs	r3, #0
 800d202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d206:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4313      	orrs	r3, r2
 800d20e:	d055      	beq.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d21c:	d033      	beq.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d21e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d222:	d82c      	bhi.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d228:	d02f      	beq.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d22e:	d826      	bhi.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d230:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d234:	d02b      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d23a:	d820      	bhi.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d23c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d240:	d012      	beq.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d246:	d81a      	bhi.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d022      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d24c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d250:	d115      	bne.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d256:	3308      	adds	r3, #8
 800d258:	2101      	movs	r1, #1
 800d25a:	4618      	mov	r0, r3
 800d25c:	f002 f878 	bl	800f350 <RCCEx_PLL2_Config>
 800d260:	4603      	mov	r3, r0
 800d262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d266:	e015      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d26c:	3328      	adds	r3, #40	; 0x28
 800d26e:	2101      	movs	r1, #1
 800d270:	4618      	mov	r0, r3
 800d272:	f002 f91f 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d276:	4603      	mov	r3, r0
 800d278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d27c:	e00a      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d284:	e006      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d286:	bf00      	nop
 800d288:	e004      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d28a:	bf00      	nop
 800d28c:	e002      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d28e:	bf00      	nop
 800d290:	e000      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d292:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10b      	bne.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d29c:	4ba3      	ldr	r3, [pc, #652]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2a0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d2ac:	4a9f      	ldr	r2, [pc, #636]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ae:	430b      	orrs	r3, r1
 800d2b0:	6593      	str	r3, [r2, #88]	; 0x58
 800d2b2:	e003      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d2c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d2d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	d037      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2e6:	d00e      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d2e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2ec:	d816      	bhi.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d018      	beq.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d2f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2f6:	d111      	bne.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2f8:	4b8c      	ldr	r3, [pc, #560]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	4a8b      	ldr	r2, [pc, #556]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d304:	e00f      	b.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d30a:	3308      	adds	r3, #8
 800d30c:	2101      	movs	r1, #1
 800d30e:	4618      	mov	r0, r3
 800d310:	f002 f81e 	bl	800f350 <RCCEx_PLL2_Config>
 800d314:	4603      	mov	r3, r0
 800d316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d31a:	e004      	b.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d322:	e000      	b.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10a      	bne.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d32e:	4b7f      	ldr	r3, [pc, #508]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d332:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33c:	4a7b      	ldr	r2, [pc, #492]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d33e:	430b      	orrs	r3, r1
 800d340:	6513      	str	r3, [r2, #80]	; 0x50
 800d342:	e003      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d35c:	2300      	movs	r3, #0
 800d35e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d362:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d366:	460b      	mov	r3, r1
 800d368:	4313      	orrs	r3, r2
 800d36a:	d039      	beq.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d372:	2b03      	cmp	r3, #3
 800d374:	d81c      	bhi.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d376:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d3b9 	.word	0x0800d3b9
 800d380:	0800d38d 	.word	0x0800d38d
 800d384:	0800d39b 	.word	0x0800d39b
 800d388:	0800d3b9 	.word	0x0800d3b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d38c:	4b67      	ldr	r3, [pc, #412]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d390:	4a66      	ldr	r2, [pc, #408]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d398:	e00f      	b.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d39e:	3308      	adds	r3, #8
 800d3a0:	2102      	movs	r1, #2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f001 ffd4 	bl	800f350 <RCCEx_PLL2_Config>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d3ae:	e004      	b.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d3b6:	e000      	b.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10a      	bne.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d3c2:	4b5a      	ldr	r3, [pc, #360]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3c6:	f023 0103 	bic.w	r1, r3, #3
 800d3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d0:	4a56      	ldr	r2, [pc, #344]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3d2:	430b      	orrs	r3, r1
 800d3d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d3d6:	e003      	b.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d3ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d3f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	f000 809f 	beq.w	800d540 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d402:	4b4b      	ldr	r3, [pc, #300]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a4a      	ldr	r2, [pc, #296]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d40c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d40e:	f7f6 fea3 	bl	8004158 <HAL_GetTick>
 800d412:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d416:	e00b      	b.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d418:	f7f6 fe9e 	bl	8004158 <HAL_GetTick>
 800d41c:	4602      	mov	r2, r0
 800d41e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	2b64      	cmp	r3, #100	; 0x64
 800d426:	d903      	bls.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d428:	2303      	movs	r3, #3
 800d42a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d42e:	e005      	b.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d430:	4b3f      	ldr	r3, [pc, #252]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d0ed      	beq.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d43c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d440:	2b00      	cmp	r3, #0
 800d442:	d179      	bne.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d444:	4b39      	ldr	r3, [pc, #228]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d44c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d450:	4053      	eors	r3, r2
 800d452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d456:	2b00      	cmp	r3, #0
 800d458:	d015      	beq.n	800d486 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d45a:	4b34      	ldr	r3, [pc, #208]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d466:	4b31      	ldr	r3, [pc, #196]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46a:	4a30      	ldr	r2, [pc, #192]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d46c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d470:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d472:	4b2e      	ldr	r3, [pc, #184]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d476:	4a2d      	ldr	r2, [pc, #180]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d47c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d47e:	4a2b      	ldr	r2, [pc, #172]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d484:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d48a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d492:	d118      	bne.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d494:	f7f6 fe60 	bl	8004158 <HAL_GetTick>
 800d498:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d49c:	e00d      	b.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d49e:	f7f6 fe5b 	bl	8004158 <HAL_GetTick>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d4a8:	1ad2      	subs	r2, r2, r3
 800d4aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d903      	bls.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d4b8:	e005      	b.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4ba:	4b1c      	ldr	r3, [pc, #112]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4be:	f003 0302 	and.w	r3, r3, #2
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0eb      	beq.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d129      	bne.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4de:	d10e      	bne.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d4e0:	4b12      	ldr	r3, [pc, #72]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4f0:	091a      	lsrs	r2, r3, #4
 800d4f2:	4b10      	ldr	r3, [pc, #64]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	4a0d      	ldr	r2, [pc, #52]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4f8:	430b      	orrs	r3, r1
 800d4fa:	6113      	str	r3, [r2, #16]
 800d4fc:	e005      	b.n	800d50a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d4fe:	4b0b      	ldr	r3, [pc, #44]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	4a0a      	ldr	r2, [pc, #40]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d504:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d508:	6113      	str	r3, [r2, #16]
 800d50a:	4b08      	ldr	r3, [pc, #32]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d50c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d512:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d51a:	4a04      	ldr	r2, [pc, #16]	; (800d52c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d51c:	430b      	orrs	r3, r1
 800d51e:	6713      	str	r3, [r2, #112]	; 0x70
 800d520:	e00e      	b.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d52a:	e009      	b.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d52c:	58024400 	.word	0x58024400
 800d530:	58024800 	.word	0x58024800
 800d534:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d53c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	f002 0301 	and.w	r3, r2, #1
 800d54c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d550:	2300      	movs	r3, #0
 800d552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d556:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d55a:	460b      	mov	r3, r1
 800d55c:	4313      	orrs	r3, r2
 800d55e:	f000 8089 	beq.w	800d674 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d568:	2b28      	cmp	r3, #40	; 0x28
 800d56a:	d86b      	bhi.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d56c:	a201      	add	r2, pc, #4	; (adr r2, 800d574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d572:	bf00      	nop
 800d574:	0800d64d 	.word	0x0800d64d
 800d578:	0800d645 	.word	0x0800d645
 800d57c:	0800d645 	.word	0x0800d645
 800d580:	0800d645 	.word	0x0800d645
 800d584:	0800d645 	.word	0x0800d645
 800d588:	0800d645 	.word	0x0800d645
 800d58c:	0800d645 	.word	0x0800d645
 800d590:	0800d645 	.word	0x0800d645
 800d594:	0800d619 	.word	0x0800d619
 800d598:	0800d645 	.word	0x0800d645
 800d59c:	0800d645 	.word	0x0800d645
 800d5a0:	0800d645 	.word	0x0800d645
 800d5a4:	0800d645 	.word	0x0800d645
 800d5a8:	0800d645 	.word	0x0800d645
 800d5ac:	0800d645 	.word	0x0800d645
 800d5b0:	0800d645 	.word	0x0800d645
 800d5b4:	0800d62f 	.word	0x0800d62f
 800d5b8:	0800d645 	.word	0x0800d645
 800d5bc:	0800d645 	.word	0x0800d645
 800d5c0:	0800d645 	.word	0x0800d645
 800d5c4:	0800d645 	.word	0x0800d645
 800d5c8:	0800d645 	.word	0x0800d645
 800d5cc:	0800d645 	.word	0x0800d645
 800d5d0:	0800d645 	.word	0x0800d645
 800d5d4:	0800d64d 	.word	0x0800d64d
 800d5d8:	0800d645 	.word	0x0800d645
 800d5dc:	0800d645 	.word	0x0800d645
 800d5e0:	0800d645 	.word	0x0800d645
 800d5e4:	0800d645 	.word	0x0800d645
 800d5e8:	0800d645 	.word	0x0800d645
 800d5ec:	0800d645 	.word	0x0800d645
 800d5f0:	0800d645 	.word	0x0800d645
 800d5f4:	0800d64d 	.word	0x0800d64d
 800d5f8:	0800d645 	.word	0x0800d645
 800d5fc:	0800d645 	.word	0x0800d645
 800d600:	0800d645 	.word	0x0800d645
 800d604:	0800d645 	.word	0x0800d645
 800d608:	0800d645 	.word	0x0800d645
 800d60c:	0800d645 	.word	0x0800d645
 800d610:	0800d645 	.word	0x0800d645
 800d614:	0800d64d 	.word	0x0800d64d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d61c:	3308      	adds	r3, #8
 800d61e:	2101      	movs	r1, #1
 800d620:	4618      	mov	r0, r3
 800d622:	f001 fe95 	bl	800f350 <RCCEx_PLL2_Config>
 800d626:	4603      	mov	r3, r0
 800d628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d62c:	e00f      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d632:	3328      	adds	r3, #40	; 0x28
 800d634:	2101      	movs	r1, #1
 800d636:	4618      	mov	r0, r3
 800d638:	f001 ff3c 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d63c:	4603      	mov	r3, r0
 800d63e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d642:	e004      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d64a:	e000      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d64e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10a      	bne.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d656:	4bbf      	ldr	r3, [pc, #764]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d65a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d664:	4abb      	ldr	r2, [pc, #748]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d666:	430b      	orrs	r3, r1
 800d668:	6553      	str	r3, [r2, #84]	; 0x54
 800d66a:	e003      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d66c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	f002 0302 	and.w	r3, r2, #2
 800d680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d684:	2300      	movs	r3, #0
 800d686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d68a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d68e:	460b      	mov	r3, r1
 800d690:	4313      	orrs	r3, r2
 800d692:	d041      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d69a:	2b05      	cmp	r3, #5
 800d69c:	d824      	bhi.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d69e:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a4:	0800d6f1 	.word	0x0800d6f1
 800d6a8:	0800d6bd 	.word	0x0800d6bd
 800d6ac:	0800d6d3 	.word	0x0800d6d3
 800d6b0:	0800d6f1 	.word	0x0800d6f1
 800d6b4:	0800d6f1 	.word	0x0800d6f1
 800d6b8:	0800d6f1 	.word	0x0800d6f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	2101      	movs	r1, #1
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f001 fe43 	bl	800f350 <RCCEx_PLL2_Config>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d6d0:	e00f      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6d6:	3328      	adds	r3, #40	; 0x28
 800d6d8:	2101      	movs	r1, #1
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f001 feea 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d6e6:	e004      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d6ee:	e000      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10a      	bne.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d6fa:	4b96      	ldr	r3, [pc, #600]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fe:	f023 0107 	bic.w	r1, r3, #7
 800d702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d708:	4a92      	ldr	r2, [pc, #584]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d70a:	430b      	orrs	r3, r1
 800d70c:	6553      	str	r3, [r2, #84]	; 0x54
 800d70e:	e003      	b.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f002 0304 	and.w	r3, r2, #4
 800d724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d728:	2300      	movs	r3, #0
 800d72a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d72e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d732:	460b      	mov	r3, r1
 800d734:	4313      	orrs	r3, r2
 800d736:	d044      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d73c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d740:	2b05      	cmp	r3, #5
 800d742:	d825      	bhi.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d744:	a201      	add	r2, pc, #4	; (adr r2, 800d74c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74a:	bf00      	nop
 800d74c:	0800d799 	.word	0x0800d799
 800d750:	0800d765 	.word	0x0800d765
 800d754:	0800d77b 	.word	0x0800d77b
 800d758:	0800d799 	.word	0x0800d799
 800d75c:	0800d799 	.word	0x0800d799
 800d760:	0800d799 	.word	0x0800d799
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d768:	3308      	adds	r3, #8
 800d76a:	2101      	movs	r1, #1
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 fdef 	bl	800f350 <RCCEx_PLL2_Config>
 800d772:	4603      	mov	r3, r0
 800d774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d778:	e00f      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d77e:	3328      	adds	r3, #40	; 0x28
 800d780:	2101      	movs	r1, #1
 800d782:	4618      	mov	r0, r3
 800d784:	f001 fe96 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d788:	4603      	mov	r3, r0
 800d78a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d78e:	e004      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d796:	e000      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10b      	bne.n	800d7ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d7a2:	4b6c      	ldr	r3, [pc, #432]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7a6:	f023 0107 	bic.w	r1, r3, #7
 800d7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7b2:	4a68      	ldr	r2, [pc, #416]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7b4:	430b      	orrs	r3, r1
 800d7b6:	6593      	str	r3, [r2, #88]	; 0x58
 800d7b8:	e003      	b.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ca:	f002 0320 	and.w	r3, r2, #32
 800d7ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d7d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	d055      	beq.n	800d88e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7ee:	d033      	beq.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d7f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7f4:	d82c      	bhi.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7fa:	d02f      	beq.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d800:	d826      	bhi.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d806:	d02b      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d80c:	d820      	bhi.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d812:	d012      	beq.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d818:	d81a      	bhi.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d022      	beq.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d81e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d822:	d115      	bne.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d828:	3308      	adds	r3, #8
 800d82a:	2100      	movs	r1, #0
 800d82c:	4618      	mov	r0, r3
 800d82e:	f001 fd8f 	bl	800f350 <RCCEx_PLL2_Config>
 800d832:	4603      	mov	r3, r0
 800d834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d838:	e015      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d83e:	3328      	adds	r3, #40	; 0x28
 800d840:	2102      	movs	r1, #2
 800d842:	4618      	mov	r0, r3
 800d844:	f001 fe36 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d848:	4603      	mov	r3, r0
 800d84a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d84e:	e00a      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d856:	e006      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d858:	bf00      	nop
 800d85a:	e004      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d85c:	bf00      	nop
 800d85e:	e002      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d860:	bf00      	nop
 800d862:	e000      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d864:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10b      	bne.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d86e:	4b39      	ldr	r3, [pc, #228]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d872:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d87e:	4a35      	ldr	r2, [pc, #212]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d880:	430b      	orrs	r3, r1
 800d882:	6553      	str	r3, [r2, #84]	; 0x54
 800d884:	e003      	b.n	800d88e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d88a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d89a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d8a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	d058      	beq.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d8ba:	d033      	beq.n	800d924 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d8bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d8c0:	d82c      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8c6:	d02f      	beq.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d8c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8cc:	d826      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8d2:	d02b      	beq.n	800d92c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d8d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8d8:	d820      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8de:	d012      	beq.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d8e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8e4:	d81a      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d022      	beq.n	800d930 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d8ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8ee:	d115      	bne.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f001 fd29 	bl	800f350 <RCCEx_PLL2_Config>
 800d8fe:	4603      	mov	r3, r0
 800d900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d904:	e015      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d90a:	3328      	adds	r3, #40	; 0x28
 800d90c:	2102      	movs	r1, #2
 800d90e:	4618      	mov	r0, r3
 800d910:	f001 fdd0 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d914:	4603      	mov	r3, r0
 800d916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d91a:	e00a      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d922:	e006      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d924:	bf00      	nop
 800d926:	e004      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d928:	bf00      	nop
 800d92a:	e002      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d92c:	bf00      	nop
 800d92e:	e000      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d930:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10e      	bne.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d93a:	4b06      	ldr	r3, [pc, #24]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d93e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d94a:	4a02      	ldr	r2, [pc, #8]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d94c:	430b      	orrs	r3, r1
 800d94e:	6593      	str	r3, [r2, #88]	; 0x58
 800d950:	e006      	b.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d952:	bf00      	nop
 800d954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d95c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d96c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d970:	2300      	movs	r3, #0
 800d972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d976:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d97a:	460b      	mov	r3, r1
 800d97c:	4313      	orrs	r3, r2
 800d97e:	d055      	beq.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d988:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d98c:	d033      	beq.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d98e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d992:	d82c      	bhi.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d998:	d02f      	beq.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d99a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d99e:	d826      	bhi.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d9a4:	d02b      	beq.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d9a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d9aa:	d820      	bhi.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9b0:	d012      	beq.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d9b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9b6:	d81a      	bhi.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d022      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d9bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9c0:	d115      	bne.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 fcc0 	bl	800f350 <RCCEx_PLL2_Config>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d9d6:	e015      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9dc:	3328      	adds	r3, #40	; 0x28
 800d9de:	2102      	movs	r1, #2
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f001 fd67 	bl	800f4b4 <RCCEx_PLL3_Config>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d9ec:	e00a      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9f4:	e006      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9f6:	bf00      	nop
 800d9f8:	e004      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9fa:	bf00      	nop
 800d9fc:	e002      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9fe:	bf00      	nop
 800da00:	e000      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800da02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10b      	bne.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800da0c:	4ba1      	ldr	r3, [pc, #644]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da10:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800da14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da1c:	4a9d      	ldr	r2, [pc, #628]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da1e:	430b      	orrs	r3, r1
 800da20:	6593      	str	r3, [r2, #88]	; 0x58
 800da22:	e003      	b.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800da2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f002 0308 	and.w	r3, r2, #8
 800da38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da3c:	2300      	movs	r3, #0
 800da3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800da46:	460b      	mov	r3, r1
 800da48:	4313      	orrs	r3, r2
 800da4a:	d01e      	beq.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800da4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da58:	d10c      	bne.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da5e:	3328      	adds	r3, #40	; 0x28
 800da60:	2102      	movs	r1, #2
 800da62:	4618      	mov	r0, r3
 800da64:	f001 fd26 	bl	800f4b4 <RCCEx_PLL3_Config>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800da74:	4b87      	ldr	r3, [pc, #540]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da84:	4a83      	ldr	r2, [pc, #524]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da86:	430b      	orrs	r3, r1
 800da88:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	f002 0310 	and.w	r3, r2, #16
 800da96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da9a:	2300      	movs	r3, #0
 800da9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800daa0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800daa4:	460b      	mov	r3, r1
 800daa6:	4313      	orrs	r3, r2
 800daa8:	d01e      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800daaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dab6:	d10c      	bne.n	800dad2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dabc:	3328      	adds	r3, #40	; 0x28
 800dabe:	2102      	movs	r1, #2
 800dac0:	4618      	mov	r0, r3
 800dac2:	f001 fcf7 	bl	800f4b4 <RCCEx_PLL3_Config>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dad2:	4b70      	ldr	r3, [pc, #448]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dad6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dae2:	4a6c      	ldr	r2, [pc, #432]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dae4:	430b      	orrs	r3, r1
 800dae6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800daf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800daf8:	2300      	movs	r3, #0
 800dafa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dafe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800db02:	460b      	mov	r3, r1
 800db04:	4313      	orrs	r3, r2
 800db06:	d03e      	beq.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800db08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800db10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db14:	d022      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800db16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db1a:	d81b      	bhi.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800db20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db24:	d00b      	beq.n	800db3e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800db26:	e015      	b.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db2c:	3308      	adds	r3, #8
 800db2e:	2100      	movs	r1, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f001 fc0d 	bl	800f350 <RCCEx_PLL2_Config>
 800db36:	4603      	mov	r3, r0
 800db38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db3c:	e00f      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db42:	3328      	adds	r3, #40	; 0x28
 800db44:	2102      	movs	r1, #2
 800db46:	4618      	mov	r0, r3
 800db48:	f001 fcb4 	bl	800f4b4 <RCCEx_PLL3_Config>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db52:	e004      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db5a:	e000      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800db5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10b      	bne.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db66:	4b4b      	ldr	r3, [pc, #300]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800db6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800db76:	4a47      	ldr	r2, [pc, #284]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db78:	430b      	orrs	r3, r1
 800db7a:	6593      	str	r3, [r2, #88]	; 0x58
 800db7c:	e003      	b.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800db86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800db92:	67bb      	str	r3, [r7, #120]	; 0x78
 800db94:	2300      	movs	r3, #0
 800db96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800db9c:	460b      	mov	r3, r1
 800db9e:	4313      	orrs	r3, r2
 800dba0:	d03b      	beq.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800dba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dbae:	d01f      	beq.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800dbb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dbb4:	d818      	bhi.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800dbb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbba:	d003      	beq.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800dbbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbc0:	d007      	beq.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800dbc2:	e011      	b.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbc4:	4b33      	ldr	r3, [pc, #204]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	4a32      	ldr	r2, [pc, #200]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dbd0:	e00f      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbd6:	3328      	adds	r3, #40	; 0x28
 800dbd8:	2101      	movs	r1, #1
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f001 fc6a 	bl	800f4b4 <RCCEx_PLL3_Config>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800dbe6:	e004      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbee:	e000      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800dbf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10b      	bne.n	800dc12 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dbfa:	4b26      	ldr	r3, [pc, #152]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbfe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc0a:	4a22      	ldr	r2, [pc, #136]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc0c:	430b      	orrs	r3, r1
 800dc0e:	6553      	str	r3, [r2, #84]	; 0x54
 800dc10:	e003      	b.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc22:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dc26:	673b      	str	r3, [r7, #112]	; 0x70
 800dc28:	2300      	movs	r3, #0
 800dc2a:	677b      	str	r3, [r7, #116]	; 0x74
 800dc2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dc30:	460b      	mov	r3, r1
 800dc32:	4313      	orrs	r3, r2
 800dc34:	d034      	beq.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc44:	d007      	beq.n	800dc56 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dc46:	e011      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc48:	4b12      	ldr	r3, [pc, #72]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	4a11      	ldr	r2, [pc, #68]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc54:	e00e      	b.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc5a:	3308      	adds	r3, #8
 800dc5c:	2102      	movs	r1, #2
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f001 fb76 	bl	800f350 <RCCEx_PLL2_Config>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc6a:	e003      	b.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10d      	bne.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dc7c:	4b05      	ldr	r3, [pc, #20]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc8a:	4a02      	ldr	r2, [pc, #8]	; (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc8c:	430b      	orrs	r3, r1
 800dc8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dc90:	e006      	b.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800dc92:	bf00      	nop
 800dc94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800dcac:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcae:	2300      	movs	r3, #0
 800dcb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	d00c      	beq.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcc0:	3328      	adds	r3, #40	; 0x28
 800dcc2:	2102      	movs	r1, #2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f001 fbf5 	bl	800f4b4 <RCCEx_PLL3_Config>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800dce2:	663b      	str	r3, [r7, #96]	; 0x60
 800dce4:	2300      	movs	r3, #0
 800dce6:	667b      	str	r3, [r7, #100]	; 0x64
 800dce8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800dcec:	460b      	mov	r3, r1
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	d038      	beq.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dcfe:	d018      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dd00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd04:	d811      	bhi.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dd06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd0a:	d014      	beq.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd10:	d80b      	bhi.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d011      	beq.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dd16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd1a:	d106      	bne.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd1c:	4bc3      	ldr	r3, [pc, #780]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd20:	4ac2      	ldr	r2, [pc, #776]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dd28:	e008      	b.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd30:	e004      	b.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd32:	bf00      	nop
 800dd34:	e002      	b.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd36:	bf00      	nop
 800dd38:	e000      	b.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10b      	bne.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dd44:	4bb9      	ldr	r3, [pc, #740]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd54:	4ab5      	ldr	r2, [pc, #724]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd56:	430b      	orrs	r3, r1
 800dd58:	6553      	str	r3, [r2, #84]	; 0x54
 800dd5a:	e003      	b.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dd70:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd72:	2300      	movs	r3, #0
 800dd74:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	d009      	beq.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dd80:	4baa      	ldr	r3, [pc, #680]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dd88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd8e:	4aa7      	ldr	r2, [pc, #668]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd90:	430b      	orrs	r3, r1
 800dd92:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800dda0:	653b      	str	r3, [r7, #80]	; 0x50
 800dda2:	2300      	movs	r3, #0
 800dda4:	657b      	str	r3, [r7, #84]	; 0x54
 800dda6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4313      	orrs	r3, r2
 800ddae:	d00a      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ddb0:	4b9e      	ldr	r3, [pc, #632]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ddb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ddc0:	4a9a      	ldr	r2, [pc, #616]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddc2:	430b      	orrs	r3, r1
 800ddc4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ddc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ddd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddd8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800dddc:	460b      	mov	r3, r1
 800ddde:	4313      	orrs	r3, r2
 800dde0:	d009      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dde2:	4b92      	ldr	r3, [pc, #584]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dde6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ddea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddf0:	4a8e      	ldr	r2, [pc, #568]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddf2:	430b      	orrs	r3, r1
 800ddf4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ddf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800de02:	643b      	str	r3, [r7, #64]	; 0x40
 800de04:	2300      	movs	r3, #0
 800de06:	647b      	str	r3, [r7, #68]	; 0x44
 800de08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800de0c:	460b      	mov	r3, r1
 800de0e:	4313      	orrs	r3, r2
 800de10:	d00e      	beq.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800de12:	4b86      	ldr	r3, [pc, #536]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	4a85      	ldr	r2, [pc, #532]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de1c:	6113      	str	r3, [r2, #16]
 800de1e:	4b83      	ldr	r3, [pc, #524]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de20:	6919      	ldr	r1, [r3, #16]
 800de22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800de2a:	4a80      	ldr	r2, [pc, #512]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de2c:	430b      	orrs	r3, r1
 800de2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800de30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800de3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800de3e:	2300      	movs	r3, #0
 800de40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800de46:	460b      	mov	r3, r1
 800de48:	4313      	orrs	r3, r2
 800de4a:	d009      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800de4c:	4b77      	ldr	r3, [pc, #476]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de50:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800de54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de5a:	4a74      	ldr	r2, [pc, #464]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de5c:	430b      	orrs	r3, r1
 800de5e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800de6c:	633b      	str	r3, [r7, #48]	; 0x30
 800de6e:	2300      	movs	r3, #0
 800de70:	637b      	str	r3, [r7, #52]	; 0x34
 800de72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800de76:	460b      	mov	r3, r1
 800de78:	4313      	orrs	r3, r2
 800de7a:	d00a      	beq.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de7c:	4b6b      	ldr	r3, [pc, #428]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de80:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800de84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de8c:	4a67      	ldr	r2, [pc, #412]	; (800e02c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de8e:	430b      	orrs	r3, r1
 800de90:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800de92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	2100      	movs	r1, #0
 800de9c:	62b9      	str	r1, [r7, #40]	; 0x28
 800de9e:	f003 0301 	and.w	r3, r3, #1
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dea4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dea8:	460b      	mov	r3, r1
 800deaa:	4313      	orrs	r3, r2
 800deac:	d011      	beq.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800deae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deb2:	3308      	adds	r3, #8
 800deb4:	2100      	movs	r1, #0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f001 fa4a 	bl	800f350 <RCCEx_PLL2_Config>
 800debc:	4603      	mov	r3, r0
 800debe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dece:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ded2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	2100      	movs	r1, #0
 800dedc:	6239      	str	r1, [r7, #32]
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
 800dee4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dee8:	460b      	mov	r3, r1
 800deea:	4313      	orrs	r3, r2
 800deec:	d011      	beq.n	800df12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800deee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800def2:	3308      	adds	r3, #8
 800def4:	2101      	movs	r1, #1
 800def6:	4618      	mov	r0, r3
 800def8:	f001 fa2a 	bl	800f350 <RCCEx_PLL2_Config>
 800defc:	4603      	mov	r3, r0
 800defe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df06:	2b00      	cmp	r3, #0
 800df08:	d003      	beq.n	800df12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800df12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	2100      	movs	r1, #0
 800df1c:	61b9      	str	r1, [r7, #24]
 800df1e:	f003 0304 	and.w	r3, r3, #4
 800df22:	61fb      	str	r3, [r7, #28]
 800df24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df28:	460b      	mov	r3, r1
 800df2a:	4313      	orrs	r3, r2
 800df2c:	d011      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df32:	3308      	adds	r3, #8
 800df34:	2102      	movs	r1, #2
 800df36:	4618      	mov	r0, r3
 800df38:	f001 fa0a 	bl	800f350 <RCCEx_PLL2_Config>
 800df3c:	4603      	mov	r3, r0
 800df3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df46:	2b00      	cmp	r3, #0
 800df48:	d003      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	2100      	movs	r1, #0
 800df5c:	6139      	str	r1, [r7, #16]
 800df5e:	f003 0308 	and.w	r3, r3, #8
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df68:	460b      	mov	r3, r1
 800df6a:	4313      	orrs	r3, r2
 800df6c:	d011      	beq.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df72:	3328      	adds	r3, #40	; 0x28
 800df74:	2100      	movs	r1, #0
 800df76:	4618      	mov	r0, r3
 800df78:	f001 fa9c 	bl	800f4b4 <RCCEx_PLL3_Config>
 800df7c:	4603      	mov	r3, r0
 800df7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800df82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800df92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	2100      	movs	r1, #0
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	f003 0310 	and.w	r3, r3, #16
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	d011      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dfae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfb2:	3328      	adds	r3, #40	; 0x28
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f001 fa7c 	bl	800f4b4 <RCCEx_PLL3_Config>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dfc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dfd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	2100      	movs	r1, #0
 800dfdc:	6039      	str	r1, [r7, #0]
 800dfde:	f003 0320 	and.w	r3, r3, #32
 800dfe2:	607b      	str	r3, [r7, #4]
 800dfe4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4313      	orrs	r3, r2
 800dfec:	d011      	beq.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dff2:	3328      	adds	r3, #40	; 0x28
 800dff4:	2102      	movs	r1, #2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f001 fa5c 	bl	800f4b4 <RCCEx_PLL3_Config>
 800dffc:	4603      	mov	r3, r0
 800dffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e006:	2b00      	cmp	r3, #0
 800e008:	d003      	beq.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e00a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e00e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800e012:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e01a:	2300      	movs	r3, #0
 800e01c:	e000      	b.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
}
 800e020:	4618      	mov	r0, r3
 800e022:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800e026:	46bd      	mov	sp, r7
 800e028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e02c:	58024400 	.word	0x58024400

0800e030 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b090      	sub	sp, #64	; 0x40
 800e034:	af00      	add	r7, sp, #0
 800e036:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e03a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e03e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e042:	430b      	orrs	r3, r1
 800e044:	f040 8094 	bne.w	800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e048:	4b9e      	ldr	r3, [pc, #632]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e04c:	f003 0307 	and.w	r3, r3, #7
 800e050:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e054:	2b04      	cmp	r3, #4
 800e056:	f200 8087 	bhi.w	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e05a:	a201      	add	r2, pc, #4	; (adr r2, 800e060 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e060:	0800e075 	.word	0x0800e075
 800e064:	0800e09d 	.word	0x0800e09d
 800e068:	0800e0c5 	.word	0x0800e0c5
 800e06c:	0800e161 	.word	0x0800e161
 800e070:	0800e0ed 	.word	0x0800e0ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e074:	4b93      	ldr	r3, [pc, #588]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e07c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e080:	d108      	bne.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e086:	4618      	mov	r0, r3
 800e088:	f001 f810 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e090:	f000 bd45 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e098:	f000 bd41 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e09c:	4b89      	ldr	r3, [pc, #548]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0a8:	d108      	bne.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0aa:	f107 0318 	add.w	r3, r7, #24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 fd54 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0b8:	f000 bd31 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c0:	f000 bd2d 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e0c4:	4b7f      	ldr	r3, [pc, #508]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0d0:	d108      	bne.n	800e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0d2:	f107 030c 	add.w	r3, r7, #12
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 fe94 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0e0:	f000 bd1d 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0e8:	f000 bd19 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e0ec:	4b75      	ldr	r3, [pc, #468]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e0f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e0f6:	4b73      	ldr	r3, [pc, #460]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f003 0304 	and.w	r3, r3, #4
 800e0fe:	2b04      	cmp	r3, #4
 800e100:	d10c      	bne.n	800e11c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e104:	2b00      	cmp	r3, #0
 800e106:	d109      	bne.n	800e11c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e108:	4b6e      	ldr	r3, [pc, #440]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	08db      	lsrs	r3, r3, #3
 800e10e:	f003 0303 	and.w	r3, r3, #3
 800e112:	4a6d      	ldr	r2, [pc, #436]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e114:	fa22 f303 	lsr.w	r3, r2, r3
 800e118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e11a:	e01f      	b.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e11c:	4b69      	ldr	r3, [pc, #420]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e128:	d106      	bne.n	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e130:	d102      	bne.n	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e132:	4b66      	ldr	r3, [pc, #408]	; (800e2cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e134:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e136:	e011      	b.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e138:	4b62      	ldr	r3, [pc, #392]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e144:	d106      	bne.n	800e154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e14c:	d102      	bne.n	800e154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e14e:	4b60      	ldr	r3, [pc, #384]	; (800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e150:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e152:	e003      	b.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e158:	f000 bce1 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e15c:	f000 bcdf 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e160:	4b5c      	ldr	r3, [pc, #368]	; (800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e164:	f000 bcdb 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e16c:	f000 bcd7 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e174:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e178:	430b      	orrs	r3, r1
 800e17a:	f040 80ad 	bne.w	800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e17e:	4b51      	ldr	r3, [pc, #324]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e182:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800e186:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e18e:	d056      	beq.n	800e23e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e196:	f200 8090 	bhi.w	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	2bc0      	cmp	r3, #192	; 0xc0
 800e19e:	f000 8088 	beq.w	800e2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	2bc0      	cmp	r3, #192	; 0xc0
 800e1a6:	f200 8088 	bhi.w	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	2b80      	cmp	r3, #128	; 0x80
 800e1ae:	d032      	beq.n	800e216 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	2b80      	cmp	r3, #128	; 0x80
 800e1b4:	f200 8081 	bhi.w	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	2b40      	cmp	r3, #64	; 0x40
 800e1c2:	d014      	beq.n	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e1c4:	e079      	b.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1c6:	4b3f      	ldr	r3, [pc, #252]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1d2:	d108      	bne.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 ff67 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1e2:	f000 bc9c 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ea:	f000 bc98 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1ee:	4b35      	ldr	r3, [pc, #212]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1fa:	d108      	bne.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1fc:	f107 0318 	add.w	r3, r7, #24
 800e200:	4618      	mov	r0, r3
 800e202:	f000 fcab 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e20a:	f000 bc88 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e212:	f000 bc84 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e216:	4b2b      	ldr	r3, [pc, #172]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e222:	d108      	bne.n	800e236 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e224:	f107 030c 	add.w	r3, r7, #12
 800e228:	4618      	mov	r0, r3
 800e22a:	f000 fdeb 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e232:	f000 bc74 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e23a:	f000 bc70 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e23e:	4b21      	ldr	r3, [pc, #132]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e246:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e248:	4b1e      	ldr	r3, [pc, #120]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b04      	cmp	r3, #4
 800e252:	d10c      	bne.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e256:	2b00      	cmp	r3, #0
 800e258:	d109      	bne.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e25a:	4b1a      	ldr	r3, [pc, #104]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	08db      	lsrs	r3, r3, #3
 800e260:	f003 0303 	and.w	r3, r3, #3
 800e264:	4a18      	ldr	r2, [pc, #96]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e266:	fa22 f303 	lsr.w	r3, r2, r3
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e26c:	e01f      	b.n	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e26e:	4b15      	ldr	r3, [pc, #84]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e27a:	d106      	bne.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e282:	d102      	bne.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e284:	4b11      	ldr	r3, [pc, #68]	; (800e2cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e288:	e011      	b.n	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e28a:	4b0e      	ldr	r3, [pc, #56]	; (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e296:	d106      	bne.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e29e:	d102      	bne.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2a4:	e003      	b.n	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e2aa:	f000 bc38 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2ae:	f000 bc36 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e2b2:	4b08      	ldr	r3, [pc, #32]	; (800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2b6:	f000 bc32 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2be:	f000 bc2e 	b.w	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2c2:	bf00      	nop
 800e2c4:	58024400 	.word	0x58024400
 800e2c8:	03d09000 	.word	0x03d09000
 800e2cc:	003d0900 	.word	0x003d0900
 800e2d0:	017d7840 	.word	0x017d7840
 800e2d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e2d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2dc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e2e0:	430b      	orrs	r3, r1
 800e2e2:	f040 809c 	bne.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e2e6:	4b9e      	ldr	r3, [pc, #632]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e2ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2f6:	d054      	beq.n	800e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2fe:	f200 808b 	bhi.w	800e418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e308:	f000 8083 	beq.w	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e312:	f200 8081 	bhi.w	800e418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e31c:	d02f      	beq.n	800e37e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e324:	d878      	bhi.n	800e418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e332:	d012      	beq.n	800e35a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e334:	e070      	b.n	800e418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e336:	4b8a      	ldr	r3, [pc, #552]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e33e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e342:	d107      	bne.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e348:	4618      	mov	r0, r3
 800e34a:	f000 feaf 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e352:	e3e4      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e358:	e3e1      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e35a:	4b81      	ldr	r3, [pc, #516]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e366:	d107      	bne.n	800e378 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e368:	f107 0318 	add.w	r3, r7, #24
 800e36c:	4618      	mov	r0, r3
 800e36e:	f000 fbf5 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e376:	e3d2      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e37c:	e3cf      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e37e:	4b78      	ldr	r3, [pc, #480]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e38a:	d107      	bne.n	800e39c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e38c:	f107 030c 	add.w	r3, r7, #12
 800e390:	4618      	mov	r0, r3
 800e392:	f000 fd37 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e39a:	e3c0      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3a0:	e3bd      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e3a2:	4b6f      	ldr	r3, [pc, #444]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e3aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e3ac:	4b6c      	ldr	r3, [pc, #432]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f003 0304 	and.w	r3, r3, #4
 800e3b4:	2b04      	cmp	r3, #4
 800e3b6:	d10c      	bne.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d109      	bne.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3be:	4b68      	ldr	r3, [pc, #416]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	08db      	lsrs	r3, r3, #3
 800e3c4:	f003 0303 	and.w	r3, r3, #3
 800e3c8:	4a66      	ldr	r2, [pc, #408]	; (800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3d0:	e01e      	b.n	800e410 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e3d2:	4b63      	ldr	r3, [pc, #396]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3de:	d106      	bne.n	800e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3e6:	d102      	bne.n	800e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e3e8:	4b5f      	ldr	r3, [pc, #380]	; (800e568 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3ec:	e010      	b.n	800e410 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3ee:	4b5c      	ldr	r3, [pc, #368]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3fa:	d106      	bne.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e402:	d102      	bne.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e404:	4b59      	ldr	r3, [pc, #356]	; (800e56c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e408:	e002      	b.n	800e410 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e40e:	e386      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e410:	e385      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e412:	4b57      	ldr	r3, [pc, #348]	; (800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e416:	e382      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e41c:	e37f      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e41e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e422:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e426:	430b      	orrs	r3, r1
 800e428:	f040 80a7 	bne.w	800e57a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e42c:	4b4c      	ldr	r3, [pc, #304]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e430:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e434:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e43c:	d055      	beq.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e444:	f200 8096 	bhi.w	800e574 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e44e:	f000 8084 	beq.w	800e55a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e458:	f200 808c 	bhi.w	800e574 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e462:	d030      	beq.n	800e4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e46a:	f200 8083 	bhi.w	800e574 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	2b00      	cmp	r3, #0
 800e472:	d004      	beq.n	800e47e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e476:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e47a:	d012      	beq.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e47c:	e07a      	b.n	800e574 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e47e:	4b38      	ldr	r3, [pc, #224]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e48a:	d107      	bne.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e48c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e490:	4618      	mov	r0, r3
 800e492:	f000 fe0b 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e49a:	e340      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4a0:	e33d      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4a2:	4b2f      	ldr	r3, [pc, #188]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4ae:	d107      	bne.n	800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4b0:	f107 0318 	add.w	r3, r7, #24
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f000 fb51 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4be:	e32e      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c4:	e32b      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4c6:	4b26      	ldr	r3, [pc, #152]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4d2:	d107      	bne.n	800e4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4d4:	f107 030c 	add.w	r3, r7, #12
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 fc93 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4e2:	e31c      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4e8:	e319      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4ea:	4b1d      	ldr	r3, [pc, #116]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e4f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4f4:	4b1a      	ldr	r3, [pc, #104]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f003 0304 	and.w	r3, r3, #4
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	d10c      	bne.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e502:	2b00      	cmp	r3, #0
 800e504:	d109      	bne.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e506:	4b16      	ldr	r3, [pc, #88]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	08db      	lsrs	r3, r3, #3
 800e50c:	f003 0303 	and.w	r3, r3, #3
 800e510:	4a14      	ldr	r2, [pc, #80]	; (800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e512:	fa22 f303 	lsr.w	r3, r2, r3
 800e516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e518:	e01e      	b.n	800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e51a:	4b11      	ldr	r3, [pc, #68]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e526:	d106      	bne.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e52a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e52e:	d102      	bne.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e530:	4b0d      	ldr	r3, [pc, #52]	; (800e568 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e534:	e010      	b.n	800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e536:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e542:	d106      	bne.n	800e552 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e54a:	d102      	bne.n	800e552 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e54c:	4b07      	ldr	r3, [pc, #28]	; (800e56c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e550:	e002      	b.n	800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e556:	e2e2      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e558:	e2e1      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e55a:	4b05      	ldr	r3, [pc, #20]	; (800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e55e:	e2de      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e560:	58024400 	.word	0x58024400
 800e564:	03d09000 	.word	0x03d09000
 800e568:	003d0900 	.word	0x003d0900
 800e56c:	017d7840 	.word	0x017d7840
 800e570:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e574:	2300      	movs	r3, #0
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e578:	e2d1      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e57a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e57e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e582:	430b      	orrs	r3, r1
 800e584:	f040 809c 	bne.w	800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e588:	4b93      	ldr	r3, [pc, #588]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e58c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e590:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e598:	d054      	beq.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5a0:	f200 808b 	bhi.w	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e5aa:	f000 8083 	beq.w	800e6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e5b4:	f200 8081 	bhi.w	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5be:	d02f      	beq.n	800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5c6:	d878      	bhi.n	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d004      	beq.n	800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5d4:	d012      	beq.n	800e5fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e5d6:	e070      	b.n	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e5d8:	4b7f      	ldr	r3, [pc, #508]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5e4:	d107      	bne.n	800e5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 fd5e 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5f4:	e293      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5fa:	e290      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5fc:	4b76      	ldr	r3, [pc, #472]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e608:	d107      	bne.n	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e60a:	f107 0318 	add.w	r3, r7, #24
 800e60e:	4618      	mov	r0, r3
 800e610:	f000 faa4 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e618:	e281      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e61e:	e27e      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e620:	4b6d      	ldr	r3, [pc, #436]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e62c:	d107      	bne.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e62e:	f107 030c 	add.w	r3, r7, #12
 800e632:	4618      	mov	r0, r3
 800e634:	f000 fbe6 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e63c:	e26f      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e642:	e26c      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e644:	4b64      	ldr	r3, [pc, #400]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e64c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e64e:	4b62      	ldr	r3, [pc, #392]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0304 	and.w	r3, r3, #4
 800e656:	2b04      	cmp	r3, #4
 800e658:	d10c      	bne.n	800e674 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d109      	bne.n	800e674 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e660:	4b5d      	ldr	r3, [pc, #372]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	08db      	lsrs	r3, r3, #3
 800e666:	f003 0303 	and.w	r3, r3, #3
 800e66a:	4a5c      	ldr	r2, [pc, #368]	; (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e66c:	fa22 f303 	lsr.w	r3, r2, r3
 800e670:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e672:	e01e      	b.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e674:	4b58      	ldr	r3, [pc, #352]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e67c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e680:	d106      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e688:	d102      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e68a:	4b55      	ldr	r3, [pc, #340]	; (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e68c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e68e:	e010      	b.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e690:	4b51      	ldr	r3, [pc, #324]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e69c:	d106      	bne.n	800e6ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6a4:	d102      	bne.n	800e6ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e6a6:	4b4f      	ldr	r3, [pc, #316]	; (800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6aa:	e002      	b.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e6b0:	e235      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e6b2:	e234      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e6b4:	4b4c      	ldr	r3, [pc, #304]	; (800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6b8:	e231      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6be:	e22e      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6c4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e6c8:	430b      	orrs	r3, r1
 800e6ca:	f040 808f 	bne.w	800e7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e6ce:	4b42      	ldr	r3, [pc, #264]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e6d6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6de:	d06b      	beq.n	800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6e6:	d874      	bhi.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e6ee:	d056      	beq.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e6f6:	d86c      	bhi.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e6fe:	d03b      	beq.n	800e778 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e706:	d864      	bhi.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e70e:	d021      	beq.n	800e754 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e716:	d85c      	bhi.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d004      	beq.n	800e728 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e724:	d004      	beq.n	800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e726:	e054      	b.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e728:	f7fe fa0a 	bl	800cb40 <HAL_RCC_GetPCLK1Freq>
 800e72c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e72e:	e1f6      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e730:	4b29      	ldr	r3, [pc, #164]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e73c:	d107      	bne.n	800e74e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e73e:	f107 0318 	add.w	r3, r7, #24
 800e742:	4618      	mov	r0, r3
 800e744:	f000 fa0a 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e74c:	e1e7      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e74e:	2300      	movs	r3, #0
 800e750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e752:	e1e4      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e754:	4b20      	ldr	r3, [pc, #128]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e760:	d107      	bne.n	800e772 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e762:	f107 030c 	add.w	r3, r7, #12
 800e766:	4618      	mov	r0, r3
 800e768:	f000 fb4c 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e770:	e1d5      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e776:	e1d2      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e778:	4b17      	ldr	r3, [pc, #92]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	2b04      	cmp	r3, #4
 800e782:	d109      	bne.n	800e798 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e784:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	08db      	lsrs	r3, r3, #3
 800e78a:	f003 0303 	and.w	r3, r3, #3
 800e78e:	4a13      	ldr	r2, [pc, #76]	; (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e790:	fa22 f303 	lsr.w	r3, r2, r3
 800e794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e796:	e1c2      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e79c:	e1bf      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e79e:	4b0e      	ldr	r3, [pc, #56]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7aa:	d102      	bne.n	800e7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e7ac:	4b0c      	ldr	r3, [pc, #48]	; (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7b0:	e1b5      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b6:	e1b2      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e7b8:	4b07      	ldr	r3, [pc, #28]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7c4:	d102      	bne.n	800e7cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e7c6:	4b07      	ldr	r3, [pc, #28]	; (800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7ca:	e1a8      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7d0:	e1a5      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7d6:	e1a2      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e7d8:	58024400 	.word	0x58024400
 800e7dc:	03d09000 	.word	0x03d09000
 800e7e0:	003d0900 	.word	0x003d0900
 800e7e4:	017d7840 	.word	0x017d7840
 800e7e8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e7ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7f0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e7f4:	430b      	orrs	r3, r1
 800e7f6:	d173      	bne.n	800e8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e7f8:	4b9c      	ldr	r3, [pc, #624]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e800:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e808:	d02f      	beq.n	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e810:	d863      	bhi.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e81e:	d012      	beq.n	800e846 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e820:	e05b      	b.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e822:	4b92      	ldr	r3, [pc, #584]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e82a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e82e:	d107      	bne.n	800e840 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e830:	f107 0318 	add.w	r3, r7, #24
 800e834:	4618      	mov	r0, r3
 800e836:	f000 f991 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e83e:	e16e      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e844:	e16b      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e846:	4b89      	ldr	r3, [pc, #548]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e84e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e852:	d107      	bne.n	800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e854:	f107 030c 	add.w	r3, r7, #12
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 fad3 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e862:	e15c      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e864:	2300      	movs	r3, #0
 800e866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e868:	e159      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e86a:	4b80      	ldr	r3, [pc, #512]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e86c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e86e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e872:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e874:	4b7d      	ldr	r3, [pc, #500]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f003 0304 	and.w	r3, r3, #4
 800e87c:	2b04      	cmp	r3, #4
 800e87e:	d10c      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e882:	2b00      	cmp	r3, #0
 800e884:	d109      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e886:	4b79      	ldr	r3, [pc, #484]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	08db      	lsrs	r3, r3, #3
 800e88c:	f003 0303 	and.w	r3, r3, #3
 800e890:	4a77      	ldr	r2, [pc, #476]	; (800ea70 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e892:	fa22 f303 	lsr.w	r3, r2, r3
 800e896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e898:	e01e      	b.n	800e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e89a:	4b74      	ldr	r3, [pc, #464]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8a6:	d106      	bne.n	800e8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8ae:	d102      	bne.n	800e8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e8b0:	4b70      	ldr	r3, [pc, #448]	; (800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8b4:	e010      	b.n	800e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e8b6:	4b6d      	ldr	r3, [pc, #436]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e8c2:	d106      	bne.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8ca:	d102      	bne.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e8cc:	4b6a      	ldr	r3, [pc, #424]	; (800ea78 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8d0:	e002      	b.n	800e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e8d6:	e122      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e8d8:	e121      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8de:	e11e      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8e4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e8e8:	430b      	orrs	r3, r1
 800e8ea:	d133      	bne.n	800e954 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e8ec:	4b5f      	ldr	r3, [pc, #380]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d004      	beq.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e902:	d012      	beq.n	800e92a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e904:	e023      	b.n	800e94e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e906:	4b59      	ldr	r3, [pc, #356]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e90e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e912:	d107      	bne.n	800e924 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 fbc7 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e922:	e0fc      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e924:	2300      	movs	r3, #0
 800e926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e928:	e0f9      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e92a:	4b50      	ldr	r3, [pc, #320]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e936:	d107      	bne.n	800e948 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e938:	f107 0318 	add.w	r3, r7, #24
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 f90d 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e946:	e0ea      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e948:	2300      	movs	r3, #0
 800e94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e94c:	e0e7      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e952:	e0e4      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e958:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e95c:	430b      	orrs	r3, r1
 800e95e:	f040 808d 	bne.w	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e962:	4b42      	ldr	r3, [pc, #264]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e966:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e96a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e972:	d06b      	beq.n	800ea4c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e97a:	d874      	bhi.n	800ea66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e982:	d056      	beq.n	800ea32 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e98a:	d86c      	bhi.n	800ea66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e992:	d03b      	beq.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e99a:	d864      	bhi.n	800ea66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9a2:	d021      	beq.n	800e9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9aa:	d85c      	bhi.n	800ea66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d004      	beq.n	800e9bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9b8:	d004      	beq.n	800e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e9ba:	e054      	b.n	800ea66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e9bc:	f000 f8b8 	bl	800eb30 <HAL_RCCEx_GetD3PCLK1Freq>
 800e9c0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9c2:	e0ac      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e9c4:	4b29      	ldr	r3, [pc, #164]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9d0:	d107      	bne.n	800e9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9d2:	f107 0318 	add.w	r3, r7, #24
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 f8c0 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9e0:	e09d      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e6:	e09a      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e9e8:	4b20      	ldr	r3, [pc, #128]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9f4:	d107      	bne.n	800ea06 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9f6:	f107 030c 	add.w	r3, r7, #12
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 fa02 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea04:	e08b      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea0a:	e088      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ea0c:	4b17      	ldr	r3, [pc, #92]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 0304 	and.w	r3, r3, #4
 800ea14:	2b04      	cmp	r3, #4
 800ea16:	d109      	bne.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea18:	4b14      	ldr	r3, [pc, #80]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	08db      	lsrs	r3, r3, #3
 800ea1e:	f003 0303 	and.w	r3, r3, #3
 800ea22:	4a13      	ldr	r2, [pc, #76]	; (800ea70 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ea24:	fa22 f303 	lsr.w	r3, r2, r3
 800ea28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea2a:	e078      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea30:	e075      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ea32:	4b0e      	ldr	r3, [pc, #56]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea3e:	d102      	bne.n	800ea46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ea40:	4b0c      	ldr	r3, [pc, #48]	; (800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ea42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea44:	e06b      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea4a:	e068      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea4c:	4b07      	ldr	r3, [pc, #28]	; (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea58:	d102      	bne.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ea5a:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ea5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea5e:	e05e      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea64:	e05b      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea6a:	e058      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ea6c:	58024400 	.word	0x58024400
 800ea70:	03d09000 	.word	0x03d09000
 800ea74:	003d0900 	.word	0x003d0900
 800ea78:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ea7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea80:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ea84:	430b      	orrs	r3, r1
 800ea86:	d148      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ea88:	4b27      	ldr	r3, [pc, #156]	; (800eb28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ea90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea98:	d02a      	beq.n	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eaa0:	d838      	bhi.n	800eb14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800eaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d004      	beq.n	800eab2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800eaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eaae:	d00d      	beq.n	800eacc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800eab0:	e030      	b.n	800eb14 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eab2:	4b1d      	ldr	r3, [pc, #116]	; (800eb28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eabe:	d102      	bne.n	800eac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800eac0:	4b1a      	ldr	r3, [pc, #104]	; (800eb2c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800eac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eac4:	e02b      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaca:	e028      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eacc:	4b16      	ldr	r3, [pc, #88]	; (800eb28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ead4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ead8:	d107      	bne.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 fae4 	bl	800f0ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eae8:	e019      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaee:	e016      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eaf0:	4b0d      	ldr	r3, [pc, #52]	; (800eb28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eaf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eafc:	d107      	bne.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eafe:	f107 0318 	add.w	r3, r7, #24
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 f82a 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb0c:	e007      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb12:	e004      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eb14:	2300      	movs	r3, #0
 800eb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb18:	e001      	b.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800eb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3740      	adds	r7, #64	; 0x40
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	58024400 	.word	0x58024400
 800eb2c:	017d7840 	.word	0x017d7840

0800eb30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eb34:	f7fd ffd4 	bl	800cae0 <HAL_RCC_GetHCLKFreq>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	4b06      	ldr	r3, [pc, #24]	; (800eb54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	091b      	lsrs	r3, r3, #4
 800eb40:	f003 0307 	and.w	r3, r3, #7
 800eb44:	4904      	ldr	r1, [pc, #16]	; (800eb58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eb46:	5ccb      	ldrb	r3, [r1, r3]
 800eb48:	f003 031f 	and.w	r3, r3, #31
 800eb4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	58024400 	.word	0x58024400
 800eb58:	08018eb4 	.word	0x08018eb4

0800eb5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b089      	sub	sp, #36	; 0x24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb64:	4ba1      	ldr	r3, [pc, #644]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb68:	f003 0303 	and.w	r3, r3, #3
 800eb6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eb6e:	4b9f      	ldr	r3, [pc, #636]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb72:	0b1b      	lsrs	r3, r3, #12
 800eb74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eb7a:	4b9c      	ldr	r3, [pc, #624]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7e:	091b      	lsrs	r3, r3, #4
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800eb86:	4b99      	ldr	r3, [pc, #612]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb8a:	08db      	lsrs	r3, r3, #3
 800eb8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb90:	693a      	ldr	r2, [r7, #16]
 800eb92:	fb02 f303 	mul.w	r3, r2, r3
 800eb96:	ee07 3a90 	vmov	s15, r3
 800eb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 8111 	beq.w	800edcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	f000 8083 	beq.w	800ecb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	f200 80a1 	bhi.w	800ecfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d003      	beq.n	800ebc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d056      	beq.n	800ec74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ebc6:	e099      	b.n	800ecfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebc8:	4b88      	ldr	r3, [pc, #544]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f003 0320 	and.w	r3, r3, #32
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d02d      	beq.n	800ec30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebd4:	4b85      	ldr	r3, [pc, #532]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	08db      	lsrs	r3, r3, #3
 800ebda:	f003 0303 	and.w	r3, r3, #3
 800ebde:	4a84      	ldr	r2, [pc, #528]	; (800edf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ebe0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebe4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	ee07 3a90 	vmov	s15, r3
 800ebec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	ee07 3a90 	vmov	s15, r3
 800ebf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebfe:	4b7b      	ldr	r3, [pc, #492]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec06:	ee07 3a90 	vmov	s15, r3
 800ec0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec12:	eddf 5a78 	vldr	s11, [pc, #480]	; 800edf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec2e:	e087      	b.n	800ed40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	ee07 3a90 	vmov	s15, r3
 800ec36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800edf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ec3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec42:	4b6a      	ldr	r3, [pc, #424]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec4a:	ee07 3a90 	vmov	s15, r3
 800ec4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec56:	eddf 5a67 	vldr	s11, [pc, #412]	; 800edf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec72:	e065      	b.n	800ed40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800edfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ec82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec86:	4b59      	ldr	r3, [pc, #356]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec8e:	ee07 3a90 	vmov	s15, r3
 800ec92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800edf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecb6:	e043      	b.n	800ed40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	ee07 3a90 	vmov	s15, r3
 800ecbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ee00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ecc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecca:	4b48      	ldr	r3, [pc, #288]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecd2:	ee07 3a90 	vmov	s15, r3
 800ecd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecda:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecde:	eddf 5a45 	vldr	s11, [pc, #276]	; 800edf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ece2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ece6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecfa:	e021      	b.n	800ed40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	ee07 3a90 	vmov	s15, r3
 800ed02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800edfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ed0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed0e:	4b37      	ldr	r3, [pc, #220]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed16:	ee07 3a90 	vmov	s15, r3
 800ed1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed22:	eddf 5a34 	vldr	s11, [pc, #208]	; 800edf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ed26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ed40:	4b2a      	ldr	r3, [pc, #168]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed44:	0a5b      	lsrs	r3, r3, #9
 800ed46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed4a:	ee07 3a90 	vmov	s15, r3
 800ed4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed66:	ee17 2a90 	vmov	r2, s15
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ed6e:	4b1f      	ldr	r3, [pc, #124]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed72:	0c1b      	lsrs	r3, r3, #16
 800ed74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed78:	ee07 3a90 	vmov	s15, r3
 800ed7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed88:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed94:	ee17 2a90 	vmov	r2, s15
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ed9c:	4b13      	ldr	r3, [pc, #76]	; (800edec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda0:	0e1b      	lsrs	r3, r3, #24
 800eda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eda6:	ee07 3a90 	vmov	s15, r3
 800edaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edc2:	ee17 2a90 	vmov	r2, s15
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800edca:	e008      	b.n	800edde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	609a      	str	r2, [r3, #8]
}
 800edde:	bf00      	nop
 800ede0:	3724      	adds	r7, #36	; 0x24
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	58024400 	.word	0x58024400
 800edf0:	03d09000 	.word	0x03d09000
 800edf4:	46000000 	.word	0x46000000
 800edf8:	4c742400 	.word	0x4c742400
 800edfc:	4a742400 	.word	0x4a742400
 800ee00:	4bbebc20 	.word	0x4bbebc20

0800ee04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b089      	sub	sp, #36	; 0x24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee0c:	4ba1      	ldr	r3, [pc, #644]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee10:	f003 0303 	and.w	r3, r3, #3
 800ee14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ee16:	4b9f      	ldr	r3, [pc, #636]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1a:	0d1b      	lsrs	r3, r3, #20
 800ee1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ee22:	4b9c      	ldr	r3, [pc, #624]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee26:	0a1b      	lsrs	r3, r3, #8
 800ee28:	f003 0301 	and.w	r3, r3, #1
 800ee2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ee2e:	4b99      	ldr	r3, [pc, #612]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee32:	08db      	lsrs	r3, r3, #3
 800ee34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee38:	693a      	ldr	r2, [r7, #16]
 800ee3a:	fb02 f303 	mul.w	r3, r2, r3
 800ee3e:	ee07 3a90 	vmov	s15, r3
 800ee42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f000 8111 	beq.w	800f074 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	f000 8083 	beq.w	800ef60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	f200 80a1 	bhi.w	800efa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d003      	beq.n	800ee70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d056      	beq.n	800ef1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ee6e:	e099      	b.n	800efa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee70:	4b88      	ldr	r3, [pc, #544]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f003 0320 	and.w	r3, r3, #32
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d02d      	beq.n	800eed8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee7c:	4b85      	ldr	r3, [pc, #532]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	08db      	lsrs	r3, r3, #3
 800ee82:	f003 0303 	and.w	r3, r3, #3
 800ee86:	4a84      	ldr	r2, [pc, #528]	; (800f098 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ee88:	fa22 f303 	lsr.w	r3, r2, r3
 800ee8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	ee07 3a90 	vmov	s15, r3
 800ee94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	ee07 3a90 	vmov	s15, r3
 800ee9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eea6:	4b7b      	ldr	r3, [pc, #492]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeae:	ee07 3a90 	vmov	s15, r3
 800eeb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800eeba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eeca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eed2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eed6:	e087      	b.n	800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	ee07 3a90 	vmov	s15, r3
 800eede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eee2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800eee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eeea:	4b6a      	ldr	r3, [pc, #424]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eef2:	ee07 3a90 	vmov	s15, r3
 800eef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eefa:	ed97 6a03 	vldr	s12, [r7, #12]
 800eefe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef1a:	e065      	b.n	800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	ee07 3a90 	vmov	s15, r3
 800ef22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef2e:	4b59      	ldr	r3, [pc, #356]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef36:	ee07 3a90 	vmov	s15, r3
 800ef3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef5e:	e043      	b.n	800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	ee07 3a90 	vmov	s15, r3
 800ef66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ef6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef72:	4b48      	ldr	r3, [pc, #288]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef7a:	ee07 3a90 	vmov	s15, r3
 800ef7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efa2:	e021      	b.n	800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	ee07 3a90 	vmov	s15, r3
 800efaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800efb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efb6:	4b37      	ldr	r3, [pc, #220]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efbe:	ee07 3a90 	vmov	s15, r3
 800efc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800efca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800efce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efe6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800efe8:	4b2a      	ldr	r3, [pc, #168]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efec:	0a5b      	lsrs	r3, r3, #9
 800efee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eff2:	ee07 3a90 	vmov	s15, r3
 800eff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800effa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800effe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f002:	edd7 6a07 	vldr	s13, [r7, #28]
 800f006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f00e:	ee17 2a90 	vmov	r2, s15
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f016:	4b1f      	ldr	r3, [pc, #124]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f01a:	0c1b      	lsrs	r3, r3, #16
 800f01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f020:	ee07 3a90 	vmov	s15, r3
 800f024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f030:	edd7 6a07 	vldr	s13, [r7, #28]
 800f034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f03c:	ee17 2a90 	vmov	r2, s15
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f044:	4b13      	ldr	r3, [pc, #76]	; (800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f048:	0e1b      	lsrs	r3, r3, #24
 800f04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f04e:	ee07 3a90 	vmov	s15, r3
 800f052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f06a:	ee17 2a90 	vmov	r2, s15
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f072:	e008      	b.n	800f086 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	609a      	str	r2, [r3, #8]
}
 800f086:	bf00      	nop
 800f088:	3724      	adds	r7, #36	; 0x24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	58024400 	.word	0x58024400
 800f098:	03d09000 	.word	0x03d09000
 800f09c:	46000000 	.word	0x46000000
 800f0a0:	4c742400 	.word	0x4c742400
 800f0a4:	4a742400 	.word	0x4a742400
 800f0a8:	4bbebc20 	.word	0x4bbebc20

0800f0ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b089      	sub	sp, #36	; 0x24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f0b4:	4ba0      	ldr	r3, [pc, #640]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0b8:	f003 0303 	and.w	r3, r3, #3
 800f0bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f0be:	4b9e      	ldr	r3, [pc, #632]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c2:	091b      	lsrs	r3, r3, #4
 800f0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f0ca:	4b9b      	ldr	r3, [pc, #620]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f0d4:	4b98      	ldr	r3, [pc, #608]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d8:	08db      	lsrs	r3, r3, #3
 800f0da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	fb02 f303 	mul.w	r3, r2, r3
 800f0e4:	ee07 3a90 	vmov	s15, r3
 800f0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 8111 	beq.w	800f31a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	2b02      	cmp	r3, #2
 800f0fc:	f000 8083 	beq.w	800f206 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	2b02      	cmp	r3, #2
 800f104:	f200 80a1 	bhi.w	800f24a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d056      	beq.n	800f1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f114:	e099      	b.n	800f24a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f116:	4b88      	ldr	r3, [pc, #544]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f003 0320 	and.w	r3, r3, #32
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d02d      	beq.n	800f17e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f122:	4b85      	ldr	r3, [pc, #532]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	08db      	lsrs	r3, r3, #3
 800f128:	f003 0303 	and.w	r3, r3, #3
 800f12c:	4a83      	ldr	r2, [pc, #524]	; (800f33c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f12e:	fa22 f303 	lsr.w	r3, r2, r3
 800f132:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	ee07 3a90 	vmov	s15, r3
 800f13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	ee07 3a90 	vmov	s15, r3
 800f144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f14c:	4b7a      	ldr	r3, [pc, #488]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f154:	ee07 3a90 	vmov	s15, r3
 800f158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f15c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f160:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f16c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f174:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f178:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f17c:	e087      	b.n	800f28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	ee07 3a90 	vmov	s15, r3
 800f184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f188:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f344 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f18c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f190:	4b69      	ldr	r3, [pc, #420]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f198:	ee07 3a90 	vmov	s15, r3
 800f19c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1c0:	e065      	b.n	800f28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	ee07 3a90 	vmov	s15, r3
 800f1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f348 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f1d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1d4:	4b58      	ldr	r3, [pc, #352]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1dc:	ee07 3a90 	vmov	s15, r3
 800f1e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f200:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f204:	e043      	b.n	800f28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	ee07 3a90 	vmov	s15, r3
 800f20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f210:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f34c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f218:	4b47      	ldr	r3, [pc, #284]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f220:	ee07 3a90 	vmov	s15, r3
 800f224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f228:	ed97 6a03 	vldr	s12, [r7, #12]
 800f22c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f248:	e021      	b.n	800f28e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	ee07 3a90 	vmov	s15, r3
 800f250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f254:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f344 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f25c:	4b36      	ldr	r3, [pc, #216]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f264:	ee07 3a90 	vmov	s15, r3
 800f268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f26c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f270:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f27c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f28c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f28e:	4b2a      	ldr	r3, [pc, #168]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f292:	0a5b      	lsrs	r3, r3, #9
 800f294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f298:	ee07 3a90 	vmov	s15, r3
 800f29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2b4:	ee17 2a90 	vmov	r2, s15
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f2bc:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c0:	0c1b      	lsrs	r3, r3, #16
 800f2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2c6:	ee07 3a90 	vmov	s15, r3
 800f2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2e2:	ee17 2a90 	vmov	r2, s15
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f2ea:	4b13      	ldr	r3, [pc, #76]	; (800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ee:	0e1b      	lsrs	r3, r3, #24
 800f2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f4:	ee07 3a90 	vmov	s15, r3
 800f2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f300:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f304:	edd7 6a07 	vldr	s13, [r7, #28]
 800f308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f30c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f310:	ee17 2a90 	vmov	r2, s15
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f318:	e008      	b.n	800f32c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	609a      	str	r2, [r3, #8]
}
 800f32c:	bf00      	nop
 800f32e:	3724      	adds	r7, #36	; 0x24
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	58024400 	.word	0x58024400
 800f33c:	03d09000 	.word	0x03d09000
 800f340:	46000000 	.word	0x46000000
 800f344:	4c742400 	.word	0x4c742400
 800f348:	4a742400 	.word	0x4a742400
 800f34c:	4bbebc20 	.word	0x4bbebc20

0800f350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f35a:	2300      	movs	r3, #0
 800f35c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f35e:	4b53      	ldr	r3, [pc, #332]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f362:	f003 0303 	and.w	r3, r3, #3
 800f366:	2b03      	cmp	r3, #3
 800f368:	d101      	bne.n	800f36e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f36a:	2301      	movs	r3, #1
 800f36c:	e099      	b.n	800f4a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f36e:	4b4f      	ldr	r3, [pc, #316]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a4e      	ldr	r2, [pc, #312]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f37a:	f7f4 feed 	bl	8004158 <HAL_GetTick>
 800f37e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f380:	e008      	b.n	800f394 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f382:	f7f4 fee9 	bl	8004158 <HAL_GetTick>
 800f386:	4602      	mov	r2, r0
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d901      	bls.n	800f394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f390:	2303      	movs	r3, #3
 800f392:	e086      	b.n	800f4a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f394:	4b45      	ldr	r3, [pc, #276]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1f0      	bne.n	800f382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f3a0:	4b42      	ldr	r3, [pc, #264]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	031b      	lsls	r3, r3, #12
 800f3ae:	493f      	ldr	r1, [pc, #252]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	628b      	str	r3, [r1, #40]	; 0x28
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	025b      	lsls	r3, r3, #9
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	041b      	lsls	r3, r3, #16
 800f3d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f3d6:	431a      	orrs	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	061b      	lsls	r3, r3, #24
 800f3e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f3e4:	4931      	ldr	r1, [pc, #196]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f3ea:	4b30      	ldr	r3, [pc, #192]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	695b      	ldr	r3, [r3, #20]
 800f3f6:	492d      	ldr	r1, [pc, #180]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f3fc:	4b2b      	ldr	r3, [pc, #172]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f400:	f023 0220 	bic.w	r2, r3, #32
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	699b      	ldr	r3, [r3, #24]
 800f408:	4928      	ldr	r1, [pc, #160]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f40a:	4313      	orrs	r3, r2
 800f40c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f40e:	4b27      	ldr	r3, [pc, #156]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f412:	4a26      	ldr	r2, [pc, #152]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f414:	f023 0310 	bic.w	r3, r3, #16
 800f418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f41a:	4b24      	ldr	r3, [pc, #144]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f41c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f41e:	4b24      	ldr	r3, [pc, #144]	; (800f4b0 <RCCEx_PLL2_Config+0x160>)
 800f420:	4013      	ands	r3, r2
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	69d2      	ldr	r2, [r2, #28]
 800f426:	00d2      	lsls	r2, r2, #3
 800f428:	4920      	ldr	r1, [pc, #128]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f42a:	4313      	orrs	r3, r2
 800f42c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f42e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	4a1e      	ldr	r2, [pc, #120]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f434:	f043 0310 	orr.w	r3, r3, #16
 800f438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d106      	bne.n	800f44e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f440:	4b1a      	ldr	r3, [pc, #104]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f444:	4a19      	ldr	r2, [pc, #100]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f44c:	e00f      	b.n	800f46e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d106      	bne.n	800f462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f454:	4b15      	ldr	r3, [pc, #84]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f458:	4a14      	ldr	r2, [pc, #80]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f45a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f460:	e005      	b.n	800f46e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f462:	4b12      	ldr	r3, [pc, #72]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f466:	4a11      	ldr	r2, [pc, #68]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f46c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f46e:	4b0f      	ldr	r3, [pc, #60]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a0e      	ldr	r2, [pc, #56]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f47a:	f7f4 fe6d 	bl	8004158 <HAL_GetTick>
 800f47e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f480:	e008      	b.n	800f494 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f482:	f7f4 fe69 	bl	8004158 <HAL_GetTick>
 800f486:	4602      	mov	r2, r0
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	2b02      	cmp	r3, #2
 800f48e:	d901      	bls.n	800f494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f490:	2303      	movs	r3, #3
 800f492:	e006      	b.n	800f4a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f494:	4b05      	ldr	r3, [pc, #20]	; (800f4ac <RCCEx_PLL2_Config+0x15c>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d0f0      	beq.n	800f482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	58024400 	.word	0x58024400
 800f4b0:	ffff0007 	.word	0xffff0007

0800f4b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f4c2:	4b53      	ldr	r3, [pc, #332]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4c6:	f003 0303 	and.w	r3, r3, #3
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d101      	bne.n	800f4d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e099      	b.n	800f606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f4d2:	4b4f      	ldr	r3, [pc, #316]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4a4e      	ldr	r2, [pc, #312]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f4d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4de:	f7f4 fe3b 	bl	8004158 <HAL_GetTick>
 800f4e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4e4:	e008      	b.n	800f4f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f4e6:	f7f4 fe37 	bl	8004158 <HAL_GetTick>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	2b02      	cmp	r3, #2
 800f4f2:	d901      	bls.n	800f4f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f4f4:	2303      	movs	r3, #3
 800f4f6:	e086      	b.n	800f606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4f8:	4b45      	ldr	r3, [pc, #276]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1f0      	bne.n	800f4e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f504:	4b42      	ldr	r3, [pc, #264]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f508:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	051b      	lsls	r3, r3, #20
 800f512:	493f      	ldr	r1, [pc, #252]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f514:	4313      	orrs	r3, r2
 800f516:	628b      	str	r3, [r1, #40]	; 0x28
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	3b01      	subs	r3, #1
 800f528:	025b      	lsls	r3, r3, #9
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	431a      	orrs	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	3b01      	subs	r3, #1
 800f534:	041b      	lsls	r3, r3, #16
 800f536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f53a:	431a      	orrs	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	3b01      	subs	r3, #1
 800f542:	061b      	lsls	r3, r3, #24
 800f544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f548:	4931      	ldr	r1, [pc, #196]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f54a:	4313      	orrs	r3, r2
 800f54c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f54e:	4b30      	ldr	r3, [pc, #192]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	695b      	ldr	r3, [r3, #20]
 800f55a:	492d      	ldr	r1, [pc, #180]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f55c:	4313      	orrs	r3, r2
 800f55e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f560:	4b2b      	ldr	r3, [pc, #172]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	699b      	ldr	r3, [r3, #24]
 800f56c:	4928      	ldr	r1, [pc, #160]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f56e:	4313      	orrs	r3, r2
 800f570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f572:	4b27      	ldr	r3, [pc, #156]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f576:	4a26      	ldr	r2, [pc, #152]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f57c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f57e:	4b24      	ldr	r3, [pc, #144]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f582:	4b24      	ldr	r3, [pc, #144]	; (800f614 <RCCEx_PLL3_Config+0x160>)
 800f584:	4013      	ands	r3, r2
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	69d2      	ldr	r2, [r2, #28]
 800f58a:	00d2      	lsls	r2, r2, #3
 800f58c:	4920      	ldr	r1, [pc, #128]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f58e:	4313      	orrs	r3, r2
 800f590:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f592:	4b1f      	ldr	r3, [pc, #124]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f596:	4a1e      	ldr	r2, [pc, #120]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f59c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d106      	bne.n	800f5b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f5a4:	4b1a      	ldr	r3, [pc, #104]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a8:	4a19      	ldr	r2, [pc, #100]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f5b0:	e00f      	b.n	800f5d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d106      	bne.n	800f5c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f5b8:	4b15      	ldr	r3, [pc, #84]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5bc:	4a14      	ldr	r2, [pc, #80]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f5c4:	e005      	b.n	800f5d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f5c6:	4b12      	ldr	r3, [pc, #72]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ca:	4a11      	ldr	r2, [pc, #68]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f5d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f5d2:	4b0f      	ldr	r3, [pc, #60]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a0e      	ldr	r2, [pc, #56]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f5de:	f7f4 fdbb 	bl	8004158 <HAL_GetTick>
 800f5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5e4:	e008      	b.n	800f5f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f5e6:	f7f4 fdb7 	bl	8004158 <HAL_GetTick>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	2b02      	cmp	r3, #2
 800f5f2:	d901      	bls.n	800f5f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f5f4:	2303      	movs	r3, #3
 800f5f6:	e006      	b.n	800f606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5f8:	4b05      	ldr	r3, [pc, #20]	; (800f610 <RCCEx_PLL3_Config+0x15c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f600:	2b00      	cmp	r3, #0
 800f602:	d0f0      	beq.n	800f5e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f604:	7bfb      	ldrb	r3, [r7, #15]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	58024400 	.word	0x58024400
 800f614:	ffff0007 	.word	0xffff0007

0800f618 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d071      	beq.n	800f70e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f630:	b2db      	uxtb	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7f3 f8b2 	bl	80027a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2202      	movs	r2, #2
 800f648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	f003 0310 	and.w	r3, r3, #16
 800f656:	2b10      	cmp	r3, #16
 800f658:	d050      	beq.n	800f6fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	22ca      	movs	r2, #202	; 0xca
 800f660:	625a      	str	r2, [r3, #36]	; 0x24
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2253      	movs	r2, #83	; 0x53
 800f668:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fa4a 	bl	800fb04 <RTC_EnterInitMode>
 800f670:	4603      	mov	r3, r0
 800f672:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d124      	bne.n	800f6c4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6899      	ldr	r1, [r3, #8]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	4b24      	ldr	r3, [pc, #144]	; (800f718 <HAL_RTC_Init+0x100>)
 800f686:	400b      	ands	r3, r1
 800f688:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	6899      	ldr	r1, [r3, #8]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	691b      	ldr	r3, [r3, #16]
 800f698:	431a      	orrs	r2, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	699b      	ldr	r3, [r3, #24]
 800f69e:	431a      	orrs	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	0419      	lsls	r1, r3, #16
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68da      	ldr	r2, [r3, #12]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	430a      	orrs	r2, r1
 800f6b8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 fa56 	bl	800fb6c <RTC_ExitInitMode>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d113      	bne.n	800f6f2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f022 0203 	bic.w	r2, r2, #3
 800f6d8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	69da      	ldr	r2, [r3, #28]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	695b      	ldr	r3, [r3, #20]
 800f6e8:	431a      	orrs	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	430a      	orrs	r2, r1
 800f6f0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	22ff      	movs	r2, #255	; 0xff
 800f6f8:	625a      	str	r2, [r3, #36]	; 0x24
 800f6fa:	e001      	b.n	800f700 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d103      	bne.n	800f70e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2201      	movs	r2, #1
 800f70a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800f70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	ff8fffbf 	.word	0xff8fffbf

0800f71c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f71c:	b590      	push	{r4, r7, lr}
 800f71e:	b087      	sub	sp, #28
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d101      	bne.n	800f736 <HAL_RTC_SetTime+0x1a>
 800f732:	2302      	movs	r3, #2
 800f734:	e089      	b.n	800f84a <HAL_RTC_SetTime+0x12e>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2201      	movs	r2, #1
 800f73a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2202      	movs	r2, #2
 800f742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	22ca      	movs	r2, #202	; 0xca
 800f74c:	625a      	str	r2, [r3, #36]	; 0x24
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2253      	movs	r2, #83	; 0x53
 800f754:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f000 f9d4 	bl	800fb04 <RTC_EnterInitMode>
 800f75c:	4603      	mov	r3, r0
 800f75e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f760:	7cfb      	ldrb	r3, [r7, #19]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d161      	bne.n	800f82a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d126      	bne.n	800f7ba <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f776:	2b00      	cmp	r3, #0
 800f778:	d102      	bne.n	800f780 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2200      	movs	r2, #0
 800f77e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fa2f 	bl	800fbe8 <RTC_ByteToBcd2>
 800f78a:	4603      	mov	r3, r0
 800f78c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	785b      	ldrb	r3, [r3, #1]
 800f792:	4618      	mov	r0, r3
 800f794:	f000 fa28 	bl	800fbe8 <RTC_ByteToBcd2>
 800f798:	4603      	mov	r3, r0
 800f79a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f79c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	789b      	ldrb	r3, [r3, #2]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f000 fa20 	bl	800fbe8 <RTC_ByteToBcd2>
 800f7a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f7aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	78db      	ldrb	r3, [r3, #3]
 800f7b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	617b      	str	r3, [r7, #20]
 800f7b8:	e018      	b.n	800f7ec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d102      	bne.n	800f7ce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	785b      	ldrb	r3, [r3, #1]
 800f7d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f7e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	78db      	ldrb	r3, [r3, #3]
 800f7e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	6979      	ldr	r1, [r7, #20]
 800f7f2:	4b18      	ldr	r3, [pc, #96]	; (800f854 <HAL_RTC_SetTime+0x138>)
 800f7f4:	400b      	ands	r3, r1
 800f7f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	689a      	ldr	r2, [r3, #8]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f806:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6899      	ldr	r1, [r3, #8]
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	68da      	ldr	r2, [r3, #12]
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	431a      	orrs	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	430a      	orrs	r2, r1
 800f81e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f9a3 	bl	800fb6c <RTC_ExitInitMode>
 800f826:	4603      	mov	r3, r0
 800f828:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	22ff      	movs	r2, #255	; 0xff
 800f830:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f832:	7cfb      	ldrb	r3, [r7, #19]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d103      	bne.n	800f840 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2200      	movs	r2, #0
 800f844:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800f848:	7cfb      	ldrb	r3, [r7, #19]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	371c      	adds	r7, #28
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd90      	pop	{r4, r7, pc}
 800f852:	bf00      	nop
 800f854:	007f7f7f 	.word	0x007f7f7f

0800f858 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	691b      	ldr	r3, [r3, #16]
 800f874:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	4b22      	ldr	r3, [pc, #136]	; (800f90c <HAL_RTC_GetTime+0xb4>)
 800f884:	4013      	ands	r3, r2
 800f886:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	0c1b      	lsrs	r3, r3, #16
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f892:	b2da      	uxtb	r2, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	0a1b      	lsrs	r3, r3, #8
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	0d9b      	lsrs	r3, r3, #22
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	f003 0301 	and.w	r3, r3, #1
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d11a      	bne.n	800f902 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 f9a9 	bl	800fc28 <RTC_Bcd2ToByte>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	461a      	mov	r2, r3
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	785b      	ldrb	r3, [r3, #1]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f000 f9a0 	bl	800fc28 <RTC_Bcd2ToByte>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	789b      	ldrb	r3, [r3, #2]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 f997 	bl	800fc28 <RTC_Bcd2ToByte>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f902:	2300      	movs	r3, #0
}
 800f904:	4618      	mov	r0, r3
 800f906:	3718      	adds	r7, #24
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	007f7f7f 	.word	0x007f7f7f

0800f910 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d101      	bne.n	800f92a <HAL_RTC_SetDate+0x1a>
 800f926:	2302      	movs	r3, #2
 800f928:	e073      	b.n	800fa12 <HAL_RTC_SetDate+0x102>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2201      	movs	r2, #1
 800f92e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2202      	movs	r2, #2
 800f936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10e      	bne.n	800f95e <HAL_RTC_SetDate+0x4e>
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	785b      	ldrb	r3, [r3, #1]
 800f944:	f003 0310 	and.w	r3, r3, #16
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d008      	beq.n	800f95e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	785b      	ldrb	r3, [r3, #1]
 800f950:	f023 0310 	bic.w	r3, r3, #16
 800f954:	b2db      	uxtb	r3, r3
 800f956:	330a      	adds	r3, #10
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d11c      	bne.n	800f99e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	78db      	ldrb	r3, [r3, #3]
 800f968:	4618      	mov	r0, r3
 800f96a:	f000 f93d 	bl	800fbe8 <RTC_ByteToBcd2>
 800f96e:	4603      	mov	r3, r0
 800f970:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	785b      	ldrb	r3, [r3, #1]
 800f976:	4618      	mov	r0, r3
 800f978:	f000 f936 	bl	800fbe8 <RTC_ByteToBcd2>
 800f97c:	4603      	mov	r3, r0
 800f97e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f980:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	789b      	ldrb	r3, [r3, #2]
 800f986:	4618      	mov	r0, r3
 800f988:	f000 f92e 	bl	800fbe8 <RTC_ByteToBcd2>
 800f98c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f98e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f998:	4313      	orrs	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]
 800f99c:	e00e      	b.n	800f9bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	78db      	ldrb	r3, [r3, #3]
 800f9a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	785b      	ldrb	r3, [r3, #1]
 800f9a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f9aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800f9ac:	68ba      	ldr	r2, [r7, #8]
 800f9ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f9b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	22ca      	movs	r2, #202	; 0xca
 800f9c2:	625a      	str	r2, [r3, #36]	; 0x24
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2253      	movs	r2, #83	; 0x53
 800f9ca:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 f899 	bl	800fb04 <RTC_EnterInitMode>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f9d6:	7cfb      	ldrb	r3, [r7, #19]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10a      	bne.n	800f9f2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	6979      	ldr	r1, [r7, #20]
 800f9e2:	4b0e      	ldr	r3, [pc, #56]	; (800fa1c <HAL_RTC_SetDate+0x10c>)
 800f9e4:	400b      	ands	r3, r1
 800f9e6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f000 f8bf 	bl	800fb6c <RTC_ExitInitMode>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	22ff      	movs	r2, #255	; 0xff
 800f9f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f9fa:	7cfb      	ldrb	r3, [r7, #19]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d103      	bne.n	800fa08 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2201      	movs	r2, #1
 800fa04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800fa10:	7cfb      	ldrb	r3, [r7, #19]


}
 800fa12:	4618      	mov	r0, r3
 800fa14:	371c      	adds	r7, #28
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd90      	pop	{r4, r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	00ffff3f 	.word	0x00ffff3f

0800fa20 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b086      	sub	sp, #24
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	685a      	ldr	r2, [r3, #4]
 800fa32:	4b21      	ldr	r3, [pc, #132]	; (800fab8 <HAL_RTC_GetDate+0x98>)
 800fa34:	4013      	ands	r3, r2
 800fa36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	0c1b      	lsrs	r3, r3, #16
 800fa3c:	b2da      	uxtb	r2, r3
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	0a1b      	lsrs	r3, r3, #8
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	f003 031f 	and.w	r3, r3, #31
 800fa4c:	b2da      	uxtb	r2, r3
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa5a:	b2da      	uxtb	r2, r3
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	0b5b      	lsrs	r3, r3, #13
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	f003 0307 	and.w	r3, r3, #7
 800fa6a:	b2da      	uxtb	r2, r3
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d11a      	bne.n	800faac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	78db      	ldrb	r3, [r3, #3]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f000 f8d4 	bl	800fc28 <RTC_Bcd2ToByte>
 800fa80:	4603      	mov	r3, r0
 800fa82:	461a      	mov	r2, r3
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	785b      	ldrb	r3, [r3, #1]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f000 f8cb 	bl	800fc28 <RTC_Bcd2ToByte>
 800fa92:	4603      	mov	r3, r0
 800fa94:	461a      	mov	r2, r3
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	789b      	ldrb	r3, [r3, #2]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 f8c2 	bl	800fc28 <RTC_Bcd2ToByte>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3718      	adds	r7, #24
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	00ffff3f 	.word	0x00ffff3f

0800fabc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a0d      	ldr	r2, [pc, #52]	; (800fb00 <HAL_RTC_WaitForSynchro+0x44>)
 800faca:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800facc:	f7f4 fb44 	bl	8004158 <HAL_GetTick>
 800fad0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fad2:	e009      	b.n	800fae8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fad4:	f7f4 fb40 	bl	8004158 <HAL_GetTick>
 800fad8:	4602      	mov	r2, r0
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fae2:	d901      	bls.n	800fae8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800fae4:	2303      	movs	r3, #3
 800fae6:	e007      	b.n	800faf8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	f003 0320 	and.w	r3, r3, #32
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d0ee      	beq.n	800fad4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	0003ff5f 	.word	0x0003ff5f

0800fb04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d120      	bne.n	800fb60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800fb28:	f7f4 fb16 	bl	8004158 <HAL_GetTick>
 800fb2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800fb2e:	e00d      	b.n	800fb4c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800fb30:	f7f4 fb12 	bl	8004158 <HAL_GetTick>
 800fb34:	4602      	mov	r2, r0
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb3e:	d905      	bls.n	800fb4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800fb40:	2303      	movs	r3, #3
 800fb42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2203      	movs	r2, #3
 800fb48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d102      	bne.n	800fb60 <RTC_EnterInitMode+0x5c>
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	2b03      	cmp	r3, #3
 800fb5e:	d1e7      	bne.n	800fb30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800fb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3710      	adds	r7, #16
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
	...

0800fb6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800fb78:	4b1a      	ldr	r3, [pc, #104]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	4a19      	ldr	r2, [pc, #100]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fb7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb82:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800fb84:	4b17      	ldr	r3, [pc, #92]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	f003 0320 	and.w	r3, r3, #32
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d10c      	bne.n	800fbaa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ff93 	bl	800fabc <HAL_RTC_WaitForSynchro>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d01e      	beq.n	800fbda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2203      	movs	r2, #3
 800fba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	73fb      	strb	r3, [r7, #15]
 800fba8:	e017      	b.n	800fbda <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fbaa:	4b0e      	ldr	r3, [pc, #56]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	4a0d      	ldr	r2, [pc, #52]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fbb0:	f023 0320 	bic.w	r3, r3, #32
 800fbb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7ff ff80 	bl	800fabc <HAL_RTC_WaitForSynchro>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d005      	beq.n	800fbce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2203      	movs	r2, #3
 800fbc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fbce:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	4a04      	ldr	r2, [pc, #16]	; (800fbe4 <RTC_ExitInitMode+0x78>)
 800fbd4:	f043 0320 	orr.w	r3, r3, #32
 800fbd8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	58004000 	.word	0x58004000

0800fbe8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	4603      	mov	r3, r0
 800fbf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800fbfa:	e005      	b.n	800fc08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800fc02:	7afb      	ldrb	r3, [r7, #11]
 800fc04:	3b0a      	subs	r3, #10
 800fc06:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800fc08:	7afb      	ldrb	r3, [r7, #11]
 800fc0a:	2b09      	cmp	r3, #9
 800fc0c:	d8f6      	bhi.n	800fbfc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	b2da      	uxtb	r2, r3
 800fc16:	7afb      	ldrb	r3, [r7, #11]
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	b2db      	uxtb	r3, r3
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	4603      	mov	r3, r0
 800fc30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800fc32:	79fb      	ldrb	r3, [r7, #7]
 800fc34:	091b      	lsrs	r3, r3, #4
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	461a      	mov	r2, r3
 800fc3a:	0092      	lsls	r2, r2, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800fc42:	79fb      	ldrb	r3, [r7, #7]
 800fc44:	f003 030f 	and.w	r3, r3, #15
 800fc48:	b2da      	uxtb	r2, r3
 800fc4a:	7bfb      	ldrb	r3, [r7, #15]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	b2db      	uxtb	r3, r3
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e10f      	b.n	800fe8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a87      	ldr	r2, [pc, #540]	; (800fe98 <HAL_SPI_Init+0x23c>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d00f      	beq.n	800fc9e <HAL_SPI_Init+0x42>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a86      	ldr	r2, [pc, #536]	; (800fe9c <HAL_SPI_Init+0x240>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d00a      	beq.n	800fc9e <HAL_SPI_Init+0x42>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a84      	ldr	r2, [pc, #528]	; (800fea0 <HAL_SPI_Init+0x244>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d005      	beq.n	800fc9e <HAL_SPI_Init+0x42>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	2b0f      	cmp	r3, #15
 800fc98:	d901      	bls.n	800fc9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e0f7      	b.n	800fe8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fd60 	bl	8010764 <SPI_GetPacketSize>
 800fca4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a7b      	ldr	r2, [pc, #492]	; (800fe98 <HAL_SPI_Init+0x23c>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d00c      	beq.n	800fcca <HAL_SPI_Init+0x6e>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a79      	ldr	r2, [pc, #484]	; (800fe9c <HAL_SPI_Init+0x240>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d007      	beq.n	800fcca <HAL_SPI_Init+0x6e>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a78      	ldr	r2, [pc, #480]	; (800fea0 <HAL_SPI_Init+0x244>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d002      	beq.n	800fcca <HAL_SPI_Init+0x6e>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b08      	cmp	r3, #8
 800fcc8:	d811      	bhi.n	800fcee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fcce:	4a72      	ldr	r2, [pc, #456]	; (800fe98 <HAL_SPI_Init+0x23c>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d009      	beq.n	800fce8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a70      	ldr	r2, [pc, #448]	; (800fe9c <HAL_SPI_Init+0x240>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d004      	beq.n	800fce8 <HAL_SPI_Init+0x8c>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a6f      	ldr	r2, [pc, #444]	; (800fea0 <HAL_SPI_Init+0x244>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d104      	bne.n	800fcf2 <HAL_SPI_Init+0x96>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2b10      	cmp	r3, #16
 800fcec:	d901      	bls.n	800fcf2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e0cd      	b.n	800fe8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7f2 ffd2 	bl	8002cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2202      	movs	r2, #2
 800fd10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f022 0201 	bic.w	r2, r2, #1
 800fd22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fd2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	699b      	ldr	r3, [r3, #24]
 800fd34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fd38:	d119      	bne.n	800fd6e <HAL_SPI_Init+0x112>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd42:	d103      	bne.n	800fd4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d008      	beq.n	800fd5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10c      	bne.n	800fd6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd5c:	d107      	bne.n	800fd6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00f      	beq.n	800fd9a <HAL_SPI_Init+0x13e>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	2b06      	cmp	r3, #6
 800fd80:	d90b      	bls.n	800fd9a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	430a      	orrs	r2, r1
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	e007      	b.n	800fdaa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fda8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	69da      	ldr	r2, [r3, #28]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	431a      	orrs	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdbc:	ea42 0103 	orr.w	r1, r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68da      	ldr	r2, [r3, #12]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd4:	431a      	orrs	r2, r3
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdda:	431a      	orrs	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	699b      	ldr	r3, [r3, #24]
 800fde0:	431a      	orrs	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	431a      	orrs	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	431a      	orrs	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	431a      	orrs	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	431a      	orrs	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdfe:	431a      	orrs	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	431a      	orrs	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe0a:	ea42 0103 	orr.w	r1, r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	430a      	orrs	r2, r1
 800fe18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d113      	bne.n	800fe4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f022 0201 	bic.w	r2, r2, #1
 800fe58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	40013000 	.word	0x40013000
 800fe9c:	40003800 	.word	0x40003800
 800fea0:	40003c00 	.word	0x40003c00

0800fea4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	4613      	mov	r3, r2
 800feb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b01      	cmp	r3, #1
 800febc:	d005      	beq.n	800feca <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 800fec6:	2302      	movs	r3, #2
 800fec8:	e127      	b.n	801011a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <HAL_SPI_Receive_DMA+0x32>
 800fed0:	88fb      	ldrh	r3, [r7, #6]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d105      	bne.n	800fee2 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	e11b      	b.n	801011a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d101      	bne.n	800fef0 <HAL_SPI_Receive_DMA+0x4c>
 800feec:	2302      	movs	r3, #2
 800feee:	e114      	b.n	801011a <HAL_SPI_Receive_DMA+0x276>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2204      	movs	r2, #4
 800fefc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	88fa      	ldrh	r2, [r7, #6]
 800ff12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	88fa      	ldrh	r2, [r7, #6]
 800ff1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2200      	movs	r2, #0
 800ff36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ff42:	d108      	bne.n	800ff56 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	e009      	b.n	800ff6a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ff68:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	2b0f      	cmp	r3, #15
 800ff70:	d905      	bls.n	800ff7e <HAL_SPI_Receive_DMA+0xda>
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ff7c:	d10f      	bne.n	800ff9e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ff82:	2b07      	cmp	r3, #7
 800ff84:	d911      	bls.n	800ffaa <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff90:	d00b      	beq.n	800ffaa <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff96:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ff98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ff9c:	d005      	beq.n	800ffaa <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	e0b7      	b.n	801011a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	689a      	ldr	r2, [r3, #8]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffb8:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	2b07      	cmp	r3, #7
 800ffc0:	d820      	bhi.n	8010004 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ffcc:	d109      	bne.n	800ffe2 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	105b      	asrs	r3, r3, #1
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffe6:	699b      	ldr	r3, [r3, #24]
 800ffe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ffec:	d11e      	bne.n	801002c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	3303      	adds	r3, #3
 800fff8:	109b      	asrs	r3, r3, #2
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010002:	e013      	b.n	801002c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	2b0f      	cmp	r3, #15
 801000a:	d80f      	bhi.n	801002c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010010:	699b      	ldr	r3, [r3, #24]
 8010012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010016:	d109      	bne.n	801002c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801001e:	b29b      	uxth	r3, r3
 8010020:	3301      	adds	r3, #1
 8010022:	105b      	asrs	r3, r3, #1
 8010024:	b29a      	uxth	r2, r3
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010030:	4a3c      	ldr	r2, [pc, #240]	; (8010124 <HAL_SPI_Receive_DMA+0x280>)
 8010032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010038:	4a3b      	ldr	r2, [pc, #236]	; (8010128 <HAL_SPI_Receive_DMA+0x284>)
 801003a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010040:	4a3a      	ldr	r2, [pc, #232]	; (801012c <HAL_SPI_Receive_DMA+0x288>)
 8010042:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010048:	2200      	movs	r2, #0
 801004a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3330      	adds	r3, #48	; 0x30
 8010056:	4619      	mov	r1, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801005c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010064:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8010066:	f7f6 fcfb 	bl	8006a60 <HAL_DMA_Start_IT>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d011      	beq.n	8010094 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010076:	f043 0210 	orr.w	r2, r3, #16
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e042      	b.n	801011a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010098:	69db      	ldr	r3, [r3, #28]
 801009a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801009e:	d108      	bne.n	80100b2 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	6859      	ldr	r1, [r3, #4]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	4b21      	ldr	r3, [pc, #132]	; (8010130 <HAL_SPI_Receive_DMA+0x28c>)
 80100ac:	400b      	ands	r3, r1
 80100ae:	6053      	str	r3, [r2, #4]
 80100b0:	e009      	b.n	80100c6 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	685a      	ldr	r2, [r3, #4]
 80100b8:	4b1d      	ldr	r3, [pc, #116]	; (8010130 <HAL_SPI_Receive_DMA+0x28c>)
 80100ba:	4013      	ands	r3, r2
 80100bc:	88f9      	ldrh	r1, [r7, #6]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	6812      	ldr	r2, [r2, #0]
 80100c2:	430b      	orrs	r3, r1
 80100c4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	689a      	ldr	r2, [r3, #8]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100d4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	691a      	ldr	r2, [r3, #16]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80100e4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f042 0201 	orr.w	r2, r2, #1
 80100f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100fe:	d107      	bne.n	8010110 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801010e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	0801058f 	.word	0x0801058f
 8010128:	08010549 	.word	0x08010549
 801012c:	080105ab 	.word	0x080105ab
 8010130:	ffff0000 	.word	0xffff0000

08010134 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b08a      	sub	sp, #40	; 0x28
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	695b      	ldr	r3, [r3, #20]
 801014a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801014c:	6a3a      	ldr	r2, [r7, #32]
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	4013      	ands	r3, r2
 8010152:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801015c:	2300      	movs	r3, #0
 801015e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010166:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3330      	adds	r3, #48	; 0x30
 801016e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010176:	2b00      	cmp	r3, #0
 8010178:	d010      	beq.n	801019c <HAL_SPI_IRQHandler+0x68>
 801017a:	6a3b      	ldr	r3, [r7, #32]
 801017c:	f003 0308 	and.w	r3, r3, #8
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00b      	beq.n	801019c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	699a      	ldr	r2, [r3, #24]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010192:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f9cd 	bl	8010534 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801019a:	e192      	b.n	80104c2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d113      	bne.n	80101ce <HAL_SPI_IRQHandler+0x9a>
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	f003 0320 	and.w	r3, r3, #32
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d10e      	bne.n	80101ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d009      	beq.n	80101ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	4798      	blx	r3
    handled = 1UL;
 80101ca:	2301      	movs	r3, #1
 80101cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d10f      	bne.n	80101f8 <HAL_SPI_IRQHandler+0xc4>
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00a      	beq.n	80101f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d105      	bne.n	80101f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	4798      	blx	r3
    handled = 1UL;
 80101f4:	2301      	movs	r3, #1
 80101f6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	f003 0320 	and.w	r3, r3, #32
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d10f      	bne.n	8010222 <HAL_SPI_IRQHandler+0xee>
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	f003 0302 	and.w	r3, r3, #2
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00a      	beq.n	8010222 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010212:	2b00      	cmp	r3, #0
 8010214:	d105      	bne.n	8010222 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	4798      	blx	r3
    handled = 1UL;
 801021e:	2301      	movs	r3, #1
 8010220:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	2b00      	cmp	r3, #0
 8010226:	f040 8147 	bne.w	80104b8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	f003 0308 	and.w	r3, r3, #8
 8010230:	2b00      	cmp	r3, #0
 8010232:	f000 808b 	beq.w	801034c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	699a      	ldr	r2, [r3, #24]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f042 0208 	orr.w	r2, r2, #8
 8010244:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	699a      	ldr	r2, [r3, #24]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f042 0210 	orr.w	r2, r2, #16
 8010254:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	699a      	ldr	r2, [r3, #24]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010264:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	691a      	ldr	r2, [r3, #16]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f022 0208 	bic.w	r2, r2, #8
 8010274:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010280:	2b00      	cmp	r3, #0
 8010282:	d13d      	bne.n	8010300 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8010284:	e036      	b.n	80102f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	2b0f      	cmp	r3, #15
 801028c:	d90b      	bls.n	80102a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010296:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010298:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801029e:	1d1a      	adds	r2, r3, #4
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	665a      	str	r2, [r3, #100]	; 0x64
 80102a4:	e01d      	b.n	80102e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	2b07      	cmp	r3, #7
 80102ac:	d90b      	bls.n	80102c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	8812      	ldrh	r2, [r2, #0]
 80102b6:	b292      	uxth	r2, r2
 80102b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102be:	1c9a      	adds	r2, r3, #2
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	665a      	str	r2, [r3, #100]	; 0x64
 80102c4:	e00d      	b.n	80102e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102d2:	7812      	ldrb	r2, [r2, #0]
 80102d4:	b2d2      	uxtb	r2, r2
 80102d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102dc:	1c5a      	adds	r2, r3, #1
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	3b01      	subs	r3, #1
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1c2      	bne.n	8010286 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f98f 	bl	8010624 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2201      	movs	r2, #1
 801030a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010314:	2b00      	cmp	r3, #0
 8010316:	d003      	beq.n	8010320 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f901 	bl	8010520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801031e:	e0d0      	b.n	80104c2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010320:	7cfb      	ldrb	r3, [r7, #19]
 8010322:	2b05      	cmp	r3, #5
 8010324:	d103      	bne.n	801032e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 f8e6 	bl	80104f8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801032c:	e0c6      	b.n	80104bc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801032e:	7cfb      	ldrb	r3, [r7, #19]
 8010330:	2b04      	cmp	r3, #4
 8010332:	d103      	bne.n	801033c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 f8d5 	bl	80104e4 <HAL_SPI_RxCpltCallback>
    return;
 801033a:	e0bf      	b.n	80104bc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801033c:	7cfb      	ldrb	r3, [r7, #19]
 801033e:	2b03      	cmp	r3, #3
 8010340:	f040 80bc 	bne.w	80104bc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f8c3 	bl	80104d0 <HAL_SPI_TxCpltCallback>
    return;
 801034a:	e0b7      	b.n	80104bc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8010352:	2b00      	cmp	r3, #0
 8010354:	f000 80b5 	beq.w	80104c2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00f      	beq.n	8010382 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010368:	f043 0204 	orr.w	r2, r3, #4
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	699a      	ldr	r2, [r3, #24]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010380:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00f      	beq.n	80103ac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010392:	f043 0201 	orr.w	r2, r3, #1
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	699a      	ldr	r2, [r3, #24]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00f      	beq.n	80103d6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103bc:	f043 0208 	orr.w	r2, r3, #8
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	699a      	ldr	r2, [r3, #24]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	f003 0320 	and.w	r3, r3, #32
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00f      	beq.n	8010400 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	699a      	ldr	r2, [r3, #24]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f042 0220 	orr.w	r2, r2, #32
 80103fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010406:	2b00      	cmp	r3, #0
 8010408:	d05a      	beq.n	80104c0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f022 0201 	bic.w	r2, r2, #1
 8010418:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	6919      	ldr	r1, [r3, #16]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	4b28      	ldr	r3, [pc, #160]	; (80104c8 <HAL_SPI_IRQHandler+0x394>)
 8010426:	400b      	ands	r3, r1
 8010428:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010430:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010434:	d138      	bne.n	80104a8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	689a      	ldr	r2, [r3, #8]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010444:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801044a:	2b00      	cmp	r3, #0
 801044c:	d013      	beq.n	8010476 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010452:	4a1e      	ldr	r2, [pc, #120]	; (80104cc <HAL_SPI_IRQHandler+0x398>)
 8010454:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801045a:	4618      	mov	r0, r3
 801045c:	f7f7 f888 	bl	8007570 <HAL_DMA_Abort_IT>
 8010460:	4603      	mov	r3, r0
 8010462:	2b00      	cmp	r3, #0
 8010464:	d007      	beq.n	8010476 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801046c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801047a:	2b00      	cmp	r3, #0
 801047c:	d020      	beq.n	80104c0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010482:	4a12      	ldr	r2, [pc, #72]	; (80104cc <HAL_SPI_IRQHandler+0x398>)
 8010484:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801048a:	4618      	mov	r0, r3
 801048c:	f7f7 f870 	bl	8007570 <HAL_DMA_Abort_IT>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d014      	beq.n	80104c0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801049c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80104a6:	e00b      	b.n	80104c0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2201      	movs	r2, #1
 80104ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f835 	bl	8010520 <HAL_SPI_ErrorCallback>
    return;
 80104b6:	e003      	b.n	80104c0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80104b8:	bf00      	nop
 80104ba:	e002      	b.n	80104c2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80104bc:	bf00      	nop
 80104be:	e000      	b.n	80104c2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80104c0:	bf00      	nop
  }
}
 80104c2:	3728      	adds	r7, #40	; 0x28
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	fffffc94 	.word	0xfffffc94
 80104cc:	080105f1 	.word	0x080105f1

080104d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80104d8:	bf00      	nop
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80104e4:	b480      	push	{r7}
 80104e6:	b083      	sub	sp, #12
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80104ec:	bf00      	nop
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8010514:	bf00      	nop
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010528:	bf00      	nop
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801053c:	bf00      	nop
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr

08010548 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010554:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801055c:	b2db      	uxtb	r3, r3
 801055e:	2b07      	cmp	r3, #7
 8010560:	d011      	beq.n	8010586 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801056c:	d103      	bne.n	8010576 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	f7ff ffb8 	bl	80104e4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8010574:	e007      	b.n	8010586 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	691a      	ldr	r2, [r3, #16]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f042 0208 	orr.w	r2, r2, #8
 8010584:	611a      	str	r2, [r3, #16]
}
 8010586:	bf00      	nop
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b084      	sub	sp, #16
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f7ff ffb5 	bl	801050c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80105a2:	bf00      	nop
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b084      	sub	sp, #16
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7f8 f957 	bl	800886c <HAL_DMA_GetError>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d011      	beq.n	80105e8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f000 f82d 	bl	8010624 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105d0:	f043 0210 	orr.w	r2, r3, #16
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80105e2:	68f8      	ldr	r0, [r7, #12]
 80105e4:	f7ff ff9c 	bl	8010520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80105e8:	bf00      	nop
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2200      	movs	r2, #0
 8010602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2200      	movs	r2, #0
 801060a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2201      	movs	r2, #1
 8010612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f7ff ff82 	bl	8010520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801061c:	bf00      	nop
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010624:	b480      	push	{r7}
 8010626:	b085      	sub	sp, #20
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	695b      	ldr	r3, [r3, #20]
 8010632:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	699a      	ldr	r2, [r3, #24]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f042 0208 	orr.w	r2, r2, #8
 8010642:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	699a      	ldr	r2, [r3, #24]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f042 0210 	orr.w	r2, r2, #16
 8010652:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f022 0201 	bic.w	r2, r2, #1
 8010662:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	6919      	ldr	r1, [r3, #16]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	4b3c      	ldr	r3, [pc, #240]	; (8010760 <SPI_CloseTransfer+0x13c>)
 8010670:	400b      	ands	r3, r1
 8010672:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	689a      	ldr	r2, [r3, #8]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010682:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801068a:	b2db      	uxtb	r3, r3
 801068c:	2b04      	cmp	r3, #4
 801068e:	d014      	beq.n	80106ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f003 0320 	and.w	r3, r3, #32
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00f      	beq.n	80106ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	699a      	ldr	r2, [r3, #24]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f042 0220 	orr.w	r2, r2, #32
 80106b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b03      	cmp	r3, #3
 80106c4:	d014      	beq.n	80106f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00f      	beq.n	80106f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106d6:	f043 0204 	orr.w	r2, r3, #4
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	699a      	ldr	r2, [r3, #24]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00f      	beq.n	801071a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010700:	f043 0201 	orr.w	r2, r3, #1
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	699a      	ldr	r2, [r3, #24]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010718:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00f      	beq.n	8010744 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801072a:	f043 0208 	orr.w	r2, r3, #8
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	699a      	ldr	r2, [r3, #24]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010742:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010754:	bf00      	nop
 8010756:	3714      	adds	r7, #20
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr
 8010760:	fffffc90 	.word	0xfffffc90

08010764 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010764:	b480      	push	{r7}
 8010766:	b085      	sub	sp, #20
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010770:	095b      	lsrs	r3, r3, #5
 8010772:	3301      	adds	r3, #1
 8010774:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	3301      	adds	r3, #1
 801077c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	3307      	adds	r3, #7
 8010782:	08db      	lsrs	r3, r3, #3
 8010784:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	fb02 f303 	mul.w	r3, r2, r3
}
 801078e:	4618      	mov	r0, r3
 8010790:	3714      	adds	r7, #20
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr

0801079a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b082      	sub	sp, #8
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80107a8:	2301      	movs	r3, #1
 80107aa:	e049      	b.n	8010840 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d106      	bne.n	80107c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7f2 ff81 	bl	80036c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2202      	movs	r2, #2
 80107ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	3304      	adds	r3, #4
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f000 fe7d 	bl	80114d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2201      	movs	r2, #1
 80107e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2201      	movs	r2, #1
 80107ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2201      	movs	r2, #1
 80107f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2201      	movs	r2, #1
 80107fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2201      	movs	r2, #1
 8010802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2201      	movs	r2, #1
 801080a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2201      	movs	r2, #1
 8010812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2201      	movs	r2, #1
 801081a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2201      	movs	r2, #1
 8010822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2201      	movs	r2, #1
 801082a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2201      	movs	r2, #1
 8010832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2201      	movs	r2, #1
 801083a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801083e:	2300      	movs	r3, #0
}
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010856:	b2db      	uxtb	r3, r3
 8010858:	2b01      	cmp	r3, #1
 801085a:	d001      	beq.n	8010860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801085c:	2301      	movs	r3, #1
 801085e:	e054      	b.n	801090a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2202      	movs	r2, #2
 8010864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	68da      	ldr	r2, [r3, #12]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f042 0201 	orr.w	r2, r2, #1
 8010876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a26      	ldr	r2, [pc, #152]	; (8010918 <HAL_TIM_Base_Start_IT+0xd0>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d022      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801088a:	d01d      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a22      	ldr	r2, [pc, #136]	; (801091c <HAL_TIM_Base_Start_IT+0xd4>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d018      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a21      	ldr	r2, [pc, #132]	; (8010920 <HAL_TIM_Base_Start_IT+0xd8>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d013      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a1f      	ldr	r2, [pc, #124]	; (8010924 <HAL_TIM_Base_Start_IT+0xdc>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d00e      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a1e      	ldr	r2, [pc, #120]	; (8010928 <HAL_TIM_Base_Start_IT+0xe0>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d009      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4a1c      	ldr	r2, [pc, #112]	; (801092c <HAL_TIM_Base_Start_IT+0xe4>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d004      	beq.n	80108c8 <HAL_TIM_Base_Start_IT+0x80>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4a1b      	ldr	r2, [pc, #108]	; (8010930 <HAL_TIM_Base_Start_IT+0xe8>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d115      	bne.n	80108f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	689a      	ldr	r2, [r3, #8]
 80108ce:	4b19      	ldr	r3, [pc, #100]	; (8010934 <HAL_TIM_Base_Start_IT+0xec>)
 80108d0:	4013      	ands	r3, r2
 80108d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2b06      	cmp	r3, #6
 80108d8:	d015      	beq.n	8010906 <HAL_TIM_Base_Start_IT+0xbe>
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108e0:	d011      	beq.n	8010906 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f042 0201 	orr.w	r2, r2, #1
 80108f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108f2:	e008      	b.n	8010906 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f042 0201 	orr.w	r2, r2, #1
 8010902:	601a      	str	r2, [r3, #0]
 8010904:	e000      	b.n	8010908 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	40010000 	.word	0x40010000
 801091c:	40000400 	.word	0x40000400
 8010920:	40000800 	.word	0x40000800
 8010924:	40000c00 	.word	0x40000c00
 8010928:	40010400 	.word	0x40010400
 801092c:	40001800 	.word	0x40001800
 8010930:	40014000 	.word	0x40014000
 8010934:	00010007 	.word	0x00010007

08010938 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d109      	bne.n	8010960 <HAL_TIM_OC_Start_IT+0x28>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b01      	cmp	r3, #1
 8010956:	bf14      	ite	ne
 8010958:	2301      	movne	r3, #1
 801095a:	2300      	moveq	r3, #0
 801095c:	b2db      	uxtb	r3, r3
 801095e:	e03c      	b.n	80109da <HAL_TIM_OC_Start_IT+0xa2>
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2b04      	cmp	r3, #4
 8010964:	d109      	bne.n	801097a <HAL_TIM_OC_Start_IT+0x42>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801096c:	b2db      	uxtb	r3, r3
 801096e:	2b01      	cmp	r3, #1
 8010970:	bf14      	ite	ne
 8010972:	2301      	movne	r3, #1
 8010974:	2300      	moveq	r3, #0
 8010976:	b2db      	uxtb	r3, r3
 8010978:	e02f      	b.n	80109da <HAL_TIM_OC_Start_IT+0xa2>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	2b08      	cmp	r3, #8
 801097e:	d109      	bne.n	8010994 <HAL_TIM_OC_Start_IT+0x5c>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010986:	b2db      	uxtb	r3, r3
 8010988:	2b01      	cmp	r3, #1
 801098a:	bf14      	ite	ne
 801098c:	2301      	movne	r3, #1
 801098e:	2300      	moveq	r3, #0
 8010990:	b2db      	uxtb	r3, r3
 8010992:	e022      	b.n	80109da <HAL_TIM_OC_Start_IT+0xa2>
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b0c      	cmp	r3, #12
 8010998:	d109      	bne.n	80109ae <HAL_TIM_OC_Start_IT+0x76>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	bf14      	ite	ne
 80109a6:	2301      	movne	r3, #1
 80109a8:	2300      	moveq	r3, #0
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	e015      	b.n	80109da <HAL_TIM_OC_Start_IT+0xa2>
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	2b10      	cmp	r3, #16
 80109b2:	d109      	bne.n	80109c8 <HAL_TIM_OC_Start_IT+0x90>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	2b01      	cmp	r3, #1
 80109be:	bf14      	ite	ne
 80109c0:	2301      	movne	r3, #1
 80109c2:	2300      	moveq	r3, #0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	e008      	b.n	80109da <HAL_TIM_OC_Start_IT+0xa2>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	bf14      	ite	ne
 80109d4:	2301      	movne	r3, #1
 80109d6:	2300      	moveq	r3, #0
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d001      	beq.n	80109e2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e0ec      	b.n	8010bbc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d104      	bne.n	80109f2 <HAL_TIM_OC_Start_IT+0xba>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2202      	movs	r2, #2
 80109ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109f0:	e023      	b.n	8010a3a <HAL_TIM_OC_Start_IT+0x102>
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b04      	cmp	r3, #4
 80109f6:	d104      	bne.n	8010a02 <HAL_TIM_OC_Start_IT+0xca>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2202      	movs	r2, #2
 80109fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010a00:	e01b      	b.n	8010a3a <HAL_TIM_OC_Start_IT+0x102>
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	2b08      	cmp	r3, #8
 8010a06:	d104      	bne.n	8010a12 <HAL_TIM_OC_Start_IT+0xda>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2202      	movs	r2, #2
 8010a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010a10:	e013      	b.n	8010a3a <HAL_TIM_OC_Start_IT+0x102>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b0c      	cmp	r3, #12
 8010a16:	d104      	bne.n	8010a22 <HAL_TIM_OC_Start_IT+0xea>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2202      	movs	r2, #2
 8010a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010a20:	e00b      	b.n	8010a3a <HAL_TIM_OC_Start_IT+0x102>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	2b10      	cmp	r3, #16
 8010a26:	d104      	bne.n	8010a32 <HAL_TIM_OC_Start_IT+0xfa>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2202      	movs	r2, #2
 8010a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a30:	e003      	b.n	8010a3a <HAL_TIM_OC_Start_IT+0x102>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2202      	movs	r2, #2
 8010a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	2b0c      	cmp	r3, #12
 8010a3e:	d841      	bhi.n	8010ac4 <HAL_TIM_OC_Start_IT+0x18c>
 8010a40:	a201      	add	r2, pc, #4	; (adr r2, 8010a48 <HAL_TIM_OC_Start_IT+0x110>)
 8010a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a46:	bf00      	nop
 8010a48:	08010a7d 	.word	0x08010a7d
 8010a4c:	08010ac5 	.word	0x08010ac5
 8010a50:	08010ac5 	.word	0x08010ac5
 8010a54:	08010ac5 	.word	0x08010ac5
 8010a58:	08010a8f 	.word	0x08010a8f
 8010a5c:	08010ac5 	.word	0x08010ac5
 8010a60:	08010ac5 	.word	0x08010ac5
 8010a64:	08010ac5 	.word	0x08010ac5
 8010a68:	08010aa1 	.word	0x08010aa1
 8010a6c:	08010ac5 	.word	0x08010ac5
 8010a70:	08010ac5 	.word	0x08010ac5
 8010a74:	08010ac5 	.word	0x08010ac5
 8010a78:	08010ab3 	.word	0x08010ab3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	68da      	ldr	r2, [r3, #12]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f042 0202 	orr.w	r2, r2, #2
 8010a8a:	60da      	str	r2, [r3, #12]
      break;
 8010a8c:	e01d      	b.n	8010aca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68da      	ldr	r2, [r3, #12]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f042 0204 	orr.w	r2, r2, #4
 8010a9c:	60da      	str	r2, [r3, #12]
      break;
 8010a9e:	e014      	b.n	8010aca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68da      	ldr	r2, [r3, #12]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f042 0208 	orr.w	r2, r2, #8
 8010aae:	60da      	str	r2, [r3, #12]
      break;
 8010ab0:	e00b      	b.n	8010aca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68da      	ldr	r2, [r3, #12]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f042 0210 	orr.w	r2, r2, #16
 8010ac0:	60da      	str	r2, [r3, #12]
      break;
 8010ac2:	e002      	b.n	8010aca <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ac8:	bf00      	nop
  }

  if (status == HAL_OK)
 8010aca:	7bfb      	ldrb	r3, [r7, #15]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d174      	bne.n	8010bba <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f001 f917 	bl	8011d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a38      	ldr	r2, [pc, #224]	; (8010bc4 <HAL_TIM_OC_Start_IT+0x28c>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d013      	beq.n	8010b10 <HAL_TIM_OC_Start_IT+0x1d8>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a36      	ldr	r2, [pc, #216]	; (8010bc8 <HAL_TIM_OC_Start_IT+0x290>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d00e      	beq.n	8010b10 <HAL_TIM_OC_Start_IT+0x1d8>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4a35      	ldr	r2, [pc, #212]	; (8010bcc <HAL_TIM_OC_Start_IT+0x294>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d009      	beq.n	8010b10 <HAL_TIM_OC_Start_IT+0x1d8>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4a33      	ldr	r2, [pc, #204]	; (8010bd0 <HAL_TIM_OC_Start_IT+0x298>)
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d004      	beq.n	8010b10 <HAL_TIM_OC_Start_IT+0x1d8>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a32      	ldr	r2, [pc, #200]	; (8010bd4 <HAL_TIM_OC_Start_IT+0x29c>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d101      	bne.n	8010b14 <HAL_TIM_OC_Start_IT+0x1dc>
 8010b10:	2301      	movs	r3, #1
 8010b12:	e000      	b.n	8010b16 <HAL_TIM_OC_Start_IT+0x1de>
 8010b14:	2300      	movs	r3, #0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a25      	ldr	r2, [pc, #148]	; (8010bc4 <HAL_TIM_OC_Start_IT+0x28c>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d022      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b3c:	d01d      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4a25      	ldr	r2, [pc, #148]	; (8010bd8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d018      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a23      	ldr	r2, [pc, #140]	; (8010bdc <HAL_TIM_OC_Start_IT+0x2a4>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d013      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	4a22      	ldr	r2, [pc, #136]	; (8010be0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d00e      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a19      	ldr	r2, [pc, #100]	; (8010bc8 <HAL_TIM_OC_Start_IT+0x290>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d009      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	4a1e      	ldr	r2, [pc, #120]	; (8010be4 <HAL_TIM_OC_Start_IT+0x2ac>)
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d004      	beq.n	8010b7a <HAL_TIM_OC_Start_IT+0x242>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a15      	ldr	r2, [pc, #84]	; (8010bcc <HAL_TIM_OC_Start_IT+0x294>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d115      	bne.n	8010ba6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	689a      	ldr	r2, [r3, #8]
 8010b80:	4b19      	ldr	r3, [pc, #100]	; (8010be8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8010b82:	4013      	ands	r3, r2
 8010b84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	2b06      	cmp	r3, #6
 8010b8a:	d015      	beq.n	8010bb8 <HAL_TIM_OC_Start_IT+0x280>
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b92:	d011      	beq.n	8010bb8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f042 0201 	orr.w	r2, r2, #1
 8010ba2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ba4:	e008      	b.n	8010bb8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f042 0201 	orr.w	r2, r2, #1
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	e000      	b.n	8010bba <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bb8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	40010000 	.word	0x40010000
 8010bc8:	40010400 	.word	0x40010400
 8010bcc:	40014000 	.word	0x40014000
 8010bd0:	40014400 	.word	0x40014400
 8010bd4:	40014800 	.word	0x40014800
 8010bd8:	40000400 	.word	0x40000400
 8010bdc:	40000800 	.word	0x40000800
 8010be0:	40000c00 	.word	0x40000c00
 8010be4:	40001800 	.word	0x40001800
 8010be8:	00010007 	.word	0x00010007

08010bec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2b0c      	cmp	r3, #12
 8010bfe:	d841      	bhi.n	8010c84 <HAL_TIM_OC_Stop_IT+0x98>
 8010c00:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <HAL_TIM_OC_Stop_IT+0x1c>)
 8010c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c06:	bf00      	nop
 8010c08:	08010c3d 	.word	0x08010c3d
 8010c0c:	08010c85 	.word	0x08010c85
 8010c10:	08010c85 	.word	0x08010c85
 8010c14:	08010c85 	.word	0x08010c85
 8010c18:	08010c4f 	.word	0x08010c4f
 8010c1c:	08010c85 	.word	0x08010c85
 8010c20:	08010c85 	.word	0x08010c85
 8010c24:	08010c85 	.word	0x08010c85
 8010c28:	08010c61 	.word	0x08010c61
 8010c2c:	08010c85 	.word	0x08010c85
 8010c30:	08010c85 	.word	0x08010c85
 8010c34:	08010c85 	.word	0x08010c85
 8010c38:	08010c73 	.word	0x08010c73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	68da      	ldr	r2, [r3, #12]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f022 0202 	bic.w	r2, r2, #2
 8010c4a:	60da      	str	r2, [r3, #12]
      break;
 8010c4c:	e01d      	b.n	8010c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	68da      	ldr	r2, [r3, #12]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f022 0204 	bic.w	r2, r2, #4
 8010c5c:	60da      	str	r2, [r3, #12]
      break;
 8010c5e:	e014      	b.n	8010c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68da      	ldr	r2, [r3, #12]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f022 0208 	bic.w	r2, r2, #8
 8010c6e:	60da      	str	r2, [r3, #12]
      break;
 8010c70:	e00b      	b.n	8010c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	68da      	ldr	r2, [r3, #12]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f022 0210 	bic.w	r2, r2, #16
 8010c80:	60da      	str	r2, [r3, #12]
      break;
 8010c82:	e002      	b.n	8010c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8010c84:	2301      	movs	r3, #1
 8010c86:	73fb      	strb	r3, [r7, #15]
      break;
 8010c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f040 8081 	bne.w	8010d94 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2200      	movs	r2, #0
 8010c98:	6839      	ldr	r1, [r7, #0]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f001 f836 	bl	8011d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a3e      	ldr	r2, [pc, #248]	; (8010da0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d013      	beq.n	8010cd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4a3d      	ldr	r2, [pc, #244]	; (8010da4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d00e      	beq.n	8010cd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a3b      	ldr	r2, [pc, #236]	; (8010da8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d009      	beq.n	8010cd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a3a      	ldr	r2, [pc, #232]	; (8010dac <HAL_TIM_OC_Stop_IT+0x1c0>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d004      	beq.n	8010cd2 <HAL_TIM_OC_Stop_IT+0xe6>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a38      	ldr	r2, [pc, #224]	; (8010db0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d101      	bne.n	8010cd6 <HAL_TIM_OC_Stop_IT+0xea>
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e000      	b.n	8010cd8 <HAL_TIM_OC_Stop_IT+0xec>
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d017      	beq.n	8010d0c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	6a1a      	ldr	r2, [r3, #32]
 8010ce2:	f241 1311 	movw	r3, #4369	; 0x1111
 8010ce6:	4013      	ands	r3, r2
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10f      	bne.n	8010d0c <HAL_TIM_OC_Stop_IT+0x120>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	6a1a      	ldr	r2, [r3, #32]
 8010cf2:	f240 4344 	movw	r3, #1092	; 0x444
 8010cf6:	4013      	ands	r3, r2
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d107      	bne.n	8010d0c <HAL_TIM_OC_Stop_IT+0x120>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010d0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	6a1a      	ldr	r2, [r3, #32]
 8010d12:	f241 1311 	movw	r3, #4369	; 0x1111
 8010d16:	4013      	ands	r3, r2
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10f      	bne.n	8010d3c <HAL_TIM_OC_Stop_IT+0x150>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	6a1a      	ldr	r2, [r3, #32]
 8010d22:	f240 4344 	movw	r3, #1092	; 0x444
 8010d26:	4013      	ands	r3, r2
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d107      	bne.n	8010d3c <HAL_TIM_OC_Stop_IT+0x150>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681a      	ldr	r2, [r3, #0]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f022 0201 	bic.w	r2, r2, #1
 8010d3a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d104      	bne.n	8010d4c <HAL_TIM_OC_Stop_IT+0x160>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2201      	movs	r2, #1
 8010d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d4a:	e023      	b.n	8010d94 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	d104      	bne.n	8010d5c <HAL_TIM_OC_Stop_IT+0x170>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2201      	movs	r2, #1
 8010d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d5a:	e01b      	b.n	8010d94 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	2b08      	cmp	r3, #8
 8010d60:	d104      	bne.n	8010d6c <HAL_TIM_OC_Stop_IT+0x180>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2201      	movs	r2, #1
 8010d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d6a:	e013      	b.n	8010d94 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	2b0c      	cmp	r3, #12
 8010d70:	d104      	bne.n	8010d7c <HAL_TIM_OC_Stop_IT+0x190>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2201      	movs	r2, #1
 8010d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d7a:	e00b      	b.n	8010d94 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	2b10      	cmp	r3, #16
 8010d80:	d104      	bne.n	8010d8c <HAL_TIM_OC_Stop_IT+0x1a0>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2201      	movs	r2, #1
 8010d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d8a:	e003      	b.n	8010d94 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	40010000 	.word	0x40010000
 8010da4:	40010400 	.word	0x40010400
 8010da8:	40014000 	.word	0x40014000
 8010dac:	40014400 	.word	0x40014400
 8010db0:	40014800 	.word	0x40014800

08010db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d101      	bne.n	8010dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e049      	b.n	8010e5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d106      	bne.n	8010de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 f841 	bl	8010e62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2202      	movs	r2, #2
 8010de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	3304      	adds	r3, #4
 8010df0:	4619      	mov	r1, r3
 8010df2:	4610      	mov	r0, r2
 8010df4:	f000 fb70 	bl	80114d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2201      	movs	r2, #1
 8010e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2201      	movs	r2, #1
 8010e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2201      	movs	r2, #1
 8010e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2201      	movs	r2, #1
 8010e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3708      	adds	r7, #8
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010e62:	b480      	push	{r7}
 8010e64:	b083      	sub	sp, #12
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010e6a:	bf00      	nop
 8010e6c:	370c      	adds	r7, #12
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr

08010e76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b084      	sub	sp, #16
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	691b      	ldr	r3, [r3, #16]
 8010e8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	f003 0302 	and.w	r3, r3, #2
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d020      	beq.n	8010eda <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f003 0302 	and.w	r3, r3, #2
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d01b      	beq.n	8010eda <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f06f 0202 	mvn.w	r2, #2
 8010eaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	699b      	ldr	r3, [r3, #24]
 8010eb8:	f003 0303 	and.w	r3, r3, #3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d003      	beq.n	8010ec8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 faeb 	bl	801149c <HAL_TIM_IC_CaptureCallback>
 8010ec6:	e005      	b.n	8010ed4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7f0 fb89 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 faee 	bl	80114b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	f003 0304 	and.w	r3, r3, #4
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d020      	beq.n	8010f26 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f003 0304 	and.w	r3, r3, #4
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d01b      	beq.n	8010f26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f06f 0204 	mvn.w	r2, #4
 8010ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2202      	movs	r2, #2
 8010efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	699b      	ldr	r3, [r3, #24]
 8010f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fac5 	bl	801149c <HAL_TIM_IC_CaptureCallback>
 8010f12:	e005      	b.n	8010f20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f7f0 fb63 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 fac8 	bl	80114b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	f003 0308 	and.w	r3, r3, #8
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d020      	beq.n	8010f72 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f003 0308 	and.w	r3, r3, #8
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d01b      	beq.n	8010f72 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f06f 0208 	mvn.w	r2, #8
 8010f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2204      	movs	r2, #4
 8010f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	69db      	ldr	r3, [r3, #28]
 8010f50:	f003 0303 	and.w	r3, r3, #3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d003      	beq.n	8010f60 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 fa9f 	bl	801149c <HAL_TIM_IC_CaptureCallback>
 8010f5e:	e005      	b.n	8010f6c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f7f0 fb3d 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 faa2 	bl	80114b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	f003 0310 	and.w	r3, r3, #16
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d020      	beq.n	8010fbe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f003 0310 	and.w	r3, r3, #16
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d01b      	beq.n	8010fbe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f06f 0210 	mvn.w	r2, #16
 8010f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2208      	movs	r2, #8
 8010f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	69db      	ldr	r3, [r3, #28]
 8010f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d003      	beq.n	8010fac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 fa79 	bl	801149c <HAL_TIM_IC_CaptureCallback>
 8010faa:	e005      	b.n	8010fb8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7f0 fb17 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fa7c 	bl	80114b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	f003 0301 	and.w	r3, r3, #1
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00c      	beq.n	8010fe2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d007      	beq.n	8010fe2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f06f 0201 	mvn.w	r2, #1
 8010fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7f1 f965 	bl	80022ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d104      	bne.n	8010ff6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00c      	beq.n	8011010 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8011008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 ffba 	bl	8011f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00c      	beq.n	8011034 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011020:	2b00      	cmp	r3, #0
 8011022:	d007      	beq.n	8011034 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801102c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 ffb2 	bl	8011f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00c      	beq.n	8011058 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011044:	2b00      	cmp	r3, #0
 8011046:	d007      	beq.n	8011058 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 fa36 	bl	80114c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	f003 0320 	and.w	r3, r3, #32
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00c      	beq.n	801107c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f003 0320 	and.w	r3, r3, #32
 8011068:	2b00      	cmp	r3, #0
 801106a:	d007      	beq.n	801107c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f06f 0220 	mvn.w	r2, #32
 8011074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 ff7a 	bl	8011f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801107c:	bf00      	nop
 801107e:	3710      	adds	r7, #16
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011090:	2300      	movs	r3, #0
 8011092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801109a:	2b01      	cmp	r3, #1
 801109c:	d101      	bne.n	80110a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801109e:	2302      	movs	r3, #2
 80110a0:	e0ff      	b.n	80112a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2201      	movs	r2, #1
 80110a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2b14      	cmp	r3, #20
 80110ae:	f200 80f0 	bhi.w	8011292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80110b2:	a201      	add	r2, pc, #4	; (adr r2, 80110b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	0801110d 	.word	0x0801110d
 80110bc:	08011293 	.word	0x08011293
 80110c0:	08011293 	.word	0x08011293
 80110c4:	08011293 	.word	0x08011293
 80110c8:	0801114d 	.word	0x0801114d
 80110cc:	08011293 	.word	0x08011293
 80110d0:	08011293 	.word	0x08011293
 80110d4:	08011293 	.word	0x08011293
 80110d8:	0801118f 	.word	0x0801118f
 80110dc:	08011293 	.word	0x08011293
 80110e0:	08011293 	.word	0x08011293
 80110e4:	08011293 	.word	0x08011293
 80110e8:	080111cf 	.word	0x080111cf
 80110ec:	08011293 	.word	0x08011293
 80110f0:	08011293 	.word	0x08011293
 80110f4:	08011293 	.word	0x08011293
 80110f8:	08011211 	.word	0x08011211
 80110fc:	08011293 	.word	0x08011293
 8011100:	08011293 	.word	0x08011293
 8011104:	08011293 	.word	0x08011293
 8011108:	08011251 	.word	0x08011251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68b9      	ldr	r1, [r7, #8]
 8011112:	4618      	mov	r0, r3
 8011114:	f000 fa86 	bl	8011624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	699a      	ldr	r2, [r3, #24]
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f042 0208 	orr.w	r2, r2, #8
 8011126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	699a      	ldr	r2, [r3, #24]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f022 0204 	bic.w	r2, r2, #4
 8011136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	6999      	ldr	r1, [r3, #24]
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	691a      	ldr	r2, [r3, #16]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	430a      	orrs	r2, r1
 8011148:	619a      	str	r2, [r3, #24]
      break;
 801114a:	e0a5      	b.n	8011298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	68b9      	ldr	r1, [r7, #8]
 8011152:	4618      	mov	r0, r3
 8011154:	f000 faf6 	bl	8011744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	699a      	ldr	r2, [r3, #24]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	699a      	ldr	r2, [r3, #24]
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	6999      	ldr	r1, [r3, #24]
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	691b      	ldr	r3, [r3, #16]
 8011182:	021a      	lsls	r2, r3, #8
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	430a      	orrs	r2, r1
 801118a:	619a      	str	r2, [r3, #24]
      break;
 801118c:	e084      	b.n	8011298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	4618      	mov	r0, r3
 8011196:	f000 fb5f 	bl	8011858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	69da      	ldr	r2, [r3, #28]
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f042 0208 	orr.w	r2, r2, #8
 80111a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	69da      	ldr	r2, [r3, #28]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f022 0204 	bic.w	r2, r2, #4
 80111b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	69d9      	ldr	r1, [r3, #28]
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	691a      	ldr	r2, [r3, #16]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	430a      	orrs	r2, r1
 80111ca:	61da      	str	r2, [r3, #28]
      break;
 80111cc:	e064      	b.n	8011298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	68b9      	ldr	r1, [r7, #8]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f000 fbc7 	bl	8011968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	69da      	ldr	r2, [r3, #28]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80111e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	69da      	ldr	r2, [r3, #28]
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80111f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	69d9      	ldr	r1, [r3, #28]
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	021a      	lsls	r2, r3, #8
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	430a      	orrs	r2, r1
 801120c:	61da      	str	r2, [r3, #28]
      break;
 801120e:	e043      	b.n	8011298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68b9      	ldr	r1, [r7, #8]
 8011216:	4618      	mov	r0, r3
 8011218:	f000 fc10 	bl	8011a3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f042 0208 	orr.w	r2, r2, #8
 801122a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f022 0204 	bic.w	r2, r2, #4
 801123a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	691a      	ldr	r2, [r3, #16]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	430a      	orrs	r2, r1
 801124c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801124e:	e023      	b.n	8011298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	68b9      	ldr	r1, [r7, #8]
 8011256:	4618      	mov	r0, r3
 8011258:	f000 fc54 	bl	8011b04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801126a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801127a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	021a      	lsls	r2, r3, #8
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	430a      	orrs	r2, r1
 801128e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011290:	e002      	b.n	8011298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011292:	2301      	movs	r3, #1
 8011294:	75fb      	strb	r3, [r7, #23]
      break;
 8011296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2200      	movs	r2, #0
 801129c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80112a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3718      	adds	r7, #24
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop

080112ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112b6:	2300      	movs	r3, #0
 80112b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d101      	bne.n	80112c8 <HAL_TIM_ConfigClockSource+0x1c>
 80112c4:	2302      	movs	r3, #2
 80112c6:	e0dc      	b.n	8011482 <HAL_TIM_ConfigClockSource+0x1d6>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2201      	movs	r2, #1
 80112cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2202      	movs	r2, #2
 80112d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80112e0:	68ba      	ldr	r2, [r7, #8]
 80112e2:	4b6a      	ldr	r3, [pc, #424]	; (801148c <HAL_TIM_ConfigClockSource+0x1e0>)
 80112e4:	4013      	ands	r3, r2
 80112e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80112ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4a64      	ldr	r2, [pc, #400]	; (8011490 <HAL_TIM_ConfigClockSource+0x1e4>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	f000 80a9 	beq.w	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 8011304:	4a62      	ldr	r2, [pc, #392]	; (8011490 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011306:	4293      	cmp	r3, r2
 8011308:	f200 80ae 	bhi.w	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 801130c:	4a61      	ldr	r2, [pc, #388]	; (8011494 <HAL_TIM_ConfigClockSource+0x1e8>)
 801130e:	4293      	cmp	r3, r2
 8011310:	f000 80a1 	beq.w	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 8011314:	4a5f      	ldr	r2, [pc, #380]	; (8011494 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011316:	4293      	cmp	r3, r2
 8011318:	f200 80a6 	bhi.w	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 801131c:	4a5e      	ldr	r2, [pc, #376]	; (8011498 <HAL_TIM_ConfigClockSource+0x1ec>)
 801131e:	4293      	cmp	r3, r2
 8011320:	f000 8099 	beq.w	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 8011324:	4a5c      	ldr	r2, [pc, #368]	; (8011498 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011326:	4293      	cmp	r3, r2
 8011328:	f200 809e 	bhi.w	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 801132c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011330:	f000 8091 	beq.w	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 8011334:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011338:	f200 8096 	bhi.w	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 801133c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011340:	f000 8089 	beq.w	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 8011344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011348:	f200 808e 	bhi.w	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 801134c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011350:	d03e      	beq.n	80113d0 <HAL_TIM_ConfigClockSource+0x124>
 8011352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011356:	f200 8087 	bhi.w	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 801135a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801135e:	f000 8086 	beq.w	801146e <HAL_TIM_ConfigClockSource+0x1c2>
 8011362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011366:	d87f      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011368:	2b70      	cmp	r3, #112	; 0x70
 801136a:	d01a      	beq.n	80113a2 <HAL_TIM_ConfigClockSource+0xf6>
 801136c:	2b70      	cmp	r3, #112	; 0x70
 801136e:	d87b      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011370:	2b60      	cmp	r3, #96	; 0x60
 8011372:	d050      	beq.n	8011416 <HAL_TIM_ConfigClockSource+0x16a>
 8011374:	2b60      	cmp	r3, #96	; 0x60
 8011376:	d877      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011378:	2b50      	cmp	r3, #80	; 0x50
 801137a:	d03c      	beq.n	80113f6 <HAL_TIM_ConfigClockSource+0x14a>
 801137c:	2b50      	cmp	r3, #80	; 0x50
 801137e:	d873      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011380:	2b40      	cmp	r3, #64	; 0x40
 8011382:	d058      	beq.n	8011436 <HAL_TIM_ConfigClockSource+0x18a>
 8011384:	2b40      	cmp	r3, #64	; 0x40
 8011386:	d86f      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011388:	2b30      	cmp	r3, #48	; 0x30
 801138a:	d064      	beq.n	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 801138c:	2b30      	cmp	r3, #48	; 0x30
 801138e:	d86b      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011390:	2b20      	cmp	r3, #32
 8011392:	d060      	beq.n	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 8011394:	2b20      	cmp	r3, #32
 8011396:	d867      	bhi.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
 8011398:	2b00      	cmp	r3, #0
 801139a:	d05c      	beq.n	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 801139c:	2b10      	cmp	r3, #16
 801139e:	d05a      	beq.n	8011456 <HAL_TIM_ConfigClockSource+0x1aa>
 80113a0:	e062      	b.n	8011468 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6818      	ldr	r0, [r3, #0]
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	6899      	ldr	r1, [r3, #8]
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	f000 fc8b 	bl	8011ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	689b      	ldr	r3, [r3, #8]
 80113bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80113c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	609a      	str	r2, [r3, #8]
      break;
 80113ce:	e04f      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6818      	ldr	r0, [r3, #0]
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	6899      	ldr	r1, [r3, #8]
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	f000 fc74 	bl	8011ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	689a      	ldr	r2, [r3, #8]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113f2:	609a      	str	r2, [r3, #8]
      break;
 80113f4:	e03c      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	6859      	ldr	r1, [r3, #4]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	461a      	mov	r2, r3
 8011404:	f000 fbe4 	bl	8011bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2150      	movs	r1, #80	; 0x50
 801140e:	4618      	mov	r0, r3
 8011410:	f000 fc3e 	bl	8011c90 <TIM_ITRx_SetConfig>
      break;
 8011414:	e02c      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6818      	ldr	r0, [r3, #0]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	6859      	ldr	r1, [r3, #4]
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	461a      	mov	r2, r3
 8011424:	f000 fc03 	bl	8011c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2160      	movs	r1, #96	; 0x60
 801142e:	4618      	mov	r0, r3
 8011430:	f000 fc2e 	bl	8011c90 <TIM_ITRx_SetConfig>
      break;
 8011434:	e01c      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6818      	ldr	r0, [r3, #0]
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	6859      	ldr	r1, [r3, #4]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	461a      	mov	r2, r3
 8011444:	f000 fbc4 	bl	8011bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2140      	movs	r1, #64	; 0x40
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fc1e 	bl	8011c90 <TIM_ITRx_SetConfig>
      break;
 8011454:	e00c      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4619      	mov	r1, r3
 8011460:	4610      	mov	r0, r2
 8011462:	f000 fc15 	bl	8011c90 <TIM_ITRx_SetConfig>
      break;
 8011466:	e003      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011468:	2301      	movs	r3, #1
 801146a:	73fb      	strb	r3, [r7, #15]
      break;
 801146c:	e000      	b.n	8011470 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801146e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2201      	movs	r2, #1
 8011474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2200      	movs	r2, #0
 801147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011480:	7bfb      	ldrb	r3, [r7, #15]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	ffceff88 	.word	0xffceff88
 8011490:	00100040 	.word	0x00100040
 8011494:	00100030 	.word	0x00100030
 8011498:	00100020 	.word	0x00100020

0801149c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80114b8:	bf00      	nop
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80114cc:	bf00      	nop
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	4a46      	ldr	r2, [pc, #280]	; (8011604 <TIM_Base_SetConfig+0x12c>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d013      	beq.n	8011518 <TIM_Base_SetConfig+0x40>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114f6:	d00f      	beq.n	8011518 <TIM_Base_SetConfig+0x40>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	4a43      	ldr	r2, [pc, #268]	; (8011608 <TIM_Base_SetConfig+0x130>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d00b      	beq.n	8011518 <TIM_Base_SetConfig+0x40>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4a42      	ldr	r2, [pc, #264]	; (801160c <TIM_Base_SetConfig+0x134>)
 8011504:	4293      	cmp	r3, r2
 8011506:	d007      	beq.n	8011518 <TIM_Base_SetConfig+0x40>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	4a41      	ldr	r2, [pc, #260]	; (8011610 <TIM_Base_SetConfig+0x138>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d003      	beq.n	8011518 <TIM_Base_SetConfig+0x40>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4a40      	ldr	r2, [pc, #256]	; (8011614 <TIM_Base_SetConfig+0x13c>)
 8011514:	4293      	cmp	r3, r2
 8011516:	d108      	bne.n	801152a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801151e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	68fa      	ldr	r2, [r7, #12]
 8011526:	4313      	orrs	r3, r2
 8011528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4a35      	ldr	r2, [pc, #212]	; (8011604 <TIM_Base_SetConfig+0x12c>)
 801152e:	4293      	cmp	r3, r2
 8011530:	d01f      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011538:	d01b      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4a32      	ldr	r2, [pc, #200]	; (8011608 <TIM_Base_SetConfig+0x130>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d017      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4a31      	ldr	r2, [pc, #196]	; (801160c <TIM_Base_SetConfig+0x134>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d013      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4a30      	ldr	r2, [pc, #192]	; (8011610 <TIM_Base_SetConfig+0x138>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d00f      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4a2f      	ldr	r2, [pc, #188]	; (8011614 <TIM_Base_SetConfig+0x13c>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d00b      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4a2e      	ldr	r2, [pc, #184]	; (8011618 <TIM_Base_SetConfig+0x140>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d007      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4a2d      	ldr	r2, [pc, #180]	; (801161c <TIM_Base_SetConfig+0x144>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d003      	beq.n	8011572 <TIM_Base_SetConfig+0x9a>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4a2c      	ldr	r2, [pc, #176]	; (8011620 <TIM_Base_SetConfig+0x148>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d108      	bne.n	8011584 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	4313      	orrs	r3, r2
 8011582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	695b      	ldr	r3, [r3, #20]
 801158e:	4313      	orrs	r3, r2
 8011590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	689a      	ldr	r2, [r3, #8]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4a16      	ldr	r2, [pc, #88]	; (8011604 <TIM_Base_SetConfig+0x12c>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d00f      	beq.n	80115d0 <TIM_Base_SetConfig+0xf8>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	4a18      	ldr	r2, [pc, #96]	; (8011614 <TIM_Base_SetConfig+0x13c>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d00b      	beq.n	80115d0 <TIM_Base_SetConfig+0xf8>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	4a17      	ldr	r2, [pc, #92]	; (8011618 <TIM_Base_SetConfig+0x140>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d007      	beq.n	80115d0 <TIM_Base_SetConfig+0xf8>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	4a16      	ldr	r2, [pc, #88]	; (801161c <TIM_Base_SetConfig+0x144>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d003      	beq.n	80115d0 <TIM_Base_SetConfig+0xf8>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	4a15      	ldr	r2, [pc, #84]	; (8011620 <TIM_Base_SetConfig+0x148>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d103      	bne.n	80115d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	691a      	ldr	r2, [r3, #16]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2201      	movs	r2, #1
 80115dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	691b      	ldr	r3, [r3, #16]
 80115e2:	f003 0301 	and.w	r3, r3, #1
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d105      	bne.n	80115f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	691b      	ldr	r3, [r3, #16]
 80115ee:	f023 0201 	bic.w	r2, r3, #1
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	611a      	str	r2, [r3, #16]
  }
}
 80115f6:	bf00      	nop
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	40010000 	.word	0x40010000
 8011608:	40000400 	.word	0x40000400
 801160c:	40000800 	.word	0x40000800
 8011610:	40000c00 	.word	0x40000c00
 8011614:	40010400 	.word	0x40010400
 8011618:	40014000 	.word	0x40014000
 801161c:	40014400 	.word	0x40014400
 8011620:	40014800 	.word	0x40014800

08011624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011624:	b480      	push	{r7}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a1b      	ldr	r3, [r3, #32]
 8011632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6a1b      	ldr	r3, [r3, #32]
 8011638:	f023 0201 	bic.w	r2, r3, #1
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	699b      	ldr	r3, [r3, #24]
 801164a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	4b37      	ldr	r3, [pc, #220]	; (801172c <TIM_OC1_SetConfig+0x108>)
 8011650:	4013      	ands	r3, r2
 8011652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f023 0303 	bic.w	r3, r3, #3
 801165a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	4313      	orrs	r3, r2
 8011664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	f023 0302 	bic.w	r3, r3, #2
 801166c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	4313      	orrs	r3, r2
 8011676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	4a2d      	ldr	r2, [pc, #180]	; (8011730 <TIM_OC1_SetConfig+0x10c>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d00f      	beq.n	80116a0 <TIM_OC1_SetConfig+0x7c>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	4a2c      	ldr	r2, [pc, #176]	; (8011734 <TIM_OC1_SetConfig+0x110>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d00b      	beq.n	80116a0 <TIM_OC1_SetConfig+0x7c>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	4a2b      	ldr	r2, [pc, #172]	; (8011738 <TIM_OC1_SetConfig+0x114>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d007      	beq.n	80116a0 <TIM_OC1_SetConfig+0x7c>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4a2a      	ldr	r2, [pc, #168]	; (801173c <TIM_OC1_SetConfig+0x118>)
 8011694:	4293      	cmp	r3, r2
 8011696:	d003      	beq.n	80116a0 <TIM_OC1_SetConfig+0x7c>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	4a29      	ldr	r2, [pc, #164]	; (8011740 <TIM_OC1_SetConfig+0x11c>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d10c      	bne.n	80116ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	f023 0308 	bic.w	r3, r3, #8
 80116a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	697a      	ldr	r2, [r7, #20]
 80116ae:	4313      	orrs	r3, r2
 80116b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	f023 0304 	bic.w	r3, r3, #4
 80116b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4a1c      	ldr	r2, [pc, #112]	; (8011730 <TIM_OC1_SetConfig+0x10c>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d00f      	beq.n	80116e2 <TIM_OC1_SetConfig+0xbe>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4a1b      	ldr	r2, [pc, #108]	; (8011734 <TIM_OC1_SetConfig+0x110>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d00b      	beq.n	80116e2 <TIM_OC1_SetConfig+0xbe>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	4a1a      	ldr	r2, [pc, #104]	; (8011738 <TIM_OC1_SetConfig+0x114>)
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d007      	beq.n	80116e2 <TIM_OC1_SetConfig+0xbe>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	4a19      	ldr	r2, [pc, #100]	; (801173c <TIM_OC1_SetConfig+0x118>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d003      	beq.n	80116e2 <TIM_OC1_SetConfig+0xbe>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4a18      	ldr	r2, [pc, #96]	; (8011740 <TIM_OC1_SetConfig+0x11c>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d111      	bne.n	8011706 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80116e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80116f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	693a      	ldr	r2, [r7, #16]
 80116f8:	4313      	orrs	r3, r2
 80116fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	693a      	ldr	r2, [r7, #16]
 8011702:	4313      	orrs	r3, r2
 8011704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	693a      	ldr	r2, [r7, #16]
 801170a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	68fa      	ldr	r2, [r7, #12]
 8011710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	685a      	ldr	r2, [r3, #4]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	697a      	ldr	r2, [r7, #20]
 801171e:	621a      	str	r2, [r3, #32]
}
 8011720:	bf00      	nop
 8011722:	371c      	adds	r7, #28
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	fffeff8f 	.word	0xfffeff8f
 8011730:	40010000 	.word	0x40010000
 8011734:	40010400 	.word	0x40010400
 8011738:	40014000 	.word	0x40014000
 801173c:	40014400 	.word	0x40014400
 8011740:	40014800 	.word	0x40014800

08011744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011744:	b480      	push	{r7}
 8011746:	b087      	sub	sp, #28
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a1b      	ldr	r3, [r3, #32]
 8011752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6a1b      	ldr	r3, [r3, #32]
 8011758:	f023 0210 	bic.w	r2, r3, #16
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	699b      	ldr	r3, [r3, #24]
 801176a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	4b34      	ldr	r3, [pc, #208]	; (8011840 <TIM_OC2_SetConfig+0xfc>)
 8011770:	4013      	ands	r3, r2
 8011772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801177a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	021b      	lsls	r3, r3, #8
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	4313      	orrs	r3, r2
 8011786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	f023 0320 	bic.w	r3, r3, #32
 801178e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	689b      	ldr	r3, [r3, #8]
 8011794:	011b      	lsls	r3, r3, #4
 8011796:	697a      	ldr	r2, [r7, #20]
 8011798:	4313      	orrs	r3, r2
 801179a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4a29      	ldr	r2, [pc, #164]	; (8011844 <TIM_OC2_SetConfig+0x100>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d003      	beq.n	80117ac <TIM_OC2_SetConfig+0x68>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a28      	ldr	r2, [pc, #160]	; (8011848 <TIM_OC2_SetConfig+0x104>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d10d      	bne.n	80117c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	011b      	lsls	r3, r3, #4
 80117ba:	697a      	ldr	r2, [r7, #20]
 80117bc:	4313      	orrs	r3, r2
 80117be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4a1e      	ldr	r2, [pc, #120]	; (8011844 <TIM_OC2_SetConfig+0x100>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d00f      	beq.n	80117f0 <TIM_OC2_SetConfig+0xac>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a1d      	ldr	r2, [pc, #116]	; (8011848 <TIM_OC2_SetConfig+0x104>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d00b      	beq.n	80117f0 <TIM_OC2_SetConfig+0xac>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a1c      	ldr	r2, [pc, #112]	; (801184c <TIM_OC2_SetConfig+0x108>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d007      	beq.n	80117f0 <TIM_OC2_SetConfig+0xac>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4a1b      	ldr	r2, [pc, #108]	; (8011850 <TIM_OC2_SetConfig+0x10c>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d003      	beq.n	80117f0 <TIM_OC2_SetConfig+0xac>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4a1a      	ldr	r2, [pc, #104]	; (8011854 <TIM_OC2_SetConfig+0x110>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d113      	bne.n	8011818 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80117f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	695b      	ldr	r3, [r3, #20]
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	693a      	ldr	r2, [r7, #16]
 8011808:	4313      	orrs	r3, r2
 801180a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	699b      	ldr	r3, [r3, #24]
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	693a      	ldr	r2, [r7, #16]
 8011814:	4313      	orrs	r3, r2
 8011816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	693a      	ldr	r2, [r7, #16]
 801181c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	685a      	ldr	r2, [r3, #4]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	697a      	ldr	r2, [r7, #20]
 8011830:	621a      	str	r2, [r3, #32]
}
 8011832:	bf00      	nop
 8011834:	371c      	adds	r7, #28
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop
 8011840:	feff8fff 	.word	0xfeff8fff
 8011844:	40010000 	.word	0x40010000
 8011848:	40010400 	.word	0x40010400
 801184c:	40014000 	.word	0x40014000
 8011850:	40014400 	.word	0x40014400
 8011854:	40014800 	.word	0x40014800

08011858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011858:	b480      	push	{r7}
 801185a:	b087      	sub	sp, #28
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6a1b      	ldr	r3, [r3, #32]
 8011866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6a1b      	ldr	r3, [r3, #32]
 801186c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	69db      	ldr	r3, [r3, #28]
 801187e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	4b33      	ldr	r3, [pc, #204]	; (8011950 <TIM_OC3_SetConfig+0xf8>)
 8011884:	4013      	ands	r3, r2
 8011886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f023 0303 	bic.w	r3, r3, #3
 801188e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	4313      	orrs	r3, r2
 8011898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80118a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	021b      	lsls	r3, r3, #8
 80118a8:	697a      	ldr	r2, [r7, #20]
 80118aa:	4313      	orrs	r3, r2
 80118ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	4a28      	ldr	r2, [pc, #160]	; (8011954 <TIM_OC3_SetConfig+0xfc>)
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d003      	beq.n	80118be <TIM_OC3_SetConfig+0x66>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4a27      	ldr	r2, [pc, #156]	; (8011958 <TIM_OC3_SetConfig+0x100>)
 80118ba:	4293      	cmp	r3, r2
 80118bc:	d10d      	bne.n	80118da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	021b      	lsls	r3, r3, #8
 80118cc:	697a      	ldr	r2, [r7, #20]
 80118ce:	4313      	orrs	r3, r2
 80118d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80118d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4a1d      	ldr	r2, [pc, #116]	; (8011954 <TIM_OC3_SetConfig+0xfc>)
 80118de:	4293      	cmp	r3, r2
 80118e0:	d00f      	beq.n	8011902 <TIM_OC3_SetConfig+0xaa>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4a1c      	ldr	r2, [pc, #112]	; (8011958 <TIM_OC3_SetConfig+0x100>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d00b      	beq.n	8011902 <TIM_OC3_SetConfig+0xaa>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4a1b      	ldr	r2, [pc, #108]	; (801195c <TIM_OC3_SetConfig+0x104>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d007      	beq.n	8011902 <TIM_OC3_SetConfig+0xaa>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4a1a      	ldr	r2, [pc, #104]	; (8011960 <TIM_OC3_SetConfig+0x108>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d003      	beq.n	8011902 <TIM_OC3_SetConfig+0xaa>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	4a19      	ldr	r2, [pc, #100]	; (8011964 <TIM_OC3_SetConfig+0x10c>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d113      	bne.n	801192a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	695b      	ldr	r3, [r3, #20]
 8011916:	011b      	lsls	r3, r3, #4
 8011918:	693a      	ldr	r2, [r7, #16]
 801191a:	4313      	orrs	r3, r2
 801191c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	699b      	ldr	r3, [r3, #24]
 8011922:	011b      	lsls	r3, r3, #4
 8011924:	693a      	ldr	r2, [r7, #16]
 8011926:	4313      	orrs	r3, r2
 8011928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	693a      	ldr	r2, [r7, #16]
 801192e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	68fa      	ldr	r2, [r7, #12]
 8011934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	685a      	ldr	r2, [r3, #4]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	697a      	ldr	r2, [r7, #20]
 8011942:	621a      	str	r2, [r3, #32]
}
 8011944:	bf00      	nop
 8011946:	371c      	adds	r7, #28
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	fffeff8f 	.word	0xfffeff8f
 8011954:	40010000 	.word	0x40010000
 8011958:	40010400 	.word	0x40010400
 801195c:	40014000 	.word	0x40014000
 8011960:	40014400 	.word	0x40014400
 8011964:	40014800 	.word	0x40014800

08011968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011968:	b480      	push	{r7}
 801196a:	b087      	sub	sp, #28
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6a1b      	ldr	r3, [r3, #32]
 8011976:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a1b      	ldr	r3, [r3, #32]
 801197c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	69db      	ldr	r3, [r3, #28]
 801198e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011990:	68fa      	ldr	r2, [r7, #12]
 8011992:	4b24      	ldr	r3, [pc, #144]	; (8011a24 <TIM_OC4_SetConfig+0xbc>)
 8011994:	4013      	ands	r3, r2
 8011996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801199e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	021b      	lsls	r3, r3, #8
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	4313      	orrs	r3, r2
 80119aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80119b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	031b      	lsls	r3, r3, #12
 80119ba:	693a      	ldr	r2, [r7, #16]
 80119bc:	4313      	orrs	r3, r2
 80119be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4a19      	ldr	r2, [pc, #100]	; (8011a28 <TIM_OC4_SetConfig+0xc0>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d00f      	beq.n	80119e8 <TIM_OC4_SetConfig+0x80>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	4a18      	ldr	r2, [pc, #96]	; (8011a2c <TIM_OC4_SetConfig+0xc4>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d00b      	beq.n	80119e8 <TIM_OC4_SetConfig+0x80>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4a17      	ldr	r2, [pc, #92]	; (8011a30 <TIM_OC4_SetConfig+0xc8>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d007      	beq.n	80119e8 <TIM_OC4_SetConfig+0x80>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4a16      	ldr	r2, [pc, #88]	; (8011a34 <TIM_OC4_SetConfig+0xcc>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d003      	beq.n	80119e8 <TIM_OC4_SetConfig+0x80>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4a15      	ldr	r2, [pc, #84]	; (8011a38 <TIM_OC4_SetConfig+0xd0>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d109      	bne.n	80119fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80119ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	695b      	ldr	r3, [r3, #20]
 80119f4:	019b      	lsls	r3, r3, #6
 80119f6:	697a      	ldr	r2, [r7, #20]
 80119f8:	4313      	orrs	r3, r2
 80119fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	697a      	ldr	r2, [r7, #20]
 8011a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	685a      	ldr	r2, [r3, #4]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	693a      	ldr	r2, [r7, #16]
 8011a14:	621a      	str	r2, [r3, #32]
}
 8011a16:	bf00      	nop
 8011a18:	371c      	adds	r7, #28
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	feff8fff 	.word	0xfeff8fff
 8011a28:	40010000 	.word	0x40010000
 8011a2c:	40010400 	.word	0x40010400
 8011a30:	40014000 	.word	0x40014000
 8011a34:	40014400 	.word	0x40014400
 8011a38:	40014800 	.word	0x40014800

08011a3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b087      	sub	sp, #28
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a1b      	ldr	r3, [r3, #32]
 8011a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a1b      	ldr	r3, [r3, #32]
 8011a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011a64:	68fa      	ldr	r2, [r7, #12]
 8011a66:	4b21      	ldr	r3, [pc, #132]	; (8011aec <TIM_OC5_SetConfig+0xb0>)
 8011a68:	4013      	ands	r3, r2
 8011a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	4313      	orrs	r3, r2
 8011a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011a7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	041b      	lsls	r3, r3, #16
 8011a84:	693a      	ldr	r2, [r7, #16]
 8011a86:	4313      	orrs	r3, r2
 8011a88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	4a18      	ldr	r2, [pc, #96]	; (8011af0 <TIM_OC5_SetConfig+0xb4>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d00f      	beq.n	8011ab2 <TIM_OC5_SetConfig+0x76>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4a17      	ldr	r2, [pc, #92]	; (8011af4 <TIM_OC5_SetConfig+0xb8>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d00b      	beq.n	8011ab2 <TIM_OC5_SetConfig+0x76>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	4a16      	ldr	r2, [pc, #88]	; (8011af8 <TIM_OC5_SetConfig+0xbc>)
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d007      	beq.n	8011ab2 <TIM_OC5_SetConfig+0x76>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	4a15      	ldr	r2, [pc, #84]	; (8011afc <TIM_OC5_SetConfig+0xc0>)
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d003      	beq.n	8011ab2 <TIM_OC5_SetConfig+0x76>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4a14      	ldr	r2, [pc, #80]	; (8011b00 <TIM_OC5_SetConfig+0xc4>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d109      	bne.n	8011ac6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	695b      	ldr	r3, [r3, #20]
 8011abe:	021b      	lsls	r3, r3, #8
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	697a      	ldr	r2, [r7, #20]
 8011aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	685a      	ldr	r2, [r3, #4]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	693a      	ldr	r2, [r7, #16]
 8011ade:	621a      	str	r2, [r3, #32]
}
 8011ae0:	bf00      	nop
 8011ae2:	371c      	adds	r7, #28
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr
 8011aec:	fffeff8f 	.word	0xfffeff8f
 8011af0:	40010000 	.word	0x40010000
 8011af4:	40010400 	.word	0x40010400
 8011af8:	40014000 	.word	0x40014000
 8011afc:	40014400 	.word	0x40014400
 8011b00:	40014800 	.word	0x40014800

08011b04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b087      	sub	sp, #28
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6a1b      	ldr	r3, [r3, #32]
 8011b12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6a1b      	ldr	r3, [r3, #32]
 8011b18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	4b22      	ldr	r3, [pc, #136]	; (8011bb8 <TIM_OC6_SetConfig+0xb4>)
 8011b30:	4013      	ands	r3, r2
 8011b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	021b      	lsls	r3, r3, #8
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	051b      	lsls	r3, r3, #20
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	4313      	orrs	r3, r2
 8011b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4a19      	ldr	r2, [pc, #100]	; (8011bbc <TIM_OC6_SetConfig+0xb8>)
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d00f      	beq.n	8011b7c <TIM_OC6_SetConfig+0x78>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	4a18      	ldr	r2, [pc, #96]	; (8011bc0 <TIM_OC6_SetConfig+0xbc>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d00b      	beq.n	8011b7c <TIM_OC6_SetConfig+0x78>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	4a17      	ldr	r2, [pc, #92]	; (8011bc4 <TIM_OC6_SetConfig+0xc0>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d007      	beq.n	8011b7c <TIM_OC6_SetConfig+0x78>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	4a16      	ldr	r2, [pc, #88]	; (8011bc8 <TIM_OC6_SetConfig+0xc4>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d003      	beq.n	8011b7c <TIM_OC6_SetConfig+0x78>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	4a15      	ldr	r2, [pc, #84]	; (8011bcc <TIM_OC6_SetConfig+0xc8>)
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d109      	bne.n	8011b90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	695b      	ldr	r3, [r3, #20]
 8011b88:	029b      	lsls	r3, r3, #10
 8011b8a:	697a      	ldr	r2, [r7, #20]
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	697a      	ldr	r2, [r7, #20]
 8011b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	685a      	ldr	r2, [r3, #4]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	693a      	ldr	r2, [r7, #16]
 8011ba8:	621a      	str	r2, [r3, #32]
}
 8011baa:	bf00      	nop
 8011bac:	371c      	adds	r7, #28
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	feff8fff 	.word	0xfeff8fff
 8011bbc:	40010000 	.word	0x40010000
 8011bc0:	40010400 	.word	0x40010400
 8011bc4:	40014000 	.word	0x40014000
 8011bc8:	40014400 	.word	0x40014400
 8011bcc:	40014800 	.word	0x40014800

08011bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b087      	sub	sp, #28
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6a1b      	ldr	r3, [r3, #32]
 8011be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6a1b      	ldr	r3, [r3, #32]
 8011be6:	f023 0201 	bic.w	r2, r3, #1
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	011b      	lsls	r3, r3, #4
 8011c00:	693a      	ldr	r2, [r7, #16]
 8011c02:	4313      	orrs	r3, r2
 8011c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	f023 030a 	bic.w	r3, r3, #10
 8011c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011c0e:	697a      	ldr	r2, [r7, #20]
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	4313      	orrs	r3, r2
 8011c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	693a      	ldr	r2, [r7, #16]
 8011c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	697a      	ldr	r2, [r7, #20]
 8011c20:	621a      	str	r2, [r3, #32]
}
 8011c22:	bf00      	nop
 8011c24:	371c      	adds	r7, #28
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr

08011c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c2e:	b480      	push	{r7}
 8011c30:	b087      	sub	sp, #28
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	60f8      	str	r0, [r7, #12]
 8011c36:	60b9      	str	r1, [r7, #8]
 8011c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6a1b      	ldr	r3, [r3, #32]
 8011c3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6a1b      	ldr	r3, [r3, #32]
 8011c44:	f023 0210 	bic.w	r2, r3, #16
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	699b      	ldr	r3, [r3, #24]
 8011c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	031b      	lsls	r3, r3, #12
 8011c5e:	693a      	ldr	r2, [r7, #16]
 8011c60:	4313      	orrs	r3, r2
 8011c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	011b      	lsls	r3, r3, #4
 8011c70:	697a      	ldr	r2, [r7, #20]
 8011c72:	4313      	orrs	r3, r2
 8011c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	693a      	ldr	r2, [r7, #16]
 8011c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	621a      	str	r2, [r3, #32]
}
 8011c82:	bf00      	nop
 8011c84:	371c      	adds	r7, #28
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr
	...

08011c90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	4b09      	ldr	r3, [pc, #36]	; (8011cc8 <TIM_ITRx_SetConfig+0x38>)
 8011ca4:	4013      	ands	r3, r2
 8011ca6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	f043 0307 	orr.w	r3, r3, #7
 8011cb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	609a      	str	r2, [r3, #8]
}
 8011cba:	bf00      	nop
 8011cbc:	3714      	adds	r7, #20
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr
 8011cc6:	bf00      	nop
 8011cc8:	ffcfff8f 	.word	0xffcfff8f

08011ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b087      	sub	sp, #28
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	021a      	lsls	r2, r3, #8
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	431a      	orrs	r2, r3
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	697a      	ldr	r2, [r7, #20]
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	609a      	str	r2, [r3, #8]
}
 8011d00:	bf00      	nop
 8011d02:	371c      	adds	r7, #28
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr

08011d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b087      	sub	sp, #28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	60b9      	str	r1, [r7, #8]
 8011d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	f003 031f 	and.w	r3, r3, #31
 8011d1e:	2201      	movs	r2, #1
 8011d20:	fa02 f303 	lsl.w	r3, r2, r3
 8011d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	6a1a      	ldr	r2, [r3, #32]
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	43db      	mvns	r3, r3
 8011d2e:	401a      	ands	r2, r3
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6a1a      	ldr	r2, [r3, #32]
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	f003 031f 	and.w	r3, r3, #31
 8011d3e:	6879      	ldr	r1, [r7, #4]
 8011d40:	fa01 f303 	lsl.w	r3, r1, r3
 8011d44:	431a      	orrs	r2, r3
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	621a      	str	r2, [r3, #32]
}
 8011d4a:	bf00      	nop
 8011d4c:	371c      	adds	r7, #28
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
	...

08011d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d101      	bne.n	8011d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	e06d      	b.n	8011e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2201      	movs	r2, #1
 8011d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2202      	movs	r2, #2
 8011d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	689b      	ldr	r3, [r3, #8]
 8011d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a30      	ldr	r2, [pc, #192]	; (8011e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d004      	beq.n	8011da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4a2f      	ldr	r2, [pc, #188]	; (8011e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d108      	bne.n	8011db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	4313      	orrs	r3, r2
 8011db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a20      	ldr	r2, [pc, #128]	; (8011e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d022      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011de2:	d01d      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a1d      	ldr	r2, [pc, #116]	; (8011e60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d018      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	4a1c      	ldr	r2, [pc, #112]	; (8011e64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011df4:	4293      	cmp	r3, r2
 8011df6:	d013      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a1a      	ldr	r2, [pc, #104]	; (8011e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d00e      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a15      	ldr	r2, [pc, #84]	; (8011e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d009      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a16      	ldr	r2, [pc, #88]	; (8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d004      	beq.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a15      	ldr	r2, [pc, #84]	; (8011e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d10c      	bne.n	8011e3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	4313      	orrs	r3, r2
 8011e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3714      	adds	r7, #20
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr
 8011e58:	40010000 	.word	0x40010000
 8011e5c:	40010400 	.word	0x40010400
 8011e60:	40000400 	.word	0x40000400
 8011e64:	40000800 	.word	0x40000800
 8011e68:	40000c00 	.word	0x40000c00
 8011e6c:	40001800 	.word	0x40001800
 8011e70:	40014000 	.word	0x40014000

08011e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d101      	bne.n	8011e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	e065      	b.n	8011f5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2201      	movs	r2, #1
 8011e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	4313      	orrs	r3, r2
 8011ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	689b      	ldr	r3, [r3, #8]
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	691b      	ldr	r3, [r3, #16]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	695b      	ldr	r3, [r3, #20]
 8011ee8:	4313      	orrs	r3, r2
 8011eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef6:	4313      	orrs	r3, r2
 8011ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	699b      	ldr	r3, [r3, #24]
 8011f04:	041b      	lsls	r3, r3, #16
 8011f06:	4313      	orrs	r3, r2
 8011f08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	4a16      	ldr	r2, [pc, #88]	; (8011f68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011f10:	4293      	cmp	r3, r2
 8011f12:	d004      	beq.n	8011f1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a14      	ldr	r2, [pc, #80]	; (8011f6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d115      	bne.n	8011f4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f28:	051b      	lsls	r3, r3, #20
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	69db      	ldr	r3, [r3, #28]
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	4313      	orrs	r3, r2
 8011f48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011f5a:	2300      	movs	r3, #0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3714      	adds	r7, #20
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr
 8011f68:	40010000 	.word	0x40010000
 8011f6c:	40010400 	.word	0x40010400

08011f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011f78:	bf00      	nop
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011f8c:	bf00      	nop
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011fa0:	bf00      	nop
 8011fa2:	370c      	adds	r7, #12
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr

08011fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d101      	bne.n	8011fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	e042      	b.n	8012044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7f1 fd43 	bl	8003a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2224      	movs	r2, #36	; 0x24
 8011fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f022 0201 	bic.w	r2, r2, #1
 8011fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d002      	beq.n	8011ffc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f001 fbc2 	bl	8013780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 fe57 	bl	8012cb0 <UART_SetConfig>
 8012002:	4603      	mov	r3, r0
 8012004:	2b01      	cmp	r3, #1
 8012006:	d101      	bne.n	801200c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012008:	2301      	movs	r3, #1
 801200a:	e01b      	b.n	8012044 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	685a      	ldr	r2, [r3, #4]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801201a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	689a      	ldr	r2, [r3, #8]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801202a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f042 0201 	orr.w	r2, r2, #1
 801203a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f001 fc41 	bl	80138c4 <UART_CheckIdleState>
 8012042:	4603      	mov	r3, r0
}
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b08a      	sub	sp, #40	; 0x28
 8012050:	af02      	add	r7, sp, #8
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	603b      	str	r3, [r7, #0]
 8012058:	4613      	mov	r3, r2
 801205a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012062:	2b20      	cmp	r3, #32
 8012064:	d17b      	bne.n	801215e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <HAL_UART_Transmit+0x26>
 801206c:	88fb      	ldrh	r3, [r7, #6]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d101      	bne.n	8012076 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012072:	2301      	movs	r3, #1
 8012074:	e074      	b.n	8012160 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2221      	movs	r2, #33	; 0x21
 8012082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012086:	f7f2 f867 	bl	8004158 <HAL_GetTick>
 801208a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	88fa      	ldrh	r2, [r7, #6]
 8012090:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	88fa      	ldrh	r2, [r7, #6]
 8012098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120a4:	d108      	bne.n	80120b8 <HAL_UART_Transmit+0x6c>
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	691b      	ldr	r3, [r3, #16]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d104      	bne.n	80120b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80120ae:	2300      	movs	r3, #0
 80120b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	61bb      	str	r3, [r7, #24]
 80120b6:	e003      	b.n	80120c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80120bc:	2300      	movs	r3, #0
 80120be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80120c0:	e030      	b.n	8012124 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	2200      	movs	r2, #0
 80120ca:	2180      	movs	r1, #128	; 0x80
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f001 fca3 	bl	8013a18 <UART_WaitOnFlagUntilTimeout>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d005      	beq.n	80120e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2220      	movs	r2, #32
 80120dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80120e0:	2303      	movs	r3, #3
 80120e2:	e03d      	b.n	8012160 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d10b      	bne.n	8012102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	461a      	mov	r2, r3
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80120f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	3302      	adds	r3, #2
 80120fe:	61bb      	str	r3, [r7, #24]
 8012100:	e007      	b.n	8012112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	781a      	ldrb	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	3301      	adds	r3, #1
 8012110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012118:	b29b      	uxth	r3, r3
 801211a:	3b01      	subs	r3, #1
 801211c:	b29a      	uxth	r2, r3
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801212a:	b29b      	uxth	r3, r3
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1c8      	bne.n	80120c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	9300      	str	r3, [sp, #0]
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	2200      	movs	r2, #0
 8012138:	2140      	movs	r1, #64	; 0x40
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f001 fc6c 	bl	8013a18 <UART_WaitOnFlagUntilTimeout>
 8012140:	4603      	mov	r3, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d005      	beq.n	8012152 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2220      	movs	r2, #32
 801214a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801214e:	2303      	movs	r3, #3
 8012150:	e006      	b.n	8012160 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2220      	movs	r2, #32
 8012156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801215a:	2300      	movs	r3, #0
 801215c:	e000      	b.n	8012160 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801215e:	2302      	movs	r3, #2
  }
}
 8012160:	4618      	mov	r0, r3
 8012162:	3720      	adds	r7, #32
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b08a      	sub	sp, #40	; 0x28
 801216c:	af02      	add	r7, sp, #8
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	603b      	str	r3, [r7, #0]
 8012174:	4613      	mov	r3, r2
 8012176:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801217e:	2b20      	cmp	r3, #32
 8012180:	f040 80b5 	bne.w	80122ee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d002      	beq.n	8012190 <HAL_UART_Receive+0x28>
 801218a:	88fb      	ldrh	r3, [r7, #6]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8012190:	2301      	movs	r3, #1
 8012192:	e0ad      	b.n	80122f0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2200      	movs	r2, #0
 8012198:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2222      	movs	r2, #34	; 0x22
 80121a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2200      	movs	r2, #0
 80121a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80121aa:	f7f1 ffd5 	bl	8004158 <HAL_GetTick>
 80121ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	88fa      	ldrh	r2, [r7, #6]
 80121b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	88fa      	ldrh	r2, [r7, #6]
 80121bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121c8:	d10e      	bne.n	80121e8 <HAL_UART_Receive+0x80>
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	691b      	ldr	r3, [r3, #16]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d105      	bne.n	80121de <HAL_UART_Receive+0x76>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80121d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121dc:	e02d      	b.n	801223a <HAL_UART_Receive+0xd2>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	22ff      	movs	r2, #255	; 0xff
 80121e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121e6:	e028      	b.n	801223a <HAL_UART_Receive+0xd2>
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10d      	bne.n	801220c <HAL_UART_Receive+0xa4>
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	691b      	ldr	r3, [r3, #16]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d104      	bne.n	8012202 <HAL_UART_Receive+0x9a>
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	22ff      	movs	r2, #255	; 0xff
 80121fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012200:	e01b      	b.n	801223a <HAL_UART_Receive+0xd2>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	227f      	movs	r2, #127	; 0x7f
 8012206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801220a:	e016      	b.n	801223a <HAL_UART_Receive+0xd2>
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	689b      	ldr	r3, [r3, #8]
 8012210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012214:	d10d      	bne.n	8012232 <HAL_UART_Receive+0xca>
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	691b      	ldr	r3, [r3, #16]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d104      	bne.n	8012228 <HAL_UART_Receive+0xc0>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	227f      	movs	r2, #127	; 0x7f
 8012222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012226:	e008      	b.n	801223a <HAL_UART_Receive+0xd2>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	223f      	movs	r2, #63	; 0x3f
 801222c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012230:	e003      	b.n	801223a <HAL_UART_Receive+0xd2>
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2200      	movs	r2, #0
 8012236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012240:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801224a:	d108      	bne.n	801225e <HAL_UART_Receive+0xf6>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	691b      	ldr	r3, [r3, #16]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d104      	bne.n	801225e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8012254:	2300      	movs	r3, #0
 8012256:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	61bb      	str	r3, [r7, #24]
 801225c:	e003      	b.n	8012266 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012262:	2300      	movs	r3, #0
 8012264:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012266:	e036      	b.n	80122d6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2200      	movs	r2, #0
 8012270:	2120      	movs	r1, #32
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f001 fbd0 	bl	8013a18 <UART_WaitOnFlagUntilTimeout>
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d005      	beq.n	801228a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2220      	movs	r2, #32
 8012282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8012286:	2303      	movs	r3, #3
 8012288:	e032      	b.n	80122f0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d10c      	bne.n	80122aa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012296:	b29a      	uxth	r2, r3
 8012298:	8a7b      	ldrh	r3, [r7, #18]
 801229a:	4013      	ands	r3, r2
 801229c:	b29a      	uxth	r2, r3
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	3302      	adds	r3, #2
 80122a6:	61bb      	str	r3, [r7, #24]
 80122a8:	e00c      	b.n	80122c4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b0:	b2da      	uxtb	r2, r3
 80122b2:	8a7b      	ldrh	r3, [r7, #18]
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	4013      	ands	r3, r2
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	3301      	adds	r3, #1
 80122c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	3b01      	subs	r3, #1
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122dc:	b29b      	uxth	r3, r3
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d1c2      	bne.n	8012268 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2220      	movs	r2, #32
 80122e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80122ea:	2300      	movs	r3, #0
 80122ec:	e000      	b.n	80122f0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80122ee:	2302      	movs	r3, #2
  }
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3720      	adds	r7, #32
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b08a      	sub	sp, #40	; 0x28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	4613      	mov	r3, r2
 8012304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801230c:	2b20      	cmp	r3, #32
 801230e:	d137      	bne.n	8012380 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d002      	beq.n	801231c <HAL_UART_Receive_IT+0x24>
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801231c:	2301      	movs	r3, #1
 801231e:	e030      	b.n	8012382 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2200      	movs	r2, #0
 8012324:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a18      	ldr	r2, [pc, #96]	; (801238c <HAL_UART_Receive_IT+0x94>)
 801232c:	4293      	cmp	r3, r2
 801232e:	d01f      	beq.n	8012370 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801233a:	2b00      	cmp	r3, #0
 801233c:	d018      	beq.n	8012370 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	e853 3f00 	ldrex	r3, [r3]
 801234a:	613b      	str	r3, [r7, #16]
   return(result);
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012352:	627b      	str	r3, [r7, #36]	; 0x24
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	461a      	mov	r2, r3
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	623b      	str	r3, [r7, #32]
 801235e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012360:	69f9      	ldr	r1, [r7, #28]
 8012362:	6a3a      	ldr	r2, [r7, #32]
 8012364:	e841 2300 	strex	r3, r2, [r1]
 8012368:	61bb      	str	r3, [r7, #24]
   return(result);
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1e6      	bne.n	801233e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012370:	88fb      	ldrh	r3, [r7, #6]
 8012372:	461a      	mov	r2, r3
 8012374:	68b9      	ldr	r1, [r7, #8]
 8012376:	68f8      	ldr	r0, [r7, #12]
 8012378:	f001 fbbc 	bl	8013af4 <UART_Start_Receive_IT>
 801237c:	4603      	mov	r3, r0
 801237e:	e000      	b.n	8012382 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012380:	2302      	movs	r3, #2
  }
}
 8012382:	4618      	mov	r0, r3
 8012384:	3728      	adds	r7, #40	; 0x28
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	58000c00 	.word	0x58000c00

08012390 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b09a      	sub	sp, #104	; 0x68
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123a0:	e853 3f00 	ldrex	r3, [r3]
 80123a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80123a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123ac:	667b      	str	r3, [r7, #100]	; 0x64
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123b6:	657b      	str	r3, [r7, #84]	; 0x54
 80123b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80123bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80123be:	e841 2300 	strex	r3, r2, [r1]
 80123c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80123c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d1e6      	bne.n	8012398 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	3308      	adds	r3, #8
 80123d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d4:	e853 3f00 	ldrex	r3, [r3]
 80123d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80123da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123dc:	4b46      	ldr	r3, [pc, #280]	; (80124f8 <HAL_UART_AbortReceive+0x168>)
 80123de:	4013      	ands	r3, r2
 80123e0:	663b      	str	r3, [r7, #96]	; 0x60
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	3308      	adds	r3, #8
 80123e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80123ea:	643a      	str	r2, [r7, #64]	; 0x40
 80123ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80123f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123f2:	e841 2300 	strex	r3, r2, [r1]
 80123f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80123f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1e5      	bne.n	80123ca <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012402:	2b01      	cmp	r3, #1
 8012404:	d118      	bne.n	8012438 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	e853 3f00 	ldrex	r3, [r3]
 8012412:	61fb      	str	r3, [r7, #28]
   return(result);
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	f023 0310 	bic.w	r3, r3, #16
 801241a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	461a      	mov	r2, r3
 8012422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012426:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801242a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801242c:	e841 2300 	strex	r3, r2, [r1]
 8012430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012434:	2b00      	cmp	r3, #0
 8012436:	d1e6      	bne.n	8012406 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012442:	2b40      	cmp	r3, #64	; 0x40
 8012444:	d13b      	bne.n	80124be <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	3308      	adds	r3, #8
 801244c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	e853 3f00 	ldrex	r3, [r3]
 8012454:	60bb      	str	r3, [r7, #8]
   return(result);
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801245c:	65bb      	str	r3, [r7, #88]	; 0x58
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	3308      	adds	r3, #8
 8012464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012466:	61ba      	str	r2, [r7, #24]
 8012468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246a:	6979      	ldr	r1, [r7, #20]
 801246c:	69ba      	ldr	r2, [r7, #24]
 801246e:	e841 2300 	strex	r3, r2, [r1]
 8012472:	613b      	str	r3, [r7, #16]
   return(result);
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d1e5      	bne.n	8012446 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012480:	2b00      	cmp	r3, #0
 8012482:	d01c      	beq.n	80124be <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801248a:	2200      	movs	r2, #0
 801248c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012494:	4618      	mov	r0, r3
 8012496:	f7f4 fd4d 	bl	8006f34 <HAL_DMA_Abort>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00e      	beq.n	80124be <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7f6 f9e0 	bl	800886c <HAL_DMA_GetError>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b20      	cmp	r3, #32
 80124b0:	d105      	bne.n	80124be <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2210      	movs	r2, #16
 80124b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80124ba:	2303      	movs	r3, #3
 80124bc:	e017      	b.n	80124ee <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2200      	movs	r2, #0
 80124c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	220f      	movs	r2, #15
 80124cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	699a      	ldr	r2, [r3, #24]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f042 0208 	orr.w	r2, r2, #8
 80124dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2220      	movs	r2, #32
 80124e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2200      	movs	r2, #0
 80124ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80124ec:	2300      	movs	r3, #0
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3768      	adds	r7, #104	; 0x68
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	effffffe 	.word	0xeffffffe

080124fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b0ba      	sub	sp, #232	; 0xe8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	69db      	ldr	r3, [r3, #28]
 801250a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012526:	f640 030f 	movw	r3, #2063	; 0x80f
 801252a:	4013      	ands	r3, r2
 801252c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012534:	2b00      	cmp	r3, #0
 8012536:	d11b      	bne.n	8012570 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801253c:	f003 0320 	and.w	r3, r3, #32
 8012540:	2b00      	cmp	r3, #0
 8012542:	d015      	beq.n	8012570 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012548:	f003 0320 	and.w	r3, r3, #32
 801254c:	2b00      	cmp	r3, #0
 801254e:	d105      	bne.n	801255c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d009      	beq.n	8012570 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 8377 	beq.w	8012c54 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	4798      	blx	r3
      }
      return;
 801256e:	e371      	b.n	8012c54 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 8123 	beq.w	80127c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801257a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801257e:	4b8d      	ldr	r3, [pc, #564]	; (80127b4 <HAL_UART_IRQHandler+0x2b8>)
 8012580:	4013      	ands	r3, r2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d106      	bne.n	8012594 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801258a:	4b8b      	ldr	r3, [pc, #556]	; (80127b8 <HAL_UART_IRQHandler+0x2bc>)
 801258c:	4013      	ands	r3, r2
 801258e:	2b00      	cmp	r3, #0
 8012590:	f000 8116 	beq.w	80127c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	2b00      	cmp	r3, #0
 801259e:	d011      	beq.n	80125c4 <HAL_UART_IRQHandler+0xc8>
 80125a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d00b      	beq.n	80125c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	2201      	movs	r2, #1
 80125b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125ba:	f043 0201 	orr.w	r2, r3, #1
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125c8:	f003 0302 	and.w	r3, r3, #2
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d011      	beq.n	80125f4 <HAL_UART_IRQHandler+0xf8>
 80125d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125d4:	f003 0301 	and.w	r3, r3, #1
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00b      	beq.n	80125f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2202      	movs	r2, #2
 80125e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125ea:	f043 0204 	orr.w	r2, r3, #4
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125f8:	f003 0304 	and.w	r3, r3, #4
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d011      	beq.n	8012624 <HAL_UART_IRQHandler+0x128>
 8012600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012604:	f003 0301 	and.w	r3, r3, #1
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00b      	beq.n	8012624 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	2204      	movs	r2, #4
 8012612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801261a:	f043 0202 	orr.w	r2, r3, #2
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012628:	f003 0308 	and.w	r3, r3, #8
 801262c:	2b00      	cmp	r3, #0
 801262e:	d017      	beq.n	8012660 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012634:	f003 0320 	and.w	r3, r3, #32
 8012638:	2b00      	cmp	r3, #0
 801263a:	d105      	bne.n	8012648 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801263c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012640:	4b5c      	ldr	r3, [pc, #368]	; (80127b4 <HAL_UART_IRQHandler+0x2b8>)
 8012642:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00b      	beq.n	8012660 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2208      	movs	r2, #8
 801264e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012656:	f043 0208 	orr.w	r2, r3, #8
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012668:	2b00      	cmp	r3, #0
 801266a:	d012      	beq.n	8012692 <HAL_UART_IRQHandler+0x196>
 801266c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00c      	beq.n	8012692 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012688:	f043 0220 	orr.w	r2, r3, #32
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 82dd 	beq.w	8012c58 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126a2:	f003 0320 	and.w	r3, r3, #32
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d013      	beq.n	80126d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80126aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126ae:	f003 0320 	and.w	r3, r3, #32
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d105      	bne.n	80126c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80126b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d007      	beq.n	80126d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d003      	beq.n	80126d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	689b      	ldr	r3, [r3, #8]
 80126e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126e6:	2b40      	cmp	r3, #64	; 0x40
 80126e8:	d005      	beq.n	80126f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80126ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80126ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d054      	beq.n	80127a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f001 fb1e 	bl	8013d38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012706:	2b40      	cmp	r3, #64	; 0x40
 8012708:	d146      	bne.n	8012798 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	3308      	adds	r3, #8
 8012710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012718:	e853 3f00 	ldrex	r3, [r3]
 801271c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	3308      	adds	r3, #8
 8012732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012736:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801273a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801273e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012746:	e841 2300 	strex	r3, r2, [r1]
 801274a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801274e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1d9      	bne.n	801270a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801275c:	2b00      	cmp	r3, #0
 801275e:	d017      	beq.n	8012790 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012766:	4a15      	ldr	r2, [pc, #84]	; (80127bc <HAL_UART_IRQHandler+0x2c0>)
 8012768:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012770:	4618      	mov	r0, r3
 8012772:	f7f4 fefd 	bl	8007570 <HAL_DMA_Abort_IT>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d019      	beq.n	80127b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801278a:	4610      	mov	r0, r2
 801278c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801278e:	e00f      	b.n	80127b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 fa77 	bl	8012c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012796:	e00b      	b.n	80127b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 fa73 	bl	8012c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801279e:	e007      	b.n	80127b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 fa6f 	bl	8012c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2200      	movs	r2, #0
 80127aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80127ae:	e253      	b.n	8012c58 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127b0:	bf00      	nop
    return;
 80127b2:	e251      	b.n	8012c58 <HAL_UART_IRQHandler+0x75c>
 80127b4:	10000001 	.word	0x10000001
 80127b8:	04000120 	.word	0x04000120
 80127bc:	08013e05 	.word	0x08013e05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	f040 81e7 	bne.w	8012b98 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80127ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127ce:	f003 0310 	and.w	r3, r3, #16
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f000 81e0 	beq.w	8012b98 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80127d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127dc:	f003 0310 	and.w	r3, r3, #16
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	f000 81d9 	beq.w	8012b98 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2210      	movs	r2, #16
 80127ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127f8:	2b40      	cmp	r3, #64	; 0x40
 80127fa:	f040 8151 	bne.w	8012aa0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4a96      	ldr	r2, [pc, #600]	; (8012a60 <HAL_UART_IRQHandler+0x564>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d068      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a93      	ldr	r2, [pc, #588]	; (8012a64 <HAL_UART_IRQHandler+0x568>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d061      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	4a91      	ldr	r2, [pc, #580]	; (8012a68 <HAL_UART_IRQHandler+0x56c>)
 8012824:	4293      	cmp	r3, r2
 8012826:	d05a      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4a8e      	ldr	r2, [pc, #568]	; (8012a6c <HAL_UART_IRQHandler+0x570>)
 8012832:	4293      	cmp	r3, r2
 8012834:	d053      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a8c      	ldr	r2, [pc, #560]	; (8012a70 <HAL_UART_IRQHandler+0x574>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d04c      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a89      	ldr	r2, [pc, #548]	; (8012a74 <HAL_UART_IRQHandler+0x578>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d045      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	4a87      	ldr	r2, [pc, #540]	; (8012a78 <HAL_UART_IRQHandler+0x57c>)
 801285c:	4293      	cmp	r3, r2
 801285e:	d03e      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4a84      	ldr	r2, [pc, #528]	; (8012a7c <HAL_UART_IRQHandler+0x580>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d037      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4a82      	ldr	r2, [pc, #520]	; (8012a80 <HAL_UART_IRQHandler+0x584>)
 8012878:	4293      	cmp	r3, r2
 801287a:	d030      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4a7f      	ldr	r2, [pc, #508]	; (8012a84 <HAL_UART_IRQHandler+0x588>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d029      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4a7d      	ldr	r2, [pc, #500]	; (8012a88 <HAL_UART_IRQHandler+0x58c>)
 8012894:	4293      	cmp	r3, r2
 8012896:	d022      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4a7a      	ldr	r2, [pc, #488]	; (8012a8c <HAL_UART_IRQHandler+0x590>)
 80128a2:	4293      	cmp	r3, r2
 80128a4:	d01b      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	4a78      	ldr	r2, [pc, #480]	; (8012a90 <HAL_UART_IRQHandler+0x594>)
 80128b0:	4293      	cmp	r3, r2
 80128b2:	d014      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a75      	ldr	r2, [pc, #468]	; (8012a94 <HAL_UART_IRQHandler+0x598>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d00d      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	4a73      	ldr	r2, [pc, #460]	; (8012a98 <HAL_UART_IRQHandler+0x59c>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d006      	beq.n	80128de <HAL_UART_IRQHandler+0x3e2>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a70      	ldr	r2, [pc, #448]	; (8012a9c <HAL_UART_IRQHandler+0x5a0>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d106      	bne.n	80128ec <HAL_UART_IRQHandler+0x3f0>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	e005      	b.n	80128f8 <HAL_UART_IRQHandler+0x3fc>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80128fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012900:	2b00      	cmp	r3, #0
 8012902:	f000 81ab 	beq.w	8012c5c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801290c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012910:	429a      	cmp	r2, r3
 8012912:	f080 81a3 	bcs.w	8012c5c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801291c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012926:	69db      	ldr	r3, [r3, #28]
 8012928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801292c:	f000 8087 	beq.w	8012a3e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801293c:	e853 3f00 	ldrex	r3, [r3]
 8012940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801294c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	461a      	mov	r2, r3
 8012956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801295a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801295e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012962:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012966:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801296a:	e841 2300 	strex	r3, r2, [r1]
 801296e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012976:	2b00      	cmp	r3, #0
 8012978:	d1da      	bne.n	8012930 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3308      	adds	r3, #8
 8012980:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012984:	e853 3f00 	ldrex	r3, [r3]
 8012988:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801298a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801298c:	f023 0301 	bic.w	r3, r3, #1
 8012990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3308      	adds	r3, #8
 801299a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801299e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80129a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80129a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80129aa:	e841 2300 	strex	r3, r2, [r1]
 80129ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80129b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1e1      	bne.n	801297a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	3308      	adds	r3, #8
 80129bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129c0:	e853 3f00 	ldrex	r3, [r3]
 80129c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80129c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	3308      	adds	r3, #8
 80129d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80129da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80129dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80129e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129e2:	e841 2300 	strex	r3, r2, [r1]
 80129e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80129e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d1e3      	bne.n	80129b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2220      	movs	r2, #32
 80129f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2200      	movs	r2, #0
 80129fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a04:	e853 3f00 	ldrex	r3, [r3]
 8012a08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a0c:	f023 0310 	bic.w	r3, r3, #16
 8012a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	461a      	mov	r2, r3
 8012a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012a20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a26:	e841 2300 	strex	r3, r2, [r1]
 8012a2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1e4      	bne.n	80129fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f4 fa7b 	bl	8006f34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2202      	movs	r2, #2
 8012a42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	1ad3      	subs	r3, r2, r3
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4619      	mov	r1, r3
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 f91d 	bl	8012c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012a5e:	e0fd      	b.n	8012c5c <HAL_UART_IRQHandler+0x760>
 8012a60:	40020010 	.word	0x40020010
 8012a64:	40020028 	.word	0x40020028
 8012a68:	40020040 	.word	0x40020040
 8012a6c:	40020058 	.word	0x40020058
 8012a70:	40020070 	.word	0x40020070
 8012a74:	40020088 	.word	0x40020088
 8012a78:	400200a0 	.word	0x400200a0
 8012a7c:	400200b8 	.word	0x400200b8
 8012a80:	40020410 	.word	0x40020410
 8012a84:	40020428 	.word	0x40020428
 8012a88:	40020440 	.word	0x40020440
 8012a8c:	40020458 	.word	0x40020458
 8012a90:	40020470 	.word	0x40020470
 8012a94:	40020488 	.word	0x40020488
 8012a98:	400204a0 	.word	0x400204a0
 8012a9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	1ad3      	subs	r3, r2, r3
 8012ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	f000 80cf 	beq.w	8012c60 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012ac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 80ca 	beq.w	8012c60 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad4:	e853 3f00 	ldrex	r3, [r3]
 8012ad8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	461a      	mov	r2, r3
 8012aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012aee:	647b      	str	r3, [r7, #68]	; 0x44
 8012af0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012af6:	e841 2300 	strex	r3, r2, [r1]
 8012afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d1e4      	bne.n	8012acc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	3308      	adds	r3, #8
 8012b08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	e853 3f00 	ldrex	r3, [r3]
 8012b10:	623b      	str	r3, [r7, #32]
   return(result);
 8012b12:	6a3a      	ldr	r2, [r7, #32]
 8012b14:	4b55      	ldr	r3, [pc, #340]	; (8012c6c <HAL_UART_IRQHandler+0x770>)
 8012b16:	4013      	ands	r3, r2
 8012b18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	3308      	adds	r3, #8
 8012b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012b26:	633a      	str	r2, [r7, #48]	; 0x30
 8012b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b2e:	e841 2300 	strex	r3, r2, [r1]
 8012b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d1e3      	bne.n	8012b02 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2220      	movs	r2, #32
 8012b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2200      	movs	r2, #0
 8012b46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	e853 3f00 	ldrex	r3, [r3]
 8012b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	f023 0310 	bic.w	r3, r3, #16
 8012b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012b70:	61fb      	str	r3, [r7, #28]
 8012b72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b74:	69b9      	ldr	r1, [r7, #24]
 8012b76:	69fa      	ldr	r2, [r7, #28]
 8012b78:	e841 2300 	strex	r3, r2, [r1]
 8012b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d1e4      	bne.n	8012b4e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2202      	movs	r2, #2
 8012b88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012b8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012b8e:	4619      	mov	r1, r3
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f000 f881 	bl	8012c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b96:	e063      	b.n	8012c60 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00e      	beq.n	8012bc2 <HAL_UART_IRQHandler+0x6c6>
 8012ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d008      	beq.n	8012bc2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f001 fe80 	bl	80148c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012bc0:	e051      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d014      	beq.n	8012bf8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d105      	bne.n	8012be6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d008      	beq.n	8012bf8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d03a      	beq.n	8012c64 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	4798      	blx	r3
    }
    return;
 8012bf6:	e035      	b.n	8012c64 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d009      	beq.n	8012c18 <HAL_UART_IRQHandler+0x71c>
 8012c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d003      	beq.n	8012c18 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f001 f90d 	bl	8013e30 <UART_EndTransmit_IT>
    return;
 8012c16:	e026      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d009      	beq.n	8012c38 <HAL_UART_IRQHandler+0x73c>
 8012c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d003      	beq.n	8012c38 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f001 fe59 	bl	80148e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c36:	e016      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d010      	beq.n	8012c66 <HAL_UART_IRQHandler+0x76a>
 8012c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	da0c      	bge.n	8012c66 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f001 fe41 	bl	80148d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c52:	e008      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
      return;
 8012c54:	bf00      	nop
 8012c56:	e006      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
    return;
 8012c58:	bf00      	nop
 8012c5a:	e004      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
      return;
 8012c5c:	bf00      	nop
 8012c5e:	e002      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
      return;
 8012c60:	bf00      	nop
 8012c62:	e000      	b.n	8012c66 <HAL_UART_IRQHandler+0x76a>
    return;
 8012c64:	bf00      	nop
  }
}
 8012c66:	37e8      	adds	r7, #232	; 0xe8
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	effffffe 	.word	0xeffffffe

08012c70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012ca4:	bf00      	nop
 8012ca6:	370c      	adds	r7, #12
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr

08012cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012cb4:	b092      	sub	sp, #72	; 0x48
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	689a      	ldr	r2, [r3, #8]
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	431a      	orrs	r2, r3
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	695b      	ldr	r3, [r3, #20]
 8012cce:	431a      	orrs	r2, r3
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	69db      	ldr	r3, [r3, #28]
 8012cd4:	4313      	orrs	r3, r2
 8012cd6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	4bbe      	ldr	r3, [pc, #760]	; (8012fd8 <UART_SetConfig+0x328>)
 8012ce0:	4013      	ands	r3, r2
 8012ce2:	697a      	ldr	r2, [r7, #20]
 8012ce4:	6812      	ldr	r2, [r2, #0]
 8012ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ce8:	430b      	orrs	r3, r1
 8012cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	68da      	ldr	r2, [r3, #12]
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	430a      	orrs	r2, r1
 8012d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	699b      	ldr	r3, [r3, #24]
 8012d06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4ab3      	ldr	r2, [pc, #716]	; (8012fdc <UART_SetConfig+0x32c>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d004      	beq.n	8012d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	6a1b      	ldr	r3, [r3, #32]
 8012d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	689a      	ldr	r2, [r3, #8]
 8012d22:	4baf      	ldr	r3, [pc, #700]	; (8012fe0 <UART_SetConfig+0x330>)
 8012d24:	4013      	ands	r3, r2
 8012d26:	697a      	ldr	r2, [r7, #20]
 8012d28:	6812      	ldr	r2, [r2, #0]
 8012d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d2c:	430b      	orrs	r3, r1
 8012d2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d36:	f023 010f 	bic.w	r1, r3, #15
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	430a      	orrs	r2, r1
 8012d44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4aa6      	ldr	r2, [pc, #664]	; (8012fe4 <UART_SetConfig+0x334>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d177      	bne.n	8012e40 <UART_SetConfig+0x190>
 8012d50:	4ba5      	ldr	r3, [pc, #660]	; (8012fe8 <UART_SetConfig+0x338>)
 8012d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d58:	2b28      	cmp	r3, #40	; 0x28
 8012d5a:	d86d      	bhi.n	8012e38 <UART_SetConfig+0x188>
 8012d5c:	a201      	add	r2, pc, #4	; (adr r2, 8012d64 <UART_SetConfig+0xb4>)
 8012d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d62:	bf00      	nop
 8012d64:	08012e09 	.word	0x08012e09
 8012d68:	08012e39 	.word	0x08012e39
 8012d6c:	08012e39 	.word	0x08012e39
 8012d70:	08012e39 	.word	0x08012e39
 8012d74:	08012e39 	.word	0x08012e39
 8012d78:	08012e39 	.word	0x08012e39
 8012d7c:	08012e39 	.word	0x08012e39
 8012d80:	08012e39 	.word	0x08012e39
 8012d84:	08012e11 	.word	0x08012e11
 8012d88:	08012e39 	.word	0x08012e39
 8012d8c:	08012e39 	.word	0x08012e39
 8012d90:	08012e39 	.word	0x08012e39
 8012d94:	08012e39 	.word	0x08012e39
 8012d98:	08012e39 	.word	0x08012e39
 8012d9c:	08012e39 	.word	0x08012e39
 8012da0:	08012e39 	.word	0x08012e39
 8012da4:	08012e19 	.word	0x08012e19
 8012da8:	08012e39 	.word	0x08012e39
 8012dac:	08012e39 	.word	0x08012e39
 8012db0:	08012e39 	.word	0x08012e39
 8012db4:	08012e39 	.word	0x08012e39
 8012db8:	08012e39 	.word	0x08012e39
 8012dbc:	08012e39 	.word	0x08012e39
 8012dc0:	08012e39 	.word	0x08012e39
 8012dc4:	08012e21 	.word	0x08012e21
 8012dc8:	08012e39 	.word	0x08012e39
 8012dcc:	08012e39 	.word	0x08012e39
 8012dd0:	08012e39 	.word	0x08012e39
 8012dd4:	08012e39 	.word	0x08012e39
 8012dd8:	08012e39 	.word	0x08012e39
 8012ddc:	08012e39 	.word	0x08012e39
 8012de0:	08012e39 	.word	0x08012e39
 8012de4:	08012e29 	.word	0x08012e29
 8012de8:	08012e39 	.word	0x08012e39
 8012dec:	08012e39 	.word	0x08012e39
 8012df0:	08012e39 	.word	0x08012e39
 8012df4:	08012e39 	.word	0x08012e39
 8012df8:	08012e39 	.word	0x08012e39
 8012dfc:	08012e39 	.word	0x08012e39
 8012e00:	08012e39 	.word	0x08012e39
 8012e04:	08012e31 	.word	0x08012e31
 8012e08:	2301      	movs	r3, #1
 8012e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e0e:	e222      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e10:	2304      	movs	r3, #4
 8012e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e16:	e21e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e18:	2308      	movs	r3, #8
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e1e:	e21a      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e20:	2310      	movs	r3, #16
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e26:	e216      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e28:	2320      	movs	r3, #32
 8012e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e2e:	e212      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e30:	2340      	movs	r3, #64	; 0x40
 8012e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e36:	e20e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e38:	2380      	movs	r3, #128	; 0x80
 8012e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e3e:	e20a      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a69      	ldr	r2, [pc, #420]	; (8012fec <UART_SetConfig+0x33c>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d130      	bne.n	8012eac <UART_SetConfig+0x1fc>
 8012e4a:	4b67      	ldr	r3, [pc, #412]	; (8012fe8 <UART_SetConfig+0x338>)
 8012e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e4e:	f003 0307 	and.w	r3, r3, #7
 8012e52:	2b05      	cmp	r3, #5
 8012e54:	d826      	bhi.n	8012ea4 <UART_SetConfig+0x1f4>
 8012e56:	a201      	add	r2, pc, #4	; (adr r2, 8012e5c <UART_SetConfig+0x1ac>)
 8012e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e5c:	08012e75 	.word	0x08012e75
 8012e60:	08012e7d 	.word	0x08012e7d
 8012e64:	08012e85 	.word	0x08012e85
 8012e68:	08012e8d 	.word	0x08012e8d
 8012e6c:	08012e95 	.word	0x08012e95
 8012e70:	08012e9d 	.word	0x08012e9d
 8012e74:	2300      	movs	r3, #0
 8012e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e7a:	e1ec      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e7c:	2304      	movs	r3, #4
 8012e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e82:	e1e8      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e84:	2308      	movs	r3, #8
 8012e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e8a:	e1e4      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e8c:	2310      	movs	r3, #16
 8012e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e92:	e1e0      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e94:	2320      	movs	r3, #32
 8012e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e9a:	e1dc      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012e9c:	2340      	movs	r3, #64	; 0x40
 8012e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ea2:	e1d8      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012ea4:	2380      	movs	r3, #128	; 0x80
 8012ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eaa:	e1d4      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4a4f      	ldr	r2, [pc, #316]	; (8012ff0 <UART_SetConfig+0x340>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d130      	bne.n	8012f18 <UART_SetConfig+0x268>
 8012eb6:	4b4c      	ldr	r3, [pc, #304]	; (8012fe8 <UART_SetConfig+0x338>)
 8012eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eba:	f003 0307 	and.w	r3, r3, #7
 8012ebe:	2b05      	cmp	r3, #5
 8012ec0:	d826      	bhi.n	8012f10 <UART_SetConfig+0x260>
 8012ec2:	a201      	add	r2, pc, #4	; (adr r2, 8012ec8 <UART_SetConfig+0x218>)
 8012ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ec8:	08012ee1 	.word	0x08012ee1
 8012ecc:	08012ee9 	.word	0x08012ee9
 8012ed0:	08012ef1 	.word	0x08012ef1
 8012ed4:	08012ef9 	.word	0x08012ef9
 8012ed8:	08012f01 	.word	0x08012f01
 8012edc:	08012f09 	.word	0x08012f09
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ee6:	e1b6      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012ee8:	2304      	movs	r3, #4
 8012eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eee:	e1b2      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012ef0:	2308      	movs	r3, #8
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ef6:	e1ae      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012ef8:	2310      	movs	r3, #16
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012efe:	e1aa      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f00:	2320      	movs	r3, #32
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f06:	e1a6      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f08:	2340      	movs	r3, #64	; 0x40
 8012f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f0e:	e1a2      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f10:	2380      	movs	r3, #128	; 0x80
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f16:	e19e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a35      	ldr	r2, [pc, #212]	; (8012ff4 <UART_SetConfig+0x344>)
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d130      	bne.n	8012f84 <UART_SetConfig+0x2d4>
 8012f22:	4b31      	ldr	r3, [pc, #196]	; (8012fe8 <UART_SetConfig+0x338>)
 8012f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f26:	f003 0307 	and.w	r3, r3, #7
 8012f2a:	2b05      	cmp	r3, #5
 8012f2c:	d826      	bhi.n	8012f7c <UART_SetConfig+0x2cc>
 8012f2e:	a201      	add	r2, pc, #4	; (adr r2, 8012f34 <UART_SetConfig+0x284>)
 8012f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f34:	08012f4d 	.word	0x08012f4d
 8012f38:	08012f55 	.word	0x08012f55
 8012f3c:	08012f5d 	.word	0x08012f5d
 8012f40:	08012f65 	.word	0x08012f65
 8012f44:	08012f6d 	.word	0x08012f6d
 8012f48:	08012f75 	.word	0x08012f75
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f52:	e180      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f54:	2304      	movs	r3, #4
 8012f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f5a:	e17c      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f5c:	2308      	movs	r3, #8
 8012f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f62:	e178      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f64:	2310      	movs	r3, #16
 8012f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f6a:	e174      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f6c:	2320      	movs	r3, #32
 8012f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f72:	e170      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f74:	2340      	movs	r3, #64	; 0x40
 8012f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f7a:	e16c      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f7c:	2380      	movs	r3, #128	; 0x80
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f82:	e168      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4a1b      	ldr	r2, [pc, #108]	; (8012ff8 <UART_SetConfig+0x348>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d142      	bne.n	8013014 <UART_SetConfig+0x364>
 8012f8e:	4b16      	ldr	r3, [pc, #88]	; (8012fe8 <UART_SetConfig+0x338>)
 8012f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f92:	f003 0307 	and.w	r3, r3, #7
 8012f96:	2b05      	cmp	r3, #5
 8012f98:	d838      	bhi.n	801300c <UART_SetConfig+0x35c>
 8012f9a:	a201      	add	r2, pc, #4	; (adr r2, 8012fa0 <UART_SetConfig+0x2f0>)
 8012f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa0:	08012fb9 	.word	0x08012fb9
 8012fa4:	08012fc1 	.word	0x08012fc1
 8012fa8:	08012fc9 	.word	0x08012fc9
 8012fac:	08012fd1 	.word	0x08012fd1
 8012fb0:	08012ffd 	.word	0x08012ffd
 8012fb4:	08013005 	.word	0x08013005
 8012fb8:	2300      	movs	r3, #0
 8012fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fbe:	e14a      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012fc0:	2304      	movs	r3, #4
 8012fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fc6:	e146      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012fc8:	2308      	movs	r3, #8
 8012fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fce:	e142      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012fd0:	2310      	movs	r3, #16
 8012fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fd6:	e13e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8012fd8:	cfff69f3 	.word	0xcfff69f3
 8012fdc:	58000c00 	.word	0x58000c00
 8012fe0:	11fff4ff 	.word	0x11fff4ff
 8012fe4:	40011000 	.word	0x40011000
 8012fe8:	58024400 	.word	0x58024400
 8012fec:	40004400 	.word	0x40004400
 8012ff0:	40004800 	.word	0x40004800
 8012ff4:	40004c00 	.word	0x40004c00
 8012ff8:	40005000 	.word	0x40005000
 8012ffc:	2320      	movs	r3, #32
 8012ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013002:	e128      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013004:	2340      	movs	r3, #64	; 0x40
 8013006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801300a:	e124      	b.n	8013256 <UART_SetConfig+0x5a6>
 801300c:	2380      	movs	r3, #128	; 0x80
 801300e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013012:	e120      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4acb      	ldr	r2, [pc, #812]	; (8013348 <UART_SetConfig+0x698>)
 801301a:	4293      	cmp	r3, r2
 801301c:	d176      	bne.n	801310c <UART_SetConfig+0x45c>
 801301e:	4bcb      	ldr	r3, [pc, #812]	; (801334c <UART_SetConfig+0x69c>)
 8013020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013026:	2b28      	cmp	r3, #40	; 0x28
 8013028:	d86c      	bhi.n	8013104 <UART_SetConfig+0x454>
 801302a:	a201      	add	r2, pc, #4	; (adr r2, 8013030 <UART_SetConfig+0x380>)
 801302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013030:	080130d5 	.word	0x080130d5
 8013034:	08013105 	.word	0x08013105
 8013038:	08013105 	.word	0x08013105
 801303c:	08013105 	.word	0x08013105
 8013040:	08013105 	.word	0x08013105
 8013044:	08013105 	.word	0x08013105
 8013048:	08013105 	.word	0x08013105
 801304c:	08013105 	.word	0x08013105
 8013050:	080130dd 	.word	0x080130dd
 8013054:	08013105 	.word	0x08013105
 8013058:	08013105 	.word	0x08013105
 801305c:	08013105 	.word	0x08013105
 8013060:	08013105 	.word	0x08013105
 8013064:	08013105 	.word	0x08013105
 8013068:	08013105 	.word	0x08013105
 801306c:	08013105 	.word	0x08013105
 8013070:	080130e5 	.word	0x080130e5
 8013074:	08013105 	.word	0x08013105
 8013078:	08013105 	.word	0x08013105
 801307c:	08013105 	.word	0x08013105
 8013080:	08013105 	.word	0x08013105
 8013084:	08013105 	.word	0x08013105
 8013088:	08013105 	.word	0x08013105
 801308c:	08013105 	.word	0x08013105
 8013090:	080130ed 	.word	0x080130ed
 8013094:	08013105 	.word	0x08013105
 8013098:	08013105 	.word	0x08013105
 801309c:	08013105 	.word	0x08013105
 80130a0:	08013105 	.word	0x08013105
 80130a4:	08013105 	.word	0x08013105
 80130a8:	08013105 	.word	0x08013105
 80130ac:	08013105 	.word	0x08013105
 80130b0:	080130f5 	.word	0x080130f5
 80130b4:	08013105 	.word	0x08013105
 80130b8:	08013105 	.word	0x08013105
 80130bc:	08013105 	.word	0x08013105
 80130c0:	08013105 	.word	0x08013105
 80130c4:	08013105 	.word	0x08013105
 80130c8:	08013105 	.word	0x08013105
 80130cc:	08013105 	.word	0x08013105
 80130d0:	080130fd 	.word	0x080130fd
 80130d4:	2301      	movs	r3, #1
 80130d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130da:	e0bc      	b.n	8013256 <UART_SetConfig+0x5a6>
 80130dc:	2304      	movs	r3, #4
 80130de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130e2:	e0b8      	b.n	8013256 <UART_SetConfig+0x5a6>
 80130e4:	2308      	movs	r3, #8
 80130e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ea:	e0b4      	b.n	8013256 <UART_SetConfig+0x5a6>
 80130ec:	2310      	movs	r3, #16
 80130ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130f2:	e0b0      	b.n	8013256 <UART_SetConfig+0x5a6>
 80130f4:	2320      	movs	r3, #32
 80130f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130fa:	e0ac      	b.n	8013256 <UART_SetConfig+0x5a6>
 80130fc:	2340      	movs	r3, #64	; 0x40
 80130fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013102:	e0a8      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013104:	2380      	movs	r3, #128	; 0x80
 8013106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801310a:	e0a4      	b.n	8013256 <UART_SetConfig+0x5a6>
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a8f      	ldr	r2, [pc, #572]	; (8013350 <UART_SetConfig+0x6a0>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d130      	bne.n	8013178 <UART_SetConfig+0x4c8>
 8013116:	4b8d      	ldr	r3, [pc, #564]	; (801334c <UART_SetConfig+0x69c>)
 8013118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801311a:	f003 0307 	and.w	r3, r3, #7
 801311e:	2b05      	cmp	r3, #5
 8013120:	d826      	bhi.n	8013170 <UART_SetConfig+0x4c0>
 8013122:	a201      	add	r2, pc, #4	; (adr r2, 8013128 <UART_SetConfig+0x478>)
 8013124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013128:	08013141 	.word	0x08013141
 801312c:	08013149 	.word	0x08013149
 8013130:	08013151 	.word	0x08013151
 8013134:	08013159 	.word	0x08013159
 8013138:	08013161 	.word	0x08013161
 801313c:	08013169 	.word	0x08013169
 8013140:	2300      	movs	r3, #0
 8013142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013146:	e086      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013148:	2304      	movs	r3, #4
 801314a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801314e:	e082      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013150:	2308      	movs	r3, #8
 8013152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013156:	e07e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013158:	2310      	movs	r3, #16
 801315a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801315e:	e07a      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013160:	2320      	movs	r3, #32
 8013162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013166:	e076      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013168:	2340      	movs	r3, #64	; 0x40
 801316a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801316e:	e072      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013170:	2380      	movs	r3, #128	; 0x80
 8013172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013176:	e06e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a75      	ldr	r2, [pc, #468]	; (8013354 <UART_SetConfig+0x6a4>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d130      	bne.n	80131e4 <UART_SetConfig+0x534>
 8013182:	4b72      	ldr	r3, [pc, #456]	; (801334c <UART_SetConfig+0x69c>)
 8013184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013186:	f003 0307 	and.w	r3, r3, #7
 801318a:	2b05      	cmp	r3, #5
 801318c:	d826      	bhi.n	80131dc <UART_SetConfig+0x52c>
 801318e:	a201      	add	r2, pc, #4	; (adr r2, 8013194 <UART_SetConfig+0x4e4>)
 8013190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013194:	080131ad 	.word	0x080131ad
 8013198:	080131b5 	.word	0x080131b5
 801319c:	080131bd 	.word	0x080131bd
 80131a0:	080131c5 	.word	0x080131c5
 80131a4:	080131cd 	.word	0x080131cd
 80131a8:	080131d5 	.word	0x080131d5
 80131ac:	2300      	movs	r3, #0
 80131ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131b2:	e050      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131b4:	2304      	movs	r3, #4
 80131b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ba:	e04c      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131bc:	2308      	movs	r3, #8
 80131be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131c2:	e048      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131c4:	2310      	movs	r3, #16
 80131c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ca:	e044      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131cc:	2320      	movs	r3, #32
 80131ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131d2:	e040      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131d4:	2340      	movs	r3, #64	; 0x40
 80131d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131da:	e03c      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131dc:	2380      	movs	r3, #128	; 0x80
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e2:	e038      	b.n	8013256 <UART_SetConfig+0x5a6>
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4a5b      	ldr	r2, [pc, #364]	; (8013358 <UART_SetConfig+0x6a8>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d130      	bne.n	8013250 <UART_SetConfig+0x5a0>
 80131ee:	4b57      	ldr	r3, [pc, #348]	; (801334c <UART_SetConfig+0x69c>)
 80131f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131f2:	f003 0307 	and.w	r3, r3, #7
 80131f6:	2b05      	cmp	r3, #5
 80131f8:	d826      	bhi.n	8013248 <UART_SetConfig+0x598>
 80131fa:	a201      	add	r2, pc, #4	; (adr r2, 8013200 <UART_SetConfig+0x550>)
 80131fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013200:	08013219 	.word	0x08013219
 8013204:	08013221 	.word	0x08013221
 8013208:	08013229 	.word	0x08013229
 801320c:	08013231 	.word	0x08013231
 8013210:	08013239 	.word	0x08013239
 8013214:	08013241 	.word	0x08013241
 8013218:	2302      	movs	r3, #2
 801321a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801321e:	e01a      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013220:	2304      	movs	r3, #4
 8013222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013226:	e016      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013228:	2308      	movs	r3, #8
 801322a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801322e:	e012      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013230:	2310      	movs	r3, #16
 8013232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013236:	e00e      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013238:	2320      	movs	r3, #32
 801323a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801323e:	e00a      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013240:	2340      	movs	r3, #64	; 0x40
 8013242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013246:	e006      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013248:	2380      	movs	r3, #128	; 0x80
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324e:	e002      	b.n	8013256 <UART_SetConfig+0x5a6>
 8013250:	2380      	movs	r3, #128	; 0x80
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	4a3f      	ldr	r2, [pc, #252]	; (8013358 <UART_SetConfig+0x6a8>)
 801325c:	4293      	cmp	r3, r2
 801325e:	f040 80f8 	bne.w	8013452 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013262:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013266:	2b20      	cmp	r3, #32
 8013268:	dc46      	bgt.n	80132f8 <UART_SetConfig+0x648>
 801326a:	2b02      	cmp	r3, #2
 801326c:	f2c0 8082 	blt.w	8013374 <UART_SetConfig+0x6c4>
 8013270:	3b02      	subs	r3, #2
 8013272:	2b1e      	cmp	r3, #30
 8013274:	d87e      	bhi.n	8013374 <UART_SetConfig+0x6c4>
 8013276:	a201      	add	r2, pc, #4	; (adr r2, 801327c <UART_SetConfig+0x5cc>)
 8013278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327c:	080132ff 	.word	0x080132ff
 8013280:	08013375 	.word	0x08013375
 8013284:	08013307 	.word	0x08013307
 8013288:	08013375 	.word	0x08013375
 801328c:	08013375 	.word	0x08013375
 8013290:	08013375 	.word	0x08013375
 8013294:	08013317 	.word	0x08013317
 8013298:	08013375 	.word	0x08013375
 801329c:	08013375 	.word	0x08013375
 80132a0:	08013375 	.word	0x08013375
 80132a4:	08013375 	.word	0x08013375
 80132a8:	08013375 	.word	0x08013375
 80132ac:	08013375 	.word	0x08013375
 80132b0:	08013375 	.word	0x08013375
 80132b4:	08013327 	.word	0x08013327
 80132b8:	08013375 	.word	0x08013375
 80132bc:	08013375 	.word	0x08013375
 80132c0:	08013375 	.word	0x08013375
 80132c4:	08013375 	.word	0x08013375
 80132c8:	08013375 	.word	0x08013375
 80132cc:	08013375 	.word	0x08013375
 80132d0:	08013375 	.word	0x08013375
 80132d4:	08013375 	.word	0x08013375
 80132d8:	08013375 	.word	0x08013375
 80132dc:	08013375 	.word	0x08013375
 80132e0:	08013375 	.word	0x08013375
 80132e4:	08013375 	.word	0x08013375
 80132e8:	08013375 	.word	0x08013375
 80132ec:	08013375 	.word	0x08013375
 80132f0:	08013375 	.word	0x08013375
 80132f4:	08013367 	.word	0x08013367
 80132f8:	2b40      	cmp	r3, #64	; 0x40
 80132fa:	d037      	beq.n	801336c <UART_SetConfig+0x6bc>
 80132fc:	e03a      	b.n	8013374 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80132fe:	f7fb fc17 	bl	800eb30 <HAL_RCCEx_GetD3PCLK1Freq>
 8013302:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013304:	e03c      	b.n	8013380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801330a:	4618      	mov	r0, r3
 801330c:	f7fb fc26 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013314:	e034      	b.n	8013380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013316:	f107 0318 	add.w	r3, r7, #24
 801331a:	4618      	mov	r0, r3
 801331c:	f7fb fd72 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013324:	e02c      	b.n	8013380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013326:	4b09      	ldr	r3, [pc, #36]	; (801334c <UART_SetConfig+0x69c>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	f003 0320 	and.w	r3, r3, #32
 801332e:	2b00      	cmp	r3, #0
 8013330:	d016      	beq.n	8013360 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013332:	4b06      	ldr	r3, [pc, #24]	; (801334c <UART_SetConfig+0x69c>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	08db      	lsrs	r3, r3, #3
 8013338:	f003 0303 	and.w	r3, r3, #3
 801333c:	4a07      	ldr	r2, [pc, #28]	; (801335c <UART_SetConfig+0x6ac>)
 801333e:	fa22 f303 	lsr.w	r3, r2, r3
 8013342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013344:	e01c      	b.n	8013380 <UART_SetConfig+0x6d0>
 8013346:	bf00      	nop
 8013348:	40011400 	.word	0x40011400
 801334c:	58024400 	.word	0x58024400
 8013350:	40007800 	.word	0x40007800
 8013354:	40007c00 	.word	0x40007c00
 8013358:	58000c00 	.word	0x58000c00
 801335c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013360:	4b9d      	ldr	r3, [pc, #628]	; (80135d8 <UART_SetConfig+0x928>)
 8013362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013364:	e00c      	b.n	8013380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013366:	4b9d      	ldr	r3, [pc, #628]	; (80135dc <UART_SetConfig+0x92c>)
 8013368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801336a:	e009      	b.n	8013380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801336c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013372:	e005      	b.n	8013380 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013374:	2300      	movs	r3, #0
 8013376:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013378:	2301      	movs	r3, #1
 801337a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801337e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013382:	2b00      	cmp	r3, #0
 8013384:	f000 81de 	beq.w	8013744 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338c:	4a94      	ldr	r2, [pc, #592]	; (80135e0 <UART_SetConfig+0x930>)
 801338e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013392:	461a      	mov	r2, r3
 8013394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013396:	fbb3 f3f2 	udiv	r3, r3, r2
 801339a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	685a      	ldr	r2, [r3, #4]
 80133a0:	4613      	mov	r3, r2
 80133a2:	005b      	lsls	r3, r3, #1
 80133a4:	4413      	add	r3, r2
 80133a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d305      	bcc.n	80133b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d903      	bls.n	80133c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80133b8:	2301      	movs	r3, #1
 80133ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80133be:	e1c1      	b.n	8013744 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133c2:	2200      	movs	r2, #0
 80133c4:	60bb      	str	r3, [r7, #8]
 80133c6:	60fa      	str	r2, [r7, #12]
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133cc:	4a84      	ldr	r2, [pc, #528]	; (80135e0 <UART_SetConfig+0x930>)
 80133ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	2200      	movs	r2, #0
 80133d6:	603b      	str	r3, [r7, #0]
 80133d8:	607a      	str	r2, [r7, #4]
 80133da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80133e2:	f7ec ff7d 	bl	80002e0 <__aeabi_uldivmod>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	4610      	mov	r0, r2
 80133ec:	4619      	mov	r1, r3
 80133ee:	f04f 0200 	mov.w	r2, #0
 80133f2:	f04f 0300 	mov.w	r3, #0
 80133f6:	020b      	lsls	r3, r1, #8
 80133f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80133fc:	0202      	lsls	r2, r0, #8
 80133fe:	6979      	ldr	r1, [r7, #20]
 8013400:	6849      	ldr	r1, [r1, #4]
 8013402:	0849      	lsrs	r1, r1, #1
 8013404:	2000      	movs	r0, #0
 8013406:	460c      	mov	r4, r1
 8013408:	4605      	mov	r5, r0
 801340a:	eb12 0804 	adds.w	r8, r2, r4
 801340e:	eb43 0905 	adc.w	r9, r3, r5
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	469a      	mov	sl, r3
 801341a:	4693      	mov	fp, r2
 801341c:	4652      	mov	r2, sl
 801341e:	465b      	mov	r3, fp
 8013420:	4640      	mov	r0, r8
 8013422:	4649      	mov	r1, r9
 8013424:	f7ec ff5c 	bl	80002e0 <__aeabi_uldivmod>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	4613      	mov	r3, r2
 801342e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013436:	d308      	bcc.n	801344a <UART_SetConfig+0x79a>
 8013438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801343a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801343e:	d204      	bcs.n	801344a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013446:	60da      	str	r2, [r3, #12]
 8013448:	e17c      	b.n	8013744 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801344a:	2301      	movs	r3, #1
 801344c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013450:	e178      	b.n	8013744 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	69db      	ldr	r3, [r3, #28]
 8013456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801345a:	f040 80c5 	bne.w	80135e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801345e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013462:	2b20      	cmp	r3, #32
 8013464:	dc48      	bgt.n	80134f8 <UART_SetConfig+0x848>
 8013466:	2b00      	cmp	r3, #0
 8013468:	db7b      	blt.n	8013562 <UART_SetConfig+0x8b2>
 801346a:	2b20      	cmp	r3, #32
 801346c:	d879      	bhi.n	8013562 <UART_SetConfig+0x8b2>
 801346e:	a201      	add	r2, pc, #4	; (adr r2, 8013474 <UART_SetConfig+0x7c4>)
 8013470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013474:	080134ff 	.word	0x080134ff
 8013478:	08013507 	.word	0x08013507
 801347c:	08013563 	.word	0x08013563
 8013480:	08013563 	.word	0x08013563
 8013484:	0801350f 	.word	0x0801350f
 8013488:	08013563 	.word	0x08013563
 801348c:	08013563 	.word	0x08013563
 8013490:	08013563 	.word	0x08013563
 8013494:	0801351f 	.word	0x0801351f
 8013498:	08013563 	.word	0x08013563
 801349c:	08013563 	.word	0x08013563
 80134a0:	08013563 	.word	0x08013563
 80134a4:	08013563 	.word	0x08013563
 80134a8:	08013563 	.word	0x08013563
 80134ac:	08013563 	.word	0x08013563
 80134b0:	08013563 	.word	0x08013563
 80134b4:	0801352f 	.word	0x0801352f
 80134b8:	08013563 	.word	0x08013563
 80134bc:	08013563 	.word	0x08013563
 80134c0:	08013563 	.word	0x08013563
 80134c4:	08013563 	.word	0x08013563
 80134c8:	08013563 	.word	0x08013563
 80134cc:	08013563 	.word	0x08013563
 80134d0:	08013563 	.word	0x08013563
 80134d4:	08013563 	.word	0x08013563
 80134d8:	08013563 	.word	0x08013563
 80134dc:	08013563 	.word	0x08013563
 80134e0:	08013563 	.word	0x08013563
 80134e4:	08013563 	.word	0x08013563
 80134e8:	08013563 	.word	0x08013563
 80134ec:	08013563 	.word	0x08013563
 80134f0:	08013563 	.word	0x08013563
 80134f4:	08013555 	.word	0x08013555
 80134f8:	2b40      	cmp	r3, #64	; 0x40
 80134fa:	d02e      	beq.n	801355a <UART_SetConfig+0x8aa>
 80134fc:	e031      	b.n	8013562 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80134fe:	f7f9 fb1f 	bl	800cb40 <HAL_RCC_GetPCLK1Freq>
 8013502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013504:	e033      	b.n	801356e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013506:	f7f9 fb31 	bl	800cb6c <HAL_RCC_GetPCLK2Freq>
 801350a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801350c:	e02f      	b.n	801356e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013512:	4618      	mov	r0, r3
 8013514:	f7fb fb22 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801351c:	e027      	b.n	801356e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801351e:	f107 0318 	add.w	r3, r7, #24
 8013522:	4618      	mov	r0, r3
 8013524:	f7fb fc6e 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801352c:	e01f      	b.n	801356e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801352e:	4b2d      	ldr	r3, [pc, #180]	; (80135e4 <UART_SetConfig+0x934>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f003 0320 	and.w	r3, r3, #32
 8013536:	2b00      	cmp	r3, #0
 8013538:	d009      	beq.n	801354e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801353a:	4b2a      	ldr	r3, [pc, #168]	; (80135e4 <UART_SetConfig+0x934>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	08db      	lsrs	r3, r3, #3
 8013540:	f003 0303 	and.w	r3, r3, #3
 8013544:	4a24      	ldr	r2, [pc, #144]	; (80135d8 <UART_SetConfig+0x928>)
 8013546:	fa22 f303 	lsr.w	r3, r2, r3
 801354a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801354c:	e00f      	b.n	801356e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801354e:	4b22      	ldr	r3, [pc, #136]	; (80135d8 <UART_SetConfig+0x928>)
 8013550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013552:	e00c      	b.n	801356e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013554:	4b21      	ldr	r3, [pc, #132]	; (80135dc <UART_SetConfig+0x92c>)
 8013556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013558:	e009      	b.n	801356e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801355e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013560:	e005      	b.n	801356e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013562:	2300      	movs	r3, #0
 8013564:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013566:	2301      	movs	r3, #1
 8013568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801356c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801356e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013570:	2b00      	cmp	r3, #0
 8013572:	f000 80e7 	beq.w	8013744 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357a:	4a19      	ldr	r2, [pc, #100]	; (80135e0 <UART_SetConfig+0x930>)
 801357c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013580:	461a      	mov	r2, r3
 8013582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013584:	fbb3 f3f2 	udiv	r3, r3, r2
 8013588:	005a      	lsls	r2, r3, #1
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	085b      	lsrs	r3, r3, #1
 8013590:	441a      	add	r2, r3
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	fbb2 f3f3 	udiv	r3, r2, r3
 801359a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359e:	2b0f      	cmp	r3, #15
 80135a0:	d916      	bls.n	80135d0 <UART_SetConfig+0x920>
 80135a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135a8:	d212      	bcs.n	80135d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80135aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	f023 030f 	bic.w	r3, r3, #15
 80135b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80135b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b6:	085b      	lsrs	r3, r3, #1
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	f003 0307 	and.w	r3, r3, #7
 80135be:	b29a      	uxth	r2, r3
 80135c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80135c2:	4313      	orrs	r3, r2
 80135c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80135cc:	60da      	str	r2, [r3, #12]
 80135ce:	e0b9      	b.n	8013744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80135d0:	2301      	movs	r3, #1
 80135d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80135d6:	e0b5      	b.n	8013744 <UART_SetConfig+0xa94>
 80135d8:	03d09000 	.word	0x03d09000
 80135dc:	003d0900 	.word	0x003d0900
 80135e0:	08018ecc 	.word	0x08018ecc
 80135e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80135e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80135ec:	2b20      	cmp	r3, #32
 80135ee:	dc49      	bgt.n	8013684 <UART_SetConfig+0x9d4>
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	db7c      	blt.n	80136ee <UART_SetConfig+0xa3e>
 80135f4:	2b20      	cmp	r3, #32
 80135f6:	d87a      	bhi.n	80136ee <UART_SetConfig+0xa3e>
 80135f8:	a201      	add	r2, pc, #4	; (adr r2, 8013600 <UART_SetConfig+0x950>)
 80135fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135fe:	bf00      	nop
 8013600:	0801368b 	.word	0x0801368b
 8013604:	08013693 	.word	0x08013693
 8013608:	080136ef 	.word	0x080136ef
 801360c:	080136ef 	.word	0x080136ef
 8013610:	0801369b 	.word	0x0801369b
 8013614:	080136ef 	.word	0x080136ef
 8013618:	080136ef 	.word	0x080136ef
 801361c:	080136ef 	.word	0x080136ef
 8013620:	080136ab 	.word	0x080136ab
 8013624:	080136ef 	.word	0x080136ef
 8013628:	080136ef 	.word	0x080136ef
 801362c:	080136ef 	.word	0x080136ef
 8013630:	080136ef 	.word	0x080136ef
 8013634:	080136ef 	.word	0x080136ef
 8013638:	080136ef 	.word	0x080136ef
 801363c:	080136ef 	.word	0x080136ef
 8013640:	080136bb 	.word	0x080136bb
 8013644:	080136ef 	.word	0x080136ef
 8013648:	080136ef 	.word	0x080136ef
 801364c:	080136ef 	.word	0x080136ef
 8013650:	080136ef 	.word	0x080136ef
 8013654:	080136ef 	.word	0x080136ef
 8013658:	080136ef 	.word	0x080136ef
 801365c:	080136ef 	.word	0x080136ef
 8013660:	080136ef 	.word	0x080136ef
 8013664:	080136ef 	.word	0x080136ef
 8013668:	080136ef 	.word	0x080136ef
 801366c:	080136ef 	.word	0x080136ef
 8013670:	080136ef 	.word	0x080136ef
 8013674:	080136ef 	.word	0x080136ef
 8013678:	080136ef 	.word	0x080136ef
 801367c:	080136ef 	.word	0x080136ef
 8013680:	080136e1 	.word	0x080136e1
 8013684:	2b40      	cmp	r3, #64	; 0x40
 8013686:	d02e      	beq.n	80136e6 <UART_SetConfig+0xa36>
 8013688:	e031      	b.n	80136ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801368a:	f7f9 fa59 	bl	800cb40 <HAL_RCC_GetPCLK1Freq>
 801368e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013690:	e033      	b.n	80136fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013692:	f7f9 fa6b 	bl	800cb6c <HAL_RCC_GetPCLK2Freq>
 8013696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013698:	e02f      	b.n	80136fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801369a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801369e:	4618      	mov	r0, r3
 80136a0:	f7fb fa5c 	bl	800eb5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136a8:	e027      	b.n	80136fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136aa:	f107 0318 	add.w	r3, r7, #24
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fb fba8 	bl	800ee04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136b8:	e01f      	b.n	80136fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136ba:	4b2d      	ldr	r3, [pc, #180]	; (8013770 <UART_SetConfig+0xac0>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f003 0320 	and.w	r3, r3, #32
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d009      	beq.n	80136da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80136c6:	4b2a      	ldr	r3, [pc, #168]	; (8013770 <UART_SetConfig+0xac0>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	08db      	lsrs	r3, r3, #3
 80136cc:	f003 0303 	and.w	r3, r3, #3
 80136d0:	4a28      	ldr	r2, [pc, #160]	; (8013774 <UART_SetConfig+0xac4>)
 80136d2:	fa22 f303 	lsr.w	r3, r2, r3
 80136d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80136d8:	e00f      	b.n	80136fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80136da:	4b26      	ldr	r3, [pc, #152]	; (8013774 <UART_SetConfig+0xac4>)
 80136dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136de:	e00c      	b.n	80136fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136e0:	4b25      	ldr	r3, [pc, #148]	; (8013778 <UART_SetConfig+0xac8>)
 80136e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136e4:	e009      	b.n	80136fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136ec:	e005      	b.n	80136fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80136ee:	2300      	movs	r3, #0
 80136f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80136f2:	2301      	movs	r3, #1
 80136f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80136f8:	bf00      	nop
    }

    if (pclk != 0U)
 80136fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d021      	beq.n	8013744 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013704:	4a1d      	ldr	r2, [pc, #116]	; (801377c <UART_SetConfig+0xacc>)
 8013706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801370a:	461a      	mov	r2, r3
 801370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801370e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	085b      	lsrs	r3, r3, #1
 8013718:	441a      	add	r2, r3
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013722:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013726:	2b0f      	cmp	r3, #15
 8013728:	d909      	bls.n	801373e <UART_SetConfig+0xa8e>
 801372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013730:	d205      	bcs.n	801373e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013734:	b29a      	uxth	r2, r3
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	60da      	str	r2, [r3, #12]
 801373c:	e002      	b.n	8013744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801373e:	2301      	movs	r3, #1
 8013740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	2201      	movs	r2, #1
 8013748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	2201      	movs	r2, #1
 8013750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	2200      	movs	r2, #0
 8013758:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	2200      	movs	r2, #0
 801375e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013760:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013764:	4618      	mov	r0, r3
 8013766:	3748      	adds	r7, #72	; 0x48
 8013768:	46bd      	mov	sp, r7
 801376a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801376e:	bf00      	nop
 8013770:	58024400 	.word	0x58024400
 8013774:	03d09000 	.word	0x03d09000
 8013778:	003d0900 	.word	0x003d0900
 801377c:	08018ecc 	.word	0x08018ecc

08013780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378c:	f003 0308 	and.w	r3, r3, #8
 8013790:	2b00      	cmp	r3, #0
 8013792:	d00a      	beq.n	80137aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	430a      	orrs	r2, r1
 80137a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137ae:	f003 0301 	and.w	r3, r3, #1
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00a      	beq.n	80137cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	430a      	orrs	r2, r1
 80137ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d0:	f003 0302 	and.w	r3, r3, #2
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d00a      	beq.n	80137ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	430a      	orrs	r2, r1
 80137ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137f2:	f003 0304 	and.w	r3, r3, #4
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00a      	beq.n	8013810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	430a      	orrs	r2, r1
 801380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013814:	f003 0310 	and.w	r3, r3, #16
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00a      	beq.n	8013832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	689b      	ldr	r3, [r3, #8]
 8013822:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	430a      	orrs	r2, r1
 8013830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013836:	f003 0320 	and.w	r3, r3, #32
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00a      	beq.n	8013854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	689b      	ldr	r3, [r3, #8]
 8013844:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	430a      	orrs	r2, r1
 8013852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801385c:	2b00      	cmp	r3, #0
 801385e:	d01a      	beq.n	8013896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	430a      	orrs	r2, r1
 8013874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801387a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801387e:	d10a      	bne.n	8013896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	430a      	orrs	r2, r1
 8013894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00a      	beq.n	80138b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	430a      	orrs	r2, r1
 80138b6:	605a      	str	r2, [r3, #4]
  }
}
 80138b8:	bf00      	nop
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b098      	sub	sp, #96	; 0x60
 80138c8:	af02      	add	r7, sp, #8
 80138ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2200      	movs	r2, #0
 80138d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80138d4:	f7f0 fc40 	bl	8004158 <HAL_GetTick>
 80138d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f003 0308 	and.w	r3, r3, #8
 80138e4:	2b08      	cmp	r3, #8
 80138e6:	d12f      	bne.n	8013948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80138e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138f0:	2200      	movs	r2, #0
 80138f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f000 f88e 	bl	8013a18 <UART_WaitOnFlagUntilTimeout>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d022      	beq.n	8013948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801390a:	e853 3f00 	ldrex	r3, [r3]
 801390e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013916:	653b      	str	r3, [r7, #80]	; 0x50
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	461a      	mov	r2, r3
 801391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013920:	647b      	str	r3, [r7, #68]	; 0x44
 8013922:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013924:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013928:	e841 2300 	strex	r3, r2, [r1]
 801392c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013930:	2b00      	cmp	r3, #0
 8013932:	d1e6      	bne.n	8013902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2220      	movs	r2, #32
 8013938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013944:	2303      	movs	r3, #3
 8013946:	e063      	b.n	8013a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	f003 0304 	and.w	r3, r3, #4
 8013952:	2b04      	cmp	r3, #4
 8013954:	d149      	bne.n	80139ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013956:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801395e:	2200      	movs	r2, #0
 8013960:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 f857 	bl	8013a18 <UART_WaitOnFlagUntilTimeout>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d03c      	beq.n	80139ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013978:	e853 3f00 	ldrex	r3, [r3]
 801397c:	623b      	str	r3, [r7, #32]
   return(result);
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	461a      	mov	r2, r3
 801398c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801398e:	633b      	str	r3, [r7, #48]	; 0x30
 8013990:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013996:	e841 2300 	strex	r3, r2, [r1]
 801399a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d1e6      	bne.n	8013970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	3308      	adds	r3, #8
 80139a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	e853 3f00 	ldrex	r3, [r3]
 80139b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f023 0301 	bic.w	r3, r3, #1
 80139b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	3308      	adds	r3, #8
 80139c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139c2:	61fa      	str	r2, [r7, #28]
 80139c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139c6:	69b9      	ldr	r1, [r7, #24]
 80139c8:	69fa      	ldr	r2, [r7, #28]
 80139ca:	e841 2300 	strex	r3, r2, [r1]
 80139ce:	617b      	str	r3, [r7, #20]
   return(result);
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1e5      	bne.n	80139a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2220      	movs	r2, #32
 80139da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2200      	movs	r2, #0
 80139e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139e6:	2303      	movs	r3, #3
 80139e8:	e012      	b.n	8013a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2220      	movs	r2, #32
 80139ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2220      	movs	r2, #32
 80139f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2200      	movs	r2, #0
 80139fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2200      	movs	r2, #0
 8013a04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a0e:	2300      	movs	r3, #0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3758      	adds	r7, #88	; 0x58
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	60b9      	str	r1, [r7, #8]
 8013a22:	603b      	str	r3, [r7, #0]
 8013a24:	4613      	mov	r3, r2
 8013a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a28:	e04f      	b.n	8013aca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a30:	d04b      	beq.n	8013aca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a32:	f7f0 fb91 	bl	8004158 <HAL_GetTick>
 8013a36:	4602      	mov	r2, r0
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	69ba      	ldr	r2, [r7, #24]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d302      	bcc.n	8013a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8013a42:	69bb      	ldr	r3, [r7, #24]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d101      	bne.n	8013a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	e04e      	b.n	8013aea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f003 0304 	and.w	r3, r3, #4
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d037      	beq.n	8013aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	2b80      	cmp	r3, #128	; 0x80
 8013a5e:	d034      	beq.n	8013aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	2b40      	cmp	r3, #64	; 0x40
 8013a64:	d031      	beq.n	8013aca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	69db      	ldr	r3, [r3, #28]
 8013a6c:	f003 0308 	and.w	r3, r3, #8
 8013a70:	2b08      	cmp	r3, #8
 8013a72:	d110      	bne.n	8013a96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2208      	movs	r2, #8
 8013a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f000 f95b 	bl	8013d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2208      	movs	r2, #8
 8013a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8013a92:	2301      	movs	r3, #1
 8013a94:	e029      	b.n	8013aea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	69db      	ldr	r3, [r3, #28]
 8013a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013aa4:	d111      	bne.n	8013aca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	f000 f941 	bl	8013d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2220      	movs	r2, #32
 8013aba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013ac6:	2303      	movs	r3, #3
 8013ac8:	e00f      	b.n	8013aea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	69da      	ldr	r2, [r3, #28]
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	4013      	ands	r3, r2
 8013ad4:	68ba      	ldr	r2, [r7, #8]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	bf0c      	ite	eq
 8013ada:	2301      	moveq	r3, #1
 8013adc:	2300      	movne	r3, #0
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	79fb      	ldrb	r3, [r7, #7]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d0a0      	beq.n	8013a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013ae8:	2300      	movs	r3, #0
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3710      	adds	r7, #16
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
	...

08013af4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013af4:	b480      	push	{r7}
 8013af6:	b0a3      	sub	sp, #140	; 0x8c
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	4613      	mov	r3, r2
 8013b00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	68ba      	ldr	r2, [r7, #8]
 8013b06:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	88fa      	ldrh	r2, [r7, #6]
 8013b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	88fa      	ldrh	r2, [r7, #6]
 8013b14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	689b      	ldr	r3, [r3, #8]
 8013b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b26:	d10e      	bne.n	8013b46 <UART_Start_Receive_IT+0x52>
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	691b      	ldr	r3, [r3, #16]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d105      	bne.n	8013b3c <UART_Start_Receive_IT+0x48>
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013b36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b3a:	e02d      	b.n	8013b98 <UART_Start_Receive_IT+0xa4>
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	22ff      	movs	r2, #255	; 0xff
 8013b40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b44:	e028      	b.n	8013b98 <UART_Start_Receive_IT+0xa4>
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	689b      	ldr	r3, [r3, #8]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d10d      	bne.n	8013b6a <UART_Start_Receive_IT+0x76>
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	691b      	ldr	r3, [r3, #16]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d104      	bne.n	8013b60 <UART_Start_Receive_IT+0x6c>
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	22ff      	movs	r2, #255	; 0xff
 8013b5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b5e:	e01b      	b.n	8013b98 <UART_Start_Receive_IT+0xa4>
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	227f      	movs	r2, #127	; 0x7f
 8013b64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b68:	e016      	b.n	8013b98 <UART_Start_Receive_IT+0xa4>
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013b72:	d10d      	bne.n	8013b90 <UART_Start_Receive_IT+0x9c>
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	691b      	ldr	r3, [r3, #16]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d104      	bne.n	8013b86 <UART_Start_Receive_IT+0x92>
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	227f      	movs	r2, #127	; 0x7f
 8013b80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b84:	e008      	b.n	8013b98 <UART_Start_Receive_IT+0xa4>
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	223f      	movs	r2, #63	; 0x3f
 8013b8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b8e:	e003      	b.n	8013b98 <UART_Start_Receive_IT+0xa4>
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2200      	movs	r2, #0
 8013b94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2222      	movs	r2, #34	; 0x22
 8013ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	3308      	adds	r3, #8
 8013bae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bb2:	e853 3f00 	ldrex	r3, [r3]
 8013bb6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bba:	f043 0301 	orr.w	r3, r3, #1
 8013bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	3308      	adds	r3, #8
 8013bc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013bcc:	673a      	str	r2, [r7, #112]	; 0x70
 8013bce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013bd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013bd4:	e841 2300 	strex	r3, r2, [r1]
 8013bd8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8013bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d1e3      	bne.n	8013ba8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013be8:	d14f      	bne.n	8013c8a <UART_Start_Receive_IT+0x196>
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013bf0:	88fa      	ldrh	r2, [r7, #6]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d349      	bcc.n	8013c8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013bfe:	d107      	bne.n	8013c10 <UART_Start_Receive_IT+0x11c>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	691b      	ldr	r3, [r3, #16]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d103      	bne.n	8013c10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	4a47      	ldr	r2, [pc, #284]	; (8013d28 <UART_Start_Receive_IT+0x234>)
 8013c0c:	675a      	str	r2, [r3, #116]	; 0x74
 8013c0e:	e002      	b.n	8013c16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	4a46      	ldr	r2, [pc, #280]	; (8013d2c <UART_Start_Receive_IT+0x238>)
 8013c14:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	691b      	ldr	r3, [r3, #16]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d01a      	beq.n	8013c54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c26:	e853 3f00 	ldrex	r3, [r3]
 8013c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c42:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013c48:	e841 2300 	strex	r3, r2, [r1]
 8013c4c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d1e4      	bne.n	8013c1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	3308      	adds	r3, #8
 8013c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c5e:	e853 3f00 	ldrex	r3, [r3]
 8013c62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	3308      	adds	r3, #8
 8013c72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013c74:	64ba      	str	r2, [r7, #72]	; 0x48
 8013c76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c7c:	e841 2300 	strex	r3, r2, [r1]
 8013c80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d1e5      	bne.n	8013c54 <UART_Start_Receive_IT+0x160>
 8013c88:	e046      	b.n	8013d18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	689b      	ldr	r3, [r3, #8]
 8013c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013c92:	d107      	bne.n	8013ca4 <UART_Start_Receive_IT+0x1b0>
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	691b      	ldr	r3, [r3, #16]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d103      	bne.n	8013ca4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	4a24      	ldr	r2, [pc, #144]	; (8013d30 <UART_Start_Receive_IT+0x23c>)
 8013ca0:	675a      	str	r2, [r3, #116]	; 0x74
 8013ca2:	e002      	b.n	8013caa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4a23      	ldr	r2, [pc, #140]	; (8013d34 <UART_Start_Receive_IT+0x240>)
 8013ca8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	691b      	ldr	r3, [r3, #16]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d019      	beq.n	8013ce6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cba:	e853 3f00 	ldrex	r3, [r3]
 8013cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013cc6:	677b      	str	r3, [r7, #116]	; 0x74
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	461a      	mov	r2, r3
 8013cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8013cd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cd8:	e841 2300 	strex	r3, r2, [r1]
 8013cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d1e6      	bne.n	8013cb2 <UART_Start_Receive_IT+0x1be>
 8013ce4:	e018      	b.n	8013d18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	e853 3f00 	ldrex	r3, [r3]
 8013cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	f043 0320 	orr.w	r3, r3, #32
 8013cfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	461a      	mov	r2, r3
 8013d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d04:	623b      	str	r3, [r7, #32]
 8013d06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d08:	69f9      	ldr	r1, [r7, #28]
 8013d0a:	6a3a      	ldr	r2, [r7, #32]
 8013d0c:	e841 2300 	strex	r3, r2, [r1]
 8013d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d1e6      	bne.n	8013ce6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013d18:	2300      	movs	r3, #0
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	378c      	adds	r7, #140	; 0x8c
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	08014559 	.word	0x08014559
 8013d2c:	080141f9 	.word	0x080141f9
 8013d30:	08014041 	.word	0x08014041
 8013d34:	08013e89 	.word	0x08013e89

08013d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b095      	sub	sp, #84	; 0x54
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d48:	e853 3f00 	ldrex	r3, [r3]
 8013d4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8013d60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d66:	e841 2300 	strex	r3, r2, [r1]
 8013d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d1e6      	bne.n	8013d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	3308      	adds	r3, #8
 8013d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	e853 3f00 	ldrex	r3, [r3]
 8013d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8013d82:	69fa      	ldr	r2, [r7, #28]
 8013d84:	4b1e      	ldr	r3, [pc, #120]	; (8013e00 <UART_EndRxTransfer+0xc8>)
 8013d86:	4013      	ands	r3, r2
 8013d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	3308      	adds	r3, #8
 8013d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d9a:	e841 2300 	strex	r3, r2, [r1]
 8013d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d1e5      	bne.n	8013d72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d118      	bne.n	8013de0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	e853 3f00 	ldrex	r3, [r3]
 8013dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	f023 0310 	bic.w	r3, r3, #16
 8013dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	461a      	mov	r2, r3
 8013dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dcc:	61bb      	str	r3, [r7, #24]
 8013dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dd0:	6979      	ldr	r1, [r7, #20]
 8013dd2:	69ba      	ldr	r2, [r7, #24]
 8013dd4:	e841 2300 	strex	r3, r2, [r1]
 8013dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1e6      	bne.n	8013dae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2220      	movs	r2, #32
 8013de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2200      	movs	r2, #0
 8013dec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2200      	movs	r2, #0
 8013df2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013df4:	bf00      	nop
 8013df6:	3754      	adds	r7, #84	; 0x54
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfe:	4770      	bx	lr
 8013e00:	effffffe 	.word	0xeffffffe

08013e04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2200      	movs	r2, #0
 8013e16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013e22:	68f8      	ldr	r0, [r7, #12]
 8013e24:	f7fe ff2e 	bl	8012c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e28:	bf00      	nop
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b088      	sub	sp, #32
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	e853 3f00 	ldrex	r3, [r3]
 8013e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e4c:	61fb      	str	r3, [r7, #28]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	461a      	mov	r2, r3
 8013e54:	69fb      	ldr	r3, [r7, #28]
 8013e56:	61bb      	str	r3, [r7, #24]
 8013e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e5a:	6979      	ldr	r1, [r7, #20]
 8013e5c:	69ba      	ldr	r2, [r7, #24]
 8013e5e:	e841 2300 	strex	r3, r2, [r1]
 8013e62:	613b      	str	r3, [r7, #16]
   return(result);
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1e6      	bne.n	8013e38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2220      	movs	r2, #32
 8013e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7fe fef9 	bl	8012c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e7e:	bf00      	nop
 8013e80:	3720      	adds	r7, #32
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
	...

08013e88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b09c      	sub	sp, #112	; 0x70
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ea0:	2b22      	cmp	r3, #34	; 0x22
 8013ea2:	f040 80be 	bne.w	8014022 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013eb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013eb4:	b2d9      	uxtb	r1, r3
 8013eb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ec0:	400a      	ands	r2, r1
 8013ec2:	b2d2      	uxtb	r2, r2
 8013ec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013eca:	1c5a      	adds	r2, r3, #1
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	3b01      	subs	r3, #1
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f040 80a1 	bne.w	8014032 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ef8:	e853 3f00 	ldrex	r3, [r3]
 8013efc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013f10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013f16:	e841 2300 	strex	r3, r2, [r1]
 8013f1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d1e6      	bne.n	8013ef0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	3308      	adds	r3, #8
 8013f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2c:	e853 3f00 	ldrex	r3, [r3]
 8013f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f34:	f023 0301 	bic.w	r3, r3, #1
 8013f38:	667b      	str	r3, [r7, #100]	; 0x64
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	3308      	adds	r3, #8
 8013f40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013f42:	647a      	str	r2, [r7, #68]	; 0x44
 8013f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f4a:	e841 2300 	strex	r3, r2, [r1]
 8013f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1e5      	bne.n	8013f22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2220      	movs	r2, #32
 8013f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2200      	movs	r2, #0
 8013f62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2200      	movs	r2, #0
 8013f68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	4a33      	ldr	r2, [pc, #204]	; (801403c <UART_RxISR_8BIT+0x1b4>)
 8013f70:	4293      	cmp	r3, r2
 8013f72:	d01f      	beq.n	8013fb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d018      	beq.n	8013fb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8a:	e853 3f00 	ldrex	r3, [r3]
 8013f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8013f90:	6a3b      	ldr	r3, [r7, #32]
 8013f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013f96:	663b      	str	r3, [r7, #96]	; 0x60
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8013fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fa8:	e841 2300 	strex	r3, r2, [r1]
 8013fac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d1e6      	bne.n	8013f82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d12e      	bne.n	801401a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	e853 3f00 	ldrex	r3, [r3]
 8013fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f023 0310 	bic.w	r3, r3, #16
 8013fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	461a      	mov	r2, r3
 8013fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fe0:	61fb      	str	r3, [r7, #28]
 8013fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fe4:	69b9      	ldr	r1, [r7, #24]
 8013fe6:	69fa      	ldr	r2, [r7, #28]
 8013fe8:	e841 2300 	strex	r3, r2, [r1]
 8013fec:	617b      	str	r3, [r7, #20]
   return(result);
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d1e6      	bne.n	8013fc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	69db      	ldr	r3, [r3, #28]
 8013ffa:	f003 0310 	and.w	r3, r3, #16
 8013ffe:	2b10      	cmp	r3, #16
 8014000:	d103      	bne.n	801400a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2210      	movs	r2, #16
 8014008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014010:	4619      	mov	r1, r3
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f7fe fe40 	bl	8012c98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014018:	e00b      	b.n	8014032 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ed fb30 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 8014020:	e007      	b.n	8014032 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	699a      	ldr	r2, [r3, #24]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f042 0208 	orr.w	r2, r2, #8
 8014030:	619a      	str	r2, [r3, #24]
}
 8014032:	bf00      	nop
 8014034:	3770      	adds	r7, #112	; 0x70
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}
 801403a:	bf00      	nop
 801403c:	58000c00 	.word	0x58000c00

08014040 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b09c      	sub	sp, #112	; 0x70
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801404e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014058:	2b22      	cmp	r3, #34	; 0x22
 801405a:	f040 80be 	bne.w	80141da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801406c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801406e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8014072:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8014076:	4013      	ands	r3, r2
 8014078:	b29a      	uxth	r2, r3
 801407a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801407c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014082:	1c9a      	adds	r2, r3, #2
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801408e:	b29b      	uxth	r3, r3
 8014090:	3b01      	subs	r3, #1
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	f040 80a1 	bne.w	80141ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140b0:	e853 3f00 	ldrex	r3, [r3]
 80140b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80140b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140bc:	667b      	str	r3, [r7, #100]	; 0x64
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	461a      	mov	r2, r3
 80140c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140c6:	657b      	str	r3, [r7, #84]	; 0x54
 80140c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80140ce:	e841 2300 	strex	r3, r2, [r1]
 80140d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80140d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1e6      	bne.n	80140a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	3308      	adds	r3, #8
 80140e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e4:	e853 3f00 	ldrex	r3, [r3]
 80140e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80140ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ec:	f023 0301 	bic.w	r3, r3, #1
 80140f0:	663b      	str	r3, [r7, #96]	; 0x60
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	3308      	adds	r3, #8
 80140f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80140fa:	643a      	str	r2, [r7, #64]	; 0x40
 80140fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014102:	e841 2300 	strex	r3, r2, [r1]
 8014106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1e5      	bne.n	80140da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2220      	movs	r2, #32
 8014112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2200      	movs	r2, #0
 801411a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2200      	movs	r2, #0
 8014120:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4a33      	ldr	r2, [pc, #204]	; (80141f4 <UART_RxISR_16BIT+0x1b4>)
 8014128:	4293      	cmp	r3, r2
 801412a:	d01f      	beq.n	801416c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	685b      	ldr	r3, [r3, #4]
 8014132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014136:	2b00      	cmp	r3, #0
 8014138:	d018      	beq.n	801416c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014140:	6a3b      	ldr	r3, [r7, #32]
 8014142:	e853 3f00 	ldrex	r3, [r3]
 8014146:	61fb      	str	r3, [r7, #28]
   return(result);
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801414e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	461a      	mov	r2, r3
 8014156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014158:	62fb      	str	r3, [r7, #44]	; 0x2c
 801415a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801415c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801415e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014160:	e841 2300 	strex	r3, r2, [r1]
 8014164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014168:	2b00      	cmp	r3, #0
 801416a:	d1e6      	bne.n	801413a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014170:	2b01      	cmp	r3, #1
 8014172:	d12e      	bne.n	80141d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2200      	movs	r2, #0
 8014178:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	e853 3f00 	ldrex	r3, [r3]
 8014186:	60bb      	str	r3, [r7, #8]
   return(result);
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	f023 0310 	bic.w	r3, r3, #16
 801418e:	65bb      	str	r3, [r7, #88]	; 0x58
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	461a      	mov	r2, r3
 8014196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014198:	61bb      	str	r3, [r7, #24]
 801419a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801419c:	6979      	ldr	r1, [r7, #20]
 801419e:	69ba      	ldr	r2, [r7, #24]
 80141a0:	e841 2300 	strex	r3, r2, [r1]
 80141a4:	613b      	str	r3, [r7, #16]
   return(result);
 80141a6:	693b      	ldr	r3, [r7, #16]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d1e6      	bne.n	801417a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	69db      	ldr	r3, [r3, #28]
 80141b2:	f003 0310 	and.w	r3, r3, #16
 80141b6:	2b10      	cmp	r3, #16
 80141b8:	d103      	bne.n	80141c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2210      	movs	r2, #16
 80141c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80141c8:	4619      	mov	r1, r3
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f7fe fd64 	bl	8012c98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80141d0:	e00b      	b.n	80141ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7ed fa54 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 80141d8:	e007      	b.n	80141ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	699a      	ldr	r2, [r3, #24]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f042 0208 	orr.w	r2, r2, #8
 80141e8:	619a      	str	r2, [r3, #24]
}
 80141ea:	bf00      	nop
 80141ec:	3770      	adds	r7, #112	; 0x70
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	58000c00 	.word	0x58000c00

080141f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b0ac      	sub	sp, #176	; 0xb0
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014206:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	69db      	ldr	r3, [r3, #28]
 8014210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	689b      	ldr	r3, [r3, #8]
 8014224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801422e:	2b22      	cmp	r3, #34	; 0x22
 8014230:	f040 8180 	bne.w	8014534 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801423a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801423e:	e123      	b.n	8014488 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014246:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801424a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801424e:	b2d9      	uxtb	r1, r3
 8014250:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8014254:	b2da      	uxtb	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801425a:	400a      	ands	r2, r1
 801425c:	b2d2      	uxtb	r2, r2
 801425e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014264:	1c5a      	adds	r2, r3, #1
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014270:	b29b      	uxth	r3, r3
 8014272:	3b01      	subs	r3, #1
 8014274:	b29a      	uxth	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	69db      	ldr	r3, [r3, #28]
 8014282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801428a:	f003 0307 	and.w	r3, r3, #7
 801428e:	2b00      	cmp	r3, #0
 8014290:	d053      	beq.n	801433a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014296:	f003 0301 	and.w	r3, r3, #1
 801429a:	2b00      	cmp	r3, #0
 801429c:	d011      	beq.n	80142c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801429e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d00b      	beq.n	80142c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2201      	movs	r2, #1
 80142b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142b8:	f043 0201 	orr.w	r2, r3, #1
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142c6:	f003 0302 	and.w	r3, r3, #2
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d011      	beq.n	80142f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80142ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80142d2:	f003 0301 	and.w	r3, r3, #1
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d00b      	beq.n	80142f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2202      	movs	r2, #2
 80142e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142e8:	f043 0204 	orr.w	r2, r3, #4
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142f6:	f003 0304 	and.w	r3, r3, #4
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d011      	beq.n	8014322 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80142fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014302:	f003 0301 	and.w	r3, r3, #1
 8014306:	2b00      	cmp	r3, #0
 8014308:	d00b      	beq.n	8014322 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2204      	movs	r2, #4
 8014310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014318:	f043 0202 	orr.w	r2, r3, #2
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014328:	2b00      	cmp	r3, #0
 801432a:	d006      	beq.n	801433a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f7fe fca9 	bl	8012c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2200      	movs	r2, #0
 8014336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014340:	b29b      	uxth	r3, r3
 8014342:	2b00      	cmp	r3, #0
 8014344:	f040 80a0 	bne.w	8014488 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801434e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014350:	e853 3f00 	ldrex	r3, [r3]
 8014354:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8014356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801435c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	461a      	mov	r2, r3
 8014366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801436a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801436c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801436e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014370:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014372:	e841 2300 	strex	r3, r2, [r1]
 8014376:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8014378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801437a:	2b00      	cmp	r3, #0
 801437c:	d1e4      	bne.n	8014348 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	3308      	adds	r3, #8
 8014384:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014388:	e853 3f00 	ldrex	r3, [r3]
 801438c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801438e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014390:	4b6e      	ldr	r3, [pc, #440]	; (801454c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8014392:	4013      	ands	r3, r2
 8014394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	3308      	adds	r3, #8
 801439e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80143a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80143a4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80143a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80143aa:	e841 2300 	strex	r3, r2, [r1]
 80143ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80143b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d1e3      	bne.n	801437e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2220      	movs	r2, #32
 80143ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2200      	movs	r2, #0
 80143c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	4a60      	ldr	r2, [pc, #384]	; (8014550 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d021      	beq.n	8014418 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d01a      	beq.n	8014418 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143ea:	e853 3f00 	ldrex	r3, [r3]
 80143ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80143f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80143f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	461a      	mov	r2, r3
 8014400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014404:	657b      	str	r3, [r7, #84]	; 0x54
 8014406:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014408:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801440a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801440c:	e841 2300 	strex	r3, r2, [r1]
 8014410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1e4      	bne.n	80143e2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801441c:	2b01      	cmp	r3, #1
 801441e:	d130      	bne.n	8014482 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2200      	movs	r2, #0
 8014424:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801442e:	e853 3f00 	ldrex	r3, [r3]
 8014432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014436:	f023 0310 	bic.w	r3, r3, #16
 801443a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	461a      	mov	r2, r3
 8014444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014448:	643b      	str	r3, [r7, #64]	; 0x40
 801444a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801444c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801444e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014450:	e841 2300 	strex	r3, r2, [r1]
 8014454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014458:	2b00      	cmp	r3, #0
 801445a:	d1e4      	bne.n	8014426 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	69db      	ldr	r3, [r3, #28]
 8014462:	f003 0310 	and.w	r3, r3, #16
 8014466:	2b10      	cmp	r3, #16
 8014468:	d103      	bne.n	8014472 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2210      	movs	r2, #16
 8014470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014478:	4619      	mov	r1, r3
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f7fe fc0c 	bl	8012c98 <HAL_UARTEx_RxEventCallback>
 8014480:	e002      	b.n	8014488 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f7ed f8fc 	bl	8001680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014488:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801448c:	2b00      	cmp	r3, #0
 801448e:	d006      	beq.n	801449e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8014490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014494:	f003 0320 	and.w	r3, r3, #32
 8014498:	2b00      	cmp	r3, #0
 801449a:	f47f aed1 	bne.w	8014240 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80144a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d049      	beq.n	8014544 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80144b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d242      	bcs.n	8014544 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	3308      	adds	r3, #8
 80144c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144c6:	6a3b      	ldr	r3, [r7, #32]
 80144c8:	e853 3f00 	ldrex	r3, [r3]
 80144cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80144d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	3308      	adds	r3, #8
 80144de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80144e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80144e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80144e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144ea:	e841 2300 	strex	r3, r2, [r1]
 80144ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80144f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d1e3      	bne.n	80144be <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4a16      	ldr	r2, [pc, #88]	; (8014554 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80144fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	e853 3f00 	ldrex	r3, [r3]
 8014508:	60bb      	str	r3, [r7, #8]
   return(result);
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	f043 0320 	orr.w	r3, r3, #32
 8014510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	461a      	mov	r2, r3
 801451a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801451e:	61bb      	str	r3, [r7, #24]
 8014520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014522:	6979      	ldr	r1, [r7, #20]
 8014524:	69ba      	ldr	r2, [r7, #24]
 8014526:	e841 2300 	strex	r3, r2, [r1]
 801452a:	613b      	str	r3, [r7, #16]
   return(result);
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d1e4      	bne.n	80144fc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014532:	e007      	b.n	8014544 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	699a      	ldr	r2, [r3, #24]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f042 0208 	orr.w	r2, r2, #8
 8014542:	619a      	str	r2, [r3, #24]
}
 8014544:	bf00      	nop
 8014546:	37b0      	adds	r7, #176	; 0xb0
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	effffffe 	.word	0xeffffffe
 8014550:	58000c00 	.word	0x58000c00
 8014554:	08013e89 	.word	0x08013e89

08014558 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b0ae      	sub	sp, #184	; 0xb8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014566:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	69db      	ldr	r3, [r3, #28]
 8014570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	689b      	ldr	r3, [r3, #8]
 8014584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801458e:	2b22      	cmp	r3, #34	; 0x22
 8014590:	f040 8184 	bne.w	801489c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801459a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801459e:	e127      	b.n	80147f0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80145ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80145b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80145b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80145ba:	4013      	ands	r3, r2
 80145bc:	b29a      	uxth	r2, r3
 80145be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80145c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80145c8:	1c9a      	adds	r2, r3, #2
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	3b01      	subs	r3, #1
 80145d8:	b29a      	uxth	r2, r3
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	69db      	ldr	r3, [r3, #28]
 80145e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80145ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80145ee:	f003 0307 	and.w	r3, r3, #7
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d053      	beq.n	801469e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80145f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80145fa:	f003 0301 	and.w	r3, r3, #1
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d011      	beq.n	8014626 <UART_RxISR_16BIT_FIFOEN+0xce>
 8014602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801460a:	2b00      	cmp	r3, #0
 801460c:	d00b      	beq.n	8014626 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2201      	movs	r2, #1
 8014614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801461c:	f043 0201 	orr.w	r2, r3, #1
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801462a:	f003 0302 	and.w	r3, r3, #2
 801462e:	2b00      	cmp	r3, #0
 8014630:	d011      	beq.n	8014656 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014636:	f003 0301 	and.w	r3, r3, #1
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00b      	beq.n	8014656 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2202      	movs	r2, #2
 8014644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801464c:	f043 0204 	orr.w	r2, r3, #4
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801465a:	f003 0304 	and.w	r3, r3, #4
 801465e:	2b00      	cmp	r3, #0
 8014660:	d011      	beq.n	8014686 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014666:	f003 0301 	and.w	r3, r3, #1
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00b      	beq.n	8014686 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2204      	movs	r2, #4
 8014674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801467c:	f043 0202 	orr.w	r2, r3, #2
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801468c:	2b00      	cmp	r3, #0
 801468e:	d006      	beq.n	801469e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f7fe faf7 	bl	8012c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2200      	movs	r2, #0
 801469a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f040 80a2 	bne.w	80147f0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80146b4:	e853 3f00 	ldrex	r3, [r3]
 80146b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80146ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80146c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	461a      	mov	r2, r3
 80146ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80146ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80146d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80146d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80146da:	e841 2300 	strex	r3, r2, [r1]
 80146de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80146e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1e2      	bne.n	80146ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	3308      	adds	r3, #8
 80146ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146f0:	e853 3f00 	ldrex	r3, [r3]
 80146f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80146f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80146f8:	4b6e      	ldr	r3, [pc, #440]	; (80148b4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80146fa:	4013      	ands	r3, r2
 80146fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	3308      	adds	r3, #8
 8014706:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801470a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801470c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801470e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014712:	e841 2300 	strex	r3, r2, [r1]
 8014716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801471a:	2b00      	cmp	r3, #0
 801471c:	d1e3      	bne.n	80146e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2220      	movs	r2, #32
 8014722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2200      	movs	r2, #0
 801472a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2200      	movs	r2, #0
 8014730:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	4a60      	ldr	r2, [pc, #384]	; (80148b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8014738:	4293      	cmp	r3, r2
 801473a:	d021      	beq.n	8014780 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014746:	2b00      	cmp	r3, #0
 8014748:	d01a      	beq.n	8014780 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014752:	e853 3f00 	ldrex	r3, [r3]
 8014756:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801475a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801475e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	461a      	mov	r2, r3
 8014768:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801476c:	65bb      	str	r3, [r7, #88]	; 0x58
 801476e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014770:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014774:	e841 2300 	strex	r3, r2, [r1]
 8014778:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801477c:	2b00      	cmp	r3, #0
 801477e:	d1e4      	bne.n	801474a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014784:	2b01      	cmp	r3, #1
 8014786:	d130      	bne.n	80147ea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014796:	e853 3f00 	ldrex	r3, [r3]
 801479a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801479e:	f023 0310 	bic.w	r3, r3, #16
 80147a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	461a      	mov	r2, r3
 80147ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147b0:	647b      	str	r3, [r7, #68]	; 0x44
 80147b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80147b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80147b8:	e841 2300 	strex	r3, r2, [r1]
 80147bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80147be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d1e4      	bne.n	801478e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	69db      	ldr	r3, [r3, #28]
 80147ca:	f003 0310 	and.w	r3, r3, #16
 80147ce:	2b10      	cmp	r3, #16
 80147d0:	d103      	bne.n	80147da <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2210      	movs	r2, #16
 80147d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147e0:	4619      	mov	r1, r3
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7fe fa58 	bl	8012c98 <HAL_UARTEx_RxEventCallback>
 80147e8:	e002      	b.n	80147f0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7ec ff48 	bl	8001680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80147f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d006      	beq.n	8014806 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80147f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147fc:	f003 0320 	and.w	r3, r3, #32
 8014800:	2b00      	cmp	r3, #0
 8014802:	f47f aecd 	bne.w	80145a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801480c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014810:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014814:	2b00      	cmp	r3, #0
 8014816:	d049      	beq.n	80148ac <UART_RxISR_16BIT_FIFOEN+0x354>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801481e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8014822:	429a      	cmp	r2, r3
 8014824:	d242      	bcs.n	80148ac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	3308      	adds	r3, #8
 801482c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014830:	e853 3f00 	ldrex	r3, [r3]
 8014834:	623b      	str	r3, [r7, #32]
   return(result);
 8014836:	6a3b      	ldr	r3, [r7, #32]
 8014838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801483c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	3308      	adds	r3, #8
 8014846:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801484a:	633a      	str	r2, [r7, #48]	; 0x30
 801484c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801484e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014852:	e841 2300 	strex	r3, r2, [r1]
 8014856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485a:	2b00      	cmp	r3, #0
 801485c:	d1e3      	bne.n	8014826 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	4a16      	ldr	r2, [pc, #88]	; (80148bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8014862:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	e853 3f00 	ldrex	r3, [r3]
 8014870:	60fb      	str	r3, [r7, #12]
   return(result);
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	f043 0320 	orr.w	r3, r3, #32
 8014878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	461a      	mov	r2, r3
 8014882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014886:	61fb      	str	r3, [r7, #28]
 8014888:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801488a:	69b9      	ldr	r1, [r7, #24]
 801488c:	69fa      	ldr	r2, [r7, #28]
 801488e:	e841 2300 	strex	r3, r2, [r1]
 8014892:	617b      	str	r3, [r7, #20]
   return(result);
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1e4      	bne.n	8014864 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801489a:	e007      	b.n	80148ac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	699a      	ldr	r2, [r3, #24]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f042 0208 	orr.w	r2, r2, #8
 80148aa:	619a      	str	r2, [r3, #24]
}
 80148ac:	bf00      	nop
 80148ae:	37b8      	adds	r7, #184	; 0xb8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	effffffe 	.word	0xeffffffe
 80148b8:	58000c00 	.word	0x58000c00
 80148bc:	08014041 	.word	0x08014041

080148c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80148c0:	b480      	push	{r7}
 80148c2:	b083      	sub	sp, #12
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80148c8:	bf00      	nop
 80148ca:	370c      	adds	r7, #12
 80148cc:	46bd      	mov	sp, r7
 80148ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d2:	4770      	bx	lr

080148d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80148d4:	b480      	push	{r7}
 80148d6:	b083      	sub	sp, #12
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80148dc:	bf00      	nop
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr

080148e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80148f0:	bf00      	nop
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr

080148fc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80148fc:	b480      	push	{r7}
 80148fe:	b089      	sub	sp, #36	; 0x24
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801490a:	2b01      	cmp	r3, #1
 801490c:	d101      	bne.n	8014912 <HAL_UARTEx_EnableStopMode+0x16>
 801490e:	2302      	movs	r3, #2
 8014910:	e021      	b.n	8014956 <HAL_UARTEx_EnableStopMode+0x5a>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2201      	movs	r2, #1
 8014916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	e853 3f00 	ldrex	r3, [r3]
 8014926:	60bb      	str	r3, [r7, #8]
   return(result);
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	f043 0302 	orr.w	r3, r3, #2
 801492e:	61fb      	str	r3, [r7, #28]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	461a      	mov	r2, r3
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	61bb      	str	r3, [r7, #24]
 801493a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801493c:	6979      	ldr	r1, [r7, #20]
 801493e:	69ba      	ldr	r2, [r7, #24]
 8014940:	e841 2300 	strex	r3, r2, [r1]
 8014944:	613b      	str	r3, [r7, #16]
   return(result);
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d1e6      	bne.n	801491a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2200      	movs	r2, #0
 8014950:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014954:	2300      	movs	r3, #0
}
 8014956:	4618      	mov	r0, r3
 8014958:	3724      	adds	r7, #36	; 0x24
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr

08014962 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8014962:	b580      	push	{r7, lr}
 8014964:	b084      	sub	sp, #16
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014970:	2b01      	cmp	r3, #1
 8014972:	d101      	bne.n	8014978 <HAL_UARTEx_EnableFifoMode+0x16>
 8014974:	2302      	movs	r3, #2
 8014976:	e02b      	b.n	80149d0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2201      	movs	r2, #1
 801497c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2224      	movs	r2, #36	; 0x24
 8014984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f022 0201 	bic.w	r2, r2, #1
 801499e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80149a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80149ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68fa      	ldr	r2, [r7, #12]
 80149b6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f000 f8c3 	bl	8014b44 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2220      	movs	r2, #32
 80149c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2200      	movs	r2, #0
 80149ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80149ce:	2300      	movs	r3, #0
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3710      	adds	r7, #16
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}

080149d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80149d8:	b480      	push	{r7}
 80149da:	b085      	sub	sp, #20
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80149e6:	2b01      	cmp	r3, #1
 80149e8:	d101      	bne.n	80149ee <HAL_UARTEx_DisableFifoMode+0x16>
 80149ea:	2302      	movs	r3, #2
 80149ec:	e027      	b.n	8014a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2201      	movs	r2, #1
 80149f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2224      	movs	r2, #36	; 0x24
 80149fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	681a      	ldr	r2, [r3, #0]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	f022 0201 	bic.w	r2, r2, #1
 8014a14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2200      	movs	r2, #0
 8014a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	68fa      	ldr	r2, [r7, #12]
 8014a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2220      	movs	r2, #32
 8014a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2200      	movs	r2, #0
 8014a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014a3c:	2300      	movs	r3, #0
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3714      	adds	r7, #20
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr

08014a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b084      	sub	sp, #16
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	6078      	str	r0, [r7, #4]
 8014a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d101      	bne.n	8014a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014a5e:	2302      	movs	r3, #2
 8014a60:	e02d      	b.n	8014abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	2201      	movs	r2, #1
 8014a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2224      	movs	r2, #36	; 0x24
 8014a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	681a      	ldr	r2, [r3, #0]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f022 0201 	bic.w	r2, r2, #1
 8014a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	689b      	ldr	r3, [r3, #8]
 8014a90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	683a      	ldr	r2, [r7, #0]
 8014a9a:	430a      	orrs	r2, r1
 8014a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 f850 	bl	8014b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	68fa      	ldr	r2, [r7, #12]
 8014aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2220      	movs	r2, #32
 8014ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014abc:	2300      	movs	r3, #0
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014ac6:	b580      	push	{r7, lr}
 8014ac8:	b084      	sub	sp, #16
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
 8014ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014ad6:	2b01      	cmp	r3, #1
 8014ad8:	d101      	bne.n	8014ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014ada:	2302      	movs	r3, #2
 8014adc:	e02d      	b.n	8014b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2201      	movs	r2, #1
 8014ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2224      	movs	r2, #36	; 0x24
 8014aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f022 0201 	bic.w	r2, r2, #1
 8014b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	689b      	ldr	r3, [r3, #8]
 8014b0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	683a      	ldr	r2, [r7, #0]
 8014b16:	430a      	orrs	r2, r1
 8014b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f812 	bl	8014b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	68fa      	ldr	r2, [r7, #12]
 8014b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2220      	movs	r2, #32
 8014b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014b38:	2300      	movs	r3, #0
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
	...

08014b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b085      	sub	sp, #20
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d108      	bne.n	8014b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2201      	movs	r2, #1
 8014b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2201      	movs	r2, #1
 8014b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014b64:	e031      	b.n	8014bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014b66:	2310      	movs	r3, #16
 8014b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014b6a:	2310      	movs	r3, #16
 8014b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	0e5b      	lsrs	r3, r3, #25
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	f003 0307 	and.w	r3, r3, #7
 8014b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	689b      	ldr	r3, [r3, #8]
 8014b84:	0f5b      	lsrs	r3, r3, #29
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	f003 0307 	and.w	r3, r3, #7
 8014b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014b8e:	7bbb      	ldrb	r3, [r7, #14]
 8014b90:	7b3a      	ldrb	r2, [r7, #12]
 8014b92:	4911      	ldr	r1, [pc, #68]	; (8014bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8014b94:	5c8a      	ldrb	r2, [r1, r2]
 8014b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014b9a:	7b3a      	ldrb	r2, [r7, #12]
 8014b9c:	490f      	ldr	r1, [pc, #60]	; (8014bdc <UARTEx_SetNbDataToProcess+0x98>)
 8014b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014bac:	7bfb      	ldrb	r3, [r7, #15]
 8014bae:	7b7a      	ldrb	r2, [r7, #13]
 8014bb0:	4909      	ldr	r1, [pc, #36]	; (8014bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8014bb2:	5c8a      	ldrb	r2, [r1, r2]
 8014bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014bb8:	7b7a      	ldrb	r2, [r7, #13]
 8014bba:	4908      	ldr	r1, [pc, #32]	; (8014bdc <UARTEx_SetNbDataToProcess+0x98>)
 8014bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014bca:	bf00      	nop
 8014bcc:	3714      	adds	r7, #20
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop
 8014bd8:	08018ee4 	.word	0x08018ee4
 8014bdc:	08018eec 	.word	0x08018eec

08014be0 <__NVIC_SetPriority>:
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	4603      	mov	r3, r0
 8014be8:	6039      	str	r1, [r7, #0]
 8014bea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	db0a      	blt.n	8014c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	b2da      	uxtb	r2, r3
 8014bf8:	490c      	ldr	r1, [pc, #48]	; (8014c2c <__NVIC_SetPriority+0x4c>)
 8014bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bfe:	0112      	lsls	r2, r2, #4
 8014c00:	b2d2      	uxtb	r2, r2
 8014c02:	440b      	add	r3, r1
 8014c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014c08:	e00a      	b.n	8014c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	b2da      	uxtb	r2, r3
 8014c0e:	4908      	ldr	r1, [pc, #32]	; (8014c30 <__NVIC_SetPriority+0x50>)
 8014c10:	88fb      	ldrh	r3, [r7, #6]
 8014c12:	f003 030f 	and.w	r3, r3, #15
 8014c16:	3b04      	subs	r3, #4
 8014c18:	0112      	lsls	r2, r2, #4
 8014c1a:	b2d2      	uxtb	r2, r2
 8014c1c:	440b      	add	r3, r1
 8014c1e:	761a      	strb	r2, [r3, #24]
}
 8014c20:	bf00      	nop
 8014c22:	370c      	adds	r7, #12
 8014c24:	46bd      	mov	sp, r7
 8014c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2a:	4770      	bx	lr
 8014c2c:	e000e100 	.word	0xe000e100
 8014c30:	e000ed00 	.word	0xe000ed00

08014c34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014c34:	b580      	push	{r7, lr}
 8014c36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014c38:	4b05      	ldr	r3, [pc, #20]	; (8014c50 <SysTick_Handler+0x1c>)
 8014c3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014c3c:	f002 f958 	bl	8016ef0 <xTaskGetSchedulerState>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b01      	cmp	r3, #1
 8014c44:	d001      	beq.n	8014c4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014c46:	f002 ff77 	bl	8017b38 <xPortSysTickHandler>
  }
}
 8014c4a:	bf00      	nop
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	e000e010 	.word	0xe000e010

08014c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014c54:	b580      	push	{r7, lr}
 8014c56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014c58:	2100      	movs	r1, #0
 8014c5a:	f06f 0004 	mvn.w	r0, #4
 8014c5e:	f7ff ffbf 	bl	8014be0 <__NVIC_SetPriority>
#endif
}
 8014c62:	bf00      	nop
 8014c64:	bd80      	pop	{r7, pc}
	...

08014c68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c6e:	f3ef 8305 	mrs	r3, IPSR
 8014c72:	603b      	str	r3, [r7, #0]
  return(result);
 8014c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d003      	beq.n	8014c82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014c7a:	f06f 0305 	mvn.w	r3, #5
 8014c7e:	607b      	str	r3, [r7, #4]
 8014c80:	e00c      	b.n	8014c9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014c82:	4b0a      	ldr	r3, [pc, #40]	; (8014cac <osKernelInitialize+0x44>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d105      	bne.n	8014c96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014c8a:	4b08      	ldr	r3, [pc, #32]	; (8014cac <osKernelInitialize+0x44>)
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014c90:	2300      	movs	r3, #0
 8014c92:	607b      	str	r3, [r7, #4]
 8014c94:	e002      	b.n	8014c9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014c9c:	687b      	ldr	r3, [r7, #4]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	370c      	adds	r7, #12
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop
 8014cac:	24001f80 	.word	0x24001f80

08014cb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014cb6:	f3ef 8305 	mrs	r3, IPSR
 8014cba:	603b      	str	r3, [r7, #0]
  return(result);
 8014cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d003      	beq.n	8014cca <osKernelStart+0x1a>
    stat = osErrorISR;
 8014cc2:	f06f 0305 	mvn.w	r3, #5
 8014cc6:	607b      	str	r3, [r7, #4]
 8014cc8:	e010      	b.n	8014cec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014cca:	4b0b      	ldr	r3, [pc, #44]	; (8014cf8 <osKernelStart+0x48>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d109      	bne.n	8014ce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014cd2:	f7ff ffbf 	bl	8014c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014cd6:	4b08      	ldr	r3, [pc, #32]	; (8014cf8 <osKernelStart+0x48>)
 8014cd8:	2202      	movs	r2, #2
 8014cda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014cdc:	f001 fc0c 	bl	80164f8 <vTaskStartScheduler>
      stat = osOK;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	607b      	str	r3, [r7, #4]
 8014ce4:	e002      	b.n	8014cec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014cec:	687b      	ldr	r3, [r7, #4]
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3708      	adds	r7, #8
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	24001f80 	.word	0x24001f80

08014cfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b08e      	sub	sp, #56	; 0x38
 8014d00:	af04      	add	r7, sp, #16
 8014d02:	60f8      	str	r0, [r7, #12]
 8014d04:	60b9      	str	r1, [r7, #8]
 8014d06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d0c:	f3ef 8305 	mrs	r3, IPSR
 8014d10:	617b      	str	r3, [r7, #20]
  return(result);
 8014d12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d17e      	bne.n	8014e16 <osThreadNew+0x11a>
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d07b      	beq.n	8014e16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014d1e:	2380      	movs	r3, #128	; 0x80
 8014d20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014d22:	2318      	movs	r3, #24
 8014d24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014d26:	2300      	movs	r3, #0
 8014d28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d045      	beq.n	8014dc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d002      	beq.n	8014d44 <osThreadNew+0x48>
        name = attr->name;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	699b      	ldr	r3, [r3, #24]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d002      	beq.n	8014d52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	699b      	ldr	r3, [r3, #24]
 8014d50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d008      	beq.n	8014d6a <osThreadNew+0x6e>
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	2b38      	cmp	r3, #56	; 0x38
 8014d5c:	d805      	bhi.n	8014d6a <osThreadNew+0x6e>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	685b      	ldr	r3, [r3, #4]
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d001      	beq.n	8014d6e <osThreadNew+0x72>
        return (NULL);
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	e054      	b.n	8014e18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	695b      	ldr	r3, [r3, #20]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d003      	beq.n	8014d7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	695b      	ldr	r3, [r3, #20]
 8014d7a:	089b      	lsrs	r3, r3, #2
 8014d7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	689b      	ldr	r3, [r3, #8]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d00e      	beq.n	8014da4 <osThreadNew+0xa8>
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	68db      	ldr	r3, [r3, #12]
 8014d8a:	2b5b      	cmp	r3, #91	; 0x5b
 8014d8c:	d90a      	bls.n	8014da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d006      	beq.n	8014da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	695b      	ldr	r3, [r3, #20]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d002      	beq.n	8014da4 <osThreadNew+0xa8>
        mem = 1;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	61bb      	str	r3, [r7, #24]
 8014da2:	e010      	b.n	8014dc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	689b      	ldr	r3, [r3, #8]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d10c      	bne.n	8014dc6 <osThreadNew+0xca>
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d108      	bne.n	8014dc6 <osThreadNew+0xca>
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	691b      	ldr	r3, [r3, #16]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d104      	bne.n	8014dc6 <osThreadNew+0xca>
          mem = 0;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	61bb      	str	r3, [r7, #24]
 8014dc0:	e001      	b.n	8014dc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d110      	bne.n	8014dee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014dd4:	9202      	str	r2, [sp, #8]
 8014dd6:	9301      	str	r3, [sp, #4]
 8014dd8:	69fb      	ldr	r3, [r7, #28]
 8014dda:	9300      	str	r3, [sp, #0]
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	6a3a      	ldr	r2, [r7, #32]
 8014de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f001 f9b2 	bl	801614c <xTaskCreateStatic>
 8014de8:	4603      	mov	r3, r0
 8014dea:	613b      	str	r3, [r7, #16]
 8014dec:	e013      	b.n	8014e16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d110      	bne.n	8014e16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	f107 0310 	add.w	r3, r7, #16
 8014dfc:	9301      	str	r3, [sp, #4]
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	9300      	str	r3, [sp, #0]
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e06:	68f8      	ldr	r0, [r7, #12]
 8014e08:	f001 f9fd 	bl	8016206 <xTaskCreate>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d001      	beq.n	8014e16 <osThreadNew+0x11a>
            hTask = NULL;
 8014e12:	2300      	movs	r3, #0
 8014e14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014e16:	693b      	ldr	r3, [r7, #16]
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3728      	adds	r7, #40	; 0x28
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}

08014e20 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8014e20:	b480      	push	{r7}
 8014e22:	b083      	sub	sp, #12
 8014e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e26:	f3ef 8305 	mrs	r3, IPSR
 8014e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8014e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d003      	beq.n	8014e3a <osThreadYield+0x1a>
    stat = osErrorISR;
 8014e32:	f06f 0305 	mvn.w	r3, #5
 8014e36:	607b      	str	r3, [r7, #4]
 8014e38:	e009      	b.n	8014e4e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8014e3e:	4b07      	ldr	r3, [pc, #28]	; (8014e5c <osThreadYield+0x3c>)
 8014e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e44:	601a      	str	r2, [r3, #0]
 8014e46:	f3bf 8f4f 	dsb	sy
 8014e4a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8014e4e:	687b      	ldr	r3, [r7, #4]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr
 8014e5c:	e000ed04 	.word	0xe000ed04

08014e60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b084      	sub	sp, #16
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e68:	f3ef 8305 	mrs	r3, IPSR
 8014e6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d003      	beq.n	8014e7c <osDelay+0x1c>
    stat = osErrorISR;
 8014e74:	f06f 0305 	mvn.w	r3, #5
 8014e78:	60fb      	str	r3, [r7, #12]
 8014e7a:	e007      	b.n	8014e8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d002      	beq.n	8014e8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f001 fb02 	bl	8016490 <vTaskDelay>
    }
  }

  return (stat);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3710      	adds	r7, #16
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b086      	sub	sp, #24
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ea2:	f3ef 8305 	mrs	r3, IPSR
 8014ea6:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ea8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d12d      	bne.n	8014f0a <osEventFlagsNew+0x74>
    mem = -1;
 8014eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eb2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d015      	beq.n	8014ee6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	689b      	ldr	r3, [r3, #8]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d006      	beq.n	8014ed0 <osEventFlagsNew+0x3a>
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	68db      	ldr	r3, [r3, #12]
 8014ec6:	2b1f      	cmp	r3, #31
 8014ec8:	d902      	bls.n	8014ed0 <osEventFlagsNew+0x3a>
        mem = 1;
 8014eca:	2301      	movs	r3, #1
 8014ecc:	613b      	str	r3, [r7, #16]
 8014ece:	e00c      	b.n	8014eea <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	689b      	ldr	r3, [r3, #8]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d108      	bne.n	8014eea <osEventFlagsNew+0x54>
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d104      	bne.n	8014eea <osEventFlagsNew+0x54>
          mem = 0;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	613b      	str	r3, [r7, #16]
 8014ee4:	e001      	b.n	8014eea <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	d106      	bne.n	8014efe <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	689b      	ldr	r3, [r3, #8]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f000 f91d 	bl	8015134 <xEventGroupCreateStatic>
 8014efa:	6178      	str	r0, [r7, #20]
 8014efc:	e005      	b.n	8014f0a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d102      	bne.n	8014f0a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8014f04:	f000 f94d 	bl	80151a2 <xEventGroupCreate>
 8014f08:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8014f0a:	697b      	ldr	r3, [r7, #20]
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3718      	adds	r7, #24
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b086      	sub	sp, #24
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d004      	beq.n	8014f32 <osEventFlagsSet+0x1e>
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d003      	beq.n	8014f3a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8014f32:	f06f 0303 	mvn.w	r3, #3
 8014f36:	617b      	str	r3, [r7, #20]
 8014f38:	e028      	b.n	8014f8c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f3a:	f3ef 8305 	mrs	r3, IPSR
 8014f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014f40:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d01d      	beq.n	8014f82 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8014f46:	2300      	movs	r3, #0
 8014f48:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8014f4a:	f107 0308 	add.w	r3, r7, #8
 8014f4e:	461a      	mov	r2, r3
 8014f50:	6839      	ldr	r1, [r7, #0]
 8014f52:	6938      	ldr	r0, [r7, #16]
 8014f54:	f000 fb46 	bl	80155e4 <xEventGroupSetBitsFromISR>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d103      	bne.n	8014f66 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8014f5e:	f06f 0302 	mvn.w	r3, #2
 8014f62:	617b      	str	r3, [r7, #20]
 8014f64:	e012      	b.n	8014f8c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d00d      	beq.n	8014f8c <osEventFlagsSet+0x78>
 8014f70:	4b09      	ldr	r3, [pc, #36]	; (8014f98 <osEventFlagsSet+0x84>)
 8014f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f76:	601a      	str	r2, [r3, #0]
 8014f78:	f3bf 8f4f 	dsb	sy
 8014f7c:	f3bf 8f6f 	isb	sy
 8014f80:	e004      	b.n	8014f8c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8014f82:	6839      	ldr	r1, [r7, #0]
 8014f84:	6938      	ldr	r0, [r7, #16]
 8014f86:	f000 fa65 	bl	8015454 <xEventGroupSetBits>
 8014f8a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8014f8c:	697b      	ldr	r3, [r7, #20]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3718      	adds	r7, #24
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	e000ed04 	.word	0xe000ed04

08014f9c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b086      	sub	sp, #24
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d004      	beq.n	8014fba <osEventFlagsClear+0x1e>
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d003      	beq.n	8014fc2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8014fba:	f06f 0303 	mvn.w	r3, #3
 8014fbe:	617b      	str	r3, [r7, #20]
 8014fc0:	e019      	b.n	8014ff6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014fc2:	f3ef 8305 	mrs	r3, IPSR
 8014fc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d00e      	beq.n	8014fec <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8014fce:	6938      	ldr	r0, [r7, #16]
 8014fd0:	f000 fa1c 	bl	801540c <xEventGroupGetBitsFromISR>
 8014fd4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8014fd6:	6839      	ldr	r1, [r7, #0]
 8014fd8:	6938      	ldr	r0, [r7, #16]
 8014fda:	f000 fa03 	bl	80153e4 <xEventGroupClearBitsFromISR>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d108      	bne.n	8014ff6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8014fe4:	f06f 0302 	mvn.w	r3, #2
 8014fe8:	617b      	str	r3, [r7, #20]
 8014fea:	e004      	b.n	8014ff6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8014fec:	6839      	ldr	r1, [r7, #0]
 8014fee:	6938      	ldr	r0, [r7, #16]
 8014ff0:	f000 f9c0 	bl	8015374 <xEventGroupClearBits>
 8014ff4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8014ff6:	697b      	ldr	r3, [r7, #20]
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3718      	adds	r7, #24
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8015000:	b580      	push	{r7, lr}
 8015002:	b08c      	sub	sp, #48	; 0x30
 8015004:	af02      	add	r7, sp, #8
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	607a      	str	r2, [r7, #4]
 801500c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d004      	beq.n	8015022 <osEventFlagsWait+0x22>
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801501e:	2b00      	cmp	r3, #0
 8015020:	d003      	beq.n	801502a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8015022:	f06f 0303 	mvn.w	r3, #3
 8015026:	61fb      	str	r3, [r7, #28]
 8015028:	e04b      	b.n	80150c2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801502a:	f3ef 8305 	mrs	r3, IPSR
 801502e:	617b      	str	r3, [r7, #20]
  return(result);
 8015030:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015032:	2b00      	cmp	r3, #0
 8015034:	d003      	beq.n	801503e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8015036:	f06f 0305 	mvn.w	r3, #5
 801503a:	61fb      	str	r3, [r7, #28]
 801503c:	e041      	b.n	80150c2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	f003 0301 	and.w	r3, r3, #1
 8015044:	2b00      	cmp	r3, #0
 8015046:	d002      	beq.n	801504e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8015048:	2301      	movs	r3, #1
 801504a:	627b      	str	r3, [r7, #36]	; 0x24
 801504c:	e001      	b.n	8015052 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801504e:	2300      	movs	r3, #0
 8015050:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f003 0302 	and.w	r3, r3, #2
 8015058:	2b00      	cmp	r3, #0
 801505a:	d002      	beq.n	8015062 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801505c:	2300      	movs	r3, #0
 801505e:	623b      	str	r3, [r7, #32]
 8015060:	e001      	b.n	8015066 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8015062:	2301      	movs	r3, #1
 8015064:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506c:	6a3a      	ldr	r2, [r7, #32]
 801506e:	68b9      	ldr	r1, [r7, #8]
 8015070:	69b8      	ldr	r0, [r7, #24]
 8015072:	f000 f8b1 	bl	80151d8 <xEventGroupWaitBits>
 8015076:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f003 0301 	and.w	r3, r3, #1
 801507e:	2b00      	cmp	r3, #0
 8015080:	d010      	beq.n	80150a4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8015082:	68ba      	ldr	r2, [r7, #8]
 8015084:	69fb      	ldr	r3, [r7, #28]
 8015086:	4013      	ands	r3, r2
 8015088:	68ba      	ldr	r2, [r7, #8]
 801508a:	429a      	cmp	r2, r3
 801508c:	d019      	beq.n	80150c2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d003      	beq.n	801509c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8015094:	f06f 0301 	mvn.w	r3, #1
 8015098:	61fb      	str	r3, [r7, #28]
 801509a:	e012      	b.n	80150c2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801509c:	f06f 0302 	mvn.w	r3, #2
 80150a0:	61fb      	str	r3, [r7, #28]
 80150a2:	e00e      	b.n	80150c2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80150a4:	68ba      	ldr	r2, [r7, #8]
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	4013      	ands	r3, r2
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d109      	bne.n	80150c2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d003      	beq.n	80150bc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80150b4:	f06f 0301 	mvn.w	r3, #1
 80150b8:	61fb      	str	r3, [r7, #28]
 80150ba:	e002      	b.n	80150c2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80150bc:	f06f 0302 	mvn.w	r3, #2
 80150c0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80150c2:	69fb      	ldr	r3, [r7, #28]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3728      	adds	r7, #40	; 0x28
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80150cc:	b480      	push	{r7}
 80150ce:	b085      	sub	sp, #20
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	4a07      	ldr	r2, [pc, #28]	; (80150f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80150dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	4a06      	ldr	r2, [pc, #24]	; (80150fc <vApplicationGetIdleTaskMemory+0x30>)
 80150e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2280      	movs	r2, #128	; 0x80
 80150e8:	601a      	str	r2, [r3, #0]
}
 80150ea:	bf00      	nop
 80150ec:	3714      	adds	r7, #20
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	24001f84 	.word	0x24001f84
 80150fc:	24001fe0 	.word	0x24001fe0

08015100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015100:	b480      	push	{r7}
 8015102:	b085      	sub	sp, #20
 8015104:	af00      	add	r7, sp, #0
 8015106:	60f8      	str	r0, [r7, #12]
 8015108:	60b9      	str	r1, [r7, #8]
 801510a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	4a07      	ldr	r2, [pc, #28]	; (801512c <vApplicationGetTimerTaskMemory+0x2c>)
 8015110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	4a06      	ldr	r2, [pc, #24]	; (8015130 <vApplicationGetTimerTaskMemory+0x30>)
 8015116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801511e:	601a      	str	r2, [r3, #0]
}
 8015120:	bf00      	nop
 8015122:	3714      	adds	r7, #20
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr
 801512c:	240021e0 	.word	0x240021e0
 8015130:	2400223c 	.word	0x2400223c

08015134 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8015134:	b580      	push	{r7, lr}
 8015136:	b086      	sub	sp, #24
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d10a      	bne.n	8015158 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015146:	f383 8811 	msr	BASEPRI, r3
 801514a:	f3bf 8f6f 	isb	sy
 801514e:	f3bf 8f4f 	dsb	sy
 8015152:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015154:	bf00      	nop
 8015156:	e7fe      	b.n	8015156 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8015158:	2320      	movs	r3, #32
 801515a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	2b20      	cmp	r3, #32
 8015160:	d00a      	beq.n	8015178 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8015162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015166:	f383 8811 	msr	BASEPRI, r3
 801516a:	f3bf 8f6f 	isb	sy
 801516e:	f3bf 8f4f 	dsb	sy
 8015172:	60fb      	str	r3, [r7, #12]
}
 8015174:	bf00      	nop
 8015176:	e7fe      	b.n	8015176 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d00a      	beq.n	8015198 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	2200      	movs	r2, #0
 8015186:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	3304      	adds	r3, #4
 801518c:	4618      	mov	r0, r3
 801518e:	f000 fa3d 	bl	801560c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	2201      	movs	r2, #1
 8015196:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8015198:	697b      	ldr	r3, [r7, #20]
	}
 801519a:	4618      	mov	r0, r3
 801519c:	3718      	adds	r7, #24
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b082      	sub	sp, #8
 80151a6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80151a8:	2020      	movs	r0, #32
 80151aa:	f002 fd55 	bl	8017c58 <pvPortMalloc>
 80151ae:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00a      	beq.n	80151cc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2200      	movs	r2, #0
 80151ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	3304      	adds	r3, #4
 80151c0:	4618      	mov	r0, r3
 80151c2:	f000 fa23 	bl	801560c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2200      	movs	r2, #0
 80151ca:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80151cc:	687b      	ldr	r3, [r7, #4]
	}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3708      	adds	r7, #8
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
	...

080151d8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b090      	sub	sp, #64	; 0x40
 80151dc:	af00      	add	r7, sp, #0
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	60b9      	str	r1, [r7, #8]
 80151e2:	607a      	str	r2, [r7, #4]
 80151e4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80151ea:	2300      	movs	r3, #0
 80151ec:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80151ee:	2300      	movs	r3, #0
 80151f0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d10a      	bne.n	801520e <xEventGroupWaitBits+0x36>
	__asm volatile
 80151f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fc:	f383 8811 	msr	BASEPRI, r3
 8015200:	f3bf 8f6f 	isb	sy
 8015204:	f3bf 8f4f 	dsb	sy
 8015208:	623b      	str	r3, [r7, #32]
}
 801520a:	bf00      	nop
 801520c:	e7fe      	b.n	801520c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015214:	2b00      	cmp	r3, #0
 8015216:	d00a      	beq.n	801522e <xEventGroupWaitBits+0x56>
	__asm volatile
 8015218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801521c:	f383 8811 	msr	BASEPRI, r3
 8015220:	f3bf 8f6f 	isb	sy
 8015224:	f3bf 8f4f 	dsb	sy
 8015228:	61fb      	str	r3, [r7, #28]
}
 801522a:	bf00      	nop
 801522c:	e7fe      	b.n	801522c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d10a      	bne.n	801524a <xEventGroupWaitBits+0x72>
	__asm volatile
 8015234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015238:	f383 8811 	msr	BASEPRI, r3
 801523c:	f3bf 8f6f 	isb	sy
 8015240:	f3bf 8f4f 	dsb	sy
 8015244:	61bb      	str	r3, [r7, #24]
}
 8015246:	bf00      	nop
 8015248:	e7fe      	b.n	8015248 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801524a:	f001 fe51 	bl	8016ef0 <xTaskGetSchedulerState>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d102      	bne.n	801525a <xEventGroupWaitBits+0x82>
 8015254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015256:	2b00      	cmp	r3, #0
 8015258:	d101      	bne.n	801525e <xEventGroupWaitBits+0x86>
 801525a:	2301      	movs	r3, #1
 801525c:	e000      	b.n	8015260 <xEventGroupWaitBits+0x88>
 801525e:	2300      	movs	r3, #0
 8015260:	2b00      	cmp	r3, #0
 8015262:	d10a      	bne.n	801527a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8015264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015268:	f383 8811 	msr	BASEPRI, r3
 801526c:	f3bf 8f6f 	isb	sy
 8015270:	f3bf 8f4f 	dsb	sy
 8015274:	617b      	str	r3, [r7, #20]
}
 8015276:	bf00      	nop
 8015278:	e7fe      	b.n	8015278 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801527a:	f001 f9a3 	bl	80165c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	68b9      	ldr	r1, [r7, #8]
 8015288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801528a:	f000 f988 	bl	801559e <prvTestWaitCondition>
 801528e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8015290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015292:	2b00      	cmp	r3, #0
 8015294:	d00e      	beq.n	80152b4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8015296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015298:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801529a:	2300      	movs	r3, #0
 801529c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d028      	beq.n	80152f6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80152a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	43db      	mvns	r3, r3
 80152ac:	401a      	ands	r2, r3
 80152ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152b0:	601a      	str	r2, [r3, #0]
 80152b2:	e020      	b.n	80152f6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80152b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d104      	bne.n	80152c4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80152ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80152be:	2301      	movs	r3, #1
 80152c0:	633b      	str	r3, [r7, #48]	; 0x30
 80152c2:	e018      	b.n	80152f6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d003      	beq.n	80152d2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80152ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80152d0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d003      	beq.n	80152e0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80152d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80152de:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80152e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152e2:	1d18      	adds	r0, r3, #4
 80152e4:	68ba      	ldr	r2, [r7, #8]
 80152e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e8:	4313      	orrs	r3, r2
 80152ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80152ec:	4619      	mov	r1, r3
 80152ee:	f001 fb77 	bl	80169e0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80152f2:	2300      	movs	r3, #0
 80152f4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80152f6:	f001 f973 	bl	80165e0 <xTaskResumeAll>
 80152fa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80152fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d031      	beq.n	8015366 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8015302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015304:	2b00      	cmp	r3, #0
 8015306:	d107      	bne.n	8015318 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8015308:	4b19      	ldr	r3, [pc, #100]	; (8015370 <xEventGroupWaitBits+0x198>)
 801530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801530e:	601a      	str	r2, [r3, #0]
 8015310:	f3bf 8f4f 	dsb	sy
 8015314:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8015318:	f001 fe76 	bl	8017008 <uxTaskResetEventItemValue>
 801531c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015324:	2b00      	cmp	r3, #0
 8015326:	d11a      	bne.n	801535e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8015328:	f002 fb74 	bl	8017a14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8015332:	683a      	ldr	r2, [r7, #0]
 8015334:	68b9      	ldr	r1, [r7, #8]
 8015336:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015338:	f000 f931 	bl	801559e <prvTestWaitCondition>
 801533c:	4603      	mov	r3, r0
 801533e:	2b00      	cmp	r3, #0
 8015340:	d009      	beq.n	8015356 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d006      	beq.n	8015356 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8015348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	43db      	mvns	r3, r3
 8015350:	401a      	ands	r2, r3
 8015352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015354:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8015356:	2301      	movs	r3, #1
 8015358:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801535a:	f002 fb8b 	bl	8017a74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015360:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015364:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8015366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015368:	4618      	mov	r0, r3
 801536a:	3740      	adds	r7, #64	; 0x40
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}
 8015370:	e000ed04 	.word	0xe000ed04

08015374 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b086      	sub	sp, #24
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d10a      	bne.n	801539e <xEventGroupClearBits+0x2a>
	__asm volatile
 8015388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801538c:	f383 8811 	msr	BASEPRI, r3
 8015390:	f3bf 8f6f 	isb	sy
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	60fb      	str	r3, [r7, #12]
}
 801539a:	bf00      	nop
 801539c:	e7fe      	b.n	801539c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d00a      	beq.n	80153be <xEventGroupClearBits+0x4a>
	__asm volatile
 80153a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ac:	f383 8811 	msr	BASEPRI, r3
 80153b0:	f3bf 8f6f 	isb	sy
 80153b4:	f3bf 8f4f 	dsb	sy
 80153b8:	60bb      	str	r3, [r7, #8]
}
 80153ba:	bf00      	nop
 80153bc:	e7fe      	b.n	80153bc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80153be:	f002 fb29 	bl	8017a14 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	43db      	mvns	r3, r3
 80153d0:	401a      	ands	r2, r3
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80153d6:	f002 fb4d 	bl	8017a74 <vPortExitCritical>

	return uxReturn;
 80153da:	693b      	ldr	r3, [r7, #16]
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3718      	adds	r7, #24
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80153ee:	2300      	movs	r3, #0
 80153f0:	683a      	ldr	r2, [r7, #0]
 80153f2:	6879      	ldr	r1, [r7, #4]
 80153f4:	4804      	ldr	r0, [pc, #16]	; (8015408 <xEventGroupClearBitsFromISR+0x24>)
 80153f6:	f002 f9c1 	bl	801777c <xTimerPendFunctionCallFromISR>
 80153fa:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80153fc:	68fb      	ldr	r3, [r7, #12]
	}
 80153fe:	4618      	mov	r0, r3
 8015400:	3710      	adds	r7, #16
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
 8015406:	bf00      	nop
 8015408:	08015585 	.word	0x08015585

0801540c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801540c:	b480      	push	{r7}
 801540e:	b089      	sub	sp, #36	; 0x24
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015418:	f3ef 8211 	mrs	r2, BASEPRI
 801541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015420:	f383 8811 	msr	BASEPRI, r3
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	f3bf 8f4f 	dsb	sy
 801542c:	60fa      	str	r2, [r7, #12]
 801542e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015430:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015432:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	617b      	str	r3, [r7, #20]
 801543a:	69bb      	ldr	r3, [r7, #24]
 801543c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015444:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8015446:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8015448:	4618      	mov	r0, r3
 801544a:	3724      	adds	r7, #36	; 0x24
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr

08015454 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b08e      	sub	sp, #56	; 0x38
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801545e:	2300      	movs	r3, #0
 8015460:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8015466:	2300      	movs	r3, #0
 8015468:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d10a      	bne.n	8015486 <xEventGroupSetBits+0x32>
	__asm volatile
 8015470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015474:	f383 8811 	msr	BASEPRI, r3
 8015478:	f3bf 8f6f 	isb	sy
 801547c:	f3bf 8f4f 	dsb	sy
 8015480:	613b      	str	r3, [r7, #16]
}
 8015482:	bf00      	nop
 8015484:	e7fe      	b.n	8015484 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801548c:	2b00      	cmp	r3, #0
 801548e:	d00a      	beq.n	80154a6 <xEventGroupSetBits+0x52>
	__asm volatile
 8015490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015494:	f383 8811 	msr	BASEPRI, r3
 8015498:	f3bf 8f6f 	isb	sy
 801549c:	f3bf 8f4f 	dsb	sy
 80154a0:	60fb      	str	r3, [r7, #12]
}
 80154a2:	bf00      	nop
 80154a4:	e7fe      	b.n	80154a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80154a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a8:	3304      	adds	r3, #4
 80154aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ae:	3308      	adds	r3, #8
 80154b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80154b2:	f001 f887 	bl	80165c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80154b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80154bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154be:	681a      	ldr	r2, [r3, #0]
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	431a      	orrs	r2, r3
 80154c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80154c8:	e03c      	b.n	8015544 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80154ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80154d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80154d6:	2300      	movs	r3, #0
 80154d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80154e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80154e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d108      	bne.n	8015506 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80154f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	69bb      	ldr	r3, [r7, #24]
 80154fa:	4013      	ands	r3, r2
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d00b      	beq.n	8015518 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8015500:	2301      	movs	r3, #1
 8015502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015504:	e008      	b.n	8015518 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8015506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015508:	681a      	ldr	r2, [r3, #0]
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	4013      	ands	r3, r2
 801550e:	69ba      	ldr	r2, [r7, #24]
 8015510:	429a      	cmp	r2, r3
 8015512:	d101      	bne.n	8015518 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8015514:	2301      	movs	r3, #1
 8015516:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8015518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801551a:	2b00      	cmp	r3, #0
 801551c:	d010      	beq.n	8015540 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015524:	2b00      	cmp	r3, #0
 8015526:	d003      	beq.n	8015530 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8015528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	4313      	orrs	r3, r2
 801552e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8015530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015538:	4619      	mov	r1, r3
 801553a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801553c:	f001 fb1c 	bl	8016b78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8015540:	69fb      	ldr	r3, [r7, #28]
 8015542:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8015544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015546:	6a3b      	ldr	r3, [r7, #32]
 8015548:	429a      	cmp	r2, r3
 801554a:	d1be      	bne.n	80154ca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554e:	681a      	ldr	r2, [r3, #0]
 8015550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015552:	43db      	mvns	r3, r3
 8015554:	401a      	ands	r2, r3
 8015556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015558:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801555a:	f001 f841 	bl	80165e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015560:	681b      	ldr	r3, [r3, #0]
}
 8015562:	4618      	mov	r0, r3
 8015564:	3738      	adds	r7, #56	; 0x38
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}

0801556a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801556a:	b580      	push	{r7, lr}
 801556c:	b082      	sub	sp, #8
 801556e:	af00      	add	r7, sp, #0
 8015570:	6078      	str	r0, [r7, #4]
 8015572:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8015574:	6839      	ldr	r1, [r7, #0]
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f7ff ff6c 	bl	8015454 <xEventGroupSetBits>
}
 801557c:	bf00      	nop
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801558e:	6839      	ldr	r1, [r7, #0]
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7ff feef 	bl	8015374 <xEventGroupClearBits>
}
 8015596:	bf00      	nop
 8015598:	3708      	adds	r7, #8
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}

0801559e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801559e:	b480      	push	{r7}
 80155a0:	b087      	sub	sp, #28
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	60f8      	str	r0, [r7, #12]
 80155a6:	60b9      	str	r1, [r7, #8]
 80155a8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80155aa:	2300      	movs	r3, #0
 80155ac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d107      	bne.n	80155c4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80155b4:	68fa      	ldr	r2, [r7, #12]
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	4013      	ands	r3, r2
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d00a      	beq.n	80155d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80155be:	2301      	movs	r3, #1
 80155c0:	617b      	str	r3, [r7, #20]
 80155c2:	e007      	b.n	80155d4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80155c4:	68fa      	ldr	r2, [r7, #12]
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	4013      	ands	r3, r2
 80155ca:	68ba      	ldr	r2, [r7, #8]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d101      	bne.n	80155d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80155d0:	2301      	movs	r3, #1
 80155d2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80155d4:	697b      	ldr	r3, [r7, #20]
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	371c      	adds	r7, #28
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr
	...

080155e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b086      	sub	sp, #24
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	68f9      	ldr	r1, [r7, #12]
 80155f6:	4804      	ldr	r0, [pc, #16]	; (8015608 <xEventGroupSetBitsFromISR+0x24>)
 80155f8:	f002 f8c0 	bl	801777c <xTimerPendFunctionCallFromISR>
 80155fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80155fe:	697b      	ldr	r3, [r7, #20]
	}
 8015600:	4618      	mov	r0, r3
 8015602:	3718      	adds	r7, #24
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	0801556b 	.word	0x0801556b

0801560c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f103 0208 	add.w	r2, r3, #8
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015624:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f103 0208 	add.w	r2, r3, #8
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f103 0208 	add.w	r2, r3, #8
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2200      	movs	r2, #0
 801563e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015640:	bf00      	nop
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2200      	movs	r2, #0
 8015658:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801565a:	bf00      	nop
 801565c:	370c      	adds	r7, #12
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr

08015666 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015666:	b480      	push	{r7}
 8015668:	b085      	sub	sp, #20
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
 801566e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	685b      	ldr	r3, [r3, #4]
 8015674:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	68fa      	ldr	r2, [r7, #12]
 801567a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	689a      	ldr	r2, [r3, #8]
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	689b      	ldr	r3, [r3, #8]
 8015688:	683a      	ldr	r2, [r7, #0]
 801568a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	1c5a      	adds	r2, r3, #1
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	601a      	str	r2, [r3, #0]
}
 80156a2:	bf00      	nop
 80156a4:	3714      	adds	r7, #20
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr

080156ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80156ae:	b480      	push	{r7}
 80156b0:	b085      	sub	sp, #20
 80156b2:	af00      	add	r7, sp, #0
 80156b4:	6078      	str	r0, [r7, #4]
 80156b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80156c4:	d103      	bne.n	80156ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	691b      	ldr	r3, [r3, #16]
 80156ca:	60fb      	str	r3, [r7, #12]
 80156cc:	e00c      	b.n	80156e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	3308      	adds	r3, #8
 80156d2:	60fb      	str	r3, [r7, #12]
 80156d4:	e002      	b.n	80156dc <vListInsert+0x2e>
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	60fb      	str	r3, [r7, #12]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	685b      	ldr	r3, [r3, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	68ba      	ldr	r2, [r7, #8]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d2f6      	bcs.n	80156d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	685a      	ldr	r2, [r3, #4]
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	683a      	ldr	r2, [r7, #0]
 80156f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	683a      	ldr	r2, [r7, #0]
 8015702:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	1c5a      	adds	r2, r3, #1
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	601a      	str	r2, [r3, #0]
}
 8015714:	bf00      	nop
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015720:	b480      	push	{r7}
 8015722:	b085      	sub	sp, #20
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	691b      	ldr	r3, [r3, #16]
 801572c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	6892      	ldr	r2, [r2, #8]
 8015736:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	687a      	ldr	r2, [r7, #4]
 801573e:	6852      	ldr	r2, [r2, #4]
 8015740:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	429a      	cmp	r2, r3
 801574a:	d103      	bne.n	8015754 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	689a      	ldr	r2, [r3, #8]
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2200      	movs	r2, #0
 8015758:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	1e5a      	subs	r2, r3, #1
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
}
 8015768:	4618      	mov	r0, r3
 801576a:	3714      	adds	r7, #20
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10a      	bne.n	801579e <xQueueGenericReset+0x2a>
	__asm volatile
 8015788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578c:	f383 8811 	msr	BASEPRI, r3
 8015790:	f3bf 8f6f 	isb	sy
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	60bb      	str	r3, [r7, #8]
}
 801579a:	bf00      	nop
 801579c:	e7fe      	b.n	801579c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801579e:	f002 f939 	bl	8017a14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157aa:	68f9      	ldr	r1, [r7, #12]
 80157ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80157ae:	fb01 f303 	mul.w	r3, r1, r3
 80157b2:	441a      	add	r2, r3
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2200      	movs	r2, #0
 80157bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	681a      	ldr	r2, [r3, #0]
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157ce:	3b01      	subs	r3, #1
 80157d0:	68f9      	ldr	r1, [r7, #12]
 80157d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80157d4:	fb01 f303 	mul.w	r3, r1, r3
 80157d8:	441a      	add	r2, r3
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	22ff      	movs	r2, #255	; 0xff
 80157e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	22ff      	movs	r2, #255	; 0xff
 80157ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d114      	bne.n	801581e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	691b      	ldr	r3, [r3, #16]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d01a      	beq.n	8015832 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	3310      	adds	r3, #16
 8015800:	4618      	mov	r0, r3
 8015802:	f001 f955 	bl	8016ab0 <xTaskRemoveFromEventList>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d012      	beq.n	8015832 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801580c:	4b0c      	ldr	r3, [pc, #48]	; (8015840 <xQueueGenericReset+0xcc>)
 801580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015812:	601a      	str	r2, [r3, #0]
 8015814:	f3bf 8f4f 	dsb	sy
 8015818:	f3bf 8f6f 	isb	sy
 801581c:	e009      	b.n	8015832 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	3310      	adds	r3, #16
 8015822:	4618      	mov	r0, r3
 8015824:	f7ff fef2 	bl	801560c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	3324      	adds	r3, #36	; 0x24
 801582c:	4618      	mov	r0, r3
 801582e:	f7ff feed 	bl	801560c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015832:	f002 f91f 	bl	8017a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015836:	2301      	movs	r3, #1
}
 8015838:	4618      	mov	r0, r3
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	e000ed04 	.word	0xe000ed04

08015844 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015844:	b580      	push	{r7, lr}
 8015846:	b08e      	sub	sp, #56	; 0x38
 8015848:	af02      	add	r7, sp, #8
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	607a      	str	r2, [r7, #4]
 8015850:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d10a      	bne.n	801586e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801585c:	f383 8811 	msr	BASEPRI, r3
 8015860:	f3bf 8f6f 	isb	sy
 8015864:	f3bf 8f4f 	dsb	sy
 8015868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801586a:	bf00      	nop
 801586c:	e7fe      	b.n	801586c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d10a      	bne.n	801588a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015878:	f383 8811 	msr	BASEPRI, r3
 801587c:	f3bf 8f6f 	isb	sy
 8015880:	f3bf 8f4f 	dsb	sy
 8015884:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015886:	bf00      	nop
 8015888:	e7fe      	b.n	8015888 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d002      	beq.n	8015896 <xQueueGenericCreateStatic+0x52>
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d001      	beq.n	801589a <xQueueGenericCreateStatic+0x56>
 8015896:	2301      	movs	r3, #1
 8015898:	e000      	b.n	801589c <xQueueGenericCreateStatic+0x58>
 801589a:	2300      	movs	r3, #0
 801589c:	2b00      	cmp	r3, #0
 801589e:	d10a      	bne.n	80158b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80158a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158a4:	f383 8811 	msr	BASEPRI, r3
 80158a8:	f3bf 8f6f 	isb	sy
 80158ac:	f3bf 8f4f 	dsb	sy
 80158b0:	623b      	str	r3, [r7, #32]
}
 80158b2:	bf00      	nop
 80158b4:	e7fe      	b.n	80158b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d102      	bne.n	80158c2 <xQueueGenericCreateStatic+0x7e>
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d101      	bne.n	80158c6 <xQueueGenericCreateStatic+0x82>
 80158c2:	2301      	movs	r3, #1
 80158c4:	e000      	b.n	80158c8 <xQueueGenericCreateStatic+0x84>
 80158c6:	2300      	movs	r3, #0
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d10a      	bne.n	80158e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80158cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d0:	f383 8811 	msr	BASEPRI, r3
 80158d4:	f3bf 8f6f 	isb	sy
 80158d8:	f3bf 8f4f 	dsb	sy
 80158dc:	61fb      	str	r3, [r7, #28]
}
 80158de:	bf00      	nop
 80158e0:	e7fe      	b.n	80158e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80158e2:	2350      	movs	r3, #80	; 0x50
 80158e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	2b50      	cmp	r3, #80	; 0x50
 80158ea:	d00a      	beq.n	8015902 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80158ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f0:	f383 8811 	msr	BASEPRI, r3
 80158f4:	f3bf 8f6f 	isb	sy
 80158f8:	f3bf 8f4f 	dsb	sy
 80158fc:	61bb      	str	r3, [r7, #24]
}
 80158fe:	bf00      	nop
 8015900:	e7fe      	b.n	8015900 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015902:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590a:	2b00      	cmp	r3, #0
 801590c:	d00d      	beq.n	801592a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015910:	2201      	movs	r2, #1
 8015912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015916:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	4613      	mov	r3, r2
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	68b9      	ldr	r1, [r7, #8]
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f000 f805 	bl	8015934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801592c:	4618      	mov	r0, r3
 801592e:	3730      	adds	r7, #48	; 0x30
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	607a      	str	r2, [r7, #4]
 8015940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015942:	68bb      	ldr	r3, [r7, #8]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d103      	bne.n	8015950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	69ba      	ldr	r2, [r7, #24]
 801594c:	601a      	str	r2, [r3, #0]
 801594e:	e002      	b.n	8015956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	68fa      	ldr	r2, [r7, #12]
 801595a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	68ba      	ldr	r2, [r7, #8]
 8015960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015962:	2101      	movs	r1, #1
 8015964:	69b8      	ldr	r0, [r7, #24]
 8015966:	f7ff ff05 	bl	8015774 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	78fa      	ldrb	r2, [r7, #3]
 801596e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
	...

0801597c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b08e      	sub	sp, #56	; 0x38
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	607a      	str	r2, [r7, #4]
 8015988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801598a:	2300      	movs	r3, #0
 801598c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015994:	2b00      	cmp	r3, #0
 8015996:	d10a      	bne.n	80159ae <xQueueGenericSend+0x32>
	__asm volatile
 8015998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599c:	f383 8811 	msr	BASEPRI, r3
 80159a0:	f3bf 8f6f 	isb	sy
 80159a4:	f3bf 8f4f 	dsb	sy
 80159a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80159aa:	bf00      	nop
 80159ac:	e7fe      	b.n	80159ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d103      	bne.n	80159bc <xQueueGenericSend+0x40>
 80159b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d101      	bne.n	80159c0 <xQueueGenericSend+0x44>
 80159bc:	2301      	movs	r3, #1
 80159be:	e000      	b.n	80159c2 <xQueueGenericSend+0x46>
 80159c0:	2300      	movs	r3, #0
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d10a      	bne.n	80159dc <xQueueGenericSend+0x60>
	__asm volatile
 80159c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ca:	f383 8811 	msr	BASEPRI, r3
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f3bf 8f4f 	dsb	sy
 80159d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80159d8:	bf00      	nop
 80159da:	e7fe      	b.n	80159da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	2b02      	cmp	r3, #2
 80159e0:	d103      	bne.n	80159ea <xQueueGenericSend+0x6e>
 80159e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159e6:	2b01      	cmp	r3, #1
 80159e8:	d101      	bne.n	80159ee <xQueueGenericSend+0x72>
 80159ea:	2301      	movs	r3, #1
 80159ec:	e000      	b.n	80159f0 <xQueueGenericSend+0x74>
 80159ee:	2300      	movs	r3, #0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d10a      	bne.n	8015a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80159f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f8:	f383 8811 	msr	BASEPRI, r3
 80159fc:	f3bf 8f6f 	isb	sy
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	623b      	str	r3, [r7, #32]
}
 8015a06:	bf00      	nop
 8015a08:	e7fe      	b.n	8015a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a0a:	f001 fa71 	bl	8016ef0 <xTaskGetSchedulerState>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d102      	bne.n	8015a1a <xQueueGenericSend+0x9e>
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d101      	bne.n	8015a1e <xQueueGenericSend+0xa2>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e000      	b.n	8015a20 <xQueueGenericSend+0xa4>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10a      	bne.n	8015a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8015a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a28:	f383 8811 	msr	BASEPRI, r3
 8015a2c:	f3bf 8f6f 	isb	sy
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	61fb      	str	r3, [r7, #28]
}
 8015a36:	bf00      	nop
 8015a38:	e7fe      	b.n	8015a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a3a:	f001 ffeb 	bl	8017a14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d302      	bcc.n	8015a50 <xQueueGenericSend+0xd4>
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	2b02      	cmp	r3, #2
 8015a4e:	d129      	bne.n	8015aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015a50:	683a      	ldr	r2, [r7, #0]
 8015a52:	68b9      	ldr	r1, [r7, #8]
 8015a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a56:	f000 fa0b 	bl	8015e70 <prvCopyDataToQueue>
 8015a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d010      	beq.n	8015a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a66:	3324      	adds	r3, #36	; 0x24
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f001 f821 	bl	8016ab0 <xTaskRemoveFromEventList>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d013      	beq.n	8015a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015a74:	4b3f      	ldr	r3, [pc, #252]	; (8015b74 <xQueueGenericSend+0x1f8>)
 8015a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a7a:	601a      	str	r2, [r3, #0]
 8015a7c:	f3bf 8f4f 	dsb	sy
 8015a80:	f3bf 8f6f 	isb	sy
 8015a84:	e00a      	b.n	8015a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d007      	beq.n	8015a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015a8c:	4b39      	ldr	r3, [pc, #228]	; (8015b74 <xQueueGenericSend+0x1f8>)
 8015a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a92:	601a      	str	r2, [r3, #0]
 8015a94:	f3bf 8f4f 	dsb	sy
 8015a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015a9c:	f001 ffea 	bl	8017a74 <vPortExitCritical>
				return pdPASS;
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	e063      	b.n	8015b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d103      	bne.n	8015ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015aaa:	f001 ffe3 	bl	8017a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	e05c      	b.n	8015b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d106      	bne.n	8015ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015ab8:	f107 0314 	add.w	r3, r7, #20
 8015abc:	4618      	mov	r0, r3
 8015abe:	f001 f8bd 	bl	8016c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015ac6:	f001 ffd5 	bl	8017a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015aca:	f000 fd7b 	bl	80165c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015ace:	f001 ffa1 	bl	8017a14 <vPortEnterCritical>
 8015ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015ad8:	b25b      	sxtb	r3, r3
 8015ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ade:	d103      	bne.n	8015ae8 <xQueueGenericSend+0x16c>
 8015ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015aee:	b25b      	sxtb	r3, r3
 8015af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015af4:	d103      	bne.n	8015afe <xQueueGenericSend+0x182>
 8015af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af8:	2200      	movs	r2, #0
 8015afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015afe:	f001 ffb9 	bl	8017a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b02:	1d3a      	adds	r2, r7, #4
 8015b04:	f107 0314 	add.w	r3, r7, #20
 8015b08:	4611      	mov	r1, r2
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f001 f8ac 	bl	8016c68 <xTaskCheckForTimeOut>
 8015b10:	4603      	mov	r3, r0
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d124      	bne.n	8015b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b18:	f000 faa2 	bl	8016060 <prvIsQueueFull>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d018      	beq.n	8015b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b24:	3310      	adds	r3, #16
 8015b26:	687a      	ldr	r2, [r7, #4]
 8015b28:	4611      	mov	r1, r2
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f000 ff34 	bl	8016998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b32:	f000 fa2d 	bl	8015f90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015b36:	f000 fd53 	bl	80165e0 <xTaskResumeAll>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	f47f af7c 	bne.w	8015a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015b42:	4b0c      	ldr	r3, [pc, #48]	; (8015b74 <xQueueGenericSend+0x1f8>)
 8015b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b48:	601a      	str	r2, [r3, #0]
 8015b4a:	f3bf 8f4f 	dsb	sy
 8015b4e:	f3bf 8f6f 	isb	sy
 8015b52:	e772      	b.n	8015a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b56:	f000 fa1b 	bl	8015f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b5a:	f000 fd41 	bl	80165e0 <xTaskResumeAll>
 8015b5e:	e76c      	b.n	8015a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b62:	f000 fa15 	bl	8015f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015b66:	f000 fd3b 	bl	80165e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	3738      	adds	r7, #56	; 0x38
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	e000ed04 	.word	0xe000ed04

08015b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b090      	sub	sp, #64	; 0x40
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	607a      	str	r2, [r7, #4]
 8015b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d10a      	bne.n	8015ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b94:	f383 8811 	msr	BASEPRI, r3
 8015b98:	f3bf 8f6f 	isb	sy
 8015b9c:	f3bf 8f4f 	dsb	sy
 8015ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015ba2:	bf00      	nop
 8015ba4:	e7fe      	b.n	8015ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d103      	bne.n	8015bb4 <xQueueGenericSendFromISR+0x3c>
 8015bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d101      	bne.n	8015bb8 <xQueueGenericSendFromISR+0x40>
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	e000      	b.n	8015bba <xQueueGenericSendFromISR+0x42>
 8015bb8:	2300      	movs	r3, #0
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d10a      	bne.n	8015bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc2:	f383 8811 	msr	BASEPRI, r3
 8015bc6:	f3bf 8f6f 	isb	sy
 8015bca:	f3bf 8f4f 	dsb	sy
 8015bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015bd0:	bf00      	nop
 8015bd2:	e7fe      	b.n	8015bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	2b02      	cmp	r3, #2
 8015bd8:	d103      	bne.n	8015be2 <xQueueGenericSendFromISR+0x6a>
 8015bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d101      	bne.n	8015be6 <xQueueGenericSendFromISR+0x6e>
 8015be2:	2301      	movs	r3, #1
 8015be4:	e000      	b.n	8015be8 <xQueueGenericSendFromISR+0x70>
 8015be6:	2300      	movs	r3, #0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d10a      	bne.n	8015c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf0:	f383 8811 	msr	BASEPRI, r3
 8015bf4:	f3bf 8f6f 	isb	sy
 8015bf8:	f3bf 8f4f 	dsb	sy
 8015bfc:	623b      	str	r3, [r7, #32]
}
 8015bfe:	bf00      	nop
 8015c00:	e7fe      	b.n	8015c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c02:	f001 ffe9 	bl	8017bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8015c06:	f3ef 8211 	mrs	r2, BASEPRI
 8015c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c0e:	f383 8811 	msr	BASEPRI, r3
 8015c12:	f3bf 8f6f 	isb	sy
 8015c16:	f3bf 8f4f 	dsb	sy
 8015c1a:	61fa      	str	r2, [r7, #28]
 8015c1c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8015c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d302      	bcc.n	8015c34 <xQueueGenericSendFromISR+0xbc>
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	2b02      	cmp	r3, #2
 8015c32:	d12f      	bne.n	8015c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015c44:	683a      	ldr	r2, [r7, #0]
 8015c46:	68b9      	ldr	r1, [r7, #8]
 8015c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c4a:	f000 f911 	bl	8015e70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c56:	d112      	bne.n	8015c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d016      	beq.n	8015c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c62:	3324      	adds	r3, #36	; 0x24
 8015c64:	4618      	mov	r0, r3
 8015c66:	f000 ff23 	bl	8016ab0 <xTaskRemoveFromEventList>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00e      	beq.n	8015c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d00b      	beq.n	8015c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2201      	movs	r2, #1
 8015c7a:	601a      	str	r2, [r3, #0]
 8015c7c:	e007      	b.n	8015c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015c82:	3301      	adds	r3, #1
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	b25a      	sxtb	r2, r3
 8015c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015c8e:	2301      	movs	r3, #1
 8015c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015c92:	e001      	b.n	8015c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015c94:	2300      	movs	r3, #0
 8015c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c9a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	f383 8811 	msr	BASEPRI, r3
}
 8015ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3740      	adds	r7, #64	; 0x40
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
	...

08015cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b08c      	sub	sp, #48	; 0x30
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	60b9      	str	r1, [r7, #8]
 8015cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d10a      	bne.n	8015ce0 <xQueueReceive+0x30>
	__asm volatile
 8015cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cce:	f383 8811 	msr	BASEPRI, r3
 8015cd2:	f3bf 8f6f 	isb	sy
 8015cd6:	f3bf 8f4f 	dsb	sy
 8015cda:	623b      	str	r3, [r7, #32]
}
 8015cdc:	bf00      	nop
 8015cde:	e7fe      	b.n	8015cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d103      	bne.n	8015cee <xQueueReceive+0x3e>
 8015ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d101      	bne.n	8015cf2 <xQueueReceive+0x42>
 8015cee:	2301      	movs	r3, #1
 8015cf0:	e000      	b.n	8015cf4 <xQueueReceive+0x44>
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10a      	bne.n	8015d0e <xQueueReceive+0x5e>
	__asm volatile
 8015cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cfc:	f383 8811 	msr	BASEPRI, r3
 8015d00:	f3bf 8f6f 	isb	sy
 8015d04:	f3bf 8f4f 	dsb	sy
 8015d08:	61fb      	str	r3, [r7, #28]
}
 8015d0a:	bf00      	nop
 8015d0c:	e7fe      	b.n	8015d0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d0e:	f001 f8ef 	bl	8016ef0 <xTaskGetSchedulerState>
 8015d12:	4603      	mov	r3, r0
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d102      	bne.n	8015d1e <xQueueReceive+0x6e>
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d101      	bne.n	8015d22 <xQueueReceive+0x72>
 8015d1e:	2301      	movs	r3, #1
 8015d20:	e000      	b.n	8015d24 <xQueueReceive+0x74>
 8015d22:	2300      	movs	r3, #0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d10a      	bne.n	8015d3e <xQueueReceive+0x8e>
	__asm volatile
 8015d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2c:	f383 8811 	msr	BASEPRI, r3
 8015d30:	f3bf 8f6f 	isb	sy
 8015d34:	f3bf 8f4f 	dsb	sy
 8015d38:	61bb      	str	r3, [r7, #24]
}
 8015d3a:	bf00      	nop
 8015d3c:	e7fe      	b.n	8015d3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d3e:	f001 fe69 	bl	8017a14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d01f      	beq.n	8015d8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d4e:	68b9      	ldr	r1, [r7, #8]
 8015d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d52:	f000 f8f7 	bl	8015f44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d58:	1e5a      	subs	r2, r3, #1
 8015d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	691b      	ldr	r3, [r3, #16]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00f      	beq.n	8015d86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d68:	3310      	adds	r3, #16
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f000 fea0 	bl	8016ab0 <xTaskRemoveFromEventList>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d007      	beq.n	8015d86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015d76:	4b3d      	ldr	r3, [pc, #244]	; (8015e6c <xQueueReceive+0x1bc>)
 8015d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d7c:	601a      	str	r2, [r3, #0]
 8015d7e:	f3bf 8f4f 	dsb	sy
 8015d82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015d86:	f001 fe75 	bl	8017a74 <vPortExitCritical>
				return pdPASS;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	e069      	b.n	8015e62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d103      	bne.n	8015d9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d94:	f001 fe6e 	bl	8017a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	e062      	b.n	8015e62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d106      	bne.n	8015db0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015da2:	f107 0310 	add.w	r3, r7, #16
 8015da6:	4618      	mov	r0, r3
 8015da8:	f000 ff48 	bl	8016c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015dac:	2301      	movs	r3, #1
 8015dae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015db0:	f001 fe60 	bl	8017a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015db4:	f000 fc06 	bl	80165c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015db8:	f001 fe2c 	bl	8017a14 <vPortEnterCritical>
 8015dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015dc2:	b25b      	sxtb	r3, r3
 8015dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015dc8:	d103      	bne.n	8015dd2 <xQueueReceive+0x122>
 8015dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dcc:	2200      	movs	r2, #0
 8015dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015dd8:	b25b      	sxtb	r3, r3
 8015dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015dde:	d103      	bne.n	8015de8 <xQueueReceive+0x138>
 8015de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de2:	2200      	movs	r2, #0
 8015de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015de8:	f001 fe44 	bl	8017a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015dec:	1d3a      	adds	r2, r7, #4
 8015dee:	f107 0310 	add.w	r3, r7, #16
 8015df2:	4611      	mov	r1, r2
 8015df4:	4618      	mov	r0, r3
 8015df6:	f000 ff37 	bl	8016c68 <xTaskCheckForTimeOut>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d123      	bne.n	8015e48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e02:	f000 f917 	bl	8016034 <prvIsQueueEmpty>
 8015e06:	4603      	mov	r3, r0
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d017      	beq.n	8015e3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0e:	3324      	adds	r3, #36	; 0x24
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	4611      	mov	r1, r2
 8015e14:	4618      	mov	r0, r3
 8015e16:	f000 fdbf 	bl	8016998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e1c:	f000 f8b8 	bl	8015f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015e20:	f000 fbde 	bl	80165e0 <xTaskResumeAll>
 8015e24:	4603      	mov	r3, r0
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d189      	bne.n	8015d3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015e2a:	4b10      	ldr	r3, [pc, #64]	; (8015e6c <xQueueReceive+0x1bc>)
 8015e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e30:	601a      	str	r2, [r3, #0]
 8015e32:	f3bf 8f4f 	dsb	sy
 8015e36:	f3bf 8f6f 	isb	sy
 8015e3a:	e780      	b.n	8015d3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e3e:	f000 f8a7 	bl	8015f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e42:	f000 fbcd 	bl	80165e0 <xTaskResumeAll>
 8015e46:	e77a      	b.n	8015d3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e4a:	f000 f8a1 	bl	8015f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e4e:	f000 fbc7 	bl	80165e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e54:	f000 f8ee 	bl	8016034 <prvIsQueueEmpty>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	f43f af6f 	beq.w	8015d3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3730      	adds	r7, #48	; 0x30
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	e000ed04 	.word	0xe000ed04

08015e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b086      	sub	sp, #24
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	60f8      	str	r0, [r7, #12]
 8015e78:	60b9      	str	r1, [r7, #8]
 8015e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d10d      	bne.n	8015eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d14d      	bne.n	8015f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	689b      	ldr	r3, [r3, #8]
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f001 f846 	bl	8016f2c <xTaskPriorityDisinherit>
 8015ea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	609a      	str	r2, [r3, #8]
 8015ea8:	e043      	b.n	8015f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d119      	bne.n	8015ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	6858      	ldr	r0, [r3, #4]
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eb8:	461a      	mov	r2, r3
 8015eba:	68b9      	ldr	r1, [r7, #8]
 8015ebc:	f002 f8e0 	bl	8018080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	685a      	ldr	r2, [r3, #4]
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ec8:	441a      	add	r2, r3
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	685a      	ldr	r2, [r3, #4]
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	689b      	ldr	r3, [r3, #8]
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	d32b      	bcc.n	8015f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	681a      	ldr	r2, [r3, #0]
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	605a      	str	r2, [r3, #4]
 8015ee2:	e026      	b.n	8015f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	68d8      	ldr	r0, [r3, #12]
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eec:	461a      	mov	r2, r3
 8015eee:	68b9      	ldr	r1, [r7, #8]
 8015ef0:	f002 f8c6 	bl	8018080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	68da      	ldr	r2, [r3, #12]
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015efc:	425b      	negs	r3, r3
 8015efe:	441a      	add	r2, r3
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	68da      	ldr	r2, [r3, #12]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d207      	bcs.n	8015f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	689a      	ldr	r2, [r3, #8]
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f18:	425b      	negs	r3, r3
 8015f1a:	441a      	add	r2, r3
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2b02      	cmp	r3, #2
 8015f24:	d105      	bne.n	8015f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d002      	beq.n	8015f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	3b01      	subs	r3, #1
 8015f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015f32:	693b      	ldr	r3, [r7, #16]
 8015f34:	1c5a      	adds	r2, r3, #1
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f3a:	697b      	ldr	r3, [r7, #20]
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3718      	adds	r7, #24
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}

08015f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d018      	beq.n	8015f88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	68da      	ldr	r2, [r3, #12]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f5e:	441a      	add	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	68da      	ldr	r2, [r3, #12]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	689b      	ldr	r3, [r3, #8]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d303      	bcc.n	8015f78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	68d9      	ldr	r1, [r3, #12]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f80:	461a      	mov	r2, r3
 8015f82:	6838      	ldr	r0, [r7, #0]
 8015f84:	f002 f87c 	bl	8018080 <memcpy>
	}
}
 8015f88:	bf00      	nop
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015f98:	f001 fd3c 	bl	8017a14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fa4:	e011      	b.n	8015fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d012      	beq.n	8015fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	3324      	adds	r3, #36	; 0x24
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f000 fd7c 	bl	8016ab0 <xTaskRemoveFromEventList>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d001      	beq.n	8015fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015fbe:	f000 feb5 	bl	8016d2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015fc2:	7bfb      	ldrb	r3, [r7, #15]
 8015fc4:	3b01      	subs	r3, #1
 8015fc6:	b2db      	uxtb	r3, r3
 8015fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	dce9      	bgt.n	8015fa6 <prvUnlockQueue+0x16>
 8015fd2:	e000      	b.n	8015fd6 <prvUnlockQueue+0x46>
					break;
 8015fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	22ff      	movs	r2, #255	; 0xff
 8015fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015fde:	f001 fd49 	bl	8017a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015fe2:	f001 fd17 	bl	8017a14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015fee:	e011      	b.n	8016014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	691b      	ldr	r3, [r3, #16]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d012      	beq.n	801601e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	3310      	adds	r3, #16
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f000 fd57 	bl	8016ab0 <xTaskRemoveFromEventList>
 8016002:	4603      	mov	r3, r0
 8016004:	2b00      	cmp	r3, #0
 8016006:	d001      	beq.n	801600c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016008:	f000 fe90 	bl	8016d2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801600c:	7bbb      	ldrb	r3, [r7, #14]
 801600e:	3b01      	subs	r3, #1
 8016010:	b2db      	uxtb	r3, r3
 8016012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016018:	2b00      	cmp	r3, #0
 801601a:	dce9      	bgt.n	8015ff0 <prvUnlockQueue+0x60>
 801601c:	e000      	b.n	8016020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801601e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	22ff      	movs	r2, #255	; 0xff
 8016024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016028:	f001 fd24 	bl	8017a74 <vPortExitCritical>
}
 801602c:	bf00      	nop
 801602e:	3710      	adds	r7, #16
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801603c:	f001 fcea 	bl	8017a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016044:	2b00      	cmp	r3, #0
 8016046:	d102      	bne.n	801604e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016048:	2301      	movs	r3, #1
 801604a:	60fb      	str	r3, [r7, #12]
 801604c:	e001      	b.n	8016052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801604e:	2300      	movs	r3, #0
 8016050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016052:	f001 fd0f 	bl	8017a74 <vPortExitCritical>

	return xReturn;
 8016056:	68fb      	ldr	r3, [r7, #12]
}
 8016058:	4618      	mov	r0, r3
 801605a:	3710      	adds	r7, #16
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016068:	f001 fcd4 	bl	8017a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016074:	429a      	cmp	r2, r3
 8016076:	d102      	bne.n	801607e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016078:	2301      	movs	r3, #1
 801607a:	60fb      	str	r3, [r7, #12]
 801607c:	e001      	b.n	8016082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801607e:	2300      	movs	r3, #0
 8016080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016082:	f001 fcf7 	bl	8017a74 <vPortExitCritical>

	return xReturn;
 8016086:	68fb      	ldr	r3, [r7, #12]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3710      	adds	r7, #16
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801609a:	2300      	movs	r3, #0
 801609c:	60fb      	str	r3, [r7, #12]
 801609e:	e014      	b.n	80160ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80160a0:	4a0f      	ldr	r2, [pc, #60]	; (80160e0 <vQueueAddToRegistry+0x50>)
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d10b      	bne.n	80160c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80160ac:	490c      	ldr	r1, [pc, #48]	; (80160e0 <vQueueAddToRegistry+0x50>)
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	683a      	ldr	r2, [r7, #0]
 80160b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80160b6:	4a0a      	ldr	r2, [pc, #40]	; (80160e0 <vQueueAddToRegistry+0x50>)
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	00db      	lsls	r3, r3, #3
 80160bc:	4413      	add	r3, r2
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80160c2:	e006      	b.n	80160d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	3301      	adds	r3, #1
 80160c8:	60fb      	str	r3, [r7, #12]
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2b07      	cmp	r3, #7
 80160ce:	d9e7      	bls.n	80160a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80160d0:	bf00      	nop
 80160d2:	bf00      	nop
 80160d4:	3714      	adds	r7, #20
 80160d6:	46bd      	mov	sp, r7
 80160d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160dc:	4770      	bx	lr
 80160de:	bf00      	nop
 80160e0:	2400263c 	.word	0x2400263c

080160e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b086      	sub	sp, #24
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	60b9      	str	r1, [r7, #8]
 80160ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80160f4:	f001 fc8e 	bl	8017a14 <vPortEnterCritical>
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80160fe:	b25b      	sxtb	r3, r3
 8016100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016104:	d103      	bne.n	801610e <vQueueWaitForMessageRestricted+0x2a>
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	2200      	movs	r2, #0
 801610a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016114:	b25b      	sxtb	r3, r3
 8016116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801611a:	d103      	bne.n	8016124 <vQueueWaitForMessageRestricted+0x40>
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	2200      	movs	r2, #0
 8016120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016124:	f001 fca6 	bl	8017a74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801612c:	2b00      	cmp	r3, #0
 801612e:	d106      	bne.n	801613e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	3324      	adds	r3, #36	; 0x24
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	68b9      	ldr	r1, [r7, #8]
 8016138:	4618      	mov	r0, r3
 801613a:	f000 fc8d 	bl	8016a58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801613e:	6978      	ldr	r0, [r7, #20]
 8016140:	f7ff ff26 	bl	8015f90 <prvUnlockQueue>
	}
 8016144:	bf00      	nop
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801614c:	b580      	push	{r7, lr}
 801614e:	b08e      	sub	sp, #56	; 0x38
 8016150:	af04      	add	r7, sp, #16
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	60b9      	str	r1, [r7, #8]
 8016156:	607a      	str	r2, [r7, #4]
 8016158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801615a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801615c:	2b00      	cmp	r3, #0
 801615e:	d10a      	bne.n	8016176 <xTaskCreateStatic+0x2a>
	__asm volatile
 8016160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016164:	f383 8811 	msr	BASEPRI, r3
 8016168:	f3bf 8f6f 	isb	sy
 801616c:	f3bf 8f4f 	dsb	sy
 8016170:	623b      	str	r3, [r7, #32]
}
 8016172:	bf00      	nop
 8016174:	e7fe      	b.n	8016174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016178:	2b00      	cmp	r3, #0
 801617a:	d10a      	bne.n	8016192 <xTaskCreateStatic+0x46>
	__asm volatile
 801617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016180:	f383 8811 	msr	BASEPRI, r3
 8016184:	f3bf 8f6f 	isb	sy
 8016188:	f3bf 8f4f 	dsb	sy
 801618c:	61fb      	str	r3, [r7, #28]
}
 801618e:	bf00      	nop
 8016190:	e7fe      	b.n	8016190 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016192:	235c      	movs	r3, #92	; 0x5c
 8016194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	2b5c      	cmp	r3, #92	; 0x5c
 801619a:	d00a      	beq.n	80161b2 <xTaskCreateStatic+0x66>
	__asm volatile
 801619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a0:	f383 8811 	msr	BASEPRI, r3
 80161a4:	f3bf 8f6f 	isb	sy
 80161a8:	f3bf 8f4f 	dsb	sy
 80161ac:	61bb      	str	r3, [r7, #24]
}
 80161ae:	bf00      	nop
 80161b0:	e7fe      	b.n	80161b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80161b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80161b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d01e      	beq.n	80161f8 <xTaskCreateStatic+0xac>
 80161ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d01b      	beq.n	80161f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80161c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80161c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80161c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80161ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161cc:	2202      	movs	r2, #2
 80161ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80161d2:	2300      	movs	r3, #0
 80161d4:	9303      	str	r3, [sp, #12]
 80161d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d8:	9302      	str	r3, [sp, #8]
 80161da:	f107 0314 	add.w	r3, r7, #20
 80161de:	9301      	str	r3, [sp, #4]
 80161e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e2:	9300      	str	r3, [sp, #0]
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	687a      	ldr	r2, [r7, #4]
 80161e8:	68b9      	ldr	r1, [r7, #8]
 80161ea:	68f8      	ldr	r0, [r7, #12]
 80161ec:	f000 f850 	bl	8016290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80161f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161f2:	f000 f8dd 	bl	80163b0 <prvAddNewTaskToReadyList>
 80161f6:	e001      	b.n	80161fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80161f8:	2300      	movs	r3, #0
 80161fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80161fc:	697b      	ldr	r3, [r7, #20]
	}
 80161fe:	4618      	mov	r0, r3
 8016200:	3728      	adds	r7, #40	; 0x28
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}

08016206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016206:	b580      	push	{r7, lr}
 8016208:	b08c      	sub	sp, #48	; 0x30
 801620a:	af04      	add	r7, sp, #16
 801620c:	60f8      	str	r0, [r7, #12]
 801620e:	60b9      	str	r1, [r7, #8]
 8016210:	603b      	str	r3, [r7, #0]
 8016212:	4613      	mov	r3, r2
 8016214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016216:	88fb      	ldrh	r3, [r7, #6]
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	4618      	mov	r0, r3
 801621c:	f001 fd1c 	bl	8017c58 <pvPortMalloc>
 8016220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d00e      	beq.n	8016246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016228:	205c      	movs	r0, #92	; 0x5c
 801622a:	f001 fd15 	bl	8017c58 <pvPortMalloc>
 801622e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016230:	69fb      	ldr	r3, [r7, #28]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d003      	beq.n	801623e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016236:	69fb      	ldr	r3, [r7, #28]
 8016238:	697a      	ldr	r2, [r7, #20]
 801623a:	631a      	str	r2, [r3, #48]	; 0x30
 801623c:	e005      	b.n	801624a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801623e:	6978      	ldr	r0, [r7, #20]
 8016240:	f001 fdd6 	bl	8017df0 <vPortFree>
 8016244:	e001      	b.n	801624a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016246:	2300      	movs	r3, #0
 8016248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d017      	beq.n	8016280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016250:	69fb      	ldr	r3, [r7, #28]
 8016252:	2200      	movs	r2, #0
 8016254:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016258:	88fa      	ldrh	r2, [r7, #6]
 801625a:	2300      	movs	r3, #0
 801625c:	9303      	str	r3, [sp, #12]
 801625e:	69fb      	ldr	r3, [r7, #28]
 8016260:	9302      	str	r3, [sp, #8]
 8016262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016264:	9301      	str	r3, [sp, #4]
 8016266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	68b9      	ldr	r1, [r7, #8]
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	f000 f80e 	bl	8016290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016274:	69f8      	ldr	r0, [r7, #28]
 8016276:	f000 f89b 	bl	80163b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801627a:	2301      	movs	r3, #1
 801627c:	61bb      	str	r3, [r7, #24]
 801627e:	e002      	b.n	8016286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016286:	69bb      	ldr	r3, [r7, #24]
	}
 8016288:	4618      	mov	r0, r3
 801628a:	3720      	adds	r7, #32
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b088      	sub	sp, #32
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
 801629c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	009b      	lsls	r3, r3, #2
 80162a6:	461a      	mov	r2, r3
 80162a8:	21a5      	movs	r1, #165	; 0xa5
 80162aa:	f001 fef7 	bl	801809c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80162ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80162b2:	6879      	ldr	r1, [r7, #4]
 80162b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80162b8:	440b      	add	r3, r1
 80162ba:	009b      	lsls	r3, r3, #2
 80162bc:	4413      	add	r3, r2
 80162be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	f023 0307 	bic.w	r3, r3, #7
 80162c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80162c8:	69bb      	ldr	r3, [r7, #24]
 80162ca:	f003 0307 	and.w	r3, r3, #7
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d00a      	beq.n	80162e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80162d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d6:	f383 8811 	msr	BASEPRI, r3
 80162da:	f3bf 8f6f 	isb	sy
 80162de:	f3bf 8f4f 	dsb	sy
 80162e2:	617b      	str	r3, [r7, #20]
}
 80162e4:	bf00      	nop
 80162e6:	e7fe      	b.n	80162e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d01f      	beq.n	801632e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80162ee:	2300      	movs	r3, #0
 80162f0:	61fb      	str	r3, [r7, #28]
 80162f2:	e012      	b.n	801631a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80162f4:	68ba      	ldr	r2, [r7, #8]
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	4413      	add	r3, r2
 80162fa:	7819      	ldrb	r1, [r3, #0]
 80162fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	4413      	add	r3, r2
 8016302:	3334      	adds	r3, #52	; 0x34
 8016304:	460a      	mov	r2, r1
 8016306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016308:	68ba      	ldr	r2, [r7, #8]
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	4413      	add	r3, r2
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d006      	beq.n	8016322 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016314:	69fb      	ldr	r3, [r7, #28]
 8016316:	3301      	adds	r3, #1
 8016318:	61fb      	str	r3, [r7, #28]
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	2b0f      	cmp	r3, #15
 801631e:	d9e9      	bls.n	80162f4 <prvInitialiseNewTask+0x64>
 8016320:	e000      	b.n	8016324 <prvInitialiseNewTask+0x94>
			{
				break;
 8016322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016326:	2200      	movs	r2, #0
 8016328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801632c:	e003      	b.n	8016336 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016330:	2200      	movs	r2, #0
 8016332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	2b37      	cmp	r3, #55	; 0x37
 801633a:	d901      	bls.n	8016340 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801633c:	2337      	movs	r3, #55	; 0x37
 801633e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801634a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634e:	2200      	movs	r2, #0
 8016350:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016354:	3304      	adds	r3, #4
 8016356:	4618      	mov	r0, r3
 8016358:	f7ff f978 	bl	801564c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635e:	3318      	adds	r3, #24
 8016360:	4618      	mov	r0, r3
 8016362:	f7ff f973 	bl	801564c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801636a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801637a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637e:	2200      	movs	r2, #0
 8016380:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016384:	2200      	movs	r2, #0
 8016386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801638a:	683a      	ldr	r2, [r7, #0]
 801638c:	68f9      	ldr	r1, [r7, #12]
 801638e:	69b8      	ldr	r0, [r7, #24]
 8016390:	f001 fa14 	bl	80177bc <pxPortInitialiseStack>
 8016394:	4602      	mov	r2, r0
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639c:	2b00      	cmp	r3, #0
 801639e:	d002      	beq.n	80163a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80163a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80163a6:	bf00      	nop
 80163a8:	3720      	adds	r7, #32
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
	...

080163b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80163b8:	f001 fb2c 	bl	8017a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80163bc:	4b2d      	ldr	r3, [pc, #180]	; (8016474 <prvAddNewTaskToReadyList+0xc4>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	3301      	adds	r3, #1
 80163c2:	4a2c      	ldr	r2, [pc, #176]	; (8016474 <prvAddNewTaskToReadyList+0xc4>)
 80163c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80163c6:	4b2c      	ldr	r3, [pc, #176]	; (8016478 <prvAddNewTaskToReadyList+0xc8>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d109      	bne.n	80163e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80163ce:	4a2a      	ldr	r2, [pc, #168]	; (8016478 <prvAddNewTaskToReadyList+0xc8>)
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80163d4:	4b27      	ldr	r3, [pc, #156]	; (8016474 <prvAddNewTaskToReadyList+0xc4>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d110      	bne.n	80163fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80163dc:	f000 fcca 	bl	8016d74 <prvInitialiseTaskLists>
 80163e0:	e00d      	b.n	80163fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80163e2:	4b26      	ldr	r3, [pc, #152]	; (801647c <prvAddNewTaskToReadyList+0xcc>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d109      	bne.n	80163fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80163ea:	4b23      	ldr	r3, [pc, #140]	; (8016478 <prvAddNewTaskToReadyList+0xc8>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d802      	bhi.n	80163fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80163f8:	4a1f      	ldr	r2, [pc, #124]	; (8016478 <prvAddNewTaskToReadyList+0xc8>)
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80163fe:	4b20      	ldr	r3, [pc, #128]	; (8016480 <prvAddNewTaskToReadyList+0xd0>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	3301      	adds	r3, #1
 8016404:	4a1e      	ldr	r2, [pc, #120]	; (8016480 <prvAddNewTaskToReadyList+0xd0>)
 8016406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016408:	4b1d      	ldr	r3, [pc, #116]	; (8016480 <prvAddNewTaskToReadyList+0xd0>)
 801640a:	681a      	ldr	r2, [r3, #0]
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016414:	4b1b      	ldr	r3, [pc, #108]	; (8016484 <prvAddNewTaskToReadyList+0xd4>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	429a      	cmp	r2, r3
 801641a:	d903      	bls.n	8016424 <prvAddNewTaskToReadyList+0x74>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016420:	4a18      	ldr	r2, [pc, #96]	; (8016484 <prvAddNewTaskToReadyList+0xd4>)
 8016422:	6013      	str	r3, [r2, #0]
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016428:	4613      	mov	r3, r2
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	4413      	add	r3, r2
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	4a15      	ldr	r2, [pc, #84]	; (8016488 <prvAddNewTaskToReadyList+0xd8>)
 8016432:	441a      	add	r2, r3
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	3304      	adds	r3, #4
 8016438:	4619      	mov	r1, r3
 801643a:	4610      	mov	r0, r2
 801643c:	f7ff f913 	bl	8015666 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016440:	f001 fb18 	bl	8017a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016444:	4b0d      	ldr	r3, [pc, #52]	; (801647c <prvAddNewTaskToReadyList+0xcc>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d00e      	beq.n	801646a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801644c:	4b0a      	ldr	r3, [pc, #40]	; (8016478 <prvAddNewTaskToReadyList+0xc8>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016456:	429a      	cmp	r2, r3
 8016458:	d207      	bcs.n	801646a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801645a:	4b0c      	ldr	r3, [pc, #48]	; (801648c <prvAddNewTaskToReadyList+0xdc>)
 801645c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016460:	601a      	str	r2, [r3, #0]
 8016462:	f3bf 8f4f 	dsb	sy
 8016466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801646a:	bf00      	nop
 801646c:	3708      	adds	r7, #8
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	24002b50 	.word	0x24002b50
 8016478:	2400267c 	.word	0x2400267c
 801647c:	24002b5c 	.word	0x24002b5c
 8016480:	24002b6c 	.word	0x24002b6c
 8016484:	24002b58 	.word	0x24002b58
 8016488:	24002680 	.word	0x24002680
 801648c:	e000ed04 	.word	0xe000ed04

08016490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016498:	2300      	movs	r3, #0
 801649a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d017      	beq.n	80164d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80164a2:	4b13      	ldr	r3, [pc, #76]	; (80164f0 <vTaskDelay+0x60>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d00a      	beq.n	80164c0 <vTaskDelay+0x30>
	__asm volatile
 80164aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ae:	f383 8811 	msr	BASEPRI, r3
 80164b2:	f3bf 8f6f 	isb	sy
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	60bb      	str	r3, [r7, #8]
}
 80164bc:	bf00      	nop
 80164be:	e7fe      	b.n	80164be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80164c0:	f000 f880 	bl	80165c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80164c4:	2100      	movs	r1, #0
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 fdb6 	bl	8017038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80164cc:	f000 f888 	bl	80165e0 <xTaskResumeAll>
 80164d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d107      	bne.n	80164e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80164d8:	4b06      	ldr	r3, [pc, #24]	; (80164f4 <vTaskDelay+0x64>)
 80164da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164de:	601a      	str	r2, [r3, #0]
 80164e0:	f3bf 8f4f 	dsb	sy
 80164e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80164e8:	bf00      	nop
 80164ea:	3710      	adds	r7, #16
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	24002b78 	.word	0x24002b78
 80164f4:	e000ed04 	.word	0xe000ed04

080164f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b08a      	sub	sp, #40	; 0x28
 80164fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80164fe:	2300      	movs	r3, #0
 8016500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016502:	2300      	movs	r3, #0
 8016504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016506:	463a      	mov	r2, r7
 8016508:	1d39      	adds	r1, r7, #4
 801650a:	f107 0308 	add.w	r3, r7, #8
 801650e:	4618      	mov	r0, r3
 8016510:	f7fe fddc 	bl	80150cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016514:	6839      	ldr	r1, [r7, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	68ba      	ldr	r2, [r7, #8]
 801651a:	9202      	str	r2, [sp, #8]
 801651c:	9301      	str	r3, [sp, #4]
 801651e:	2300      	movs	r3, #0
 8016520:	9300      	str	r3, [sp, #0]
 8016522:	2300      	movs	r3, #0
 8016524:	460a      	mov	r2, r1
 8016526:	4921      	ldr	r1, [pc, #132]	; (80165ac <vTaskStartScheduler+0xb4>)
 8016528:	4821      	ldr	r0, [pc, #132]	; (80165b0 <vTaskStartScheduler+0xb8>)
 801652a:	f7ff fe0f 	bl	801614c <xTaskCreateStatic>
 801652e:	4603      	mov	r3, r0
 8016530:	4a20      	ldr	r2, [pc, #128]	; (80165b4 <vTaskStartScheduler+0xbc>)
 8016532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016534:	4b1f      	ldr	r3, [pc, #124]	; (80165b4 <vTaskStartScheduler+0xbc>)
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d002      	beq.n	8016542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801653c:	2301      	movs	r3, #1
 801653e:	617b      	str	r3, [r7, #20]
 8016540:	e001      	b.n	8016546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016542:	2300      	movs	r3, #0
 8016544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	2b01      	cmp	r3, #1
 801654a:	d102      	bne.n	8016552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801654c:	f000 fdc8 	bl	80170e0 <xTimerCreateTimerTask>
 8016550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	2b01      	cmp	r3, #1
 8016556:	d116      	bne.n	8016586 <vTaskStartScheduler+0x8e>
	__asm volatile
 8016558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801655c:	f383 8811 	msr	BASEPRI, r3
 8016560:	f3bf 8f6f 	isb	sy
 8016564:	f3bf 8f4f 	dsb	sy
 8016568:	613b      	str	r3, [r7, #16]
}
 801656a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801656c:	4b12      	ldr	r3, [pc, #72]	; (80165b8 <vTaskStartScheduler+0xc0>)
 801656e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016572:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016574:	4b11      	ldr	r3, [pc, #68]	; (80165bc <vTaskStartScheduler+0xc4>)
 8016576:	2201      	movs	r2, #1
 8016578:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801657a:	4b11      	ldr	r3, [pc, #68]	; (80165c0 <vTaskStartScheduler+0xc8>)
 801657c:	2200      	movs	r2, #0
 801657e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016580:	f001 f9a6 	bl	80178d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016584:	e00e      	b.n	80165a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801658c:	d10a      	bne.n	80165a4 <vTaskStartScheduler+0xac>
	__asm volatile
 801658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016592:	f383 8811 	msr	BASEPRI, r3
 8016596:	f3bf 8f6f 	isb	sy
 801659a:	f3bf 8f4f 	dsb	sy
 801659e:	60fb      	str	r3, [r7, #12]
}
 80165a0:	bf00      	nop
 80165a2:	e7fe      	b.n	80165a2 <vTaskStartScheduler+0xaa>
}
 80165a4:	bf00      	nop
 80165a6:	3718      	adds	r7, #24
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}
 80165ac:	08018d10 	.word	0x08018d10
 80165b0:	08016d45 	.word	0x08016d45
 80165b4:	24002b74 	.word	0x24002b74
 80165b8:	24002b70 	.word	0x24002b70
 80165bc:	24002b5c 	.word	0x24002b5c
 80165c0:	24002b54 	.word	0x24002b54

080165c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80165c4:	b480      	push	{r7}
 80165c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80165c8:	4b04      	ldr	r3, [pc, #16]	; (80165dc <vTaskSuspendAll+0x18>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3301      	adds	r3, #1
 80165ce:	4a03      	ldr	r2, [pc, #12]	; (80165dc <vTaskSuspendAll+0x18>)
 80165d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80165d2:	bf00      	nop
 80165d4:	46bd      	mov	sp, r7
 80165d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165da:	4770      	bx	lr
 80165dc:	24002b78 	.word	0x24002b78

080165e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80165e6:	2300      	movs	r3, #0
 80165e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80165ea:	2300      	movs	r3, #0
 80165ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80165ee:	4b42      	ldr	r3, [pc, #264]	; (80166f8 <xTaskResumeAll+0x118>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d10a      	bne.n	801660c <xTaskResumeAll+0x2c>
	__asm volatile
 80165f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165fa:	f383 8811 	msr	BASEPRI, r3
 80165fe:	f3bf 8f6f 	isb	sy
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	603b      	str	r3, [r7, #0]
}
 8016608:	bf00      	nop
 801660a:	e7fe      	b.n	801660a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801660c:	f001 fa02 	bl	8017a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016610:	4b39      	ldr	r3, [pc, #228]	; (80166f8 <xTaskResumeAll+0x118>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	3b01      	subs	r3, #1
 8016616:	4a38      	ldr	r2, [pc, #224]	; (80166f8 <xTaskResumeAll+0x118>)
 8016618:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801661a:	4b37      	ldr	r3, [pc, #220]	; (80166f8 <xTaskResumeAll+0x118>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d162      	bne.n	80166e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016622:	4b36      	ldr	r3, [pc, #216]	; (80166fc <xTaskResumeAll+0x11c>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d05e      	beq.n	80166e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801662a:	e02f      	b.n	801668c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801662c:	4b34      	ldr	r3, [pc, #208]	; (8016700 <xTaskResumeAll+0x120>)
 801662e:	68db      	ldr	r3, [r3, #12]
 8016630:	68db      	ldr	r3, [r3, #12]
 8016632:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	3318      	adds	r3, #24
 8016638:	4618      	mov	r0, r3
 801663a:	f7ff f871 	bl	8015720 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	3304      	adds	r3, #4
 8016642:	4618      	mov	r0, r3
 8016644:	f7ff f86c 	bl	8015720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801664c:	4b2d      	ldr	r3, [pc, #180]	; (8016704 <xTaskResumeAll+0x124>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	429a      	cmp	r2, r3
 8016652:	d903      	bls.n	801665c <xTaskResumeAll+0x7c>
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016658:	4a2a      	ldr	r2, [pc, #168]	; (8016704 <xTaskResumeAll+0x124>)
 801665a:	6013      	str	r3, [r2, #0]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016660:	4613      	mov	r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	4413      	add	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4a27      	ldr	r2, [pc, #156]	; (8016708 <xTaskResumeAll+0x128>)
 801666a:	441a      	add	r2, r3
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	3304      	adds	r3, #4
 8016670:	4619      	mov	r1, r3
 8016672:	4610      	mov	r0, r2
 8016674:	f7fe fff7 	bl	8015666 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801667c:	4b23      	ldr	r3, [pc, #140]	; (801670c <xTaskResumeAll+0x12c>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016682:	429a      	cmp	r2, r3
 8016684:	d302      	bcc.n	801668c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016686:	4b22      	ldr	r3, [pc, #136]	; (8016710 <xTaskResumeAll+0x130>)
 8016688:	2201      	movs	r2, #1
 801668a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801668c:	4b1c      	ldr	r3, [pc, #112]	; (8016700 <xTaskResumeAll+0x120>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d1cb      	bne.n	801662c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d001      	beq.n	801669e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801669a:	f000 fc09 	bl	8016eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801669e:	4b1d      	ldr	r3, [pc, #116]	; (8016714 <xTaskResumeAll+0x134>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d010      	beq.n	80166cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80166aa:	f000 f847 	bl	801673c <xTaskIncrementTick>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d002      	beq.n	80166ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80166b4:	4b16      	ldr	r3, [pc, #88]	; (8016710 <xTaskResumeAll+0x130>)
 80166b6:	2201      	movs	r2, #1
 80166b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	3b01      	subs	r3, #1
 80166be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d1f1      	bne.n	80166aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80166c6:	4b13      	ldr	r3, [pc, #76]	; (8016714 <xTaskResumeAll+0x134>)
 80166c8:	2200      	movs	r2, #0
 80166ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80166cc:	4b10      	ldr	r3, [pc, #64]	; (8016710 <xTaskResumeAll+0x130>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d009      	beq.n	80166e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80166d4:	2301      	movs	r3, #1
 80166d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80166d8:	4b0f      	ldr	r3, [pc, #60]	; (8016718 <xTaskResumeAll+0x138>)
 80166da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166de:	601a      	str	r2, [r3, #0]
 80166e0:	f3bf 8f4f 	dsb	sy
 80166e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80166e8:	f001 f9c4 	bl	8017a74 <vPortExitCritical>

	return xAlreadyYielded;
 80166ec:	68bb      	ldr	r3, [r7, #8]
}
 80166ee:	4618      	mov	r0, r3
 80166f0:	3710      	adds	r7, #16
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}
 80166f6:	bf00      	nop
 80166f8:	24002b78 	.word	0x24002b78
 80166fc:	24002b50 	.word	0x24002b50
 8016700:	24002b10 	.word	0x24002b10
 8016704:	24002b58 	.word	0x24002b58
 8016708:	24002680 	.word	0x24002680
 801670c:	2400267c 	.word	0x2400267c
 8016710:	24002b64 	.word	0x24002b64
 8016714:	24002b60 	.word	0x24002b60
 8016718:	e000ed04 	.word	0xe000ed04

0801671c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801671c:	b480      	push	{r7}
 801671e:	b083      	sub	sp, #12
 8016720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016722:	4b05      	ldr	r3, [pc, #20]	; (8016738 <xTaskGetTickCount+0x1c>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016728:	687b      	ldr	r3, [r7, #4]
}
 801672a:	4618      	mov	r0, r3
 801672c:	370c      	adds	r7, #12
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr
 8016736:	bf00      	nop
 8016738:	24002b54 	.word	0x24002b54

0801673c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b086      	sub	sp, #24
 8016740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016742:	2300      	movs	r3, #0
 8016744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016746:	4b53      	ldr	r3, [pc, #332]	; (8016894 <xTaskIncrementTick+0x158>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	f040 8095 	bne.w	801687a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016750:	4b51      	ldr	r3, [pc, #324]	; (8016898 <xTaskIncrementTick+0x15c>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3301      	adds	r3, #1
 8016756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016758:	4a4f      	ldr	r2, [pc, #316]	; (8016898 <xTaskIncrementTick+0x15c>)
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d120      	bne.n	80167a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016764:	4b4d      	ldr	r3, [pc, #308]	; (801689c <xTaskIncrementTick+0x160>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d00a      	beq.n	8016784 <xTaskIncrementTick+0x48>
	__asm volatile
 801676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016772:	f383 8811 	msr	BASEPRI, r3
 8016776:	f3bf 8f6f 	isb	sy
 801677a:	f3bf 8f4f 	dsb	sy
 801677e:	603b      	str	r3, [r7, #0]
}
 8016780:	bf00      	nop
 8016782:	e7fe      	b.n	8016782 <xTaskIncrementTick+0x46>
 8016784:	4b45      	ldr	r3, [pc, #276]	; (801689c <xTaskIncrementTick+0x160>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	60fb      	str	r3, [r7, #12]
 801678a:	4b45      	ldr	r3, [pc, #276]	; (80168a0 <xTaskIncrementTick+0x164>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	4a43      	ldr	r2, [pc, #268]	; (801689c <xTaskIncrementTick+0x160>)
 8016790:	6013      	str	r3, [r2, #0]
 8016792:	4a43      	ldr	r2, [pc, #268]	; (80168a0 <xTaskIncrementTick+0x164>)
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	6013      	str	r3, [r2, #0]
 8016798:	4b42      	ldr	r3, [pc, #264]	; (80168a4 <xTaskIncrementTick+0x168>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	3301      	adds	r3, #1
 801679e:	4a41      	ldr	r2, [pc, #260]	; (80168a4 <xTaskIncrementTick+0x168>)
 80167a0:	6013      	str	r3, [r2, #0]
 80167a2:	f000 fb85 	bl	8016eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80167a6:	4b40      	ldr	r3, [pc, #256]	; (80168a8 <xTaskIncrementTick+0x16c>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	693a      	ldr	r2, [r7, #16]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d349      	bcc.n	8016844 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80167b0:	4b3a      	ldr	r3, [pc, #232]	; (801689c <xTaskIncrementTick+0x160>)
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d104      	bne.n	80167c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80167ba:	4b3b      	ldr	r3, [pc, #236]	; (80168a8 <xTaskIncrementTick+0x16c>)
 80167bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167c0:	601a      	str	r2, [r3, #0]
					break;
 80167c2:	e03f      	b.n	8016844 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167c4:	4b35      	ldr	r3, [pc, #212]	; (801689c <xTaskIncrementTick+0x160>)
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	68db      	ldr	r3, [r3, #12]
 80167ca:	68db      	ldr	r3, [r3, #12]
 80167cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80167d4:	693a      	ldr	r2, [r7, #16]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	429a      	cmp	r2, r3
 80167da:	d203      	bcs.n	80167e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80167dc:	4a32      	ldr	r2, [pc, #200]	; (80168a8 <xTaskIncrementTick+0x16c>)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80167e2:	e02f      	b.n	8016844 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	3304      	adds	r3, #4
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7fe ff99 	bl	8015720 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d004      	beq.n	8016800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	3318      	adds	r3, #24
 80167fa:	4618      	mov	r0, r3
 80167fc:	f7fe ff90 	bl	8015720 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016804:	4b29      	ldr	r3, [pc, #164]	; (80168ac <xTaskIncrementTick+0x170>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	429a      	cmp	r2, r3
 801680a:	d903      	bls.n	8016814 <xTaskIncrementTick+0xd8>
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016810:	4a26      	ldr	r2, [pc, #152]	; (80168ac <xTaskIncrementTick+0x170>)
 8016812:	6013      	str	r3, [r2, #0]
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016818:	4613      	mov	r3, r2
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	4413      	add	r3, r2
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	4a23      	ldr	r2, [pc, #140]	; (80168b0 <xTaskIncrementTick+0x174>)
 8016822:	441a      	add	r2, r3
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	3304      	adds	r3, #4
 8016828:	4619      	mov	r1, r3
 801682a:	4610      	mov	r0, r2
 801682c:	f7fe ff1b 	bl	8015666 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016834:	4b1f      	ldr	r3, [pc, #124]	; (80168b4 <xTaskIncrementTick+0x178>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801683a:	429a      	cmp	r2, r3
 801683c:	d3b8      	bcc.n	80167b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801683e:	2301      	movs	r3, #1
 8016840:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016842:	e7b5      	b.n	80167b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016844:	4b1b      	ldr	r3, [pc, #108]	; (80168b4 <xTaskIncrementTick+0x178>)
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801684a:	4919      	ldr	r1, [pc, #100]	; (80168b0 <xTaskIncrementTick+0x174>)
 801684c:	4613      	mov	r3, r2
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	4413      	add	r3, r2
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	440b      	add	r3, r1
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	2b01      	cmp	r3, #1
 801685a:	d901      	bls.n	8016860 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801685c:	2301      	movs	r3, #1
 801685e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8016860:	4b15      	ldr	r3, [pc, #84]	; (80168b8 <xTaskIncrementTick+0x17c>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d101      	bne.n	801686c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8016868:	f7ea fa96 	bl	8000d98 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801686c:	4b13      	ldr	r3, [pc, #76]	; (80168bc <xTaskIncrementTick+0x180>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d009      	beq.n	8016888 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8016874:	2301      	movs	r3, #1
 8016876:	617b      	str	r3, [r7, #20]
 8016878:	e006      	b.n	8016888 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801687a:	4b0f      	ldr	r3, [pc, #60]	; (80168b8 <xTaskIncrementTick+0x17c>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	3301      	adds	r3, #1
 8016880:	4a0d      	ldr	r2, [pc, #52]	; (80168b8 <xTaskIncrementTick+0x17c>)
 8016882:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8016884:	f7ea fa88 	bl	8000d98 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8016888:	697b      	ldr	r3, [r7, #20]
}
 801688a:	4618      	mov	r0, r3
 801688c:	3718      	adds	r7, #24
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}
 8016892:	bf00      	nop
 8016894:	24002b78 	.word	0x24002b78
 8016898:	24002b54 	.word	0x24002b54
 801689c:	24002b08 	.word	0x24002b08
 80168a0:	24002b0c 	.word	0x24002b0c
 80168a4:	24002b68 	.word	0x24002b68
 80168a8:	24002b70 	.word	0x24002b70
 80168ac:	24002b58 	.word	0x24002b58
 80168b0:	24002680 	.word	0x24002680
 80168b4:	2400267c 	.word	0x2400267c
 80168b8:	24002b60 	.word	0x24002b60
 80168bc:	24002b64 	.word	0x24002b64

080168c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80168c6:	4b2f      	ldr	r3, [pc, #188]	; (8016984 <vTaskSwitchContext+0xc4>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d003      	beq.n	80168d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80168ce:	4b2e      	ldr	r3, [pc, #184]	; (8016988 <vTaskSwitchContext+0xc8>)
 80168d0:	2201      	movs	r2, #1
 80168d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80168d4:	e052      	b.n	801697c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80168d6:	4b2c      	ldr	r3, [pc, #176]	; (8016988 <vTaskSwitchContext+0xc8>)
 80168d8:	2200      	movs	r2, #0
 80168da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80168dc:	4b2b      	ldr	r3, [pc, #172]	; (801698c <vTaskSwitchContext+0xcc>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	681a      	ldr	r2, [r3, #0]
 80168e2:	4b2a      	ldr	r3, [pc, #168]	; (801698c <vTaskSwitchContext+0xcc>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d808      	bhi.n	80168fe <vTaskSwitchContext+0x3e>
 80168ec:	4b27      	ldr	r3, [pc, #156]	; (801698c <vTaskSwitchContext+0xcc>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	4b26      	ldr	r3, [pc, #152]	; (801698c <vTaskSwitchContext+0xcc>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	3334      	adds	r3, #52	; 0x34
 80168f6:	4619      	mov	r1, r3
 80168f8:	4610      	mov	r0, r2
 80168fa:	f7ea fa5b 	bl	8000db4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168fe:	4b24      	ldr	r3, [pc, #144]	; (8016990 <vTaskSwitchContext+0xd0>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	60fb      	str	r3, [r7, #12]
 8016904:	e010      	b.n	8016928 <vTaskSwitchContext+0x68>
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d10a      	bne.n	8016922 <vTaskSwitchContext+0x62>
	__asm volatile
 801690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016910:	f383 8811 	msr	BASEPRI, r3
 8016914:	f3bf 8f6f 	isb	sy
 8016918:	f3bf 8f4f 	dsb	sy
 801691c:	607b      	str	r3, [r7, #4]
}
 801691e:	bf00      	nop
 8016920:	e7fe      	b.n	8016920 <vTaskSwitchContext+0x60>
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	3b01      	subs	r3, #1
 8016926:	60fb      	str	r3, [r7, #12]
 8016928:	491a      	ldr	r1, [pc, #104]	; (8016994 <vTaskSwitchContext+0xd4>)
 801692a:	68fa      	ldr	r2, [r7, #12]
 801692c:	4613      	mov	r3, r2
 801692e:	009b      	lsls	r3, r3, #2
 8016930:	4413      	add	r3, r2
 8016932:	009b      	lsls	r3, r3, #2
 8016934:	440b      	add	r3, r1
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d0e4      	beq.n	8016906 <vTaskSwitchContext+0x46>
 801693c:	68fa      	ldr	r2, [r7, #12]
 801693e:	4613      	mov	r3, r2
 8016940:	009b      	lsls	r3, r3, #2
 8016942:	4413      	add	r3, r2
 8016944:	009b      	lsls	r3, r3, #2
 8016946:	4a13      	ldr	r2, [pc, #76]	; (8016994 <vTaskSwitchContext+0xd4>)
 8016948:	4413      	add	r3, r2
 801694a:	60bb      	str	r3, [r7, #8]
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	685b      	ldr	r3, [r3, #4]
 8016950:	685a      	ldr	r2, [r3, #4]
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	605a      	str	r2, [r3, #4]
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	685a      	ldr	r2, [r3, #4]
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	3308      	adds	r3, #8
 801695e:	429a      	cmp	r2, r3
 8016960:	d104      	bne.n	801696c <vTaskSwitchContext+0xac>
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	685a      	ldr	r2, [r3, #4]
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	605a      	str	r2, [r3, #4]
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	685b      	ldr	r3, [r3, #4]
 8016970:	68db      	ldr	r3, [r3, #12]
 8016972:	4a06      	ldr	r2, [pc, #24]	; (801698c <vTaskSwitchContext+0xcc>)
 8016974:	6013      	str	r3, [r2, #0]
 8016976:	4a06      	ldr	r2, [pc, #24]	; (8016990 <vTaskSwitchContext+0xd0>)
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	6013      	str	r3, [r2, #0]
}
 801697c:	bf00      	nop
 801697e:	3710      	adds	r7, #16
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}
 8016984:	24002b78 	.word	0x24002b78
 8016988:	24002b64 	.word	0x24002b64
 801698c:	2400267c 	.word	0x2400267c
 8016990:	24002b58 	.word	0x24002b58
 8016994:	24002680 	.word	0x24002680

08016998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
 80169a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d10a      	bne.n	80169be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80169a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ac:	f383 8811 	msr	BASEPRI, r3
 80169b0:	f3bf 8f6f 	isb	sy
 80169b4:	f3bf 8f4f 	dsb	sy
 80169b8:	60fb      	str	r3, [r7, #12]
}
 80169ba:	bf00      	nop
 80169bc:	e7fe      	b.n	80169bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80169be:	4b07      	ldr	r3, [pc, #28]	; (80169dc <vTaskPlaceOnEventList+0x44>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	3318      	adds	r3, #24
 80169c4:	4619      	mov	r1, r3
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f7fe fe71 	bl	80156ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80169cc:	2101      	movs	r1, #1
 80169ce:	6838      	ldr	r0, [r7, #0]
 80169d0:	f000 fb32 	bl	8017038 <prvAddCurrentTaskToDelayedList>
}
 80169d4:	bf00      	nop
 80169d6:	3710      	adds	r7, #16
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	2400267c 	.word	0x2400267c

080169e0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b086      	sub	sp, #24
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	60f8      	str	r0, [r7, #12]
 80169e8:	60b9      	str	r1, [r7, #8]
 80169ea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d10a      	bne.n	8016a08 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80169f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169f6:	f383 8811 	msr	BASEPRI, r3
 80169fa:	f3bf 8f6f 	isb	sy
 80169fe:	f3bf 8f4f 	dsb	sy
 8016a02:	617b      	str	r3, [r7, #20]
}
 8016a04:	bf00      	nop
 8016a06:	e7fe      	b.n	8016a06 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8016a08:	4b11      	ldr	r3, [pc, #68]	; (8016a50 <vTaskPlaceOnUnorderedEventList+0x70>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d10a      	bne.n	8016a26 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8016a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a14:	f383 8811 	msr	BASEPRI, r3
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	f3bf 8f4f 	dsb	sy
 8016a20:	613b      	str	r3, [r7, #16]
}
 8016a22:	bf00      	nop
 8016a24:	e7fe      	b.n	8016a24 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016a26:	4b0b      	ldr	r3, [pc, #44]	; (8016a54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	68ba      	ldr	r2, [r7, #8]
 8016a2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8016a30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a32:	4b08      	ldr	r3, [pc, #32]	; (8016a54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	3318      	adds	r3, #24
 8016a38:	4619      	mov	r1, r3
 8016a3a:	68f8      	ldr	r0, [r7, #12]
 8016a3c:	f7fe fe13 	bl	8015666 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016a40:	2101      	movs	r1, #1
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f000 faf8 	bl	8017038 <prvAddCurrentTaskToDelayedList>
}
 8016a48:	bf00      	nop
 8016a4a:	3718      	adds	r7, #24
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	24002b78 	.word	0x24002b78
 8016a54:	2400267c 	.word	0x2400267c

08016a58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b086      	sub	sp, #24
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d10a      	bne.n	8016a80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a6e:	f383 8811 	msr	BASEPRI, r3
 8016a72:	f3bf 8f6f 	isb	sy
 8016a76:	f3bf 8f4f 	dsb	sy
 8016a7a:	617b      	str	r3, [r7, #20]
}
 8016a7c:	bf00      	nop
 8016a7e:	e7fe      	b.n	8016a7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a80:	4b0a      	ldr	r3, [pc, #40]	; (8016aac <vTaskPlaceOnEventListRestricted+0x54>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	3318      	adds	r3, #24
 8016a86:	4619      	mov	r1, r3
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	f7fe fdec 	bl	8015666 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d002      	beq.n	8016a9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016a9a:	6879      	ldr	r1, [r7, #4]
 8016a9c:	68b8      	ldr	r0, [r7, #8]
 8016a9e:	f000 facb 	bl	8017038 <prvAddCurrentTaskToDelayedList>
	}
 8016aa2:	bf00      	nop
 8016aa4:	3718      	adds	r7, #24
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	2400267c 	.word	0x2400267c

08016ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b086      	sub	sp, #24
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	68db      	ldr	r3, [r3, #12]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d10a      	bne.n	8016adc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	60fb      	str	r3, [r7, #12]
}
 8016ad8:	bf00      	nop
 8016ada:	e7fe      	b.n	8016ada <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	3318      	adds	r3, #24
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7fe fe1d 	bl	8015720 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ae6:	4b1e      	ldr	r3, [pc, #120]	; (8016b60 <xTaskRemoveFromEventList+0xb0>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d11d      	bne.n	8016b2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	3304      	adds	r3, #4
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7fe fe14 	bl	8015720 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016afc:	4b19      	ldr	r3, [pc, #100]	; (8016b64 <xTaskRemoveFromEventList+0xb4>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d903      	bls.n	8016b0c <xTaskRemoveFromEventList+0x5c>
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b08:	4a16      	ldr	r2, [pc, #88]	; (8016b64 <xTaskRemoveFromEventList+0xb4>)
 8016b0a:	6013      	str	r3, [r2, #0]
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b10:	4613      	mov	r3, r2
 8016b12:	009b      	lsls	r3, r3, #2
 8016b14:	4413      	add	r3, r2
 8016b16:	009b      	lsls	r3, r3, #2
 8016b18:	4a13      	ldr	r2, [pc, #76]	; (8016b68 <xTaskRemoveFromEventList+0xb8>)
 8016b1a:	441a      	add	r2, r3
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	3304      	adds	r3, #4
 8016b20:	4619      	mov	r1, r3
 8016b22:	4610      	mov	r0, r2
 8016b24:	f7fe fd9f 	bl	8015666 <vListInsertEnd>
 8016b28:	e005      	b.n	8016b36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	3318      	adds	r3, #24
 8016b2e:	4619      	mov	r1, r3
 8016b30:	480e      	ldr	r0, [pc, #56]	; (8016b6c <xTaskRemoveFromEventList+0xbc>)
 8016b32:	f7fe fd98 	bl	8015666 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b36:	693b      	ldr	r3, [r7, #16]
 8016b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b3a:	4b0d      	ldr	r3, [pc, #52]	; (8016b70 <xTaskRemoveFromEventList+0xc0>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d905      	bls.n	8016b50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016b44:	2301      	movs	r3, #1
 8016b46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016b48:	4b0a      	ldr	r3, [pc, #40]	; (8016b74 <xTaskRemoveFromEventList+0xc4>)
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	601a      	str	r2, [r3, #0]
 8016b4e:	e001      	b.n	8016b54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016b50:	2300      	movs	r3, #0
 8016b52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016b54:	697b      	ldr	r3, [r7, #20]
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3718      	adds	r7, #24
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}
 8016b5e:	bf00      	nop
 8016b60:	24002b78 	.word	0x24002b78
 8016b64:	24002b58 	.word	0x24002b58
 8016b68:	24002680 	.word	0x24002680
 8016b6c:	24002b10 	.word	0x24002b10
 8016b70:	2400267c 	.word	0x2400267c
 8016b74:	24002b64 	.word	0x24002b64

08016b78 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b086      	sub	sp, #24
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016b82:	4b29      	ldr	r3, [pc, #164]	; (8016c28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d10a      	bne.n	8016ba0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8016b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b8e:	f383 8811 	msr	BASEPRI, r3
 8016b92:	f3bf 8f6f 	isb	sy
 8016b96:	f3bf 8f4f 	dsb	sy
 8016b9a:	613b      	str	r3, [r7, #16]
}
 8016b9c:	bf00      	nop
 8016b9e:	e7fe      	b.n	8016b9e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d10a      	bne.n	8016bcc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8016bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bba:	f383 8811 	msr	BASEPRI, r3
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f3bf 8f4f 	dsb	sy
 8016bc6:	60fb      	str	r3, [r7, #12]
}
 8016bc8:	bf00      	nop
 8016bca:	e7fe      	b.n	8016bca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f7fe fda7 	bl	8015720 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016bd2:	697b      	ldr	r3, [r7, #20]
 8016bd4:	3304      	adds	r3, #4
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7fe fda2 	bl	8015720 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016be0:	4b12      	ldr	r3, [pc, #72]	; (8016c2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d903      	bls.n	8016bf0 <vTaskRemoveFromUnorderedEventList+0x78>
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bec:	4a0f      	ldr	r2, [pc, #60]	; (8016c2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016bee:	6013      	str	r3, [r2, #0]
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bf4:	4613      	mov	r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	4413      	add	r3, r2
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	4a0c      	ldr	r2, [pc, #48]	; (8016c30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8016bfe:	441a      	add	r2, r3
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	3304      	adds	r3, #4
 8016c04:	4619      	mov	r1, r3
 8016c06:	4610      	mov	r0, r2
 8016c08:	f7fe fd2d 	bl	8015666 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c10:	4b08      	ldr	r3, [pc, #32]	; (8016c34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d902      	bls.n	8016c20 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8016c1a:	4b07      	ldr	r3, [pc, #28]	; (8016c38 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8016c1c:	2201      	movs	r2, #1
 8016c1e:	601a      	str	r2, [r3, #0]
	}
}
 8016c20:	bf00      	nop
 8016c22:	3718      	adds	r7, #24
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}
 8016c28:	24002b78 	.word	0x24002b78
 8016c2c:	24002b58 	.word	0x24002b58
 8016c30:	24002680 	.word	0x24002680
 8016c34:	2400267c 	.word	0x2400267c
 8016c38:	24002b64 	.word	0x24002b64

08016c3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c44:	4b06      	ldr	r3, [pc, #24]	; (8016c60 <vTaskInternalSetTimeOutState+0x24>)
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c4c:	4b05      	ldr	r3, [pc, #20]	; (8016c64 <vTaskInternalSetTimeOutState+0x28>)
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	605a      	str	r2, [r3, #4]
}
 8016c54:	bf00      	nop
 8016c56:	370c      	adds	r7, #12
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5e:	4770      	bx	lr
 8016c60:	24002b68 	.word	0x24002b68
 8016c64:	24002b54 	.word	0x24002b54

08016c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b088      	sub	sp, #32
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d10a      	bne.n	8016c8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c7c:	f383 8811 	msr	BASEPRI, r3
 8016c80:	f3bf 8f6f 	isb	sy
 8016c84:	f3bf 8f4f 	dsb	sy
 8016c88:	613b      	str	r3, [r7, #16]
}
 8016c8a:	bf00      	nop
 8016c8c:	e7fe      	b.n	8016c8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d10a      	bne.n	8016caa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c98:	f383 8811 	msr	BASEPRI, r3
 8016c9c:	f3bf 8f6f 	isb	sy
 8016ca0:	f3bf 8f4f 	dsb	sy
 8016ca4:	60fb      	str	r3, [r7, #12]
}
 8016ca6:	bf00      	nop
 8016ca8:	e7fe      	b.n	8016ca8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016caa:	f000 feb3 	bl	8017a14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016cae:	4b1d      	ldr	r3, [pc, #116]	; (8016d24 <xTaskCheckForTimeOut+0xbc>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	69ba      	ldr	r2, [r7, #24]
 8016cba:	1ad3      	subs	r3, r2, r3
 8016cbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cc6:	d102      	bne.n	8016cce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	61fb      	str	r3, [r7, #28]
 8016ccc:	e023      	b.n	8016d16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	4b15      	ldr	r3, [pc, #84]	; (8016d28 <xTaskCheckForTimeOut+0xc0>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	d007      	beq.n	8016cea <xTaskCheckForTimeOut+0x82>
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	685b      	ldr	r3, [r3, #4]
 8016cde:	69ba      	ldr	r2, [r7, #24]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d302      	bcc.n	8016cea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	61fb      	str	r3, [r7, #28]
 8016ce8:	e015      	b.n	8016d16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	697a      	ldr	r2, [r7, #20]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d20b      	bcs.n	8016d0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	681a      	ldr	r2, [r3, #0]
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	1ad2      	subs	r2, r2, r3
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f7ff ff9b 	bl	8016c3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016d06:	2300      	movs	r3, #0
 8016d08:	61fb      	str	r3, [r7, #28]
 8016d0a:	e004      	b.n	8016d16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016d12:	2301      	movs	r3, #1
 8016d14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016d16:	f000 fead 	bl	8017a74 <vPortExitCritical>

	return xReturn;
 8016d1a:	69fb      	ldr	r3, [r7, #28]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3720      	adds	r7, #32
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	24002b54 	.word	0x24002b54
 8016d28:	24002b68 	.word	0x24002b68

08016d2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016d30:	4b03      	ldr	r3, [pc, #12]	; (8016d40 <vTaskMissedYield+0x14>)
 8016d32:	2201      	movs	r2, #1
 8016d34:	601a      	str	r2, [r3, #0]
}
 8016d36:	bf00      	nop
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3e:	4770      	bx	lr
 8016d40:	24002b64 	.word	0x24002b64

08016d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016d4c:	f000 f852 	bl	8016df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016d50:	4b06      	ldr	r3, [pc, #24]	; (8016d6c <prvIdleTask+0x28>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2b01      	cmp	r3, #1
 8016d56:	d9f9      	bls.n	8016d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8016d58:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <prvIdleTask+0x2c>)
 8016d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d5e:	601a      	str	r2, [r3, #0]
 8016d60:	f3bf 8f4f 	dsb	sy
 8016d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016d68:	e7f0      	b.n	8016d4c <prvIdleTask+0x8>
 8016d6a:	bf00      	nop
 8016d6c:	24002680 	.word	0x24002680
 8016d70:	e000ed04 	.word	0xe000ed04

08016d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	607b      	str	r3, [r7, #4]
 8016d7e:	e00c      	b.n	8016d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	4613      	mov	r3, r2
 8016d84:	009b      	lsls	r3, r3, #2
 8016d86:	4413      	add	r3, r2
 8016d88:	009b      	lsls	r3, r3, #2
 8016d8a:	4a12      	ldr	r2, [pc, #72]	; (8016dd4 <prvInitialiseTaskLists+0x60>)
 8016d8c:	4413      	add	r3, r2
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7fe fc3c 	bl	801560c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	3301      	adds	r3, #1
 8016d98:	607b      	str	r3, [r7, #4]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2b37      	cmp	r3, #55	; 0x37
 8016d9e:	d9ef      	bls.n	8016d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016da0:	480d      	ldr	r0, [pc, #52]	; (8016dd8 <prvInitialiseTaskLists+0x64>)
 8016da2:	f7fe fc33 	bl	801560c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016da6:	480d      	ldr	r0, [pc, #52]	; (8016ddc <prvInitialiseTaskLists+0x68>)
 8016da8:	f7fe fc30 	bl	801560c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016dac:	480c      	ldr	r0, [pc, #48]	; (8016de0 <prvInitialiseTaskLists+0x6c>)
 8016dae:	f7fe fc2d 	bl	801560c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016db2:	480c      	ldr	r0, [pc, #48]	; (8016de4 <prvInitialiseTaskLists+0x70>)
 8016db4:	f7fe fc2a 	bl	801560c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016db8:	480b      	ldr	r0, [pc, #44]	; (8016de8 <prvInitialiseTaskLists+0x74>)
 8016dba:	f7fe fc27 	bl	801560c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016dbe:	4b0b      	ldr	r3, [pc, #44]	; (8016dec <prvInitialiseTaskLists+0x78>)
 8016dc0:	4a05      	ldr	r2, [pc, #20]	; (8016dd8 <prvInitialiseTaskLists+0x64>)
 8016dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016dc4:	4b0a      	ldr	r3, [pc, #40]	; (8016df0 <prvInitialiseTaskLists+0x7c>)
 8016dc6:	4a05      	ldr	r2, [pc, #20]	; (8016ddc <prvInitialiseTaskLists+0x68>)
 8016dc8:	601a      	str	r2, [r3, #0]
}
 8016dca:	bf00      	nop
 8016dcc:	3708      	adds	r7, #8
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	24002680 	.word	0x24002680
 8016dd8:	24002ae0 	.word	0x24002ae0
 8016ddc:	24002af4 	.word	0x24002af4
 8016de0:	24002b10 	.word	0x24002b10
 8016de4:	24002b24 	.word	0x24002b24
 8016de8:	24002b3c 	.word	0x24002b3c
 8016dec:	24002b08 	.word	0x24002b08
 8016df0:	24002b0c 	.word	0x24002b0c

08016df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016dfa:	e019      	b.n	8016e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016dfc:	f000 fe0a 	bl	8017a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e00:	4b10      	ldr	r3, [pc, #64]	; (8016e44 <prvCheckTasksWaitingTermination+0x50>)
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	3304      	adds	r3, #4
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7fe fc87 	bl	8015720 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016e12:	4b0d      	ldr	r3, [pc, #52]	; (8016e48 <prvCheckTasksWaitingTermination+0x54>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	3b01      	subs	r3, #1
 8016e18:	4a0b      	ldr	r2, [pc, #44]	; (8016e48 <prvCheckTasksWaitingTermination+0x54>)
 8016e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016e1c:	4b0b      	ldr	r3, [pc, #44]	; (8016e4c <prvCheckTasksWaitingTermination+0x58>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	4a0a      	ldr	r2, [pc, #40]	; (8016e4c <prvCheckTasksWaitingTermination+0x58>)
 8016e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016e26:	f000 fe25 	bl	8017a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016e2a:	6878      	ldr	r0, [r7, #4]
 8016e2c:	f000 f810 	bl	8016e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e30:	4b06      	ldr	r3, [pc, #24]	; (8016e4c <prvCheckTasksWaitingTermination+0x58>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d1e1      	bne.n	8016dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e38:	bf00      	nop
 8016e3a:	bf00      	nop
 8016e3c:	3708      	adds	r7, #8
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}
 8016e42:	bf00      	nop
 8016e44:	24002b24 	.word	0x24002b24
 8016e48:	24002b50 	.word	0x24002b50
 8016e4c:	24002b38 	.word	0x24002b38

08016e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d108      	bne.n	8016e74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e66:	4618      	mov	r0, r3
 8016e68:	f000 ffc2 	bl	8017df0 <vPortFree>
				vPortFree( pxTCB );
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f000 ffbf 	bl	8017df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016e72:	e018      	b.n	8016ea6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016e7a:	2b01      	cmp	r3, #1
 8016e7c:	d103      	bne.n	8016e86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f000 ffb6 	bl	8017df0 <vPortFree>
	}
 8016e84:	e00f      	b.n	8016ea6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016e8c:	2b02      	cmp	r3, #2
 8016e8e:	d00a      	beq.n	8016ea6 <prvDeleteTCB+0x56>
	__asm volatile
 8016e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e94:	f383 8811 	msr	BASEPRI, r3
 8016e98:	f3bf 8f6f 	isb	sy
 8016e9c:	f3bf 8f4f 	dsb	sy
 8016ea0:	60fb      	str	r3, [r7, #12]
}
 8016ea2:	bf00      	nop
 8016ea4:	e7fe      	b.n	8016ea4 <prvDeleteTCB+0x54>
	}
 8016ea6:	bf00      	nop
 8016ea8:	3710      	adds	r7, #16
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
	...

08016eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	b083      	sub	sp, #12
 8016eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016eb6:	4b0c      	ldr	r3, [pc, #48]	; (8016ee8 <prvResetNextTaskUnblockTime+0x38>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d104      	bne.n	8016eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016ec0:	4b0a      	ldr	r3, [pc, #40]	; (8016eec <prvResetNextTaskUnblockTime+0x3c>)
 8016ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016ec8:	e008      	b.n	8016edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016eca:	4b07      	ldr	r3, [pc, #28]	; (8016ee8 <prvResetNextTaskUnblockTime+0x38>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	68db      	ldr	r3, [r3, #12]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	4a04      	ldr	r2, [pc, #16]	; (8016eec <prvResetNextTaskUnblockTime+0x3c>)
 8016eda:	6013      	str	r3, [r2, #0]
}
 8016edc:	bf00      	nop
 8016ede:	370c      	adds	r7, #12
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee6:	4770      	bx	lr
 8016ee8:	24002b08 	.word	0x24002b08
 8016eec:	24002b70 	.word	0x24002b70

08016ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016ef0:	b480      	push	{r7}
 8016ef2:	b083      	sub	sp, #12
 8016ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016ef6:	4b0b      	ldr	r3, [pc, #44]	; (8016f24 <xTaskGetSchedulerState+0x34>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d102      	bne.n	8016f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016efe:	2301      	movs	r3, #1
 8016f00:	607b      	str	r3, [r7, #4]
 8016f02:	e008      	b.n	8016f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f04:	4b08      	ldr	r3, [pc, #32]	; (8016f28 <xTaskGetSchedulerState+0x38>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d102      	bne.n	8016f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016f0c:	2302      	movs	r3, #2
 8016f0e:	607b      	str	r3, [r7, #4]
 8016f10:	e001      	b.n	8016f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016f12:	2300      	movs	r3, #0
 8016f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016f16:	687b      	ldr	r3, [r7, #4]
	}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	370c      	adds	r7, #12
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr
 8016f24:	24002b5c 	.word	0x24002b5c
 8016f28:	24002b78 	.word	0x24002b78

08016f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b086      	sub	sp, #24
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d056      	beq.n	8016ff0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016f42:	4b2e      	ldr	r3, [pc, #184]	; (8016ffc <xTaskPriorityDisinherit+0xd0>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	693a      	ldr	r2, [r7, #16]
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d00a      	beq.n	8016f62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f50:	f383 8811 	msr	BASEPRI, r3
 8016f54:	f3bf 8f6f 	isb	sy
 8016f58:	f3bf 8f4f 	dsb	sy
 8016f5c:	60fb      	str	r3, [r7, #12]
}
 8016f5e:	bf00      	nop
 8016f60:	e7fe      	b.n	8016f60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d10a      	bne.n	8016f80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f6e:	f383 8811 	msr	BASEPRI, r3
 8016f72:	f3bf 8f6f 	isb	sy
 8016f76:	f3bf 8f4f 	dsb	sy
 8016f7a:	60bb      	str	r3, [r7, #8]
}
 8016f7c:	bf00      	nop
 8016f7e:	e7fe      	b.n	8016f7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016f80:	693b      	ldr	r3, [r7, #16]
 8016f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f84:	1e5a      	subs	r2, r3, #1
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f8e:	693b      	ldr	r3, [r7, #16]
 8016f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d02c      	beq.n	8016ff0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d128      	bne.n	8016ff0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	3304      	adds	r3, #4
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7fe fbbc 	bl	8015720 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016fa8:	693b      	ldr	r3, [r7, #16]
 8016faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016fb8:	693b      	ldr	r3, [r7, #16]
 8016fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fc0:	4b0f      	ldr	r3, [pc, #60]	; (8017000 <xTaskPriorityDisinherit+0xd4>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d903      	bls.n	8016fd0 <xTaskPriorityDisinherit+0xa4>
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fcc:	4a0c      	ldr	r2, [pc, #48]	; (8017000 <xTaskPriorityDisinherit+0xd4>)
 8016fce:	6013      	str	r3, [r2, #0]
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fd4:	4613      	mov	r3, r2
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	4413      	add	r3, r2
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	4a09      	ldr	r2, [pc, #36]	; (8017004 <xTaskPriorityDisinherit+0xd8>)
 8016fde:	441a      	add	r2, r3
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	3304      	adds	r3, #4
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	4610      	mov	r0, r2
 8016fe8:	f7fe fb3d 	bl	8015666 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016fec:	2301      	movs	r3, #1
 8016fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016ff0:	697b      	ldr	r3, [r7, #20]
	}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3718      	adds	r7, #24
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}
 8016ffa:	bf00      	nop
 8016ffc:	2400267c 	.word	0x2400267c
 8017000:	24002b58 	.word	0x24002b58
 8017004:	24002680 	.word	0x24002680

08017008 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8017008:	b480      	push	{r7}
 801700a:	b083      	sub	sp, #12
 801700c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801700e:	4b09      	ldr	r3, [pc, #36]	; (8017034 <uxTaskResetEventItemValue+0x2c>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	699b      	ldr	r3, [r3, #24]
 8017014:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017016:	4b07      	ldr	r3, [pc, #28]	; (8017034 <uxTaskResetEventItemValue+0x2c>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801701c:	4b05      	ldr	r3, [pc, #20]	; (8017034 <uxTaskResetEventItemValue+0x2c>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8017024:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8017026:	687b      	ldr	r3, [r7, #4]
}
 8017028:	4618      	mov	r0, r3
 801702a:	370c      	adds	r7, #12
 801702c:	46bd      	mov	sp, r7
 801702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017032:	4770      	bx	lr
 8017034:	2400267c 	.word	0x2400267c

08017038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017042:	4b21      	ldr	r3, [pc, #132]	; (80170c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017048:	4b20      	ldr	r3, [pc, #128]	; (80170cc <prvAddCurrentTaskToDelayedList+0x94>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	3304      	adds	r3, #4
 801704e:	4618      	mov	r0, r3
 8017050:	f7fe fb66 	bl	8015720 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801705a:	d10a      	bne.n	8017072 <prvAddCurrentTaskToDelayedList+0x3a>
 801705c:	683b      	ldr	r3, [r7, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d007      	beq.n	8017072 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017062:	4b1a      	ldr	r3, [pc, #104]	; (80170cc <prvAddCurrentTaskToDelayedList+0x94>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	3304      	adds	r3, #4
 8017068:	4619      	mov	r1, r3
 801706a:	4819      	ldr	r0, [pc, #100]	; (80170d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801706c:	f7fe fafb 	bl	8015666 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017070:	e026      	b.n	80170c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017072:	68fa      	ldr	r2, [r7, #12]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	4413      	add	r3, r2
 8017078:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801707a:	4b14      	ldr	r3, [pc, #80]	; (80170cc <prvAddCurrentTaskToDelayedList+0x94>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	68ba      	ldr	r2, [r7, #8]
 8017080:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017082:	68ba      	ldr	r2, [r7, #8]
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	429a      	cmp	r2, r3
 8017088:	d209      	bcs.n	801709e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801708a:	4b12      	ldr	r3, [pc, #72]	; (80170d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	4b0f      	ldr	r3, [pc, #60]	; (80170cc <prvAddCurrentTaskToDelayedList+0x94>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	3304      	adds	r3, #4
 8017094:	4619      	mov	r1, r3
 8017096:	4610      	mov	r0, r2
 8017098:	f7fe fb09 	bl	80156ae <vListInsert>
}
 801709c:	e010      	b.n	80170c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801709e:	4b0e      	ldr	r3, [pc, #56]	; (80170d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	4b0a      	ldr	r3, [pc, #40]	; (80170cc <prvAddCurrentTaskToDelayedList+0x94>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	3304      	adds	r3, #4
 80170a8:	4619      	mov	r1, r3
 80170aa:	4610      	mov	r0, r2
 80170ac:	f7fe faff 	bl	80156ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80170b0:	4b0a      	ldr	r3, [pc, #40]	; (80170dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	68ba      	ldr	r2, [r7, #8]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d202      	bcs.n	80170c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80170ba:	4a08      	ldr	r2, [pc, #32]	; (80170dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	6013      	str	r3, [r2, #0]
}
 80170c0:	bf00      	nop
 80170c2:	3710      	adds	r7, #16
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	24002b54 	.word	0x24002b54
 80170cc:	2400267c 	.word	0x2400267c
 80170d0:	24002b3c 	.word	0x24002b3c
 80170d4:	24002b0c 	.word	0x24002b0c
 80170d8:	24002b08 	.word	0x24002b08
 80170dc:	24002b70 	.word	0x24002b70

080170e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b08a      	sub	sp, #40	; 0x28
 80170e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80170e6:	2300      	movs	r3, #0
 80170e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80170ea:	f000 fb07 	bl	80176fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80170ee:	4b1c      	ldr	r3, [pc, #112]	; (8017160 <xTimerCreateTimerTask+0x80>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d021      	beq.n	801713a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80170f6:	2300      	movs	r3, #0
 80170f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80170fa:	2300      	movs	r3, #0
 80170fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80170fe:	1d3a      	adds	r2, r7, #4
 8017100:	f107 0108 	add.w	r1, r7, #8
 8017104:	f107 030c 	add.w	r3, r7, #12
 8017108:	4618      	mov	r0, r3
 801710a:	f7fd fff9 	bl	8015100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801710e:	6879      	ldr	r1, [r7, #4]
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	68fa      	ldr	r2, [r7, #12]
 8017114:	9202      	str	r2, [sp, #8]
 8017116:	9301      	str	r3, [sp, #4]
 8017118:	2302      	movs	r3, #2
 801711a:	9300      	str	r3, [sp, #0]
 801711c:	2300      	movs	r3, #0
 801711e:	460a      	mov	r2, r1
 8017120:	4910      	ldr	r1, [pc, #64]	; (8017164 <xTimerCreateTimerTask+0x84>)
 8017122:	4811      	ldr	r0, [pc, #68]	; (8017168 <xTimerCreateTimerTask+0x88>)
 8017124:	f7ff f812 	bl	801614c <xTaskCreateStatic>
 8017128:	4603      	mov	r3, r0
 801712a:	4a10      	ldr	r2, [pc, #64]	; (801716c <xTimerCreateTimerTask+0x8c>)
 801712c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801712e:	4b0f      	ldr	r3, [pc, #60]	; (801716c <xTimerCreateTimerTask+0x8c>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d001      	beq.n	801713a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017136:	2301      	movs	r3, #1
 8017138:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d10a      	bne.n	8017156 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017144:	f383 8811 	msr	BASEPRI, r3
 8017148:	f3bf 8f6f 	isb	sy
 801714c:	f3bf 8f4f 	dsb	sy
 8017150:	613b      	str	r3, [r7, #16]
}
 8017152:	bf00      	nop
 8017154:	e7fe      	b.n	8017154 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017156:	697b      	ldr	r3, [r7, #20]
}
 8017158:	4618      	mov	r0, r3
 801715a:	3718      	adds	r7, #24
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}
 8017160:	24002bac 	.word	0x24002bac
 8017164:	08018d18 	.word	0x08018d18
 8017168:	080172a5 	.word	0x080172a5
 801716c:	24002bb0 	.word	0x24002bb0

08017170 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b08a      	sub	sp, #40	; 0x28
 8017174:	af00      	add	r7, sp, #0
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	60b9      	str	r1, [r7, #8]
 801717a:	607a      	str	r2, [r7, #4]
 801717c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801717e:	2300      	movs	r3, #0
 8017180:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d10a      	bne.n	801719e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801718c:	f383 8811 	msr	BASEPRI, r3
 8017190:	f3bf 8f6f 	isb	sy
 8017194:	f3bf 8f4f 	dsb	sy
 8017198:	623b      	str	r3, [r7, #32]
}
 801719a:	bf00      	nop
 801719c:	e7fe      	b.n	801719c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801719e:	4b1a      	ldr	r3, [pc, #104]	; (8017208 <xTimerGenericCommand+0x98>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d02a      	beq.n	80171fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	2b05      	cmp	r3, #5
 80171b6:	dc18      	bgt.n	80171ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80171b8:	f7ff fe9a 	bl	8016ef0 <xTaskGetSchedulerState>
 80171bc:	4603      	mov	r3, r0
 80171be:	2b02      	cmp	r3, #2
 80171c0:	d109      	bne.n	80171d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80171c2:	4b11      	ldr	r3, [pc, #68]	; (8017208 <xTimerGenericCommand+0x98>)
 80171c4:	6818      	ldr	r0, [r3, #0]
 80171c6:	f107 0110 	add.w	r1, r7, #16
 80171ca:	2300      	movs	r3, #0
 80171cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171ce:	f7fe fbd5 	bl	801597c <xQueueGenericSend>
 80171d2:	6278      	str	r0, [r7, #36]	; 0x24
 80171d4:	e012      	b.n	80171fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80171d6:	4b0c      	ldr	r3, [pc, #48]	; (8017208 <xTimerGenericCommand+0x98>)
 80171d8:	6818      	ldr	r0, [r3, #0]
 80171da:	f107 0110 	add.w	r1, r7, #16
 80171de:	2300      	movs	r3, #0
 80171e0:	2200      	movs	r2, #0
 80171e2:	f7fe fbcb 	bl	801597c <xQueueGenericSend>
 80171e6:	6278      	str	r0, [r7, #36]	; 0x24
 80171e8:	e008      	b.n	80171fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80171ea:	4b07      	ldr	r3, [pc, #28]	; (8017208 <xTimerGenericCommand+0x98>)
 80171ec:	6818      	ldr	r0, [r3, #0]
 80171ee:	f107 0110 	add.w	r1, r7, #16
 80171f2:	2300      	movs	r3, #0
 80171f4:	683a      	ldr	r2, [r7, #0]
 80171f6:	f7fe fcbf 	bl	8015b78 <xQueueGenericSendFromISR>
 80171fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80171fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80171fe:	4618      	mov	r0, r3
 8017200:	3728      	adds	r7, #40	; 0x28
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}
 8017206:	bf00      	nop
 8017208:	24002bac 	.word	0x24002bac

0801720c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b088      	sub	sp, #32
 8017210:	af02      	add	r7, sp, #8
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017216:	4b22      	ldr	r3, [pc, #136]	; (80172a0 <prvProcessExpiredTimer+0x94>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	68db      	ldr	r3, [r3, #12]
 801721c:	68db      	ldr	r3, [r3, #12]
 801721e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	3304      	adds	r3, #4
 8017224:	4618      	mov	r0, r3
 8017226:	f7fe fa7b 	bl	8015720 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017230:	f003 0304 	and.w	r3, r3, #4
 8017234:	2b00      	cmp	r3, #0
 8017236:	d022      	beq.n	801727e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	699a      	ldr	r2, [r3, #24]
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	18d1      	adds	r1, r2, r3
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	683a      	ldr	r2, [r7, #0]
 8017244:	6978      	ldr	r0, [r7, #20]
 8017246:	f000 f8d1 	bl	80173ec <prvInsertTimerInActiveList>
 801724a:	4603      	mov	r3, r0
 801724c:	2b00      	cmp	r3, #0
 801724e:	d01f      	beq.n	8017290 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017250:	2300      	movs	r3, #0
 8017252:	9300      	str	r3, [sp, #0]
 8017254:	2300      	movs	r3, #0
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	2100      	movs	r1, #0
 801725a:	6978      	ldr	r0, [r7, #20]
 801725c:	f7ff ff88 	bl	8017170 <xTimerGenericCommand>
 8017260:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d113      	bne.n	8017290 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801726c:	f383 8811 	msr	BASEPRI, r3
 8017270:	f3bf 8f6f 	isb	sy
 8017274:	f3bf 8f4f 	dsb	sy
 8017278:	60fb      	str	r3, [r7, #12]
}
 801727a:	bf00      	nop
 801727c:	e7fe      	b.n	801727c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017284:	f023 0301 	bic.w	r3, r3, #1
 8017288:	b2da      	uxtb	r2, r3
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	6a1b      	ldr	r3, [r3, #32]
 8017294:	6978      	ldr	r0, [r7, #20]
 8017296:	4798      	blx	r3
}
 8017298:	bf00      	nop
 801729a:	3718      	adds	r7, #24
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	24002ba4 	.word	0x24002ba4

080172a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b084      	sub	sp, #16
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80172ac:	f107 0308 	add.w	r3, r7, #8
 80172b0:	4618      	mov	r0, r3
 80172b2:	f000 f857 	bl	8017364 <prvGetNextExpireTime>
 80172b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	4619      	mov	r1, r3
 80172bc:	68f8      	ldr	r0, [r7, #12]
 80172be:	f000 f803 	bl	80172c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80172c2:	f000 f8d5 	bl	8017470 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80172c6:	e7f1      	b.n	80172ac <prvTimerTask+0x8>

080172c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b084      	sub	sp, #16
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80172d2:	f7ff f977 	bl	80165c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80172d6:	f107 0308 	add.w	r3, r7, #8
 80172da:	4618      	mov	r0, r3
 80172dc:	f000 f866 	bl	80173ac <prvSampleTimeNow>
 80172e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d130      	bne.n	801734a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d10a      	bne.n	8017304 <prvProcessTimerOrBlockTask+0x3c>
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d806      	bhi.n	8017304 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80172f6:	f7ff f973 	bl	80165e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80172fa:	68f9      	ldr	r1, [r7, #12]
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f7ff ff85 	bl	801720c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017302:	e024      	b.n	801734e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d008      	beq.n	801731c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801730a:	4b13      	ldr	r3, [pc, #76]	; (8017358 <prvProcessTimerOrBlockTask+0x90>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d101      	bne.n	8017318 <prvProcessTimerOrBlockTask+0x50>
 8017314:	2301      	movs	r3, #1
 8017316:	e000      	b.n	801731a <prvProcessTimerOrBlockTask+0x52>
 8017318:	2300      	movs	r3, #0
 801731a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801731c:	4b0f      	ldr	r3, [pc, #60]	; (801735c <prvProcessTimerOrBlockTask+0x94>)
 801731e:	6818      	ldr	r0, [r3, #0]
 8017320:	687a      	ldr	r2, [r7, #4]
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	1ad3      	subs	r3, r2, r3
 8017326:	683a      	ldr	r2, [r7, #0]
 8017328:	4619      	mov	r1, r3
 801732a:	f7fe fedb 	bl	80160e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801732e:	f7ff f957 	bl	80165e0 <xTaskResumeAll>
 8017332:	4603      	mov	r3, r0
 8017334:	2b00      	cmp	r3, #0
 8017336:	d10a      	bne.n	801734e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017338:	4b09      	ldr	r3, [pc, #36]	; (8017360 <prvProcessTimerOrBlockTask+0x98>)
 801733a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801733e:	601a      	str	r2, [r3, #0]
 8017340:	f3bf 8f4f 	dsb	sy
 8017344:	f3bf 8f6f 	isb	sy
}
 8017348:	e001      	b.n	801734e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801734a:	f7ff f949 	bl	80165e0 <xTaskResumeAll>
}
 801734e:	bf00      	nop
 8017350:	3710      	adds	r7, #16
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}
 8017356:	bf00      	nop
 8017358:	24002ba8 	.word	0x24002ba8
 801735c:	24002bac 	.word	0x24002bac
 8017360:	e000ed04 	.word	0xe000ed04

08017364 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017364:	b480      	push	{r7}
 8017366:	b085      	sub	sp, #20
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801736c:	4b0e      	ldr	r3, [pc, #56]	; (80173a8 <prvGetNextExpireTime+0x44>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d101      	bne.n	801737a <prvGetNextExpireTime+0x16>
 8017376:	2201      	movs	r2, #1
 8017378:	e000      	b.n	801737c <prvGetNextExpireTime+0x18>
 801737a:	2200      	movs	r2, #0
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d105      	bne.n	8017394 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017388:	4b07      	ldr	r3, [pc, #28]	; (80173a8 <prvGetNextExpireTime+0x44>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	68db      	ldr	r3, [r3, #12]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	60fb      	str	r3, [r7, #12]
 8017392:	e001      	b.n	8017398 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017394:	2300      	movs	r3, #0
 8017396:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017398:	68fb      	ldr	r3, [r7, #12]
}
 801739a:	4618      	mov	r0, r3
 801739c:	3714      	adds	r7, #20
 801739e:	46bd      	mov	sp, r7
 80173a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a4:	4770      	bx	lr
 80173a6:	bf00      	nop
 80173a8:	24002ba4 	.word	0x24002ba4

080173ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b084      	sub	sp, #16
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80173b4:	f7ff f9b2 	bl	801671c <xTaskGetTickCount>
 80173b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80173ba:	4b0b      	ldr	r3, [pc, #44]	; (80173e8 <prvSampleTimeNow+0x3c>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	68fa      	ldr	r2, [r7, #12]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d205      	bcs.n	80173d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80173c4:	f000 f936 	bl	8017634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2201      	movs	r2, #1
 80173cc:	601a      	str	r2, [r3, #0]
 80173ce:	e002      	b.n	80173d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2200      	movs	r2, #0
 80173d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80173d6:	4a04      	ldr	r2, [pc, #16]	; (80173e8 <prvSampleTimeNow+0x3c>)
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80173dc:	68fb      	ldr	r3, [r7, #12]
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3710      	adds	r7, #16
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}
 80173e6:	bf00      	nop
 80173e8:	24002bb4 	.word	0x24002bb4

080173ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b086      	sub	sp, #24
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	60b9      	str	r1, [r7, #8]
 80173f6:	607a      	str	r2, [r7, #4]
 80173f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80173fa:	2300      	movs	r3, #0
 80173fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	68ba      	ldr	r2, [r7, #8]
 8017402:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	68fa      	ldr	r2, [r7, #12]
 8017408:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801740a:	68ba      	ldr	r2, [r7, #8]
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	429a      	cmp	r2, r3
 8017410:	d812      	bhi.n	8017438 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	683b      	ldr	r3, [r7, #0]
 8017416:	1ad2      	subs	r2, r2, r3
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	699b      	ldr	r3, [r3, #24]
 801741c:	429a      	cmp	r2, r3
 801741e:	d302      	bcc.n	8017426 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017420:	2301      	movs	r3, #1
 8017422:	617b      	str	r3, [r7, #20]
 8017424:	e01b      	b.n	801745e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017426:	4b10      	ldr	r3, [pc, #64]	; (8017468 <prvInsertTimerInActiveList+0x7c>)
 8017428:	681a      	ldr	r2, [r3, #0]
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	3304      	adds	r3, #4
 801742e:	4619      	mov	r1, r3
 8017430:	4610      	mov	r0, r2
 8017432:	f7fe f93c 	bl	80156ae <vListInsert>
 8017436:	e012      	b.n	801745e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	429a      	cmp	r2, r3
 801743e:	d206      	bcs.n	801744e <prvInsertTimerInActiveList+0x62>
 8017440:	68ba      	ldr	r2, [r7, #8]
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	429a      	cmp	r2, r3
 8017446:	d302      	bcc.n	801744e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017448:	2301      	movs	r3, #1
 801744a:	617b      	str	r3, [r7, #20]
 801744c:	e007      	b.n	801745e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801744e:	4b07      	ldr	r3, [pc, #28]	; (801746c <prvInsertTimerInActiveList+0x80>)
 8017450:	681a      	ldr	r2, [r3, #0]
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	3304      	adds	r3, #4
 8017456:	4619      	mov	r1, r3
 8017458:	4610      	mov	r0, r2
 801745a:	f7fe f928 	bl	80156ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 801745e:	697b      	ldr	r3, [r7, #20]
}
 8017460:	4618      	mov	r0, r3
 8017462:	3718      	adds	r7, #24
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}
 8017468:	24002ba8 	.word	0x24002ba8
 801746c:	24002ba4 	.word	0x24002ba4

08017470 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b08e      	sub	sp, #56	; 0x38
 8017474:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017476:	e0ca      	b.n	801760e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2b00      	cmp	r3, #0
 801747c:	da18      	bge.n	80174b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801747e:	1d3b      	adds	r3, r7, #4
 8017480:	3304      	adds	r3, #4
 8017482:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017486:	2b00      	cmp	r3, #0
 8017488:	d10a      	bne.n	80174a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748e:	f383 8811 	msr	BASEPRI, r3
 8017492:	f3bf 8f6f 	isb	sy
 8017496:	f3bf 8f4f 	dsb	sy
 801749a:	61fb      	str	r3, [r7, #28]
}
 801749c:	bf00      	nop
 801749e:	e7fe      	b.n	801749e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80174a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174a6:	6850      	ldr	r0, [r2, #4]
 80174a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174aa:	6892      	ldr	r2, [r2, #8]
 80174ac:	4611      	mov	r1, r2
 80174ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f2c0 80aa 	blt.w	801760c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80174bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174be:	695b      	ldr	r3, [r3, #20]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d004      	beq.n	80174ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80174c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c6:	3304      	adds	r3, #4
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7fe f929 	bl	8015720 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80174ce:	463b      	mov	r3, r7
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7ff ff6b 	bl	80173ac <prvSampleTimeNow>
 80174d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2b09      	cmp	r3, #9
 80174dc:	f200 8097 	bhi.w	801760e <prvProcessReceivedCommands+0x19e>
 80174e0:	a201      	add	r2, pc, #4	; (adr r2, 80174e8 <prvProcessReceivedCommands+0x78>)
 80174e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174e6:	bf00      	nop
 80174e8:	08017511 	.word	0x08017511
 80174ec:	08017511 	.word	0x08017511
 80174f0:	08017511 	.word	0x08017511
 80174f4:	08017585 	.word	0x08017585
 80174f8:	08017599 	.word	0x08017599
 80174fc:	080175e3 	.word	0x080175e3
 8017500:	08017511 	.word	0x08017511
 8017504:	08017511 	.word	0x08017511
 8017508:	08017585 	.word	0x08017585
 801750c:	08017599 	.word	0x08017599
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017516:	f043 0301 	orr.w	r3, r3, #1
 801751a:	b2da      	uxtb	r2, r3
 801751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801751e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017522:	68ba      	ldr	r2, [r7, #8]
 8017524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017526:	699b      	ldr	r3, [r3, #24]
 8017528:	18d1      	adds	r1, r2, r3
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801752e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017530:	f7ff ff5c 	bl	80173ec <prvInsertTimerInActiveList>
 8017534:	4603      	mov	r3, r0
 8017536:	2b00      	cmp	r3, #0
 8017538:	d069      	beq.n	801760e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753c:	6a1b      	ldr	r3, [r3, #32]
 801753e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017540:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017548:	f003 0304 	and.w	r3, r3, #4
 801754c:	2b00      	cmp	r3, #0
 801754e:	d05e      	beq.n	801760e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017550:	68ba      	ldr	r2, [r7, #8]
 8017552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017554:	699b      	ldr	r3, [r3, #24]
 8017556:	441a      	add	r2, r3
 8017558:	2300      	movs	r3, #0
 801755a:	9300      	str	r3, [sp, #0]
 801755c:	2300      	movs	r3, #0
 801755e:	2100      	movs	r1, #0
 8017560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017562:	f7ff fe05 	bl	8017170 <xTimerGenericCommand>
 8017566:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017568:	6a3b      	ldr	r3, [r7, #32]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d14f      	bne.n	801760e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017572:	f383 8811 	msr	BASEPRI, r3
 8017576:	f3bf 8f6f 	isb	sy
 801757a:	f3bf 8f4f 	dsb	sy
 801757e:	61bb      	str	r3, [r7, #24]
}
 8017580:	bf00      	nop
 8017582:	e7fe      	b.n	8017582 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801758a:	f023 0301 	bic.w	r3, r3, #1
 801758e:	b2da      	uxtb	r2, r3
 8017590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017596:	e03a      	b.n	801760e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801759e:	f043 0301 	orr.w	r3, r3, #1
 80175a2:	b2da      	uxtb	r2, r3
 80175a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80175aa:	68ba      	ldr	r2, [r7, #8]
 80175ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80175b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b2:	699b      	ldr	r3, [r3, #24]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d10a      	bne.n	80175ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80175b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175bc:	f383 8811 	msr	BASEPRI, r3
 80175c0:	f3bf 8f6f 	isb	sy
 80175c4:	f3bf 8f4f 	dsb	sy
 80175c8:	617b      	str	r3, [r7, #20]
}
 80175ca:	bf00      	nop
 80175cc:	e7fe      	b.n	80175cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80175ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d0:	699a      	ldr	r2, [r3, #24]
 80175d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d4:	18d1      	adds	r1, r2, r3
 80175d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175dc:	f7ff ff06 	bl	80173ec <prvInsertTimerInActiveList>
					break;
 80175e0:	e015      	b.n	801760e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80175e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175e8:	f003 0302 	and.w	r3, r3, #2
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d103      	bne.n	80175f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80175f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175f2:	f000 fbfd 	bl	8017df0 <vPortFree>
 80175f6:	e00a      	b.n	801760e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80175f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175fe:	f023 0301 	bic.w	r3, r3, #1
 8017602:	b2da      	uxtb	r2, r3
 8017604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801760a:	e000      	b.n	801760e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801760c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801760e:	4b08      	ldr	r3, [pc, #32]	; (8017630 <prvProcessReceivedCommands+0x1c0>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	1d39      	adds	r1, r7, #4
 8017614:	2200      	movs	r2, #0
 8017616:	4618      	mov	r0, r3
 8017618:	f7fe fb4a 	bl	8015cb0 <xQueueReceive>
 801761c:	4603      	mov	r3, r0
 801761e:	2b00      	cmp	r3, #0
 8017620:	f47f af2a 	bne.w	8017478 <prvProcessReceivedCommands+0x8>
	}
}
 8017624:	bf00      	nop
 8017626:	bf00      	nop
 8017628:	3730      	adds	r7, #48	; 0x30
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}
 801762e:	bf00      	nop
 8017630:	24002bac 	.word	0x24002bac

08017634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b088      	sub	sp, #32
 8017638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801763a:	e048      	b.n	80176ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801763c:	4b2d      	ldr	r3, [pc, #180]	; (80176f4 <prvSwitchTimerLists+0xc0>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	68db      	ldr	r3, [r3, #12]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017646:	4b2b      	ldr	r3, [pc, #172]	; (80176f4 <prvSwitchTimerLists+0xc0>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	68db      	ldr	r3, [r3, #12]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	3304      	adds	r3, #4
 8017654:	4618      	mov	r0, r3
 8017656:	f7fe f863 	bl	8015720 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	6a1b      	ldr	r3, [r3, #32]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017668:	f003 0304 	and.w	r3, r3, #4
 801766c:	2b00      	cmp	r3, #0
 801766e:	d02e      	beq.n	80176ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	699b      	ldr	r3, [r3, #24]
 8017674:	693a      	ldr	r2, [r7, #16]
 8017676:	4413      	add	r3, r2
 8017678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801767a:	68ba      	ldr	r2, [r7, #8]
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	429a      	cmp	r2, r3
 8017680:	d90e      	bls.n	80176a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	68ba      	ldr	r2, [r7, #8]
 8017686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	68fa      	ldr	r2, [r7, #12]
 801768c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801768e:	4b19      	ldr	r3, [pc, #100]	; (80176f4 <prvSwitchTimerLists+0xc0>)
 8017690:	681a      	ldr	r2, [r3, #0]
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	3304      	adds	r3, #4
 8017696:	4619      	mov	r1, r3
 8017698:	4610      	mov	r0, r2
 801769a:	f7fe f808 	bl	80156ae <vListInsert>
 801769e:	e016      	b.n	80176ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80176a0:	2300      	movs	r3, #0
 80176a2:	9300      	str	r3, [sp, #0]
 80176a4:	2300      	movs	r3, #0
 80176a6:	693a      	ldr	r2, [r7, #16]
 80176a8:	2100      	movs	r1, #0
 80176aa:	68f8      	ldr	r0, [r7, #12]
 80176ac:	f7ff fd60 	bl	8017170 <xTimerGenericCommand>
 80176b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d10a      	bne.n	80176ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80176b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176bc:	f383 8811 	msr	BASEPRI, r3
 80176c0:	f3bf 8f6f 	isb	sy
 80176c4:	f3bf 8f4f 	dsb	sy
 80176c8:	603b      	str	r3, [r7, #0]
}
 80176ca:	bf00      	nop
 80176cc:	e7fe      	b.n	80176cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80176ce:	4b09      	ldr	r3, [pc, #36]	; (80176f4 <prvSwitchTimerLists+0xc0>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d1b1      	bne.n	801763c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80176d8:	4b06      	ldr	r3, [pc, #24]	; (80176f4 <prvSwitchTimerLists+0xc0>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80176de:	4b06      	ldr	r3, [pc, #24]	; (80176f8 <prvSwitchTimerLists+0xc4>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	4a04      	ldr	r2, [pc, #16]	; (80176f4 <prvSwitchTimerLists+0xc0>)
 80176e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80176e6:	4a04      	ldr	r2, [pc, #16]	; (80176f8 <prvSwitchTimerLists+0xc4>)
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	6013      	str	r3, [r2, #0]
}
 80176ec:	bf00      	nop
 80176ee:	3718      	adds	r7, #24
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	24002ba4 	.word	0x24002ba4
 80176f8:	24002ba8 	.word	0x24002ba8

080176fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017702:	f000 f987 	bl	8017a14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017706:	4b15      	ldr	r3, [pc, #84]	; (801775c <prvCheckForValidListAndQueue+0x60>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d120      	bne.n	8017750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801770e:	4814      	ldr	r0, [pc, #80]	; (8017760 <prvCheckForValidListAndQueue+0x64>)
 8017710:	f7fd ff7c 	bl	801560c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017714:	4813      	ldr	r0, [pc, #76]	; (8017764 <prvCheckForValidListAndQueue+0x68>)
 8017716:	f7fd ff79 	bl	801560c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801771a:	4b13      	ldr	r3, [pc, #76]	; (8017768 <prvCheckForValidListAndQueue+0x6c>)
 801771c:	4a10      	ldr	r2, [pc, #64]	; (8017760 <prvCheckForValidListAndQueue+0x64>)
 801771e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017720:	4b12      	ldr	r3, [pc, #72]	; (801776c <prvCheckForValidListAndQueue+0x70>)
 8017722:	4a10      	ldr	r2, [pc, #64]	; (8017764 <prvCheckForValidListAndQueue+0x68>)
 8017724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017726:	2300      	movs	r3, #0
 8017728:	9300      	str	r3, [sp, #0]
 801772a:	4b11      	ldr	r3, [pc, #68]	; (8017770 <prvCheckForValidListAndQueue+0x74>)
 801772c:	4a11      	ldr	r2, [pc, #68]	; (8017774 <prvCheckForValidListAndQueue+0x78>)
 801772e:	2110      	movs	r1, #16
 8017730:	200a      	movs	r0, #10
 8017732:	f7fe f887 	bl	8015844 <xQueueGenericCreateStatic>
 8017736:	4603      	mov	r3, r0
 8017738:	4a08      	ldr	r2, [pc, #32]	; (801775c <prvCheckForValidListAndQueue+0x60>)
 801773a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801773c:	4b07      	ldr	r3, [pc, #28]	; (801775c <prvCheckForValidListAndQueue+0x60>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d005      	beq.n	8017750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017744:	4b05      	ldr	r3, [pc, #20]	; (801775c <prvCheckForValidListAndQueue+0x60>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	490b      	ldr	r1, [pc, #44]	; (8017778 <prvCheckForValidListAndQueue+0x7c>)
 801774a:	4618      	mov	r0, r3
 801774c:	f7fe fca0 	bl	8016090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017750:	f000 f990 	bl	8017a74 <vPortExitCritical>
}
 8017754:	bf00      	nop
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}
 801775a:	bf00      	nop
 801775c:	24002bac 	.word	0x24002bac
 8017760:	24002b7c 	.word	0x24002b7c
 8017764:	24002b90 	.word	0x24002b90
 8017768:	24002ba4 	.word	0x24002ba4
 801776c:	24002ba8 	.word	0x24002ba8
 8017770:	24002c58 	.word	0x24002c58
 8017774:	24002bb8 	.word	0x24002bb8
 8017778:	08018d20 	.word	0x08018d20

0801777c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801777c:	b580      	push	{r7, lr}
 801777e:	b08a      	sub	sp, #40	; 0x28
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
 8017788:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801778a:	f06f 0301 	mvn.w	r3, #1
 801778e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801779c:	4b06      	ldr	r3, [pc, #24]	; (80177b8 <xTimerPendFunctionCallFromISR+0x3c>)
 801779e:	6818      	ldr	r0, [r3, #0]
 80177a0:	f107 0114 	add.w	r1, r7, #20
 80177a4:	2300      	movs	r3, #0
 80177a6:	683a      	ldr	r2, [r7, #0]
 80177a8:	f7fe f9e6 	bl	8015b78 <xQueueGenericSendFromISR>
 80177ac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80177ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3728      	adds	r7, #40	; 0x28
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}
 80177b8:	24002bac 	.word	0x24002bac

080177bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80177bc:	b480      	push	{r7}
 80177be:	b085      	sub	sp, #20
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	3b04      	subs	r3, #4
 80177cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80177d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	3b04      	subs	r3, #4
 80177da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	f023 0201 	bic.w	r2, r3, #1
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	3b04      	subs	r3, #4
 80177ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80177ec:	4a0c      	ldr	r2, [pc, #48]	; (8017820 <pxPortInitialiseStack+0x64>)
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	3b14      	subs	r3, #20
 80177f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80177f8:	687a      	ldr	r2, [r7, #4]
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	3b04      	subs	r3, #4
 8017802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	f06f 0202 	mvn.w	r2, #2
 801780a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	3b20      	subs	r3, #32
 8017810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017812:	68fb      	ldr	r3, [r7, #12]
}
 8017814:	4618      	mov	r0, r3
 8017816:	3714      	adds	r7, #20
 8017818:	46bd      	mov	sp, r7
 801781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781e:	4770      	bx	lr
 8017820:	08017825 	.word	0x08017825

08017824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017824:	b480      	push	{r7}
 8017826:	b085      	sub	sp, #20
 8017828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801782a:	2300      	movs	r3, #0
 801782c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801782e:	4b12      	ldr	r3, [pc, #72]	; (8017878 <prvTaskExitError+0x54>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017836:	d00a      	beq.n	801784e <prvTaskExitError+0x2a>
	__asm volatile
 8017838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801783c:	f383 8811 	msr	BASEPRI, r3
 8017840:	f3bf 8f6f 	isb	sy
 8017844:	f3bf 8f4f 	dsb	sy
 8017848:	60fb      	str	r3, [r7, #12]
}
 801784a:	bf00      	nop
 801784c:	e7fe      	b.n	801784c <prvTaskExitError+0x28>
	__asm volatile
 801784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017852:	f383 8811 	msr	BASEPRI, r3
 8017856:	f3bf 8f6f 	isb	sy
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	60bb      	str	r3, [r7, #8]
}
 8017860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017862:	bf00      	nop
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d0fc      	beq.n	8017864 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801786a:	bf00      	nop
 801786c:	bf00      	nop
 801786e:	3714      	adds	r7, #20
 8017870:	46bd      	mov	sp, r7
 8017872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017876:	4770      	bx	lr
 8017878:	24000094 	.word	0x24000094
 801787c:	00000000 	.word	0x00000000

08017880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017880:	4b07      	ldr	r3, [pc, #28]	; (80178a0 <pxCurrentTCBConst2>)
 8017882:	6819      	ldr	r1, [r3, #0]
 8017884:	6808      	ldr	r0, [r1, #0]
 8017886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801788a:	f380 8809 	msr	PSP, r0
 801788e:	f3bf 8f6f 	isb	sy
 8017892:	f04f 0000 	mov.w	r0, #0
 8017896:	f380 8811 	msr	BASEPRI, r0
 801789a:	4770      	bx	lr
 801789c:	f3af 8000 	nop.w

080178a0 <pxCurrentTCBConst2>:
 80178a0:	2400267c 	.word	0x2400267c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80178a4:	bf00      	nop
 80178a6:	bf00      	nop

080178a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80178a8:	4808      	ldr	r0, [pc, #32]	; (80178cc <prvPortStartFirstTask+0x24>)
 80178aa:	6800      	ldr	r0, [r0, #0]
 80178ac:	6800      	ldr	r0, [r0, #0]
 80178ae:	f380 8808 	msr	MSP, r0
 80178b2:	f04f 0000 	mov.w	r0, #0
 80178b6:	f380 8814 	msr	CONTROL, r0
 80178ba:	b662      	cpsie	i
 80178bc:	b661      	cpsie	f
 80178be:	f3bf 8f4f 	dsb	sy
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	df00      	svc	0
 80178c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80178ca:	bf00      	nop
 80178cc:	e000ed08 	.word	0xe000ed08

080178d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b086      	sub	sp, #24
 80178d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80178d6:	4b46      	ldr	r3, [pc, #280]	; (80179f0 <xPortStartScheduler+0x120>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	4a46      	ldr	r2, [pc, #280]	; (80179f4 <xPortStartScheduler+0x124>)
 80178dc:	4293      	cmp	r3, r2
 80178de:	d10a      	bne.n	80178f6 <xPortStartScheduler+0x26>
	__asm volatile
 80178e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178e4:	f383 8811 	msr	BASEPRI, r3
 80178e8:	f3bf 8f6f 	isb	sy
 80178ec:	f3bf 8f4f 	dsb	sy
 80178f0:	613b      	str	r3, [r7, #16]
}
 80178f2:	bf00      	nop
 80178f4:	e7fe      	b.n	80178f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80178f6:	4b3e      	ldr	r3, [pc, #248]	; (80179f0 <xPortStartScheduler+0x120>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	4a3f      	ldr	r2, [pc, #252]	; (80179f8 <xPortStartScheduler+0x128>)
 80178fc:	4293      	cmp	r3, r2
 80178fe:	d10a      	bne.n	8017916 <xPortStartScheduler+0x46>
	__asm volatile
 8017900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017904:	f383 8811 	msr	BASEPRI, r3
 8017908:	f3bf 8f6f 	isb	sy
 801790c:	f3bf 8f4f 	dsb	sy
 8017910:	60fb      	str	r3, [r7, #12]
}
 8017912:	bf00      	nop
 8017914:	e7fe      	b.n	8017914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017916:	4b39      	ldr	r3, [pc, #228]	; (80179fc <xPortStartScheduler+0x12c>)
 8017918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	781b      	ldrb	r3, [r3, #0]
 801791e:	b2db      	uxtb	r3, r3
 8017920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	22ff      	movs	r2, #255	; 0xff
 8017926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	781b      	ldrb	r3, [r3, #0]
 801792c:	b2db      	uxtb	r3, r3
 801792e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017930:	78fb      	ldrb	r3, [r7, #3]
 8017932:	b2db      	uxtb	r3, r3
 8017934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017938:	b2da      	uxtb	r2, r3
 801793a:	4b31      	ldr	r3, [pc, #196]	; (8017a00 <xPortStartScheduler+0x130>)
 801793c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801793e:	4b31      	ldr	r3, [pc, #196]	; (8017a04 <xPortStartScheduler+0x134>)
 8017940:	2207      	movs	r2, #7
 8017942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017944:	e009      	b.n	801795a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017946:	4b2f      	ldr	r3, [pc, #188]	; (8017a04 <xPortStartScheduler+0x134>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	3b01      	subs	r3, #1
 801794c:	4a2d      	ldr	r2, [pc, #180]	; (8017a04 <xPortStartScheduler+0x134>)
 801794e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017950:	78fb      	ldrb	r3, [r7, #3]
 8017952:	b2db      	uxtb	r3, r3
 8017954:	005b      	lsls	r3, r3, #1
 8017956:	b2db      	uxtb	r3, r3
 8017958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801795a:	78fb      	ldrb	r3, [r7, #3]
 801795c:	b2db      	uxtb	r3, r3
 801795e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017962:	2b80      	cmp	r3, #128	; 0x80
 8017964:	d0ef      	beq.n	8017946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017966:	4b27      	ldr	r3, [pc, #156]	; (8017a04 <xPortStartScheduler+0x134>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	f1c3 0307 	rsb	r3, r3, #7
 801796e:	2b04      	cmp	r3, #4
 8017970:	d00a      	beq.n	8017988 <xPortStartScheduler+0xb8>
	__asm volatile
 8017972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017976:	f383 8811 	msr	BASEPRI, r3
 801797a:	f3bf 8f6f 	isb	sy
 801797e:	f3bf 8f4f 	dsb	sy
 8017982:	60bb      	str	r3, [r7, #8]
}
 8017984:	bf00      	nop
 8017986:	e7fe      	b.n	8017986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017988:	4b1e      	ldr	r3, [pc, #120]	; (8017a04 <xPortStartScheduler+0x134>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	021b      	lsls	r3, r3, #8
 801798e:	4a1d      	ldr	r2, [pc, #116]	; (8017a04 <xPortStartScheduler+0x134>)
 8017990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017992:	4b1c      	ldr	r3, [pc, #112]	; (8017a04 <xPortStartScheduler+0x134>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801799a:	4a1a      	ldr	r2, [pc, #104]	; (8017a04 <xPortStartScheduler+0x134>)
 801799c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	b2da      	uxtb	r2, r3
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80179a6:	4b18      	ldr	r3, [pc, #96]	; (8017a08 <xPortStartScheduler+0x138>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4a17      	ldr	r2, [pc, #92]	; (8017a08 <xPortStartScheduler+0x138>)
 80179ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80179b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80179b2:	4b15      	ldr	r3, [pc, #84]	; (8017a08 <xPortStartScheduler+0x138>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	4a14      	ldr	r2, [pc, #80]	; (8017a08 <xPortStartScheduler+0x138>)
 80179b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80179bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80179be:	f000 f8dd 	bl	8017b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80179c2:	4b12      	ldr	r3, [pc, #72]	; (8017a0c <xPortStartScheduler+0x13c>)
 80179c4:	2200      	movs	r2, #0
 80179c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80179c8:	f000 f8fc 	bl	8017bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80179cc:	4b10      	ldr	r3, [pc, #64]	; (8017a10 <xPortStartScheduler+0x140>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	4a0f      	ldr	r2, [pc, #60]	; (8017a10 <xPortStartScheduler+0x140>)
 80179d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80179d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80179d8:	f7ff ff66 	bl	80178a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80179dc:	f7fe ff70 	bl	80168c0 <vTaskSwitchContext>
	prvTaskExitError();
 80179e0:	f7ff ff20 	bl	8017824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80179e4:	2300      	movs	r3, #0
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3718      	adds	r7, #24
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	e000ed00 	.word	0xe000ed00
 80179f4:	410fc271 	.word	0x410fc271
 80179f8:	410fc270 	.word	0x410fc270
 80179fc:	e000e400 	.word	0xe000e400
 8017a00:	24002ca8 	.word	0x24002ca8
 8017a04:	24002cac 	.word	0x24002cac
 8017a08:	e000ed20 	.word	0xe000ed20
 8017a0c:	24000094 	.word	0x24000094
 8017a10:	e000ef34 	.word	0xe000ef34

08017a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017a14:	b480      	push	{r7}
 8017a16:	b083      	sub	sp, #12
 8017a18:	af00      	add	r7, sp, #0
	__asm volatile
 8017a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a1e:	f383 8811 	msr	BASEPRI, r3
 8017a22:	f3bf 8f6f 	isb	sy
 8017a26:	f3bf 8f4f 	dsb	sy
 8017a2a:	607b      	str	r3, [r7, #4]
}
 8017a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017a2e:	4b0f      	ldr	r3, [pc, #60]	; (8017a6c <vPortEnterCritical+0x58>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	3301      	adds	r3, #1
 8017a34:	4a0d      	ldr	r2, [pc, #52]	; (8017a6c <vPortEnterCritical+0x58>)
 8017a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017a38:	4b0c      	ldr	r3, [pc, #48]	; (8017a6c <vPortEnterCritical+0x58>)
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	d10f      	bne.n	8017a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017a40:	4b0b      	ldr	r3, [pc, #44]	; (8017a70 <vPortEnterCritical+0x5c>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	b2db      	uxtb	r3, r3
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d00a      	beq.n	8017a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8017a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4e:	f383 8811 	msr	BASEPRI, r3
 8017a52:	f3bf 8f6f 	isb	sy
 8017a56:	f3bf 8f4f 	dsb	sy
 8017a5a:	603b      	str	r3, [r7, #0]
}
 8017a5c:	bf00      	nop
 8017a5e:	e7fe      	b.n	8017a5e <vPortEnterCritical+0x4a>
	}
}
 8017a60:	bf00      	nop
 8017a62:	370c      	adds	r7, #12
 8017a64:	46bd      	mov	sp, r7
 8017a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6a:	4770      	bx	lr
 8017a6c:	24000094 	.word	0x24000094
 8017a70:	e000ed04 	.word	0xe000ed04

08017a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017a74:	b480      	push	{r7}
 8017a76:	b083      	sub	sp, #12
 8017a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017a7a:	4b12      	ldr	r3, [pc, #72]	; (8017ac4 <vPortExitCritical+0x50>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d10a      	bne.n	8017a98 <vPortExitCritical+0x24>
	__asm volatile
 8017a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a86:	f383 8811 	msr	BASEPRI, r3
 8017a8a:	f3bf 8f6f 	isb	sy
 8017a8e:	f3bf 8f4f 	dsb	sy
 8017a92:	607b      	str	r3, [r7, #4]
}
 8017a94:	bf00      	nop
 8017a96:	e7fe      	b.n	8017a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017a98:	4b0a      	ldr	r3, [pc, #40]	; (8017ac4 <vPortExitCritical+0x50>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	3b01      	subs	r3, #1
 8017a9e:	4a09      	ldr	r2, [pc, #36]	; (8017ac4 <vPortExitCritical+0x50>)
 8017aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017aa2:	4b08      	ldr	r3, [pc, #32]	; (8017ac4 <vPortExitCritical+0x50>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d105      	bne.n	8017ab6 <vPortExitCritical+0x42>
 8017aaa:	2300      	movs	r3, #0
 8017aac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017aae:	683b      	ldr	r3, [r7, #0]
 8017ab0:	f383 8811 	msr	BASEPRI, r3
}
 8017ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017ab6:	bf00      	nop
 8017ab8:	370c      	adds	r7, #12
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	24000094 	.word	0x24000094
	...

08017ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017ad0:	f3ef 8009 	mrs	r0, PSP
 8017ad4:	f3bf 8f6f 	isb	sy
 8017ad8:	4b15      	ldr	r3, [pc, #84]	; (8017b30 <pxCurrentTCBConst>)
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	f01e 0f10 	tst.w	lr, #16
 8017ae0:	bf08      	it	eq
 8017ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aea:	6010      	str	r0, [r2, #0]
 8017aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017af4:	f380 8811 	msr	BASEPRI, r0
 8017af8:	f3bf 8f4f 	dsb	sy
 8017afc:	f3bf 8f6f 	isb	sy
 8017b00:	f7fe fede 	bl	80168c0 <vTaskSwitchContext>
 8017b04:	f04f 0000 	mov.w	r0, #0
 8017b08:	f380 8811 	msr	BASEPRI, r0
 8017b0c:	bc09      	pop	{r0, r3}
 8017b0e:	6819      	ldr	r1, [r3, #0]
 8017b10:	6808      	ldr	r0, [r1, #0]
 8017b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b16:	f01e 0f10 	tst.w	lr, #16
 8017b1a:	bf08      	it	eq
 8017b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017b20:	f380 8809 	msr	PSP, r0
 8017b24:	f3bf 8f6f 	isb	sy
 8017b28:	4770      	bx	lr
 8017b2a:	bf00      	nop
 8017b2c:	f3af 8000 	nop.w

08017b30 <pxCurrentTCBConst>:
 8017b30:	2400267c 	.word	0x2400267c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017b34:	bf00      	nop
 8017b36:	bf00      	nop

08017b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8017b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b42:	f383 8811 	msr	BASEPRI, r3
 8017b46:	f3bf 8f6f 	isb	sy
 8017b4a:	f3bf 8f4f 	dsb	sy
 8017b4e:	607b      	str	r3, [r7, #4]
}
 8017b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017b52:	f7fe fdf3 	bl	801673c <xTaskIncrementTick>
 8017b56:	4603      	mov	r3, r0
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d003      	beq.n	8017b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017b5c:	4b06      	ldr	r3, [pc, #24]	; (8017b78 <xPortSysTickHandler+0x40>)
 8017b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b62:	601a      	str	r2, [r3, #0]
 8017b64:	2300      	movs	r3, #0
 8017b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	f383 8811 	msr	BASEPRI, r3
}
 8017b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017b70:	bf00      	nop
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	e000ed04 	.word	0xe000ed04

08017b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017b80:	4b0b      	ldr	r3, [pc, #44]	; (8017bb0 <vPortSetupTimerInterrupt+0x34>)
 8017b82:	2200      	movs	r2, #0
 8017b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017b86:	4b0b      	ldr	r3, [pc, #44]	; (8017bb4 <vPortSetupTimerInterrupt+0x38>)
 8017b88:	2200      	movs	r2, #0
 8017b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017b8c:	4b0a      	ldr	r3, [pc, #40]	; (8017bb8 <vPortSetupTimerInterrupt+0x3c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	4a0a      	ldr	r2, [pc, #40]	; (8017bbc <vPortSetupTimerInterrupt+0x40>)
 8017b92:	fba2 2303 	umull	r2, r3, r2, r3
 8017b96:	099b      	lsrs	r3, r3, #6
 8017b98:	4a09      	ldr	r2, [pc, #36]	; (8017bc0 <vPortSetupTimerInterrupt+0x44>)
 8017b9a:	3b01      	subs	r3, #1
 8017b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017b9e:	4b04      	ldr	r3, [pc, #16]	; (8017bb0 <vPortSetupTimerInterrupt+0x34>)
 8017ba0:	2207      	movs	r2, #7
 8017ba2:	601a      	str	r2, [r3, #0]
}
 8017ba4:	bf00      	nop
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bac:	4770      	bx	lr
 8017bae:	bf00      	nop
 8017bb0:	e000e010 	.word	0xe000e010
 8017bb4:	e000e018 	.word	0xe000e018
 8017bb8:	24000084 	.word	0x24000084
 8017bbc:	10624dd3 	.word	0x10624dd3
 8017bc0:	e000e014 	.word	0xe000e014

08017bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017bd4 <vPortEnableVFP+0x10>
 8017bc8:	6801      	ldr	r1, [r0, #0]
 8017bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017bce:	6001      	str	r1, [r0, #0]
 8017bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017bd2:	bf00      	nop
 8017bd4:	e000ed88 	.word	0xe000ed88

08017bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017bd8:	b480      	push	{r7}
 8017bda:	b085      	sub	sp, #20
 8017bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017bde:	f3ef 8305 	mrs	r3, IPSR
 8017be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	2b0f      	cmp	r3, #15
 8017be8:	d914      	bls.n	8017c14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017bea:	4a17      	ldr	r2, [pc, #92]	; (8017c48 <vPortValidateInterruptPriority+0x70>)
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	4413      	add	r3, r2
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017bf4:	4b15      	ldr	r3, [pc, #84]	; (8017c4c <vPortValidateInterruptPriority+0x74>)
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	7afa      	ldrb	r2, [r7, #11]
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d20a      	bcs.n	8017c14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c02:	f383 8811 	msr	BASEPRI, r3
 8017c06:	f3bf 8f6f 	isb	sy
 8017c0a:	f3bf 8f4f 	dsb	sy
 8017c0e:	607b      	str	r3, [r7, #4]
}
 8017c10:	bf00      	nop
 8017c12:	e7fe      	b.n	8017c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017c14:	4b0e      	ldr	r3, [pc, #56]	; (8017c50 <vPortValidateInterruptPriority+0x78>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017c1c:	4b0d      	ldr	r3, [pc, #52]	; (8017c54 <vPortValidateInterruptPriority+0x7c>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d90a      	bls.n	8017c3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c28:	f383 8811 	msr	BASEPRI, r3
 8017c2c:	f3bf 8f6f 	isb	sy
 8017c30:	f3bf 8f4f 	dsb	sy
 8017c34:	603b      	str	r3, [r7, #0]
}
 8017c36:	bf00      	nop
 8017c38:	e7fe      	b.n	8017c38 <vPortValidateInterruptPriority+0x60>
	}
 8017c3a:	bf00      	nop
 8017c3c:	3714      	adds	r7, #20
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr
 8017c46:	bf00      	nop
 8017c48:	e000e3f0 	.word	0xe000e3f0
 8017c4c:	24002ca8 	.word	0x24002ca8
 8017c50:	e000ed0c 	.word	0xe000ed0c
 8017c54:	24002cac 	.word	0x24002cac

08017c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b08a      	sub	sp, #40	; 0x28
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017c60:	2300      	movs	r3, #0
 8017c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017c64:	f7fe fcae 	bl	80165c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017c68:	4b5b      	ldr	r3, [pc, #364]	; (8017dd8 <pvPortMalloc+0x180>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d101      	bne.n	8017c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017c70:	f000 f920 	bl	8017eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017c74:	4b59      	ldr	r3, [pc, #356]	; (8017ddc <pvPortMalloc+0x184>)
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	4013      	ands	r3, r2
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	f040 8093 	bne.w	8017da8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d01d      	beq.n	8017cc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017c88:	2208      	movs	r2, #8
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f003 0307 	and.w	r3, r3, #7
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d014      	beq.n	8017cc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f023 0307 	bic.w	r3, r3, #7
 8017ca0:	3308      	adds	r3, #8
 8017ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f003 0307 	and.w	r3, r3, #7
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d00a      	beq.n	8017cc4 <pvPortMalloc+0x6c>
	__asm volatile
 8017cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cb2:	f383 8811 	msr	BASEPRI, r3
 8017cb6:	f3bf 8f6f 	isb	sy
 8017cba:	f3bf 8f4f 	dsb	sy
 8017cbe:	617b      	str	r3, [r7, #20]
}
 8017cc0:	bf00      	nop
 8017cc2:	e7fe      	b.n	8017cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d06e      	beq.n	8017da8 <pvPortMalloc+0x150>
 8017cca:	4b45      	ldr	r3, [pc, #276]	; (8017de0 <pvPortMalloc+0x188>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	687a      	ldr	r2, [r7, #4]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d869      	bhi.n	8017da8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017cd4:	4b43      	ldr	r3, [pc, #268]	; (8017de4 <pvPortMalloc+0x18c>)
 8017cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017cd8:	4b42      	ldr	r3, [pc, #264]	; (8017de4 <pvPortMalloc+0x18c>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017cde:	e004      	b.n	8017cea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	687a      	ldr	r2, [r7, #4]
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d903      	bls.n	8017cfc <pvPortMalloc+0xa4>
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d1f1      	bne.n	8017ce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017cfc:	4b36      	ldr	r3, [pc, #216]	; (8017dd8 <pvPortMalloc+0x180>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d050      	beq.n	8017da8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017d06:	6a3b      	ldr	r3, [r7, #32]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	2208      	movs	r2, #8
 8017d0c:	4413      	add	r3, r2
 8017d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d12:	681a      	ldr	r2, [r3, #0]
 8017d14:	6a3b      	ldr	r3, [r7, #32]
 8017d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d1a:	685a      	ldr	r2, [r3, #4]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	1ad2      	subs	r2, r2, r3
 8017d20:	2308      	movs	r3, #8
 8017d22:	005b      	lsls	r3, r3, #1
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d91f      	bls.n	8017d68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	4413      	add	r3, r2
 8017d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d30:	69bb      	ldr	r3, [r7, #24]
 8017d32:	f003 0307 	and.w	r3, r3, #7
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d00a      	beq.n	8017d50 <pvPortMalloc+0xf8>
	__asm volatile
 8017d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d3e:	f383 8811 	msr	BASEPRI, r3
 8017d42:	f3bf 8f6f 	isb	sy
 8017d46:	f3bf 8f4f 	dsb	sy
 8017d4a:	613b      	str	r3, [r7, #16]
}
 8017d4c:	bf00      	nop
 8017d4e:	e7fe      	b.n	8017d4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d52:	685a      	ldr	r2, [r3, #4]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	1ad2      	subs	r2, r2, r3
 8017d58:	69bb      	ldr	r3, [r7, #24]
 8017d5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5e:	687a      	ldr	r2, [r7, #4]
 8017d60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017d62:	69b8      	ldr	r0, [r7, #24]
 8017d64:	f000 f908 	bl	8017f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017d68:	4b1d      	ldr	r3, [pc, #116]	; (8017de0 <pvPortMalloc+0x188>)
 8017d6a:	681a      	ldr	r2, [r3, #0]
 8017d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	1ad3      	subs	r3, r2, r3
 8017d72:	4a1b      	ldr	r2, [pc, #108]	; (8017de0 <pvPortMalloc+0x188>)
 8017d74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017d76:	4b1a      	ldr	r3, [pc, #104]	; (8017de0 <pvPortMalloc+0x188>)
 8017d78:	681a      	ldr	r2, [r3, #0]
 8017d7a:	4b1b      	ldr	r3, [pc, #108]	; (8017de8 <pvPortMalloc+0x190>)
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	d203      	bcs.n	8017d8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017d82:	4b17      	ldr	r3, [pc, #92]	; (8017de0 <pvPortMalloc+0x188>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	4a18      	ldr	r2, [pc, #96]	; (8017de8 <pvPortMalloc+0x190>)
 8017d88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8c:	685a      	ldr	r2, [r3, #4]
 8017d8e:	4b13      	ldr	r3, [pc, #76]	; (8017ddc <pvPortMalloc+0x184>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	431a      	orrs	r2, r3
 8017d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017d9e:	4b13      	ldr	r3, [pc, #76]	; (8017dec <pvPortMalloc+0x194>)
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	3301      	adds	r3, #1
 8017da4:	4a11      	ldr	r2, [pc, #68]	; (8017dec <pvPortMalloc+0x194>)
 8017da6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017da8:	f7fe fc1a 	bl	80165e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017dac:	69fb      	ldr	r3, [r7, #28]
 8017dae:	f003 0307 	and.w	r3, r3, #7
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d00a      	beq.n	8017dcc <pvPortMalloc+0x174>
	__asm volatile
 8017db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dba:	f383 8811 	msr	BASEPRI, r3
 8017dbe:	f3bf 8f6f 	isb	sy
 8017dc2:	f3bf 8f4f 	dsb	sy
 8017dc6:	60fb      	str	r3, [r7, #12]
}
 8017dc8:	bf00      	nop
 8017dca:	e7fe      	b.n	8017dca <pvPortMalloc+0x172>
	return pvReturn;
 8017dcc:	69fb      	ldr	r3, [r7, #28]
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3728      	adds	r7, #40	; 0x28
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	240068b8 	.word	0x240068b8
 8017ddc:	240068cc 	.word	0x240068cc
 8017de0:	240068bc 	.word	0x240068bc
 8017de4:	240068b0 	.word	0x240068b0
 8017de8:	240068c0 	.word	0x240068c0
 8017dec:	240068c4 	.word	0x240068c4

08017df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b086      	sub	sp, #24
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d04d      	beq.n	8017e9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017e02:	2308      	movs	r3, #8
 8017e04:	425b      	negs	r3, r3
 8017e06:	697a      	ldr	r2, [r7, #20]
 8017e08:	4413      	add	r3, r2
 8017e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017e0c:	697b      	ldr	r3, [r7, #20]
 8017e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	685a      	ldr	r2, [r3, #4]
 8017e14:	4b24      	ldr	r3, [pc, #144]	; (8017ea8 <vPortFree+0xb8>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	4013      	ands	r3, r2
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d10a      	bne.n	8017e34 <vPortFree+0x44>
	__asm volatile
 8017e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e22:	f383 8811 	msr	BASEPRI, r3
 8017e26:	f3bf 8f6f 	isb	sy
 8017e2a:	f3bf 8f4f 	dsb	sy
 8017e2e:	60fb      	str	r3, [r7, #12]
}
 8017e30:	bf00      	nop
 8017e32:	e7fe      	b.n	8017e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d00a      	beq.n	8017e52 <vPortFree+0x62>
	__asm volatile
 8017e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e40:	f383 8811 	msr	BASEPRI, r3
 8017e44:	f3bf 8f6f 	isb	sy
 8017e48:	f3bf 8f4f 	dsb	sy
 8017e4c:	60bb      	str	r3, [r7, #8]
}
 8017e4e:	bf00      	nop
 8017e50:	e7fe      	b.n	8017e50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	685a      	ldr	r2, [r3, #4]
 8017e56:	4b14      	ldr	r3, [pc, #80]	; (8017ea8 <vPortFree+0xb8>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	4013      	ands	r3, r2
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d01e      	beq.n	8017e9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d11a      	bne.n	8017e9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017e68:	693b      	ldr	r3, [r7, #16]
 8017e6a:	685a      	ldr	r2, [r3, #4]
 8017e6c:	4b0e      	ldr	r3, [pc, #56]	; (8017ea8 <vPortFree+0xb8>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	43db      	mvns	r3, r3
 8017e72:	401a      	ands	r2, r3
 8017e74:	693b      	ldr	r3, [r7, #16]
 8017e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017e78:	f7fe fba4 	bl	80165c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	685a      	ldr	r2, [r3, #4]
 8017e80:	4b0a      	ldr	r3, [pc, #40]	; (8017eac <vPortFree+0xbc>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4413      	add	r3, r2
 8017e86:	4a09      	ldr	r2, [pc, #36]	; (8017eac <vPortFree+0xbc>)
 8017e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017e8a:	6938      	ldr	r0, [r7, #16]
 8017e8c:	f000 f874 	bl	8017f78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017e90:	4b07      	ldr	r3, [pc, #28]	; (8017eb0 <vPortFree+0xc0>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	3301      	adds	r3, #1
 8017e96:	4a06      	ldr	r2, [pc, #24]	; (8017eb0 <vPortFree+0xc0>)
 8017e98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017e9a:	f7fe fba1 	bl	80165e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017e9e:	bf00      	nop
 8017ea0:	3718      	adds	r7, #24
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	240068cc 	.word	0x240068cc
 8017eac:	240068bc 	.word	0x240068bc
 8017eb0:	240068c8 	.word	0x240068c8

08017eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b085      	sub	sp, #20
 8017eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8017ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017ec0:	4b27      	ldr	r3, [pc, #156]	; (8017f60 <prvHeapInit+0xac>)
 8017ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	f003 0307 	and.w	r3, r3, #7
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00c      	beq.n	8017ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	3307      	adds	r3, #7
 8017ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	f023 0307 	bic.w	r3, r3, #7
 8017eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017edc:	68ba      	ldr	r2, [r7, #8]
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	1ad3      	subs	r3, r2, r3
 8017ee2:	4a1f      	ldr	r2, [pc, #124]	; (8017f60 <prvHeapInit+0xac>)
 8017ee4:	4413      	add	r3, r2
 8017ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017eec:	4a1d      	ldr	r2, [pc, #116]	; (8017f64 <prvHeapInit+0xb0>)
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017ef2:	4b1c      	ldr	r3, [pc, #112]	; (8017f64 <prvHeapInit+0xb0>)
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	68ba      	ldr	r2, [r7, #8]
 8017efc:	4413      	add	r3, r2
 8017efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017f00:	2208      	movs	r2, #8
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	1a9b      	subs	r3, r3, r2
 8017f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f023 0307 	bic.w	r3, r3, #7
 8017f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	4a15      	ldr	r2, [pc, #84]	; (8017f68 <prvHeapInit+0xb4>)
 8017f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017f16:	4b14      	ldr	r3, [pc, #80]	; (8017f68 <prvHeapInit+0xb4>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017f1e:	4b12      	ldr	r3, [pc, #72]	; (8017f68 <prvHeapInit+0xb4>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	2200      	movs	r2, #0
 8017f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	68fa      	ldr	r2, [r7, #12]
 8017f2e:	1ad2      	subs	r2, r2, r3
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017f34:	4b0c      	ldr	r3, [pc, #48]	; (8017f68 <prvHeapInit+0xb4>)
 8017f36:	681a      	ldr	r2, [r3, #0]
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f3c:	683b      	ldr	r3, [r7, #0]
 8017f3e:	685b      	ldr	r3, [r3, #4]
 8017f40:	4a0a      	ldr	r2, [pc, #40]	; (8017f6c <prvHeapInit+0xb8>)
 8017f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	4a09      	ldr	r2, [pc, #36]	; (8017f70 <prvHeapInit+0xbc>)
 8017f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017f4c:	4b09      	ldr	r3, [pc, #36]	; (8017f74 <prvHeapInit+0xc0>)
 8017f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017f52:	601a      	str	r2, [r3, #0]
}
 8017f54:	bf00      	nop
 8017f56:	3714      	adds	r7, #20
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5e:	4770      	bx	lr
 8017f60:	24002cb0 	.word	0x24002cb0
 8017f64:	240068b0 	.word	0x240068b0
 8017f68:	240068b8 	.word	0x240068b8
 8017f6c:	240068c0 	.word	0x240068c0
 8017f70:	240068bc 	.word	0x240068bc
 8017f74:	240068cc 	.word	0x240068cc

08017f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017f78:	b480      	push	{r7}
 8017f7a:	b085      	sub	sp, #20
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017f80:	4b28      	ldr	r3, [pc, #160]	; (8018024 <prvInsertBlockIntoFreeList+0xac>)
 8017f82:	60fb      	str	r3, [r7, #12]
 8017f84:	e002      	b.n	8017f8c <prvInsertBlockIntoFreeList+0x14>
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	60fb      	str	r3, [r7, #12]
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	687a      	ldr	r2, [r7, #4]
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d8f7      	bhi.n	8017f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	685b      	ldr	r3, [r3, #4]
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	687a      	ldr	r2, [r7, #4]
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d108      	bne.n	8017fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	685a      	ldr	r2, [r3, #4]
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	685b      	ldr	r3, [r3, #4]
 8017fb0:	441a      	add	r2, r3
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	685b      	ldr	r3, [r3, #4]
 8017fc2:	68ba      	ldr	r2, [r7, #8]
 8017fc4:	441a      	add	r2, r3
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d118      	bne.n	8018000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	681a      	ldr	r2, [r3, #0]
 8017fd2:	4b15      	ldr	r3, [pc, #84]	; (8018028 <prvInsertBlockIntoFreeList+0xb0>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d00d      	beq.n	8017ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	685a      	ldr	r2, [r3, #4]
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	685b      	ldr	r3, [r3, #4]
 8017fe4:	441a      	add	r2, r3
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	601a      	str	r2, [r3, #0]
 8017ff4:	e008      	b.n	8018008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017ff6:	4b0c      	ldr	r3, [pc, #48]	; (8018028 <prvInsertBlockIntoFreeList+0xb0>)
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	601a      	str	r2, [r3, #0]
 8017ffe:	e003      	b.n	8018008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	681a      	ldr	r2, [r3, #0]
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018008:	68fa      	ldr	r2, [r7, #12]
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	429a      	cmp	r2, r3
 801800e:	d002      	beq.n	8018016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	687a      	ldr	r2, [r7, #4]
 8018014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018016:	bf00      	nop
 8018018:	3714      	adds	r7, #20
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr
 8018022:	bf00      	nop
 8018024:	240068b0 	.word	0x240068b0
 8018028:	240068b8 	.word	0x240068b8

0801802c <__errno>:
 801802c:	4b01      	ldr	r3, [pc, #4]	; (8018034 <__errno+0x8>)
 801802e:	6818      	ldr	r0, [r3, #0]
 8018030:	4770      	bx	lr
 8018032:	bf00      	nop
 8018034:	24000098 	.word	0x24000098

08018038 <__libc_init_array>:
 8018038:	b570      	push	{r4, r5, r6, lr}
 801803a:	4d0d      	ldr	r5, [pc, #52]	; (8018070 <__libc_init_array+0x38>)
 801803c:	4c0d      	ldr	r4, [pc, #52]	; (8018074 <__libc_init_array+0x3c>)
 801803e:	1b64      	subs	r4, r4, r5
 8018040:	10a4      	asrs	r4, r4, #2
 8018042:	2600      	movs	r6, #0
 8018044:	42a6      	cmp	r6, r4
 8018046:	d109      	bne.n	801805c <__libc_init_array+0x24>
 8018048:	4d0b      	ldr	r5, [pc, #44]	; (8018078 <__libc_init_array+0x40>)
 801804a:	4c0c      	ldr	r4, [pc, #48]	; (801807c <__libc_init_array+0x44>)
 801804c:	f000 fd2c 	bl	8018aa8 <_init>
 8018050:	1b64      	subs	r4, r4, r5
 8018052:	10a4      	asrs	r4, r4, #2
 8018054:	2600      	movs	r6, #0
 8018056:	42a6      	cmp	r6, r4
 8018058:	d105      	bne.n	8018066 <__libc_init_array+0x2e>
 801805a:	bd70      	pop	{r4, r5, r6, pc}
 801805c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018060:	4798      	blx	r3
 8018062:	3601      	adds	r6, #1
 8018064:	e7ee      	b.n	8018044 <__libc_init_array+0xc>
 8018066:	f855 3b04 	ldr.w	r3, [r5], #4
 801806a:	4798      	blx	r3
 801806c:	3601      	adds	r6, #1
 801806e:	e7f2      	b.n	8018056 <__libc_init_array+0x1e>
 8018070:	08018f60 	.word	0x08018f60
 8018074:	08018f60 	.word	0x08018f60
 8018078:	08018f60 	.word	0x08018f60
 801807c:	08018f64 	.word	0x08018f64

08018080 <memcpy>:
 8018080:	440a      	add	r2, r1
 8018082:	4291      	cmp	r1, r2
 8018084:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018088:	d100      	bne.n	801808c <memcpy+0xc>
 801808a:	4770      	bx	lr
 801808c:	b510      	push	{r4, lr}
 801808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018096:	4291      	cmp	r1, r2
 8018098:	d1f9      	bne.n	801808e <memcpy+0xe>
 801809a:	bd10      	pop	{r4, pc}

0801809c <memset>:
 801809c:	4402      	add	r2, r0
 801809e:	4603      	mov	r3, r0
 80180a0:	4293      	cmp	r3, r2
 80180a2:	d100      	bne.n	80180a6 <memset+0xa>
 80180a4:	4770      	bx	lr
 80180a6:	f803 1b01 	strb.w	r1, [r3], #1
 80180aa:	e7f9      	b.n	80180a0 <memset+0x4>

080180ac <_puts_r>:
 80180ac:	b570      	push	{r4, r5, r6, lr}
 80180ae:	460e      	mov	r6, r1
 80180b0:	4605      	mov	r5, r0
 80180b2:	b118      	cbz	r0, 80180bc <_puts_r+0x10>
 80180b4:	6983      	ldr	r3, [r0, #24]
 80180b6:	b90b      	cbnz	r3, 80180bc <_puts_r+0x10>
 80180b8:	f000 fa48 	bl	801854c <__sinit>
 80180bc:	69ab      	ldr	r3, [r5, #24]
 80180be:	68ac      	ldr	r4, [r5, #8]
 80180c0:	b913      	cbnz	r3, 80180c8 <_puts_r+0x1c>
 80180c2:	4628      	mov	r0, r5
 80180c4:	f000 fa42 	bl	801854c <__sinit>
 80180c8:	4b2c      	ldr	r3, [pc, #176]	; (801817c <_puts_r+0xd0>)
 80180ca:	429c      	cmp	r4, r3
 80180cc:	d120      	bne.n	8018110 <_puts_r+0x64>
 80180ce:	686c      	ldr	r4, [r5, #4]
 80180d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180d2:	07db      	lsls	r3, r3, #31
 80180d4:	d405      	bmi.n	80180e2 <_puts_r+0x36>
 80180d6:	89a3      	ldrh	r3, [r4, #12]
 80180d8:	0598      	lsls	r0, r3, #22
 80180da:	d402      	bmi.n	80180e2 <_puts_r+0x36>
 80180dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180de:	f000 fad3 	bl	8018688 <__retarget_lock_acquire_recursive>
 80180e2:	89a3      	ldrh	r3, [r4, #12]
 80180e4:	0719      	lsls	r1, r3, #28
 80180e6:	d51d      	bpl.n	8018124 <_puts_r+0x78>
 80180e8:	6923      	ldr	r3, [r4, #16]
 80180ea:	b1db      	cbz	r3, 8018124 <_puts_r+0x78>
 80180ec:	3e01      	subs	r6, #1
 80180ee:	68a3      	ldr	r3, [r4, #8]
 80180f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80180f4:	3b01      	subs	r3, #1
 80180f6:	60a3      	str	r3, [r4, #8]
 80180f8:	bb39      	cbnz	r1, 801814a <_puts_r+0x9e>
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	da38      	bge.n	8018170 <_puts_r+0xc4>
 80180fe:	4622      	mov	r2, r4
 8018100:	210a      	movs	r1, #10
 8018102:	4628      	mov	r0, r5
 8018104:	f000 f848 	bl	8018198 <__swbuf_r>
 8018108:	3001      	adds	r0, #1
 801810a:	d011      	beq.n	8018130 <_puts_r+0x84>
 801810c:	250a      	movs	r5, #10
 801810e:	e011      	b.n	8018134 <_puts_r+0x88>
 8018110:	4b1b      	ldr	r3, [pc, #108]	; (8018180 <_puts_r+0xd4>)
 8018112:	429c      	cmp	r4, r3
 8018114:	d101      	bne.n	801811a <_puts_r+0x6e>
 8018116:	68ac      	ldr	r4, [r5, #8]
 8018118:	e7da      	b.n	80180d0 <_puts_r+0x24>
 801811a:	4b1a      	ldr	r3, [pc, #104]	; (8018184 <_puts_r+0xd8>)
 801811c:	429c      	cmp	r4, r3
 801811e:	bf08      	it	eq
 8018120:	68ec      	ldreq	r4, [r5, #12]
 8018122:	e7d5      	b.n	80180d0 <_puts_r+0x24>
 8018124:	4621      	mov	r1, r4
 8018126:	4628      	mov	r0, r5
 8018128:	f000 f888 	bl	801823c <__swsetup_r>
 801812c:	2800      	cmp	r0, #0
 801812e:	d0dd      	beq.n	80180ec <_puts_r+0x40>
 8018130:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018136:	07da      	lsls	r2, r3, #31
 8018138:	d405      	bmi.n	8018146 <_puts_r+0x9a>
 801813a:	89a3      	ldrh	r3, [r4, #12]
 801813c:	059b      	lsls	r3, r3, #22
 801813e:	d402      	bmi.n	8018146 <_puts_r+0x9a>
 8018140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018142:	f000 faa2 	bl	801868a <__retarget_lock_release_recursive>
 8018146:	4628      	mov	r0, r5
 8018148:	bd70      	pop	{r4, r5, r6, pc}
 801814a:	2b00      	cmp	r3, #0
 801814c:	da04      	bge.n	8018158 <_puts_r+0xac>
 801814e:	69a2      	ldr	r2, [r4, #24]
 8018150:	429a      	cmp	r2, r3
 8018152:	dc06      	bgt.n	8018162 <_puts_r+0xb6>
 8018154:	290a      	cmp	r1, #10
 8018156:	d004      	beq.n	8018162 <_puts_r+0xb6>
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	1c5a      	adds	r2, r3, #1
 801815c:	6022      	str	r2, [r4, #0]
 801815e:	7019      	strb	r1, [r3, #0]
 8018160:	e7c5      	b.n	80180ee <_puts_r+0x42>
 8018162:	4622      	mov	r2, r4
 8018164:	4628      	mov	r0, r5
 8018166:	f000 f817 	bl	8018198 <__swbuf_r>
 801816a:	3001      	adds	r0, #1
 801816c:	d1bf      	bne.n	80180ee <_puts_r+0x42>
 801816e:	e7df      	b.n	8018130 <_puts_r+0x84>
 8018170:	6823      	ldr	r3, [r4, #0]
 8018172:	250a      	movs	r5, #10
 8018174:	1c5a      	adds	r2, r3, #1
 8018176:	6022      	str	r2, [r4, #0]
 8018178:	701d      	strb	r5, [r3, #0]
 801817a:	e7db      	b.n	8018134 <_puts_r+0x88>
 801817c:	08018f18 	.word	0x08018f18
 8018180:	08018f38 	.word	0x08018f38
 8018184:	08018ef8 	.word	0x08018ef8

08018188 <puts>:
 8018188:	4b02      	ldr	r3, [pc, #8]	; (8018194 <puts+0xc>)
 801818a:	4601      	mov	r1, r0
 801818c:	6818      	ldr	r0, [r3, #0]
 801818e:	f7ff bf8d 	b.w	80180ac <_puts_r>
 8018192:	bf00      	nop
 8018194:	24000098 	.word	0x24000098

08018198 <__swbuf_r>:
 8018198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801819a:	460e      	mov	r6, r1
 801819c:	4614      	mov	r4, r2
 801819e:	4605      	mov	r5, r0
 80181a0:	b118      	cbz	r0, 80181aa <__swbuf_r+0x12>
 80181a2:	6983      	ldr	r3, [r0, #24]
 80181a4:	b90b      	cbnz	r3, 80181aa <__swbuf_r+0x12>
 80181a6:	f000 f9d1 	bl	801854c <__sinit>
 80181aa:	4b21      	ldr	r3, [pc, #132]	; (8018230 <__swbuf_r+0x98>)
 80181ac:	429c      	cmp	r4, r3
 80181ae:	d12b      	bne.n	8018208 <__swbuf_r+0x70>
 80181b0:	686c      	ldr	r4, [r5, #4]
 80181b2:	69a3      	ldr	r3, [r4, #24]
 80181b4:	60a3      	str	r3, [r4, #8]
 80181b6:	89a3      	ldrh	r3, [r4, #12]
 80181b8:	071a      	lsls	r2, r3, #28
 80181ba:	d52f      	bpl.n	801821c <__swbuf_r+0x84>
 80181bc:	6923      	ldr	r3, [r4, #16]
 80181be:	b36b      	cbz	r3, 801821c <__swbuf_r+0x84>
 80181c0:	6923      	ldr	r3, [r4, #16]
 80181c2:	6820      	ldr	r0, [r4, #0]
 80181c4:	1ac0      	subs	r0, r0, r3
 80181c6:	6963      	ldr	r3, [r4, #20]
 80181c8:	b2f6      	uxtb	r6, r6
 80181ca:	4283      	cmp	r3, r0
 80181cc:	4637      	mov	r7, r6
 80181ce:	dc04      	bgt.n	80181da <__swbuf_r+0x42>
 80181d0:	4621      	mov	r1, r4
 80181d2:	4628      	mov	r0, r5
 80181d4:	f000 f926 	bl	8018424 <_fflush_r>
 80181d8:	bb30      	cbnz	r0, 8018228 <__swbuf_r+0x90>
 80181da:	68a3      	ldr	r3, [r4, #8]
 80181dc:	3b01      	subs	r3, #1
 80181de:	60a3      	str	r3, [r4, #8]
 80181e0:	6823      	ldr	r3, [r4, #0]
 80181e2:	1c5a      	adds	r2, r3, #1
 80181e4:	6022      	str	r2, [r4, #0]
 80181e6:	701e      	strb	r6, [r3, #0]
 80181e8:	6963      	ldr	r3, [r4, #20]
 80181ea:	3001      	adds	r0, #1
 80181ec:	4283      	cmp	r3, r0
 80181ee:	d004      	beq.n	80181fa <__swbuf_r+0x62>
 80181f0:	89a3      	ldrh	r3, [r4, #12]
 80181f2:	07db      	lsls	r3, r3, #31
 80181f4:	d506      	bpl.n	8018204 <__swbuf_r+0x6c>
 80181f6:	2e0a      	cmp	r6, #10
 80181f8:	d104      	bne.n	8018204 <__swbuf_r+0x6c>
 80181fa:	4621      	mov	r1, r4
 80181fc:	4628      	mov	r0, r5
 80181fe:	f000 f911 	bl	8018424 <_fflush_r>
 8018202:	b988      	cbnz	r0, 8018228 <__swbuf_r+0x90>
 8018204:	4638      	mov	r0, r7
 8018206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018208:	4b0a      	ldr	r3, [pc, #40]	; (8018234 <__swbuf_r+0x9c>)
 801820a:	429c      	cmp	r4, r3
 801820c:	d101      	bne.n	8018212 <__swbuf_r+0x7a>
 801820e:	68ac      	ldr	r4, [r5, #8]
 8018210:	e7cf      	b.n	80181b2 <__swbuf_r+0x1a>
 8018212:	4b09      	ldr	r3, [pc, #36]	; (8018238 <__swbuf_r+0xa0>)
 8018214:	429c      	cmp	r4, r3
 8018216:	bf08      	it	eq
 8018218:	68ec      	ldreq	r4, [r5, #12]
 801821a:	e7ca      	b.n	80181b2 <__swbuf_r+0x1a>
 801821c:	4621      	mov	r1, r4
 801821e:	4628      	mov	r0, r5
 8018220:	f000 f80c 	bl	801823c <__swsetup_r>
 8018224:	2800      	cmp	r0, #0
 8018226:	d0cb      	beq.n	80181c0 <__swbuf_r+0x28>
 8018228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801822c:	e7ea      	b.n	8018204 <__swbuf_r+0x6c>
 801822e:	bf00      	nop
 8018230:	08018f18 	.word	0x08018f18
 8018234:	08018f38 	.word	0x08018f38
 8018238:	08018ef8 	.word	0x08018ef8

0801823c <__swsetup_r>:
 801823c:	4b32      	ldr	r3, [pc, #200]	; (8018308 <__swsetup_r+0xcc>)
 801823e:	b570      	push	{r4, r5, r6, lr}
 8018240:	681d      	ldr	r5, [r3, #0]
 8018242:	4606      	mov	r6, r0
 8018244:	460c      	mov	r4, r1
 8018246:	b125      	cbz	r5, 8018252 <__swsetup_r+0x16>
 8018248:	69ab      	ldr	r3, [r5, #24]
 801824a:	b913      	cbnz	r3, 8018252 <__swsetup_r+0x16>
 801824c:	4628      	mov	r0, r5
 801824e:	f000 f97d 	bl	801854c <__sinit>
 8018252:	4b2e      	ldr	r3, [pc, #184]	; (801830c <__swsetup_r+0xd0>)
 8018254:	429c      	cmp	r4, r3
 8018256:	d10f      	bne.n	8018278 <__swsetup_r+0x3c>
 8018258:	686c      	ldr	r4, [r5, #4]
 801825a:	89a3      	ldrh	r3, [r4, #12]
 801825c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018260:	0719      	lsls	r1, r3, #28
 8018262:	d42c      	bmi.n	80182be <__swsetup_r+0x82>
 8018264:	06dd      	lsls	r5, r3, #27
 8018266:	d411      	bmi.n	801828c <__swsetup_r+0x50>
 8018268:	2309      	movs	r3, #9
 801826a:	6033      	str	r3, [r6, #0]
 801826c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018270:	81a3      	strh	r3, [r4, #12]
 8018272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018276:	e03e      	b.n	80182f6 <__swsetup_r+0xba>
 8018278:	4b25      	ldr	r3, [pc, #148]	; (8018310 <__swsetup_r+0xd4>)
 801827a:	429c      	cmp	r4, r3
 801827c:	d101      	bne.n	8018282 <__swsetup_r+0x46>
 801827e:	68ac      	ldr	r4, [r5, #8]
 8018280:	e7eb      	b.n	801825a <__swsetup_r+0x1e>
 8018282:	4b24      	ldr	r3, [pc, #144]	; (8018314 <__swsetup_r+0xd8>)
 8018284:	429c      	cmp	r4, r3
 8018286:	bf08      	it	eq
 8018288:	68ec      	ldreq	r4, [r5, #12]
 801828a:	e7e6      	b.n	801825a <__swsetup_r+0x1e>
 801828c:	0758      	lsls	r0, r3, #29
 801828e:	d512      	bpl.n	80182b6 <__swsetup_r+0x7a>
 8018290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018292:	b141      	cbz	r1, 80182a6 <__swsetup_r+0x6a>
 8018294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018298:	4299      	cmp	r1, r3
 801829a:	d002      	beq.n	80182a2 <__swsetup_r+0x66>
 801829c:	4630      	mov	r0, r6
 801829e:	f000 fa5b 	bl	8018758 <_free_r>
 80182a2:	2300      	movs	r3, #0
 80182a4:	6363      	str	r3, [r4, #52]	; 0x34
 80182a6:	89a3      	ldrh	r3, [r4, #12]
 80182a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80182ac:	81a3      	strh	r3, [r4, #12]
 80182ae:	2300      	movs	r3, #0
 80182b0:	6063      	str	r3, [r4, #4]
 80182b2:	6923      	ldr	r3, [r4, #16]
 80182b4:	6023      	str	r3, [r4, #0]
 80182b6:	89a3      	ldrh	r3, [r4, #12]
 80182b8:	f043 0308 	orr.w	r3, r3, #8
 80182bc:	81a3      	strh	r3, [r4, #12]
 80182be:	6923      	ldr	r3, [r4, #16]
 80182c0:	b94b      	cbnz	r3, 80182d6 <__swsetup_r+0x9a>
 80182c2:	89a3      	ldrh	r3, [r4, #12]
 80182c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182cc:	d003      	beq.n	80182d6 <__swsetup_r+0x9a>
 80182ce:	4621      	mov	r1, r4
 80182d0:	4630      	mov	r0, r6
 80182d2:	f000 fa01 	bl	80186d8 <__smakebuf_r>
 80182d6:	89a0      	ldrh	r0, [r4, #12]
 80182d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182dc:	f010 0301 	ands.w	r3, r0, #1
 80182e0:	d00a      	beq.n	80182f8 <__swsetup_r+0xbc>
 80182e2:	2300      	movs	r3, #0
 80182e4:	60a3      	str	r3, [r4, #8]
 80182e6:	6963      	ldr	r3, [r4, #20]
 80182e8:	425b      	negs	r3, r3
 80182ea:	61a3      	str	r3, [r4, #24]
 80182ec:	6923      	ldr	r3, [r4, #16]
 80182ee:	b943      	cbnz	r3, 8018302 <__swsetup_r+0xc6>
 80182f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80182f4:	d1ba      	bne.n	801826c <__swsetup_r+0x30>
 80182f6:	bd70      	pop	{r4, r5, r6, pc}
 80182f8:	0781      	lsls	r1, r0, #30
 80182fa:	bf58      	it	pl
 80182fc:	6963      	ldrpl	r3, [r4, #20]
 80182fe:	60a3      	str	r3, [r4, #8]
 8018300:	e7f4      	b.n	80182ec <__swsetup_r+0xb0>
 8018302:	2000      	movs	r0, #0
 8018304:	e7f7      	b.n	80182f6 <__swsetup_r+0xba>
 8018306:	bf00      	nop
 8018308:	24000098 	.word	0x24000098
 801830c:	08018f18 	.word	0x08018f18
 8018310:	08018f38 	.word	0x08018f38
 8018314:	08018ef8 	.word	0x08018ef8

08018318 <__sflush_r>:
 8018318:	898a      	ldrh	r2, [r1, #12]
 801831a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801831e:	4605      	mov	r5, r0
 8018320:	0710      	lsls	r0, r2, #28
 8018322:	460c      	mov	r4, r1
 8018324:	d458      	bmi.n	80183d8 <__sflush_r+0xc0>
 8018326:	684b      	ldr	r3, [r1, #4]
 8018328:	2b00      	cmp	r3, #0
 801832a:	dc05      	bgt.n	8018338 <__sflush_r+0x20>
 801832c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801832e:	2b00      	cmp	r3, #0
 8018330:	dc02      	bgt.n	8018338 <__sflush_r+0x20>
 8018332:	2000      	movs	r0, #0
 8018334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801833a:	2e00      	cmp	r6, #0
 801833c:	d0f9      	beq.n	8018332 <__sflush_r+0x1a>
 801833e:	2300      	movs	r3, #0
 8018340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018344:	682f      	ldr	r7, [r5, #0]
 8018346:	602b      	str	r3, [r5, #0]
 8018348:	d032      	beq.n	80183b0 <__sflush_r+0x98>
 801834a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801834c:	89a3      	ldrh	r3, [r4, #12]
 801834e:	075a      	lsls	r2, r3, #29
 8018350:	d505      	bpl.n	801835e <__sflush_r+0x46>
 8018352:	6863      	ldr	r3, [r4, #4]
 8018354:	1ac0      	subs	r0, r0, r3
 8018356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018358:	b10b      	cbz	r3, 801835e <__sflush_r+0x46>
 801835a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801835c:	1ac0      	subs	r0, r0, r3
 801835e:	2300      	movs	r3, #0
 8018360:	4602      	mov	r2, r0
 8018362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018364:	6a21      	ldr	r1, [r4, #32]
 8018366:	4628      	mov	r0, r5
 8018368:	47b0      	blx	r6
 801836a:	1c43      	adds	r3, r0, #1
 801836c:	89a3      	ldrh	r3, [r4, #12]
 801836e:	d106      	bne.n	801837e <__sflush_r+0x66>
 8018370:	6829      	ldr	r1, [r5, #0]
 8018372:	291d      	cmp	r1, #29
 8018374:	d82c      	bhi.n	80183d0 <__sflush_r+0xb8>
 8018376:	4a2a      	ldr	r2, [pc, #168]	; (8018420 <__sflush_r+0x108>)
 8018378:	40ca      	lsrs	r2, r1
 801837a:	07d6      	lsls	r6, r2, #31
 801837c:	d528      	bpl.n	80183d0 <__sflush_r+0xb8>
 801837e:	2200      	movs	r2, #0
 8018380:	6062      	str	r2, [r4, #4]
 8018382:	04d9      	lsls	r1, r3, #19
 8018384:	6922      	ldr	r2, [r4, #16]
 8018386:	6022      	str	r2, [r4, #0]
 8018388:	d504      	bpl.n	8018394 <__sflush_r+0x7c>
 801838a:	1c42      	adds	r2, r0, #1
 801838c:	d101      	bne.n	8018392 <__sflush_r+0x7a>
 801838e:	682b      	ldr	r3, [r5, #0]
 8018390:	b903      	cbnz	r3, 8018394 <__sflush_r+0x7c>
 8018392:	6560      	str	r0, [r4, #84]	; 0x54
 8018394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018396:	602f      	str	r7, [r5, #0]
 8018398:	2900      	cmp	r1, #0
 801839a:	d0ca      	beq.n	8018332 <__sflush_r+0x1a>
 801839c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183a0:	4299      	cmp	r1, r3
 80183a2:	d002      	beq.n	80183aa <__sflush_r+0x92>
 80183a4:	4628      	mov	r0, r5
 80183a6:	f000 f9d7 	bl	8018758 <_free_r>
 80183aa:	2000      	movs	r0, #0
 80183ac:	6360      	str	r0, [r4, #52]	; 0x34
 80183ae:	e7c1      	b.n	8018334 <__sflush_r+0x1c>
 80183b0:	6a21      	ldr	r1, [r4, #32]
 80183b2:	2301      	movs	r3, #1
 80183b4:	4628      	mov	r0, r5
 80183b6:	47b0      	blx	r6
 80183b8:	1c41      	adds	r1, r0, #1
 80183ba:	d1c7      	bne.n	801834c <__sflush_r+0x34>
 80183bc:	682b      	ldr	r3, [r5, #0]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d0c4      	beq.n	801834c <__sflush_r+0x34>
 80183c2:	2b1d      	cmp	r3, #29
 80183c4:	d001      	beq.n	80183ca <__sflush_r+0xb2>
 80183c6:	2b16      	cmp	r3, #22
 80183c8:	d101      	bne.n	80183ce <__sflush_r+0xb6>
 80183ca:	602f      	str	r7, [r5, #0]
 80183cc:	e7b1      	b.n	8018332 <__sflush_r+0x1a>
 80183ce:	89a3      	ldrh	r3, [r4, #12]
 80183d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183d4:	81a3      	strh	r3, [r4, #12]
 80183d6:	e7ad      	b.n	8018334 <__sflush_r+0x1c>
 80183d8:	690f      	ldr	r7, [r1, #16]
 80183da:	2f00      	cmp	r7, #0
 80183dc:	d0a9      	beq.n	8018332 <__sflush_r+0x1a>
 80183de:	0793      	lsls	r3, r2, #30
 80183e0:	680e      	ldr	r6, [r1, #0]
 80183e2:	bf08      	it	eq
 80183e4:	694b      	ldreq	r3, [r1, #20]
 80183e6:	600f      	str	r7, [r1, #0]
 80183e8:	bf18      	it	ne
 80183ea:	2300      	movne	r3, #0
 80183ec:	eba6 0807 	sub.w	r8, r6, r7
 80183f0:	608b      	str	r3, [r1, #8]
 80183f2:	f1b8 0f00 	cmp.w	r8, #0
 80183f6:	dd9c      	ble.n	8018332 <__sflush_r+0x1a>
 80183f8:	6a21      	ldr	r1, [r4, #32]
 80183fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80183fc:	4643      	mov	r3, r8
 80183fe:	463a      	mov	r2, r7
 8018400:	4628      	mov	r0, r5
 8018402:	47b0      	blx	r6
 8018404:	2800      	cmp	r0, #0
 8018406:	dc06      	bgt.n	8018416 <__sflush_r+0xfe>
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801840e:	81a3      	strh	r3, [r4, #12]
 8018410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018414:	e78e      	b.n	8018334 <__sflush_r+0x1c>
 8018416:	4407      	add	r7, r0
 8018418:	eba8 0800 	sub.w	r8, r8, r0
 801841c:	e7e9      	b.n	80183f2 <__sflush_r+0xda>
 801841e:	bf00      	nop
 8018420:	20400001 	.word	0x20400001

08018424 <_fflush_r>:
 8018424:	b538      	push	{r3, r4, r5, lr}
 8018426:	690b      	ldr	r3, [r1, #16]
 8018428:	4605      	mov	r5, r0
 801842a:	460c      	mov	r4, r1
 801842c:	b913      	cbnz	r3, 8018434 <_fflush_r+0x10>
 801842e:	2500      	movs	r5, #0
 8018430:	4628      	mov	r0, r5
 8018432:	bd38      	pop	{r3, r4, r5, pc}
 8018434:	b118      	cbz	r0, 801843e <_fflush_r+0x1a>
 8018436:	6983      	ldr	r3, [r0, #24]
 8018438:	b90b      	cbnz	r3, 801843e <_fflush_r+0x1a>
 801843a:	f000 f887 	bl	801854c <__sinit>
 801843e:	4b14      	ldr	r3, [pc, #80]	; (8018490 <_fflush_r+0x6c>)
 8018440:	429c      	cmp	r4, r3
 8018442:	d11b      	bne.n	801847c <_fflush_r+0x58>
 8018444:	686c      	ldr	r4, [r5, #4]
 8018446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d0ef      	beq.n	801842e <_fflush_r+0xa>
 801844e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018450:	07d0      	lsls	r0, r2, #31
 8018452:	d404      	bmi.n	801845e <_fflush_r+0x3a>
 8018454:	0599      	lsls	r1, r3, #22
 8018456:	d402      	bmi.n	801845e <_fflush_r+0x3a>
 8018458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801845a:	f000 f915 	bl	8018688 <__retarget_lock_acquire_recursive>
 801845e:	4628      	mov	r0, r5
 8018460:	4621      	mov	r1, r4
 8018462:	f7ff ff59 	bl	8018318 <__sflush_r>
 8018466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018468:	07da      	lsls	r2, r3, #31
 801846a:	4605      	mov	r5, r0
 801846c:	d4e0      	bmi.n	8018430 <_fflush_r+0xc>
 801846e:	89a3      	ldrh	r3, [r4, #12]
 8018470:	059b      	lsls	r3, r3, #22
 8018472:	d4dd      	bmi.n	8018430 <_fflush_r+0xc>
 8018474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018476:	f000 f908 	bl	801868a <__retarget_lock_release_recursive>
 801847a:	e7d9      	b.n	8018430 <_fflush_r+0xc>
 801847c:	4b05      	ldr	r3, [pc, #20]	; (8018494 <_fflush_r+0x70>)
 801847e:	429c      	cmp	r4, r3
 8018480:	d101      	bne.n	8018486 <_fflush_r+0x62>
 8018482:	68ac      	ldr	r4, [r5, #8]
 8018484:	e7df      	b.n	8018446 <_fflush_r+0x22>
 8018486:	4b04      	ldr	r3, [pc, #16]	; (8018498 <_fflush_r+0x74>)
 8018488:	429c      	cmp	r4, r3
 801848a:	bf08      	it	eq
 801848c:	68ec      	ldreq	r4, [r5, #12]
 801848e:	e7da      	b.n	8018446 <_fflush_r+0x22>
 8018490:	08018f18 	.word	0x08018f18
 8018494:	08018f38 	.word	0x08018f38
 8018498:	08018ef8 	.word	0x08018ef8

0801849c <std>:
 801849c:	2300      	movs	r3, #0
 801849e:	b510      	push	{r4, lr}
 80184a0:	4604      	mov	r4, r0
 80184a2:	e9c0 3300 	strd	r3, r3, [r0]
 80184a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80184aa:	6083      	str	r3, [r0, #8]
 80184ac:	8181      	strh	r1, [r0, #12]
 80184ae:	6643      	str	r3, [r0, #100]	; 0x64
 80184b0:	81c2      	strh	r2, [r0, #14]
 80184b2:	6183      	str	r3, [r0, #24]
 80184b4:	4619      	mov	r1, r3
 80184b6:	2208      	movs	r2, #8
 80184b8:	305c      	adds	r0, #92	; 0x5c
 80184ba:	f7ff fdef 	bl	801809c <memset>
 80184be:	4b05      	ldr	r3, [pc, #20]	; (80184d4 <std+0x38>)
 80184c0:	6263      	str	r3, [r4, #36]	; 0x24
 80184c2:	4b05      	ldr	r3, [pc, #20]	; (80184d8 <std+0x3c>)
 80184c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80184c6:	4b05      	ldr	r3, [pc, #20]	; (80184dc <std+0x40>)
 80184c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80184ca:	4b05      	ldr	r3, [pc, #20]	; (80184e0 <std+0x44>)
 80184cc:	6224      	str	r4, [r4, #32]
 80184ce:	6323      	str	r3, [r4, #48]	; 0x30
 80184d0:	bd10      	pop	{r4, pc}
 80184d2:	bf00      	nop
 80184d4:	08018939 	.word	0x08018939
 80184d8:	0801895b 	.word	0x0801895b
 80184dc:	08018993 	.word	0x08018993
 80184e0:	080189b7 	.word	0x080189b7

080184e4 <_cleanup_r>:
 80184e4:	4901      	ldr	r1, [pc, #4]	; (80184ec <_cleanup_r+0x8>)
 80184e6:	f000 b8af 	b.w	8018648 <_fwalk_reent>
 80184ea:	bf00      	nop
 80184ec:	08018425 	.word	0x08018425

080184f0 <__sfmoreglue>:
 80184f0:	b570      	push	{r4, r5, r6, lr}
 80184f2:	2268      	movs	r2, #104	; 0x68
 80184f4:	1e4d      	subs	r5, r1, #1
 80184f6:	4355      	muls	r5, r2
 80184f8:	460e      	mov	r6, r1
 80184fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80184fe:	f000 f997 	bl	8018830 <_malloc_r>
 8018502:	4604      	mov	r4, r0
 8018504:	b140      	cbz	r0, 8018518 <__sfmoreglue+0x28>
 8018506:	2100      	movs	r1, #0
 8018508:	e9c0 1600 	strd	r1, r6, [r0]
 801850c:	300c      	adds	r0, #12
 801850e:	60a0      	str	r0, [r4, #8]
 8018510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018514:	f7ff fdc2 	bl	801809c <memset>
 8018518:	4620      	mov	r0, r4
 801851a:	bd70      	pop	{r4, r5, r6, pc}

0801851c <__sfp_lock_acquire>:
 801851c:	4801      	ldr	r0, [pc, #4]	; (8018524 <__sfp_lock_acquire+0x8>)
 801851e:	f000 b8b3 	b.w	8018688 <__retarget_lock_acquire_recursive>
 8018522:	bf00      	nop
 8018524:	240068d1 	.word	0x240068d1

08018528 <__sfp_lock_release>:
 8018528:	4801      	ldr	r0, [pc, #4]	; (8018530 <__sfp_lock_release+0x8>)
 801852a:	f000 b8ae 	b.w	801868a <__retarget_lock_release_recursive>
 801852e:	bf00      	nop
 8018530:	240068d1 	.word	0x240068d1

08018534 <__sinit_lock_acquire>:
 8018534:	4801      	ldr	r0, [pc, #4]	; (801853c <__sinit_lock_acquire+0x8>)
 8018536:	f000 b8a7 	b.w	8018688 <__retarget_lock_acquire_recursive>
 801853a:	bf00      	nop
 801853c:	240068d2 	.word	0x240068d2

08018540 <__sinit_lock_release>:
 8018540:	4801      	ldr	r0, [pc, #4]	; (8018548 <__sinit_lock_release+0x8>)
 8018542:	f000 b8a2 	b.w	801868a <__retarget_lock_release_recursive>
 8018546:	bf00      	nop
 8018548:	240068d2 	.word	0x240068d2

0801854c <__sinit>:
 801854c:	b510      	push	{r4, lr}
 801854e:	4604      	mov	r4, r0
 8018550:	f7ff fff0 	bl	8018534 <__sinit_lock_acquire>
 8018554:	69a3      	ldr	r3, [r4, #24]
 8018556:	b11b      	cbz	r3, 8018560 <__sinit+0x14>
 8018558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801855c:	f7ff bff0 	b.w	8018540 <__sinit_lock_release>
 8018560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018564:	6523      	str	r3, [r4, #80]	; 0x50
 8018566:	4b13      	ldr	r3, [pc, #76]	; (80185b4 <__sinit+0x68>)
 8018568:	4a13      	ldr	r2, [pc, #76]	; (80185b8 <__sinit+0x6c>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	62a2      	str	r2, [r4, #40]	; 0x28
 801856e:	42a3      	cmp	r3, r4
 8018570:	bf04      	itt	eq
 8018572:	2301      	moveq	r3, #1
 8018574:	61a3      	streq	r3, [r4, #24]
 8018576:	4620      	mov	r0, r4
 8018578:	f000 f820 	bl	80185bc <__sfp>
 801857c:	6060      	str	r0, [r4, #4]
 801857e:	4620      	mov	r0, r4
 8018580:	f000 f81c 	bl	80185bc <__sfp>
 8018584:	60a0      	str	r0, [r4, #8]
 8018586:	4620      	mov	r0, r4
 8018588:	f000 f818 	bl	80185bc <__sfp>
 801858c:	2200      	movs	r2, #0
 801858e:	60e0      	str	r0, [r4, #12]
 8018590:	2104      	movs	r1, #4
 8018592:	6860      	ldr	r0, [r4, #4]
 8018594:	f7ff ff82 	bl	801849c <std>
 8018598:	68a0      	ldr	r0, [r4, #8]
 801859a:	2201      	movs	r2, #1
 801859c:	2109      	movs	r1, #9
 801859e:	f7ff ff7d 	bl	801849c <std>
 80185a2:	68e0      	ldr	r0, [r4, #12]
 80185a4:	2202      	movs	r2, #2
 80185a6:	2112      	movs	r1, #18
 80185a8:	f7ff ff78 	bl	801849c <std>
 80185ac:	2301      	movs	r3, #1
 80185ae:	61a3      	str	r3, [r4, #24]
 80185b0:	e7d2      	b.n	8018558 <__sinit+0xc>
 80185b2:	bf00      	nop
 80185b4:	08018ef4 	.word	0x08018ef4
 80185b8:	080184e5 	.word	0x080184e5

080185bc <__sfp>:
 80185bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185be:	4607      	mov	r7, r0
 80185c0:	f7ff ffac 	bl	801851c <__sfp_lock_acquire>
 80185c4:	4b1e      	ldr	r3, [pc, #120]	; (8018640 <__sfp+0x84>)
 80185c6:	681e      	ldr	r6, [r3, #0]
 80185c8:	69b3      	ldr	r3, [r6, #24]
 80185ca:	b913      	cbnz	r3, 80185d2 <__sfp+0x16>
 80185cc:	4630      	mov	r0, r6
 80185ce:	f7ff ffbd 	bl	801854c <__sinit>
 80185d2:	3648      	adds	r6, #72	; 0x48
 80185d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80185d8:	3b01      	subs	r3, #1
 80185da:	d503      	bpl.n	80185e4 <__sfp+0x28>
 80185dc:	6833      	ldr	r3, [r6, #0]
 80185de:	b30b      	cbz	r3, 8018624 <__sfp+0x68>
 80185e0:	6836      	ldr	r6, [r6, #0]
 80185e2:	e7f7      	b.n	80185d4 <__sfp+0x18>
 80185e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80185e8:	b9d5      	cbnz	r5, 8018620 <__sfp+0x64>
 80185ea:	4b16      	ldr	r3, [pc, #88]	; (8018644 <__sfp+0x88>)
 80185ec:	60e3      	str	r3, [r4, #12]
 80185ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80185f2:	6665      	str	r5, [r4, #100]	; 0x64
 80185f4:	f000 f847 	bl	8018686 <__retarget_lock_init_recursive>
 80185f8:	f7ff ff96 	bl	8018528 <__sfp_lock_release>
 80185fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018604:	6025      	str	r5, [r4, #0]
 8018606:	61a5      	str	r5, [r4, #24]
 8018608:	2208      	movs	r2, #8
 801860a:	4629      	mov	r1, r5
 801860c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018610:	f7ff fd44 	bl	801809c <memset>
 8018614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801861c:	4620      	mov	r0, r4
 801861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018620:	3468      	adds	r4, #104	; 0x68
 8018622:	e7d9      	b.n	80185d8 <__sfp+0x1c>
 8018624:	2104      	movs	r1, #4
 8018626:	4638      	mov	r0, r7
 8018628:	f7ff ff62 	bl	80184f0 <__sfmoreglue>
 801862c:	4604      	mov	r4, r0
 801862e:	6030      	str	r0, [r6, #0]
 8018630:	2800      	cmp	r0, #0
 8018632:	d1d5      	bne.n	80185e0 <__sfp+0x24>
 8018634:	f7ff ff78 	bl	8018528 <__sfp_lock_release>
 8018638:	230c      	movs	r3, #12
 801863a:	603b      	str	r3, [r7, #0]
 801863c:	e7ee      	b.n	801861c <__sfp+0x60>
 801863e:	bf00      	nop
 8018640:	08018ef4 	.word	0x08018ef4
 8018644:	ffff0001 	.word	0xffff0001

08018648 <_fwalk_reent>:
 8018648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801864c:	4606      	mov	r6, r0
 801864e:	4688      	mov	r8, r1
 8018650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018654:	2700      	movs	r7, #0
 8018656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801865a:	f1b9 0901 	subs.w	r9, r9, #1
 801865e:	d505      	bpl.n	801866c <_fwalk_reent+0x24>
 8018660:	6824      	ldr	r4, [r4, #0]
 8018662:	2c00      	cmp	r4, #0
 8018664:	d1f7      	bne.n	8018656 <_fwalk_reent+0xe>
 8018666:	4638      	mov	r0, r7
 8018668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801866c:	89ab      	ldrh	r3, [r5, #12]
 801866e:	2b01      	cmp	r3, #1
 8018670:	d907      	bls.n	8018682 <_fwalk_reent+0x3a>
 8018672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018676:	3301      	adds	r3, #1
 8018678:	d003      	beq.n	8018682 <_fwalk_reent+0x3a>
 801867a:	4629      	mov	r1, r5
 801867c:	4630      	mov	r0, r6
 801867e:	47c0      	blx	r8
 8018680:	4307      	orrs	r7, r0
 8018682:	3568      	adds	r5, #104	; 0x68
 8018684:	e7e9      	b.n	801865a <_fwalk_reent+0x12>

08018686 <__retarget_lock_init_recursive>:
 8018686:	4770      	bx	lr

08018688 <__retarget_lock_acquire_recursive>:
 8018688:	4770      	bx	lr

0801868a <__retarget_lock_release_recursive>:
 801868a:	4770      	bx	lr

0801868c <__swhatbuf_r>:
 801868c:	b570      	push	{r4, r5, r6, lr}
 801868e:	460e      	mov	r6, r1
 8018690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018694:	2900      	cmp	r1, #0
 8018696:	b096      	sub	sp, #88	; 0x58
 8018698:	4614      	mov	r4, r2
 801869a:	461d      	mov	r5, r3
 801869c:	da08      	bge.n	80186b0 <__swhatbuf_r+0x24>
 801869e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80186a2:	2200      	movs	r2, #0
 80186a4:	602a      	str	r2, [r5, #0]
 80186a6:	061a      	lsls	r2, r3, #24
 80186a8:	d410      	bmi.n	80186cc <__swhatbuf_r+0x40>
 80186aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186ae:	e00e      	b.n	80186ce <__swhatbuf_r+0x42>
 80186b0:	466a      	mov	r2, sp
 80186b2:	f000 f9a7 	bl	8018a04 <_fstat_r>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	dbf1      	blt.n	801869e <__swhatbuf_r+0x12>
 80186ba:	9a01      	ldr	r2, [sp, #4]
 80186bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80186c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80186c4:	425a      	negs	r2, r3
 80186c6:	415a      	adcs	r2, r3
 80186c8:	602a      	str	r2, [r5, #0]
 80186ca:	e7ee      	b.n	80186aa <__swhatbuf_r+0x1e>
 80186cc:	2340      	movs	r3, #64	; 0x40
 80186ce:	2000      	movs	r0, #0
 80186d0:	6023      	str	r3, [r4, #0]
 80186d2:	b016      	add	sp, #88	; 0x58
 80186d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080186d8 <__smakebuf_r>:
 80186d8:	898b      	ldrh	r3, [r1, #12]
 80186da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80186dc:	079d      	lsls	r5, r3, #30
 80186de:	4606      	mov	r6, r0
 80186e0:	460c      	mov	r4, r1
 80186e2:	d507      	bpl.n	80186f4 <__smakebuf_r+0x1c>
 80186e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80186e8:	6023      	str	r3, [r4, #0]
 80186ea:	6123      	str	r3, [r4, #16]
 80186ec:	2301      	movs	r3, #1
 80186ee:	6163      	str	r3, [r4, #20]
 80186f0:	b002      	add	sp, #8
 80186f2:	bd70      	pop	{r4, r5, r6, pc}
 80186f4:	ab01      	add	r3, sp, #4
 80186f6:	466a      	mov	r2, sp
 80186f8:	f7ff ffc8 	bl	801868c <__swhatbuf_r>
 80186fc:	9900      	ldr	r1, [sp, #0]
 80186fe:	4605      	mov	r5, r0
 8018700:	4630      	mov	r0, r6
 8018702:	f000 f895 	bl	8018830 <_malloc_r>
 8018706:	b948      	cbnz	r0, 801871c <__smakebuf_r+0x44>
 8018708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801870c:	059a      	lsls	r2, r3, #22
 801870e:	d4ef      	bmi.n	80186f0 <__smakebuf_r+0x18>
 8018710:	f023 0303 	bic.w	r3, r3, #3
 8018714:	f043 0302 	orr.w	r3, r3, #2
 8018718:	81a3      	strh	r3, [r4, #12]
 801871a:	e7e3      	b.n	80186e4 <__smakebuf_r+0xc>
 801871c:	4b0d      	ldr	r3, [pc, #52]	; (8018754 <__smakebuf_r+0x7c>)
 801871e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018720:	89a3      	ldrh	r3, [r4, #12]
 8018722:	6020      	str	r0, [r4, #0]
 8018724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018728:	81a3      	strh	r3, [r4, #12]
 801872a:	9b00      	ldr	r3, [sp, #0]
 801872c:	6163      	str	r3, [r4, #20]
 801872e:	9b01      	ldr	r3, [sp, #4]
 8018730:	6120      	str	r0, [r4, #16]
 8018732:	b15b      	cbz	r3, 801874c <__smakebuf_r+0x74>
 8018734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018738:	4630      	mov	r0, r6
 801873a:	f000 f975 	bl	8018a28 <_isatty_r>
 801873e:	b128      	cbz	r0, 801874c <__smakebuf_r+0x74>
 8018740:	89a3      	ldrh	r3, [r4, #12]
 8018742:	f023 0303 	bic.w	r3, r3, #3
 8018746:	f043 0301 	orr.w	r3, r3, #1
 801874a:	81a3      	strh	r3, [r4, #12]
 801874c:	89a0      	ldrh	r0, [r4, #12]
 801874e:	4305      	orrs	r5, r0
 8018750:	81a5      	strh	r5, [r4, #12]
 8018752:	e7cd      	b.n	80186f0 <__smakebuf_r+0x18>
 8018754:	080184e5 	.word	0x080184e5

08018758 <_free_r>:
 8018758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801875a:	2900      	cmp	r1, #0
 801875c:	d044      	beq.n	80187e8 <_free_r+0x90>
 801875e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018762:	9001      	str	r0, [sp, #4]
 8018764:	2b00      	cmp	r3, #0
 8018766:	f1a1 0404 	sub.w	r4, r1, #4
 801876a:	bfb8      	it	lt
 801876c:	18e4      	addlt	r4, r4, r3
 801876e:	f000 f97d 	bl	8018a6c <__malloc_lock>
 8018772:	4a1e      	ldr	r2, [pc, #120]	; (80187ec <_free_r+0x94>)
 8018774:	9801      	ldr	r0, [sp, #4]
 8018776:	6813      	ldr	r3, [r2, #0]
 8018778:	b933      	cbnz	r3, 8018788 <_free_r+0x30>
 801877a:	6063      	str	r3, [r4, #4]
 801877c:	6014      	str	r4, [r2, #0]
 801877e:	b003      	add	sp, #12
 8018780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018784:	f000 b978 	b.w	8018a78 <__malloc_unlock>
 8018788:	42a3      	cmp	r3, r4
 801878a:	d908      	bls.n	801879e <_free_r+0x46>
 801878c:	6825      	ldr	r5, [r4, #0]
 801878e:	1961      	adds	r1, r4, r5
 8018790:	428b      	cmp	r3, r1
 8018792:	bf01      	itttt	eq
 8018794:	6819      	ldreq	r1, [r3, #0]
 8018796:	685b      	ldreq	r3, [r3, #4]
 8018798:	1949      	addeq	r1, r1, r5
 801879a:	6021      	streq	r1, [r4, #0]
 801879c:	e7ed      	b.n	801877a <_free_r+0x22>
 801879e:	461a      	mov	r2, r3
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	b10b      	cbz	r3, 80187a8 <_free_r+0x50>
 80187a4:	42a3      	cmp	r3, r4
 80187a6:	d9fa      	bls.n	801879e <_free_r+0x46>
 80187a8:	6811      	ldr	r1, [r2, #0]
 80187aa:	1855      	adds	r5, r2, r1
 80187ac:	42a5      	cmp	r5, r4
 80187ae:	d10b      	bne.n	80187c8 <_free_r+0x70>
 80187b0:	6824      	ldr	r4, [r4, #0]
 80187b2:	4421      	add	r1, r4
 80187b4:	1854      	adds	r4, r2, r1
 80187b6:	42a3      	cmp	r3, r4
 80187b8:	6011      	str	r1, [r2, #0]
 80187ba:	d1e0      	bne.n	801877e <_free_r+0x26>
 80187bc:	681c      	ldr	r4, [r3, #0]
 80187be:	685b      	ldr	r3, [r3, #4]
 80187c0:	6053      	str	r3, [r2, #4]
 80187c2:	4421      	add	r1, r4
 80187c4:	6011      	str	r1, [r2, #0]
 80187c6:	e7da      	b.n	801877e <_free_r+0x26>
 80187c8:	d902      	bls.n	80187d0 <_free_r+0x78>
 80187ca:	230c      	movs	r3, #12
 80187cc:	6003      	str	r3, [r0, #0]
 80187ce:	e7d6      	b.n	801877e <_free_r+0x26>
 80187d0:	6825      	ldr	r5, [r4, #0]
 80187d2:	1961      	adds	r1, r4, r5
 80187d4:	428b      	cmp	r3, r1
 80187d6:	bf04      	itt	eq
 80187d8:	6819      	ldreq	r1, [r3, #0]
 80187da:	685b      	ldreq	r3, [r3, #4]
 80187dc:	6063      	str	r3, [r4, #4]
 80187de:	bf04      	itt	eq
 80187e0:	1949      	addeq	r1, r1, r5
 80187e2:	6021      	streq	r1, [r4, #0]
 80187e4:	6054      	str	r4, [r2, #4]
 80187e6:	e7ca      	b.n	801877e <_free_r+0x26>
 80187e8:	b003      	add	sp, #12
 80187ea:	bd30      	pop	{r4, r5, pc}
 80187ec:	240068d4 	.word	0x240068d4

080187f0 <sbrk_aligned>:
 80187f0:	b570      	push	{r4, r5, r6, lr}
 80187f2:	4e0e      	ldr	r6, [pc, #56]	; (801882c <sbrk_aligned+0x3c>)
 80187f4:	460c      	mov	r4, r1
 80187f6:	6831      	ldr	r1, [r6, #0]
 80187f8:	4605      	mov	r5, r0
 80187fa:	b911      	cbnz	r1, 8018802 <sbrk_aligned+0x12>
 80187fc:	f000 f88c 	bl	8018918 <_sbrk_r>
 8018800:	6030      	str	r0, [r6, #0]
 8018802:	4621      	mov	r1, r4
 8018804:	4628      	mov	r0, r5
 8018806:	f000 f887 	bl	8018918 <_sbrk_r>
 801880a:	1c43      	adds	r3, r0, #1
 801880c:	d00a      	beq.n	8018824 <sbrk_aligned+0x34>
 801880e:	1cc4      	adds	r4, r0, #3
 8018810:	f024 0403 	bic.w	r4, r4, #3
 8018814:	42a0      	cmp	r0, r4
 8018816:	d007      	beq.n	8018828 <sbrk_aligned+0x38>
 8018818:	1a21      	subs	r1, r4, r0
 801881a:	4628      	mov	r0, r5
 801881c:	f000 f87c 	bl	8018918 <_sbrk_r>
 8018820:	3001      	adds	r0, #1
 8018822:	d101      	bne.n	8018828 <sbrk_aligned+0x38>
 8018824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018828:	4620      	mov	r0, r4
 801882a:	bd70      	pop	{r4, r5, r6, pc}
 801882c:	240068d8 	.word	0x240068d8

08018830 <_malloc_r>:
 8018830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018834:	1ccd      	adds	r5, r1, #3
 8018836:	f025 0503 	bic.w	r5, r5, #3
 801883a:	3508      	adds	r5, #8
 801883c:	2d0c      	cmp	r5, #12
 801883e:	bf38      	it	cc
 8018840:	250c      	movcc	r5, #12
 8018842:	2d00      	cmp	r5, #0
 8018844:	4607      	mov	r7, r0
 8018846:	db01      	blt.n	801884c <_malloc_r+0x1c>
 8018848:	42a9      	cmp	r1, r5
 801884a:	d905      	bls.n	8018858 <_malloc_r+0x28>
 801884c:	230c      	movs	r3, #12
 801884e:	603b      	str	r3, [r7, #0]
 8018850:	2600      	movs	r6, #0
 8018852:	4630      	mov	r0, r6
 8018854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018858:	4e2e      	ldr	r6, [pc, #184]	; (8018914 <_malloc_r+0xe4>)
 801885a:	f000 f907 	bl	8018a6c <__malloc_lock>
 801885e:	6833      	ldr	r3, [r6, #0]
 8018860:	461c      	mov	r4, r3
 8018862:	bb34      	cbnz	r4, 80188b2 <_malloc_r+0x82>
 8018864:	4629      	mov	r1, r5
 8018866:	4638      	mov	r0, r7
 8018868:	f7ff ffc2 	bl	80187f0 <sbrk_aligned>
 801886c:	1c43      	adds	r3, r0, #1
 801886e:	4604      	mov	r4, r0
 8018870:	d14d      	bne.n	801890e <_malloc_r+0xde>
 8018872:	6834      	ldr	r4, [r6, #0]
 8018874:	4626      	mov	r6, r4
 8018876:	2e00      	cmp	r6, #0
 8018878:	d140      	bne.n	80188fc <_malloc_r+0xcc>
 801887a:	6823      	ldr	r3, [r4, #0]
 801887c:	4631      	mov	r1, r6
 801887e:	4638      	mov	r0, r7
 8018880:	eb04 0803 	add.w	r8, r4, r3
 8018884:	f000 f848 	bl	8018918 <_sbrk_r>
 8018888:	4580      	cmp	r8, r0
 801888a:	d13a      	bne.n	8018902 <_malloc_r+0xd2>
 801888c:	6821      	ldr	r1, [r4, #0]
 801888e:	3503      	adds	r5, #3
 8018890:	1a6d      	subs	r5, r5, r1
 8018892:	f025 0503 	bic.w	r5, r5, #3
 8018896:	3508      	adds	r5, #8
 8018898:	2d0c      	cmp	r5, #12
 801889a:	bf38      	it	cc
 801889c:	250c      	movcc	r5, #12
 801889e:	4629      	mov	r1, r5
 80188a0:	4638      	mov	r0, r7
 80188a2:	f7ff ffa5 	bl	80187f0 <sbrk_aligned>
 80188a6:	3001      	adds	r0, #1
 80188a8:	d02b      	beq.n	8018902 <_malloc_r+0xd2>
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	442b      	add	r3, r5
 80188ae:	6023      	str	r3, [r4, #0]
 80188b0:	e00e      	b.n	80188d0 <_malloc_r+0xa0>
 80188b2:	6822      	ldr	r2, [r4, #0]
 80188b4:	1b52      	subs	r2, r2, r5
 80188b6:	d41e      	bmi.n	80188f6 <_malloc_r+0xc6>
 80188b8:	2a0b      	cmp	r2, #11
 80188ba:	d916      	bls.n	80188ea <_malloc_r+0xba>
 80188bc:	1961      	adds	r1, r4, r5
 80188be:	42a3      	cmp	r3, r4
 80188c0:	6025      	str	r5, [r4, #0]
 80188c2:	bf18      	it	ne
 80188c4:	6059      	strne	r1, [r3, #4]
 80188c6:	6863      	ldr	r3, [r4, #4]
 80188c8:	bf08      	it	eq
 80188ca:	6031      	streq	r1, [r6, #0]
 80188cc:	5162      	str	r2, [r4, r5]
 80188ce:	604b      	str	r3, [r1, #4]
 80188d0:	4638      	mov	r0, r7
 80188d2:	f104 060b 	add.w	r6, r4, #11
 80188d6:	f000 f8cf 	bl	8018a78 <__malloc_unlock>
 80188da:	f026 0607 	bic.w	r6, r6, #7
 80188de:	1d23      	adds	r3, r4, #4
 80188e0:	1af2      	subs	r2, r6, r3
 80188e2:	d0b6      	beq.n	8018852 <_malloc_r+0x22>
 80188e4:	1b9b      	subs	r3, r3, r6
 80188e6:	50a3      	str	r3, [r4, r2]
 80188e8:	e7b3      	b.n	8018852 <_malloc_r+0x22>
 80188ea:	6862      	ldr	r2, [r4, #4]
 80188ec:	42a3      	cmp	r3, r4
 80188ee:	bf0c      	ite	eq
 80188f0:	6032      	streq	r2, [r6, #0]
 80188f2:	605a      	strne	r2, [r3, #4]
 80188f4:	e7ec      	b.n	80188d0 <_malloc_r+0xa0>
 80188f6:	4623      	mov	r3, r4
 80188f8:	6864      	ldr	r4, [r4, #4]
 80188fa:	e7b2      	b.n	8018862 <_malloc_r+0x32>
 80188fc:	4634      	mov	r4, r6
 80188fe:	6876      	ldr	r6, [r6, #4]
 8018900:	e7b9      	b.n	8018876 <_malloc_r+0x46>
 8018902:	230c      	movs	r3, #12
 8018904:	603b      	str	r3, [r7, #0]
 8018906:	4638      	mov	r0, r7
 8018908:	f000 f8b6 	bl	8018a78 <__malloc_unlock>
 801890c:	e7a1      	b.n	8018852 <_malloc_r+0x22>
 801890e:	6025      	str	r5, [r4, #0]
 8018910:	e7de      	b.n	80188d0 <_malloc_r+0xa0>
 8018912:	bf00      	nop
 8018914:	240068d4 	.word	0x240068d4

08018918 <_sbrk_r>:
 8018918:	b538      	push	{r3, r4, r5, lr}
 801891a:	4d06      	ldr	r5, [pc, #24]	; (8018934 <_sbrk_r+0x1c>)
 801891c:	2300      	movs	r3, #0
 801891e:	4604      	mov	r4, r0
 8018920:	4608      	mov	r0, r1
 8018922:	602b      	str	r3, [r5, #0]
 8018924:	f7ea fcee 	bl	8003304 <_sbrk>
 8018928:	1c43      	adds	r3, r0, #1
 801892a:	d102      	bne.n	8018932 <_sbrk_r+0x1a>
 801892c:	682b      	ldr	r3, [r5, #0]
 801892e:	b103      	cbz	r3, 8018932 <_sbrk_r+0x1a>
 8018930:	6023      	str	r3, [r4, #0]
 8018932:	bd38      	pop	{r3, r4, r5, pc}
 8018934:	240068dc 	.word	0x240068dc

08018938 <__sread>:
 8018938:	b510      	push	{r4, lr}
 801893a:	460c      	mov	r4, r1
 801893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018940:	f000 f8a0 	bl	8018a84 <_read_r>
 8018944:	2800      	cmp	r0, #0
 8018946:	bfab      	itete	ge
 8018948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801894a:	89a3      	ldrhlt	r3, [r4, #12]
 801894c:	181b      	addge	r3, r3, r0
 801894e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018952:	bfac      	ite	ge
 8018954:	6563      	strge	r3, [r4, #84]	; 0x54
 8018956:	81a3      	strhlt	r3, [r4, #12]
 8018958:	bd10      	pop	{r4, pc}

0801895a <__swrite>:
 801895a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801895e:	461f      	mov	r7, r3
 8018960:	898b      	ldrh	r3, [r1, #12]
 8018962:	05db      	lsls	r3, r3, #23
 8018964:	4605      	mov	r5, r0
 8018966:	460c      	mov	r4, r1
 8018968:	4616      	mov	r6, r2
 801896a:	d505      	bpl.n	8018978 <__swrite+0x1e>
 801896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018970:	2302      	movs	r3, #2
 8018972:	2200      	movs	r2, #0
 8018974:	f000 f868 	bl	8018a48 <_lseek_r>
 8018978:	89a3      	ldrh	r3, [r4, #12]
 801897a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801897e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018982:	81a3      	strh	r3, [r4, #12]
 8018984:	4632      	mov	r2, r6
 8018986:	463b      	mov	r3, r7
 8018988:	4628      	mov	r0, r5
 801898a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801898e:	f000 b817 	b.w	80189c0 <_write_r>

08018992 <__sseek>:
 8018992:	b510      	push	{r4, lr}
 8018994:	460c      	mov	r4, r1
 8018996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801899a:	f000 f855 	bl	8018a48 <_lseek_r>
 801899e:	1c43      	adds	r3, r0, #1
 80189a0:	89a3      	ldrh	r3, [r4, #12]
 80189a2:	bf15      	itete	ne
 80189a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80189a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80189aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80189ae:	81a3      	strheq	r3, [r4, #12]
 80189b0:	bf18      	it	ne
 80189b2:	81a3      	strhne	r3, [r4, #12]
 80189b4:	bd10      	pop	{r4, pc}

080189b6 <__sclose>:
 80189b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189ba:	f000 b813 	b.w	80189e4 <_close_r>
	...

080189c0 <_write_r>:
 80189c0:	b538      	push	{r3, r4, r5, lr}
 80189c2:	4d07      	ldr	r5, [pc, #28]	; (80189e0 <_write_r+0x20>)
 80189c4:	4604      	mov	r4, r0
 80189c6:	4608      	mov	r0, r1
 80189c8:	4611      	mov	r1, r2
 80189ca:	2200      	movs	r2, #0
 80189cc:	602a      	str	r2, [r5, #0]
 80189ce:	461a      	mov	r2, r3
 80189d0:	f7ea fc47 	bl	8003262 <_write>
 80189d4:	1c43      	adds	r3, r0, #1
 80189d6:	d102      	bne.n	80189de <_write_r+0x1e>
 80189d8:	682b      	ldr	r3, [r5, #0]
 80189da:	b103      	cbz	r3, 80189de <_write_r+0x1e>
 80189dc:	6023      	str	r3, [r4, #0]
 80189de:	bd38      	pop	{r3, r4, r5, pc}
 80189e0:	240068dc 	.word	0x240068dc

080189e4 <_close_r>:
 80189e4:	b538      	push	{r3, r4, r5, lr}
 80189e6:	4d06      	ldr	r5, [pc, #24]	; (8018a00 <_close_r+0x1c>)
 80189e8:	2300      	movs	r3, #0
 80189ea:	4604      	mov	r4, r0
 80189ec:	4608      	mov	r0, r1
 80189ee:	602b      	str	r3, [r5, #0]
 80189f0:	f7ea fc53 	bl	800329a <_close>
 80189f4:	1c43      	adds	r3, r0, #1
 80189f6:	d102      	bne.n	80189fe <_close_r+0x1a>
 80189f8:	682b      	ldr	r3, [r5, #0]
 80189fa:	b103      	cbz	r3, 80189fe <_close_r+0x1a>
 80189fc:	6023      	str	r3, [r4, #0]
 80189fe:	bd38      	pop	{r3, r4, r5, pc}
 8018a00:	240068dc 	.word	0x240068dc

08018a04 <_fstat_r>:
 8018a04:	b538      	push	{r3, r4, r5, lr}
 8018a06:	4d07      	ldr	r5, [pc, #28]	; (8018a24 <_fstat_r+0x20>)
 8018a08:	2300      	movs	r3, #0
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	4608      	mov	r0, r1
 8018a0e:	4611      	mov	r1, r2
 8018a10:	602b      	str	r3, [r5, #0]
 8018a12:	f7ea fc4e 	bl	80032b2 <_fstat>
 8018a16:	1c43      	adds	r3, r0, #1
 8018a18:	d102      	bne.n	8018a20 <_fstat_r+0x1c>
 8018a1a:	682b      	ldr	r3, [r5, #0]
 8018a1c:	b103      	cbz	r3, 8018a20 <_fstat_r+0x1c>
 8018a1e:	6023      	str	r3, [r4, #0]
 8018a20:	bd38      	pop	{r3, r4, r5, pc}
 8018a22:	bf00      	nop
 8018a24:	240068dc 	.word	0x240068dc

08018a28 <_isatty_r>:
 8018a28:	b538      	push	{r3, r4, r5, lr}
 8018a2a:	4d06      	ldr	r5, [pc, #24]	; (8018a44 <_isatty_r+0x1c>)
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	4604      	mov	r4, r0
 8018a30:	4608      	mov	r0, r1
 8018a32:	602b      	str	r3, [r5, #0]
 8018a34:	f7ea fc4d 	bl	80032d2 <_isatty>
 8018a38:	1c43      	adds	r3, r0, #1
 8018a3a:	d102      	bne.n	8018a42 <_isatty_r+0x1a>
 8018a3c:	682b      	ldr	r3, [r5, #0]
 8018a3e:	b103      	cbz	r3, 8018a42 <_isatty_r+0x1a>
 8018a40:	6023      	str	r3, [r4, #0]
 8018a42:	bd38      	pop	{r3, r4, r5, pc}
 8018a44:	240068dc 	.word	0x240068dc

08018a48 <_lseek_r>:
 8018a48:	b538      	push	{r3, r4, r5, lr}
 8018a4a:	4d07      	ldr	r5, [pc, #28]	; (8018a68 <_lseek_r+0x20>)
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	4608      	mov	r0, r1
 8018a50:	4611      	mov	r1, r2
 8018a52:	2200      	movs	r2, #0
 8018a54:	602a      	str	r2, [r5, #0]
 8018a56:	461a      	mov	r2, r3
 8018a58:	f7ea fc46 	bl	80032e8 <_lseek>
 8018a5c:	1c43      	adds	r3, r0, #1
 8018a5e:	d102      	bne.n	8018a66 <_lseek_r+0x1e>
 8018a60:	682b      	ldr	r3, [r5, #0]
 8018a62:	b103      	cbz	r3, 8018a66 <_lseek_r+0x1e>
 8018a64:	6023      	str	r3, [r4, #0]
 8018a66:	bd38      	pop	{r3, r4, r5, pc}
 8018a68:	240068dc 	.word	0x240068dc

08018a6c <__malloc_lock>:
 8018a6c:	4801      	ldr	r0, [pc, #4]	; (8018a74 <__malloc_lock+0x8>)
 8018a6e:	f7ff be0b 	b.w	8018688 <__retarget_lock_acquire_recursive>
 8018a72:	bf00      	nop
 8018a74:	240068d0 	.word	0x240068d0

08018a78 <__malloc_unlock>:
 8018a78:	4801      	ldr	r0, [pc, #4]	; (8018a80 <__malloc_unlock+0x8>)
 8018a7a:	f7ff be06 	b.w	801868a <__retarget_lock_release_recursive>
 8018a7e:	bf00      	nop
 8018a80:	240068d0 	.word	0x240068d0

08018a84 <_read_r>:
 8018a84:	b538      	push	{r3, r4, r5, lr}
 8018a86:	4d07      	ldr	r5, [pc, #28]	; (8018aa4 <_read_r+0x20>)
 8018a88:	4604      	mov	r4, r0
 8018a8a:	4608      	mov	r0, r1
 8018a8c:	4611      	mov	r1, r2
 8018a8e:	2200      	movs	r2, #0
 8018a90:	602a      	str	r2, [r5, #0]
 8018a92:	461a      	mov	r2, r3
 8018a94:	f7ea fbc8 	bl	8003228 <_read>
 8018a98:	1c43      	adds	r3, r0, #1
 8018a9a:	d102      	bne.n	8018aa2 <_read_r+0x1e>
 8018a9c:	682b      	ldr	r3, [r5, #0]
 8018a9e:	b103      	cbz	r3, 8018aa2 <_read_r+0x1e>
 8018aa0:	6023      	str	r3, [r4, #0]
 8018aa2:	bd38      	pop	{r3, r4, r5, pc}
 8018aa4:	240068dc 	.word	0x240068dc

08018aa8 <_init>:
 8018aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aaa:	bf00      	nop
 8018aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aae:	bc08      	pop	{r3}
 8018ab0:	469e      	mov	lr, r3
 8018ab2:	4770      	bx	lr

08018ab4 <_fini>:
 8018ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ab6:	bf00      	nop
 8018ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aba:	bc08      	pop	{r3}
 8018abc:	469e      	mov	lr, r3
 8018abe:	4770      	bx	lr
