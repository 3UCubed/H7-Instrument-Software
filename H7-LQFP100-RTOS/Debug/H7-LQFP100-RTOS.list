
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d380  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800d938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca0  24000078  0800d9b0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d18  0800d9b0  00024d18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028ba8  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047b3  00000000  00000000  00048c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f08  00000000  00000000  0004d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d60  00000000  00000000  0004f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000063c3  00000000  00000000  00051070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027aa4  00000000  00000000  00057433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176845  00000000  00000000  0007eed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f571c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b84  00000000  00000000  001f576c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d608 	.word	0x0800d608

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800d608 	.word	0x0800d608

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f009 fb34 	bl	8009c68 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f009 fb29 	bl	8009c68 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fb1e 	bl	8009c68 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f00c fb5a 	bl	800cce8 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000170 	.word	0x24000170
 8000640:	240002fc 	.word	0x240002fc
 8000644:	240001bc 	.word	0x240001bc
 8000648:	24000208 	.word	0x24000208
 800064c:	0800d650 	.word	0x0800d650

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f006 fe53 	bl	8007308 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f00c fae9 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f00c fae5 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f00c fae1 	bl	800cce8 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f00c fadd 	bl	800cce8 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f00c fad9 	bl	800cce8 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f00c fad5 	bl	800cce8 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f00c fad1 	bl	800cce8 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f00c facd 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f00c fac9 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f00c fac5 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f00c fac1 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f00c fabd 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f00c fab9 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f00c fab5 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f00c fab1 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f00c faad 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f00c faa9 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f00c faa5 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f00c faa1 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f00c fa9d 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f00c fa99 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f00c fa95 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f00c fa91 	bl	800cce8 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f00c fa8d 	bl	800cce8 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f00c fa89 	bl	800cce8 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f00c fa85 	bl	800cce8 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f00c fa81 	bl	800cce8 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f00c fa7d 	bl	800cce8 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f00c fa79 	bl	800cce8 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f00c fa75 	bl	800cce8 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000300 	.word	0x24000300
 800080c:	24000254 	.word	0x24000254
 8000810:	0800d668 	.word	0x0800d668
 8000814:	0800d670 	.word	0x0800d670
 8000818:	0800d67c 	.word	0x0800d67c
 800081c:	0800d684 	.word	0x0800d684
 8000820:	0800d690 	.word	0x0800d690
 8000824:	0800d6a4 	.word	0x0800d6a4
 8000828:	0800d6b0 	.word	0x0800d6b0
 800082c:	0800d6bc 	.word	0x0800d6bc
 8000830:	0800d6c8 	.word	0x0800d6c8
 8000834:	0800d6d4 	.word	0x0800d6d4
 8000838:	0800d6e0 	.word	0x0800d6e0
 800083c:	0800d6f0 	.word	0x0800d6f0
 8000840:	0800d6fc 	.word	0x0800d6fc
 8000844:	0800d708 	.word	0x0800d708
 8000848:	0800d718 	.word	0x0800d718
 800084c:	0800d728 	.word	0x0800d728
 8000850:	0800d734 	.word	0x0800d734
 8000854:	0800d740 	.word	0x0800d740
 8000858:	0800d74c 	.word	0x0800d74c
 800085c:	0800d758 	.word	0x0800d758
 8000860:	0800d764 	.word	0x0800d764
 8000864:	0800d770 	.word	0x0800d770
 8000868:	0800d77c 	.word	0x0800d77c
 800086c:	0800d78c 	.word	0x0800d78c
 8000870:	0800d79c 	.word	0x0800d79c
 8000874:	0800d7a4 	.word	0x0800d7a4
 8000878:	0800d7ac 	.word	0x0800d7ac
 800087c:	0800d7b4 	.word	0x0800d7b4
 8000880:	0800d7c0 	.word	0x0800d7c0
 8000884:	0800d7c8 	.word	0x0800d7c8

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 f86a 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f86a 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fb3c 	bl	8000f10 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000898:	f000 f97c 	bl	8000b94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800089c:	f000 fa28 	bl	8000cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a0:	f000 fa9c 	bl	8000ddc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fae8 	bl	8000e78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 f8dc 	bl	8000a64 <MX_I2C1_Init>
  MX_SPI2_Init();
 80008ac:	f000 f91a 	bl	8000ae4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <main+0x9c>)
 80008b4:	f005 fa82 	bl	8005dbc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <main+0xa0>)
 80008bc:	f005 fa7e 	bl	8005dbc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008c0:	2100      	movs	r1, #0
 80008c2:	481a      	ldr	r0, [pc, #104]	; (800092c <main+0xa4>)
 80008c4:	f005 fa7a 	bl	8005dbc <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c8:	f009 f8b2 	bl	8009a30 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <main+0xa8>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4818      	ldr	r0, [pc, #96]	; (8000934 <main+0xac>)
 80008d2:	f009 f8f7 	bl	8009ac4 <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <main+0xb0>)
 80008da:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <main+0xb4>)
 80008de:	2100      	movs	r1, #0
 80008e0:	4817      	ldr	r0, [pc, #92]	; (8000940 <main+0xb8>)
 80008e2:	f009 f8ef 	bl	8009ac4 <osThreadNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <main+0xbc>)
 80008ea:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <main+0xc0>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <main+0xc4>)
 80008f2:	f009 f8e7 	bl	8009ac4 <osThreadNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <main+0xc8>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <main+0xcc>)
 80008fe:	2100      	movs	r1, #0
 8000900:	4815      	ldr	r0, [pc, #84]	; (8000958 <main+0xd0>)
 8000902:	f009 f8df 	bl	8009ac4 <osThreadNew>
 8000906:	4603      	mov	r3, r0
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <main+0xd4>)
 800090a:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 800090c:	2000      	movs	r0, #0
 800090e:	f009 f96b 	bl	8009be8 <osEventFlagsNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <main+0xd8>)
 8000916:	6013      	str	r3, [r2, #0]
  printf("Starting kernal...\n");
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <main+0xdc>)
 800091a:	f00c f9e5 	bl	800cce8 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800091e:	f009 f8ab 	bl	8009a78 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000922:	e7fe      	b.n	8000922 <main+0x9a>
 8000924:	24000170 	.word	0x24000170
 8000928:	240001bc 	.word	0x240001bc
 800092c:	24000208 	.word	0x24000208
 8000930:	0800d7fc 	.word	0x0800d7fc
 8000934:	08000f65 	.word	0x08000f65
 8000938:	240002e8 	.word	0x240002e8
 800093c:	0800d820 	.word	0x0800d820
 8000940:	08000f95 	.word	0x08000f95
 8000944:	240002ec 	.word	0x240002ec
 8000948:	0800d844 	.word	0x0800d844
 800094c:	08000fc5 	.word	0x08000fc5
 8000950:	240002f0 	.word	0x240002f0
 8000954:	0800d868 	.word	0x0800d868
 8000958:	08000ff5 	.word	0x08000ff5
 800095c:	240002f4 	.word	0x240002f4
 8000960:	240002fc 	.word	0x240002fc
 8000964:	0800d7d0 	.word	0x0800d7d0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	; 0x70
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	224c      	movs	r2, #76	; 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00c f940 	bl	800cbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00c f93a 	bl	800cbfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000988:	2002      	movs	r0, #2
 800098a:	f002 f97b 	bl	8002c84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <SystemClock_Config+0xf4>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <SystemClock_Config+0xf4>)
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <SystemClock_Config+0xf4>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <SystemClock_Config+0xf8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <SystemClock_Config+0xf8>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <SystemClock_Config+0xf8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c4:	bf00      	nop
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <SystemClock_Config+0xf8>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d2:	d1f8      	bne.n	80009c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d8:	2301      	movs	r3, #1
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80009e8:	2320      	movs	r3, #32
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80009ec:	2381      	movs	r3, #129	; 0x81
 80009ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009f4:	2303      	movs	r3, #3
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f973 	bl	8002cf8 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a18:	f000 fb0c 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	233f      	movs	r3, #63	; 0x3f
 8000a1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fdb2 	bl	80035ac <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a4e:	f000 faf1 	bl	8001034 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3770      	adds	r7, #112	; 0x70
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800

08000a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <MX_I2C1_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <MX_I2C1_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000aa0:	f001 ffbc 	bl	8002a1c <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fac3 	bl	8001034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ab2:	f002 f84f 	bl	8002b54 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 faba 	bl	8001034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ac4:	f002 f891 	bl	8002bea <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fab1 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000094 	.word	0x24000094
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00707cbb 	.word	0x00707cbb

08000ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000aea:	4a29      	ldr	r2, [pc, #164]	; (8000b90 <MX_SPI2_Init+0xac>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000af0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000af8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000afc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b1a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI2_Init+0xa8>)
 8000b78:	f004 ff12 	bl	80059a0 <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000b82:	f000 fa57 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	240000e8 	.word	0x240000e8
 8000b90:	40003800 	.word	0x40003800

08000b94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09a      	sub	sp, #104	; 0x68
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	222c      	movs	r2, #44	; 0x2c
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00c f814 	bl	800cbfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd4:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bd6:	4a45      	ldr	r2, [pc, #276]	; (8000cec <MX_TIM1_Init+0x158>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bdc:	227f      	movs	r2, #127	; 0x7f
 8000bde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000be8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000bec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c00:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c02:	f005 f80c 	bl	8005c1e <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fa12 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4832      	ldr	r0, [pc, #200]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c1e:	f005 fca3 	bl	8006568 <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c28:	f000 fa04 	bl	8001034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c2c:	482e      	ldr	r0, [pc, #184]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c2e:	f005 fa1f 	bl	8006070 <HAL_TIM_PWM_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c38:	f000 f9fc 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c50:	f006 f9e0 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c5a:	f000 f9eb 	bl	8001034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8000c62:	f240 13df 	movw	r3, #479	; 0x1df
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000c86:	f005 fb5b 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000c90:	f000 f9d0 	bl	8001034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000cca:	f006 fa31 	bl	8007130 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000cd4:	f000 f9ae 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM1_Init+0x154>)
 8000cda:	f000 fb1d 	bl	8001318 <HAL_TIM_MspPostInit>

}
 8000cde:	bf00      	nop
 8000ce0:	3768      	adds	r7, #104	; 0x68
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000170 	.word	0x24000170
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d2c:	223f      	movs	r2, #63	; 0x3f
 8000d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d38:	f640 4234 	movw	r2, #3124	; 0xc34
 8000d3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4a:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d4c:	f004 ff67 	bl	8005c1e <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d56:	f000 f96d 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d68:	f005 fbfe 	bl	8006568 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d72:	f000 f95f 	bl	8001034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d78:	f005 f97a 	bl	8006070 <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d82:	f000 f957 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d86:	2320      	movs	r3, #32
 8000d88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000d96:	f006 f93d 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000da0:	f000 f948 	bl	8001034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	220c      	movs	r2, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000dbc:	f005 fac0 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dc6:	f000 f935 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM2_Init+0xe8>)
 8000dcc:	f000 faa4 	bl	8001318 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	; 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	240001bc 	.word	0x240001bc

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e02:	223f      	movs	r2, #63	; 0x3f
 8000e04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e22:	f004 fefc 	bl	8005c1e <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e2c:	f000 f902 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e3e:	f005 fb93 	bl	8006568 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e48:	f000 f8f4 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM3_Init+0x94>)
 8000e5a:	f006 f8db 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f000 f8e6 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000208 	.word	0x24000208
 8000e74:	40000400 	.word	0x40000400

08000e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <MX_USART1_UART_Init+0x94>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e84:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ec2:	f006 f9d1 	bl	8007268 <HAL_UART_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 f8b2 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ed4:	f008 fc9d 	bl	8009812 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ede:	f000 f8a9 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ee6:	f008 fcd2 	bl	800988e <HAL_UARTEx_SetRxFifoThreshold>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 f8a0 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ef6:	f008 fc53 	bl	80097a0 <HAL_UARTEx_DisableFifoMode>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f000 f898 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000254 	.word	0x24000254
 8000f0c:	40011000 	.word	0x40011000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_GPIO_Init+0x50>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	58024400 	.word	0x58024400

08000f64 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <PMT_init+0x28>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	f008 feba 	bl	8009cf0 <osEventFlagsWait>
	    //sample_pmt(pmt_data);
		pmt_seq++;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <PMT_init+0x2c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <PMT_init+0x2c>)
 8000f86:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f88:	e7f0      	b.n	8000f6c <PMT_init+0x8>
 8000f8a:	bf00      	nop
 8000f8c:	240002fc 	.word	0x240002fc
 8000f90:	240002f8 	.word	0x240002f8

08000f94 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <ERPA_init+0x28>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	f008 fea2 	bl	8009cf0 <osEventFlagsWait>
		erpa_seq++;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <ERPA_init+0x2c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <ERPA_init+0x2c>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000fb8:	e7f0      	b.n	8000f9c <ERPA_init+0x8>
 8000fba:	bf00      	nop
 8000fbc:	240002fc 	.word	0x240002fc
 8000fc0:	240002f9 	.word	0x240002f9

08000fc4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HK_init+0x28>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	f008 fe8a 	bl	8009cf0 <osEventFlagsWait>
		hk_seq++;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HK_init+0x2c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HK_init+0x2c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000fe8:	e7f0      	b.n	8000fcc <HK_init+0x8>
 8000fea:	bf00      	nop
 8000fec:	240002fc 	.word	0x240002fc
 8000ff0:	240002fa 	.word	0x240002fa

08000ff4 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4902      	ldr	r1, [pc, #8]	; (8001008 <UART_RX_init+0x14>)
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <UART_RX_init+0x18>)
 8001002:	f006 f981 	bl	8007308 <HAL_UART_Receive_IT>
 8001006:	e7f9      	b.n	8000ffc <UART_RX_init+0x8>
 8001008:	24000300 	.word	0x24000300
 800100c:	24000254 	.word	0x24000254

08001010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001022:	f000 fcdb 	bl	80019dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40001000 	.word	0x40001000

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>
	...

08001040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x38>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_MspInit+0x38>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_MspInit+0x38>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	210f      	movs	r1, #15
 8001068:	f06f 0001 	mvn.w	r0, #1
 800106c:	f000 fd9a 	bl	8001ba4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400

0800107c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0ba      	sub	sp, #232	; 0xe8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	22c0      	movs	r2, #192	; 0xc0
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f00b fdad 	bl	800cbfc <memset>
  if(hi2c->Instance==I2C1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_I2C_MspInit+0xc8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d146      	bne.n	800113a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ac:	f04f 0208 	mov.w	r2, #8
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fe40 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010ce:	f7ff ffb1 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_I2C_MspInit+0xcc>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_I2C_MspInit+0xcc>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_I2C_MspInit+0xcc>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110a:	2304      	movs	r3, #4
 800110c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <HAL_I2C_MspInit+0xd0>)
 8001118:	f001 fad0 	bl	80026bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_I2C_MspInit+0xcc>)
 800111e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_I2C_MspInit+0xcc>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_I2C_MspInit+0xcc>)
 800112e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	37e8      	adds	r7, #232	; 0xe8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40005400 	.word	0x40005400
 8001148:	58024400 	.word	0x58024400
 800114c:	58020400 	.word	0x58020400

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ba      	sub	sp, #232	; 0xe8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	22c0      	movs	r2, #192	; 0xc0
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00b fd43 	bl	800cbfc <memset>
  if(hspi->Instance==SPI2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a26      	ldr	r2, [pc, #152]	; (8001214 <HAL_SPI_MspInit+0xc4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d145      	bne.n	800120c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001180:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800118c:	2300      	movs	r3, #0
 800118e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fdd7 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80011a0:	f7ff ff48 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_SPI_MspInit+0xc8>)
 80011a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_SPI_MspInit+0xc8>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_SPI_MspInit+0xc8>)
 80011b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_SPI_MspInit+0xc8>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	4a13      	ldr	r2, [pc, #76]	; (8001218 <HAL_SPI_MspInit+0xc8>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_SPI_MspInit+0xc8>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011fa:	2305      	movs	r3, #5
 80011fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_SPI_MspInit+0xcc>)
 8001208:	f001 fa58 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	37e8      	adds	r7, #232	; 0xe8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40003800 	.word	0x40003800
 8001218:	58024400 	.word	0x58024400
 800121c:	58020400 	.word	0x58020400

08001220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a37      	ldr	r2, [pc, #220]	; (800130c <HAL_TIM_Base_MspInit+0xec>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12f      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 8001234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001238:	4a35      	ldr	r2, [pc, #212]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 8001244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2105      	movs	r1, #5
 8001254:	2018      	movs	r0, #24
 8001256:	f000 fca5 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800125a:	2018      	movs	r0, #24
 800125c:	f000 fcbc 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2105      	movs	r1, #5
 8001264:	2019      	movs	r0, #25
 8001266:	f000 fc9d 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800126a:	2019      	movs	r0, #25
 800126c:	f000 fcb4 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2105      	movs	r1, #5
 8001274:	201a      	movs	r0, #26
 8001276:	f000 fc95 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800127a:	201a      	movs	r0, #26
 800127c:	f000 fcac 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2105      	movs	r1, #5
 8001284:	201b      	movs	r0, #27
 8001286:	f000 fc8d 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800128a:	201b      	movs	r0, #27
 800128c:	f000 fca4 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001290:	e038      	b.n	8001304 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129a:	d117      	bne.n	80012cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 800129e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 80012ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2105      	movs	r1, #5
 80012be:	201c      	movs	r0, #28
 80012c0:	f000 fc70 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c4:	201c      	movs	r0, #28
 80012c6:	f000 fc87 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
}
 80012ca:	e01b      	b.n	8001304 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_TIM_Base_MspInit+0xf4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d116      	bne.n	8001304 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 80012d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_TIM_Base_MspInit+0xf0>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2105      	movs	r1, #5
 80012f8:	201d      	movs	r0, #29
 80012fa:	f000 fc53 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012fe:	201d      	movs	r0, #29
 8001300:	f000 fc6a 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010000 	.word	0x40010000
 8001310:	58024400 	.word	0x58024400
 8001314:	40000400 	.word	0x40000400

08001318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <HAL_TIM_MspPostInit+0xb8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d120      	bne.n	800137c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_TIM_MspPostInit+0xbc>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <HAL_TIM_MspPostInit+0xbc>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_TIM_MspPostInit+0xbc>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4818      	ldr	r0, [pc, #96]	; (80013d8 <HAL_TIM_MspPostInit+0xc0>)
 8001376:	f001 f9a1 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800137a:	e024      	b.n	80013c6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001384:	d11f      	bne.n	80013c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_TIM_MspPostInit+0xbc>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_TIM_MspPostInit+0xbc>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_MspPostInit+0xbc>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013b6:	2301      	movs	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_TIM_MspPostInit+0xc4>)
 80013c2:	f001 f97b 	bl	80026bc <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40010000 	.word	0x40010000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020000 	.word	0x58020000
 80013dc:	58020400 	.word	0x58020400

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ba      	sub	sp, #232	; 0xe8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	22c0      	movs	r2, #192	; 0xc0
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00b fbfb 	bl	800cbfc <memset>
  if(huart->Instance==USART1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <HAL_UART_MspInit+0xd8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d14e      	bne.n	80014ae <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001410:	f04f 0201 	mov.w	r2, #1
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fc8e 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001432:	f7ff fdff 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_UART_MspInit+0xdc>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_UART_MspInit+0xdc>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_UART_MspInit+0xdc>)
 8001448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_UART_MspInit+0xdc>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_UART_MspInit+0xdc>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_UART_MspInit+0xdc>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001472:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001496:	4619      	mov	r1, r3
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <HAL_UART_MspInit+0xe0>)
 800149a:	f001 f90f 	bl	80026bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2105      	movs	r1, #5
 80014a2:	2025      	movs	r0, #37	; 0x25
 80014a4:	f000 fb7e 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014a8:	2025      	movs	r0, #37	; 0x25
 80014aa:	f000 fb95 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	37e8      	adds	r7, #232	; 0xe8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40011000 	.word	0x40011000
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58020000 	.word	0x58020000

080014c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b090      	sub	sp, #64	; 0x40
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d827      	bhi.n	8001522 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014d2:	2200      	movs	r2, #0
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	2036      	movs	r0, #54	; 0x36
 80014d8:	f000 fb64 	bl	8001ba4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014dc:	2036      	movs	r0, #54	; 0x36
 80014de:	f000 fb7b 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014e2:	4a29      	ldr	r2, [pc, #164]	; (8001588 <HAL_InitTick+0xc4>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_InitTick+0xc8>)
 80014ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_InitTick+0xc8>)
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_InitTick+0xc8>)
 80014fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001506:	f107 0210 	add.w	r2, r7, #16
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fbd7 	bl	8003cc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	2b00      	cmp	r3, #0
 800151e:	d106      	bne.n	800152e <HAL_InitTick+0x6a>
 8001520:	e001      	b.n	8001526 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e02b      	b.n	800157e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001526:	f002 fba1 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 800152a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800152c:	e004      	b.n	8001538 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800152e:	f002 fb9d 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8001532:	4603      	mov	r3, r0
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_InitTick+0xcc>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9b      	lsrs	r3, r3, #18
 8001542:	3b01      	subs	r3, #1
 8001544:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_InitTick+0xd0>)
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_InitTick+0xd4>)
 800154a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_InitTick+0xd0>)
 800154e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001552:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_InitTick+0xd0>)
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_InitTick+0xd0>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_InitTick+0xd0>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <HAL_InitTick+0xd0>)
 8001568:	f004 fb59 	bl	8005c1e <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d104      	bne.n	800157c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001572:	4808      	ldr	r0, [pc, #32]	; (8001594 <HAL_InitTick+0xd0>)
 8001574:	f004 fbaa 	bl	8005ccc <HAL_TIM_Base_Start_IT>
 8001578:	4603      	mov	r3, r0
 800157a:	e000      	b.n	800157e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	3740      	adds	r7, #64	; 0x40
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24000008 	.word	0x24000008
 800158c:	58024400 	.word	0x58024400
 8001590:	431bde83 	.word	0x431bde83
 8001594:	24000364 	.word	0x24000364
 8001598:	40001000 	.word	0x40001000

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015a0:	e7fe      	b.n	80015a0 <NMI_Handler+0x4>

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM1_BRK_IRQHandler+0x10>)
 80015ce:	f004 fdb0 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000170 	.word	0x24000170

080015dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM1_UP_IRQHandler+0x10>)
 80015e2:	f004 fda6 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	24000170 	.word	0x24000170

080015f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM1_TRG_COM_IRQHandler+0x10>)
 80015f6:	f004 fd9c 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000170 	.word	0x24000170

08001604 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_CC_IRQHandler+0x10>)
 800160a:	f004 fd92 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24000170 	.word	0x24000170

08001618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM2_IRQHandler+0x10>)
 800161e:	f004 fd88 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	240001bc 	.word	0x240001bc

0800162c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM3_IRQHandler+0x10>)
 8001632:	f004 fd7e 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	24000208 	.word	0x24000208

08001640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <USART1_IRQHandler+0x10>)
 8001646:	f005 feab 	bl	80073a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	24000254 	.word	0x24000254

08001654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM6_DAC_IRQHandler+0x10>)
 800165a:	f004 fd6a 	bl	8006132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24000364 	.word	0x24000364

08001668 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <ITM_SendChar+0x48>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <ITM_SendChar+0x48>)
 8001678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <ITM_SendChar+0x4c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <ITM_SendChar+0x4c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800168a:	bf00      	nop
 800168c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f8      	beq.n	800168c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800169a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	6013      	str	r3, [r2, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000edfc 	.word	0xe000edfc
 80016b4:	e0000e00 	.word	0xe0000e00

080016b8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e00a      	b.n	80016e0 <_read+0x28>
		*ptr++ = __io_getchar();
 80016ca:	f3af 8000 	nop.w
 80016ce:	4601      	mov	r1, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <_read+0x12>
	}

	return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e009      	b.n	8001718 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffab 	bl	8001668 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf1      	blt.n	8001704 <_write+0x12>
	}
	return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_close>:

int _close(int file) {
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001752:	605a      	str	r2, [r3, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_isatty>:

int _isatty(int file) {
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
		errno = ENOMEM;
 80017c4:	f00b f9e2 	bl	800cb8c <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24080000 	.word	0x24080000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	240003b0 	.word	0x240003b0
 80017fc:	24004d18 	.word	0x24004d18

08001800 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <SystemInit+0xe4>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a36      	ldr	r2, [pc, #216]	; (80018e4 <SystemInit+0xe4>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <SystemInit+0xe8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	2b06      	cmp	r3, #6
 800181e:	d807      	bhi.n	8001830 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <SystemInit+0xe8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 030f 	bic.w	r3, r3, #15
 8001828:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <SystemInit+0xe8>)
 800182a:	f043 0307 	orr.w	r3, r3, #7
 800182e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <SystemInit+0xec>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <SystemInit+0xec>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <SystemInit+0xec>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <SystemInit+0xec>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4929      	ldr	r1, [pc, #164]	; (80018ec <SystemInit+0xec>)
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <SystemInit+0xf0>)
 800184a:	4013      	ands	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <SystemInit+0xe8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <SystemInit+0xe8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 030f 	bic.w	r3, r3, #15
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <SystemInit+0xe8>)
 8001864:	f043 0307 	orr.w	r3, r3, #7
 8001868:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <SystemInit+0xec>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <SystemInit+0xec>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <SystemInit+0xec>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <SystemInit+0xec>)
 800187e:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <SystemInit+0xf4>)
 8001880:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <SystemInit+0xec>)
 8001884:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <SystemInit+0xf8>)
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <SystemInit+0xec>)
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <SystemInit+0xfc>)
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <SystemInit+0xec>)
 8001890:	2200      	movs	r2, #0
 8001892:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <SystemInit+0xec>)
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <SystemInit+0xfc>)
 8001898:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <SystemInit+0xec>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <SystemInit+0xec>)
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <SystemInit+0xfc>)
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <SystemInit+0xec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <SystemInit+0xec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <SystemInit+0xec>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <SystemInit+0xec>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <SystemInit+0x100>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <SystemInit+0x104>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018ca:	d202      	bcs.n	80018d2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <SystemInit+0x108>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <SystemInit+0x10c>)
 80018d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	52002000 	.word	0x52002000
 80018ec:	58024400 	.word	0x58024400
 80018f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80018f4:	02020200 	.word	0x02020200
 80018f8:	01ff0000 	.word	0x01ff0000
 80018fc:	01010280 	.word	0x01010280
 8001900:	5c001000 	.word	0x5c001000
 8001904:	ffff0000 	.word	0xffff0000
 8001908:	51008108 	.word	0x51008108
 800190c:	52004000 	.word	0x52004000

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001914:	f7ff ff74 	bl	8001800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191a:	490d      	ldr	r1, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001930:	4c0a      	ldr	r4, [pc, #40]	; (800195c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f00b f92b 	bl	800cb98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7fe ffa1 	bl	8000888 <main>
  bx  lr
 8001946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800194c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001950:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001954:	0800d938 	.word	0x0800d938
  ldr r2, =_sbss
 8001958:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800195c:	24004d18 	.word	0x24004d18

08001960 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC3_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 f90f 	bl	8001b8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001970:	f001 ffd2 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_Init+0x68>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	4913      	ldr	r1, [pc, #76]	; (80019d0 <HAL_Init+0x6c>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_Init+0x68>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_Init+0x6c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_Init+0x70>)
 80019a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_Init+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ae:	200f      	movs	r0, #15
 80019b0:	f7ff fd88 	bl	80014c4 <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e002      	b.n	80019c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019be:	f7ff fb3f 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400
 80019d0:	0800d88c 	.word	0x0800d88c
 80019d4:	24000004 	.word	0x24000004
 80019d8:	24000000 	.word	0x24000000

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	2400000c 	.word	0x2400000c
 8001a00:	240003b4 	.word	0x240003b4

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	240003b4 	.word	0x240003b4

08001a1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetREVID+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0c1b      	lsrs	r3, r3, #16
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	5c001000 	.word	0x5c001000

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <__NVIC_SetPriorityGrouping+0x40>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x40>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00
 8001a78:	05fa0000 	.word	0x05fa0000

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff4c 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb2:	f7ff ff63 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f7ff ffb3 	bl	8001b28 <NVIC_EncodePriority>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff82 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff56 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ff02 	bl	8001a04 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e2dc      	b.n	80021c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e2cd      	b.n	80021c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a76      	ldr	r2, [pc, #472]	; (8001e08 <HAL_DMA_Abort+0x214>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04a      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a74      	ldr	r2, [pc, #464]	; (8001e0c <HAL_DMA_Abort+0x218>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d045      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a73      	ldr	r2, [pc, #460]	; (8001e10 <HAL_DMA_Abort+0x21c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d040      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a71      	ldr	r2, [pc, #452]	; (8001e14 <HAL_DMA_Abort+0x220>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a70      	ldr	r2, [pc, #448]	; (8001e18 <HAL_DMA_Abort+0x224>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d036      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6e      	ldr	r2, [pc, #440]	; (8001e1c <HAL_DMA_Abort+0x228>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6d      	ldr	r2, [pc, #436]	; (8001e20 <HAL_DMA_Abort+0x22c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d02c      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6b      	ldr	r2, [pc, #428]	; (8001e24 <HAL_DMA_Abort+0x230>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d027      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_DMA_Abort+0x234>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a68      	ldr	r2, [pc, #416]	; (8001e2c <HAL_DMA_Abort+0x238>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01d      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a67      	ldr	r2, [pc, #412]	; (8001e30 <HAL_DMA_Abort+0x23c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d018      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a65      	ldr	r2, [pc, #404]	; (8001e34 <HAL_DMA_Abort+0x240>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a64      	ldr	r2, [pc, #400]	; (8001e38 <HAL_DMA_Abort+0x244>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a62      	ldr	r2, [pc, #392]	; (8001e3c <HAL_DMA_Abort+0x248>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a61      	ldr	r2, [pc, #388]	; (8001e40 <HAL_DMA_Abort+0x24c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_DMA_Abort+0xd6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5f      	ldr	r2, [pc, #380]	; (8001e44 <HAL_DMA_Abort+0x250>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_DMA_Abort+0xda>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_DMA_Abort+0xdc>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 021e 	bic.w	r2, r2, #30
 8001ce2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e00a      	b.n	8001d12 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 020e 	bic.w	r2, r2, #14
 8001d0a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3c      	ldr	r2, [pc, #240]	; (8001e08 <HAL_DMA_Abort+0x214>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d072      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <HAL_DMA_Abort+0x218>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d06d      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <HAL_DMA_Abort+0x21c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d068      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <HAL_DMA_Abort+0x220>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d063      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a36      	ldr	r2, [pc, #216]	; (8001e18 <HAL_DMA_Abort+0x224>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_DMA_Abort+0x228>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d059      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <HAL_DMA_Abort+0x22c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d054      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_DMA_Abort+0x230>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d04f      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_DMA_Abort+0x234>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d04a      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <HAL_DMA_Abort+0x238>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d045      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_DMA_Abort+0x23c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d040      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2b      	ldr	r2, [pc, #172]	; (8001e34 <HAL_DMA_Abort+0x240>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d03b      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HAL_DMA_Abort+0x244>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d036      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <HAL_DMA_Abort+0x248>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d031      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_DMA_Abort+0x24c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d02c      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_DMA_Abort+0x250>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d027      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_DMA_Abort+0x254>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <HAL_DMA_Abort+0x258>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01d      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_DMA_Abort+0x25c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d018      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_DMA_Abort+0x260>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_DMA_Abort+0x264>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00e      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_DMA_Abort+0x268>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_DMA_Abort+0x26c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_Abort+0x20e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_DMA_Abort+0x270>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d132      	bne.n	8001e68 <HAL_DMA_Abort+0x274>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e031      	b.n	8001e6a <HAL_DMA_Abort+0x276>
 8001e06:	bf00      	nop
 8001e08:	40020010 	.word	0x40020010
 8001e0c:	40020028 	.word	0x40020028
 8001e10:	40020040 	.word	0x40020040
 8001e14:	40020058 	.word	0x40020058
 8001e18:	40020070 	.word	0x40020070
 8001e1c:	40020088 	.word	0x40020088
 8001e20:	400200a0 	.word	0x400200a0
 8001e24:	400200b8 	.word	0x400200b8
 8001e28:	40020410 	.word	0x40020410
 8001e2c:	40020428 	.word	0x40020428
 8001e30:	40020440 	.word	0x40020440
 8001e34:	40020458 	.word	0x40020458
 8001e38:	40020470 	.word	0x40020470
 8001e3c:	40020488 	.word	0x40020488
 8001e40:	400204a0 	.word	0x400204a0
 8001e44:	400204b8 	.word	0x400204b8
 8001e48:	58025408 	.word	0x58025408
 8001e4c:	5802541c 	.word	0x5802541c
 8001e50:	58025430 	.word	0x58025430
 8001e54:	58025444 	.word	0x58025444
 8001e58:	58025458 	.word	0x58025458
 8001e5c:	5802546c 	.word	0x5802546c
 8001e60:	58025480 	.word	0x58025480
 8001e64:	58025494 	.word	0x58025494
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6d      	ldr	r2, [pc, #436]	; (8002038 <HAL_DMA_Abort+0x444>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d04a      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6b      	ldr	r2, [pc, #428]	; (800203c <HAL_DMA_Abort+0x448>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d045      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_DMA_Abort+0x44c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d040      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a68      	ldr	r2, [pc, #416]	; (8002044 <HAL_DMA_Abort+0x450>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d03b      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a67      	ldr	r2, [pc, #412]	; (8002048 <HAL_DMA_Abort+0x454>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d036      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	; (800204c <HAL_DMA_Abort+0x458>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d031      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a64      	ldr	r2, [pc, #400]	; (8002050 <HAL_DMA_Abort+0x45c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d02c      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a62      	ldr	r2, [pc, #392]	; (8002054 <HAL_DMA_Abort+0x460>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d027      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a61      	ldr	r2, [pc, #388]	; (8002058 <HAL_DMA_Abort+0x464>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d022      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5f      	ldr	r2, [pc, #380]	; (800205c <HAL_DMA_Abort+0x468>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01d      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	; (8002060 <HAL_DMA_Abort+0x46c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d018      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_DMA_Abort+0x470>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5b      	ldr	r2, [pc, #364]	; (8002068 <HAL_DMA_Abort+0x474>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00e      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a59      	ldr	r2, [pc, #356]	; (800206c <HAL_DMA_Abort+0x478>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d009      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_DMA_Abort+0x47c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d004      	beq.n	8001f1e <HAL_DMA_Abort+0x32a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_DMA_Abort+0x480>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <HAL_DMA_Abort+0x33c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e007      	b.n	8001f40 <HAL_DMA_Abort+0x34c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f40:	e013      	b.n	8001f6a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f42:	f7ff fd5f 	bl	8001a04 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d90c      	bls.n	8001f6a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e12d      	b.n	80021c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e5      	bne.n	8001f42 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <HAL_DMA_Abort+0x444>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04a      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_DMA_Abort+0x448>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d045      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <HAL_DMA_Abort+0x44c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d040      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_DMA_Abort+0x450>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d03b      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a29      	ldr	r2, [pc, #164]	; (8002048 <HAL_DMA_Abort+0x454>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d036      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_DMA_Abort+0x458>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d031      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a26      	ldr	r2, [pc, #152]	; (8002050 <HAL_DMA_Abort+0x45c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d02c      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a24      	ldr	r2, [pc, #144]	; (8002054 <HAL_DMA_Abort+0x460>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d027      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_DMA_Abort+0x464>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <HAL_DMA_Abort+0x468>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a20      	ldr	r2, [pc, #128]	; (8002060 <HAL_DMA_Abort+0x46c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_DMA_Abort+0x470>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_DMA_Abort+0x474>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_DMA_Abort+0x478>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_DMA_Abort+0x47c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d004      	beq.n	8002016 <HAL_DMA_Abort+0x422>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_DMA_Abort+0x480>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_DMA_Abort+0x426>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_DMA_Abort+0x428>
 800201a:	2300      	movs	r3, #0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02b      	beq.n	8002078 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	223f      	movs	r2, #63	; 0x3f
 8002030:	409a      	lsls	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	e02a      	b.n	800208e <HAL_DMA_Abort+0x49a>
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2201      	movs	r2, #1
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_DMA_Abort+0x5dc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d072      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <HAL_DMA_Abort+0x5e0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d06d      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a4c      	ldr	r2, [pc, #304]	; (80021d8 <HAL_DMA_Abort+0x5e4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d068      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_DMA_Abort+0x5e8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d063      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_DMA_Abort+0x5ec>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d05e      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a47      	ldr	r2, [pc, #284]	; (80021e4 <HAL_DMA_Abort+0x5f0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d059      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a46      	ldr	r2, [pc, #280]	; (80021e8 <HAL_DMA_Abort+0x5f4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d054      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_DMA_Abort+0x5f8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d04f      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a43      	ldr	r2, [pc, #268]	; (80021f0 <HAL_DMA_Abort+0x5fc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04a      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a41      	ldr	r2, [pc, #260]	; (80021f4 <HAL_DMA_Abort+0x600>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d045      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a40      	ldr	r2, [pc, #256]	; (80021f8 <HAL_DMA_Abort+0x604>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d040      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3e      	ldr	r2, [pc, #248]	; (80021fc <HAL_DMA_Abort+0x608>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d03b      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <HAL_DMA_Abort+0x60c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d036      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_DMA_Abort+0x610>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d031      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_DMA_Abort+0x614>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d02c      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a38      	ldr	r2, [pc, #224]	; (800220c <HAL_DMA_Abort+0x618>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d027      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_DMA_Abort+0x61c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_DMA_Abort+0x620>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01d      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_DMA_Abort+0x624>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_DMA_Abort+0x628>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_DMA_Abort+0x62c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <HAL_DMA_Abort+0x630>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_DMA_Abort+0x634>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_DMA_Abort+0x58a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_DMA_Abort+0x638>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_DMA_Abort+0x58e>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_DMA_Abort+0x590>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d015      	beq.n	80021b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002190:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40020010 	.word	0x40020010
 80021d4:	40020028 	.word	0x40020028
 80021d8:	40020040 	.word	0x40020040
 80021dc:	40020058 	.word	0x40020058
 80021e0:	40020070 	.word	0x40020070
 80021e4:	40020088 	.word	0x40020088
 80021e8:	400200a0 	.word	0x400200a0
 80021ec:	400200b8 	.word	0x400200b8
 80021f0:	40020410 	.word	0x40020410
 80021f4:	40020428 	.word	0x40020428
 80021f8:	40020440 	.word	0x40020440
 80021fc:	40020458 	.word	0x40020458
 8002200:	40020470 	.word	0x40020470
 8002204:	40020488 	.word	0x40020488
 8002208:	400204a0 	.word	0x400204a0
 800220c:	400204b8 	.word	0x400204b8
 8002210:	58025408 	.word	0x58025408
 8002214:	5802541c 	.word	0x5802541c
 8002218:	58025430 	.word	0x58025430
 800221c:	58025444 	.word	0x58025444
 8002220:	58025458 	.word	0x58025458
 8002224:	5802546c 	.word	0x5802546c
 8002228:	58025480 	.word	0x58025480
 800222c:	58025494 	.word	0x58025494

08002230 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e237      	b.n	80026b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d004      	beq.n	8002258 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e22c      	b.n	80026b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a5c      	ldr	r2, [pc, #368]	; (80023d0 <HAL_DMA_Abort_IT+0x1a0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04a      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_DMA_Abort_IT+0x1a4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d045      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a59      	ldr	r2, [pc, #356]	; (80023d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d040      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_DMA_Abort_IT+0x1ac>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d03b      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <HAL_DMA_Abort_IT+0x1b0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d036      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a55      	ldr	r2, [pc, #340]	; (80023e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d031      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a53      	ldr	r2, [pc, #332]	; (80023e8 <HAL_DMA_Abort_IT+0x1b8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02c      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_DMA_Abort_IT+0x1bc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d027      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <HAL_DMA_Abort_IT+0x1c0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d022      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_DMA_Abort_IT+0x1c4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d01d      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a4d      	ldr	r2, [pc, #308]	; (80023f8 <HAL_DMA_Abort_IT+0x1c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d018      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <HAL_DMA_Abort_IT+0x1cc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_DMA_Abort_IT+0x1d0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_DMA_Abort_IT+0x1d4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a47      	ldr	r2, [pc, #284]	; (8002408 <HAL_DMA_Abort_IT+0x1d8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_DMA_Abort_IT+0xc8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a46      	ldr	r2, [pc, #280]	; (800240c <HAL_DMA_Abort_IT+0x1dc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_DMA_Abort_IT+0xcc>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_DMA_Abort_IT+0xce>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8086 	beq.w	8002410 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2204      	movs	r2, #4
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <HAL_DMA_Abort_IT+0x1a0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d04a      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_DMA_Abort_IT+0x1a4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d045      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2c      	ldr	r2, [pc, #176]	; (80023d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d040      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <HAL_DMA_Abort_IT+0x1ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d03b      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <HAL_DMA_Abort_IT+0x1b0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d036      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d031      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_DMA_Abort_IT+0x1b8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d02c      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_DMA_Abort_IT+0x1bc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d027      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_DMA_Abort_IT+0x1c0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d022      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMA_Abort_IT+0x1c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d01d      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <HAL_DMA_Abort_IT+0x1c8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d018      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_DMA_Abort_IT+0x1cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_DMA_Abort_IT+0x1d0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00e      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_DMA_Abort_IT+0x1d4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_DMA_Abort_IT+0x1d8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_DMA_Abort_IT+0x17c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_DMA_Abort_IT+0x1dc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d108      	bne.n	80023be <HAL_DMA_Abort_IT+0x18e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e178      	b.n	80026b0 <HAL_DMA_Abort_IT+0x480>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e16f      	b.n	80026b0 <HAL_DMA_Abort_IT+0x480>
 80023d0:	40020010 	.word	0x40020010
 80023d4:	40020028 	.word	0x40020028
 80023d8:	40020040 	.word	0x40020040
 80023dc:	40020058 	.word	0x40020058
 80023e0:	40020070 	.word	0x40020070
 80023e4:	40020088 	.word	0x40020088
 80023e8:	400200a0 	.word	0x400200a0
 80023ec:	400200b8 	.word	0x400200b8
 80023f0:	40020410 	.word	0x40020410
 80023f4:	40020428 	.word	0x40020428
 80023f8:	40020440 	.word	0x40020440
 80023fc:	40020458 	.word	0x40020458
 8002400:	40020470 	.word	0x40020470
 8002404:	40020488 	.word	0x40020488
 8002408:	400204a0 	.word	0x400204a0
 800240c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 020e 	bic.w	r2, r2, #14
 800241e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6c      	ldr	r2, [pc, #432]	; (80025d8 <HAL_DMA_Abort_IT+0x3a8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d04a      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6b      	ldr	r2, [pc, #428]	; (80025dc <HAL_DMA_Abort_IT+0x3ac>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d045      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_DMA_Abort_IT+0x3b0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d040      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d03b      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_DMA_Abort_IT+0x3b8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d036      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a65      	ldr	r2, [pc, #404]	; (80025ec <HAL_DMA_Abort_IT+0x3bc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d031      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a63      	ldr	r2, [pc, #396]	; (80025f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d02c      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a62      	ldr	r2, [pc, #392]	; (80025f4 <HAL_DMA_Abort_IT+0x3c4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d027      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a60      	ldr	r2, [pc, #384]	; (80025f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d022      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5f      	ldr	r2, [pc, #380]	; (80025fc <HAL_DMA_Abort_IT+0x3cc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d01d      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a5d      	ldr	r2, [pc, #372]	; (8002600 <HAL_DMA_Abort_IT+0x3d0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d018      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <HAL_DMA_Abort_IT+0x3d4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a5a      	ldr	r2, [pc, #360]	; (8002608 <HAL_DMA_Abort_IT+0x3d8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00e      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a59      	ldr	r2, [pc, #356]	; (800260c <HAL_DMA_Abort_IT+0x3dc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a57      	ldr	r2, [pc, #348]	; (8002610 <HAL_DMA_Abort_IT+0x3e0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x290>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a56      	ldr	r2, [pc, #344]	; (8002614 <HAL_DMA_Abort_IT+0x3e4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <HAL_DMA_Abort_IT+0x2a2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_DMA_Abort_IT+0x2b2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_DMA_Abort_IT+0x3a8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d072      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_DMA_Abort_IT+0x3ac>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d06d      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_DMA_Abort_IT+0x3b0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d068      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d063      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <HAL_DMA_Abort_IT+0x3b8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d05e      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a34      	ldr	r2, [pc, #208]	; (80025ec <HAL_DMA_Abort_IT+0x3bc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d059      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d054      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <HAL_DMA_Abort_IT+0x3c4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d04f      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04a      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <HAL_DMA_Abort_IT+0x3cc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d045      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <HAL_DMA_Abort_IT+0x3d0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d040      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_DMA_Abort_IT+0x3d4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d03b      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <HAL_DMA_Abort_IT+0x3d8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d036      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a28      	ldr	r2, [pc, #160]	; (800260c <HAL_DMA_Abort_IT+0x3dc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d031      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_DMA_Abort_IT+0x3e0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d02c      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_DMA_Abort_IT+0x3e4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d027      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_DMA_Abort_IT+0x3e8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_DMA_Abort_IT+0x3ec>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01d      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_DMA_Abort_IT+0x3f0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d018      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_DMA_Abort_IT+0x3f4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_DMA_Abort_IT+0x3f8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_DMA_Abort_IT+0x3fc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_DMA_Abort_IT+0x400>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x3a2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_DMA_Abort_IT+0x404>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d132      	bne.n	8002638 <HAL_DMA_Abort_IT+0x408>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e031      	b.n	800263a <HAL_DMA_Abort_IT+0x40a>
 80025d6:	bf00      	nop
 80025d8:	40020010 	.word	0x40020010
 80025dc:	40020028 	.word	0x40020028
 80025e0:	40020040 	.word	0x40020040
 80025e4:	40020058 	.word	0x40020058
 80025e8:	40020070 	.word	0x40020070
 80025ec:	40020088 	.word	0x40020088
 80025f0:	400200a0 	.word	0x400200a0
 80025f4:	400200b8 	.word	0x400200b8
 80025f8:	40020410 	.word	0x40020410
 80025fc:	40020428 	.word	0x40020428
 8002600:	40020440 	.word	0x40020440
 8002604:	40020458 	.word	0x40020458
 8002608:	40020470 	.word	0x40020470
 800260c:	40020488 	.word	0x40020488
 8002610:	400204a0 	.word	0x400204a0
 8002614:	400204b8 	.word	0x400204b8
 8002618:	58025408 	.word	0x58025408
 800261c:	5802541c 	.word	0x5802541c
 8002620:	58025430 	.word	0x58025430
 8002624:	58025444 	.word	0x58025444
 8002628:	58025458 	.word	0x58025458
 800262c:	5802546c 	.word	0x5802546c
 8002630:	58025480 	.word	0x58025480
 8002634:	58025494 	.word	0x58025494
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800266c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002684:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800268e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026ca:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <HAL_GPIO_Init+0x234>)
 80026cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ce:	e194      	b.n	80029fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8186 	beq.w	80029f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d005      	beq.n	8002700 <HAL_GPIO_Init+0x44>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d130      	bne.n	8002762 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002736:	2201      	movs	r2, #1
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0201 	and.w	r2, r3, #1
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b03      	cmp	r3, #3
 800276c:	d017      	beq.n	800279e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d123      	bne.n	80027f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80e0 	beq.w	80029f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_GPIO_Init+0x238>)
 8002836:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800283a:	4a2e      	ldr	r2, [pc, #184]	; (80028f4 <HAL_GPIO_Init+0x238>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_GPIO_Init+0x238>)
 8002846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_GPIO_Init+0x23c>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_GPIO_Init+0x240>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d052      	beq.n	8002924 <HAL_GPIO_Init+0x268>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_GPIO_Init+0x244>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_GPIO_Init+0x22e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <HAL_GPIO_Init+0x248>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x22a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_GPIO_Init+0x24c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x226>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <HAL_GPIO_Init+0x250>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x222>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_GPIO_Init+0x254>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x21e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <HAL_GPIO_Init+0x258>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x21a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_GPIO_Init+0x25c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x216>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_GPIO_Init+0x260>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x212>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_GPIO_Init+0x264>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x20e>
 80028c6:	2309      	movs	r3, #9
 80028c8:	e02d      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028ca:	230a      	movs	r3, #10
 80028cc:	e02b      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e029      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e027      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e025      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028da:	2305      	movs	r3, #5
 80028dc:	e023      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028de:	2304      	movs	r3, #4
 80028e0:	e021      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e01f      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e01d      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e01b      	b.n	8002926 <HAL_GPIO_Init+0x26a>
 80028ee:	bf00      	nop
 80028f0:	58000080 	.word	0x58000080
 80028f4:	58024400 	.word	0x58024400
 80028f8:	58000400 	.word	0x58000400
 80028fc:	58020000 	.word	0x58020000
 8002900:	58020400 	.word	0x58020400
 8002904:	58020800 	.word	0x58020800
 8002908:	58020c00 	.word	0x58020c00
 800290c:	58021000 	.word	0x58021000
 8002910:	58021400 	.word	0x58021400
 8002914:	58021800 	.word	0x58021800
 8002918:	58021c00 	.word	0x58021c00
 800291c:	58022000 	.word	0x58022000
 8002920:	58022400 	.word	0x58022400
 8002924:	2300      	movs	r3, #0
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4093      	lsls	r3, r2
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002936:	4938      	ldr	r1, [pc, #224]	; (8002a18 <HAL_GPIO_Init+0x35c>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800296a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f ae63 	bne.w	80026d0 <HAL_GPIO_Init+0x14>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
 8002a0e:	3724      	adds	r7, #36	; 0x24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	58000400 	.word	0x58000400

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e08b      	b.n	8002b46 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fb1a 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e006      	b.n	8002aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d108      	bne.n	8002abe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e007      	b.n	8002ace <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_I2C_Init+0x134>)
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	02008000 	.word	0x02008000

08002b54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d138      	bne.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e032      	b.n	8002bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d139      	bne.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e033      	b.n	8002c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2224      	movs	r2, #36	; 0x24
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d00a      	beq.n	8002cae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e01f      	b.n	8002cea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e01d      	b.n	8002cea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cbe:	f7fe fea1 	bl	8001a04 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cc4:	e009      	b.n	8002cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cc6:	f7fe fe9d 	bl	8001a04 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd4:	d901      	bls.n	8002cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	58024800 	.word	0x58024800

08002cf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	; 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f000 bc48 	b.w	800359c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8088 	beq.w	8002e2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1a:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d24:	4b96      	ldr	r3, [pc, #600]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCC_OscConfig+0x48>
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d111      	bne.n	8002d5a <HAL_RCC_OscConfig+0x62>
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d06d      	beq.n	8002e28 <HAL_RCC_OscConfig+0x130>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d169      	bne.n	8002e28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f000 bc21 	b.w	800359c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x7a>
 8002d64:	4b86      	ldr	r3, [pc, #536]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a85      	ldr	r2, [pc, #532]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x9c>
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a80      	ldr	r2, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b7e      	ldr	r3, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7d      	ldr	r2, [pc, #500]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0xc0>
 8002d9e:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a74      	ldr	r2, [pc, #464]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd8>
 8002db8:	4b71      	ldr	r3, [pc, #452]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a70      	ldr	r2, [pc, #448]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b6e      	ldr	r3, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6d      	ldr	r2, [pc, #436]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fe14 	bl	8001a04 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe fe10 	bl	8001a04 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e3d4      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df2:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe8>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fe00 	bl	8001a04 <HAL_GetTick>
 8002e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fdfc 	bl	8001a04 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e3c0      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e1a:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x110>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80ca 	beq.w	8002fcc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e38:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_RCC_OscConfig+0x166>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	d156      	bne.n	8002f02 <HAL_RCC_OscConfig+0x20a>
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d151      	bne.n	8002f02 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5e:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e392      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e76:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0219 	bic.w	r2, r3, #25
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	493f      	ldr	r1, [pc, #252]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fdbc 	bl	8001a04 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe fdb8 	bl	8001a04 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e37c      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	f7fe fdb5 	bl	8001a1c <HAL_GetREVID>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d817      	bhi.n	8002eec <HAL_RCC_OscConfig+0x1f4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d108      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x1de>
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ecc:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed4:	e07a      	b.n	8002fcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	031b      	lsls	r3, r3, #12
 8002ee4:	4926      	ldr	r1, [pc, #152]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eea:	e06f      	b.n	8002fcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	4921      	ldr	r1, [pc, #132]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f00:	e064      	b.n	8002fcc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d047      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0219 	bic.w	r2, r3, #25
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	491a      	ldr	r1, [pc, #104]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fd72 	bl	8001a04 <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fe fd6e 	bl	8001a04 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e332      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	f7fe fd6b 	bl	8001a1c <HAL_GetREVID>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d819      	bhi.n	8002f84 <HAL_RCC_OscConfig+0x28c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d108      	bne.n	8002f6a <HAL_RCC_OscConfig+0x272>
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f66:	6053      	str	r3, [r2, #4]
 8002f68:	e030      	b.n	8002fcc <HAL_RCC_OscConfig+0x2d4>
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	031b      	lsls	r3, r3, #12
 8002f78:	4901      	ldr	r1, [pc, #4]	; (8002f80 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
 8002f7e:	e025      	b.n	8002fcc <HAL_RCC_OscConfig+0x2d4>
 8002f80:	58024400 	.word	0x58024400
 8002f84:	4b9a      	ldr	r3, [pc, #616]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	4997      	ldr	r1, [pc, #604]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	e018      	b.n	8002fcc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b95      	ldr	r3, [pc, #596]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a94      	ldr	r2, [pc, #592]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fd2d 	bl	8001a04 <HAL_GetTick>
 8002faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe fd29 	bl	8001a04 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e2ed      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fc0:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a9 	beq.w	800312c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b85      	ldr	r3, [pc, #532]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fe4:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d007      	beq.n	8003000 <HAL_RCC_OscConfig+0x308>
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b18      	cmp	r3, #24
 8002ff4:	d13a      	bne.n	800306c <HAL_RCC_OscConfig+0x374>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d135      	bne.n	800306c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003000:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_OscConfig+0x320>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e2c1      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003018:	f7fe fd00 	bl	8001a1c <HAL_GetREVID>
 800301c:	4603      	mov	r3, r0
 800301e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003022:	4293      	cmp	r3, r2
 8003024:	d817      	bhi.n	8003056 <HAL_RCC_OscConfig+0x35e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d108      	bne.n	8003040 <HAL_RCC_OscConfig+0x348>
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003036:	4a6e      	ldr	r2, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800303c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800303e:	e075      	b.n	800312c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003040:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	069b      	lsls	r3, r3, #26
 800304e:	4968      	ldr	r1, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003054:	e06a      	b.n	800312c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	4962      	ldr	r1, [pc, #392]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800306a:	e05f      	b.n	800312c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d042      	beq.n	80030fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003074:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5d      	ldr	r2, [pc, #372]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 800307a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fcc0 	bl	8001a04 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003088:	f7fe fcbc 	bl	8001a04 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e280      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800309a:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030a6:	f7fe fcb9 	bl	8001a1c <HAL_GetREVID>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d817      	bhi.n	80030e4 <HAL_RCC_OscConfig+0x3ec>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d108      	bne.n	80030ce <HAL_RCC_OscConfig+0x3d6>
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030c4:	4a4a      	ldr	r2, [pc, #296]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030ca:	6053      	str	r3, [r2, #4]
 80030cc:	e02e      	b.n	800312c <HAL_RCC_OscConfig+0x434>
 80030ce:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	4944      	ldr	r1, [pc, #272]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
 80030e2:	e023      	b.n	800312c <HAL_RCC_OscConfig+0x434>
 80030e4:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	493f      	ldr	r1, [pc, #252]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
 80030f8:	e018      	b.n	800312c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a3c      	ldr	r2, [pc, #240]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe fc7d 	bl	8001a04 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800310e:	f7fe fc79 	bl	8001a04 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e23d      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003120:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d036      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d019      	beq.n	8003174 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fc5a 	bl	8001a04 <HAL_GetTick>
 8003150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fe fc56 	bl	8001a04 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e21a      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x45c>
 8003172:	e018      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fc40 	bl	8001a04 <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe fc3c 	bl	8001a04 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e200      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d039      	beq.n	8003226 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80031c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fc1d 	bl	8001a04 <HAL_GetTick>
 80031ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ce:	f7fe fc19 	bl	8001a04 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1dd      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x4d6>
 80031ec:	e01b      	b.n	8003226 <HAL_RCC_OscConfig+0x52e>
 80031ee:	bf00      	nop
 80031f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031f4:	4b9b      	ldr	r3, [pc, #620]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9a      	ldr	r2, [pc, #616]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80031fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003200:	f7fe fc00 	bl	8001a04 <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003208:	f7fe fbfc 	bl	8001a04 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1c0      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800321a:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8081 	beq.w	8003336 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003234:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_RCC_OscConfig+0x770>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a8b      	ldr	r2, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x770>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003240:	f7fe fbe0 	bl	8001a04 <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe fbdc 	bl	8001a04 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1a0      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800325a:	4b83      	ldr	r3, [pc, #524]	; (8003468 <HAL_RCC_OscConfig+0x770>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x584>
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e02d      	b.n	80032d8 <HAL_RCC_OscConfig+0x5e0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x5a6>
 8003284:	4b77      	ldr	r3, [pc, #476]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a76      	ldr	r2, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b74      	ldr	r3, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a73      	ldr	r2, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x5e0>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c8>
 80032a6:	4b6f      	ldr	r3, [pc, #444]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a6e      	ldr	r2, [pc, #440]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
 80032b2:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a6b      	ldr	r2, [pc, #428]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x5e0>
 80032c0:	4b68      	ldr	r3, [pc, #416]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a67      	ldr	r2, [pc, #412]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a64      	ldr	r2, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fb90 	bl	8001a04 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fb8c 	bl	8001a04 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e14e      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032fe:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCC_OscConfig+0x5f0>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fb7a 	bl	8001a04 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe fb76 	bl	8001a04 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e138      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800332a:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 812d 	beq.w	800359a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003348:	2b18      	cmp	r3, #24
 800334a:	f000 80bd 	beq.w	80034c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b02      	cmp	r3, #2
 8003354:	f040 809e 	bne.w	8003494 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a41      	ldr	r2, [pc, #260]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fb4e 	bl	8001a04 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fb4a 	bl	8001a04 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e10e      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800337e:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800338c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x774>)
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	430a      	orrs	r2, r1
 800339e:	4931      	ldr	r1, [pc, #196]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	628b      	str	r3, [r1, #40]	; 0x28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	3b01      	subs	r3, #1
 80033aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	3b01      	subs	r3, #1
 80033b4:	025b      	lsls	r3, r3, #9
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	3b01      	subs	r3, #1
 80033ce:	061b      	lsls	r3, r3, #24
 80033d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033d4:	4923      	ldr	r1, [pc, #140]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	4a21      	ldr	r2, [pc, #132]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033e6:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ea:	4b21      	ldr	r3, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x778>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033f2:	00d2      	lsls	r2, r2, #3
 80033f4:	491b      	ldr	r1, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f023 020c 	bic.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800340c:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	f023 0202 	bic.w	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	4912      	ldr	r1, [pc, #72]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_RCC_OscConfig+0x76c>)
 8003454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fad3 	bl	8001a04 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003460:	e011      	b.n	8003486 <HAL_RCC_OscConfig+0x78e>
 8003462:	bf00      	nop
 8003464:	58024400 	.word	0x58024400
 8003468:	58024800 	.word	0x58024800
 800346c:	fffffc0c 	.word	0xfffffc0c
 8003470:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fac6 	bl	8001a04 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e08a      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x77c>
 8003492:	e082      	b.n	800359a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003494:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 800349a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fab0 	bl	8001a04 <HAL_GetTick>
 80034a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe faac 	bl	8001a04 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e070      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ba:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x7b0>
 80034c6:	e068      	b.n	800359a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034ce:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d031      	beq.n	8003540 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0203 	and.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d12a      	bne.n	8003540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d122      	bne.n	8003540 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d11a      	bne.n	8003540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0a5b      	lsrs	r3, r3, #9
 800350e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d111      	bne.n	8003540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	0c1b      	lsrs	r3, r3, #16
 8003520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d108      	bne.n	8003540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e02b      	b.n	800359c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800354e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	429a      	cmp	r2, r3
 8003558:	d01f      	beq.n	800359a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4a11      	ldr	r2, [pc, #68]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003566:	f7fe fa4d 	bl	8001a04 <HAL_GetTick>
 800356a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800356c:	bf00      	nop
 800356e:	f7fe fa49 	bl	8001a04 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	4293      	cmp	r3, r2
 8003578:	d0f9      	beq.n	800356e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 800357c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_OscConfig+0x8b0>)
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003586:	00d2      	lsls	r2, r2, #3
 8003588:	4906      	ldr	r1, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 800358a:	4313      	orrs	r3, r2
 800358c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCC_OscConfig+0x8ac>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3730      	adds	r7, #48	; 0x30
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	58024400 	.word	0x58024400
 80035a8:	ffff0007 	.word	0xffff0007

080035ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e19c      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b8a      	ldr	r3, [pc, #552]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d910      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b87      	ldr	r3, [pc, #540]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	4985      	ldr	r1, [pc, #532]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b83      	ldr	r3, [pc, #524]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e184      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003608:	429a      	cmp	r2, r3
 800360a:	d908      	bls.n	800361e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800360c:	4b78      	ldr	r3, [pc, #480]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	4975      	ldr	r1, [pc, #468]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800361a:	4313      	orrs	r3, r2
 800361c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	4b70      	ldr	r3, [pc, #448]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003636:	429a      	cmp	r2, r3
 8003638:	d908      	bls.n	800364c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	496a      	ldr	r1, [pc, #424]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	4b64      	ldr	r3, [pc, #400]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003664:	429a      	cmp	r2, r3
 8003666:	d908      	bls.n	800367a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003668:	4b61      	ldr	r3, [pc, #388]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	495e      	ldr	r1, [pc, #376]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 8003676:	4313      	orrs	r3, r2
 8003678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003692:	429a      	cmp	r2, r3
 8003694:	d908      	bls.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003696:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	4953      	ldr	r1, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d908      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f023 020f 	bic.w	r2, r3, #15
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4947      	ldr	r1, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d055      	beq.n	800378e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4940      	ldr	r1, [pc, #256]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d107      	bne.n	800370c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fc:	4b3c      	ldr	r3, [pc, #240]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d121      	bne.n	800374c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0f6      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d107      	bne.n	8003724 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003714:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d115      	bne.n	800374c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0ea      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800372c:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0de      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d6      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f023 0207 	bic.w	r2, r3, #7
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4925      	ldr	r1, [pc, #148]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fe f951 	bl	8001a04 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003764:	e00a      	b.n	800377c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003766:	f7fe f94d 	bl	8001a04 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0be      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	429a      	cmp	r2, r3
 800378c:	d1eb      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d208      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f023 020f 	bic.w	r2, r3, #15
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d214      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 020f 	bic.w	r2, r3, #15
 80037d2:	4906      	ldr	r1, [pc, #24]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCC_ClockConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e086      	b.n	80038fa <HAL_RCC_ClockConfig+0x34e>
 80037ec:	52002000 	.word	0x52002000
 80037f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800380c:	429a      	cmp	r2, r3
 800380e:	d208      	bcs.n	8003822 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	4939      	ldr	r1, [pc, #228]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 800381e:	4313      	orrs	r3, r2
 8003820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800383a:	429a      	cmp	r2, r3
 800383c:	d208      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	492e      	ldr	r1, [pc, #184]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003868:	429a      	cmp	r2, r3
 800386a:	d208      	bcs.n	800387e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4922      	ldr	r1, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 800387a:	4313      	orrs	r3, r2
 800387c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003896:	429a      	cmp	r2, r3
 8003898:	d208      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4917      	ldr	r1, [pc, #92]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038ac:	f000 f834 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4912      	ldr	r1, [pc, #72]	; (8003908 <HAL_RCC_ClockConfig+0x35c>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCC_ClockConfig+0x358>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <HAL_RCC_ClockConfig+0x35c>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x360>)
 80038e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x364>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x368>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fde8 	bl	80014c4 <HAL_InitTick>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	58024400 	.word	0x58024400
 8003908:	0800d88c 	.word	0x0800d88c
 800390c:	24000004 	.word	0x24000004
 8003910:	24000000 	.word	0x24000000
 8003914:	24000008 	.word	0x24000008

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391e:	4bb3      	ldr	r3, [pc, #716]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003926:	2b18      	cmp	r3, #24
 8003928:	f200 8155 	bhi.w	8003bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_RCC_GetSysClockFreq+0x1c>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003999 	.word	0x08003999
 8003938:	08003bd7 	.word	0x08003bd7
 800393c:	08003bd7 	.word	0x08003bd7
 8003940:	08003bd7 	.word	0x08003bd7
 8003944:	08003bd7 	.word	0x08003bd7
 8003948:	08003bd7 	.word	0x08003bd7
 800394c:	08003bd7 	.word	0x08003bd7
 8003950:	08003bd7 	.word	0x08003bd7
 8003954:	080039bf 	.word	0x080039bf
 8003958:	08003bd7 	.word	0x08003bd7
 800395c:	08003bd7 	.word	0x08003bd7
 8003960:	08003bd7 	.word	0x08003bd7
 8003964:	08003bd7 	.word	0x08003bd7
 8003968:	08003bd7 	.word	0x08003bd7
 800396c:	08003bd7 	.word	0x08003bd7
 8003970:	08003bd7 	.word	0x08003bd7
 8003974:	080039c5 	.word	0x080039c5
 8003978:	08003bd7 	.word	0x08003bd7
 800397c:	08003bd7 	.word	0x08003bd7
 8003980:	08003bd7 	.word	0x08003bd7
 8003984:	08003bd7 	.word	0x08003bd7
 8003988:	08003bd7 	.word	0x08003bd7
 800398c:	08003bd7 	.word	0x08003bd7
 8003990:	08003bd7 	.word	0x08003bd7
 8003994:	080039cb 	.word	0x080039cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003998:	4b94      	ldr	r3, [pc, #592]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039a4:	4b91      	ldr	r3, [pc, #580]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	08db      	lsrs	r3, r3, #3
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	4a90      	ldr	r2, [pc, #576]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80039b6:	e111      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039b8:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039ba:	61bb      	str	r3, [r7, #24]
      break;
 80039bc:	e10e      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039be:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039c0:	61bb      	str	r3, [r7, #24]
      break;
 80039c2:	e10b      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039c4:	4b8c      	ldr	r3, [pc, #560]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039c6:	61bb      	str	r3, [r7, #24]
      break;
 80039c8:	e108      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ca:	4b88      	ldr	r3, [pc, #544]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039d4:	4b85      	ldr	r3, [pc, #532]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039e0:	4b82      	ldr	r3, [pc, #520]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039ea:	4b80      	ldr	r3, [pc, #512]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80e1 	beq.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	f000 8083 	beq.w	8003b1c <HAL_RCC_GetSysClockFreq+0x204>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f200 80a1 	bhi.w	8003b60 <HAL_RCC_GetSysClockFreq+0x248>
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x114>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d056      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a2a:	e099      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02d      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a38:	4b6c      	ldr	r3, [pc, #432]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	08db      	lsrs	r3, r3, #3
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a62:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a92:	e087      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	4b51      	ldr	r3, [pc, #324]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ad6:	e065      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003afe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b1a:	e043      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b5e:	e021      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ba2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bae:	3301      	adds	r3, #1
 8003bb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc8:	ee17 3a90 	vmov	r3, s15
 8003bcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bce:	e005      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bd8:	61bb      	str	r3, [r7, #24]
      break;
 8003bda:	bf00      	nop
  }

  return sysclockfreq;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3724      	adds	r7, #36	; 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	03d09000 	.word	0x03d09000
 8003bf4:	003d0900 	.word	0x003d0900
 8003bf8:	017d7840 	.word	0x017d7840
 8003bfc:	46000000 	.word	0x46000000
 8003c00:	4c742400 	.word	0x4c742400
 8003c04:	4a742400 	.word	0x4a742400
 8003c08:	4bbebc20 	.word	0x4bbebc20

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c12:	f7ff fe81 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	490f      	ldr	r1, [pc, #60]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c4a:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	0800d88c 	.word	0x0800d88c
 8003c64:	24000004 	.word	0x24000004
 8003c68:	24000000 	.word	0x24000000

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c70:	f7ff ffcc 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	58024400 	.word	0x58024400
 8003c94:	0800d88c 	.word	0x0800d88c

08003c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c9c:	f7ff ffb6 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	0800d88c 	.word	0x0800d88c

08003cc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	223f      	movs	r2, #63	; 0x3f
 8003cd2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0207 	and.w	r2, r3, #7
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_GetClockConfig+0x7c>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCC_GetClockConfig+0x80>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	58024400 	.word	0x58024400
 8003d44:	52002000 	.word	0x52002000

08003d48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b0ca      	sub	sp, #296	; 0x128
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d54:	2300      	movs	r3, #0
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8003d72:	d049      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d84:	d828      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8a:	d01a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d90:	d822      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d007      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9e:	4bb8      	ldr	r3, [pc, #736]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	4ab7      	ldr	r2, [pc, #732]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003daa:	e01a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db0:	3308      	adds	r3, #8
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 fc8f 	bl	80056d8 <RCCEx_PLL2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	3328      	adds	r3, #40	; 0x28
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 fd36 	bl	800583c <RCCEx_PLL3_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dea:	4ba5      	ldr	r3, [pc, #660]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df8:	4aa1      	ldr	r2, [pc, #644]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6513      	str	r3, [r2, #80]	; 0x50
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003e14:	f04f 0900 	mov.w	r9, #0
 8003e18:	ea58 0309 	orrs.w	r3, r8, r9
 8003e1c:	d047      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d82a      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e45 	.word	0x08003e45
 8003e34:	08003e53 	.word	0x08003e53
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e87 	.word	0x08003e87
 8003e40:	08003e87 	.word	0x08003e87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4b8e      	ldr	r3, [pc, #568]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a8d      	ldr	r2, [pc, #564]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e50:	e01a      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e56:	3308      	adds	r3, #8
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fc3c 	bl	80056d8 <RCCEx_PLL2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e66:	e00f      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	3328      	adds	r3, #40	; 0x28
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f001 fce3 	bl	800583c <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e7c:	e004      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e90:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	f023 0107 	bic.w	r1, r3, #7
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	4a78      	ldr	r2, [pc, #480]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003eba:	f04f 0b00 	mov.w	fp, #0
 8003ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ec2:	d04c      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ece:	d030      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed4:	d829      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed8:	d02d      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003eda:	2bc0      	cmp	r3, #192	; 0xc0
 8003edc:	d825      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d018      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d821      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d007      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003eee:	e01c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef0:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4a62      	ldr	r2, [pc, #392]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003efc:	e01c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f02:	3308      	adds	r3, #8
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 fbe6 	bl	80056d8 <RCCEx_PLL2_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f12:	e011      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	3328      	adds	r3, #40	; 0x28
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fc8d 	bl	800583c <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f30:	e002      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6513      	str	r3, [r2, #80]	; 0x50
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003f6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d053      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f8a:	d035      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f90:	d82e      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f96:	d031      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f9c:	d828      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa2:	d01a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa8:	d822      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb2:	d007      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb6:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	4a31      	ldr	r2, [pc, #196]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e01c      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc8:	3308      	adds	r3, #8
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fb83 	bl	80056d8 <RCCEx_PLL2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fd8:	e011      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	3328      	adds	r3, #40	; 0x28
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fc2a 	bl	800583c <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fee:	e006      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004016:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6593      	str	r3, [r2, #88]	; 0x58
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004032:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800403c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d056      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800404e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004052:	d038      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004058:	d831      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800405a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800405e:	d034      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004060:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004064:	d82b      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800406a:	d01d      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800406c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004070:	d825      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d006      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800407c:	e01f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	4ba2      	ldr	r3, [pc, #648]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	4aa1      	ldr	r2, [pc, #644]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004090:	e01c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	3308      	adds	r3, #8
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fb1c 	bl	80056d8 <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040a6:	e011      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ac:	3328      	adds	r3, #40	; 0x28
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 fbc3 	bl	800583c <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040c4:	e002      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040d4:	4b8e      	ldr	r3, [pc, #568]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040e4:	4a8a      	ldr	r2, [pc, #552]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800410a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800410e:	460b      	mov	r3, r1
 8004110:	4313      	orrs	r3, r2
 8004112:	d03a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d01f      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800411e:	2b30      	cmp	r3, #48	; 0x30
 8004120:	d819      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d00c      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004126:	2b20      	cmp	r3, #32
 8004128:	d815      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d019      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800412e:	2b10      	cmp	r3, #16
 8004130:	d111      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004132:	4b77      	ldr	r3, [pc, #476]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	4a76      	ldr	r2, [pc, #472]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004144:	3308      	adds	r3, #8
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fac5 	bl	80056d8 <RCCEx_PLL2_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800416c:	4b68      	ldr	r3, [pc, #416]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417c:	430b      	orrs	r3, r1
 800417e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004196:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80041a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d051      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b4:	d035      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ba:	d82e      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041c0:	d031      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041c6:	d828      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041cc:	d01a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	d822      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d007      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041de:	e01c      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e0:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	4a4a      	ldr	r2, [pc, #296]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041ec:	e01c      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f2:	3308      	adds	r3, #8
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fa6e 	bl	80056d8 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004202:	e011      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f001 fb15 	bl	800583c <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004230:	4b37      	ldr	r3, [pc, #220]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	4a34      	ldr	r2, [pc, #208]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6513      	str	r3, [r2, #80]	; 0x50
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800424a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800425a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004264:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d056      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d033      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800427a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800427e:	d82c      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004284:	d02f      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800428a:	d826      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800428c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004290:	d02b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004292:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004296:	d820      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429c:	d012      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800429e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a2:	d81a      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d022      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d115      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	3308      	adds	r3, #8
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 fa0e 	bl	80056d8 <RCCEx_PLL2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042c2:	e015      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c8:	3328      	adds	r3, #40	; 0x28
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 fab5 	bl	800583c <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042e0:	e006      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042e2:	bf00      	nop
 80042e4:	e004      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	4a02      	ldr	r2, [pc, #8]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6513      	str	r3, [r2, #80]	; 0x50
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004318:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004332:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d055      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004348:	d033      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800434e:	d82c      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d02f      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d826      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800435c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004360:	d02b      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004366:	d820      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436c:	d012      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800436e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004372:	d81a      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d022      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800437c:	d115      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004382:	3308      	adds	r3, #8
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f9a6 	bl	80056d8 <RCCEx_PLL2_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004392:	e015      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004398:	3328      	adds	r3, #40	; 0x28
 800439a:	2101      	movs	r1, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fa4d 	bl	800583c <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043a8:	e00a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043b2:	bf00      	nop
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043c8:	4ba3      	ldr	r3, [pc, #652]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043d8:	4a9f      	ldr	r2, [pc, #636]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043da:	430b      	orrs	r3, r1
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
 80043de:	e003      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d037      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004412:	d00e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d816      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004422:	d111      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4b8c      	ldr	r3, [pc, #560]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a8b      	ldr	r2, [pc, #556]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004430:	e00f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004436:	3308      	adds	r3, #8
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f94c 	bl	80056d8 <RCCEx_PLL2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a7b      	ldr	r2, [pc, #492]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6513      	str	r3, [r2, #80]	; 0x50
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800448e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d039      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d81c      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044b9 	.word	0x080044b9
 80044b0:	080044c7 	.word	0x080044c7
 80044b4:	080044e5 	.word	0x080044e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a66      	ldr	r2, [pc, #408]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	3308      	adds	r3, #8
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 f902 	bl	80056d8 <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044ee:	4b5a      	ldr	r3, [pc, #360]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	f023 0103 	bic.w	r1, r3, #3
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fc:	4a56      	ldr	r2, [pc, #344]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004522:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	f000 809f 	beq.w	800466c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452e:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a4a      	ldr	r2, [pc, #296]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453a:	f7fd fa63 	bl	8001a04 <HAL_GetTick>
 800453e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004542:	e00b      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fd fa5e 	bl	8001a04 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d903      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800455a:	e005      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455c:	4b3f      	ldr	r3, [pc, #252]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ed      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800456c:	2b00      	cmp	r3, #0
 800456e:	d179      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800457c:	4053      	eors	r3, r2
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d015      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004586:	4b34      	ldr	r3, [pc, #208]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b31      	ldr	r3, [pc, #196]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a30      	ldr	r2, [pc, #192]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459e:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a2d      	ldr	r2, [pc, #180]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045aa:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d118      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd fa20 	bl	8001a04 <HAL_GetTick>
 80045c4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c8:	e00d      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fd fa1b 	bl	8001a04 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e6:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0eb      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d129      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460a:	d10e      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800461c:	091a      	lsrs	r2, r3, #4
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004620:	4013      	ands	r3, r2
 8004622:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004624:	430b      	orrs	r3, r1
 8004626:	6113      	str	r3, [r2, #16]
 8004628:	e005      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004634:	6113      	str	r3, [r2, #16]
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004638:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	e00e      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004656:	e009      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004658:	58024400 	.word	0x58024400
 800465c:	58024800 	.word	0x58024800
 8004660:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f002 0301 	and.w	r3, r2, #1
 8004678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004682:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	f000 8089 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004694:	2b28      	cmp	r3, #40	; 0x28
 8004696:	d86b      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	08004779 	.word	0x08004779
 80046a4:	08004771 	.word	0x08004771
 80046a8:	08004771 	.word	0x08004771
 80046ac:	08004771 	.word	0x08004771
 80046b0:	08004771 	.word	0x08004771
 80046b4:	08004771 	.word	0x08004771
 80046b8:	08004771 	.word	0x08004771
 80046bc:	08004771 	.word	0x08004771
 80046c0:	08004745 	.word	0x08004745
 80046c4:	08004771 	.word	0x08004771
 80046c8:	08004771 	.word	0x08004771
 80046cc:	08004771 	.word	0x08004771
 80046d0:	08004771 	.word	0x08004771
 80046d4:	08004771 	.word	0x08004771
 80046d8:	08004771 	.word	0x08004771
 80046dc:	08004771 	.word	0x08004771
 80046e0:	0800475b 	.word	0x0800475b
 80046e4:	08004771 	.word	0x08004771
 80046e8:	08004771 	.word	0x08004771
 80046ec:	08004771 	.word	0x08004771
 80046f0:	08004771 	.word	0x08004771
 80046f4:	08004771 	.word	0x08004771
 80046f8:	08004771 	.word	0x08004771
 80046fc:	08004771 	.word	0x08004771
 8004700:	08004779 	.word	0x08004779
 8004704:	08004771 	.word	0x08004771
 8004708:	08004771 	.word	0x08004771
 800470c:	08004771 	.word	0x08004771
 8004710:	08004771 	.word	0x08004771
 8004714:	08004771 	.word	0x08004771
 8004718:	08004771 	.word	0x08004771
 800471c:	08004771 	.word	0x08004771
 8004720:	08004779 	.word	0x08004779
 8004724:	08004771 	.word	0x08004771
 8004728:	08004771 	.word	0x08004771
 800472c:	08004771 	.word	0x08004771
 8004730:	08004771 	.word	0x08004771
 8004734:	08004771 	.word	0x08004771
 8004738:	08004771 	.word	0x08004771
 800473c:	08004771 	.word	0x08004771
 8004740:	08004779 	.word	0x08004779
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	3308      	adds	r3, #8
 800474a:	2101      	movs	r1, #1
 800474c:	4618      	mov	r0, r3
 800474e:	f000 ffc3 	bl	80056d8 <RCCEx_PLL2_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004758:	e00f      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	3328      	adds	r3, #40	; 0x28
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f001 f86a 	bl	800583c <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800476e:	e004      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004782:	4bbf      	ldr	r3, [pc, #764]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004790:	4abb      	ldr	r2, [pc, #748]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004792:	430b      	orrs	r3, r1
 8004794:	6553      	str	r3, [r2, #84]	; 0x54
 8004796:	e003      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800479c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 0302 	and.w	r3, r2, #2
 80047ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d041      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d824      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	0800481d 	.word	0x0800481d
 80047d4:	080047e9 	.word	0x080047e9
 80047d8:	080047ff 	.word	0x080047ff
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	0800481d 	.word	0x0800481d
 80047e4:	0800481d 	.word	0x0800481d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ec:	3308      	adds	r3, #8
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 ff71 	bl	80056d8 <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047fc:	e00f      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004802:	3328      	adds	r3, #40	; 0x28
 8004804:	2101      	movs	r1, #1
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f818 	bl	800583c <RCCEx_PLL3_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004812:	e004      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800481a:	e000      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800481c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004826:	4b96      	ldr	r3, [pc, #600]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	f023 0107 	bic.w	r1, r3, #7
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004834:	4a92      	ldr	r2, [pc, #584]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6553      	str	r3, [r2, #84]	; 0x54
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f002 0304 	and.w	r3, r2, #4
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800485a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d044      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486c:	2b05      	cmp	r3, #5
 800486e:	d825      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	080048c5 	.word	0x080048c5
 800487c:	08004891 	.word	0x08004891
 8004880:	080048a7 	.word	0x080048a7
 8004884:	080048c5 	.word	0x080048c5
 8004888:	080048c5 	.word	0x080048c5
 800488c:	080048c5 	.word	0x080048c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004894:	3308      	adds	r3, #8
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f000 ff1d 	bl	80056d8 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048a4:	e00f      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	3328      	adds	r3, #40	; 0x28
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 ffc4 	bl	800583c <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ce:	4b6c      	ldr	r3, [pc, #432]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f023 0107 	bic.w	r1, r3, #7
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	4a68      	ldr	r2, [pc, #416]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6593      	str	r3, [r2, #88]	; 0x58
 80048e4:	e003      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f002 0320 	and.w	r3, r2, #32
 80048fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004908:	460b      	mov	r3, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	d055      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800491a:	d033      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800491c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004920:	d82c      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d02f      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d826      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800492e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004932:	d02b      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004934:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004938:	d820      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800493a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493e:	d012      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004944:	d81a      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d022      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800494a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800494e:	d115      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004954:	3308      	adds	r3, #8
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f000 febd 	bl	80056d8 <RCCEx_PLL2_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004964:	e015      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	3328      	adds	r3, #40	; 0x28
 800496c:	2102      	movs	r1, #2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 ff64 	bl	800583c <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800497a:	e00a      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004982:	e006      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004984:	bf00      	nop
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	4a35      	ldr	r2, [pc, #212]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6553      	str	r3, [r2, #84]	; 0x54
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4313      	orrs	r3, r2
 80049d8:	d058      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049e6:	d033      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80049e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049ec:	d82c      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d826      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049fe:	d02b      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a04:	d820      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0a:	d012      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a10:	d81a      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d022      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d115      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a20:	3308      	adds	r3, #8
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fe57 	bl	80056d8 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a36:	3328      	adds	r3, #40	; 0x28
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fefe 	bl	800583c <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a46:	e00a      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a4e:	e006      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a50:	bf00      	nop
 8004a52:	e004      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a54:	bf00      	nop
 8004a56:	e002      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a76:	4a02      	ldr	r2, [pc, #8]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a7c:	e006      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d055      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ab4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ab8:	d033      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004aba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004abe:	d82c      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d02f      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aca:	d826      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004acc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ad0:	d02b      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ad2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ad6:	d820      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004adc:	d012      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae2:	d81a      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d022      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aec:	d115      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	3308      	adds	r3, #8
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fdee 	bl	80056d8 <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b02:	e015      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b08:	3328      	adds	r3, #40	; 0x28
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fe95 	bl	800583c <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b18:	e00a      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b38:	4ba1      	ldr	r3, [pc, #644]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b48:	4a9d      	ldr	r2, [pc, #628]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4e:	e003      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f002 0308 	and.w	r3, r2, #8
 8004b64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d01e      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8a:	3328      	adds	r3, #40	; 0x28
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fe54 	bl	800583c <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ba0:	4b87      	ldr	r3, [pc, #540]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb0:	4a83      	ldr	r2, [pc, #524]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f002 0310 	and.w	r3, r2, #16
 8004bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bcc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	d01e      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be8:	3328      	adds	r3, #40	; 0x28
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fe25 	bl	800583c <RCCEx_PLL3_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfe:	4b70      	ldr	r3, [pc, #448]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c0e:	4a6c      	ldr	r2, [pc, #432]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d03e      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c40:	d022      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c46:	d81b      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004c52:	e015      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fd3b 	bl	80056d8 <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c68:	e00f      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6e:	3328      	adds	r3, #40	; 0x28
 8004c70:	2102      	movs	r1, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fde2 	bl	800583c <RCCEx_PLL3_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c92:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ca2:	4a47      	ldr	r2, [pc, #284]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004cbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cda:	d01f      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce0:	d818      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d003      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cec:	d007      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004cee:	e011      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a32      	ldr	r2, [pc, #200]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d02:	3328      	adds	r3, #40	; 0x28
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fd98 	bl	800583c <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d26:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6553      	str	r3, [r2, #84]	; 0x54
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d52:	673b      	str	r3, [r7, #112]	; 0x70
 8004d54:	2300      	movs	r3, #0
 8004d56:	677b      	str	r3, [r7, #116]	; 0x74
 8004d58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d034      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d70:	d007      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d72:	e011      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d80:	e00e      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	3308      	adds	r3, #8
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fca4 	bl	80056d8 <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10d      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db6:	4a02      	ldr	r2, [pc, #8]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db8:	430b      	orrs	r3, r1
 8004dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dda:	2300      	movs	r3, #0
 8004ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dde:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dec:	3328      	adds	r3, #40	; 0x28
 8004dee:	2102      	movs	r1, #2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fd23 	bl	800583c <RCCEx_PLL3_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e10:	2300      	movs	r3, #0
 8004e12:	667b      	str	r3, [r7, #100]	; 0x64
 8004e14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d038      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d018      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e30:	d811      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e36:	d014      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d80b      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e46:	d106      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e48:	4bc3      	ldr	r3, [pc, #780]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4ac2      	ldr	r2, [pc, #776]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e54:	e008      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e5c:	e004      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e70:	4bb9      	ldr	r3, [pc, #740]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e80:	4ab5      	ldr	r2, [pc, #724]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6553      	str	r3, [r2, #84]	; 0x54
 8004e86:	e003      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eac:	4baa      	ldr	r3, [pc, #680]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eba:	4aa7      	ldr	r2, [pc, #668]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ece:	2300      	movs	r3, #0
 8004ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004edc:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004eec:	4a9a      	ldr	r2, [pc, #616]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f00:	2300      	movs	r3, #0
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f0e:	4b92      	ldr	r3, [pc, #584]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1c:	4a8e      	ldr	r2, [pc, #568]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f30:	2300      	movs	r3, #0
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
 8004f34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f3e:	4b86      	ldr	r3, [pc, #536]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4a85      	ldr	r2, [pc, #532]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f48:	6113      	str	r3, [r2, #16]
 8004f4a:	4b83      	ldr	r3, [pc, #524]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f4c:	6919      	ldr	r1, [r3, #16]
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f56:	4a80      	ldr	r2, [pc, #512]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f78:	4b77      	ldr	r3, [pc, #476]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	4a74      	ldr	r2, [pc, #464]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fa8:	4b6b      	ldr	r3, [pc, #428]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb8:	4a67      	ldr	r2, [pc, #412]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d011      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fde:	3308      	adds	r3, #8
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fb78 	bl	80056d8 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	2100      	movs	r1, #0
 8005008:	6239      	str	r1, [r7, #32]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
 8005010:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005014:	460b      	mov	r3, r1
 8005016:	4313      	orrs	r3, r2
 8005018:	d011      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501e:	3308      	adds	r3, #8
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fb58 	bl	80056d8 <RCCEx_PLL2_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800502e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800503a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	2100      	movs	r1, #0
 8005048:	61b9      	str	r1, [r7, #24]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d011      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	3308      	adds	r3, #8
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb38 	bl	80056d8 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800507a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	2100      	movs	r1, #0
 8005088:	6139      	str	r1, [r7, #16]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d011      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509e:	3328      	adds	r3, #40	; 0x28
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fbca 	bl	800583c <RCCEx_PLL3_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80050ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	2100      	movs	r1, #0
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050d4:	460b      	mov	r3, r1
 80050d6:	4313      	orrs	r3, r2
 80050d8:	d011      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	3328      	adds	r3, #40	; 0x28
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fbaa 	bl	800583c <RCCEx_PLL3_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80050ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	2100      	movs	r1, #0
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d011      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800511e:	3328      	adds	r3, #40	; 0x28
 8005120:	2102      	movs	r1, #2
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fb8a 	bl	800583c <RCCEx_PLL3_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800513e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
}
 800514c:	4618      	mov	r0, r3
 800514e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005152:	46bd      	mov	sp, r7
 8005154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005158:	58024400 	.word	0x58024400

0800515c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005160:	f7fe fd54 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	58024400 	.word	0x58024400
 8005184:	0800d88c 	.word	0x0800d88c

08005188 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005188:	b480      	push	{r7}
 800518a:	b089      	sub	sp, #36	; 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005190:	4ba1      	ldr	r3, [pc, #644]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800519a:	4b9f      	ldr	r3, [pc, #636]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	0b1b      	lsrs	r3, r3, #12
 80051a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051a6:	4b9c      	ldr	r3, [pc, #624]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051b2:	4b99      	ldr	r3, [pc, #612]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	08db      	lsrs	r3, r3, #3
 80051b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8111 	beq.w	80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f000 8083 	beq.w	80052e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	f200 80a1 	bhi.w	8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d056      	beq.n	80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051f2:	e099      	b.n	8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f4:	4b88      	ldr	r3, [pc, #544]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02d      	beq.n	800525c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005200:	4b85      	ldr	r3, [pc, #532]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	4a84      	ldr	r2, [pc, #528]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
 8005210:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522a:	4b7b      	ldr	r3, [pc, #492]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	ed97 6a03 	vldr	s12, [r7, #12]
 800523e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005256:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800525a:	e087      	b.n	800536c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005282:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800529e:	e065      	b.n	800536c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b2:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052e2:	e043      	b.n	800536c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	4b48      	ldr	r3, [pc, #288]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005306:	ed97 6a03 	vldr	s12, [r7, #12]
 800530a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800530e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800531a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005326:	e021      	b.n	800536c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b37      	ldr	r3, [pc, #220]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a03 	vldr	s12, [r7, #12]
 800534e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800536c:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	0a5b      	lsrs	r3, r3, #9
 8005372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005386:	edd7 6a07 	vldr	s13, [r7, #28]
 800538a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005392:	ee17 2a90 	vmov	r2, s15
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800539a:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c0:	ee17 2a90 	vmov	r2, s15
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053c8:	4b13      	ldr	r3, [pc, #76]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	0e1b      	lsrs	r3, r3, #24
 80053ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ee:	ee17 2a90 	vmov	r2, s15
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053f6:	e008      	b.n	800540a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	609a      	str	r2, [r3, #8]
}
 800540a:	bf00      	nop
 800540c:	3724      	adds	r7, #36	; 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	58024400 	.word	0x58024400
 800541c:	03d09000 	.word	0x03d09000
 8005420:	46000000 	.word	0x46000000
 8005424:	4c742400 	.word	0x4c742400
 8005428:	4a742400 	.word	0x4a742400
 800542c:	4bbebc20 	.word	0x4bbebc20

08005430 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005438:	4ba1      	ldr	r3, [pc, #644]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005442:	4b9f      	ldr	r3, [pc, #636]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	0d1b      	lsrs	r3, r3, #20
 8005448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800544e:	4b9c      	ldr	r3, [pc, #624]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800545a:	4b99      	ldr	r3, [pc, #612]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	08db      	lsrs	r3, r3, #3
 8005460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8111 	beq.w	80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b02      	cmp	r3, #2
 8005482:	f000 8083 	beq.w	800558c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b02      	cmp	r3, #2
 800548a:	f200 80a1 	bhi.w	80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d056      	beq.n	8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800549a:	e099      	b.n	80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800549c:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02d      	beq.n	8005504 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054a8:	4b85      	ldr	r3, [pc, #532]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	08db      	lsrs	r3, r3, #3
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	4a84      	ldr	r2, [pc, #528]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d2:	4b7b      	ldr	r3, [pc, #492]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005502:	e087      	b.n	8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005526:	ed97 6a03 	vldr	s12, [r7, #12]
 800552a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800552e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005546:	e065      	b.n	8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005552:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555a:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556a:	ed97 6a03 	vldr	s12, [r7, #12]
 800556e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800558a:	e043      	b.n	8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800559a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559e:	4b48      	ldr	r3, [pc, #288]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ce:	e021      	b.n	8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005612:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005614:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	0a5b      	lsrs	r3, r3, #9
 800561a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800562a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800562e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563a:	ee17 2a90 	vmov	r2, s15
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800565c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005668:	ee17 2a90 	vmov	r2, s15
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568a:	edd7 6a07 	vldr	s13, [r7, #28]
 800568e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 2a90 	vmov	r2, s15
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
}
 80056b2:	bf00      	nop
 80056b4:	3724      	adds	r7, #36	; 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	58024400 	.word	0x58024400
 80056c4:	03d09000 	.word	0x03d09000
 80056c8:	46000000 	.word	0x46000000
 80056cc:	4c742400 	.word	0x4c742400
 80056d0:	4a742400 	.word	0x4a742400
 80056d4:	4bbebc20 	.word	0x4bbebc20

080056d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056e6:	4b53      	ldr	r3, [pc, #332]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d101      	bne.n	80056f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e099      	b.n	800582a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056f6:	4b4f      	ldr	r3, [pc, #316]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a4e      	ldr	r2, [pc, #312]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005702:	f7fc f97f 	bl	8001a04 <HAL_GetTick>
 8005706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005708:	e008      	b.n	800571c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800570a:	f7fc f97b 	bl	8001a04 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e086      	b.n	800582a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800571c:	4b45      	ldr	r3, [pc, #276]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f0      	bne.n	800570a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	031b      	lsls	r3, r3, #12
 8005736:	493f      	ldr	r1, [pc, #252]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	628b      	str	r3, [r1, #40]	; 0x28
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	3b01      	subs	r3, #1
 8005742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	3b01      	subs	r3, #1
 800574c:	025b      	lsls	r3, r3, #9
 800574e:	b29b      	uxth	r3, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	3b01      	subs	r3, #1
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	3b01      	subs	r3, #1
 8005766:	061b      	lsls	r3, r3, #24
 8005768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800576c:	4931      	ldr	r1, [pc, #196]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 800576e:	4313      	orrs	r3, r2
 8005770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	492d      	ldr	r1, [pc, #180]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 8005780:	4313      	orrs	r3, r2
 8005782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005784:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	f023 0220 	bic.w	r2, r3, #32
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	4928      	ldr	r1, [pc, #160]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005796:	4b27      	ldr	r3, [pc, #156]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	4a26      	ldr	r2, [pc, #152]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 800579c:	f023 0310 	bic.w	r3, r3, #16
 80057a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a6:	4b24      	ldr	r3, [pc, #144]	; (8005838 <RCCEx_PLL2_Config+0x160>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	69d2      	ldr	r2, [r2, #28]
 80057ae:	00d2      	lsls	r2, r2, #3
 80057b0:	4920      	ldr	r1, [pc, #128]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057b6:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	f043 0310 	orr.w	r3, r3, #16
 80057c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057d4:	e00f      	b.n	80057f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d106      	bne.n	80057ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057dc:	4b15      	ldr	r3, [pc, #84]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4a14      	ldr	r2, [pc, #80]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057e8:	e005      	b.n	80057f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	4a11      	ldr	r2, [pc, #68]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 80057fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005802:	f7fc f8ff 	bl	8001a04 <HAL_GetTick>
 8005806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005808:	e008      	b.n	800581c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800580a:	f7fc f8fb 	bl	8001a04 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <RCCEx_PLL2_Config+0x15c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	58024400 	.word	0x58024400
 8005838:	ffff0007 	.word	0xffff0007

0800583c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800584a:	4b53      	ldr	r3, [pc, #332]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b03      	cmp	r3, #3
 8005854:	d101      	bne.n	800585a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e099      	b.n	800598e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800585a:	4b4f      	ldr	r3, [pc, #316]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4e      	ldr	r2, [pc, #312]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fc f8cd 	bl	8001a04 <HAL_GetTick>
 800586a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800586c:	e008      	b.n	8005880 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800586e:	f7fc f8c9 	bl	8001a04 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e086      	b.n	800598e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005880:	4b45      	ldr	r3, [pc, #276]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	051b      	lsls	r3, r3, #20
 800589a:	493f      	ldr	r1, [pc, #252]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	628b      	str	r3, [r1, #40]	; 0x28
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	025b      	lsls	r3, r3, #9
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d0:	4931      	ldr	r1, [pc, #196]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	492d      	ldr	r1, [pc, #180]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058e8:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	4928      	ldr	r1, [pc, #160]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058fa:	4b27      	ldr	r3, [pc, #156]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a26      	ldr	r2, [pc, #152]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <RCCEx_PLL3_Config+0x160>)
 800590c:	4013      	ands	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	69d2      	ldr	r2, [r2, #28]
 8005912:	00d2      	lsls	r2, r2, #3
 8005914:	4920      	ldr	r1, [pc, #128]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a19      	ldr	r2, [pc, #100]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005938:	e00f      	b.n	800595a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800594a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800594c:	e005      	b.n	800595a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a11      	ldr	r2, [pc, #68]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005966:	f7fc f84d 	bl	8001a04 <HAL_GetTick>
 800596a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800596c:	e008      	b.n	8005980 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800596e:	f7fc f849 	bl	8001a04 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <RCCEx_PLL3_Config+0x15c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	58024400 	.word	0x58024400
 800599c:	ffff0007 	.word	0xffff0007

080059a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e10f      	b.n	8005bd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a87      	ldr	r2, [pc, #540]	; (8005bdc <HAL_SPI_Init+0x23c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <HAL_SPI_Init+0x42>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a86      	ldr	r2, [pc, #536]	; (8005be0 <HAL_SPI_Init+0x240>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00a      	beq.n	80059e2 <HAL_SPI_Init+0x42>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a84      	ldr	r2, [pc, #528]	; (8005be4 <HAL_SPI_Init+0x244>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d005      	beq.n	80059e2 <HAL_SPI_Init+0x42>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b0f      	cmp	r3, #15
 80059dc:	d901      	bls.n	80059e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e0f7      	b.n	8005bd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f900 	bl	8005be8 <SPI_GetPacketSize>
 80059e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a7b      	ldr	r2, [pc, #492]	; (8005bdc <HAL_SPI_Init+0x23c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00c      	beq.n	8005a0e <HAL_SPI_Init+0x6e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a79      	ldr	r2, [pc, #484]	; (8005be0 <HAL_SPI_Init+0x240>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <HAL_SPI_Init+0x6e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a78      	ldr	r2, [pc, #480]	; (8005be4 <HAL_SPI_Init+0x244>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d002      	beq.n	8005a0e <HAL_SPI_Init+0x6e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d811      	bhi.n	8005a32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a12:	4a72      	ldr	r2, [pc, #456]	; (8005bdc <HAL_SPI_Init+0x23c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a70      	ldr	r2, [pc, #448]	; (8005be0 <HAL_SPI_Init+0x240>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_SPI_Init+0x8c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6f      	ldr	r2, [pc, #444]	; (8005be4 <HAL_SPI_Init+0x244>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d104      	bne.n	8005a36 <HAL_SPI_Init+0x96>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d901      	bls.n	8005a36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0cd      	b.n	8005bd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb fb80 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005a72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a7c:	d119      	bne.n	8005ab2 <HAL_SPI_Init+0x112>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a86:	d103      	bne.n	8005a90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10c      	bne.n	8005ab2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa0:	d107      	bne.n	8005ab2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00f      	beq.n	8005ade <HAL_SPI_Init+0x13e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d90b      	bls.n	8005ade <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e007      	b.n	8005aee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	ea42 0103 	orr.w	r1, r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4e:	ea42 0103 	orr.w	r1, r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d113      	bne.n	8005b8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40013000 	.word	0x40013000
 8005be0:	40003800 	.word	0x40003800
 8005be4:	40003c00 	.word	0x40003c00

08005be8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	3307      	adds	r3, #7
 8005c06:	08db      	lsrs	r3, r3, #3
 8005c08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e049      	b.n	8005cc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fb faeb 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f000 fd99 	bl	8006794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d001      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e054      	b.n	8005d8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d01d      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a22      	ldr	r2, [pc, #136]	; (8005da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a21      	ldr	r2, [pc, #132]	; (8005da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <HAL_TIM_Base_Start_IT+0xe0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d115      	bne.n	8005d78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_TIM_Base_Start_IT+0xec>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d015      	beq.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d64:	d011      	beq.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	e008      	b.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40001800 	.word	0x40001800
 8005db4:	40014000 	.word	0x40014000
 8005db8:	00010007 	.word	0x00010007

08005dbc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_TIM_OC_Start_IT+0x28>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e03c      	b.n	8005e5e <HAL_TIM_OC_Start_IT+0xa2>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d109      	bne.n	8005dfe <HAL_TIM_OC_Start_IT+0x42>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	bf14      	ite	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	2300      	moveq	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	e02f      	b.n	8005e5e <HAL_TIM_OC_Start_IT+0xa2>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_OC_Start_IT+0x5c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e022      	b.n	8005e5e <HAL_TIM_OC_Start_IT+0xa2>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d109      	bne.n	8005e32 <HAL_TIM_OC_Start_IT+0x76>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	bf14      	ite	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	2300      	moveq	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e015      	b.n	8005e5e <HAL_TIM_OC_Start_IT+0xa2>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d109      	bne.n	8005e4c <HAL_TIM_OC_Start_IT+0x90>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e008      	b.n	8005e5e <HAL_TIM_OC_Start_IT+0xa2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e0ec      	b.n	8006040 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_OC_Start_IT+0xba>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	e023      	b.n	8005ebe <HAL_TIM_OC_Start_IT+0x102>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_OC_Start_IT+0xca>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e84:	e01b      	b.n	8005ebe <HAL_TIM_OC_Start_IT+0x102>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_OC_Start_IT+0xda>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e94:	e013      	b.n	8005ebe <HAL_TIM_OC_Start_IT+0x102>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_OC_Start_IT+0xea>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea4:	e00b      	b.n	8005ebe <HAL_TIM_OC_Start_IT+0x102>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_OC_Start_IT+0xfa>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	e003      	b.n	8005ebe <HAL_TIM_OC_Start_IT+0x102>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b0c      	cmp	r3, #12
 8005ec2:	d841      	bhi.n	8005f48 <HAL_TIM_OC_Start_IT+0x18c>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <HAL_TIM_OC_Start_IT+0x110>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005f01 	.word	0x08005f01
 8005ed0:	08005f49 	.word	0x08005f49
 8005ed4:	08005f49 	.word	0x08005f49
 8005ed8:	08005f49 	.word	0x08005f49
 8005edc:	08005f13 	.word	0x08005f13
 8005ee0:	08005f49 	.word	0x08005f49
 8005ee4:	08005f49 	.word	0x08005f49
 8005ee8:	08005f49 	.word	0x08005f49
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	08005f49 	.word	0x08005f49
 8005efc:	08005f37 	.word	0x08005f37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0202 	orr.w	r2, r2, #2
 8005f0e:	60da      	str	r2, [r3, #12]
      break;
 8005f10:	e01d      	b.n	8005f4e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0204 	orr.w	r2, r2, #4
 8005f20:	60da      	str	r2, [r3, #12]
      break;
 8005f22:	e014      	b.n	8005f4e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	60da      	str	r2, [r3, #12]
      break;
 8005f34:	e00b      	b.n	8005f4e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0210 	orr.w	r2, r2, #16
 8005f44:	60da      	str	r2, [r3, #12]
      break;
 8005f46:	e002      	b.n	8005f4e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d174      	bne.n	800603e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 f833 	bl	8006fc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a38      	ldr	r2, [pc, #224]	; (8006048 <HAL_TIM_OC_Start_IT+0x28c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <HAL_TIM_OC_Start_IT+0x1d8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a36      	ldr	r2, [pc, #216]	; (800604c <HAL_TIM_OC_Start_IT+0x290>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00e      	beq.n	8005f94 <HAL_TIM_OC_Start_IT+0x1d8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a35      	ldr	r2, [pc, #212]	; (8006050 <HAL_TIM_OC_Start_IT+0x294>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_TIM_OC_Start_IT+0x1d8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a33      	ldr	r2, [pc, #204]	; (8006054 <HAL_TIM_OC_Start_IT+0x298>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <HAL_TIM_OC_Start_IT+0x1d8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a32      	ldr	r2, [pc, #200]	; (8006058 <HAL_TIM_OC_Start_IT+0x29c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d101      	bne.n	8005f98 <HAL_TIM_OC_Start_IT+0x1dc>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <HAL_TIM_OC_Start_IT+0x1de>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a25      	ldr	r2, [pc, #148]	; (8006048 <HAL_TIM_OC_Start_IT+0x28c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc0:	d01d      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a25      	ldr	r2, [pc, #148]	; (800605c <HAL_TIM_OC_Start_IT+0x2a0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_TIM_OC_Start_IT+0x2a4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_TIM_OC_Start_IT+0x2a8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_TIM_OC_Start_IT+0x290>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <HAL_TIM_OC_Start_IT+0x2ac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_TIM_OC_Start_IT+0x242>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <HAL_TIM_OC_Start_IT+0x294>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d115      	bne.n	800602a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	4b19      	ldr	r3, [pc, #100]	; (800606c <HAL_TIM_OC_Start_IT+0x2b0>)
 8006006:	4013      	ands	r3, r2
 8006008:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b06      	cmp	r3, #6
 800600e:	d015      	beq.n	800603c <HAL_TIM_OC_Start_IT+0x280>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006016:	d011      	beq.n	800603c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006028:	e008      	b.n	800603c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e000      	b.n	800603e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40001800 	.word	0x40001800
 800606c:	00010007 	.word	0x00010007

08006070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e049      	b.n	8006116 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f841 	bl	800611e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f000 fb70 	bl	8006794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01b      	beq.n	8006196 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f06f 0202 	mvn.w	r2, #2
 8006166:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 faeb 	bl	8006758 <HAL_TIM_IC_CaptureCallback>
 8006182:	e005      	b.n	8006190 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fa fa2d 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 faee 	bl	800676c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d020      	beq.n	80061e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01b      	beq.n	80061e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0204 	mvn.w	r2, #4
 80061b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fac5 	bl	8006758 <HAL_TIM_IC_CaptureCallback>
 80061ce:	e005      	b.n	80061dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fa fa07 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fac8 	bl	800676c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d020      	beq.n	800622e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01b      	beq.n	800622e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f06f 0208 	mvn.w	r2, #8
 80061fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2204      	movs	r2, #4
 8006204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa9f 	bl	8006758 <HAL_TIM_IC_CaptureCallback>
 800621a:	e005      	b.n	8006228 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fa f9e1 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 faa2 	bl	800676c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01b      	beq.n	800627a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f06f 0210 	mvn.w	r2, #16
 800624a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2208      	movs	r2, #8
 8006250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fa79 	bl	8006758 <HAL_TIM_IC_CaptureCallback>
 8006266:	e005      	b.n	8006274 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fa f9bb 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa7c 	bl	800676c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00c      	beq.n	800629e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f06f 0201 	mvn.w	r2, #1
 8006296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fa feb9 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00c      	beq.n	80062cc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 ffba 	bl	8007240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 ffb2 	bl	8007254 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800630c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa36 	bl	8006780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0220 	mvn.w	r2, #32
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 ff7a 	bl	800722c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800635a:	2302      	movs	r3, #2
 800635c:	e0ff      	b.n	800655e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b14      	cmp	r3, #20
 800636a:	f200 80f0 	bhi.w	800654e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	080063c9 	.word	0x080063c9
 8006378:	0800654f 	.word	0x0800654f
 800637c:	0800654f 	.word	0x0800654f
 8006380:	0800654f 	.word	0x0800654f
 8006384:	08006409 	.word	0x08006409
 8006388:	0800654f 	.word	0x0800654f
 800638c:	0800654f 	.word	0x0800654f
 8006390:	0800654f 	.word	0x0800654f
 8006394:	0800644b 	.word	0x0800644b
 8006398:	0800654f 	.word	0x0800654f
 800639c:	0800654f 	.word	0x0800654f
 80063a0:	0800654f 	.word	0x0800654f
 80063a4:	0800648b 	.word	0x0800648b
 80063a8:	0800654f 	.word	0x0800654f
 80063ac:	0800654f 	.word	0x0800654f
 80063b0:	0800654f 	.word	0x0800654f
 80063b4:	080064cd 	.word	0x080064cd
 80063b8:	0800654f 	.word	0x0800654f
 80063bc:	0800654f 	.word	0x0800654f
 80063c0:	0800654f 	.word	0x0800654f
 80063c4:	0800650d 	.word	0x0800650d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fa86 	bl	80068e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0208 	orr.w	r2, r2, #8
 80063e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0204 	bic.w	r2, r2, #4
 80063f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6999      	ldr	r1, [r3, #24]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	619a      	str	r2, [r3, #24]
      break;
 8006406:	e0a5      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 faf6 	bl	8006a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6999      	ldr	r1, [r3, #24]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	619a      	str	r2, [r3, #24]
      break;
 8006448:	e084      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fb5f 	bl	8006b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0208 	orr.w	r2, r2, #8
 8006464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0204 	bic.w	r2, r2, #4
 8006474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69d9      	ldr	r1, [r3, #28]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	61da      	str	r2, [r3, #28]
      break;
 8006488:	e064      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fbc7 	bl	8006c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69d9      	ldr	r1, [r3, #28]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	021a      	lsls	r2, r3, #8
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	61da      	str	r2, [r3, #28]
      break;
 80064ca:	e043      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fc10 	bl	8006cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0208 	orr.w	r2, r2, #8
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0204 	bic.w	r2, r2, #4
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800650a:	e023      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fc54 	bl	8006dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	021a      	lsls	r2, r3, #8
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800654c:	e002      	b.n	8006554 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
      break;
 8006552:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop

08006568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIM_ConfigClockSource+0x1c>
 8006580:	2302      	movs	r3, #2
 8006582:	e0dc      	b.n	800673e <HAL_TIM_ConfigClockSource+0x1d6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4b6a      	ldr	r3, [pc, #424]	; (8006748 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a64      	ldr	r2, [pc, #400]	; (800674c <HAL_TIM_ConfigClockSource+0x1e4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	f000 80a9 	beq.w	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 80065c0:	4a62      	ldr	r2, [pc, #392]	; (800674c <HAL_TIM_ConfigClockSource+0x1e4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f200 80ae 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 80065c8:	4a61      	ldr	r2, [pc, #388]	; (8006750 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f000 80a1 	beq.w	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 80065d0:	4a5f      	ldr	r2, [pc, #380]	; (8006750 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f200 80a6 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 80065d8:	4a5e      	ldr	r2, [pc, #376]	; (8006754 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f000 8099 	beq.w	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 80065e0:	4a5c      	ldr	r2, [pc, #368]	; (8006754 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	f200 809e 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 80065e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065ec:	f000 8091 	beq.w	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 80065f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065f4:	f200 8096 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 80065f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fc:	f000 8089 	beq.w	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 8006600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006604:	f200 808e 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 8006608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660c:	d03e      	beq.n	800668c <HAL_TIM_ConfigClockSource+0x124>
 800660e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006612:	f200 8087 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	f000 8086 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x1c2>
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006622:	d87f      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 8006624:	2b70      	cmp	r3, #112	; 0x70
 8006626:	d01a      	beq.n	800665e <HAL_TIM_ConfigClockSource+0xf6>
 8006628:	2b70      	cmp	r3, #112	; 0x70
 800662a:	d87b      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 800662c:	2b60      	cmp	r3, #96	; 0x60
 800662e:	d050      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x16a>
 8006630:	2b60      	cmp	r3, #96	; 0x60
 8006632:	d877      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 8006634:	2b50      	cmp	r3, #80	; 0x50
 8006636:	d03c      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x14a>
 8006638:	2b50      	cmp	r3, #80	; 0x50
 800663a:	d873      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d058      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x18a>
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d86f      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d064      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d86b      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d060      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d867      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d05c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 8006658:	2b10      	cmp	r3, #16
 800665a:	d05a      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x1aa>
 800665c:	e062      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6899      	ldr	r1, [r3, #8]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f000 fc8b 	bl	8006f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	609a      	str	r2, [r3, #8]
      break;
 800668a:	e04f      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6899      	ldr	r1, [r3, #8]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f000 fc74 	bl	8006f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ae:	609a      	str	r2, [r3, #8]
      break;
 80066b0:	e03c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	f000 fbe4 	bl	8006e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2150      	movs	r1, #80	; 0x50
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fc3e 	bl	8006f4c <TIM_ITRx_SetConfig>
      break;
 80066d0:	e02c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	461a      	mov	r2, r3
 80066e0:	f000 fc03 	bl	8006eea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2160      	movs	r1, #96	; 0x60
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fc2e 	bl	8006f4c <TIM_ITRx_SetConfig>
      break;
 80066f0:	e01c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f000 fbc4 	bl	8006e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2140      	movs	r1, #64	; 0x40
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fc1e 	bl	8006f4c <TIM_ITRx_SetConfig>
      break;
 8006710:	e00c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f000 fc15 	bl	8006f4c <TIM_ITRx_SetConfig>
      break;
 8006722:	e003      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e000      	b.n	800672c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800672a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	ffceff88 	.word	0xffceff88
 800674c:	00100040 	.word	0x00100040
 8006750:	00100030 	.word	0x00100030
 8006754:	00100020 	.word	0x00100020

08006758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a46      	ldr	r2, [pc, #280]	; (80068c0 <TIM_Base_SetConfig+0x12c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d00f      	beq.n	80067d4 <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a43      	ldr	r2, [pc, #268]	; (80068c4 <TIM_Base_SetConfig+0x130>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a42      	ldr	r2, [pc, #264]	; (80068c8 <TIM_Base_SetConfig+0x134>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a41      	ldr	r2, [pc, #260]	; (80068cc <TIM_Base_SetConfig+0x138>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a40      	ldr	r2, [pc, #256]	; (80068d0 <TIM_Base_SetConfig+0x13c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d108      	bne.n	80067e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a35      	ldr	r2, [pc, #212]	; (80068c0 <TIM_Base_SetConfig+0x12c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01f      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f4:	d01b      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a32      	ldr	r2, [pc, #200]	; (80068c4 <TIM_Base_SetConfig+0x130>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d017      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a31      	ldr	r2, [pc, #196]	; (80068c8 <TIM_Base_SetConfig+0x134>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a30      	ldr	r2, [pc, #192]	; (80068cc <TIM_Base_SetConfig+0x138>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00f      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2f      	ldr	r2, [pc, #188]	; (80068d0 <TIM_Base_SetConfig+0x13c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00b      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2e      	ldr	r2, [pc, #184]	; (80068d4 <TIM_Base_SetConfig+0x140>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2d      	ldr	r2, [pc, #180]	; (80068d8 <TIM_Base_SetConfig+0x144>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_Base_SetConfig+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2c      	ldr	r2, [pc, #176]	; (80068dc <TIM_Base_SetConfig+0x148>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d108      	bne.n	8006840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_Base_SetConfig+0x12c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00f      	beq.n	800688c <TIM_Base_SetConfig+0xf8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <TIM_Base_SetConfig+0x13c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_Base_SetConfig+0xf8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a17      	ldr	r2, [pc, #92]	; (80068d4 <TIM_Base_SetConfig+0x140>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_Base_SetConfig+0xf8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <TIM_Base_SetConfig+0x144>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_Base_SetConfig+0xf8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a15      	ldr	r2, [pc, #84]	; (80068dc <TIM_Base_SetConfig+0x148>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d103      	bne.n	8006894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	611a      	str	r2, [r3, #16]
  }
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40010400 	.word	0x40010400
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40014400 	.word	0x40014400
 80068dc:	40014800 	.word	0x40014800

080068e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f023 0201 	bic.w	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4b37      	ldr	r3, [pc, #220]	; (80069e8 <TIM_OC1_SetConfig+0x108>)
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f023 0302 	bic.w	r3, r3, #2
 8006928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <TIM_OC1_SetConfig+0x10c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00f      	beq.n	800695c <TIM_OC1_SetConfig+0x7c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2c      	ldr	r2, [pc, #176]	; (80069f0 <TIM_OC1_SetConfig+0x110>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_OC1_SetConfig+0x7c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2b      	ldr	r2, [pc, #172]	; (80069f4 <TIM_OC1_SetConfig+0x114>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_OC1_SetConfig+0x7c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a2a      	ldr	r2, [pc, #168]	; (80069f8 <TIM_OC1_SetConfig+0x118>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC1_SetConfig+0x7c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a29      	ldr	r2, [pc, #164]	; (80069fc <TIM_OC1_SetConfig+0x11c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10c      	bne.n	8006976 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0308 	bic.w	r3, r3, #8
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <TIM_OC1_SetConfig+0x10c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00f      	beq.n	800699e <TIM_OC1_SetConfig+0xbe>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <TIM_OC1_SetConfig+0x110>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <TIM_OC1_SetConfig+0xbe>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <TIM_OC1_SetConfig+0x114>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <TIM_OC1_SetConfig+0xbe>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <TIM_OC1_SetConfig+0x118>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_OC1_SetConfig+0xbe>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <TIM_OC1_SetConfig+0x11c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d111      	bne.n	80069c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	fffeff8f 	.word	0xfffeff8f
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800

08006a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f023 0210 	bic.w	r2, r3, #16
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4b34      	ldr	r3, [pc, #208]	; (8006afc <TIM_OC2_SetConfig+0xfc>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <TIM_OC2_SetConfig+0x100>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x68>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <TIM_OC2_SetConfig+0x104>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10d      	bne.n	8006a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <TIM_OC2_SetConfig+0x100>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC2_SetConfig+0xac>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <TIM_OC2_SetConfig+0x104>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_OC2_SetConfig+0xac>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <TIM_OC2_SetConfig+0x108>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC2_SetConfig+0xac>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <TIM_OC2_SetConfig+0x10c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC2_SetConfig+0xac>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1a      	ldr	r2, [pc, #104]	; (8006b10 <TIM_OC2_SetConfig+0x110>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d113      	bne.n	8006ad4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	feff8fff 	.word	0xfeff8fff
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800

08006b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <TIM_OC3_SetConfig+0xf8>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a28      	ldr	r2, [pc, #160]	; (8006c10 <TIM_OC3_SetConfig+0xfc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_OC3_SetConfig+0x66>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a27      	ldr	r2, [pc, #156]	; (8006c14 <TIM_OC3_SetConfig+0x100>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10d      	bne.n	8006b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <TIM_OC3_SetConfig+0xfc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00f      	beq.n	8006bbe <TIM_OC3_SetConfig+0xaa>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <TIM_OC3_SetConfig+0x100>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00b      	beq.n	8006bbe <TIM_OC3_SetConfig+0xaa>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <TIM_OC3_SetConfig+0x104>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_OC3_SetConfig+0xaa>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1a      	ldr	r2, [pc, #104]	; (8006c1c <TIM_OC3_SetConfig+0x108>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC3_SetConfig+0xaa>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a19      	ldr	r2, [pc, #100]	; (8006c20 <TIM_OC3_SetConfig+0x10c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d113      	bne.n	8006be6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	fffeff8f 	.word	0xfffeff8f
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <TIM_OC4_SetConfig+0xbc>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <TIM_OC4_SetConfig+0xc0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00f      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x80>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a18      	ldr	r2, [pc, #96]	; (8006ce8 <TIM_OC4_SetConfig+0xc4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a17      	ldr	r2, [pc, #92]	; (8006cec <TIM_OC4_SetConfig+0xc8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <TIM_OC4_SetConfig+0xcc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <TIM_OC4_SetConfig+0xd0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d109      	bne.n	8006cb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	019b      	lsls	r3, r3, #6
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	feff8fff 	.word	0xfeff8fff
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800

08006cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <TIM_OC5_SetConfig+0xb0>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a18      	ldr	r2, [pc, #96]	; (8006dac <TIM_OC5_SetConfig+0xb4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <TIM_OC5_SetConfig+0x76>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <TIM_OC5_SetConfig+0xb8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <TIM_OC5_SetConfig+0x76>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a16      	ldr	r2, [pc, #88]	; (8006db4 <TIM_OC5_SetConfig+0xbc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <TIM_OC5_SetConfig+0x76>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <TIM_OC5_SetConfig+0xc0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC5_SetConfig+0x76>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a14      	ldr	r2, [pc, #80]	; (8006dbc <TIM_OC5_SetConfig+0xc4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d109      	bne.n	8006d82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	621a      	str	r2, [r3, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	fffeff8f 	.word	0xfffeff8f
 8006dac:	40010000 	.word	0x40010000
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800

08006dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4b22      	ldr	r3, [pc, #136]	; (8006e74 <TIM_OC6_SetConfig+0xb4>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	051b      	lsls	r3, r3, #20
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a19      	ldr	r2, [pc, #100]	; (8006e78 <TIM_OC6_SetConfig+0xb8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00f      	beq.n	8006e38 <TIM_OC6_SetConfig+0x78>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <TIM_OC6_SetConfig+0xbc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <TIM_OC6_SetConfig+0x78>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <TIM_OC6_SetConfig+0xc0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC6_SetConfig+0x78>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <TIM_OC6_SetConfig+0xc4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC6_SetConfig+0x78>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <TIM_OC6_SetConfig+0xc8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	feff8fff 	.word	0xfeff8fff
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40010400 	.word	0x40010400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 030a 	bic.w	r3, r3, #10
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b087      	sub	sp, #28
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f023 0210 	bic.w	r2, r3, #16
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	031b      	lsls	r3, r3, #12
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <TIM_ITRx_SetConfig+0x38>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f043 0307 	orr.w	r3, r3, #7
 8006f6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	609a      	str	r2, [r3, #8]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	ffcfff8f 	.word	0xffcfff8f

08006f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	021a      	lsls	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2201      	movs	r2, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1a      	ldr	r2, [r3, #32]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	401a      	ands	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1a      	ldr	r2, [r3, #32]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8007000:	431a      	orrs	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e06d      	b.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a30      	ldr	r2, [pc, #192]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a20      	ldr	r2, [pc, #128]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d022      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709e:	d01d      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d10c      	bne.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40001800 	.word	0x40001800
 800712c:	40014000 	.word	0x40014000

08007130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007148:	2302      	movs	r3, #2
 800714a:	e065      	b.n	8007218 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	041b      	lsls	r3, r3, #16
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a16      	ldr	r2, [pc, #88]	; (8007224 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d115      	bne.n	8007206 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	051b      	lsls	r3, r3, #20
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40010000 	.word	0x40010000
 8007228:	40010400 	.word	0x40010400

0800722c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e042      	b.n	8007300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fa f8a7 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	; 0x24
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f9b6 	bl	8008624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc4b 	bl	8007b54 <UART_SetConfig>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e01b      	b.n	8007300 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fa35 	bl	8008768 <UART_CheckIdleState>
 80072fe:	4603      	mov	r3, r0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731c:	2b20      	cmp	r3, #32
 800731e:	d137      	bne.n	8007390 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_UART_Receive_IT+0x24>
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e030      	b.n	8007392 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a18      	ldr	r2, [pc, #96]	; (800739c <HAL_UART_Receive_IT+0x94>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01f      	beq.n	8007380 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d018      	beq.n	8007380 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	69f9      	ldr	r1, [r7, #28]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	61bb      	str	r3, [r7, #24]
   return(result);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007380:	88fb      	ldrh	r3, [r7, #6]
 8007382:	461a      	mov	r2, r3
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 fb06 	bl	8008998 <UART_Start_Receive_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	e000      	b.n	8007392 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007390:	2302      	movs	r3, #2
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3728      	adds	r7, #40	; 0x28
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	58000c00 	.word	0x58000c00

080073a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b0ba      	sub	sp, #232	; 0xe8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80073ce:	4013      	ands	r3, r2
 80073d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11b      	bne.n	8007414 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d015      	beq.n	8007414 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d105      	bne.n	8007400 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8377 	beq.w	8007af8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
      }
      return;
 8007412:	e371      	b.n	8007af8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8123 	beq.w	8007664 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800741e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007422:	4b8d      	ldr	r3, [pc, #564]	; (8007658 <HAL_UART_IRQHandler+0x2b8>)
 8007424:	4013      	ands	r3, r2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800742a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800742e:	4b8b      	ldr	r3, [pc, #556]	; (800765c <HAL_UART_IRQHandler+0x2bc>)
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8116 	beq.w	8007664 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d011      	beq.n	8007468 <HAL_UART_IRQHandler+0xc8>
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2201      	movs	r2, #1
 8007456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f043 0201 	orr.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d011      	beq.n	8007498 <HAL_UART_IRQHandler+0xf8>
 8007474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2202      	movs	r2, #2
 8007486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	f043 0204 	orr.w	r2, r3, #4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d011      	beq.n	80074c8 <HAL_UART_IRQHandler+0x128>
 80074a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2204      	movs	r2, #4
 80074b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f043 0202 	orr.w	r2, r3, #2
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d017      	beq.n	8007504 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074e4:	4b5c      	ldr	r3, [pc, #368]	; (8007658 <HAL_UART_IRQHandler+0x2b8>)
 80074e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2208      	movs	r2, #8
 80074f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	f043 0208 	orr.w	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750c:	2b00      	cmp	r3, #0
 800750e:	d012      	beq.n	8007536 <HAL_UART_IRQHandler+0x196>
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	f043 0220 	orr.w	r2, r3, #32
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 82dd 	beq.w	8007afc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d013      	beq.n	8007576 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800754e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800755a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d005      	beq.n	800759a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800758e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007592:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007596:	2b00      	cmp	r3, #0
 8007598:	d054      	beq.n	8007644 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fb1e 	bl	8008bdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d146      	bne.n	800763c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3308      	adds	r3, #8
 80075b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3308      	adds	r3, #8
 80075d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1d9      	bne.n	80075ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760a:	4a15      	ldr	r2, [pc, #84]	; (8007660 <HAL_UART_IRQHandler+0x2c0>)
 800760c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007614:	4618      	mov	r0, r3
 8007616:	f7fa fe0b 	bl	8002230 <HAL_DMA_Abort_IT>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d019      	beq.n	8007654 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800762e:	4610      	mov	r0, r2
 8007630:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007632:	e00f      	b.n	8007654 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fa77 	bl	8007b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	e00b      	b.n	8007654 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa73 	bl	8007b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007642:	e007      	b.n	8007654 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa6f 	bl	8007b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007652:	e253      	b.n	8007afc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	bf00      	nop
    return;
 8007656:	e251      	b.n	8007afc <HAL_UART_IRQHandler+0x75c>
 8007658:	10000001 	.word	0x10000001
 800765c:	04000120 	.word	0x04000120
 8007660:	08008ca9 	.word	0x08008ca9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 81e7 	bne.w	8007a3c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 81e0 	beq.w	8007a3c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800767c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 81d9 	beq.w	8007a3c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2210      	movs	r2, #16
 8007690:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769c:	2b40      	cmp	r3, #64	; 0x40
 800769e:	f040 8151 	bne.w	8007944 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a96      	ldr	r2, [pc, #600]	; (8007904 <HAL_UART_IRQHandler+0x564>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d068      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a93      	ldr	r2, [pc, #588]	; (8007908 <HAL_UART_IRQHandler+0x568>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d061      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a91      	ldr	r2, [pc, #580]	; (800790c <HAL_UART_IRQHandler+0x56c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d05a      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a8e      	ldr	r2, [pc, #568]	; (8007910 <HAL_UART_IRQHandler+0x570>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d053      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a8c      	ldr	r2, [pc, #560]	; (8007914 <HAL_UART_IRQHandler+0x574>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d04c      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a89      	ldr	r2, [pc, #548]	; (8007918 <HAL_UART_IRQHandler+0x578>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d045      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a87      	ldr	r2, [pc, #540]	; (800791c <HAL_UART_IRQHandler+0x57c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d03e      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a84      	ldr	r2, [pc, #528]	; (8007920 <HAL_UART_IRQHandler+0x580>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d037      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a82      	ldr	r2, [pc, #520]	; (8007924 <HAL_UART_IRQHandler+0x584>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d030      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a7f      	ldr	r2, [pc, #508]	; (8007928 <HAL_UART_IRQHandler+0x588>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d029      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a7d      	ldr	r2, [pc, #500]	; (800792c <HAL_UART_IRQHandler+0x58c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d022      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7a      	ldr	r2, [pc, #488]	; (8007930 <HAL_UART_IRQHandler+0x590>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01b      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a78      	ldr	r2, [pc, #480]	; (8007934 <HAL_UART_IRQHandler+0x594>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d014      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a75      	ldr	r2, [pc, #468]	; (8007938 <HAL_UART_IRQHandler+0x598>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00d      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a73      	ldr	r2, [pc, #460]	; (800793c <HAL_UART_IRQHandler+0x59c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d006      	beq.n	8007782 <HAL_UART_IRQHandler+0x3e2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a70      	ldr	r2, [pc, #448]	; (8007940 <HAL_UART_IRQHandler+0x5a0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d106      	bne.n	8007790 <HAL_UART_IRQHandler+0x3f0>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	b29b      	uxth	r3, r3
 800778e:	e005      	b.n	800779c <HAL_UART_IRQHandler+0x3fc>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 81ab 	beq.w	8007b00 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077b4:	429a      	cmp	r2, r3
 80077b6:	f080 81a3 	bcs.w	8007b00 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d0:	f000 8087 	beq.w	80078e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007802:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800780a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1da      	bne.n	80077d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800782e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800784a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e1      	bne.n	800781e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800786a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800786c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800787e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800788c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e3      	bne.n	800785a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b0:	f023 0310 	bic.w	r3, r3, #16
 80078b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80078c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e4      	bne.n	80078a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fa f989 	bl	8001bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f91d 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007902:	e0fd      	b.n	8007b00 <HAL_UART_IRQHandler+0x760>
 8007904:	40020010 	.word	0x40020010
 8007908:	40020028 	.word	0x40020028
 800790c:	40020040 	.word	0x40020040
 8007910:	40020058 	.word	0x40020058
 8007914:	40020070 	.word	0x40020070
 8007918:	40020088 	.word	0x40020088
 800791c:	400200a0 	.word	0x400200a0
 8007920:	400200b8 	.word	0x400200b8
 8007924:	40020410 	.word	0x40020410
 8007928:	40020428 	.word	0x40020428
 800792c:	40020440 	.word	0x40020440
 8007930:	40020458 	.word	0x40020458
 8007934:	40020470 	.word	0x40020470
 8007938:	40020488 	.word	0x40020488
 800793c:	400204a0 	.word	0x400204a0
 8007940:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007950:	b29b      	uxth	r3, r3
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 80cf 	beq.w	8007b04 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007966:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80ca 	beq.w	8007b04 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007992:	647b      	str	r3, [r7, #68]	; 0x44
 8007994:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e4      	bne.n	8007970 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	623b      	str	r3, [r7, #32]
   return(result);
 80079b6:	6a3a      	ldr	r2, [r7, #32]
 80079b8:	4b55      	ldr	r3, [pc, #340]	; (8007b10 <HAL_UART_IRQHandler+0x770>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079ca:	633a      	str	r2, [r7, #48]	; 0x30
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e3      	bne.n	80079a6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0310 	bic.w	r3, r3, #16
 8007a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	69b9      	ldr	r1, [r7, #24]
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	617b      	str	r3, [r7, #20]
   return(result);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e4      	bne.n	80079f2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f881 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a3a:	e063      	b.n	8007b04 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00e      	beq.n	8007a66 <HAL_UART_IRQHandler+0x6c6>
 8007a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fe80 	bl	8009764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a64:	e051      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d014      	beq.n	8007a9c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d03a      	beq.n	8007b08 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
    }
    return;
 8007a9a:	e035      	b.n	8007b08 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d009      	beq.n	8007abc <HAL_UART_IRQHandler+0x71c>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f90d 	bl	8008cd4 <UART_EndTransmit_IT>
    return;
 8007aba:	e026      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d009      	beq.n	8007adc <HAL_UART_IRQHandler+0x73c>
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fe59 	bl	800978c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ada:	e016      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d010      	beq.n	8007b0a <HAL_UART_IRQHandler+0x76a>
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	da0c      	bge.n	8007b0a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fe41 	bl	8009778 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af6:	e008      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
      return;
 8007af8:	bf00      	nop
 8007afa:	e006      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
    return;
 8007afc:	bf00      	nop
 8007afe:	e004      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
      return;
 8007b00:	bf00      	nop
 8007b02:	e002      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
      return;
 8007b04:	bf00      	nop
 8007b06:	e000      	b.n	8007b0a <HAL_UART_IRQHandler+0x76a>
    return;
 8007b08:	bf00      	nop
  }
}
 8007b0a:	37e8      	adds	r7, #232	; 0xe8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	effffffe 	.word	0xeffffffe

08007b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b58:	b092      	sub	sp, #72	; 0x48
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4bbe      	ldr	r3, [pc, #760]	; (8007e7c <UART_SetConfig+0x328>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4ab3      	ldr	r2, [pc, #716]	; (8007e80 <UART_SetConfig+0x32c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	4baf      	ldr	r3, [pc, #700]	; (8007e84 <UART_SetConfig+0x330>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	f023 010f 	bic.w	r1, r3, #15
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4aa6      	ldr	r2, [pc, #664]	; (8007e88 <UART_SetConfig+0x334>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d177      	bne.n	8007ce4 <UART_SetConfig+0x190>
 8007bf4:	4ba5      	ldr	r3, [pc, #660]	; (8007e8c <UART_SetConfig+0x338>)
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bfc:	2b28      	cmp	r3, #40	; 0x28
 8007bfe:	d86d      	bhi.n	8007cdc <UART_SetConfig+0x188>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <UART_SetConfig+0xb4>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007cad 	.word	0x08007cad
 8007c0c:	08007cdd 	.word	0x08007cdd
 8007c10:	08007cdd 	.word	0x08007cdd
 8007c14:	08007cdd 	.word	0x08007cdd
 8007c18:	08007cdd 	.word	0x08007cdd
 8007c1c:	08007cdd 	.word	0x08007cdd
 8007c20:	08007cdd 	.word	0x08007cdd
 8007c24:	08007cdd 	.word	0x08007cdd
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cdd 	.word	0x08007cdd
 8007c30:	08007cdd 	.word	0x08007cdd
 8007c34:	08007cdd 	.word	0x08007cdd
 8007c38:	08007cdd 	.word	0x08007cdd
 8007c3c:	08007cdd 	.word	0x08007cdd
 8007c40:	08007cdd 	.word	0x08007cdd
 8007c44:	08007cdd 	.word	0x08007cdd
 8007c48:	08007cbd 	.word	0x08007cbd
 8007c4c:	08007cdd 	.word	0x08007cdd
 8007c50:	08007cdd 	.word	0x08007cdd
 8007c54:	08007cdd 	.word	0x08007cdd
 8007c58:	08007cdd 	.word	0x08007cdd
 8007c5c:	08007cdd 	.word	0x08007cdd
 8007c60:	08007cdd 	.word	0x08007cdd
 8007c64:	08007cdd 	.word	0x08007cdd
 8007c68:	08007cc5 	.word	0x08007cc5
 8007c6c:	08007cdd 	.word	0x08007cdd
 8007c70:	08007cdd 	.word	0x08007cdd
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007cdd 	.word	0x08007cdd
 8007c7c:	08007cdd 	.word	0x08007cdd
 8007c80:	08007cdd 	.word	0x08007cdd
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007ccd 	.word	0x08007ccd
 8007c8c:	08007cdd 	.word	0x08007cdd
 8007c90:	08007cdd 	.word	0x08007cdd
 8007c94:	08007cdd 	.word	0x08007cdd
 8007c98:	08007cdd 	.word	0x08007cdd
 8007c9c:	08007cdd 	.word	0x08007cdd
 8007ca0:	08007cdd 	.word	0x08007cdd
 8007ca4:	08007cdd 	.word	0x08007cdd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb2:	e222      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e21e      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e21a      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e216      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e212      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e20e      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e20a      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a69      	ldr	r2, [pc, #420]	; (8007e90 <UART_SetConfig+0x33c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d130      	bne.n	8007d50 <UART_SetConfig+0x1fc>
 8007cee:	4b67      	ldr	r3, [pc, #412]	; (8007e8c <UART_SetConfig+0x338>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d826      	bhi.n	8007d48 <UART_SetConfig+0x1f4>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <UART_SetConfig+0x1ac>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d19 	.word	0x08007d19
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d41 	.word	0x08007d41
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e1ec      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d20:	2304      	movs	r3, #4
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e1e8      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e1e4      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d30:	2310      	movs	r3, #16
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e1e0      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e1dc      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e1d8      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e1d4      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a4f      	ldr	r2, [pc, #316]	; (8007e94 <UART_SetConfig+0x340>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d130      	bne.n	8007dbc <UART_SetConfig+0x268>
 8007d5a:	4b4c      	ldr	r3, [pc, #304]	; (8007e8c <UART_SetConfig+0x338>)
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d826      	bhi.n	8007db4 <UART_SetConfig+0x260>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0x218>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007da5 	.word	0x08007da5
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e1b6      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e1b2      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e1ae      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e1aa      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007da4:	2320      	movs	r3, #32
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e1a6      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e1a2      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e19e      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a35      	ldr	r2, [pc, #212]	; (8007e98 <UART_SetConfig+0x344>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d130      	bne.n	8007e28 <UART_SetConfig+0x2d4>
 8007dc6:	4b31      	ldr	r3, [pc, #196]	; (8007e8c <UART_SetConfig+0x338>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d826      	bhi.n	8007e20 <UART_SetConfig+0x2cc>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x284>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007df9 	.word	0x08007df9
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e11 	.word	0x08007e11
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e180      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e17c      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e178      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e174      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e10:	2320      	movs	r3, #32
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e170      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e16c      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e168      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1b      	ldr	r2, [pc, #108]	; (8007e9c <UART_SetConfig+0x348>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d142      	bne.n	8007eb8 <UART_SetConfig+0x364>
 8007e32:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <UART_SetConfig+0x338>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d838      	bhi.n	8007eb0 <UART_SetConfig+0x35c>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <UART_SetConfig+0x2f0>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007ea1 	.word	0x08007ea1
 8007e58:	08007ea9 	.word	0x08007ea9
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e14a      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e146      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e142      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e13e      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007e7c:	cfff69f3 	.word	0xcfff69f3
 8007e80:	58000c00 	.word	0x58000c00
 8007e84:	11fff4ff 	.word	0x11fff4ff
 8007e88:	40011000 	.word	0x40011000
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	40004400 	.word	0x40004400
 8007e94:	40004800 	.word	0x40004800
 8007e98:	40004c00 	.word	0x40004c00
 8007e9c:	40005000 	.word	0x40005000
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea6:	e128      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e124      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007eb0:	2380      	movs	r3, #128	; 0x80
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e120      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4acb      	ldr	r2, [pc, #812]	; (80081ec <UART_SetConfig+0x698>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d176      	bne.n	8007fb0 <UART_SetConfig+0x45c>
 8007ec2:	4bcb      	ldr	r3, [pc, #812]	; (80081f0 <UART_SetConfig+0x69c>)
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eca:	2b28      	cmp	r3, #40	; 0x28
 8007ecc:	d86c      	bhi.n	8007fa8 <UART_SetConfig+0x454>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <UART_SetConfig+0x380>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007f79 	.word	0x08007f79
 8007ed8:	08007fa9 	.word	0x08007fa9
 8007edc:	08007fa9 	.word	0x08007fa9
 8007ee0:	08007fa9 	.word	0x08007fa9
 8007ee4:	08007fa9 	.word	0x08007fa9
 8007ee8:	08007fa9 	.word	0x08007fa9
 8007eec:	08007fa9 	.word	0x08007fa9
 8007ef0:	08007fa9 	.word	0x08007fa9
 8007ef4:	08007f81 	.word	0x08007f81
 8007ef8:	08007fa9 	.word	0x08007fa9
 8007efc:	08007fa9 	.word	0x08007fa9
 8007f00:	08007fa9 	.word	0x08007fa9
 8007f04:	08007fa9 	.word	0x08007fa9
 8007f08:	08007fa9 	.word	0x08007fa9
 8007f0c:	08007fa9 	.word	0x08007fa9
 8007f10:	08007fa9 	.word	0x08007fa9
 8007f14:	08007f89 	.word	0x08007f89
 8007f18:	08007fa9 	.word	0x08007fa9
 8007f1c:	08007fa9 	.word	0x08007fa9
 8007f20:	08007fa9 	.word	0x08007fa9
 8007f24:	08007fa9 	.word	0x08007fa9
 8007f28:	08007fa9 	.word	0x08007fa9
 8007f2c:	08007fa9 	.word	0x08007fa9
 8007f30:	08007fa9 	.word	0x08007fa9
 8007f34:	08007f91 	.word	0x08007f91
 8007f38:	08007fa9 	.word	0x08007fa9
 8007f3c:	08007fa9 	.word	0x08007fa9
 8007f40:	08007fa9 	.word	0x08007fa9
 8007f44:	08007fa9 	.word	0x08007fa9
 8007f48:	08007fa9 	.word	0x08007fa9
 8007f4c:	08007fa9 	.word	0x08007fa9
 8007f50:	08007fa9 	.word	0x08007fa9
 8007f54:	08007f99 	.word	0x08007f99
 8007f58:	08007fa9 	.word	0x08007fa9
 8007f5c:	08007fa9 	.word	0x08007fa9
 8007f60:	08007fa9 	.word	0x08007fa9
 8007f64:	08007fa9 	.word	0x08007fa9
 8007f68:	08007fa9 	.word	0x08007fa9
 8007f6c:	08007fa9 	.word	0x08007fa9
 8007f70:	08007fa9 	.word	0x08007fa9
 8007f74:	08007fa1 	.word	0x08007fa1
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7e:	e0bc      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e0b8      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e0b4      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e0b0      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007f98:	2320      	movs	r3, #32
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e0ac      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007fa0:	2340      	movs	r3, #64	; 0x40
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e0a8      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007fa8:	2380      	movs	r3, #128	; 0x80
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e0a4      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a8f      	ldr	r2, [pc, #572]	; (80081f4 <UART_SetConfig+0x6a0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d130      	bne.n	800801c <UART_SetConfig+0x4c8>
 8007fba:	4b8d      	ldr	r3, [pc, #564]	; (80081f0 <UART_SetConfig+0x69c>)
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d826      	bhi.n	8008014 <UART_SetConfig+0x4c0>
 8007fc6:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <UART_SetConfig+0x478>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fe5 	.word	0x08007fe5
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e086      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e082      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e07e      	b.n	80080fa <UART_SetConfig+0x5a6>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e07a      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008004:	2320      	movs	r3, #32
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e076      	b.n	80080fa <UART_SetConfig+0x5a6>
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e072      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e06e      	b.n	80080fa <UART_SetConfig+0x5a6>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a75      	ldr	r2, [pc, #468]	; (80081f8 <UART_SetConfig+0x6a4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d130      	bne.n	8008088 <UART_SetConfig+0x534>
 8008026:	4b72      	ldr	r3, [pc, #456]	; (80081f0 <UART_SetConfig+0x69c>)
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b05      	cmp	r3, #5
 8008030:	d826      	bhi.n	8008080 <UART_SetConfig+0x52c>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <UART_SetConfig+0x4e4>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008051 	.word	0x08008051
 800803c:	08008059 	.word	0x08008059
 8008040:	08008061 	.word	0x08008061
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e050      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e04c      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e048      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e044      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008070:	2320      	movs	r3, #32
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e040      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e03c      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e038      	b.n	80080fa <UART_SetConfig+0x5a6>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a5b      	ldr	r2, [pc, #364]	; (80081fc <UART_SetConfig+0x6a8>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d130      	bne.n	80080f4 <UART_SetConfig+0x5a0>
 8008092:	4b57      	ldr	r3, [pc, #348]	; (80081f0 <UART_SetConfig+0x69c>)
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	2b05      	cmp	r3, #5
 800809c:	d826      	bhi.n	80080ec <UART_SetConfig+0x598>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x550>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080bd 	.word	0x080080bd
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080cd 	.word	0x080080cd
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e01a      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e016      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e012      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e00e      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080dc:	2320      	movs	r3, #32
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e00a      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e006      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e002      	b.n	80080fa <UART_SetConfig+0x5a6>
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a3f      	ldr	r2, [pc, #252]	; (80081fc <UART_SetConfig+0x6a8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	f040 80f8 	bne.w	80082f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008106:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800810a:	2b20      	cmp	r3, #32
 800810c:	dc46      	bgt.n	800819c <UART_SetConfig+0x648>
 800810e:	2b02      	cmp	r3, #2
 8008110:	f2c0 8082 	blt.w	8008218 <UART_SetConfig+0x6c4>
 8008114:	3b02      	subs	r3, #2
 8008116:	2b1e      	cmp	r3, #30
 8008118:	d87e      	bhi.n	8008218 <UART_SetConfig+0x6c4>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <UART_SetConfig+0x5cc>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	080081a3 	.word	0x080081a3
 8008124:	08008219 	.word	0x08008219
 8008128:	080081ab 	.word	0x080081ab
 800812c:	08008219 	.word	0x08008219
 8008130:	08008219 	.word	0x08008219
 8008134:	08008219 	.word	0x08008219
 8008138:	080081bb 	.word	0x080081bb
 800813c:	08008219 	.word	0x08008219
 8008140:	08008219 	.word	0x08008219
 8008144:	08008219 	.word	0x08008219
 8008148:	08008219 	.word	0x08008219
 800814c:	08008219 	.word	0x08008219
 8008150:	08008219 	.word	0x08008219
 8008154:	08008219 	.word	0x08008219
 8008158:	080081cb 	.word	0x080081cb
 800815c:	08008219 	.word	0x08008219
 8008160:	08008219 	.word	0x08008219
 8008164:	08008219 	.word	0x08008219
 8008168:	08008219 	.word	0x08008219
 800816c:	08008219 	.word	0x08008219
 8008170:	08008219 	.word	0x08008219
 8008174:	08008219 	.word	0x08008219
 8008178:	08008219 	.word	0x08008219
 800817c:	08008219 	.word	0x08008219
 8008180:	08008219 	.word	0x08008219
 8008184:	08008219 	.word	0x08008219
 8008188:	08008219 	.word	0x08008219
 800818c:	08008219 	.word	0x08008219
 8008190:	08008219 	.word	0x08008219
 8008194:	08008219 	.word	0x08008219
 8008198:	0800820b 	.word	0x0800820b
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	d037      	beq.n	8008210 <UART_SetConfig+0x6bc>
 80081a0:	e03a      	b.n	8008218 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081a2:	f7fc ffdb 	bl	800515c <HAL_RCCEx_GetD3PCLK1Freq>
 80081a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081a8:	e03c      	b.n	8008224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fc ffea 	bl	8005188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b8:	e034      	b.n	8008224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ba:	f107 0318 	add.w	r3, r7, #24
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fd f936 	bl	8005430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c8:	e02c      	b.n	8008224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <UART_SetConfig+0x69c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d016      	beq.n	8008204 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081d6:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <UART_SetConfig+0x69c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	4a07      	ldr	r2, [pc, #28]	; (8008200 <UART_SetConfig+0x6ac>)
 80081e2:	fa22 f303 	lsr.w	r3, r2, r3
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081e8:	e01c      	b.n	8008224 <UART_SetConfig+0x6d0>
 80081ea:	bf00      	nop
 80081ec:	40011400 	.word	0x40011400
 80081f0:	58024400 	.word	0x58024400
 80081f4:	40007800 	.word	0x40007800
 80081f8:	40007c00 	.word	0x40007c00
 80081fc:	58000c00 	.word	0x58000c00
 8008200:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008204:	4b9d      	ldr	r3, [pc, #628]	; (800847c <UART_SetConfig+0x928>)
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008208:	e00c      	b.n	8008224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800820a:	4b9d      	ldr	r3, [pc, #628]	; (8008480 <UART_SetConfig+0x92c>)
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800820e:	e009      	b.n	8008224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008216:	e005      	b.n	8008224 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008222:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 81de 	beq.w	80085e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	4a94      	ldr	r2, [pc, #592]	; (8008484 <UART_SetConfig+0x930>)
 8008232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008236:	461a      	mov	r2, r3
 8008238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823a:	fbb3 f3f2 	udiv	r3, r3, r2
 800823e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	4413      	add	r3, r2
 800824a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824c:	429a      	cmp	r2, r3
 800824e:	d305      	bcc.n	800825c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008258:	429a      	cmp	r2, r3
 800825a:	d903      	bls.n	8008264 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008262:	e1c1      	b.n	80085e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	2200      	movs	r2, #0
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	60fa      	str	r2, [r7, #12]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	4a84      	ldr	r2, [pc, #528]	; (8008484 <UART_SetConfig+0x930>)
 8008272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008276:	b29b      	uxth	r3, r3
 8008278:	2200      	movs	r2, #0
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008286:	f7f8 f82b 	bl	80002e0 <__aeabi_uldivmod>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	f04f 0300 	mov.w	r3, #0
 800829a:	020b      	lsls	r3, r1, #8
 800829c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082a0:	0202      	lsls	r2, r0, #8
 80082a2:	6979      	ldr	r1, [r7, #20]
 80082a4:	6849      	ldr	r1, [r1, #4]
 80082a6:	0849      	lsrs	r1, r1, #1
 80082a8:	2000      	movs	r0, #0
 80082aa:	460c      	mov	r4, r1
 80082ac:	4605      	mov	r5, r0
 80082ae:	eb12 0804 	adds.w	r8, r2, r4
 80082b2:	eb43 0905 	adc.w	r9, r3, r5
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	469a      	mov	sl, r3
 80082be:	4693      	mov	fp, r2
 80082c0:	4652      	mov	r2, sl
 80082c2:	465b      	mov	r3, fp
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 f80a 	bl	80002e0 <__aeabi_uldivmod>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4613      	mov	r3, r2
 80082d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082da:	d308      	bcc.n	80082ee <UART_SetConfig+0x79a>
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e2:	d204      	bcs.n	80082ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ea:	60da      	str	r2, [r3, #12]
 80082ec:	e17c      	b.n	80085e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082f4:	e178      	b.n	80085e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082fe:	f040 80c5 	bne.w	800848c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008302:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008306:	2b20      	cmp	r3, #32
 8008308:	dc48      	bgt.n	800839c <UART_SetConfig+0x848>
 800830a:	2b00      	cmp	r3, #0
 800830c:	db7b      	blt.n	8008406 <UART_SetConfig+0x8b2>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d879      	bhi.n	8008406 <UART_SetConfig+0x8b2>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0x7c4>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	080083a3 	.word	0x080083a3
 800831c:	080083ab 	.word	0x080083ab
 8008320:	08008407 	.word	0x08008407
 8008324:	08008407 	.word	0x08008407
 8008328:	080083b3 	.word	0x080083b3
 800832c:	08008407 	.word	0x08008407
 8008330:	08008407 	.word	0x08008407
 8008334:	08008407 	.word	0x08008407
 8008338:	080083c3 	.word	0x080083c3
 800833c:	08008407 	.word	0x08008407
 8008340:	08008407 	.word	0x08008407
 8008344:	08008407 	.word	0x08008407
 8008348:	08008407 	.word	0x08008407
 800834c:	08008407 	.word	0x08008407
 8008350:	08008407 	.word	0x08008407
 8008354:	08008407 	.word	0x08008407
 8008358:	080083d3 	.word	0x080083d3
 800835c:	08008407 	.word	0x08008407
 8008360:	08008407 	.word	0x08008407
 8008364:	08008407 	.word	0x08008407
 8008368:	08008407 	.word	0x08008407
 800836c:	08008407 	.word	0x08008407
 8008370:	08008407 	.word	0x08008407
 8008374:	08008407 	.word	0x08008407
 8008378:	08008407 	.word	0x08008407
 800837c:	08008407 	.word	0x08008407
 8008380:	08008407 	.word	0x08008407
 8008384:	08008407 	.word	0x08008407
 8008388:	08008407 	.word	0x08008407
 800838c:	08008407 	.word	0x08008407
 8008390:	08008407 	.word	0x08008407
 8008394:	08008407 	.word	0x08008407
 8008398:	080083f9 	.word	0x080083f9
 800839c:	2b40      	cmp	r3, #64	; 0x40
 800839e:	d02e      	beq.n	80083fe <UART_SetConfig+0x8aa>
 80083a0:	e031      	b.n	8008406 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a2:	f7fb fc63 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80083a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083a8:	e033      	b.n	8008412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083aa:	f7fb fc75 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 80083ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083b0:	e02f      	b.n	8008412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fc fee6 	bl	8005188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c0:	e027      	b.n	8008412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c2:	f107 0318 	add.w	r3, r7, #24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fd f832 	bl	8005430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d0:	e01f      	b.n	8008412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083d2:	4b2d      	ldr	r3, [pc, #180]	; (8008488 <UART_SetConfig+0x934>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d009      	beq.n	80083f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083de:	4b2a      	ldr	r3, [pc, #168]	; (8008488 <UART_SetConfig+0x934>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	08db      	lsrs	r3, r3, #3
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	4a24      	ldr	r2, [pc, #144]	; (800847c <UART_SetConfig+0x928>)
 80083ea:	fa22 f303 	lsr.w	r3, r2, r3
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083f0:	e00f      	b.n	8008412 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083f2:	4b22      	ldr	r3, [pc, #136]	; (800847c <UART_SetConfig+0x928>)
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f6:	e00c      	b.n	8008412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083f8:	4b21      	ldr	r3, [pc, #132]	; (8008480 <UART_SetConfig+0x92c>)
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fc:	e009      	b.n	8008412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e005      	b.n	8008412 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80e7 	beq.w	80085e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	4a19      	ldr	r2, [pc, #100]	; (8008484 <UART_SetConfig+0x930>)
 8008420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008424:	461a      	mov	r2, r3
 8008426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008428:	fbb3 f3f2 	udiv	r3, r3, r2
 800842c:	005a      	lsls	r2, r3, #1
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	441a      	add	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	2b0f      	cmp	r3, #15
 8008444:	d916      	bls.n	8008474 <UART_SetConfig+0x920>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844c:	d212      	bcs.n	8008474 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	b29b      	uxth	r3, r3
 8008452:	f023 030f 	bic.w	r3, r3, #15
 8008456:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	b29b      	uxth	r3, r3
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	b29a      	uxth	r2, r3
 8008464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008466:	4313      	orrs	r3, r2
 8008468:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	e0b9      	b.n	80085e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800847a:	e0b5      	b.n	80085e8 <UART_SetConfig+0xa94>
 800847c:	03d09000 	.word	0x03d09000
 8008480:	003d0900 	.word	0x003d0900
 8008484:	0800d89c 	.word	0x0800d89c
 8008488:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800848c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008490:	2b20      	cmp	r3, #32
 8008492:	dc49      	bgt.n	8008528 <UART_SetConfig+0x9d4>
 8008494:	2b00      	cmp	r3, #0
 8008496:	db7c      	blt.n	8008592 <UART_SetConfig+0xa3e>
 8008498:	2b20      	cmp	r3, #32
 800849a:	d87a      	bhi.n	8008592 <UART_SetConfig+0xa3e>
 800849c:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0x950>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	0800852f 	.word	0x0800852f
 80084a8:	08008537 	.word	0x08008537
 80084ac:	08008593 	.word	0x08008593
 80084b0:	08008593 	.word	0x08008593
 80084b4:	0800853f 	.word	0x0800853f
 80084b8:	08008593 	.word	0x08008593
 80084bc:	08008593 	.word	0x08008593
 80084c0:	08008593 	.word	0x08008593
 80084c4:	0800854f 	.word	0x0800854f
 80084c8:	08008593 	.word	0x08008593
 80084cc:	08008593 	.word	0x08008593
 80084d0:	08008593 	.word	0x08008593
 80084d4:	08008593 	.word	0x08008593
 80084d8:	08008593 	.word	0x08008593
 80084dc:	08008593 	.word	0x08008593
 80084e0:	08008593 	.word	0x08008593
 80084e4:	0800855f 	.word	0x0800855f
 80084e8:	08008593 	.word	0x08008593
 80084ec:	08008593 	.word	0x08008593
 80084f0:	08008593 	.word	0x08008593
 80084f4:	08008593 	.word	0x08008593
 80084f8:	08008593 	.word	0x08008593
 80084fc:	08008593 	.word	0x08008593
 8008500:	08008593 	.word	0x08008593
 8008504:	08008593 	.word	0x08008593
 8008508:	08008593 	.word	0x08008593
 800850c:	08008593 	.word	0x08008593
 8008510:	08008593 	.word	0x08008593
 8008514:	08008593 	.word	0x08008593
 8008518:	08008593 	.word	0x08008593
 800851c:	08008593 	.word	0x08008593
 8008520:	08008593 	.word	0x08008593
 8008524:	08008585 	.word	0x08008585
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	d02e      	beq.n	800858a <UART_SetConfig+0xa36>
 800852c:	e031      	b.n	8008592 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800852e:	f7fb fb9d 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8008532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008534:	e033      	b.n	800859e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008536:	f7fb fbaf 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 800853a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800853c:	e02f      	b.n	800859e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008542:	4618      	mov	r0, r3
 8008544:	f7fc fe20 	bl	8005188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854c:	e027      	b.n	800859e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800854e:	f107 0318 	add.w	r3, r7, #24
 8008552:	4618      	mov	r0, r3
 8008554:	f7fc ff6c 	bl	8005430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855c:	e01f      	b.n	800859e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800855e:	4b2d      	ldr	r3, [pc, #180]	; (8008614 <UART_SetConfig+0xac0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800856a:	4b2a      	ldr	r3, [pc, #168]	; (8008614 <UART_SetConfig+0xac0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	08db      	lsrs	r3, r3, #3
 8008570:	f003 0303 	and.w	r3, r3, #3
 8008574:	4a28      	ldr	r2, [pc, #160]	; (8008618 <UART_SetConfig+0xac4>)
 8008576:	fa22 f303 	lsr.w	r3, r2, r3
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800857c:	e00f      	b.n	800859e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800857e:	4b26      	ldr	r3, [pc, #152]	; (8008618 <UART_SetConfig+0xac4>)
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008582:	e00c      	b.n	800859e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008584:	4b25      	ldr	r3, [pc, #148]	; (800861c <UART_SetConfig+0xac8>)
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008588:	e009      	b.n	800859e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800858a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008590:	e005      	b.n	800859e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800859c:	bf00      	nop
    }

    if (pclk != 0U)
 800859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d021      	beq.n	80085e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	4a1d      	ldr	r2, [pc, #116]	; (8008620 <UART_SetConfig+0xacc>)
 80085aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ae:	461a      	mov	r2, r3
 80085b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	441a      	add	r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	2b0f      	cmp	r3, #15
 80085cc:	d909      	bls.n	80085e2 <UART_SetConfig+0xa8e>
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d4:	d205      	bcs.n	80085e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	b29a      	uxth	r2, r3
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e002      	b.n	80085e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2200      	movs	r2, #0
 80085fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2200      	movs	r2, #0
 8008602:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008604:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008608:	4618      	mov	r0, r3
 800860a:	3748      	adds	r7, #72	; 0x48
 800860c:	46bd      	mov	sp, r7
 800860e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008612:	bf00      	nop
 8008614:	58024400 	.word	0x58024400
 8008618:	03d09000 	.word	0x03d09000
 800861c:	003d0900 	.word	0x003d0900
 8008620:	0800d89c 	.word	0x0800d89c

08008624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01a      	beq.n	800873a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008722:	d10a      	bne.n	800873a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  }
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b098      	sub	sp, #96	; 0x60
 800876c:	af02      	add	r7, sp, #8
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008778:	f7f9 f944 	bl	8001a04 <HAL_GetTick>
 800877c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b08      	cmp	r3, #8
 800878a:	d12f      	bne.n	80087ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008794:	2200      	movs	r2, #0
 8008796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f88e 	bl	80088bc <UART_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d022      	beq.n	80087ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ba:	653b      	str	r3, [r7, #80]	; 0x50
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c4:	647b      	str	r3, [r7, #68]	; 0x44
 80087c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e063      	b.n	80088b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d149      	bne.n	800888e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008802:	2200      	movs	r2, #0
 8008804:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f857 	bl	80088bc <UART_WaitOnFlagUntilTimeout>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d03c      	beq.n	800888e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	623b      	str	r3, [r7, #32]
   return(result);
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008832:	633b      	str	r3, [r7, #48]	; 0x30
 8008834:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e6      	bne.n	8008814 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3308      	adds	r3, #8
 800884c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	60fb      	str	r3, [r7, #12]
   return(result);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f023 0301 	bic.w	r3, r3, #1
 800885c:	64bb      	str	r3, [r7, #72]	; 0x48
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008866:	61fa      	str	r2, [r7, #28]
 8008868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	69b9      	ldr	r1, [r7, #24]
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	617b      	str	r3, [r7, #20]
   return(result);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e5      	bne.n	8008846 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e012      	b.n	80088b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3758      	adds	r7, #88	; 0x58
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	4613      	mov	r3, r2
 80088ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088cc:	e04f      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088d4:	d04b      	beq.n	800896e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d6:	f7f9 f895 	bl	8001a04 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d302      	bcc.n	80088ec <UART_WaitOnFlagUntilTimeout+0x30>
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e04e      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d037      	beq.n	800896e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b80      	cmp	r3, #128	; 0x80
 8008902:	d034      	beq.n	800896e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d031      	beq.n	800896e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b08      	cmp	r3, #8
 8008916:	d110      	bne.n	800893a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2208      	movs	r2, #8
 800891e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f95b 	bl	8008bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2208      	movs	r2, #8
 800892a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e029      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008948:	d111      	bne.n	800896e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f941 	bl	8008bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e00f      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69da      	ldr	r2, [r3, #28]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4013      	ands	r3, r2
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	bf0c      	ite	eq
 800897e:	2301      	moveq	r3, #1
 8008980:	2300      	movne	r3, #0
 8008982:	b2db      	uxtb	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	429a      	cmp	r2, r3
 800898a:	d0a0      	beq.n	80088ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008998:	b480      	push	{r7}
 800899a:	b0a3      	sub	sp, #140	; 0x8c
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	88fa      	ldrh	r2, [r7, #6]
 80089b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ca:	d10e      	bne.n	80089ea <UART_Start_Receive_IT+0x52>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d105      	bne.n	80089e0 <UART_Start_Receive_IT+0x48>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089de:	e02d      	b.n	8008a3c <UART_Start_Receive_IT+0xa4>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	22ff      	movs	r2, #255	; 0xff
 80089e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089e8:	e028      	b.n	8008a3c <UART_Start_Receive_IT+0xa4>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <UART_Start_Receive_IT+0x76>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d104      	bne.n	8008a04 <UART_Start_Receive_IT+0x6c>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	22ff      	movs	r2, #255	; 0xff
 80089fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a02:	e01b      	b.n	8008a3c <UART_Start_Receive_IT+0xa4>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	227f      	movs	r2, #127	; 0x7f
 8008a08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a0c:	e016      	b.n	8008a3c <UART_Start_Receive_IT+0xa4>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a16:	d10d      	bne.n	8008a34 <UART_Start_Receive_IT+0x9c>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d104      	bne.n	8008a2a <UART_Start_Receive_IT+0x92>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	227f      	movs	r2, #127	; 0x7f
 8008a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a28:	e008      	b.n	8008a3c <UART_Start_Receive_IT+0xa4>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	223f      	movs	r2, #63	; 0x3f
 8008a2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a32:	e003      	b.n	8008a3c <UART_Start_Receive_IT+0xa4>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2222      	movs	r2, #34	; 0x22
 8008a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3308      	adds	r3, #8
 8008a52:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a5e:	f043 0301 	orr.w	r3, r3, #1
 8008a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a70:	673a      	str	r2, [r7, #112]	; 0x70
 8008a72:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e3      	bne.n	8008a4c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a8c:	d14f      	bne.n	8008b2e <UART_Start_Receive_IT+0x196>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a94:	88fa      	ldrh	r2, [r7, #6]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d349      	bcc.n	8008b2e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa2:	d107      	bne.n	8008ab4 <UART_Start_Receive_IT+0x11c>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4a47      	ldr	r2, [pc, #284]	; (8008bcc <UART_Start_Receive_IT+0x234>)
 8008ab0:	675a      	str	r2, [r3, #116]	; 0x74
 8008ab2:	e002      	b.n	8008aba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a46      	ldr	r2, [pc, #280]	; (8008bd0 <UART_Start_Receive_IT+0x238>)
 8008ab8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01a      	beq.n	8008af8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ae6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e4      	bne.n	8008ac2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b18:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_Start_Receive_IT+0x160>
 8008b2c:	e046      	b.n	8008bbc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	d107      	bne.n	8008b48 <UART_Start_Receive_IT+0x1b0>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d103      	bne.n	8008b48 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4a24      	ldr	r2, [pc, #144]	; (8008bd4 <UART_Start_Receive_IT+0x23c>)
 8008b44:	675a      	str	r2, [r3, #116]	; 0x74
 8008b46:	e002      	b.n	8008b4e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4a23      	ldr	r2, [pc, #140]	; (8008bd8 <UART_Start_Receive_IT+0x240>)
 8008b4c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d019      	beq.n	8008b8a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b6a:	677b      	str	r3, [r7, #116]	; 0x74
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34
 8008b76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e6      	bne.n	8008b56 <UART_Start_Receive_IT+0x1be>
 8008b88:	e018      	b.n	8008bbc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	613b      	str	r3, [r7, #16]
   return(result);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f043 0320 	orr.w	r3, r3, #32
 8008b9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ba8:	623b      	str	r3, [r7, #32]
 8008baa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	69f9      	ldr	r1, [r7, #28]
 8008bae:	6a3a      	ldr	r2, [r7, #32]
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e6      	bne.n	8008b8a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	378c      	adds	r7, #140	; 0x8c
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	080093fd 	.word	0x080093fd
 8008bd0:	0800909d 	.word	0x0800909d
 8008bd4:	08008ee5 	.word	0x08008ee5
 8008bd8:	08008d2d 	.word	0x08008d2d

08008bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b095      	sub	sp, #84	; 0x54
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c02:	643b      	str	r3, [r7, #64]	; 0x40
 8008c04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e6      	bne.n	8008be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <UART_EndRxTransfer+0xc8>)
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d118      	bne.n	8008c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f023 0310 	bic.w	r3, r3, #16
 8008c66:	647b      	str	r3, [r7, #68]	; 0x44
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6979      	ldr	r1, [r7, #20]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e6      	bne.n	8008c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c98:	bf00      	nop
 8008c9a:	3754      	adds	r7, #84	; 0x54
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	effffffe 	.word	0xeffffffe

08008ca8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7fe ff2e 	bl	8007b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf0:	61fb      	str	r3, [r7, #28]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	61bb      	str	r3, [r7, #24]
 8008cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6979      	ldr	r1, [r7, #20]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	613b      	str	r3, [r7, #16]
   return(result);
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e6      	bne.n	8008cdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7fe fef9 	bl	8007b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d22:	bf00      	nop
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b09c      	sub	sp, #112	; 0x70
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d44:	2b22      	cmp	r3, #34	; 0x22
 8008d46:	f040 80be 	bne.w	8008ec6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d58:	b2d9      	uxtb	r1, r3
 8008d5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d64:	400a      	ands	r2, r1
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 80a1 	bne.w	8008ed6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008db4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008de6:	647a      	str	r2, [r7, #68]	; 0x44
 8008de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e5      	bne.n	8008dc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a33      	ldr	r2, [pc, #204]	; (8008ee0 <UART_RxISR_8BIT+0x1b4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d01f      	beq.n	8008e58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d018      	beq.n	8008e58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	623b      	str	r3, [r7, #32]
   return(result);
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
 8008e46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d12e      	bne.n	8008ebe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0310 	bic.w	r3, r3, #16
 8008e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	69b9      	ldr	r1, [r7, #24]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	617b      	str	r3, [r7, #20]
   return(result);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e6      	bne.n	8008e66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b10      	cmp	r3, #16
 8008ea4:	d103      	bne.n	8008eae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2210      	movs	r2, #16
 8008eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fe fe40 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ebc:	e00b      	b.n	8008ed6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7f7 fbc6 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8008ec4:	e007      	b.n	8008ed6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	699a      	ldr	r2, [r3, #24]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	619a      	str	r2, [r3, #24]
}
 8008ed6:	bf00      	nop
 8008ed8:	3770      	adds	r7, #112	; 0x70
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	58000c00 	.word	0x58000c00

08008ee4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b09c      	sub	sp, #112	; 0x70
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ef2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008efc:	2b22      	cmp	r3, #34	; 0x22
 8008efe:	f040 80be 	bne.w	800907e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f10:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008f16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	1c9a      	adds	r2, r3, #2
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f040 80a1 	bne.w	800908e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f60:	667b      	str	r3, [r7, #100]	; 0x64
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f6c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e6      	bne.n	8008f4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	f023 0301 	bic.w	r3, r3, #1
 8008f94:	663b      	str	r3, [r7, #96]	; 0x60
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f9e:	643a      	str	r2, [r7, #64]	; 0x40
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e5      	bne.n	8008f7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a33      	ldr	r2, [pc, #204]	; (8009098 <UART_RxISR_16BIT+0x1b4>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d01f      	beq.n	8009010 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d018      	beq.n	8009010 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ffe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e6      	bne.n	8008fde <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d12e      	bne.n	8009076 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	60bb      	str	r3, [r7, #8]
   return(result);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f023 0310 	bic.w	r3, r3, #16
 8009032:	65bb      	str	r3, [r7, #88]	; 0x58
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800903c:	61bb      	str	r3, [r7, #24]
 800903e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6979      	ldr	r1, [r7, #20]
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	613b      	str	r3, [r7, #16]
   return(result);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e6      	bne.n	800901e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b10      	cmp	r3, #16
 800905c:	d103      	bne.n	8009066 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2210      	movs	r2, #16
 8009064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fe fd64 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009074:	e00b      	b.n	800908e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7f7 faea 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800907c:	e007      	b.n	800908e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0208 	orr.w	r2, r2, #8
 800908c:	619a      	str	r2, [r3, #24]
}
 800908e:	bf00      	nop
 8009090:	3770      	adds	r7, #112	; 0x70
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	58000c00 	.word	0x58000c00

0800909c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b0ac      	sub	sp, #176	; 0xb0
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d2:	2b22      	cmp	r3, #34	; 0x22
 80090d4:	f040 8180 	bne.w	80093d8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090de:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090e2:	e123      	b.n	800932c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80090f2:	b2d9      	uxtb	r1, r3
 80090f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090fe:	400a      	ands	r2, r1
 8009100:	b2d2      	uxtb	r2, r2
 8009102:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	b29a      	uxth	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800912a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	2b00      	cmp	r3, #0
 8009134:	d053      	beq.n	80091de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d011      	beq.n	8009166 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2201      	movs	r2, #1
 8009154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915c:	f043 0201 	orr.w	r2, r3, #1
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d011      	beq.n	8009196 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2202      	movs	r2, #2
 8009184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918c:	f043 0204 	orr.w	r2, r3, #4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d011      	beq.n	80091c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80091a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00b      	beq.n	80091c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2204      	movs	r2, #4
 80091b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091bc:	f043 0202 	orr.w	r2, r3, #2
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7fe fca9 	bl	8007b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f040 80a0 	bne.w	800932c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80091fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800920e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009210:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009214:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800921c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e4      	bne.n	80091ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009234:	4b6e      	ldr	r3, [pc, #440]	; (80093f0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009236:	4013      	ands	r3, r2
 8009238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009246:	66ba      	str	r2, [r7, #104]	; 0x68
 8009248:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800924c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a60      	ldr	r2, [pc, #384]	; (80093f4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d021      	beq.n	80092bc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01a      	beq.n	80092bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800929a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092a8:	657b      	str	r3, [r7, #84]	; 0x54
 80092aa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e4      	bne.n	8009286 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d130      	bne.n	8009326 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	f023 0310 	bic.w	r3, r3, #16
 80092de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ec:	643b      	str	r3, [r7, #64]	; 0x40
 80092ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e4      	bne.n	80092ca <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	f003 0310 	and.w	r3, r3, #16
 800930a:	2b10      	cmp	r3, #16
 800930c:	d103      	bne.n	8009316 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2210      	movs	r2, #16
 8009314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7fe fc0c 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
 8009324:	e002      	b.n	800932c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7f7 f992 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800932c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	2b00      	cmp	r3, #0
 800933e:	f47f aed1 	bne.w	80090e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009348:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800934c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009350:	2b00      	cmp	r3, #0
 8009352:	d049      	beq.n	80093e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800935a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800935e:	429a      	cmp	r2, r3
 8009360:	d242      	bcs.n	80093e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	61fb      	str	r3, [r7, #28]
   return(result);
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800938c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e3      	bne.n	8009362 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800939e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f043 0320 	orr.w	r3, r3, #32
 80093b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093c2:	61bb      	str	r3, [r7, #24]
 80093c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	613b      	str	r3, [r7, #16]
   return(result);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e4      	bne.n	80093a0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093d6:	e007      	b.n	80093e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0208 	orr.w	r2, r2, #8
 80093e6:	619a      	str	r2, [r3, #24]
}
 80093e8:	bf00      	nop
 80093ea:	37b0      	adds	r7, #176	; 0xb0
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	effffffe 	.word	0xeffffffe
 80093f4:	58000c00 	.word	0x58000c00
 80093f8:	08008d2d 	.word	0x08008d2d

080093fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b0ae      	sub	sp, #184	; 0xb8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800940a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009432:	2b22      	cmp	r3, #34	; 0x22
 8009434:	f040 8184 	bne.w	8009740 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800943e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009442:	e127      	b.n	8009694 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009456:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800945a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800945e:	4013      	ands	r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009466:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946c:	1c9a      	adds	r2, r3, #2
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	b29a      	uxth	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800948e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	2b00      	cmp	r3, #0
 8009498:	d053      	beq.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800949a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d011      	beq.n	80094ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80094a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00b      	beq.n	80094ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2201      	movs	r2, #1
 80094b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c0:	f043 0201 	orr.w	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d011      	beq.n	80094fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80094d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00b      	beq.n	80094fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2202      	movs	r2, #2
 80094e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f0:	f043 0204 	orr.w	r2, r3, #4
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d011      	beq.n	800952a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2204      	movs	r2, #4
 8009518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009520:	f043 0202 	orr.w	r2, r3, #2
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009530:	2b00      	cmp	r3, #0
 8009532:	d006      	beq.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7fe faf7 	bl	8007b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	f040 80a2 	bne.w	8009694 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800955e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009576:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800957a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e2      	bne.n	8009550 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800959a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800959c:	4b6e      	ldr	r3, [pc, #440]	; (8009758 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800959e:	4013      	ands	r3, r2
 80095a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e3      	bne.n	800958a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a60      	ldr	r2, [pc, #384]	; (800975c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d021      	beq.n	8009624 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01a      	beq.n	8009624 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009610:	65bb      	str	r3, [r7, #88]	; 0x58
 8009612:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800961e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e4      	bne.n	80095ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009628:	2b01      	cmp	r3, #1
 800962a:	d130      	bne.n	800968e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009642:	f023 0310 	bic.w	r3, r3, #16
 8009646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009654:	647b      	str	r3, [r7, #68]	; 0x44
 8009656:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800965a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e4      	bne.n	8009632 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	2b10      	cmp	r3, #16
 8009674:	d103      	bne.n	800967e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2210      	movs	r2, #16
 800967c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7fe fa58 	bl	8007b3c <HAL_UARTEx_RxEventCallback>
 800968c:	e002      	b.n	8009694 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7f6 ffde 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009694:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009698:	2b00      	cmp	r3, #0
 800969a:	d006      	beq.n	80096aa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800969c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096a0:	f003 0320 	and.w	r3, r3, #32
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f47f aecd 	bne.w	8009444 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096b0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d049      	beq.n	8009750 <UART_RxISR_16BIT_FIFOEN+0x354>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096c2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d242      	bcs.n	8009750 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	623b      	str	r3, [r7, #32]
   return(result);
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3308      	adds	r3, #8
 80096ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096ee:	633a      	str	r2, [r7, #48]	; 0x30
 80096f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e3      	bne.n	80096ca <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a16      	ldr	r2, [pc, #88]	; (8009760 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009706:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	60fb      	str	r3, [r7, #12]
   return(result);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f043 0320 	orr.w	r3, r3, #32
 800971c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800972a:	61fb      	str	r3, [r7, #28]
 800972c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	69b9      	ldr	r1, [r7, #24]
 8009730:	69fa      	ldr	r2, [r7, #28]
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	617b      	str	r3, [r7, #20]
   return(result);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e4      	bne.n	8009708 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800973e:	e007      	b.n	8009750 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699a      	ldr	r2, [r3, #24]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0208 	orr.w	r2, r2, #8
 800974e:	619a      	str	r2, [r3, #24]
}
 8009750:	bf00      	nop
 8009752:	37b8      	adds	r7, #184	; 0xb8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	effffffe 	.word	0xeffffffe
 800975c:	58000c00 	.word	0x58000c00
 8009760:	08008ee5 	.word	0x08008ee5

08009764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d101      	bne.n	80097b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80097b2:	2302      	movs	r3, #2
 80097b4:	e027      	b.n	8009806 <HAL_UARTEx_DisableFifoMode+0x66>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2224      	movs	r2, #36	; 0x24
 80097c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0201 	bic.w	r2, r2, #1
 80097dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009826:	2302      	movs	r3, #2
 8009828:	e02d      	b.n	8009886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2224      	movs	r2, #36	; 0x24
 8009836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f850 	bl	800990c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e02d      	b.n	8009902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2224      	movs	r2, #36	; 0x24
 80098b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f812 	bl	800990c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009918:	2b00      	cmp	r3, #0
 800991a:	d108      	bne.n	800992e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800992c:	e031      	b.n	8009992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800992e:	2310      	movs	r3, #16
 8009930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009932:	2310      	movs	r3, #16
 8009934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	0e5b      	lsrs	r3, r3, #25
 800993e:	b2db      	uxtb	r3, r3
 8009940:	f003 0307 	and.w	r3, r3, #7
 8009944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	0f5b      	lsrs	r3, r3, #29
 800994e:	b2db      	uxtb	r3, r3
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009956:	7bbb      	ldrb	r3, [r7, #14]
 8009958:	7b3a      	ldrb	r2, [r7, #12]
 800995a:	4911      	ldr	r1, [pc, #68]	; (80099a0 <UARTEx_SetNbDataToProcess+0x94>)
 800995c:	5c8a      	ldrb	r2, [r1, r2]
 800995e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009962:	7b3a      	ldrb	r2, [r7, #12]
 8009964:	490f      	ldr	r1, [pc, #60]	; (80099a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009968:	fb93 f3f2 	sdiv	r3, r3, r2
 800996c:	b29a      	uxth	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	7b7a      	ldrb	r2, [r7, #13]
 8009978:	4909      	ldr	r1, [pc, #36]	; (80099a0 <UARTEx_SetNbDataToProcess+0x94>)
 800997a:	5c8a      	ldrb	r2, [r1, r2]
 800997c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009980:	7b7a      	ldrb	r2, [r7, #13]
 8009982:	4908      	ldr	r1, [pc, #32]	; (80099a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009986:	fb93 f3f2 	sdiv	r3, r3, r2
 800998a:	b29a      	uxth	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009992:	bf00      	nop
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	0800d8b4 	.word	0x0800d8b4
 80099a4:	0800d8bc 	.word	0x0800d8bc

080099a8 <__NVIC_SetPriority>:
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	6039      	str	r1, [r7, #0]
 80099b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80099b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	db0a      	blt.n	80099d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	490c      	ldr	r1, [pc, #48]	; (80099f4 <__NVIC_SetPriority+0x4c>)
 80099c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099c6:	0112      	lsls	r2, r2, #4
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	440b      	add	r3, r1
 80099cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099d0:	e00a      	b.n	80099e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	4908      	ldr	r1, [pc, #32]	; (80099f8 <__NVIC_SetPriority+0x50>)
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	3b04      	subs	r3, #4
 80099e0:	0112      	lsls	r2, r2, #4
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	440b      	add	r3, r1
 80099e6:	761a      	strb	r2, [r3, #24]
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	e000e100 	.word	0xe000e100
 80099f8:	e000ed00 	.word	0xe000ed00

080099fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a00:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <SysTick_Handler+0x1c>)
 8009a02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a04:	f002 f824 	bl	800ba50 <xTaskGetSchedulerState>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d001      	beq.n	8009a12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a0e:	f002 fe43 	bl	800c698 <xPortSysTickHandler>
  }
}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	e000e010 	.word	0xe000e010

08009a1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a20:	2100      	movs	r1, #0
 8009a22:	f06f 0004 	mvn.w	r0, #4
 8009a26:	f7ff ffbf 	bl	80099a8 <__NVIC_SetPriority>
#endif
}
 8009a2a:	bf00      	nop
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a36:	f3ef 8305 	mrs	r3, IPSR
 8009a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a42:	f06f 0305 	mvn.w	r3, #5
 8009a46:	607b      	str	r3, [r7, #4]
 8009a48:	e00c      	b.n	8009a64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <osKernelInitialize+0x44>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a52:	4b08      	ldr	r3, [pc, #32]	; (8009a74 <osKernelInitialize+0x44>)
 8009a54:	2201      	movs	r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	e002      	b.n	8009a64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a64:	687b      	ldr	r3, [r7, #4]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	240003b8 	.word	0x240003b8

08009a78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a7e:	f3ef 8305 	mrs	r3, IPSR
 8009a82:	603b      	str	r3, [r7, #0]
  return(result);
 8009a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a8a:	f06f 0305 	mvn.w	r3, #5
 8009a8e:	607b      	str	r3, [r7, #4]
 8009a90:	e010      	b.n	8009ab4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a92:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <osKernelStart+0x48>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d109      	bne.n	8009aae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a9a:	f7ff ffbf 	bl	8009a1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a9e:	4b08      	ldr	r3, [pc, #32]	; (8009ac0 <osKernelStart+0x48>)
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009aa4:	f001 faee 	bl	800b084 <vTaskStartScheduler>
      stat = osOK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	607b      	str	r3, [r7, #4]
 8009aac:	e002      	b.n	8009ab4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ab4:	687b      	ldr	r3, [r7, #4]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	240003b8 	.word	0x240003b8

08009ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08e      	sub	sp, #56	; 0x38
 8009ac8:	af04      	add	r7, sp, #16
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad4:	f3ef 8305 	mrs	r3, IPSR
 8009ad8:	617b      	str	r3, [r7, #20]
  return(result);
 8009ada:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d17e      	bne.n	8009bde <osThreadNew+0x11a>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d07b      	beq.n	8009bde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ae6:	2380      	movs	r3, #128	; 0x80
 8009ae8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009aea:	2318      	movs	r3, #24
 8009aec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d045      	beq.n	8009b8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <osThreadNew+0x48>
        name = attr->name;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d008      	beq.n	8009b32 <osThreadNew+0x6e>
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2b38      	cmp	r3, #56	; 0x38
 8009b24:	d805      	bhi.n	8009b32 <osThreadNew+0x6e>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <osThreadNew+0x72>
        return (NULL);
 8009b32:	2300      	movs	r3, #0
 8009b34:	e054      	b.n	8009be0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	089b      	lsrs	r3, r3, #2
 8009b44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00e      	beq.n	8009b6c <osThreadNew+0xa8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	2b5b      	cmp	r3, #91	; 0x5b
 8009b54:	d90a      	bls.n	8009b6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d006      	beq.n	8009b6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <osThreadNew+0xa8>
        mem = 1;
 8009b66:	2301      	movs	r3, #1
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	e010      	b.n	8009b8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10c      	bne.n	8009b8e <osThreadNew+0xca>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d108      	bne.n	8009b8e <osThreadNew+0xca>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d104      	bne.n	8009b8e <osThreadNew+0xca>
          mem = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	e001      	b.n	8009b8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d110      	bne.n	8009bb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6a3a      	ldr	r2, [r7, #32]
 8009ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f001 f8c8 	bl	800ad40 <xTaskCreateStatic>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	613b      	str	r3, [r7, #16]
 8009bb4:	e013      	b.n	8009bde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d110      	bne.n	8009bde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f001 f913 	bl	800adfa <xTaskCreate>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d001      	beq.n	8009bde <osThreadNew+0x11a>
            hTask = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009bde:	693b      	ldr	r3, [r7, #16]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3728      	adds	r7, #40	; 0x28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf4:	f3ef 8305 	mrs	r3, IPSR
 8009bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bfa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d12d      	bne.n	8009c5c <osEventFlagsNew+0x74>
    mem = -1;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c04:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d015      	beq.n	8009c38 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d006      	beq.n	8009c22 <osEventFlagsNew+0x3a>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	2b1f      	cmp	r3, #31
 8009c1a:	d902      	bls.n	8009c22 <osEventFlagsNew+0x3a>
        mem = 1;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	613b      	str	r3, [r7, #16]
 8009c20:	e00c      	b.n	8009c3c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d108      	bne.n	8009c3c <osEventFlagsNew+0x54>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d104      	bne.n	8009c3c <osEventFlagsNew+0x54>
          mem = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	e001      	b.n	8009c3c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d106      	bne.n	8009c50 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f8ec 	bl	8009e24 <xEventGroupCreateStatic>
 8009c4c:	6178      	str	r0, [r7, #20]
 8009c4e:	e005      	b.n	8009c5c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009c56:	f000 f91c 	bl	8009e92 <xEventGroupCreate>
 8009c5a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009c5c:	697b      	ldr	r3, [r7, #20]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <osEventFlagsSet+0x1e>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009c86:	f06f 0303 	mvn.w	r3, #3
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e028      	b.n	8009ce0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c8e:	f3ef 8305 	mrs	r3, IPSR
 8009c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c94:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d01d      	beq.n	8009cd6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009c9e:	f107 0308 	add.w	r3, r7, #8
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f000 fa96 	bl	800a1d8 <xEventGroupSetBitsFromISR>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8009cb2:	f06f 0302 	mvn.w	r3, #2
 8009cb6:	617b      	str	r3, [r7, #20]
 8009cb8:	e012      	b.n	8009ce0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00d      	beq.n	8009ce0 <osEventFlagsSet+0x78>
 8009cc4:	4b09      	ldr	r3, [pc, #36]	; (8009cec <osEventFlagsSet+0x84>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	e004      	b.n	8009ce0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6938      	ldr	r0, [r7, #16]
 8009cda:	f000 f9c3 	bl	800a064 <xEventGroupSetBits>
 8009cde:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009ce0:	697b      	ldr	r3, [r7, #20]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08c      	sub	sp, #48	; 0x30
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <osEventFlagsWait+0x22>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8009d12:	f06f 0303 	mvn.w	r3, #3
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e04b      	b.n	8009db2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d1a:	f3ef 8305 	mrs	r3, IPSR
 8009d1e:	617b      	str	r3, [r7, #20]
  return(result);
 8009d20:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8009d26:	f06f 0305 	mvn.w	r3, #5
 8009d2a:	61fb      	str	r3, [r7, #28]
 8009d2c:	e041      	b.n	8009db2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3c:	e001      	b.n	8009d42 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	623b      	str	r3, [r7, #32]
 8009d50:	e001      	b.n	8009d56 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8009d52:	2301      	movs	r3, #1
 8009d54:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	6a3a      	ldr	r2, [r7, #32]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	69b8      	ldr	r0, [r7, #24]
 8009d62:	f000 f8b1 	bl	8009ec8 <xEventGroupWaitBits>
 8009d66:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d010      	beq.n	8009d94 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	4013      	ands	r3, r2
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d019      	beq.n	8009db2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009d84:	f06f 0301 	mvn.w	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
 8009d8a:	e012      	b.n	8009db2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009d8c:	f06f 0302 	mvn.w	r3, #2
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	e00e      	b.n	8009db2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8009da4:	f06f 0301 	mvn.w	r3, #1
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	e002      	b.n	8009db2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009dac:	f06f 0302 	mvn.w	r3, #2
 8009db0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009db2:	69fb      	ldr	r3, [r7, #28]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	; 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4a07      	ldr	r2, [pc, #28]	; (8009de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4a06      	ldr	r2, [pc, #24]	; (8009dec <vApplicationGetIdleTaskMemory+0x30>)
 8009dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2280      	movs	r2, #128	; 0x80
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	240003bc 	.word	0x240003bc
 8009dec:	24000418 	.word	0x24000418

08009df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4a07      	ldr	r2, [pc, #28]	; (8009e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8009e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <vApplicationGetTimerTaskMemory+0x30>)
 8009e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e0e:	601a      	str	r2, [r3, #0]
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	24000618 	.word	0x24000618
 8009e20:	24000674 	.word	0x24000674

08009e24 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009e48:	2320      	movs	r3, #32
 8009e4a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d00a      	beq.n	8009e68 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60fb      	str	r3, [r7, #12]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f9bf 	bl	800a200 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2201      	movs	r2, #1
 8009e86:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009e88:	697b      	ldr	r3, [r7, #20]
	}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b082      	sub	sp, #8
 8009e96:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009e98:	2020      	movs	r0, #32
 8009e9a:	f002 fc8d 	bl	800c7b8 <pvPortMalloc>
 8009e9e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 f9a5 	bl	800a200 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009ebc:	687b      	ldr	r3, [r7, #4]
	}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b090      	sub	sp, #64	; 0x40
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xEventGroupWaitBits+0x36>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	623b      	str	r3, [r7, #32]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00a      	beq.n	8009f1e <xEventGroupWaitBits+0x56>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	61fb      	str	r3, [r7, #28]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xEventGroupWaitBits+0x72>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	61bb      	str	r3, [r7, #24]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f3a:	f001 fd89 	bl	800ba50 <xTaskGetSchedulerState>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <xEventGroupWaitBits+0x82>
 8009f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <xEventGroupWaitBits+0x86>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <xEventGroupWaitBits+0x88>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	617b      	str	r3, [r7, #20]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009f6a:	f001 f8f1 	bl	800b150 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	68b9      	ldr	r1, [r7, #8]
 8009f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f7a:	f000 f90b 	bl	800a194 <prvTestWaitCondition>
 8009f7e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00e      	beq.n	8009fa4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d028      	beq.n	8009fe6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	43db      	mvns	r3, r3
 8009f9c:	401a      	ands	r2, r3
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	e020      	b.n	8009fe6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d104      	bne.n	8009fb4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8009fb2:	e018      	b.n	8009fe6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fc0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fce:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	1d18      	adds	r0, r3, #4
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f001 faaf 	bl	800b540 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009fe6:	f001 f8c1 	bl	800b16c <xTaskResumeAll>
 8009fea:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d031      	beq.n	800a056 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d107      	bne.n	800a008 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009ff8:	4b19      	ldr	r3, [pc, #100]	; (800a060 <xEventGroupWaitBits+0x198>)
 8009ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a008:	f001 fdae 	bl	800bb68 <uxTaskResetEventItemValue>
 800a00c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d11a      	bne.n	800a04e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a018:	f002 faac 	bl	800c574 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a028:	f000 f8b4 	bl	800a194 <prvTestWaitCondition>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d006      	beq.n	800a046 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	43db      	mvns	r3, r3
 800a040:	401a      	ands	r2, r3
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a046:	2301      	movs	r3, #1
 800a048:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a04a:	f002 fac3 	bl	800c5d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a050:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3740      	adds	r7, #64	; 0x40
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	e000ed04 	.word	0xe000ed04

0800a064 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08e      	sub	sp, #56	; 0x38
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a06e:	2300      	movs	r3, #0
 800a070:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800a076:	2300      	movs	r3, #0
 800a078:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <xEventGroupSetBits+0x32>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	613b      	str	r3, [r7, #16]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00a      	beq.n	800a0b6 <xEventGroupSetBits+0x52>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60fb      	str	r3, [r7, #12]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	3308      	adds	r3, #8
 800a0c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a0c2:	f001 f845 	bl	800b150 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a0d8:	e03c      	b.n	800a154 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a0f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d108      	bne.n	800a116 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a114:	e008      	b.n	800a128 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	4013      	ands	r3, r2
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	429a      	cmp	r2, r3
 800a122:	d101      	bne.n	800a128 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a124:	2301      	movs	r3, #1
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d010      	beq.n	800a150 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d003      	beq.n	800a140 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a148:	4619      	mov	r1, r3
 800a14a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a14c:	f001 fac4 	bl	800b6d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d1be      	bne.n	800a0da <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	43db      	mvns	r3, r3
 800a164:	401a      	ands	r2, r3
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a16a:	f000 ffff 	bl	800b16c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	681b      	ldr	r3, [r3, #0]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3738      	adds	r7, #56	; 0x38
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff ff6c 	bl	800a064 <xEventGroupSetBits>
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d107      	bne.n	800a1ba <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00a      	beq.n	800a1ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	e007      	b.n	800a1ca <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d101      	bne.n	800a1ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a1ca:	697b      	ldr	r3, [r7, #20]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	371c      	adds	r7, #28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	68f9      	ldr	r1, [r7, #12]
 800a1ea:	4804      	ldr	r0, [pc, #16]	; (800a1fc <xEventGroupSetBitsFromISR+0x24>)
 800a1ec:	f002 f876 	bl	800c2dc <xTimerPendFunctionCallFromISR>
 800a1f0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800a1f2:	697b      	ldr	r3, [r7, #20]
	}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	0800a17b 	.word	0x0800a17b

0800a200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f103 0208 	add.w	r2, r3, #8
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f103 0208 	add.w	r2, r3, #8
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f103 0208 	add.w	r2, r3, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a25a:	b480      	push	{r7}
 800a25c:	b085      	sub	sp, #20
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
}
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2b8:	d103      	bne.n	800a2c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e00c      	b.n	800a2dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e002      	b.n	800a2d0 <vListInsert+0x2e>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d2f6      	bcs.n	800a2ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	601a      	str	r2, [r3, #0]
}
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	6892      	ldr	r2, [r2, #8]
 800a32a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6852      	ldr	r2, [r2, #4]
 800a334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d103      	bne.n	800a348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	1e5a      	subs	r2, r3, #1
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <xQueueGenericReset+0x2a>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	60bb      	str	r3, [r7, #8]
}
 800a38e:	bf00      	nop
 800a390:	e7fe      	b.n	800a390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a392:	f002 f8ef 	bl	800c574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39e:	68f9      	ldr	r1, [r7, #12]
 800a3a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3a2:	fb01 f303 	mul.w	r3, r1, r3
 800a3a6:	441a      	add	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	68f9      	ldr	r1, [r7, #12]
 800a3c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3c8:	fb01 f303 	mul.w	r3, r1, r3
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	22ff      	movs	r2, #255	; 0xff
 800a3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	22ff      	movs	r2, #255	; 0xff
 800a3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d114      	bne.n	800a412 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01a      	beq.n	800a426 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3310      	adds	r3, #16
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 f90b 	bl	800b610 <xTaskRemoveFromEventList>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d012      	beq.n	800a426 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <xQueueGenericReset+0xcc>)
 800a402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	e009      	b.n	800a426 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3310      	adds	r3, #16
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fef2 	bl	800a200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3324      	adds	r3, #36	; 0x24
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff feed 	bl	800a200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a426:	f002 f8d5 	bl	800c5d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a42a:	2301      	movs	r3, #1
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	e000ed04 	.word	0xe000ed04

0800a438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08e      	sub	sp, #56	; 0x38
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <xQueueGenericCreateStatic+0x52>
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <xQueueGenericCreateStatic+0x56>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <xQueueGenericCreateStatic+0x58>
 800a48e:	2300      	movs	r3, #0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	623b      	str	r3, [r7, #32]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <xQueueGenericCreateStatic+0x7e>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <xQueueGenericCreateStatic+0x82>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueGenericCreateStatic+0x84>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	61fb      	str	r3, [r7, #28]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4d6:	2350      	movs	r3, #80	; 0x50
 800a4d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b50      	cmp	r3, #80	; 0x50
 800a4de:	d00a      	beq.n	800a4f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	61bb      	str	r3, [r7, #24]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00d      	beq.n	800a51e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a50a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	4613      	mov	r3, r2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	68b9      	ldr	r1, [r7, #8]
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f805 	bl	800a528 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a520:	4618      	mov	r0, r3
 800a522:	3730      	adds	r7, #48	; 0x30
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	e002      	b.n	800a54a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a556:	2101      	movs	r1, #1
 800a558:	69b8      	ldr	r0, [r7, #24]
 800a55a:	f7ff ff05 	bl	800a368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	78fa      	ldrb	r2, [r7, #3]
 800a562:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a566:	bf00      	nop
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08e      	sub	sp, #56	; 0x38
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a57e:	2300      	movs	r3, #0
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <xQueueGenericSend+0x32>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d103      	bne.n	800a5b0 <xQueueGenericSend+0x40>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <xQueueGenericSend+0x44>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e000      	b.n	800a5b6 <xQueueGenericSend+0x46>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10a      	bne.n	800a5d0 <xQueueGenericSend+0x60>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d103      	bne.n	800a5de <xQueueGenericSend+0x6e>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <xQueueGenericSend+0x72>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e000      	b.n	800a5e4 <xQueueGenericSend+0x74>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <xQueueGenericSend+0x8e>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	623b      	str	r3, [r7, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5fe:	f001 fa27 	bl	800ba50 <xTaskGetSchedulerState>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d102      	bne.n	800a60e <xQueueGenericSend+0x9e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <xQueueGenericSend+0xa2>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <xQueueGenericSend+0xa4>
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xQueueGenericSend+0xbe>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61fb      	str	r3, [r7, #28]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a62e:	f001 ffa1 	bl	800c574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d302      	bcc.n	800a644 <xQueueGenericSend+0xd4>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b02      	cmp	r3, #2
 800a642:	d129      	bne.n	800a698 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a64a:	f000 fa0b 	bl	800aa64 <prvCopyDataToQueue>
 800a64e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	d010      	beq.n	800a67a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	3324      	adds	r3, #36	; 0x24
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 ffd7 	bl	800b610 <xTaskRemoveFromEventList>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d013      	beq.n	800a690 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a668:	4b3f      	ldr	r3, [pc, #252]	; (800a768 <xQueueGenericSend+0x1f8>)
 800a66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	e00a      	b.n	800a690 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a680:	4b39      	ldr	r3, [pc, #228]	; (800a768 <xQueueGenericSend+0x1f8>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a690:	f001 ffa0 	bl	800c5d4 <vPortExitCritical>
				return pdPASS;
 800a694:	2301      	movs	r3, #1
 800a696:	e063      	b.n	800a760 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d103      	bne.n	800a6a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a69e:	f001 ff99 	bl	800c5d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e05c      	b.n	800a760 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d106      	bne.n	800a6ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6ac:	f107 0314 	add.w	r3, r7, #20
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f001 f873 	bl	800b79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6ba:	f001 ff8b 	bl	800c5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6be:	f000 fd47 	bl	800b150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6c2:	f001 ff57 	bl	800c574 <vPortEnterCritical>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6cc:	b25b      	sxtb	r3, r3
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6d2:	d103      	bne.n	800a6dc <xQueueGenericSend+0x16c>
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e2:	b25b      	sxtb	r3, r3
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e8:	d103      	bne.n	800a6f2 <xQueueGenericSend+0x182>
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6f2:	f001 ff6f 	bl	800c5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f6:	1d3a      	adds	r2, r7, #4
 800a6f8:	f107 0314 	add.w	r3, r7, #20
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 f862 	bl	800b7c8 <xTaskCheckForTimeOut>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d124      	bne.n	800a754 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a70a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a70c:	f000 faa2 	bl	800ac54 <prvIsQueueFull>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d018      	beq.n	800a748 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	3310      	adds	r3, #16
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 feea 	bl	800b4f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a726:	f000 fa2d 	bl	800ab84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a72a:	f000 fd1f 	bl	800b16c <xTaskResumeAll>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	f47f af7c 	bne.w	800a62e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a736:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <xQueueGenericSend+0x1f8>)
 800a738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	e772      	b.n	800a62e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a74a:	f000 fa1b 	bl	800ab84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a74e:	f000 fd0d 	bl	800b16c <xTaskResumeAll>
 800a752:	e76c      	b.n	800a62e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a756:	f000 fa15 	bl	800ab84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a75a:	f000 fd07 	bl	800b16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a75e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a760:	4618      	mov	r0, r3
 800a762:	3738      	adds	r7, #56	; 0x38
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b090      	sub	sp, #64	; 0x40
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d103      	bne.n	800a7a8 <xQueueGenericSendFromISR+0x3c>
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <xQueueGenericSendFromISR+0x40>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <xQueueGenericSendFromISR+0x42>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d103      	bne.n	800a7d6 <xQueueGenericSendFromISR+0x6a>
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <xQueueGenericSendFromISR+0x6e>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <xQueueGenericSendFromISR+0x70>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	623b      	str	r3, [r7, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7f6:	f001 ff9f 	bl	800c738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	61fa      	str	r2, [r7, #28]
 800a810:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a812:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a814:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	429a      	cmp	r2, r3
 800a820:	d302      	bcc.n	800a828 <xQueueGenericSendFromISR+0xbc>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d12f      	bne.n	800a888 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a83e:	f000 f911 	bl	800aa64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a842:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a84a:	d112      	bne.n	800a872 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	d016      	beq.n	800a882 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	3324      	adds	r3, #36	; 0x24
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fed9 	bl	800b610 <xTaskRemoveFromEventList>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00e      	beq.n	800a882 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00b      	beq.n	800a882 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	e007      	b.n	800a882 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a876:	3301      	adds	r3, #1
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	b25a      	sxtb	r2, r3
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a882:	2301      	movs	r3, #1
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a886:	e001      	b.n	800a88c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3740      	adds	r7, #64	; 0x40
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	; 0x30
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <xQueueReceive+0x30>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	623b      	str	r3, [r7, #32]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <xQueueReceive+0x3e>
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <xQueueReceive+0x42>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <xQueueReceive+0x44>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xQueueReceive+0x5e>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	61fb      	str	r3, [r7, #28]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a902:	f001 f8a5 	bl	800ba50 <xTaskGetSchedulerState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <xQueueReceive+0x6e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <xQueueReceive+0x72>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <xQueueReceive+0x74>
 800a916:	2300      	movs	r3, #0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <xQueueReceive+0x8e>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	61bb      	str	r3, [r7, #24]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a932:	f001 fe1f 	bl	800c574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d01f      	beq.n	800a982 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a942:	68b9      	ldr	r1, [r7, #8]
 800a944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a946:	f000 f8f7 	bl	800ab38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	1e5a      	subs	r2, r3, #1
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	3310      	adds	r3, #16
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 fe56 	bl	800b610 <xTaskRemoveFromEventList>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d007      	beq.n	800a97a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a96a:	4b3d      	ldr	r3, [pc, #244]	; (800aa60 <xQueueReceive+0x1bc>)
 800a96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a97a:	f001 fe2b 	bl	800c5d4 <vPortExitCritical>
				return pdPASS;
 800a97e:	2301      	movs	r3, #1
 800a980:	e069      	b.n	800aa56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a988:	f001 fe24 	bl	800c5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e062      	b.n	800aa56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a996:	f107 0310 	add.w	r3, r7, #16
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fefe 	bl	800b79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a4:	f001 fe16 	bl	800c5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a8:	f000 fbd2 	bl	800b150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ac:	f001 fde2 	bl	800c574 <vPortEnterCritical>
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9bc:	d103      	bne.n	800a9c6 <xQueueReceive+0x122>
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d2:	d103      	bne.n	800a9dc <xQueueReceive+0x138>
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9dc:	f001 fdfa 	bl	800c5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e0:	1d3a      	adds	r2, r7, #4
 800a9e2:	f107 0310 	add.w	r3, r7, #16
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 feed 	bl	800b7c8 <xTaskCheckForTimeOut>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d123      	bne.n	800aa3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f6:	f000 f917 	bl	800ac28 <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d017      	beq.n	800aa30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	3324      	adds	r3, #36	; 0x24
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fd75 	bl	800b4f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa10:	f000 f8b8 	bl	800ab84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa14:	f000 fbaa 	bl	800b16c <xTaskResumeAll>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d189      	bne.n	800a932 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa1e:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <xQueueReceive+0x1bc>)
 800aa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	e780      	b.n	800a932 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa32:	f000 f8a7 	bl	800ab84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa36:	f000 fb99 	bl	800b16c <xTaskResumeAll>
 800aa3a:	e77a      	b.n	800a932 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3e:	f000 f8a1 	bl	800ab84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa42:	f000 fb93 	bl	800b16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa48:	f000 f8ee 	bl	800ac28 <prvIsQueueEmpty>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f43f af6f 	beq.w	800a932 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3730      	adds	r7, #48	; 0x30
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10d      	bne.n	800aa9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d14d      	bne.n	800ab26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fffc 	bl	800ba8c <xTaskPriorityDisinherit>
 800aa94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	e043      	b.n	800ab26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d119      	bne.n	800aad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6858      	ldr	r0, [r3, #4]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	461a      	mov	r2, r3
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	f002 f896 	bl	800cbe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabc:	441a      	add	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d32b      	bcc.n	800ab26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	605a      	str	r2, [r3, #4]
 800aad6:	e026      	b.n	800ab26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68d8      	ldr	r0, [r3, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae0:	461a      	mov	r2, r3
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	f002 f87c 	bl	800cbe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	425b      	negs	r3, r3
 800aaf2:	441a      	add	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d207      	bcs.n	800ab14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	441a      	add	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d105      	bne.n	800ab26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab2e:	697b      	ldr	r3, [r7, #20]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d018      	beq.n	800ab7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	441a      	add	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d303      	bcc.n	800ab6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68d9      	ldr	r1, [r3, #12]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	6838      	ldr	r0, [r7, #0]
 800ab78:	f002 f832 	bl	800cbe0 <memcpy>
	}
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab8c:	f001 fcf2 	bl	800c574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab98:	e011      	b.n	800abbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d012      	beq.n	800abc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3324      	adds	r3, #36	; 0x24
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fd32 	bl	800b610 <xTaskRemoveFromEventList>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abb2:	f000 fe6b 	bl	800b88c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	3b01      	subs	r3, #1
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dce9      	bgt.n	800ab9a <prvUnlockQueue+0x16>
 800abc6:	e000      	b.n	800abca <prvUnlockQueue+0x46>
					break;
 800abc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 fcff 	bl	800c5d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abd6:	f001 fccd 	bl	800c574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe2:	e011      	b.n	800ac08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d012      	beq.n	800ac12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3310      	adds	r3, #16
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fd0d 	bl	800b610 <xTaskRemoveFromEventList>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abfc:	f000 fe46 	bl	800b88c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dce9      	bgt.n	800abe4 <prvUnlockQueue+0x60>
 800ac10:	e000      	b.n	800ac14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 fcda 	bl	800c5d4 <vPortExitCritical>
}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac30:	f001 fca0 	bl	800c574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e001      	b.n	800ac46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac46:	f001 fcc5 	bl	800c5d4 <vPortExitCritical>

	return xReturn;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac5c:	f001 fc8a 	bl	800c574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d102      	bne.n	800ac72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e001      	b.n	800ac76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac76:	f001 fcad 	bl	800c5d4 <vPortExitCritical>

	return xReturn;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e014      	b.n	800acbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac94:	4a0f      	ldr	r2, [pc, #60]	; (800acd4 <vQueueAddToRegistry+0x50>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10b      	bne.n	800acb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aca0:	490c      	ldr	r1, [pc, #48]	; (800acd4 <vQueueAddToRegistry+0x50>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acaa:	4a0a      	ldr	r2, [pc, #40]	; (800acd4 <vQueueAddToRegistry+0x50>)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	4413      	add	r3, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acb6:	e006      	b.n	800acc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3301      	adds	r3, #1
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b07      	cmp	r3, #7
 800acc2:	d9e7      	bls.n	800ac94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	24000a74 	.word	0x24000a74

0800acd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ace8:	f001 fc44 	bl	800c574 <vPortEnterCritical>
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acf2:	b25b      	sxtb	r3, r3
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf8:	d103      	bne.n	800ad02 <vQueueWaitForMessageRestricted+0x2a>
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad08:	b25b      	sxtb	r3, r3
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0e:	d103      	bne.n	800ad18 <vQueueWaitForMessageRestricted+0x40>
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad18:	f001 fc5c 	bl	800c5d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	3324      	adds	r3, #36	; 0x24
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fc43 	bl	800b5b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad32:	6978      	ldr	r0, [r7, #20]
 800ad34:	f7ff ff26 	bl	800ab84 <prvUnlockQueue>
	}
 800ad38:	bf00      	nop
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08e      	sub	sp, #56	; 0x38
 800ad44:	af04      	add	r7, sp, #16
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	623b      	str	r3, [r7, #32]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xTaskCreateStatic+0x46>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	61fb      	str	r3, [r7, #28]
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad86:	235c      	movs	r3, #92	; 0x5c
 800ad88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b5c      	cmp	r3, #92	; 0x5c
 800ad8e:	d00a      	beq.n	800ada6 <xTaskCreateStatic+0x66>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	61bb      	str	r3, [r7, #24]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ada6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d01e      	beq.n	800adec <xTaskCreateStatic+0xac>
 800adae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01b      	beq.n	800adec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	2202      	movs	r2, #2
 800adc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adc6:	2300      	movs	r3, #0
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	f107 0314 	add.w	r3, r7, #20
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 f850 	bl	800ae84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ade4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ade6:	f000 f8dd 	bl	800afa4 <prvAddNewTaskToReadyList>
 800adea:	e001      	b.n	800adf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adf0:	697b      	ldr	r3, [r7, #20]
	}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3728      	adds	r7, #40	; 0x28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b08c      	sub	sp, #48	; 0x30
 800adfe:	af04      	add	r7, sp, #16
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	4613      	mov	r3, r2
 800ae08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 fcd2 	bl	800c7b8 <pvPortMalloc>
 800ae14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00e      	beq.n	800ae3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae1c:	205c      	movs	r0, #92	; 0x5c
 800ae1e:	f001 fccb 	bl	800c7b8 <pvPortMalloc>
 800ae22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae30:	e005      	b.n	800ae3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae32:	6978      	ldr	r0, [r7, #20]
 800ae34:	f001 fd8c 	bl	800c950 <vPortFree>
 800ae38:	e001      	b.n	800ae3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d017      	beq.n	800ae74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae4c:	88fa      	ldrh	r2, [r7, #6]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 f80e 	bl	800ae84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae68:	69f8      	ldr	r0, [r7, #28]
 800ae6a:	f000 f89b 	bl	800afa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	e002      	b.n	800ae7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae7a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3720      	adds	r7, #32
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	21a5      	movs	r1, #165	; 0xa5
 800ae9e:	f001 fead 	bl	800cbfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aeac:	440b      	add	r3, r1
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	f003 0307 	and.w	r3, r3, #7
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <prvInitialiseNewTask+0x58>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	617b      	str	r3, [r7, #20]
}
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d01f      	beq.n	800af22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aee2:	2300      	movs	r3, #0
 800aee4:	61fb      	str	r3, [r7, #28]
 800aee6:	e012      	b.n	800af0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	4413      	add	r3, r2
 800aeee:	7819      	ldrb	r1, [r3, #0]
 800aef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
 800aef6:	3334      	adds	r3, #52	; 0x34
 800aef8:	460a      	mov	r2, r1
 800aefa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	4413      	add	r3, r2
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d006      	beq.n	800af16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	3301      	adds	r3, #1
 800af0c:	61fb      	str	r3, [r7, #28]
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	2b0f      	cmp	r3, #15
 800af12:	d9e9      	bls.n	800aee8 <prvInitialiseNewTask+0x64>
 800af14:	e000      	b.n	800af18 <prvInitialiseNewTask+0x94>
			{
				break;
 800af16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af20:	e003      	b.n	800af2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	2b37      	cmp	r3, #55	; 0x37
 800af2e:	d901      	bls.n	800af34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af30:	2337      	movs	r3, #55	; 0x37
 800af32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	2200      	movs	r2, #0
 800af44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	3304      	adds	r3, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff f978 	bl	800a240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	3318      	adds	r3, #24
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff f973 	bl	800a240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	2200      	movs	r2, #0
 800af74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	69b8      	ldr	r0, [r7, #24]
 800af84:	f001 f9ca 	bl	800c31c <pxPortInitialiseStack>
 800af88:	4602      	mov	r2, r0
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af9a:	bf00      	nop
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afac:	f001 fae2 	bl	800c574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afb0:	4b2d      	ldr	r3, [pc, #180]	; (800b068 <prvAddNewTaskToReadyList+0xc4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3301      	adds	r3, #1
 800afb6:	4a2c      	ldr	r2, [pc, #176]	; (800b068 <prvAddNewTaskToReadyList+0xc4>)
 800afb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afba:	4b2c      	ldr	r3, [pc, #176]	; (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afc2:	4a2a      	ldr	r2, [pc, #168]	; (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afc8:	4b27      	ldr	r3, [pc, #156]	; (800b068 <prvAddNewTaskToReadyList+0xc4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d110      	bne.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afd0:	f000 fc80 	bl	800b8d4 <prvInitialiseTaskLists>
 800afd4:	e00d      	b.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afd6:	4b26      	ldr	r3, [pc, #152]	; (800b070 <prvAddNewTaskToReadyList+0xcc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d109      	bne.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afde:	4b23      	ldr	r3, [pc, #140]	; (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	429a      	cmp	r2, r3
 800afea:	d802      	bhi.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afec:	4a1f      	ldr	r2, [pc, #124]	; (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aff2:	4b20      	ldr	r3, [pc, #128]	; (800b074 <prvAddNewTaskToReadyList+0xd0>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3301      	adds	r3, #1
 800aff8:	4a1e      	ldr	r2, [pc, #120]	; (800b074 <prvAddNewTaskToReadyList+0xd0>)
 800affa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800affc:	4b1d      	ldr	r3, [pc, #116]	; (800b074 <prvAddNewTaskToReadyList+0xd0>)
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b008:	4b1b      	ldr	r3, [pc, #108]	; (800b078 <prvAddNewTaskToReadyList+0xd4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d903      	bls.n	800b018 <prvAddNewTaskToReadyList+0x74>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	4a18      	ldr	r2, [pc, #96]	; (800b078 <prvAddNewTaskToReadyList+0xd4>)
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4a15      	ldr	r2, [pc, #84]	; (800b07c <prvAddNewTaskToReadyList+0xd8>)
 800b026:	441a      	add	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3304      	adds	r3, #4
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f7ff f913 	bl	800a25a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b034:	f001 face 	bl	800c5d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b038:	4b0d      	ldr	r3, [pc, #52]	; (800b070 <prvAddNewTaskToReadyList+0xcc>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00e      	beq.n	800b05e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d207      	bcs.n	800b05e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b04e:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <prvAddNewTaskToReadyList+0xdc>)
 800b050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	24000f88 	.word	0x24000f88
 800b06c:	24000ab4 	.word	0x24000ab4
 800b070:	24000f94 	.word	0x24000f94
 800b074:	24000fa4 	.word	0x24000fa4
 800b078:	24000f90 	.word	0x24000f90
 800b07c:	24000ab8 	.word	0x24000ab8
 800b080:	e000ed04 	.word	0xe000ed04

0800b084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08a      	sub	sp, #40	; 0x28
 800b088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b08e:	2300      	movs	r3, #0
 800b090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b092:	463a      	mov	r2, r7
 800b094:	1d39      	adds	r1, r7, #4
 800b096:	f107 0308 	add.w	r3, r7, #8
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fe8e 	bl	8009dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	9202      	str	r2, [sp, #8]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	460a      	mov	r2, r1
 800b0b2:	4921      	ldr	r1, [pc, #132]	; (800b138 <vTaskStartScheduler+0xb4>)
 800b0b4:	4821      	ldr	r0, [pc, #132]	; (800b13c <vTaskStartScheduler+0xb8>)
 800b0b6:	f7ff fe43 	bl	800ad40 <xTaskCreateStatic>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4a20      	ldr	r2, [pc, #128]	; (800b140 <vTaskStartScheduler+0xbc>)
 800b0be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0c0:	4b1f      	ldr	r3, [pc, #124]	; (800b140 <vTaskStartScheduler+0xbc>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	e001      	b.n	800b0d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d102      	bne.n	800b0de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0d8:	f000 fdb2 	bl	800bc40 <xTimerCreateTimerTask>
 800b0dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d116      	bne.n	800b112 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	613b      	str	r3, [r7, #16]
}
 800b0f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0f8:	4b12      	ldr	r3, [pc, #72]	; (800b144 <vTaskStartScheduler+0xc0>)
 800b0fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b100:	4b11      	ldr	r3, [pc, #68]	; (800b148 <vTaskStartScheduler+0xc4>)
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b106:	4b11      	ldr	r3, [pc, #68]	; (800b14c <vTaskStartScheduler+0xc8>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b10c:	f001 f990 	bl	800c430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b110:	e00e      	b.n	800b130 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b118:	d10a      	bne.n	800b130 <vTaskStartScheduler+0xac>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	60fb      	str	r3, [r7, #12]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <vTaskStartScheduler+0xaa>
}
 800b130:	bf00      	nop
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	0800d7e4 	.word	0x0800d7e4
 800b13c:	0800b8a5 	.word	0x0800b8a5
 800b140:	24000fac 	.word	0x24000fac
 800b144:	24000fa8 	.word	0x24000fa8
 800b148:	24000f94 	.word	0x24000f94
 800b14c:	24000f8c 	.word	0x24000f8c

0800b150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b150:	b480      	push	{r7}
 800b152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <vTaskSuspendAll+0x18>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	4a03      	ldr	r2, [pc, #12]	; (800b168 <vTaskSuspendAll+0x18>)
 800b15c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b15e:	bf00      	nop
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	24000fb0 	.word	0x24000fb0

0800b16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b17a:	4b42      	ldr	r3, [pc, #264]	; (800b284 <xTaskResumeAll+0x118>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <xTaskResumeAll+0x2c>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	603b      	str	r3, [r7, #0]
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b198:	f001 f9ec 	bl	800c574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b19c:	4b39      	ldr	r3, [pc, #228]	; (800b284 <xTaskResumeAll+0x118>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4a38      	ldr	r2, [pc, #224]	; (800b284 <xTaskResumeAll+0x118>)
 800b1a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1a6:	4b37      	ldr	r3, [pc, #220]	; (800b284 <xTaskResumeAll+0x118>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d162      	bne.n	800b274 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1ae:	4b36      	ldr	r3, [pc, #216]	; (800b288 <xTaskResumeAll+0x11c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d05e      	beq.n	800b274 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1b6:	e02f      	b.n	800b218 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b8:	4b34      	ldr	r3, [pc, #208]	; (800b28c <xTaskResumeAll+0x120>)
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3318      	adds	r3, #24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff f8a5 	bl	800a314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff f8a0 	bl	800a314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d8:	4b2d      	ldr	r3, [pc, #180]	; (800b290 <xTaskResumeAll+0x124>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d903      	bls.n	800b1e8 <xTaskResumeAll+0x7c>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	4a2a      	ldr	r2, [pc, #168]	; (800b290 <xTaskResumeAll+0x124>)
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4a27      	ldr	r2, [pc, #156]	; (800b294 <xTaskResumeAll+0x128>)
 800b1f6:	441a      	add	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f7ff f82b 	bl	800a25a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4b23      	ldr	r3, [pc, #140]	; (800b298 <xTaskResumeAll+0x12c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	429a      	cmp	r2, r3
 800b210:	d302      	bcc.n	800b218 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b212:	4b22      	ldr	r3, [pc, #136]	; (800b29c <xTaskResumeAll+0x130>)
 800b214:	2201      	movs	r2, #1
 800b216:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b218:	4b1c      	ldr	r3, [pc, #112]	; (800b28c <xTaskResumeAll+0x120>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1cb      	bne.n	800b1b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b226:	f000 fbf3 	bl	800ba10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b22a:	4b1d      	ldr	r3, [pc, #116]	; (800b2a0 <xTaskResumeAll+0x134>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d010      	beq.n	800b258 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b236:	f000 f847 	bl	800b2c8 <xTaskIncrementTick>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b240:	4b16      	ldr	r3, [pc, #88]	; (800b29c <xTaskResumeAll+0x130>)
 800b242:	2201      	movs	r2, #1
 800b244:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3b01      	subs	r3, #1
 800b24a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1f1      	bne.n	800b236 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b252:	4b13      	ldr	r3, [pc, #76]	; (800b2a0 <xTaskResumeAll+0x134>)
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b258:	4b10      	ldr	r3, [pc, #64]	; (800b29c <xTaskResumeAll+0x130>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d009      	beq.n	800b274 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b260:	2301      	movs	r3, #1
 800b262:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b264:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <xTaskResumeAll+0x138>)
 800b266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b274:	f001 f9ae 	bl	800c5d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b278:	68bb      	ldr	r3, [r7, #8]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	24000fb0 	.word	0x24000fb0
 800b288:	24000f88 	.word	0x24000f88
 800b28c:	24000f48 	.word	0x24000f48
 800b290:	24000f90 	.word	0x24000f90
 800b294:	24000ab8 	.word	0x24000ab8
 800b298:	24000ab4 	.word	0x24000ab4
 800b29c:	24000f9c 	.word	0x24000f9c
 800b2a0:	24000f98 	.word	0x24000f98
 800b2a4:	e000ed04 	.word	0xe000ed04

0800b2a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <xTaskGetTickCount+0x1c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2b4:	687b      	ldr	r3, [r7, #4]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	370c      	adds	r7, #12
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	24000f8c 	.word	0x24000f8c

0800b2c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d2:	4b4f      	ldr	r3, [pc, #316]	; (800b410 <xTaskIncrementTick+0x148>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f040 808f 	bne.w	800b3fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2dc:	4b4d      	ldr	r3, [pc, #308]	; (800b414 <xTaskIncrementTick+0x14c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2e4:	4a4b      	ldr	r2, [pc, #300]	; (800b414 <xTaskIncrementTick+0x14c>)
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d120      	bne.n	800b332 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2f0:	4b49      	ldr	r3, [pc, #292]	; (800b418 <xTaskIncrementTick+0x150>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <xTaskIncrementTick+0x48>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	603b      	str	r3, [r7, #0]
}
 800b30c:	bf00      	nop
 800b30e:	e7fe      	b.n	800b30e <xTaskIncrementTick+0x46>
 800b310:	4b41      	ldr	r3, [pc, #260]	; (800b418 <xTaskIncrementTick+0x150>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	4b41      	ldr	r3, [pc, #260]	; (800b41c <xTaskIncrementTick+0x154>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a3f      	ldr	r2, [pc, #252]	; (800b418 <xTaskIncrementTick+0x150>)
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	4a3f      	ldr	r2, [pc, #252]	; (800b41c <xTaskIncrementTick+0x154>)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6013      	str	r3, [r2, #0]
 800b324:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <xTaskIncrementTick+0x158>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3301      	adds	r3, #1
 800b32a:	4a3d      	ldr	r2, [pc, #244]	; (800b420 <xTaskIncrementTick+0x158>)
 800b32c:	6013      	str	r3, [r2, #0]
 800b32e:	f000 fb6f 	bl	800ba10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b332:	4b3c      	ldr	r3, [pc, #240]	; (800b424 <xTaskIncrementTick+0x15c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d349      	bcc.n	800b3d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b33c:	4b36      	ldr	r3, [pc, #216]	; (800b418 <xTaskIncrementTick+0x150>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d104      	bne.n	800b350 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <xTaskIncrementTick+0x15c>)
 800b348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b34c:	601a      	str	r2, [r3, #0]
					break;
 800b34e:	e03f      	b.n	800b3d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b350:	4b31      	ldr	r3, [pc, #196]	; (800b418 <xTaskIncrementTick+0x150>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	429a      	cmp	r2, r3
 800b366:	d203      	bcs.n	800b370 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b368:	4a2e      	ldr	r2, [pc, #184]	; (800b424 <xTaskIncrementTick+0x15c>)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b36e:	e02f      	b.n	800b3d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	3304      	adds	r3, #4
 800b374:	4618      	mov	r0, r3
 800b376:	f7fe ffcd 	bl	800a314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	3318      	adds	r3, #24
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe ffc4 	bl	800a314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b390:	4b25      	ldr	r3, [pc, #148]	; (800b428 <xTaskIncrementTick+0x160>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	429a      	cmp	r2, r3
 800b396:	d903      	bls.n	800b3a0 <xTaskIncrementTick+0xd8>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	4a22      	ldr	r2, [pc, #136]	; (800b428 <xTaskIncrementTick+0x160>)
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4a1f      	ldr	r2, [pc, #124]	; (800b42c <xTaskIncrementTick+0x164>)
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	f7fe ff4f 	bl	800a25a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c0:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <xTaskIncrementTick+0x168>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d3b8      	bcc.n	800b33c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ce:	e7b5      	b.n	800b33c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3d0:	4b17      	ldr	r3, [pc, #92]	; (800b430 <xTaskIncrementTick+0x168>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d6:	4915      	ldr	r1, [pc, #84]	; (800b42c <xTaskIncrementTick+0x164>)
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	440b      	add	r3, r1
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d901      	bls.n	800b3ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3ec:	4b11      	ldr	r3, [pc, #68]	; (800b434 <xTaskIncrementTick+0x16c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	e004      	b.n	800b404 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <xTaskIncrementTick+0x170>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3301      	adds	r3, #1
 800b400:	4a0d      	ldr	r2, [pc, #52]	; (800b438 <xTaskIncrementTick+0x170>)
 800b402:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b404:	697b      	ldr	r3, [r7, #20]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	24000fb0 	.word	0x24000fb0
 800b414:	24000f8c 	.word	0x24000f8c
 800b418:	24000f40 	.word	0x24000f40
 800b41c:	24000f44 	.word	0x24000f44
 800b420:	24000fa0 	.word	0x24000fa0
 800b424:	24000fa8 	.word	0x24000fa8
 800b428:	24000f90 	.word	0x24000f90
 800b42c:	24000ab8 	.word	0x24000ab8
 800b430:	24000ab4 	.word	0x24000ab4
 800b434:	24000f9c 	.word	0x24000f9c
 800b438:	24000f98 	.word	0x24000f98

0800b43c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b442:	4b28      	ldr	r3, [pc, #160]	; (800b4e4 <vTaskSwitchContext+0xa8>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b44a:	4b27      	ldr	r3, [pc, #156]	; (800b4e8 <vTaskSwitchContext+0xac>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b450:	e041      	b.n	800b4d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b452:	4b25      	ldr	r3, [pc, #148]	; (800b4e8 <vTaskSwitchContext+0xac>)
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b458:	4b24      	ldr	r3, [pc, #144]	; (800b4ec <vTaskSwitchContext+0xb0>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	e010      	b.n	800b482 <vTaskSwitchContext+0x46>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10a      	bne.n	800b47c <vTaskSwitchContext+0x40>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	607b      	str	r3, [r7, #4]
}
 800b478:	bf00      	nop
 800b47a:	e7fe      	b.n	800b47a <vTaskSwitchContext+0x3e>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3b01      	subs	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	491b      	ldr	r1, [pc, #108]	; (800b4f0 <vTaskSwitchContext+0xb4>)
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0e4      	beq.n	800b460 <vTaskSwitchContext+0x24>
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4a13      	ldr	r2, [pc, #76]	; (800b4f0 <vTaskSwitchContext+0xb4>)
 800b4a2:	4413      	add	r3, r2
 800b4a4:	60bb      	str	r3, [r7, #8]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	605a      	str	r2, [r3, #4]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d104      	bne.n	800b4c6 <vTaskSwitchContext+0x8a>
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	605a      	str	r2, [r3, #4]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	4a09      	ldr	r2, [pc, #36]	; (800b4f4 <vTaskSwitchContext+0xb8>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	4a06      	ldr	r2, [pc, #24]	; (800b4ec <vTaskSwitchContext+0xb0>)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6013      	str	r3, [r2, #0]
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	24000fb0 	.word	0x24000fb0
 800b4e8:	24000f9c 	.word	0x24000f9c
 800b4ec:	24000f90 	.word	0x24000f90
 800b4f0:	24000ab8 	.word	0x24000ab8
 800b4f4:	24000ab4 	.word	0x24000ab4

0800b4f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	60fb      	str	r3, [r7, #12]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b51e:	4b07      	ldr	r3, [pc, #28]	; (800b53c <vTaskPlaceOnEventList+0x44>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3318      	adds	r3, #24
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7fe febb 	bl	800a2a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b52c:	2101      	movs	r1, #1
 800b52e:	6838      	ldr	r0, [r7, #0]
 800b530:	f000 fb32 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
}
 800b534:	bf00      	nop
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	24000ab4 	.word	0x24000ab4

0800b540 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10a      	bne.n	800b568 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	617b      	str	r3, [r7, #20]
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	613b      	str	r3, [r7, #16]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b586:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b590:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b592:	4b08      	ldr	r3, [pc, #32]	; (800b5b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3318      	adds	r3, #24
 800b598:	4619      	mov	r1, r3
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7fe fe5d 	bl	800a25a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 faf8 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
}
 800b5a8:	bf00      	nop
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	24000fb0 	.word	0x24000fb0
 800b5b4:	24000ab4 	.word	0x24000ab4

0800b5b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10a      	bne.n	800b5e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	617b      	str	r3, [r7, #20]
}
 800b5dc:	bf00      	nop
 800b5de:	e7fe      	b.n	800b5de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5e0:	4b0a      	ldr	r3, [pc, #40]	; (800b60c <vTaskPlaceOnEventListRestricted+0x54>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3318      	adds	r3, #24
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7fe fe36 	bl	800a25a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	68b8      	ldr	r0, [r7, #8]
 800b5fe:	f000 facb 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
	}
 800b602:	bf00      	nop
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	24000ab4 	.word	0x24000ab4

0800b610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	60fb      	str	r3, [r7, #12]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	3318      	adds	r3, #24
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fe67 	bl	800a314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b646:	4b1e      	ldr	r3, [pc, #120]	; (800b6c0 <xTaskRemoveFromEventList+0xb0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d11d      	bne.n	800b68a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fe5e 	bl	800a314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	4b19      	ldr	r3, [pc, #100]	; (800b6c4 <xTaskRemoveFromEventList+0xb4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	429a      	cmp	r2, r3
 800b662:	d903      	bls.n	800b66c <xTaskRemoveFromEventList+0x5c>
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	4a16      	ldr	r2, [pc, #88]	; (800b6c4 <xTaskRemoveFromEventList+0xb4>)
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4a13      	ldr	r2, [pc, #76]	; (800b6c8 <xTaskRemoveFromEventList+0xb8>)
 800b67a:	441a      	add	r2, r3
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	3304      	adds	r3, #4
 800b680:	4619      	mov	r1, r3
 800b682:	4610      	mov	r0, r2
 800b684:	f7fe fde9 	bl	800a25a <vListInsertEnd>
 800b688:	e005      	b.n	800b696 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	3318      	adds	r3, #24
 800b68e:	4619      	mov	r1, r3
 800b690:	480e      	ldr	r0, [pc, #56]	; (800b6cc <xTaskRemoveFromEventList+0xbc>)
 800b692:	f7fe fde2 	bl	800a25a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69a:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <xTaskRemoveFromEventList+0xc0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d905      	bls.n	800b6b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <xTaskRemoveFromEventList+0xc4>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	e001      	b.n	800b6b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6b4:	697b      	ldr	r3, [r7, #20]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	24000fb0 	.word	0x24000fb0
 800b6c4:	24000f90 	.word	0x24000f90
 800b6c8:	24000ab8 	.word	0x24000ab8
 800b6cc:	24000f48 	.word	0x24000f48
 800b6d0:	24000ab4 	.word	0x24000ab4
 800b6d4:	24000f9c 	.word	0x24000f9c

0800b6d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b6e2:	4b29      	ldr	r3, [pc, #164]	; (800b788 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	613b      	str	r3, [r7, #16]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7fe fdf1 	bl	800a314 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	3304      	adds	r3, #4
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe fdec 	bl	800a314 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b740:	4b12      	ldr	r3, [pc, #72]	; (800b78c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d903      	bls.n	800b750 <vTaskRemoveFromUnorderedEventList+0x78>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	4a0f      	ldr	r2, [pc, #60]	; (800b78c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4a0c      	ldr	r2, [pc, #48]	; (800b790 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b75e:	441a      	add	r2, r3
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	3304      	adds	r3, #4
 800b764:	4619      	mov	r1, r3
 800b766:	4610      	mov	r0, r2
 800b768:	f7fe fd77 	bl	800a25a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b770:	4b08      	ldr	r3, [pc, #32]	; (800b794 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	429a      	cmp	r2, r3
 800b778:	d902      	bls.n	800b780 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b77a:	4b07      	ldr	r3, [pc, #28]	; (800b798 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b77c:	2201      	movs	r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
	}
}
 800b780:	bf00      	nop
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	24000fb0 	.word	0x24000fb0
 800b78c:	24000f90 	.word	0x24000f90
 800b790:	24000ab8 	.word	0x24000ab8
 800b794:	24000ab4 	.word	0x24000ab4
 800b798:	24000f9c 	.word	0x24000f9c

0800b79c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7a4:	4b06      	ldr	r3, [pc, #24]	; (800b7c0 <vTaskInternalSetTimeOutState+0x24>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7ac:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <vTaskInternalSetTimeOutState+0x28>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	605a      	str	r2, [r3, #4]
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	24000fa0 	.word	0x24000fa0
 800b7c4:	24000f8c 	.word	0x24000f8c

0800b7c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	613b      	str	r3, [r7, #16]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	60fb      	str	r3, [r7, #12]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b80a:	f000 feb3 	bl	800c574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b80e:	4b1d      	ldr	r3, [pc, #116]	; (800b884 <xTaskCheckForTimeOut+0xbc>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b826:	d102      	bne.n	800b82e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b828:	2300      	movs	r3, #0
 800b82a:	61fb      	str	r3, [r7, #28]
 800b82c:	e023      	b.n	800b876 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4b15      	ldr	r3, [pc, #84]	; (800b888 <xTaskCheckForTimeOut+0xc0>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	429a      	cmp	r2, r3
 800b838:	d007      	beq.n	800b84a <xTaskCheckForTimeOut+0x82>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	429a      	cmp	r2, r3
 800b842:	d302      	bcc.n	800b84a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b844:	2301      	movs	r3, #1
 800b846:	61fb      	str	r3, [r7, #28]
 800b848:	e015      	b.n	800b876 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	429a      	cmp	r2, r3
 800b852:	d20b      	bcs.n	800b86c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	1ad2      	subs	r2, r2, r3
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ff9b 	bl	800b79c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b866:	2300      	movs	r3, #0
 800b868:	61fb      	str	r3, [r7, #28]
 800b86a:	e004      	b.n	800b876 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b872:	2301      	movs	r3, #1
 800b874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b876:	f000 fead 	bl	800c5d4 <vPortExitCritical>

	return xReturn;
 800b87a:	69fb      	ldr	r3, [r7, #28]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	24000f8c 	.word	0x24000f8c
 800b888:	24000fa0 	.word	0x24000fa0

0800b88c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b890:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <vTaskMissedYield+0x14>)
 800b892:	2201      	movs	r2, #1
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	bf00      	nop
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	24000f9c 	.word	0x24000f9c

0800b8a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8ac:	f000 f852 	bl	800b954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8b0:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <prvIdleTask+0x28>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d9f9      	bls.n	800b8ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8b8:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <prvIdleTask+0x2c>)
 800b8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8c8:	e7f0      	b.n	800b8ac <prvIdleTask+0x8>
 800b8ca:	bf00      	nop
 800b8cc:	24000ab8 	.word	0x24000ab8
 800b8d0:	e000ed04 	.word	0xe000ed04

0800b8d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8da:	2300      	movs	r3, #0
 800b8dc:	607b      	str	r3, [r7, #4]
 800b8de:	e00c      	b.n	800b8fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4a12      	ldr	r2, [pc, #72]	; (800b934 <prvInitialiseTaskLists+0x60>)
 800b8ec:	4413      	add	r3, r2
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe fc86 	bl	800a200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	607b      	str	r3, [r7, #4]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b37      	cmp	r3, #55	; 0x37
 800b8fe:	d9ef      	bls.n	800b8e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b900:	480d      	ldr	r0, [pc, #52]	; (800b938 <prvInitialiseTaskLists+0x64>)
 800b902:	f7fe fc7d 	bl	800a200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b906:	480d      	ldr	r0, [pc, #52]	; (800b93c <prvInitialiseTaskLists+0x68>)
 800b908:	f7fe fc7a 	bl	800a200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b90c:	480c      	ldr	r0, [pc, #48]	; (800b940 <prvInitialiseTaskLists+0x6c>)
 800b90e:	f7fe fc77 	bl	800a200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b912:	480c      	ldr	r0, [pc, #48]	; (800b944 <prvInitialiseTaskLists+0x70>)
 800b914:	f7fe fc74 	bl	800a200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b918:	480b      	ldr	r0, [pc, #44]	; (800b948 <prvInitialiseTaskLists+0x74>)
 800b91a:	f7fe fc71 	bl	800a200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b91e:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <prvInitialiseTaskLists+0x78>)
 800b920:	4a05      	ldr	r2, [pc, #20]	; (800b938 <prvInitialiseTaskLists+0x64>)
 800b922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b924:	4b0a      	ldr	r3, [pc, #40]	; (800b950 <prvInitialiseTaskLists+0x7c>)
 800b926:	4a05      	ldr	r2, [pc, #20]	; (800b93c <prvInitialiseTaskLists+0x68>)
 800b928:	601a      	str	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	24000ab8 	.word	0x24000ab8
 800b938:	24000f18 	.word	0x24000f18
 800b93c:	24000f2c 	.word	0x24000f2c
 800b940:	24000f48 	.word	0x24000f48
 800b944:	24000f5c 	.word	0x24000f5c
 800b948:	24000f74 	.word	0x24000f74
 800b94c:	24000f40 	.word	0x24000f40
 800b950:	24000f44 	.word	0x24000f44

0800b954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b95a:	e019      	b.n	800b990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b95c:	f000 fe0a 	bl	800c574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b960:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <prvCheckTasksWaitingTermination+0x50>)
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3304      	adds	r3, #4
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe fcd1 	bl	800a314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b972:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <prvCheckTasksWaitingTermination+0x54>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3b01      	subs	r3, #1
 800b978:	4a0b      	ldr	r2, [pc, #44]	; (800b9a8 <prvCheckTasksWaitingTermination+0x54>)
 800b97a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b97c:	4b0b      	ldr	r3, [pc, #44]	; (800b9ac <prvCheckTasksWaitingTermination+0x58>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3b01      	subs	r3, #1
 800b982:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <prvCheckTasksWaitingTermination+0x58>)
 800b984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b986:	f000 fe25 	bl	800c5d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f810 	bl	800b9b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <prvCheckTasksWaitingTermination+0x58>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1e1      	bne.n	800b95c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b998:	bf00      	nop
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	24000f5c 	.word	0x24000f5c
 800b9a8:	24000f88 	.word	0x24000f88
 800b9ac:	24000f70 	.word	0x24000f70

0800b9b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d108      	bne.n	800b9d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 ffc2 	bl	800c950 <vPortFree>
				vPortFree( pxTCB );
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 ffbf 	bl	800c950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9d2:	e018      	b.n	800ba06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d103      	bne.n	800b9e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 ffb6 	bl	800c950 <vPortFree>
	}
 800b9e4:	e00f      	b.n	800ba06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d00a      	beq.n	800ba06 <prvDeleteTCB+0x56>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	60fb      	str	r3, [r7, #12]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <prvDeleteTCB+0x54>
	}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvResetNextTaskUnblockTime+0x38>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d104      	bne.n	800ba2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba20:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <prvResetNextTaskUnblockTime+0x3c>)
 800ba22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba28:	e008      	b.n	800ba3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2a:	4b07      	ldr	r3, [pc, #28]	; (800ba48 <prvResetNextTaskUnblockTime+0x38>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	4a04      	ldr	r2, [pc, #16]	; (800ba4c <prvResetNextTaskUnblockTime+0x3c>)
 800ba3a:	6013      	str	r3, [r2, #0]
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	24000f40 	.word	0x24000f40
 800ba4c:	24000fa8 	.word	0x24000fa8

0800ba50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba56:	4b0b      	ldr	r3, [pc, #44]	; (800ba84 <xTaskGetSchedulerState+0x34>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d102      	bne.n	800ba64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	607b      	str	r3, [r7, #4]
 800ba62:	e008      	b.n	800ba76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba64:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <xTaskGetSchedulerState+0x38>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	607b      	str	r3, [r7, #4]
 800ba70:	e001      	b.n	800ba76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba72:	2300      	movs	r3, #0
 800ba74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba76:	687b      	ldr	r3, [r7, #4]
	}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	24000f94 	.word	0x24000f94
 800ba88:	24000fb0 	.word	0x24000fb0

0800ba8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d056      	beq.n	800bb50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800baa2:	4b2e      	ldr	r3, [pc, #184]	; (800bb5c <xTaskPriorityDisinherit+0xd0>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d00a      	beq.n	800bac2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	60fb      	str	r3, [r7, #12]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	60bb      	str	r3, [r7, #8]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae4:	1e5a      	subs	r2, r3, #1
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d02c      	beq.n	800bb50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d128      	bne.n	800bb50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fc06 	bl	800a314 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <xTaskPriorityDisinherit+0xd4>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d903      	bls.n	800bb30 <xTaskPriorityDisinherit+0xa4>
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	4a0c      	ldr	r2, [pc, #48]	; (800bb60 <xTaskPriorityDisinherit+0xd4>)
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb34:	4613      	mov	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4a09      	ldr	r2, [pc, #36]	; (800bb64 <xTaskPriorityDisinherit+0xd8>)
 800bb3e:	441a      	add	r2, r3
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fe fb87 	bl	800a25a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb50:	697b      	ldr	r3, [r7, #20]
	}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	24000ab4 	.word	0x24000ab4
 800bb60:	24000f90 	.word	0x24000f90
 800bb64:	24000ab8 	.word	0x24000ab8

0800bb68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <uxTaskResetEventItemValue+0x2c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb76:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <uxTaskResetEventItemValue+0x2c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <uxTaskResetEventItemValue+0x2c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bb84:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bb86:	687b      	ldr	r3, [r7, #4]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	24000ab4 	.word	0x24000ab4

0800bb98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bba2:	4b21      	ldr	r3, [pc, #132]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x90>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba8:	4b20      	ldr	r3, [pc, #128]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3304      	adds	r3, #4
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fbb0 	bl	800a314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbba:	d10a      	bne.n	800bbd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d007      	beq.n	800bbd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbc2:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4819      	ldr	r0, [pc, #100]	; (800bc30 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbcc:	f7fe fb45 	bl	800a25a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbd0:	e026      	b.n	800bc20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbda:	4b14      	ldr	r3, [pc, #80]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d209      	bcs.n	800bbfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	f7fe fb53 	bl	800a2a2 <vListInsert>
}
 800bbfc:	e010      	b.n	800bc20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbfe:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3304      	adds	r3, #4
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7fe fb49 	bl	800a2a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d202      	bcs.n	800bc20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc1a:	4a08      	ldr	r2, [pc, #32]	; (800bc3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	6013      	str	r3, [r2, #0]
}
 800bc20:	bf00      	nop
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	24000f8c 	.word	0x24000f8c
 800bc2c:	24000ab4 	.word	0x24000ab4
 800bc30:	24000f74 	.word	0x24000f74
 800bc34:	24000f44 	.word	0x24000f44
 800bc38:	24000f40 	.word	0x24000f40
 800bc3c:	24000fa8 	.word	0x24000fa8

0800bc40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08a      	sub	sp, #40	; 0x28
 800bc44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc4a:	f000 fb07 	bl	800c25c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc4e:	4b1c      	ldr	r3, [pc, #112]	; (800bcc0 <xTimerCreateTimerTask+0x80>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d021      	beq.n	800bc9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc5e:	1d3a      	adds	r2, r7, #4
 800bc60:	f107 0108 	add.w	r1, r7, #8
 800bc64:	f107 030c 	add.w	r3, r7, #12
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe f8c1 	bl	8009df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	9202      	str	r2, [sp, #8]
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	2302      	movs	r3, #2
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	460a      	mov	r2, r1
 800bc80:	4910      	ldr	r1, [pc, #64]	; (800bcc4 <xTimerCreateTimerTask+0x84>)
 800bc82:	4811      	ldr	r0, [pc, #68]	; (800bcc8 <xTimerCreateTimerTask+0x88>)
 800bc84:	f7ff f85c 	bl	800ad40 <xTaskCreateStatic>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	4a10      	ldr	r2, [pc, #64]	; (800bccc <xTimerCreateTimerTask+0x8c>)
 800bc8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <xTimerCreateTimerTask+0x8c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc96:	2301      	movs	r3, #1
 800bc98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	613b      	str	r3, [r7, #16]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcb6:	697b      	ldr	r3, [r7, #20]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	24000fe4 	.word	0x24000fe4
 800bcc4:	0800d7ec 	.word	0x0800d7ec
 800bcc8:	0800be05 	.word	0x0800be05
 800bccc:	24000fe8 	.word	0x24000fe8

0800bcd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08a      	sub	sp, #40	; 0x28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xTimerGenericCommand+0x2e>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	623b      	str	r3, [r7, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcfe:	4b1a      	ldr	r3, [pc, #104]	; (800bd68 <xTimerGenericCommand+0x98>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d02a      	beq.n	800bd5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	2b05      	cmp	r3, #5
 800bd16:	dc18      	bgt.n	800bd4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd18:	f7ff fe9a 	bl	800ba50 <xTaskGetSchedulerState>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d109      	bne.n	800bd36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd22:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <xTimerGenericCommand+0x98>)
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f107 0110 	add.w	r1, r7, #16
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd2e:	f7fe fc1f 	bl	800a570 <xQueueGenericSend>
 800bd32:	6278      	str	r0, [r7, #36]	; 0x24
 800bd34:	e012      	b.n	800bd5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd36:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <xTimerGenericCommand+0x98>)
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	f107 0110 	add.w	r1, r7, #16
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7fe fc15 	bl	800a570 <xQueueGenericSend>
 800bd46:	6278      	str	r0, [r7, #36]	; 0x24
 800bd48:	e008      	b.n	800bd5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd4a:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <xTimerGenericCommand+0x98>)
 800bd4c:	6818      	ldr	r0, [r3, #0]
 800bd4e:	f107 0110 	add.w	r1, r7, #16
 800bd52:	2300      	movs	r3, #0
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	f7fe fd09 	bl	800a76c <xQueueGenericSendFromISR>
 800bd5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3728      	adds	r7, #40	; 0x28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	24000fe4 	.word	0x24000fe4

0800bd6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd76:	4b22      	ldr	r3, [pc, #136]	; (800be00 <prvProcessExpiredTimer+0x94>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe fac5 	bl	800a314 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd90:	f003 0304 	and.w	r3, r3, #4
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d022      	beq.n	800bdde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	18d1      	adds	r1, r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	6978      	ldr	r0, [r7, #20]
 800bda6:	f000 f8d1 	bl	800bf4c <prvInsertTimerInActiveList>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01f      	beq.n	800bdf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	6978      	ldr	r0, [r7, #20]
 800bdbc:	f7ff ff88 	bl	800bcd0 <xTimerGenericCommand>
 800bdc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d113      	bne.n	800bdf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	60fb      	str	r3, [r7, #12]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde4:	f023 0301 	bic.w	r3, r3, #1
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	6978      	ldr	r0, [r7, #20]
 800bdf6:	4798      	blx	r3
}
 800bdf8:	bf00      	nop
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	24000fdc 	.word	0x24000fdc

0800be04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4618      	mov	r0, r3
 800be12:	f000 f857 	bl	800bec4 <prvGetNextExpireTime>
 800be16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	4619      	mov	r1, r3
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f803 	bl	800be28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be22:	f000 f8d5 	bl	800bfd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be26:	e7f1      	b.n	800be0c <prvTimerTask+0x8>

0800be28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be32:	f7ff f98d 	bl	800b150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f866 	bl	800bf0c <prvSampleTimeNow>
 800be40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d130      	bne.n	800beaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <prvProcessTimerOrBlockTask+0x3c>
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	429a      	cmp	r2, r3
 800be54:	d806      	bhi.n	800be64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be56:	f7ff f989 	bl	800b16c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff ff85 	bl	800bd6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be62:	e024      	b.n	800beae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d008      	beq.n	800be7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be6a:	4b13      	ldr	r3, [pc, #76]	; (800beb8 <prvProcessTimerOrBlockTask+0x90>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <prvProcessTimerOrBlockTask+0x50>
 800be74:	2301      	movs	r3, #1
 800be76:	e000      	b.n	800be7a <prvProcessTimerOrBlockTask+0x52>
 800be78:	2300      	movs	r3, #0
 800be7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be7c:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <prvProcessTimerOrBlockTask+0x94>)
 800be7e:	6818      	ldr	r0, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4619      	mov	r1, r3
 800be8a:	f7fe ff25 	bl	800acd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be8e:	f7ff f96d 	bl	800b16c <xTaskResumeAll>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be98:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <prvProcessTimerOrBlockTask+0x98>)
 800be9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	f3bf 8f6f 	isb	sy
}
 800bea8:	e001      	b.n	800beae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beaa:	f7ff f95f 	bl	800b16c <xTaskResumeAll>
}
 800beae:	bf00      	nop
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	24000fe0 	.word	0x24000fe0
 800bebc:	24000fe4 	.word	0x24000fe4
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800becc:	4b0e      	ldr	r3, [pc, #56]	; (800bf08 <prvGetNextExpireTime+0x44>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <prvGetNextExpireTime+0x16>
 800bed6:	2201      	movs	r2, #1
 800bed8:	e000      	b.n	800bedc <prvGetNextExpireTime+0x18>
 800beda:	2200      	movs	r2, #0
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d105      	bne.n	800bef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bee8:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <prvGetNextExpireTime+0x44>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e001      	b.n	800bef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	24000fdc 	.word	0x24000fdc

0800bf0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf14:	f7ff f9c8 	bl	800b2a8 <xTaskGetTickCount>
 800bf18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf1a:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <prvSampleTimeNow+0x3c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d205      	bcs.n	800bf30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf24:	f000 f936 	bl	800c194 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e002      	b.n	800bf36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf36:	4a04      	ldr	r2, [pc, #16]	; (800bf48 <prvSampleTimeNow+0x3c>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	24000fec 	.word	0x24000fec

0800bf4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d812      	bhi.n	800bf98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	1ad2      	subs	r2, r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d302      	bcc.n	800bf86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf80:	2301      	movs	r3, #1
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	e01b      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf86:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <prvInsertTimerInActiveList+0x7c>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7fe f986 	bl	800a2a2 <vListInsert>
 800bf96:	e012      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d206      	bcs.n	800bfae <prvInsertTimerInActiveList+0x62>
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d302      	bcc.n	800bfae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e007      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <prvInsertTimerInActiveList+0x80>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4610      	mov	r0, r2
 800bfba:	f7fe f972 	bl	800a2a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfbe:	697b      	ldr	r3, [r7, #20]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	24000fe0 	.word	0x24000fe0
 800bfcc:	24000fdc 	.word	0x24000fdc

0800bfd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08e      	sub	sp, #56	; 0x38
 800bfd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfd6:	e0ca      	b.n	800c16e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	da18      	bge.n	800c010 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfde:	1d3b      	adds	r3, r7, #4
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10a      	bne.n	800c000 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	61fb      	str	r3, [r7, #28]
}
 800bffc:	bf00      	nop
 800bffe:	e7fe      	b.n	800bffe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c006:	6850      	ldr	r0, [r2, #4]
 800c008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00a:	6892      	ldr	r2, [r2, #8]
 800c00c:	4611      	mov	r1, r2
 800c00e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	f2c0 80aa 	blt.w	800c16c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	695b      	ldr	r3, [r3, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	3304      	adds	r3, #4
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe f973 	bl	800a314 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c02e:	463b      	mov	r3, r7
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff ff6b 	bl	800bf0c <prvSampleTimeNow>
 800c036:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b09      	cmp	r3, #9
 800c03c:	f200 8097 	bhi.w	800c16e <prvProcessReceivedCommands+0x19e>
 800c040:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <prvProcessReceivedCommands+0x78>)
 800c042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c046:	bf00      	nop
 800c048:	0800c071 	.word	0x0800c071
 800c04c:	0800c071 	.word	0x0800c071
 800c050:	0800c071 	.word	0x0800c071
 800c054:	0800c0e5 	.word	0x0800c0e5
 800c058:	0800c0f9 	.word	0x0800c0f9
 800c05c:	0800c143 	.word	0x0800c143
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c071 	.word	0x0800c071
 800c068:	0800c0e5 	.word	0x0800c0e5
 800c06c:	0800c0f9 	.word	0x0800c0f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	18d1      	adds	r1, r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c090:	f7ff ff5c 	bl	800bf4c <prvInsertTimerInActiveList>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d069      	beq.n	800c16e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d05e      	beq.n	800c16e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	441a      	add	r2, r3
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0c2:	f7ff fe05 	bl	800bcd0 <xTimerGenericCommand>
 800c0c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d14f      	bne.n	800c16e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	61bb      	str	r3, [r7, #24]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0f6:	e03a      	b.n	800c16e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0fe:	f043 0301 	orr.w	r3, r3, #1
 800c102:	b2da      	uxtb	r2, r3
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10a      	bne.n	800c12e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	617b      	str	r3, [r7, #20]
}
 800c12a:	bf00      	nop
 800c12c:	e7fe      	b.n	800c12c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	18d1      	adds	r1, r2, r3
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13c:	f7ff ff06 	bl	800bf4c <prvInsertTimerInActiveList>
					break;
 800c140:	e015      	b.n	800c16e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d103      	bne.n	800c158 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c152:	f000 fbfd 	bl	800c950 <vPortFree>
 800c156:	e00a      	b.n	800c16e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c15e:	f023 0301 	bic.w	r3, r3, #1
 800c162:	b2da      	uxtb	r2, r3
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c16a:	e000      	b.n	800c16e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c16c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c16e:	4b08      	ldr	r3, [pc, #32]	; (800c190 <prvProcessReceivedCommands+0x1c0>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	1d39      	adds	r1, r7, #4
 800c174:	2200      	movs	r2, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fb94 	bl	800a8a4 <xQueueReceive>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f47f af2a 	bne.w	800bfd8 <prvProcessReceivedCommands+0x8>
	}
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop
 800c188:	3730      	adds	r7, #48	; 0x30
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	24000fe4 	.word	0x24000fe4

0800c194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c19a:	e048      	b.n	800c22e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c19c:	4b2d      	ldr	r3, [pc, #180]	; (800c254 <prvSwitchTimerLists+0xc0>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a6:	4b2b      	ldr	r3, [pc, #172]	; (800c254 <prvSwitchTimerLists+0xc0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fe f8ad 	bl	800a314 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c8:	f003 0304 	and.w	r3, r3, #4
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d02e      	beq.n	800c22e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d90e      	bls.n	800c200 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1ee:	4b19      	ldr	r3, [pc, #100]	; (800c254 <prvSwitchTimerLists+0xc0>)
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f7fe f852 	bl	800a2a2 <vListInsert>
 800c1fe:	e016      	b.n	800c22e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c200:	2300      	movs	r3, #0
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	2100      	movs	r1, #0
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f7ff fd60 	bl	800bcd0 <xTimerGenericCommand>
 800c210:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	603b      	str	r3, [r7, #0]
}
 800c22a:	bf00      	nop
 800c22c:	e7fe      	b.n	800c22c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c22e:	4b09      	ldr	r3, [pc, #36]	; (800c254 <prvSwitchTimerLists+0xc0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1b1      	bne.n	800c19c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <prvSwitchTimerLists+0xc0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c23e:	4b06      	ldr	r3, [pc, #24]	; (800c258 <prvSwitchTimerLists+0xc4>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a04      	ldr	r2, [pc, #16]	; (800c254 <prvSwitchTimerLists+0xc0>)
 800c244:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c246:	4a04      	ldr	r2, [pc, #16]	; (800c258 <prvSwitchTimerLists+0xc4>)
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	6013      	str	r3, [r2, #0]
}
 800c24c:	bf00      	nop
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	24000fdc 	.word	0x24000fdc
 800c258:	24000fe0 	.word	0x24000fe0

0800c25c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c262:	f000 f987 	bl	800c574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c266:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <prvCheckForValidListAndQueue+0x60>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d120      	bne.n	800c2b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c26e:	4814      	ldr	r0, [pc, #80]	; (800c2c0 <prvCheckForValidListAndQueue+0x64>)
 800c270:	f7fd ffc6 	bl	800a200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c274:	4813      	ldr	r0, [pc, #76]	; (800c2c4 <prvCheckForValidListAndQueue+0x68>)
 800c276:	f7fd ffc3 	bl	800a200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c27a:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <prvCheckForValidListAndQueue+0x6c>)
 800c27c:	4a10      	ldr	r2, [pc, #64]	; (800c2c0 <prvCheckForValidListAndQueue+0x64>)
 800c27e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c280:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <prvCheckForValidListAndQueue+0x70>)
 800c282:	4a10      	ldr	r2, [pc, #64]	; (800c2c4 <prvCheckForValidListAndQueue+0x68>)
 800c284:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c286:	2300      	movs	r3, #0
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	4b11      	ldr	r3, [pc, #68]	; (800c2d0 <prvCheckForValidListAndQueue+0x74>)
 800c28c:	4a11      	ldr	r2, [pc, #68]	; (800c2d4 <prvCheckForValidListAndQueue+0x78>)
 800c28e:	2110      	movs	r1, #16
 800c290:	200a      	movs	r0, #10
 800c292:	f7fe f8d1 	bl	800a438 <xQueueGenericCreateStatic>
 800c296:	4603      	mov	r3, r0
 800c298:	4a08      	ldr	r2, [pc, #32]	; (800c2bc <prvCheckForValidListAndQueue+0x60>)
 800c29a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c29c:	4b07      	ldr	r3, [pc, #28]	; (800c2bc <prvCheckForValidListAndQueue+0x60>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d005      	beq.n	800c2b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2a4:	4b05      	ldr	r3, [pc, #20]	; (800c2bc <prvCheckForValidListAndQueue+0x60>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	490b      	ldr	r1, [pc, #44]	; (800c2d8 <prvCheckForValidListAndQueue+0x7c>)
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe fcea 	bl	800ac84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2b0:	f000 f990 	bl	800c5d4 <vPortExitCritical>
}
 800c2b4:	bf00      	nop
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	24000fe4 	.word	0x24000fe4
 800c2c0:	24000fb4 	.word	0x24000fb4
 800c2c4:	24000fc8 	.word	0x24000fc8
 800c2c8:	24000fdc 	.word	0x24000fdc
 800c2cc:	24000fe0 	.word	0x24000fe0
 800c2d0:	24001090 	.word	0x24001090
 800c2d4:	24000ff0 	.word	0x24000ff0
 800c2d8:	0800d7f4 	.word	0x0800d7f4

0800c2dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08a      	sub	sp, #40	; 0x28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c2ea:	f06f 0301 	mvn.w	r3, #1
 800c2ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2fc:	4b06      	ldr	r3, [pc, #24]	; (800c318 <xTimerPendFunctionCallFromISR+0x3c>)
 800c2fe:	6818      	ldr	r0, [r3, #0]
 800c300:	f107 0114 	add.w	r1, r7, #20
 800c304:	2300      	movs	r3, #0
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	f7fe fa30 	bl	800a76c <xQueueGenericSendFromISR>
 800c30c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c310:	4618      	mov	r0, r3
 800c312:	3728      	adds	r7, #40	; 0x28
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	24000fe4 	.word	0x24000fe4

0800c31c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3b04      	subs	r3, #4
 800c32c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3b04      	subs	r3, #4
 800c33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f023 0201 	bic.w	r2, r3, #1
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3b04      	subs	r3, #4
 800c34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c34c:	4a0c      	ldr	r2, [pc, #48]	; (800c380 <pxPortInitialiseStack+0x64>)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3b14      	subs	r3, #20
 800c356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3b04      	subs	r3, #4
 800c362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f06f 0202 	mvn.w	r2, #2
 800c36a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3b20      	subs	r3, #32
 800c370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c372:	68fb      	ldr	r3, [r7, #12]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	0800c385 	.word	0x0800c385

0800c384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c38e:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <prvTaskExitError+0x54>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c396:	d00a      	beq.n	800c3ae <prvTaskExitError+0x2a>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60fb      	str	r3, [r7, #12]
}
 800c3aa:	bf00      	nop
 800c3ac:	e7fe      	b.n	800c3ac <prvTaskExitError+0x28>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	60bb      	str	r3, [r7, #8]
}
 800c3c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3c2:	bf00      	nop
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0fc      	beq.n	800c3c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3ca:	bf00      	nop
 800c3cc:	bf00      	nop
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	24000010 	.word	0x24000010
 800c3dc:	00000000 	.word	0x00000000

0800c3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3e0:	4b07      	ldr	r3, [pc, #28]	; (800c400 <pxCurrentTCBConst2>)
 800c3e2:	6819      	ldr	r1, [r3, #0]
 800c3e4:	6808      	ldr	r0, [r1, #0]
 800c3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	f380 8809 	msr	PSP, r0
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f04f 0000 	mov.w	r0, #0
 800c3f6:	f380 8811 	msr	BASEPRI, r0
 800c3fa:	4770      	bx	lr
 800c3fc:	f3af 8000 	nop.w

0800c400 <pxCurrentTCBConst2>:
 800c400:	24000ab4 	.word	0x24000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop

0800c408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c408:	4808      	ldr	r0, [pc, #32]	; (800c42c <prvPortStartFirstTask+0x24>)
 800c40a:	6800      	ldr	r0, [r0, #0]
 800c40c:	6800      	ldr	r0, [r0, #0]
 800c40e:	f380 8808 	msr	MSP, r0
 800c412:	f04f 0000 	mov.w	r0, #0
 800c416:	f380 8814 	msr	CONTROL, r0
 800c41a:	b662      	cpsie	i
 800c41c:	b661      	cpsie	f
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	df00      	svc	0
 800c428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c42a:	bf00      	nop
 800c42c:	e000ed08 	.word	0xe000ed08

0800c430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c436:	4b46      	ldr	r3, [pc, #280]	; (800c550 <xPortStartScheduler+0x120>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a46      	ldr	r2, [pc, #280]	; (800c554 <xPortStartScheduler+0x124>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d10a      	bne.n	800c456 <xPortStartScheduler+0x26>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	613b      	str	r3, [r7, #16]
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c456:	4b3e      	ldr	r3, [pc, #248]	; (800c550 <xPortStartScheduler+0x120>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a3f      	ldr	r2, [pc, #252]	; (800c558 <xPortStartScheduler+0x128>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d10a      	bne.n	800c476 <xPortStartScheduler+0x46>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	60fb      	str	r3, [r7, #12]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c476:	4b39      	ldr	r3, [pc, #228]	; (800c55c <xPortStartScheduler+0x12c>)
 800c478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	22ff      	movs	r2, #255	; 0xff
 800c486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b31      	ldr	r3, [pc, #196]	; (800c560 <xPortStartScheduler+0x130>)
 800c49c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c49e:	4b31      	ldr	r3, [pc, #196]	; (800c564 <xPortStartScheduler+0x134>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4a4:	e009      	b.n	800c4ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4a6:	4b2f      	ldr	r3, [pc, #188]	; (800c564 <xPortStartScheduler+0x134>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	4a2d      	ldr	r2, [pc, #180]	; (800c564 <xPortStartScheduler+0x134>)
 800c4ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ba:	78fb      	ldrb	r3, [r7, #3]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4c2:	2b80      	cmp	r3, #128	; 0x80
 800c4c4:	d0ef      	beq.n	800c4a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4c6:	4b27      	ldr	r3, [pc, #156]	; (800c564 <xPortStartScheduler+0x134>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1c3 0307 	rsb	r3, r3, #7
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d00a      	beq.n	800c4e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	60bb      	str	r3, [r7, #8]
}
 800c4e4:	bf00      	nop
 800c4e6:	e7fe      	b.n	800c4e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4e8:	4b1e      	ldr	r3, [pc, #120]	; (800c564 <xPortStartScheduler+0x134>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	021b      	lsls	r3, r3, #8
 800c4ee:	4a1d      	ldr	r2, [pc, #116]	; (800c564 <xPortStartScheduler+0x134>)
 800c4f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4f2:	4b1c      	ldr	r3, [pc, #112]	; (800c564 <xPortStartScheduler+0x134>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4fa:	4a1a      	ldr	r2, [pc, #104]	; (800c564 <xPortStartScheduler+0x134>)
 800c4fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c506:	4b18      	ldr	r3, [pc, #96]	; (800c568 <xPortStartScheduler+0x138>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a17      	ldr	r2, [pc, #92]	; (800c568 <xPortStartScheduler+0x138>)
 800c50c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c512:	4b15      	ldr	r3, [pc, #84]	; (800c568 <xPortStartScheduler+0x138>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a14      	ldr	r2, [pc, #80]	; (800c568 <xPortStartScheduler+0x138>)
 800c518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c51c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c51e:	f000 f8dd 	bl	800c6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c522:	4b12      	ldr	r3, [pc, #72]	; (800c56c <xPortStartScheduler+0x13c>)
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c528:	f000 f8fc 	bl	800c724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c52c:	4b10      	ldr	r3, [pc, #64]	; (800c570 <xPortStartScheduler+0x140>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a0f      	ldr	r2, [pc, #60]	; (800c570 <xPortStartScheduler+0x140>)
 800c532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c538:	f7ff ff66 	bl	800c408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c53c:	f7fe ff7e 	bl	800b43c <vTaskSwitchContext>
	prvTaskExitError();
 800c540:	f7ff ff20 	bl	800c384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	e000ed00 	.word	0xe000ed00
 800c554:	410fc271 	.word	0x410fc271
 800c558:	410fc270 	.word	0x410fc270
 800c55c:	e000e400 	.word	0xe000e400
 800c560:	240010e0 	.word	0x240010e0
 800c564:	240010e4 	.word	0x240010e4
 800c568:	e000ed20 	.word	0xe000ed20
 800c56c:	24000010 	.word	0x24000010
 800c570:	e000ef34 	.word	0xe000ef34

0800c574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
	__asm volatile
 800c57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	607b      	str	r3, [r7, #4]
}
 800c58c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c58e:	4b0f      	ldr	r3, [pc, #60]	; (800c5cc <vPortEnterCritical+0x58>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3301      	adds	r3, #1
 800c594:	4a0d      	ldr	r2, [pc, #52]	; (800c5cc <vPortEnterCritical+0x58>)
 800c596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c598:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <vPortEnterCritical+0x58>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d10f      	bne.n	800c5c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5a0:	4b0b      	ldr	r3, [pc, #44]	; (800c5d0 <vPortEnterCritical+0x5c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00a      	beq.n	800c5c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	603b      	str	r3, [r7, #0]
}
 800c5bc:	bf00      	nop
 800c5be:	e7fe      	b.n	800c5be <vPortEnterCritical+0x4a>
	}
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	24000010 	.word	0x24000010
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5da:	4b12      	ldr	r3, [pc, #72]	; (800c624 <vPortExitCritical+0x50>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10a      	bne.n	800c5f8 <vPortExitCritical+0x24>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	607b      	str	r3, [r7, #4]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5f8:	4b0a      	ldr	r3, [pc, #40]	; (800c624 <vPortExitCritical+0x50>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	4a09      	ldr	r2, [pc, #36]	; (800c624 <vPortExitCritical+0x50>)
 800c600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c602:	4b08      	ldr	r3, [pc, #32]	; (800c624 <vPortExitCritical+0x50>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d105      	bne.n	800c616 <vPortExitCritical+0x42>
 800c60a:	2300      	movs	r3, #0
 800c60c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	f383 8811 	msr	BASEPRI, r3
}
 800c614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c616:	bf00      	nop
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	24000010 	.word	0x24000010
	...

0800c630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c630:	f3ef 8009 	mrs	r0, PSP
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	4b15      	ldr	r3, [pc, #84]	; (800c690 <pxCurrentTCBConst>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	f01e 0f10 	tst.w	lr, #16
 800c640:	bf08      	it	eq
 800c642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64a:	6010      	str	r0, [r2, #0]
 800c64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c650:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c654:	f380 8811 	msr	BASEPRI, r0
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f7fe feec 	bl	800b43c <vTaskSwitchContext>
 800c664:	f04f 0000 	mov.w	r0, #0
 800c668:	f380 8811 	msr	BASEPRI, r0
 800c66c:	bc09      	pop	{r0, r3}
 800c66e:	6819      	ldr	r1, [r3, #0]
 800c670:	6808      	ldr	r0, [r1, #0]
 800c672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c676:	f01e 0f10 	tst.w	lr, #16
 800c67a:	bf08      	it	eq
 800c67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c680:	f380 8809 	msr	PSP, r0
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w

0800c690 <pxCurrentTCBConst>:
 800c690:	24000ab4 	.word	0x24000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop

0800c698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	607b      	str	r3, [r7, #4]
}
 800c6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6b2:	f7fe fe09 	bl	800b2c8 <xTaskIncrementTick>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6bc:	4b06      	ldr	r3, [pc, #24]	; (800c6d8 <xPortSysTickHandler+0x40>)
 800c6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	f383 8811 	msr	BASEPRI, r3
}
 800c6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6e0:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <vPortSetupTimerInterrupt+0x34>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6e6:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <vPortSetupTimerInterrupt+0x38>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6ec:	4b0a      	ldr	r3, [pc, #40]	; (800c718 <vPortSetupTimerInterrupt+0x3c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a0a      	ldr	r2, [pc, #40]	; (800c71c <vPortSetupTimerInterrupt+0x40>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	099b      	lsrs	r3, r3, #6
 800c6f8:	4a09      	ldr	r2, [pc, #36]	; (800c720 <vPortSetupTimerInterrupt+0x44>)
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6fe:	4b04      	ldr	r3, [pc, #16]	; (800c710 <vPortSetupTimerInterrupt+0x34>)
 800c700:	2207      	movs	r2, #7
 800c702:	601a      	str	r2, [r3, #0]
}
 800c704:	bf00      	nop
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	e000e010 	.word	0xe000e010
 800c714:	e000e018 	.word	0xe000e018
 800c718:	24000000 	.word	0x24000000
 800c71c:	10624dd3 	.word	0x10624dd3
 800c720:	e000e014 	.word	0xe000e014

0800c724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c734 <vPortEnableVFP+0x10>
 800c728:	6801      	ldr	r1, [r0, #0]
 800c72a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c72e:	6001      	str	r1, [r0, #0]
 800c730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c732:	bf00      	nop
 800c734:	e000ed88 	.word	0xe000ed88

0800c738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c73e:	f3ef 8305 	mrs	r3, IPSR
 800c742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b0f      	cmp	r3, #15
 800c748:	d914      	bls.n	800c774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c74a:	4a17      	ldr	r2, [pc, #92]	; (800c7a8 <vPortValidateInterruptPriority+0x70>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c754:	4b15      	ldr	r3, [pc, #84]	; (800c7ac <vPortValidateInterruptPriority+0x74>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	7afa      	ldrb	r2, [r7, #11]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d20a      	bcs.n	800c774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	607b      	str	r3, [r7, #4]
}
 800c770:	bf00      	nop
 800c772:	e7fe      	b.n	800c772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c774:	4b0e      	ldr	r3, [pc, #56]	; (800c7b0 <vPortValidateInterruptPriority+0x78>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c77c:	4b0d      	ldr	r3, [pc, #52]	; (800c7b4 <vPortValidateInterruptPriority+0x7c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	429a      	cmp	r2, r3
 800c782:	d90a      	bls.n	800c79a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	603b      	str	r3, [r7, #0]
}
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <vPortValidateInterruptPriority+0x60>
	}
 800c79a:	bf00      	nop
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	e000e3f0 	.word	0xe000e3f0
 800c7ac:	240010e0 	.word	0x240010e0
 800c7b0:	e000ed0c 	.word	0xe000ed0c
 800c7b4:	240010e4 	.word	0x240010e4

0800c7b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08a      	sub	sp, #40	; 0x28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7c4:	f7fe fcc4 	bl	800b150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7c8:	4b5b      	ldr	r3, [pc, #364]	; (800c938 <pvPortMalloc+0x180>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7d0:	f000 f920 	bl	800ca14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7d4:	4b59      	ldr	r3, [pc, #356]	; (800c93c <pvPortMalloc+0x184>)
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4013      	ands	r3, r2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f040 8093 	bne.w	800c908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d01d      	beq.n	800c824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d014      	beq.n	800c824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f023 0307 	bic.w	r3, r3, #7
 800c800:	3308      	adds	r3, #8
 800c802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f003 0307 	and.w	r3, r3, #7
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <pvPortMalloc+0x6c>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	617b      	str	r3, [r7, #20]
}
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d06e      	beq.n	800c908 <pvPortMalloc+0x150>
 800c82a:	4b45      	ldr	r3, [pc, #276]	; (800c940 <pvPortMalloc+0x188>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d869      	bhi.n	800c908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c834:	4b43      	ldr	r3, [pc, #268]	; (800c944 <pvPortMalloc+0x18c>)
 800c836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c838:	4b42      	ldr	r3, [pc, #264]	; (800c944 <pvPortMalloc+0x18c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c83e:	e004      	b.n	800c84a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d903      	bls.n	800c85c <pvPortMalloc+0xa4>
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1f1      	bne.n	800c840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c85c:	4b36      	ldr	r3, [pc, #216]	; (800c938 <pvPortMalloc+0x180>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c862:	429a      	cmp	r2, r3
 800c864:	d050      	beq.n	800c908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2208      	movs	r2, #8
 800c86c:	4413      	add	r3, r2
 800c86e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	1ad2      	subs	r2, r2, r3
 800c880:	2308      	movs	r3, #8
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	429a      	cmp	r2, r3
 800c886:	d91f      	bls.n	800c8c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4413      	add	r3, r2
 800c88e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	613b      	str	r3, [r7, #16]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	1ad2      	subs	r2, r2, r3
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8c2:	69b8      	ldr	r0, [r7, #24]
 800c8c4:	f000 f908 	bl	800cad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8c8:	4b1d      	ldr	r3, [pc, #116]	; (800c940 <pvPortMalloc+0x188>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	4a1b      	ldr	r2, [pc, #108]	; (800c940 <pvPortMalloc+0x188>)
 800c8d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8d6:	4b1a      	ldr	r3, [pc, #104]	; (800c940 <pvPortMalloc+0x188>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	4b1b      	ldr	r3, [pc, #108]	; (800c948 <pvPortMalloc+0x190>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d203      	bcs.n	800c8ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8e2:	4b17      	ldr	r3, [pc, #92]	; (800c940 <pvPortMalloc+0x188>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a18      	ldr	r2, [pc, #96]	; (800c948 <pvPortMalloc+0x190>)
 800c8e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	4b13      	ldr	r3, [pc, #76]	; (800c93c <pvPortMalloc+0x184>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <pvPortMalloc+0x194>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3301      	adds	r3, #1
 800c904:	4a11      	ldr	r2, [pc, #68]	; (800c94c <pvPortMalloc+0x194>)
 800c906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c908:	f7fe fc30 	bl	800b16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	f003 0307 	and.w	r3, r3, #7
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <pvPortMalloc+0x174>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60fb      	str	r3, [r7, #12]
}
 800c928:	bf00      	nop
 800c92a:	e7fe      	b.n	800c92a <pvPortMalloc+0x172>
	return pvReturn;
 800c92c:	69fb      	ldr	r3, [r7, #28]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3728      	adds	r7, #40	; 0x28
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	24004cf0 	.word	0x24004cf0
 800c93c:	24004d04 	.word	0x24004d04
 800c940:	24004cf4 	.word	0x24004cf4
 800c944:	24004ce8 	.word	0x24004ce8
 800c948:	24004cf8 	.word	0x24004cf8
 800c94c:	24004cfc 	.word	0x24004cfc

0800c950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d04d      	beq.n	800c9fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c962:	2308      	movs	r3, #8
 800c964:	425b      	negs	r3, r3
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	4413      	add	r3, r2
 800c96a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	4b24      	ldr	r3, [pc, #144]	; (800ca08 <vPortFree+0xb8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4013      	ands	r3, r2
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10a      	bne.n	800c994 <vPortFree+0x44>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	60fb      	str	r3, [r7, #12]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00a      	beq.n	800c9b2 <vPortFree+0x62>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	60bb      	str	r3, [r7, #8]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <vPortFree+0xb8>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01e      	beq.n	800c9fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d11a      	bne.n	800c9fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	4b0e      	ldr	r3, [pc, #56]	; (800ca08 <vPortFree+0xb8>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	43db      	mvns	r3, r3
 800c9d2:	401a      	ands	r2, r3
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9d8:	f7fe fbba 	bl	800b150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	685a      	ldr	r2, [r3, #4]
 800c9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ca0c <vPortFree+0xbc>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	4a09      	ldr	r2, [pc, #36]	; (800ca0c <vPortFree+0xbc>)
 800c9e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9ea:	6938      	ldr	r0, [r7, #16]
 800c9ec:	f000 f874 	bl	800cad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <vPortFree+0xc0>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	4a06      	ldr	r2, [pc, #24]	; (800ca10 <vPortFree+0xc0>)
 800c9f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9fa:	f7fe fbb7 	bl	800b16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9fe:	bf00      	nop
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	24004d04 	.word	0x24004d04
 800ca0c:	24004cf4 	.word	0x24004cf4
 800ca10:	24004d00 	.word	0x24004d00

0800ca14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca20:	4b27      	ldr	r3, [pc, #156]	; (800cac0 <prvHeapInit+0xac>)
 800ca22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00c      	beq.n	800ca48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3307      	adds	r3, #7
 800ca32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f023 0307 	bic.w	r3, r3, #7
 800ca3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	4a1f      	ldr	r2, [pc, #124]	; (800cac0 <prvHeapInit+0xac>)
 800ca44:	4413      	add	r3, r2
 800ca46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca4c:	4a1d      	ldr	r2, [pc, #116]	; (800cac4 <prvHeapInit+0xb0>)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca52:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <prvHeapInit+0xb0>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca60:	2208      	movs	r2, #8
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	1a9b      	subs	r3, r3, r2
 800ca66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f023 0307 	bic.w	r3, r3, #7
 800ca6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4a15      	ldr	r2, [pc, #84]	; (800cac8 <prvHeapInit+0xb4>)
 800ca74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca76:	4b14      	ldr	r3, [pc, #80]	; (800cac8 <prvHeapInit+0xb4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca7e:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <prvHeapInit+0xb4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca94:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <prvHeapInit+0xb4>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4a0a      	ldr	r2, [pc, #40]	; (800cacc <prvHeapInit+0xb8>)
 800caa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	4a09      	ldr	r2, [pc, #36]	; (800cad0 <prvHeapInit+0xbc>)
 800caaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <prvHeapInit+0xc0>)
 800caae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cab2:	601a      	str	r2, [r3, #0]
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	240010e8 	.word	0x240010e8
 800cac4:	24004ce8 	.word	0x24004ce8
 800cac8:	24004cf0 	.word	0x24004cf0
 800cacc:	24004cf8 	.word	0x24004cf8
 800cad0:	24004cf4 	.word	0x24004cf4
 800cad4:	24004d04 	.word	0x24004d04

0800cad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cae0:	4b28      	ldr	r3, [pc, #160]	; (800cb84 <prvInsertBlockIntoFreeList+0xac>)
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e002      	b.n	800caec <prvInsertBlockIntoFreeList+0x14>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d8f7      	bhi.n	800cae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	4413      	add	r3, r2
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d108      	bne.n	800cb1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	441a      	add	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	441a      	add	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d118      	bne.n	800cb60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <prvInsertBlockIntoFreeList+0xb0>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d00d      	beq.n	800cb56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	441a      	add	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	e008      	b.n	800cb68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb56:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <prvInsertBlockIntoFreeList+0xb0>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	e003      	b.n	800cb68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d002      	beq.n	800cb76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb76:	bf00      	nop
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	24004ce8 	.word	0x24004ce8
 800cb88:	24004cf0 	.word	0x24004cf0

0800cb8c <__errno>:
 800cb8c:	4b01      	ldr	r3, [pc, #4]	; (800cb94 <__errno+0x8>)
 800cb8e:	6818      	ldr	r0, [r3, #0]
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	24000014 	.word	0x24000014

0800cb98 <__libc_init_array>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	4d0d      	ldr	r5, [pc, #52]	; (800cbd0 <__libc_init_array+0x38>)
 800cb9c:	4c0d      	ldr	r4, [pc, #52]	; (800cbd4 <__libc_init_array+0x3c>)
 800cb9e:	1b64      	subs	r4, r4, r5
 800cba0:	10a4      	asrs	r4, r4, #2
 800cba2:	2600      	movs	r6, #0
 800cba4:	42a6      	cmp	r6, r4
 800cba6:	d109      	bne.n	800cbbc <__libc_init_array+0x24>
 800cba8:	4d0b      	ldr	r5, [pc, #44]	; (800cbd8 <__libc_init_array+0x40>)
 800cbaa:	4c0c      	ldr	r4, [pc, #48]	; (800cbdc <__libc_init_array+0x44>)
 800cbac:	f000 fd2c 	bl	800d608 <_init>
 800cbb0:	1b64      	subs	r4, r4, r5
 800cbb2:	10a4      	asrs	r4, r4, #2
 800cbb4:	2600      	movs	r6, #0
 800cbb6:	42a6      	cmp	r6, r4
 800cbb8:	d105      	bne.n	800cbc6 <__libc_init_array+0x2e>
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
 800cbbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbc0:	4798      	blx	r3
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	e7ee      	b.n	800cba4 <__libc_init_array+0xc>
 800cbc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbca:	4798      	blx	r3
 800cbcc:	3601      	adds	r6, #1
 800cbce:	e7f2      	b.n	800cbb6 <__libc_init_array+0x1e>
 800cbd0:	0800d930 	.word	0x0800d930
 800cbd4:	0800d930 	.word	0x0800d930
 800cbd8:	0800d930 	.word	0x0800d930
 800cbdc:	0800d934 	.word	0x0800d934

0800cbe0 <memcpy>:
 800cbe0:	440a      	add	r2, r1
 800cbe2:	4291      	cmp	r1, r2
 800cbe4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cbe8:	d100      	bne.n	800cbec <memcpy+0xc>
 800cbea:	4770      	bx	lr
 800cbec:	b510      	push	{r4, lr}
 800cbee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbf6:	4291      	cmp	r1, r2
 800cbf8:	d1f9      	bne.n	800cbee <memcpy+0xe>
 800cbfa:	bd10      	pop	{r4, pc}

0800cbfc <memset>:
 800cbfc:	4402      	add	r2, r0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d100      	bne.n	800cc06 <memset+0xa>
 800cc04:	4770      	bx	lr
 800cc06:	f803 1b01 	strb.w	r1, [r3], #1
 800cc0a:	e7f9      	b.n	800cc00 <memset+0x4>

0800cc0c <_puts_r>:
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	460e      	mov	r6, r1
 800cc10:	4605      	mov	r5, r0
 800cc12:	b118      	cbz	r0, 800cc1c <_puts_r+0x10>
 800cc14:	6983      	ldr	r3, [r0, #24]
 800cc16:	b90b      	cbnz	r3, 800cc1c <_puts_r+0x10>
 800cc18:	f000 fa48 	bl	800d0ac <__sinit>
 800cc1c:	69ab      	ldr	r3, [r5, #24]
 800cc1e:	68ac      	ldr	r4, [r5, #8]
 800cc20:	b913      	cbnz	r3, 800cc28 <_puts_r+0x1c>
 800cc22:	4628      	mov	r0, r5
 800cc24:	f000 fa42 	bl	800d0ac <__sinit>
 800cc28:	4b2c      	ldr	r3, [pc, #176]	; (800ccdc <_puts_r+0xd0>)
 800cc2a:	429c      	cmp	r4, r3
 800cc2c:	d120      	bne.n	800cc70 <_puts_r+0x64>
 800cc2e:	686c      	ldr	r4, [r5, #4]
 800cc30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc32:	07db      	lsls	r3, r3, #31
 800cc34:	d405      	bmi.n	800cc42 <_puts_r+0x36>
 800cc36:	89a3      	ldrh	r3, [r4, #12]
 800cc38:	0598      	lsls	r0, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_puts_r+0x36>
 800cc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc3e:	f000 fad3 	bl	800d1e8 <__retarget_lock_acquire_recursive>
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	0719      	lsls	r1, r3, #28
 800cc46:	d51d      	bpl.n	800cc84 <_puts_r+0x78>
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	b1db      	cbz	r3, 800cc84 <_puts_r+0x78>
 800cc4c:	3e01      	subs	r6, #1
 800cc4e:	68a3      	ldr	r3, [r4, #8]
 800cc50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc54:	3b01      	subs	r3, #1
 800cc56:	60a3      	str	r3, [r4, #8]
 800cc58:	bb39      	cbnz	r1, 800ccaa <_puts_r+0x9e>
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	da38      	bge.n	800ccd0 <_puts_r+0xc4>
 800cc5e:	4622      	mov	r2, r4
 800cc60:	210a      	movs	r1, #10
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f848 	bl	800ccf8 <__swbuf_r>
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d011      	beq.n	800cc90 <_puts_r+0x84>
 800cc6c:	250a      	movs	r5, #10
 800cc6e:	e011      	b.n	800cc94 <_puts_r+0x88>
 800cc70:	4b1b      	ldr	r3, [pc, #108]	; (800cce0 <_puts_r+0xd4>)
 800cc72:	429c      	cmp	r4, r3
 800cc74:	d101      	bne.n	800cc7a <_puts_r+0x6e>
 800cc76:	68ac      	ldr	r4, [r5, #8]
 800cc78:	e7da      	b.n	800cc30 <_puts_r+0x24>
 800cc7a:	4b1a      	ldr	r3, [pc, #104]	; (800cce4 <_puts_r+0xd8>)
 800cc7c:	429c      	cmp	r4, r3
 800cc7e:	bf08      	it	eq
 800cc80:	68ec      	ldreq	r4, [r5, #12]
 800cc82:	e7d5      	b.n	800cc30 <_puts_r+0x24>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4628      	mov	r0, r5
 800cc88:	f000 f888 	bl	800cd9c <__swsetup_r>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d0dd      	beq.n	800cc4c <_puts_r+0x40>
 800cc90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cc94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc96:	07da      	lsls	r2, r3, #31
 800cc98:	d405      	bmi.n	800cca6 <_puts_r+0x9a>
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	059b      	lsls	r3, r3, #22
 800cc9e:	d402      	bmi.n	800cca6 <_puts_r+0x9a>
 800cca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cca2:	f000 faa2 	bl	800d1ea <__retarget_lock_release_recursive>
 800cca6:	4628      	mov	r0, r5
 800cca8:	bd70      	pop	{r4, r5, r6, pc}
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	da04      	bge.n	800ccb8 <_puts_r+0xac>
 800ccae:	69a2      	ldr	r2, [r4, #24]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	dc06      	bgt.n	800ccc2 <_puts_r+0xb6>
 800ccb4:	290a      	cmp	r1, #10
 800ccb6:	d004      	beq.n	800ccc2 <_puts_r+0xb6>
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	6022      	str	r2, [r4, #0]
 800ccbe:	7019      	strb	r1, [r3, #0]
 800ccc0:	e7c5      	b.n	800cc4e <_puts_r+0x42>
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f000 f817 	bl	800ccf8 <__swbuf_r>
 800ccca:	3001      	adds	r0, #1
 800cccc:	d1bf      	bne.n	800cc4e <_puts_r+0x42>
 800ccce:	e7df      	b.n	800cc90 <_puts_r+0x84>
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	250a      	movs	r5, #10
 800ccd4:	1c5a      	adds	r2, r3, #1
 800ccd6:	6022      	str	r2, [r4, #0]
 800ccd8:	701d      	strb	r5, [r3, #0]
 800ccda:	e7db      	b.n	800cc94 <_puts_r+0x88>
 800ccdc:	0800d8e8 	.word	0x0800d8e8
 800cce0:	0800d908 	.word	0x0800d908
 800cce4:	0800d8c8 	.word	0x0800d8c8

0800cce8 <puts>:
 800cce8:	4b02      	ldr	r3, [pc, #8]	; (800ccf4 <puts+0xc>)
 800ccea:	4601      	mov	r1, r0
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	f7ff bf8d 	b.w	800cc0c <_puts_r>
 800ccf2:	bf00      	nop
 800ccf4:	24000014 	.word	0x24000014

0800ccf8 <__swbuf_r>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	460e      	mov	r6, r1
 800ccfc:	4614      	mov	r4, r2
 800ccfe:	4605      	mov	r5, r0
 800cd00:	b118      	cbz	r0, 800cd0a <__swbuf_r+0x12>
 800cd02:	6983      	ldr	r3, [r0, #24]
 800cd04:	b90b      	cbnz	r3, 800cd0a <__swbuf_r+0x12>
 800cd06:	f000 f9d1 	bl	800d0ac <__sinit>
 800cd0a:	4b21      	ldr	r3, [pc, #132]	; (800cd90 <__swbuf_r+0x98>)
 800cd0c:	429c      	cmp	r4, r3
 800cd0e:	d12b      	bne.n	800cd68 <__swbuf_r+0x70>
 800cd10:	686c      	ldr	r4, [r5, #4]
 800cd12:	69a3      	ldr	r3, [r4, #24]
 800cd14:	60a3      	str	r3, [r4, #8]
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	071a      	lsls	r2, r3, #28
 800cd1a:	d52f      	bpl.n	800cd7c <__swbuf_r+0x84>
 800cd1c:	6923      	ldr	r3, [r4, #16]
 800cd1e:	b36b      	cbz	r3, 800cd7c <__swbuf_r+0x84>
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	6820      	ldr	r0, [r4, #0]
 800cd24:	1ac0      	subs	r0, r0, r3
 800cd26:	6963      	ldr	r3, [r4, #20]
 800cd28:	b2f6      	uxtb	r6, r6
 800cd2a:	4283      	cmp	r3, r0
 800cd2c:	4637      	mov	r7, r6
 800cd2e:	dc04      	bgt.n	800cd3a <__swbuf_r+0x42>
 800cd30:	4621      	mov	r1, r4
 800cd32:	4628      	mov	r0, r5
 800cd34:	f000 f926 	bl	800cf84 <_fflush_r>
 800cd38:	bb30      	cbnz	r0, 800cd88 <__swbuf_r+0x90>
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	60a3      	str	r3, [r4, #8]
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	6022      	str	r2, [r4, #0]
 800cd46:	701e      	strb	r6, [r3, #0]
 800cd48:	6963      	ldr	r3, [r4, #20]
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	4283      	cmp	r3, r0
 800cd4e:	d004      	beq.n	800cd5a <__swbuf_r+0x62>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	07db      	lsls	r3, r3, #31
 800cd54:	d506      	bpl.n	800cd64 <__swbuf_r+0x6c>
 800cd56:	2e0a      	cmp	r6, #10
 800cd58:	d104      	bne.n	800cd64 <__swbuf_r+0x6c>
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	f000 f911 	bl	800cf84 <_fflush_r>
 800cd62:	b988      	cbnz	r0, 800cd88 <__swbuf_r+0x90>
 800cd64:	4638      	mov	r0, r7
 800cd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd68:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <__swbuf_r+0x9c>)
 800cd6a:	429c      	cmp	r4, r3
 800cd6c:	d101      	bne.n	800cd72 <__swbuf_r+0x7a>
 800cd6e:	68ac      	ldr	r4, [r5, #8]
 800cd70:	e7cf      	b.n	800cd12 <__swbuf_r+0x1a>
 800cd72:	4b09      	ldr	r3, [pc, #36]	; (800cd98 <__swbuf_r+0xa0>)
 800cd74:	429c      	cmp	r4, r3
 800cd76:	bf08      	it	eq
 800cd78:	68ec      	ldreq	r4, [r5, #12]
 800cd7a:	e7ca      	b.n	800cd12 <__swbuf_r+0x1a>
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f000 f80c 	bl	800cd9c <__swsetup_r>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d0cb      	beq.n	800cd20 <__swbuf_r+0x28>
 800cd88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cd8c:	e7ea      	b.n	800cd64 <__swbuf_r+0x6c>
 800cd8e:	bf00      	nop
 800cd90:	0800d8e8 	.word	0x0800d8e8
 800cd94:	0800d908 	.word	0x0800d908
 800cd98:	0800d8c8 	.word	0x0800d8c8

0800cd9c <__swsetup_r>:
 800cd9c:	4b32      	ldr	r3, [pc, #200]	; (800ce68 <__swsetup_r+0xcc>)
 800cd9e:	b570      	push	{r4, r5, r6, lr}
 800cda0:	681d      	ldr	r5, [r3, #0]
 800cda2:	4606      	mov	r6, r0
 800cda4:	460c      	mov	r4, r1
 800cda6:	b125      	cbz	r5, 800cdb2 <__swsetup_r+0x16>
 800cda8:	69ab      	ldr	r3, [r5, #24]
 800cdaa:	b913      	cbnz	r3, 800cdb2 <__swsetup_r+0x16>
 800cdac:	4628      	mov	r0, r5
 800cdae:	f000 f97d 	bl	800d0ac <__sinit>
 800cdb2:	4b2e      	ldr	r3, [pc, #184]	; (800ce6c <__swsetup_r+0xd0>)
 800cdb4:	429c      	cmp	r4, r3
 800cdb6:	d10f      	bne.n	800cdd8 <__swsetup_r+0x3c>
 800cdb8:	686c      	ldr	r4, [r5, #4]
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdc0:	0719      	lsls	r1, r3, #28
 800cdc2:	d42c      	bmi.n	800ce1e <__swsetup_r+0x82>
 800cdc4:	06dd      	lsls	r5, r3, #27
 800cdc6:	d411      	bmi.n	800cdec <__swsetup_r+0x50>
 800cdc8:	2309      	movs	r3, #9
 800cdca:	6033      	str	r3, [r6, #0]
 800cdcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdd6:	e03e      	b.n	800ce56 <__swsetup_r+0xba>
 800cdd8:	4b25      	ldr	r3, [pc, #148]	; (800ce70 <__swsetup_r+0xd4>)
 800cdda:	429c      	cmp	r4, r3
 800cddc:	d101      	bne.n	800cde2 <__swsetup_r+0x46>
 800cdde:	68ac      	ldr	r4, [r5, #8]
 800cde0:	e7eb      	b.n	800cdba <__swsetup_r+0x1e>
 800cde2:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <__swsetup_r+0xd8>)
 800cde4:	429c      	cmp	r4, r3
 800cde6:	bf08      	it	eq
 800cde8:	68ec      	ldreq	r4, [r5, #12]
 800cdea:	e7e6      	b.n	800cdba <__swsetup_r+0x1e>
 800cdec:	0758      	lsls	r0, r3, #29
 800cdee:	d512      	bpl.n	800ce16 <__swsetup_r+0x7a>
 800cdf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdf2:	b141      	cbz	r1, 800ce06 <__swsetup_r+0x6a>
 800cdf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdf8:	4299      	cmp	r1, r3
 800cdfa:	d002      	beq.n	800ce02 <__swsetup_r+0x66>
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f000 fa5b 	bl	800d2b8 <_free_r>
 800ce02:	2300      	movs	r3, #0
 800ce04:	6363      	str	r3, [r4, #52]	; 0x34
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	6063      	str	r3, [r4, #4]
 800ce12:	6923      	ldr	r3, [r4, #16]
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	89a3      	ldrh	r3, [r4, #12]
 800ce18:	f043 0308 	orr.w	r3, r3, #8
 800ce1c:	81a3      	strh	r3, [r4, #12]
 800ce1e:	6923      	ldr	r3, [r4, #16]
 800ce20:	b94b      	cbnz	r3, 800ce36 <__swsetup_r+0x9a>
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce2c:	d003      	beq.n	800ce36 <__swsetup_r+0x9a>
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4630      	mov	r0, r6
 800ce32:	f000 fa01 	bl	800d238 <__smakebuf_r>
 800ce36:	89a0      	ldrh	r0, [r4, #12]
 800ce38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce3c:	f010 0301 	ands.w	r3, r0, #1
 800ce40:	d00a      	beq.n	800ce58 <__swsetup_r+0xbc>
 800ce42:	2300      	movs	r3, #0
 800ce44:	60a3      	str	r3, [r4, #8]
 800ce46:	6963      	ldr	r3, [r4, #20]
 800ce48:	425b      	negs	r3, r3
 800ce4a:	61a3      	str	r3, [r4, #24]
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	b943      	cbnz	r3, 800ce62 <__swsetup_r+0xc6>
 800ce50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce54:	d1ba      	bne.n	800cdcc <__swsetup_r+0x30>
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	0781      	lsls	r1, r0, #30
 800ce5a:	bf58      	it	pl
 800ce5c:	6963      	ldrpl	r3, [r4, #20]
 800ce5e:	60a3      	str	r3, [r4, #8]
 800ce60:	e7f4      	b.n	800ce4c <__swsetup_r+0xb0>
 800ce62:	2000      	movs	r0, #0
 800ce64:	e7f7      	b.n	800ce56 <__swsetup_r+0xba>
 800ce66:	bf00      	nop
 800ce68:	24000014 	.word	0x24000014
 800ce6c:	0800d8e8 	.word	0x0800d8e8
 800ce70:	0800d908 	.word	0x0800d908
 800ce74:	0800d8c8 	.word	0x0800d8c8

0800ce78 <__sflush_r>:
 800ce78:	898a      	ldrh	r2, [r1, #12]
 800ce7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	4605      	mov	r5, r0
 800ce80:	0710      	lsls	r0, r2, #28
 800ce82:	460c      	mov	r4, r1
 800ce84:	d458      	bmi.n	800cf38 <__sflush_r+0xc0>
 800ce86:	684b      	ldr	r3, [r1, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dc05      	bgt.n	800ce98 <__sflush_r+0x20>
 800ce8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	dc02      	bgt.n	800ce98 <__sflush_r+0x20>
 800ce92:	2000      	movs	r0, #0
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce9a:	2e00      	cmp	r6, #0
 800ce9c:	d0f9      	beq.n	800ce92 <__sflush_r+0x1a>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cea4:	682f      	ldr	r7, [r5, #0]
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	d032      	beq.n	800cf10 <__sflush_r+0x98>
 800ceaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	075a      	lsls	r2, r3, #29
 800ceb0:	d505      	bpl.n	800cebe <__sflush_r+0x46>
 800ceb2:	6863      	ldr	r3, [r4, #4]
 800ceb4:	1ac0      	subs	r0, r0, r3
 800ceb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceb8:	b10b      	cbz	r3, 800cebe <__sflush_r+0x46>
 800ceba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cebc:	1ac0      	subs	r0, r0, r3
 800cebe:	2300      	movs	r3, #0
 800cec0:	4602      	mov	r2, r0
 800cec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cec4:	6a21      	ldr	r1, [r4, #32]
 800cec6:	4628      	mov	r0, r5
 800cec8:	47b0      	blx	r6
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	d106      	bne.n	800cede <__sflush_r+0x66>
 800ced0:	6829      	ldr	r1, [r5, #0]
 800ced2:	291d      	cmp	r1, #29
 800ced4:	d82c      	bhi.n	800cf30 <__sflush_r+0xb8>
 800ced6:	4a2a      	ldr	r2, [pc, #168]	; (800cf80 <__sflush_r+0x108>)
 800ced8:	40ca      	lsrs	r2, r1
 800ceda:	07d6      	lsls	r6, r2, #31
 800cedc:	d528      	bpl.n	800cf30 <__sflush_r+0xb8>
 800cede:	2200      	movs	r2, #0
 800cee0:	6062      	str	r2, [r4, #4]
 800cee2:	04d9      	lsls	r1, r3, #19
 800cee4:	6922      	ldr	r2, [r4, #16]
 800cee6:	6022      	str	r2, [r4, #0]
 800cee8:	d504      	bpl.n	800cef4 <__sflush_r+0x7c>
 800ceea:	1c42      	adds	r2, r0, #1
 800ceec:	d101      	bne.n	800cef2 <__sflush_r+0x7a>
 800ceee:	682b      	ldr	r3, [r5, #0]
 800cef0:	b903      	cbnz	r3, 800cef4 <__sflush_r+0x7c>
 800cef2:	6560      	str	r0, [r4, #84]	; 0x54
 800cef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cef6:	602f      	str	r7, [r5, #0]
 800cef8:	2900      	cmp	r1, #0
 800cefa:	d0ca      	beq.n	800ce92 <__sflush_r+0x1a>
 800cefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf00:	4299      	cmp	r1, r3
 800cf02:	d002      	beq.n	800cf0a <__sflush_r+0x92>
 800cf04:	4628      	mov	r0, r5
 800cf06:	f000 f9d7 	bl	800d2b8 <_free_r>
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	6360      	str	r0, [r4, #52]	; 0x34
 800cf0e:	e7c1      	b.n	800ce94 <__sflush_r+0x1c>
 800cf10:	6a21      	ldr	r1, [r4, #32]
 800cf12:	2301      	movs	r3, #1
 800cf14:	4628      	mov	r0, r5
 800cf16:	47b0      	blx	r6
 800cf18:	1c41      	adds	r1, r0, #1
 800cf1a:	d1c7      	bne.n	800ceac <__sflush_r+0x34>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0c4      	beq.n	800ceac <__sflush_r+0x34>
 800cf22:	2b1d      	cmp	r3, #29
 800cf24:	d001      	beq.n	800cf2a <__sflush_r+0xb2>
 800cf26:	2b16      	cmp	r3, #22
 800cf28:	d101      	bne.n	800cf2e <__sflush_r+0xb6>
 800cf2a:	602f      	str	r7, [r5, #0]
 800cf2c:	e7b1      	b.n	800ce92 <__sflush_r+0x1a>
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf34:	81a3      	strh	r3, [r4, #12]
 800cf36:	e7ad      	b.n	800ce94 <__sflush_r+0x1c>
 800cf38:	690f      	ldr	r7, [r1, #16]
 800cf3a:	2f00      	cmp	r7, #0
 800cf3c:	d0a9      	beq.n	800ce92 <__sflush_r+0x1a>
 800cf3e:	0793      	lsls	r3, r2, #30
 800cf40:	680e      	ldr	r6, [r1, #0]
 800cf42:	bf08      	it	eq
 800cf44:	694b      	ldreq	r3, [r1, #20]
 800cf46:	600f      	str	r7, [r1, #0]
 800cf48:	bf18      	it	ne
 800cf4a:	2300      	movne	r3, #0
 800cf4c:	eba6 0807 	sub.w	r8, r6, r7
 800cf50:	608b      	str	r3, [r1, #8]
 800cf52:	f1b8 0f00 	cmp.w	r8, #0
 800cf56:	dd9c      	ble.n	800ce92 <__sflush_r+0x1a>
 800cf58:	6a21      	ldr	r1, [r4, #32]
 800cf5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf5c:	4643      	mov	r3, r8
 800cf5e:	463a      	mov	r2, r7
 800cf60:	4628      	mov	r0, r5
 800cf62:	47b0      	blx	r6
 800cf64:	2800      	cmp	r0, #0
 800cf66:	dc06      	bgt.n	800cf76 <__sflush_r+0xfe>
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf74:	e78e      	b.n	800ce94 <__sflush_r+0x1c>
 800cf76:	4407      	add	r7, r0
 800cf78:	eba8 0800 	sub.w	r8, r8, r0
 800cf7c:	e7e9      	b.n	800cf52 <__sflush_r+0xda>
 800cf7e:	bf00      	nop
 800cf80:	20400001 	.word	0x20400001

0800cf84 <_fflush_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	690b      	ldr	r3, [r1, #16]
 800cf88:	4605      	mov	r5, r0
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	b913      	cbnz	r3, 800cf94 <_fflush_r+0x10>
 800cf8e:	2500      	movs	r5, #0
 800cf90:	4628      	mov	r0, r5
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	b118      	cbz	r0, 800cf9e <_fflush_r+0x1a>
 800cf96:	6983      	ldr	r3, [r0, #24]
 800cf98:	b90b      	cbnz	r3, 800cf9e <_fflush_r+0x1a>
 800cf9a:	f000 f887 	bl	800d0ac <__sinit>
 800cf9e:	4b14      	ldr	r3, [pc, #80]	; (800cff0 <_fflush_r+0x6c>)
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	d11b      	bne.n	800cfdc <_fflush_r+0x58>
 800cfa4:	686c      	ldr	r4, [r5, #4]
 800cfa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d0ef      	beq.n	800cf8e <_fflush_r+0xa>
 800cfae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfb0:	07d0      	lsls	r0, r2, #31
 800cfb2:	d404      	bmi.n	800cfbe <_fflush_r+0x3a>
 800cfb4:	0599      	lsls	r1, r3, #22
 800cfb6:	d402      	bmi.n	800cfbe <_fflush_r+0x3a>
 800cfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfba:	f000 f915 	bl	800d1e8 <__retarget_lock_acquire_recursive>
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f7ff ff59 	bl	800ce78 <__sflush_r>
 800cfc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfc8:	07da      	lsls	r2, r3, #31
 800cfca:	4605      	mov	r5, r0
 800cfcc:	d4e0      	bmi.n	800cf90 <_fflush_r+0xc>
 800cfce:	89a3      	ldrh	r3, [r4, #12]
 800cfd0:	059b      	lsls	r3, r3, #22
 800cfd2:	d4dd      	bmi.n	800cf90 <_fflush_r+0xc>
 800cfd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfd6:	f000 f908 	bl	800d1ea <__retarget_lock_release_recursive>
 800cfda:	e7d9      	b.n	800cf90 <_fflush_r+0xc>
 800cfdc:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <_fflush_r+0x70>)
 800cfde:	429c      	cmp	r4, r3
 800cfe0:	d101      	bne.n	800cfe6 <_fflush_r+0x62>
 800cfe2:	68ac      	ldr	r4, [r5, #8]
 800cfe4:	e7df      	b.n	800cfa6 <_fflush_r+0x22>
 800cfe6:	4b04      	ldr	r3, [pc, #16]	; (800cff8 <_fflush_r+0x74>)
 800cfe8:	429c      	cmp	r4, r3
 800cfea:	bf08      	it	eq
 800cfec:	68ec      	ldreq	r4, [r5, #12]
 800cfee:	e7da      	b.n	800cfa6 <_fflush_r+0x22>
 800cff0:	0800d8e8 	.word	0x0800d8e8
 800cff4:	0800d908 	.word	0x0800d908
 800cff8:	0800d8c8 	.word	0x0800d8c8

0800cffc <std>:
 800cffc:	2300      	movs	r3, #0
 800cffe:	b510      	push	{r4, lr}
 800d000:	4604      	mov	r4, r0
 800d002:	e9c0 3300 	strd	r3, r3, [r0]
 800d006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d00a:	6083      	str	r3, [r0, #8]
 800d00c:	8181      	strh	r1, [r0, #12]
 800d00e:	6643      	str	r3, [r0, #100]	; 0x64
 800d010:	81c2      	strh	r2, [r0, #14]
 800d012:	6183      	str	r3, [r0, #24]
 800d014:	4619      	mov	r1, r3
 800d016:	2208      	movs	r2, #8
 800d018:	305c      	adds	r0, #92	; 0x5c
 800d01a:	f7ff fdef 	bl	800cbfc <memset>
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <std+0x38>)
 800d020:	6263      	str	r3, [r4, #36]	; 0x24
 800d022:	4b05      	ldr	r3, [pc, #20]	; (800d038 <std+0x3c>)
 800d024:	62a3      	str	r3, [r4, #40]	; 0x28
 800d026:	4b05      	ldr	r3, [pc, #20]	; (800d03c <std+0x40>)
 800d028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d02a:	4b05      	ldr	r3, [pc, #20]	; (800d040 <std+0x44>)
 800d02c:	6224      	str	r4, [r4, #32]
 800d02e:	6323      	str	r3, [r4, #48]	; 0x30
 800d030:	bd10      	pop	{r4, pc}
 800d032:	bf00      	nop
 800d034:	0800d499 	.word	0x0800d499
 800d038:	0800d4bb 	.word	0x0800d4bb
 800d03c:	0800d4f3 	.word	0x0800d4f3
 800d040:	0800d517 	.word	0x0800d517

0800d044 <_cleanup_r>:
 800d044:	4901      	ldr	r1, [pc, #4]	; (800d04c <_cleanup_r+0x8>)
 800d046:	f000 b8af 	b.w	800d1a8 <_fwalk_reent>
 800d04a:	bf00      	nop
 800d04c:	0800cf85 	.word	0x0800cf85

0800d050 <__sfmoreglue>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	2268      	movs	r2, #104	; 0x68
 800d054:	1e4d      	subs	r5, r1, #1
 800d056:	4355      	muls	r5, r2
 800d058:	460e      	mov	r6, r1
 800d05a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d05e:	f000 f997 	bl	800d390 <_malloc_r>
 800d062:	4604      	mov	r4, r0
 800d064:	b140      	cbz	r0, 800d078 <__sfmoreglue+0x28>
 800d066:	2100      	movs	r1, #0
 800d068:	e9c0 1600 	strd	r1, r6, [r0]
 800d06c:	300c      	adds	r0, #12
 800d06e:	60a0      	str	r0, [r4, #8]
 800d070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d074:	f7ff fdc2 	bl	800cbfc <memset>
 800d078:	4620      	mov	r0, r4
 800d07a:	bd70      	pop	{r4, r5, r6, pc}

0800d07c <__sfp_lock_acquire>:
 800d07c:	4801      	ldr	r0, [pc, #4]	; (800d084 <__sfp_lock_acquire+0x8>)
 800d07e:	f000 b8b3 	b.w	800d1e8 <__retarget_lock_acquire_recursive>
 800d082:	bf00      	nop
 800d084:	24004d09 	.word	0x24004d09

0800d088 <__sfp_lock_release>:
 800d088:	4801      	ldr	r0, [pc, #4]	; (800d090 <__sfp_lock_release+0x8>)
 800d08a:	f000 b8ae 	b.w	800d1ea <__retarget_lock_release_recursive>
 800d08e:	bf00      	nop
 800d090:	24004d09 	.word	0x24004d09

0800d094 <__sinit_lock_acquire>:
 800d094:	4801      	ldr	r0, [pc, #4]	; (800d09c <__sinit_lock_acquire+0x8>)
 800d096:	f000 b8a7 	b.w	800d1e8 <__retarget_lock_acquire_recursive>
 800d09a:	bf00      	nop
 800d09c:	24004d0a 	.word	0x24004d0a

0800d0a0 <__sinit_lock_release>:
 800d0a0:	4801      	ldr	r0, [pc, #4]	; (800d0a8 <__sinit_lock_release+0x8>)
 800d0a2:	f000 b8a2 	b.w	800d1ea <__retarget_lock_release_recursive>
 800d0a6:	bf00      	nop
 800d0a8:	24004d0a 	.word	0x24004d0a

0800d0ac <__sinit>:
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	f7ff fff0 	bl	800d094 <__sinit_lock_acquire>
 800d0b4:	69a3      	ldr	r3, [r4, #24]
 800d0b6:	b11b      	cbz	r3, 800d0c0 <__sinit+0x14>
 800d0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0bc:	f7ff bff0 	b.w	800d0a0 <__sinit_lock_release>
 800d0c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d0c4:	6523      	str	r3, [r4, #80]	; 0x50
 800d0c6:	4b13      	ldr	r3, [pc, #76]	; (800d114 <__sinit+0x68>)
 800d0c8:	4a13      	ldr	r2, [pc, #76]	; (800d118 <__sinit+0x6c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0ce:	42a3      	cmp	r3, r4
 800d0d0:	bf04      	itt	eq
 800d0d2:	2301      	moveq	r3, #1
 800d0d4:	61a3      	streq	r3, [r4, #24]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f000 f820 	bl	800d11c <__sfp>
 800d0dc:	6060      	str	r0, [r4, #4]
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f000 f81c 	bl	800d11c <__sfp>
 800d0e4:	60a0      	str	r0, [r4, #8]
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f000 f818 	bl	800d11c <__sfp>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	60e0      	str	r0, [r4, #12]
 800d0f0:	2104      	movs	r1, #4
 800d0f2:	6860      	ldr	r0, [r4, #4]
 800d0f4:	f7ff ff82 	bl	800cffc <std>
 800d0f8:	68a0      	ldr	r0, [r4, #8]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	2109      	movs	r1, #9
 800d0fe:	f7ff ff7d 	bl	800cffc <std>
 800d102:	68e0      	ldr	r0, [r4, #12]
 800d104:	2202      	movs	r2, #2
 800d106:	2112      	movs	r1, #18
 800d108:	f7ff ff78 	bl	800cffc <std>
 800d10c:	2301      	movs	r3, #1
 800d10e:	61a3      	str	r3, [r4, #24]
 800d110:	e7d2      	b.n	800d0b8 <__sinit+0xc>
 800d112:	bf00      	nop
 800d114:	0800d8c4 	.word	0x0800d8c4
 800d118:	0800d045 	.word	0x0800d045

0800d11c <__sfp>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	4607      	mov	r7, r0
 800d120:	f7ff ffac 	bl	800d07c <__sfp_lock_acquire>
 800d124:	4b1e      	ldr	r3, [pc, #120]	; (800d1a0 <__sfp+0x84>)
 800d126:	681e      	ldr	r6, [r3, #0]
 800d128:	69b3      	ldr	r3, [r6, #24]
 800d12a:	b913      	cbnz	r3, 800d132 <__sfp+0x16>
 800d12c:	4630      	mov	r0, r6
 800d12e:	f7ff ffbd 	bl	800d0ac <__sinit>
 800d132:	3648      	adds	r6, #72	; 0x48
 800d134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d138:	3b01      	subs	r3, #1
 800d13a:	d503      	bpl.n	800d144 <__sfp+0x28>
 800d13c:	6833      	ldr	r3, [r6, #0]
 800d13e:	b30b      	cbz	r3, 800d184 <__sfp+0x68>
 800d140:	6836      	ldr	r6, [r6, #0]
 800d142:	e7f7      	b.n	800d134 <__sfp+0x18>
 800d144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d148:	b9d5      	cbnz	r5, 800d180 <__sfp+0x64>
 800d14a:	4b16      	ldr	r3, [pc, #88]	; (800d1a4 <__sfp+0x88>)
 800d14c:	60e3      	str	r3, [r4, #12]
 800d14e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d152:	6665      	str	r5, [r4, #100]	; 0x64
 800d154:	f000 f847 	bl	800d1e6 <__retarget_lock_init_recursive>
 800d158:	f7ff ff96 	bl	800d088 <__sfp_lock_release>
 800d15c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d164:	6025      	str	r5, [r4, #0]
 800d166:	61a5      	str	r5, [r4, #24]
 800d168:	2208      	movs	r2, #8
 800d16a:	4629      	mov	r1, r5
 800d16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d170:	f7ff fd44 	bl	800cbfc <memset>
 800d174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d17c:	4620      	mov	r0, r4
 800d17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d180:	3468      	adds	r4, #104	; 0x68
 800d182:	e7d9      	b.n	800d138 <__sfp+0x1c>
 800d184:	2104      	movs	r1, #4
 800d186:	4638      	mov	r0, r7
 800d188:	f7ff ff62 	bl	800d050 <__sfmoreglue>
 800d18c:	4604      	mov	r4, r0
 800d18e:	6030      	str	r0, [r6, #0]
 800d190:	2800      	cmp	r0, #0
 800d192:	d1d5      	bne.n	800d140 <__sfp+0x24>
 800d194:	f7ff ff78 	bl	800d088 <__sfp_lock_release>
 800d198:	230c      	movs	r3, #12
 800d19a:	603b      	str	r3, [r7, #0]
 800d19c:	e7ee      	b.n	800d17c <__sfp+0x60>
 800d19e:	bf00      	nop
 800d1a0:	0800d8c4 	.word	0x0800d8c4
 800d1a4:	ffff0001 	.word	0xffff0001

0800d1a8 <_fwalk_reent>:
 800d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	4688      	mov	r8, r1
 800d1b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1b4:	2700      	movs	r7, #0
 800d1b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1ba:	f1b9 0901 	subs.w	r9, r9, #1
 800d1be:	d505      	bpl.n	800d1cc <_fwalk_reent+0x24>
 800d1c0:	6824      	ldr	r4, [r4, #0]
 800d1c2:	2c00      	cmp	r4, #0
 800d1c4:	d1f7      	bne.n	800d1b6 <_fwalk_reent+0xe>
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1cc:	89ab      	ldrh	r3, [r5, #12]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d907      	bls.n	800d1e2 <_fwalk_reent+0x3a>
 800d1d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	d003      	beq.n	800d1e2 <_fwalk_reent+0x3a>
 800d1da:	4629      	mov	r1, r5
 800d1dc:	4630      	mov	r0, r6
 800d1de:	47c0      	blx	r8
 800d1e0:	4307      	orrs	r7, r0
 800d1e2:	3568      	adds	r5, #104	; 0x68
 800d1e4:	e7e9      	b.n	800d1ba <_fwalk_reent+0x12>

0800d1e6 <__retarget_lock_init_recursive>:
 800d1e6:	4770      	bx	lr

0800d1e8 <__retarget_lock_acquire_recursive>:
 800d1e8:	4770      	bx	lr

0800d1ea <__retarget_lock_release_recursive>:
 800d1ea:	4770      	bx	lr

0800d1ec <__swhatbuf_r>:
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	460e      	mov	r6, r1
 800d1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f4:	2900      	cmp	r1, #0
 800d1f6:	b096      	sub	sp, #88	; 0x58
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	461d      	mov	r5, r3
 800d1fc:	da08      	bge.n	800d210 <__swhatbuf_r+0x24>
 800d1fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	602a      	str	r2, [r5, #0]
 800d206:	061a      	lsls	r2, r3, #24
 800d208:	d410      	bmi.n	800d22c <__swhatbuf_r+0x40>
 800d20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d20e:	e00e      	b.n	800d22e <__swhatbuf_r+0x42>
 800d210:	466a      	mov	r2, sp
 800d212:	f000 f9a7 	bl	800d564 <_fstat_r>
 800d216:	2800      	cmp	r0, #0
 800d218:	dbf1      	blt.n	800d1fe <__swhatbuf_r+0x12>
 800d21a:	9a01      	ldr	r2, [sp, #4]
 800d21c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d220:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d224:	425a      	negs	r2, r3
 800d226:	415a      	adcs	r2, r3
 800d228:	602a      	str	r2, [r5, #0]
 800d22a:	e7ee      	b.n	800d20a <__swhatbuf_r+0x1e>
 800d22c:	2340      	movs	r3, #64	; 0x40
 800d22e:	2000      	movs	r0, #0
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	b016      	add	sp, #88	; 0x58
 800d234:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d238 <__smakebuf_r>:
 800d238:	898b      	ldrh	r3, [r1, #12]
 800d23a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d23c:	079d      	lsls	r5, r3, #30
 800d23e:	4606      	mov	r6, r0
 800d240:	460c      	mov	r4, r1
 800d242:	d507      	bpl.n	800d254 <__smakebuf_r+0x1c>
 800d244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	6123      	str	r3, [r4, #16]
 800d24c:	2301      	movs	r3, #1
 800d24e:	6163      	str	r3, [r4, #20]
 800d250:	b002      	add	sp, #8
 800d252:	bd70      	pop	{r4, r5, r6, pc}
 800d254:	ab01      	add	r3, sp, #4
 800d256:	466a      	mov	r2, sp
 800d258:	f7ff ffc8 	bl	800d1ec <__swhatbuf_r>
 800d25c:	9900      	ldr	r1, [sp, #0]
 800d25e:	4605      	mov	r5, r0
 800d260:	4630      	mov	r0, r6
 800d262:	f000 f895 	bl	800d390 <_malloc_r>
 800d266:	b948      	cbnz	r0, 800d27c <__smakebuf_r+0x44>
 800d268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d26c:	059a      	lsls	r2, r3, #22
 800d26e:	d4ef      	bmi.n	800d250 <__smakebuf_r+0x18>
 800d270:	f023 0303 	bic.w	r3, r3, #3
 800d274:	f043 0302 	orr.w	r3, r3, #2
 800d278:	81a3      	strh	r3, [r4, #12]
 800d27a:	e7e3      	b.n	800d244 <__smakebuf_r+0xc>
 800d27c:	4b0d      	ldr	r3, [pc, #52]	; (800d2b4 <__smakebuf_r+0x7c>)
 800d27e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	6020      	str	r0, [r4, #0]
 800d284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d288:	81a3      	strh	r3, [r4, #12]
 800d28a:	9b00      	ldr	r3, [sp, #0]
 800d28c:	6163      	str	r3, [r4, #20]
 800d28e:	9b01      	ldr	r3, [sp, #4]
 800d290:	6120      	str	r0, [r4, #16]
 800d292:	b15b      	cbz	r3, 800d2ac <__smakebuf_r+0x74>
 800d294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d298:	4630      	mov	r0, r6
 800d29a:	f000 f975 	bl	800d588 <_isatty_r>
 800d29e:	b128      	cbz	r0, 800d2ac <__smakebuf_r+0x74>
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	f023 0303 	bic.w	r3, r3, #3
 800d2a6:	f043 0301 	orr.w	r3, r3, #1
 800d2aa:	81a3      	strh	r3, [r4, #12]
 800d2ac:	89a0      	ldrh	r0, [r4, #12]
 800d2ae:	4305      	orrs	r5, r0
 800d2b0:	81a5      	strh	r5, [r4, #12]
 800d2b2:	e7cd      	b.n	800d250 <__smakebuf_r+0x18>
 800d2b4:	0800d045 	.word	0x0800d045

0800d2b8 <_free_r>:
 800d2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2ba:	2900      	cmp	r1, #0
 800d2bc:	d044      	beq.n	800d348 <_free_r+0x90>
 800d2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2c2:	9001      	str	r0, [sp, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f1a1 0404 	sub.w	r4, r1, #4
 800d2ca:	bfb8      	it	lt
 800d2cc:	18e4      	addlt	r4, r4, r3
 800d2ce:	f000 f97d 	bl	800d5cc <__malloc_lock>
 800d2d2:	4a1e      	ldr	r2, [pc, #120]	; (800d34c <_free_r+0x94>)
 800d2d4:	9801      	ldr	r0, [sp, #4]
 800d2d6:	6813      	ldr	r3, [r2, #0]
 800d2d8:	b933      	cbnz	r3, 800d2e8 <_free_r+0x30>
 800d2da:	6063      	str	r3, [r4, #4]
 800d2dc:	6014      	str	r4, [r2, #0]
 800d2de:	b003      	add	sp, #12
 800d2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2e4:	f000 b978 	b.w	800d5d8 <__malloc_unlock>
 800d2e8:	42a3      	cmp	r3, r4
 800d2ea:	d908      	bls.n	800d2fe <_free_r+0x46>
 800d2ec:	6825      	ldr	r5, [r4, #0]
 800d2ee:	1961      	adds	r1, r4, r5
 800d2f0:	428b      	cmp	r3, r1
 800d2f2:	bf01      	itttt	eq
 800d2f4:	6819      	ldreq	r1, [r3, #0]
 800d2f6:	685b      	ldreq	r3, [r3, #4]
 800d2f8:	1949      	addeq	r1, r1, r5
 800d2fa:	6021      	streq	r1, [r4, #0]
 800d2fc:	e7ed      	b.n	800d2da <_free_r+0x22>
 800d2fe:	461a      	mov	r2, r3
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	b10b      	cbz	r3, 800d308 <_free_r+0x50>
 800d304:	42a3      	cmp	r3, r4
 800d306:	d9fa      	bls.n	800d2fe <_free_r+0x46>
 800d308:	6811      	ldr	r1, [r2, #0]
 800d30a:	1855      	adds	r5, r2, r1
 800d30c:	42a5      	cmp	r5, r4
 800d30e:	d10b      	bne.n	800d328 <_free_r+0x70>
 800d310:	6824      	ldr	r4, [r4, #0]
 800d312:	4421      	add	r1, r4
 800d314:	1854      	adds	r4, r2, r1
 800d316:	42a3      	cmp	r3, r4
 800d318:	6011      	str	r1, [r2, #0]
 800d31a:	d1e0      	bne.n	800d2de <_free_r+0x26>
 800d31c:	681c      	ldr	r4, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	6053      	str	r3, [r2, #4]
 800d322:	4421      	add	r1, r4
 800d324:	6011      	str	r1, [r2, #0]
 800d326:	e7da      	b.n	800d2de <_free_r+0x26>
 800d328:	d902      	bls.n	800d330 <_free_r+0x78>
 800d32a:	230c      	movs	r3, #12
 800d32c:	6003      	str	r3, [r0, #0]
 800d32e:	e7d6      	b.n	800d2de <_free_r+0x26>
 800d330:	6825      	ldr	r5, [r4, #0]
 800d332:	1961      	adds	r1, r4, r5
 800d334:	428b      	cmp	r3, r1
 800d336:	bf04      	itt	eq
 800d338:	6819      	ldreq	r1, [r3, #0]
 800d33a:	685b      	ldreq	r3, [r3, #4]
 800d33c:	6063      	str	r3, [r4, #4]
 800d33e:	bf04      	itt	eq
 800d340:	1949      	addeq	r1, r1, r5
 800d342:	6021      	streq	r1, [r4, #0]
 800d344:	6054      	str	r4, [r2, #4]
 800d346:	e7ca      	b.n	800d2de <_free_r+0x26>
 800d348:	b003      	add	sp, #12
 800d34a:	bd30      	pop	{r4, r5, pc}
 800d34c:	24004d0c 	.word	0x24004d0c

0800d350 <sbrk_aligned>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	4e0e      	ldr	r6, [pc, #56]	; (800d38c <sbrk_aligned+0x3c>)
 800d354:	460c      	mov	r4, r1
 800d356:	6831      	ldr	r1, [r6, #0]
 800d358:	4605      	mov	r5, r0
 800d35a:	b911      	cbnz	r1, 800d362 <sbrk_aligned+0x12>
 800d35c:	f000 f88c 	bl	800d478 <_sbrk_r>
 800d360:	6030      	str	r0, [r6, #0]
 800d362:	4621      	mov	r1, r4
 800d364:	4628      	mov	r0, r5
 800d366:	f000 f887 	bl	800d478 <_sbrk_r>
 800d36a:	1c43      	adds	r3, r0, #1
 800d36c:	d00a      	beq.n	800d384 <sbrk_aligned+0x34>
 800d36e:	1cc4      	adds	r4, r0, #3
 800d370:	f024 0403 	bic.w	r4, r4, #3
 800d374:	42a0      	cmp	r0, r4
 800d376:	d007      	beq.n	800d388 <sbrk_aligned+0x38>
 800d378:	1a21      	subs	r1, r4, r0
 800d37a:	4628      	mov	r0, r5
 800d37c:	f000 f87c 	bl	800d478 <_sbrk_r>
 800d380:	3001      	adds	r0, #1
 800d382:	d101      	bne.n	800d388 <sbrk_aligned+0x38>
 800d384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d388:	4620      	mov	r0, r4
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	24004d10 	.word	0x24004d10

0800d390 <_malloc_r>:
 800d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d394:	1ccd      	adds	r5, r1, #3
 800d396:	f025 0503 	bic.w	r5, r5, #3
 800d39a:	3508      	adds	r5, #8
 800d39c:	2d0c      	cmp	r5, #12
 800d39e:	bf38      	it	cc
 800d3a0:	250c      	movcc	r5, #12
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	4607      	mov	r7, r0
 800d3a6:	db01      	blt.n	800d3ac <_malloc_r+0x1c>
 800d3a8:	42a9      	cmp	r1, r5
 800d3aa:	d905      	bls.n	800d3b8 <_malloc_r+0x28>
 800d3ac:	230c      	movs	r3, #12
 800d3ae:	603b      	str	r3, [r7, #0]
 800d3b0:	2600      	movs	r6, #0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b8:	4e2e      	ldr	r6, [pc, #184]	; (800d474 <_malloc_r+0xe4>)
 800d3ba:	f000 f907 	bl	800d5cc <__malloc_lock>
 800d3be:	6833      	ldr	r3, [r6, #0]
 800d3c0:	461c      	mov	r4, r3
 800d3c2:	bb34      	cbnz	r4, 800d412 <_malloc_r+0x82>
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	f7ff ffc2 	bl	800d350 <sbrk_aligned>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	d14d      	bne.n	800d46e <_malloc_r+0xde>
 800d3d2:	6834      	ldr	r4, [r6, #0]
 800d3d4:	4626      	mov	r6, r4
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	d140      	bne.n	800d45c <_malloc_r+0xcc>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4638      	mov	r0, r7
 800d3e0:	eb04 0803 	add.w	r8, r4, r3
 800d3e4:	f000 f848 	bl	800d478 <_sbrk_r>
 800d3e8:	4580      	cmp	r8, r0
 800d3ea:	d13a      	bne.n	800d462 <_malloc_r+0xd2>
 800d3ec:	6821      	ldr	r1, [r4, #0]
 800d3ee:	3503      	adds	r5, #3
 800d3f0:	1a6d      	subs	r5, r5, r1
 800d3f2:	f025 0503 	bic.w	r5, r5, #3
 800d3f6:	3508      	adds	r5, #8
 800d3f8:	2d0c      	cmp	r5, #12
 800d3fa:	bf38      	it	cc
 800d3fc:	250c      	movcc	r5, #12
 800d3fe:	4629      	mov	r1, r5
 800d400:	4638      	mov	r0, r7
 800d402:	f7ff ffa5 	bl	800d350 <sbrk_aligned>
 800d406:	3001      	adds	r0, #1
 800d408:	d02b      	beq.n	800d462 <_malloc_r+0xd2>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	442b      	add	r3, r5
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	e00e      	b.n	800d430 <_malloc_r+0xa0>
 800d412:	6822      	ldr	r2, [r4, #0]
 800d414:	1b52      	subs	r2, r2, r5
 800d416:	d41e      	bmi.n	800d456 <_malloc_r+0xc6>
 800d418:	2a0b      	cmp	r2, #11
 800d41a:	d916      	bls.n	800d44a <_malloc_r+0xba>
 800d41c:	1961      	adds	r1, r4, r5
 800d41e:	42a3      	cmp	r3, r4
 800d420:	6025      	str	r5, [r4, #0]
 800d422:	bf18      	it	ne
 800d424:	6059      	strne	r1, [r3, #4]
 800d426:	6863      	ldr	r3, [r4, #4]
 800d428:	bf08      	it	eq
 800d42a:	6031      	streq	r1, [r6, #0]
 800d42c:	5162      	str	r2, [r4, r5]
 800d42e:	604b      	str	r3, [r1, #4]
 800d430:	4638      	mov	r0, r7
 800d432:	f104 060b 	add.w	r6, r4, #11
 800d436:	f000 f8cf 	bl	800d5d8 <__malloc_unlock>
 800d43a:	f026 0607 	bic.w	r6, r6, #7
 800d43e:	1d23      	adds	r3, r4, #4
 800d440:	1af2      	subs	r2, r6, r3
 800d442:	d0b6      	beq.n	800d3b2 <_malloc_r+0x22>
 800d444:	1b9b      	subs	r3, r3, r6
 800d446:	50a3      	str	r3, [r4, r2]
 800d448:	e7b3      	b.n	800d3b2 <_malloc_r+0x22>
 800d44a:	6862      	ldr	r2, [r4, #4]
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	bf0c      	ite	eq
 800d450:	6032      	streq	r2, [r6, #0]
 800d452:	605a      	strne	r2, [r3, #4]
 800d454:	e7ec      	b.n	800d430 <_malloc_r+0xa0>
 800d456:	4623      	mov	r3, r4
 800d458:	6864      	ldr	r4, [r4, #4]
 800d45a:	e7b2      	b.n	800d3c2 <_malloc_r+0x32>
 800d45c:	4634      	mov	r4, r6
 800d45e:	6876      	ldr	r6, [r6, #4]
 800d460:	e7b9      	b.n	800d3d6 <_malloc_r+0x46>
 800d462:	230c      	movs	r3, #12
 800d464:	603b      	str	r3, [r7, #0]
 800d466:	4638      	mov	r0, r7
 800d468:	f000 f8b6 	bl	800d5d8 <__malloc_unlock>
 800d46c:	e7a1      	b.n	800d3b2 <_malloc_r+0x22>
 800d46e:	6025      	str	r5, [r4, #0]
 800d470:	e7de      	b.n	800d430 <_malloc_r+0xa0>
 800d472:	bf00      	nop
 800d474:	24004d0c 	.word	0x24004d0c

0800d478 <_sbrk_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_sbrk_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f7f4 f986 	bl	8001794 <_sbrk>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_sbrk_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_sbrk_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	24004d14 	.word	0x24004d14

0800d498 <__sread>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	460c      	mov	r4, r1
 800d49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a0:	f000 f8a0 	bl	800d5e4 <_read_r>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	bfab      	itete	ge
 800d4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d4ac:	181b      	addge	r3, r3, r0
 800d4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4b2:	bfac      	ite	ge
 800d4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4b6:	81a3      	strhlt	r3, [r4, #12]
 800d4b8:	bd10      	pop	{r4, pc}

0800d4ba <__swrite>:
 800d4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4be:	461f      	mov	r7, r3
 800d4c0:	898b      	ldrh	r3, [r1, #12]
 800d4c2:	05db      	lsls	r3, r3, #23
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	4616      	mov	r6, r2
 800d4ca:	d505      	bpl.n	800d4d8 <__swrite+0x1e>
 800d4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f000 f868 	bl	800d5a8 <_lseek_r>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	4632      	mov	r2, r6
 800d4e6:	463b      	mov	r3, r7
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ee:	f000 b817 	b.w	800d520 <_write_r>

0800d4f2 <__sseek>:
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4fa:	f000 f855 	bl	800d5a8 <_lseek_r>
 800d4fe:	1c43      	adds	r3, r0, #1
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	bf15      	itete	ne
 800d504:	6560      	strne	r0, [r4, #84]	; 0x54
 800d506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d50e:	81a3      	strheq	r3, [r4, #12]
 800d510:	bf18      	it	ne
 800d512:	81a3      	strhne	r3, [r4, #12]
 800d514:	bd10      	pop	{r4, pc}

0800d516 <__sclose>:
 800d516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d51a:	f000 b813 	b.w	800d544 <_close_r>
	...

0800d520 <_write_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d07      	ldr	r5, [pc, #28]	; (800d540 <_write_r+0x20>)
 800d524:	4604      	mov	r4, r0
 800d526:	4608      	mov	r0, r1
 800d528:	4611      	mov	r1, r2
 800d52a:	2200      	movs	r2, #0
 800d52c:	602a      	str	r2, [r5, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	f7f4 f8df 	bl	80016f2 <_write>
 800d534:	1c43      	adds	r3, r0, #1
 800d536:	d102      	bne.n	800d53e <_write_r+0x1e>
 800d538:	682b      	ldr	r3, [r5, #0]
 800d53a:	b103      	cbz	r3, 800d53e <_write_r+0x1e>
 800d53c:	6023      	str	r3, [r4, #0]
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	24004d14 	.word	0x24004d14

0800d544 <_close_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d06      	ldr	r5, [pc, #24]	; (800d560 <_close_r+0x1c>)
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	602b      	str	r3, [r5, #0]
 800d550:	f7f4 f8eb 	bl	800172a <_close>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	d102      	bne.n	800d55e <_close_r+0x1a>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	b103      	cbz	r3, 800d55e <_close_r+0x1a>
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	24004d14 	.word	0x24004d14

0800d564 <_fstat_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	4d07      	ldr	r5, [pc, #28]	; (800d584 <_fstat_r+0x20>)
 800d568:	2300      	movs	r3, #0
 800d56a:	4604      	mov	r4, r0
 800d56c:	4608      	mov	r0, r1
 800d56e:	4611      	mov	r1, r2
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	f7f4 f8e6 	bl	8001742 <_fstat>
 800d576:	1c43      	adds	r3, r0, #1
 800d578:	d102      	bne.n	800d580 <_fstat_r+0x1c>
 800d57a:	682b      	ldr	r3, [r5, #0]
 800d57c:	b103      	cbz	r3, 800d580 <_fstat_r+0x1c>
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	bd38      	pop	{r3, r4, r5, pc}
 800d582:	bf00      	nop
 800d584:	24004d14 	.word	0x24004d14

0800d588 <_isatty_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	4d06      	ldr	r5, [pc, #24]	; (800d5a4 <_isatty_r+0x1c>)
 800d58c:	2300      	movs	r3, #0
 800d58e:	4604      	mov	r4, r0
 800d590:	4608      	mov	r0, r1
 800d592:	602b      	str	r3, [r5, #0]
 800d594:	f7f4 f8e5 	bl	8001762 <_isatty>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_isatty_r+0x1a>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_isatty_r+0x1a>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	24004d14 	.word	0x24004d14

0800d5a8 <_lseek_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	; (800d5c8 <_lseek_r+0x20>)
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	602a      	str	r2, [r5, #0]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f7f4 f8de 	bl	8001778 <_lseek>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d102      	bne.n	800d5c6 <_lseek_r+0x1e>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b103      	cbz	r3, 800d5c6 <_lseek_r+0x1e>
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	24004d14 	.word	0x24004d14

0800d5cc <__malloc_lock>:
 800d5cc:	4801      	ldr	r0, [pc, #4]	; (800d5d4 <__malloc_lock+0x8>)
 800d5ce:	f7ff be0b 	b.w	800d1e8 <__retarget_lock_acquire_recursive>
 800d5d2:	bf00      	nop
 800d5d4:	24004d08 	.word	0x24004d08

0800d5d8 <__malloc_unlock>:
 800d5d8:	4801      	ldr	r0, [pc, #4]	; (800d5e0 <__malloc_unlock+0x8>)
 800d5da:	f7ff be06 	b.w	800d1ea <__retarget_lock_release_recursive>
 800d5de:	bf00      	nop
 800d5e0:	24004d08 	.word	0x24004d08

0800d5e4 <_read_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4d07      	ldr	r5, [pc, #28]	; (800d604 <_read_r+0x20>)
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	4608      	mov	r0, r1
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	602a      	str	r2, [r5, #0]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f7f4 f860 	bl	80016b8 <_read>
 800d5f8:	1c43      	adds	r3, r0, #1
 800d5fa:	d102      	bne.n	800d602 <_read_r+0x1e>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	b103      	cbz	r3, 800d602 <_read_r+0x1e>
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	bd38      	pop	{r3, r4, r5, pc}
 800d604:	24004d14 	.word	0x24004d14

0800d608 <_init>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	bf00      	nop
 800d60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60e:	bc08      	pop	{r3}
 800d610:	469e      	mov	lr, r3
 800d612:	4770      	bx	lr

0800d614 <_fini>:
 800d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d616:	bf00      	nop
 800d618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61a:	bc08      	pop	{r3}
 800d61c:	469e      	mov	lr, r3
 800d61e:	4770      	bx	lr
