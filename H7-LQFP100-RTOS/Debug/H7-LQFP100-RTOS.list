
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080170c0  080170c0  000270c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017508  08017508  00027508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017510  08017510  00027510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017514  08017514  00027514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017518  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  08017620  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  08017620  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003394c  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002740  00000000  00000000  00069178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002528  00000000  00000000  0006b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000400fa  00000000  00000000  0006dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003225a  00000000  00000000  000adeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194af1  00000000  00000000  000e0134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00274c25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afe0  00000000  00000000  00274c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080170a8 	.word	0x080170a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080170a8 	.word	0x080170a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c38 	.word	0x24000c38

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fc56 	bl	8012ec8 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fc4b 	bl	8012ec8 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fc40 	bl	8012ec8 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fc35 	bl	8012ec8 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 f971 	bl	8016948 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c58 	.word	0x24000c58
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	08017130 	.word	0x08017130

08000688 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fd43 	bl	8010120 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 83ee 	bhi.w	8000e84 <HAL_UART_RxCpltCallback+0x7fc>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a85 	.word	0x08000a85
 80006b8:	08000b0b 	.word	0x08000b0b
 80006bc:	08000b35 	.word	0x08000b35
 80006c0:	08000b5d 	.word	0x08000b5d
 80006c4:	08000b87 	.word	0x08000b87
 80006c8:	08000bb3 	.word	0x08000bb3
 80006cc:	08000bdf 	.word	0x08000bdf
 80006d0:	08000c09 	.word	0x08000c09
 80006d4:	08000c35 	.word	0x08000c35
 80006d8:	08000c61 	.word	0x08000c61
 80006dc:	08000c93 	.word	0x08000c93
 80006e0:	08000cc5 	.word	0x08000cc5
 80006e4:	08000d17 	.word	0x08000d17
 80006e8:	08000e1d 	.word	0x08000e1d
 80006ec:	08000e4d 	.word	0x08000e4d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000af5 	.word	0x08000af5
 80006fc:	08000b21 	.word	0x08000b21
 8000700:	08000b49 	.word	0x08000b49
 8000704:	08000b71 	.word	0x08000b71
 8000708:	08000b9d 	.word	0x08000b9d
 800070c:	08000bc9 	.word	0x08000bc9
 8000710:	08000bf5 	.word	0x08000bf5
 8000714:	08000c1d 	.word	0x08000c1d
 8000718:	08000c45 	.word	0x08000c45
 800071c:	08000c77 	.word	0x08000c77
 8000720:	08000ca9 	.word	0x08000ca9
 8000724:	08000cdb 	.word	0x08000cdb
 8000728:	08000df5 	.word	0x08000df5
 800072c:	08000e45 	.word	0x08000e45
 8000730:	08000e85 	.word	0x08000e85
 8000734:	08000e85 	.word	0x08000e85
 8000738:	08000e85 	.word	0x08000e85
 800073c:	08000e85 	.word	0x08000e85
 8000740:	08000e85 	.word	0x08000e85
 8000744:	08000e85 	.word	0x08000e85
 8000748:	08000e85 	.word	0x08000e85
 800074c:	08000e85 	.word	0x08000e85
 8000750:	08000e85 	.word	0x08000e85
 8000754:	08000e85 	.word	0x08000e85
 8000758:	08000e85 	.word	0x08000e85
 800075c:	08000e85 	.word	0x08000e85
 8000760:	08000e85 	.word	0x08000e85
 8000764:	08000e85 	.word	0x08000e85
 8000768:	08000e85 	.word	0x08000e85
 800076c:	08000e85 	.word	0x08000e85
 8000770:	08000e85 	.word	0x08000e85
 8000774:	08000e85 	.word	0x08000e85
 8000778:	08000e85 	.word	0x08000e85
 800077c:	08000e85 	.word	0x08000e85
 8000780:	08000e85 	.word	0x08000e85
 8000784:	08000e85 	.word	0x08000e85
 8000788:	08000e85 	.word	0x08000e85
 800078c:	08000e85 	.word	0x08000e85
 8000790:	08000e85 	.word	0x08000e85
 8000794:	08000e85 	.word	0x08000e85
 8000798:	08000e85 	.word	0x08000e85
 800079c:	08000e85 	.word	0x08000e85
 80007a0:	08000e85 	.word	0x08000e85
 80007a4:	08000e85 	.word	0x08000e85
 80007a8:	08000e85 	.word	0x08000e85
 80007ac:	08000e85 	.word	0x08000e85
 80007b0:	08000e85 	.word	0x08000e85
 80007b4:	08000e85 	.word	0x08000e85
 80007b8:	08000e85 	.word	0x08000e85
 80007bc:	08000e85 	.word	0x08000e85
 80007c0:	08000e85 	.word	0x08000e85
 80007c4:	08000e85 	.word	0x08000e85
 80007c8:	08000e85 	.word	0x08000e85
 80007cc:	08000e85 	.word	0x08000e85
 80007d0:	08000e85 	.word	0x08000e85
 80007d4:	08000e85 	.word	0x08000e85
 80007d8:	08000e85 	.word	0x08000e85
 80007dc:	08000e85 	.word	0x08000e85
 80007e0:	08000e85 	.word	0x08000e85
 80007e4:	08000e85 	.word	0x08000e85
 80007e8:	08000e85 	.word	0x08000e85
 80007ec:	08000e85 	.word	0x08000e85
 80007f0:	08000e85 	.word	0x08000e85
 80007f4:	08000e85 	.word	0x08000e85
 80007f8:	08000e85 	.word	0x08000e85
 80007fc:	08000e85 	.word	0x08000e85
 8000800:	08000e85 	.word	0x08000e85
 8000804:	08000e85 	.word	0x08000e85
 8000808:	08000e85 	.word	0x08000e85
 800080c:	08000e85 	.word	0x08000e85
 8000810:	08000e85 	.word	0x08000e85
 8000814:	08000e85 	.word	0x08000e85
 8000818:	08000e85 	.word	0x08000e85
 800081c:	08000e85 	.word	0x08000e85
 8000820:	08000e85 	.word	0x08000e85
 8000824:	08000e85 	.word	0x08000e85
 8000828:	08000e85 	.word	0x08000e85
 800082c:	08000e85 	.word	0x08000e85
 8000830:	08000e85 	.word	0x08000e85
 8000834:	08000e85 	.word	0x08000e85
 8000838:	08000e85 	.word	0x08000e85
 800083c:	08000e85 	.word	0x08000e85
 8000840:	08000e85 	.word	0x08000e85
 8000844:	08000e85 	.word	0x08000e85
 8000848:	08000e85 	.word	0x08000e85
 800084c:	08000e85 	.word	0x08000e85
 8000850:	08000e85 	.word	0x08000e85
 8000854:	08000e85 	.word	0x08000e85
 8000858:	08000e85 	.word	0x08000e85
 800085c:	08000e85 	.word	0x08000e85
 8000860:	08000e85 	.word	0x08000e85
 8000864:	08000e85 	.word	0x08000e85
 8000868:	08000e85 	.word	0x08000e85
 800086c:	08000e85 	.word	0x08000e85
 8000870:	08000e85 	.word	0x08000e85
 8000874:	08000e85 	.word	0x08000e85
 8000878:	08000e85 	.word	0x08000e85
 800087c:	08000e85 	.word	0x08000e85
 8000880:	08000e85 	.word	0x08000e85
 8000884:	08000e85 	.word	0x08000e85
 8000888:	08000e85 	.word	0x08000e85
 800088c:	08000e85 	.word	0x08000e85
 8000890:	08000e85 	.word	0x08000e85
 8000894:	08000e85 	.word	0x08000e85
 8000898:	08000e85 	.word	0x08000e85
 800089c:	08000e85 	.word	0x08000e85
 80008a0:	08000e85 	.word	0x08000e85
 80008a4:	08000e85 	.word	0x08000e85
 80008a8:	08000e85 	.word	0x08000e85
 80008ac:	08000e85 	.word	0x08000e85
 80008b0:	08000e85 	.word	0x08000e85
 80008b4:	08000e85 	.word	0x08000e85
 80008b8:	08000e85 	.word	0x08000e85
 80008bc:	08000e85 	.word	0x08000e85
 80008c0:	08000e85 	.word	0x08000e85
 80008c4:	08000e85 	.word	0x08000e85
 80008c8:	08000e85 	.word	0x08000e85
 80008cc:	08000e85 	.word	0x08000e85
 80008d0:	08000e85 	.word	0x08000e85
 80008d4:	08000e85 	.word	0x08000e85
 80008d8:	08000e85 	.word	0x08000e85
 80008dc:	08000e85 	.word	0x08000e85
 80008e0:	08000e85 	.word	0x08000e85
 80008e4:	08000e85 	.word	0x08000e85
 80008e8:	08000e85 	.word	0x08000e85
 80008ec:	08000e85 	.word	0x08000e85
 80008f0:	08000e85 	.word	0x08000e85
 80008f4:	08000e85 	.word	0x08000e85
 80008f8:	08000e85 	.word	0x08000e85
 80008fc:	08000e85 	.word	0x08000e85
 8000900:	08000e85 	.word	0x08000e85
 8000904:	08000e85 	.word	0x08000e85
 8000908:	08000e85 	.word	0x08000e85
 800090c:	08000e85 	.word	0x08000e85
 8000910:	08000e85 	.word	0x08000e85
 8000914:	08000e85 	.word	0x08000e85
 8000918:	08000e85 	.word	0x08000e85
 800091c:	08000e85 	.word	0x08000e85
 8000920:	08000e85 	.word	0x08000e85
 8000924:	08000e85 	.word	0x08000e85
 8000928:	08000e85 	.word	0x08000e85
 800092c:	08000e85 	.word	0x08000e85
 8000930:	08000e85 	.word	0x08000e85
 8000934:	08000e85 	.word	0x08000e85
 8000938:	08000e85 	.word	0x08000e85
 800093c:	08000e85 	.word	0x08000e85
 8000940:	08000e85 	.word	0x08000e85
 8000944:	08000e85 	.word	0x08000e85
 8000948:	08000e85 	.word	0x08000e85
 800094c:	08000e85 	.word	0x08000e85
 8000950:	08000e85 	.word	0x08000e85
 8000954:	08000e85 	.word	0x08000e85
 8000958:	08000e85 	.word	0x08000e85
 800095c:	08000e85 	.word	0x08000e85
 8000960:	08000e85 	.word	0x08000e85
 8000964:	08000e85 	.word	0x08000e85
 8000968:	08000e85 	.word	0x08000e85
 800096c:	08000e85 	.word	0x08000e85
 8000970:	08000e85 	.word	0x08000e85
 8000974:	08000e85 	.word	0x08000e85
 8000978:	08000e85 	.word	0x08000e85
 800097c:	08000e85 	.word	0x08000e85
 8000980:	08000e85 	.word	0x08000e85
 8000984:	08000e85 	.word	0x08000e85
 8000988:	08000e85 	.word	0x08000e85
 800098c:	08000e85 	.word	0x08000e85
 8000990:	08000e85 	.word	0x08000e85
 8000994:	08000e85 	.word	0x08000e85
 8000998:	08000e85 	.word	0x08000e85
 800099c:	08000e85 	.word	0x08000e85
 80009a0:	08000e85 	.word	0x08000e85
 80009a4:	08000e85 	.word	0x08000e85
 80009a8:	08000e85 	.word	0x08000e85
 80009ac:	08000e85 	.word	0x08000e85
 80009b0:	08000e85 	.word	0x08000e85
 80009b4:	08000e85 	.word	0x08000e85
 80009b8:	08000e85 	.word	0x08000e85
 80009bc:	08000e85 	.word	0x08000e85
 80009c0:	08000e85 	.word	0x08000e85
 80009c4:	08000e85 	.word	0x08000e85
 80009c8:	08000e85 	.word	0x08000e85
 80009cc:	08000e85 	.word	0x08000e85
 80009d0:	08000e85 	.word	0x08000e85
 80009d4:	08000e85 	.word	0x08000e85
 80009d8:	08000e85 	.word	0x08000e85
 80009dc:	08000e85 	.word	0x08000e85
 80009e0:	08000e85 	.word	0x08000e85
 80009e4:	08000e85 	.word	0x08000e85
 80009e8:	08000e85 	.word	0x08000e85
 80009ec:	08000e85 	.word	0x08000e85
 80009f0:	08000e73 	.word	0x08000e73
 80009f4:	08000e85 	.word	0x08000e85
 80009f8:	08000e85 	.word	0x08000e85
 80009fc:	08000e85 	.word	0x08000e85
 8000a00:	08000e85 	.word	0x08000e85
 8000a04:	08000e85 	.word	0x08000e85
 8000a08:	08000e85 	.word	0x08000e85
 8000a0c:	08000e85 	.word	0x08000e85
 8000a10:	08000e85 	.word	0x08000e85
 8000a14:	08000e85 	.word	0x08000e85
 8000a18:	08000e85 	.word	0x08000e85
 8000a1c:	08000e85 	.word	0x08000e85
 8000a20:	08000e85 	.word	0x08000e85
 8000a24:	08000e85 	.word	0x08000e85
 8000a28:	08000e85 	.word	0x08000e85
 8000a2c:	08000e85 	.word	0x08000e85
 8000a30:	08000e61 	.word	0x08000e61
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f015 ff87 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fa89 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000a46:	e228      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f015 ff7d 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fa7f 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e21e      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
 8000a5c:	24000c5c 	.word	0x24000c5c
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017148 	.word	0x08017148
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	08017150 	.word	0x08017150
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48b8      	ldr	r0, [pc, #736]	; (8000d54 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a72:	f015 ff69 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bb8      	ldr	r3, [pc, #736]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fa6b 	bl	8008f58 <HAL_GPIO_WritePin>

		break;
 8000a82:	e20a      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a84:	48b5      	ldr	r0, [pc, #724]	; (8000d5c <HAL_UART_RxCpltCallback+0x6d4>)
 8000a86:	f015 ff5f 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a8a:	4bb3      	ldr	r3, [pc, #716]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 fa61 	bl	8008f58 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a96:	4bb0      	ldr	r3, [pc, #704]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 fa5b 	bl	8008f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa2:	4baf      	ldr	r3, [pc, #700]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fa54 	bl	8008f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab0:	4bab      	ldr	r3, [pc, #684]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 fa4d 	bl	8008f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000abe:	4ba8      	ldr	r3, [pc, #672]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 fa46 	bl	8008f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000acc:	4ba4      	ldr	r3, [pc, #656]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fa40 	bl	8008f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ad8:	4ba1      	ldr	r3, [pc, #644]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 fa3a 	bl	8008f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae4:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fa33 	bl	8008f58 <HAL_GPIO_WritePin>

		break;
 8000af2:	e1d2      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000af4:	489b      	ldr	r0, [pc, #620]	; (8000d64 <HAL_UART_RxCpltCallback+0x6dc>)
 8000af6:	f015 ff27 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000afa:	4b99      	ldr	r3, [pc, #612]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	2201      	movs	r2, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 fa28 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b08:	e1c7      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b0a:	4897      	ldr	r0, [pc, #604]	; (8000d68 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b0c:	f015 ff1c 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 fa1d 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b1e:	e1bc      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b20:	4892      	ldr	r0, [pc, #584]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000b22:	f015 ff11 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b26:	4b8e      	ldr	r3, [pc, #568]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 fa13 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b32:	e1b2      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b34:	488e      	ldr	r0, [pc, #568]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b36:	f015 ff07 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 fa09 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b46:	e1a8      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b48:	488a      	ldr	r0, [pc, #552]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b4a:	f015 fefd 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b4e:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 f9ff 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b5a:	e19e      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b5c:	4886      	ldr	r0, [pc, #536]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b5e:	f015 fef3 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f9f5 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b6e:	e194      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b72:	f015 fee9 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 f9ea 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b84:	e189      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b86:	487e      	ldr	r0, [pc, #504]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b88:	f015 fede 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b8c:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	2200      	movs	r2, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f9df 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e17e      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b9c:	4879      	ldr	r0, [pc, #484]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b9e:	f015 fed3 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ba2:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f9d4 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000bb0:	e173      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb4:	f015 fec8 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9c9 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000bc6:	e168      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bc8:	4870      	ldr	r0, [pc, #448]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000bca:	f015 febd 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f9be 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000bdc:	e15d      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bde:	486c      	ldr	r0, [pc, #432]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000be0:	f015 feb2 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000be4:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 f9b3 	bl	8008f58 <HAL_GPIO_WritePin>

		break;
 8000bf2:	e152      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bf4:	4867      	ldr	r0, [pc, #412]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bf6:	f015 fea7 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f9a9 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000c06:	e148      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c08:	4863      	ldr	r0, [pc, #396]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c0a:	f015 fe9d 	bl	8016948 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c0e:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 f99f 	bl	8008f58 <HAL_GPIO_WritePin>
		break;
 8000c1a:	e13e      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c1c:	485f      	ldr	r0, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	f015 fe93 	bl	8016948 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2320      	movs	r3, #32
 8000c28:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	485d      	ldr	r0, [pc, #372]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c2e:	f004 fe03 	bl	8005838 <HAL_DAC_Start_DMA>
		break;
 8000c32:	e132      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c34:	485c      	ldr	r0, [pc, #368]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c36:	f015 fe87 	bl	8016948 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c3e:	f004 febb 	bl	80059b8 <HAL_DAC_Stop_DMA>
		break;
 8000c42:	e12a      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000c46:	f015 fe7f 	bl	8016948 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4858      	ldr	r0, [pc, #352]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fd87 	bl	800e760 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c58:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
		break;
 8000c5e:	e11c      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c60:	4856      	ldr	r0, [pc, #344]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000c62:	f015 fe71 	bl	8016948 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c66:	210c      	movs	r1, #12
 8000c68:	4851      	ldr	r0, [pc, #324]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c6a:	f00d fed3 	bl	800ea14 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e111      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c76:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c78:	f015 fe66 	bl	8016948 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fd6e 	bl	800e760 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
		break;
 8000c90:	e103      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c92:	484f      	ldr	r0, [pc, #316]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c94:	f015 fe58 	bl	8016948 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c9c:	f00d feba 	bl	800ea14 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	e0f8      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000ca8:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000caa:	f015 fe4d 	bl	8016948 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fd55 	bl	800e760 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
		break;
 8000cc2:	e0ea      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 fe3f 	bl	8016948 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cce:	f00d fea1 	bl	800ea14 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		break;
 8000cd8:	e0df      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cda:	4843      	ldr	r0, [pc, #268]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cdc:	f015 fe34 	bl	8016948 <puts>
		if (step < 17) {
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	f200 80d1 	bhi.w	8000e8c <HAL_UART_RxCpltCallback+0x804>
			step += 2;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d08:	f004 fef9 	bl	8005afe <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d10:	f004 fd3a 	bl	8005788 <HAL_DAC_Start>
		}
		break;
 8000d14:	e0ba      	b.n	8000e8c <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d16:	4836      	ldr	r0, [pc, #216]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d18:	f015 fe16 	bl	8016948 <puts>
		if (step > 3) {
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	f240 80b5 	bls.w	8000e90 <HAL_UART_RxCpltCallback+0x808>
			step -= 2;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d30:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d44:	f004 fedb 	bl	8005afe <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d4c:	f004 fd1c 	bl	8005788 <HAL_DAC_Start>
		}
		break;
 8000d50:	e09e      	b.n	8000e90 <HAL_UART_RxCpltCallback+0x808>
 8000d52:	bf00      	nop
 8000d54:	0801715c 	.word	0x0801715c
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	08017168 	.word	0x08017168
 8000d60:	58020800 	.word	0x58020800
 8000d64:	08017174 	.word	0x08017174
 8000d68:	08017180 	.word	0x08017180
 8000d6c:	08017190 	.word	0x08017190
 8000d70:	0801719c 	.word	0x0801719c
 8000d74:	080171a8 	.word	0x080171a8
 8000d78:	080171b4 	.word	0x080171b4
 8000d7c:	080171c4 	.word	0x080171c4
 8000d80:	080171d0 	.word	0x080171d0
 8000d84:	080171dc 	.word	0x080171dc
 8000d88:	080171e8 	.word	0x080171e8
 8000d8c:	080171f4 	.word	0x080171f4
 8000d90:	08017204 	.word	0x08017204
 8000d94:	08017214 	.word	0x08017214
 8000d98:	08017220 	.word	0x08017220
 8000d9c:	08017230 	.word	0x08017230
 8000da0:	24000010 	.word	0x24000010
 8000da4:	240002f4 	.word	0x240002f4
 8000da8:	08017240 	.word	0x08017240
 8000dac:	08017250 	.word	0x08017250
 8000db0:	24000554 	.word	0x24000554
 8000db4:	24000c53 	.word	0x24000c53
 8000db8:	24000c4e 	.word	0x24000c4e
 8000dbc:	08017258 	.word	0x08017258
 8000dc0:	08017264 	.word	0x08017264
 8000dc4:	24000508 	.word	0x24000508
 8000dc8:	24000c52 	.word	0x24000c52
 8000dcc:	24000c4c 	.word	0x24000c4c
 8000dd0:	0801726c 	.word	0x0801726c
 8000dd4:	08017274 	.word	0x08017274
 8000dd8:	240005a0 	.word	0x240005a0
 8000ddc:	24000c54 	.word	0x24000c54
 8000de0:	24000c50 	.word	0x24000c50
 8000de4:	0801727c 	.word	0x0801727c
 8000de8:	08017284 	.word	0x08017284
 8000dec:	2400000c 	.word	0x2400000c
 8000df0:	0801728c 	.word	0x0801728c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <HAL_UART_RxCpltCallback+0x81c>)
 8000df6:	f015 fda7 	bl	8016948 <puts>
		if (cadence <= 50000) {
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d846      	bhi.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
			cadence *= 2;
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e1a:	e03b      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e1c:	4823      	ldr	r0, [pc, #140]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e1e:	f015 fd93 	bl	8016948 <puts>
		if (cadence >= 6250) {
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d934      	bls.n	8000e98 <HAL_UART_RxCpltCallback+0x810>
			cadence /= 2;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e36:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e42:	e029      	b.n	8000e98 <HAL_UART_RxCpltCallback+0x810>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <HAL_UART_RxCpltCallback+0x828>)
 8000e46:	f015 fd7f 	bl	8016948 <puts>
		// TODO: Exit stop mode
		break;
 8000e4a:	e026      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e4c:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <HAL_UART_RxCpltCallback+0x82c>)
 8000e4e:	f015 fd7b 	bl	8016948 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_UART_RxCpltCallback+0x830>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2116      	movs	r1, #22
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f012 f835 	bl	8012ec8 <osEventFlagsSet>
		break;
 8000e5e:	e01c      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <HAL_UART_RxCpltCallback+0x834>)
 8000e62:	f015 fd71 	bl	8016948 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_UART_RxCpltCallback+0x838>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f013 fdd2 	bl	8014a14 <xTaskResumeFromISR>
		break;
 8000e70:	e013      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e72:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <HAL_UART_RxCpltCallback+0x83c>)
 8000e74:	f015 fd68 	bl	8016948 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_UART_RxCpltCallback+0x840>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f013 fdc9 	bl	8014a14 <xTaskResumeFromISR>
		break;
 8000e82:	e00a      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	default: {
		printf("Unknown Command\n");
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <HAL_UART_RxCpltCallback+0x844>)
 8000e86:	f015 fd5f 	bl	8016948 <puts>
		break;
 8000e8a:	e006      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
		break;
 8000e8c:	bf00      	nop
 8000e8e:	e004      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
		break;
 8000e90:	bf00      	nop
 8000e92:	e002      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
		break;
 8000e94:	bf00      	nop
 8000e96:	e000      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
		break;
 8000e98:	bf00      	nop
	}
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08017298 	.word	0x08017298
 8000ea8:	24000008 	.word	0x24000008
 8000eac:	080172a4 	.word	0x080172a4
 8000eb0:	080172b0 	.word	0x080172b0
 8000eb4:	080172c0 	.word	0x080172c0
 8000eb8:	24000c58 	.word	0x24000c58
 8000ebc:	080172d0 	.word	0x080172d0
 8000ec0:	24000754 	.word	0x24000754
 8000ec4:	080172dc 	.word	0x080172dc
 8000ec8:	240009b4 	.word	0x240009b4
 8000ecc:	080172e8 	.word	0x080172e8

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f002 fec4 	bl	8003c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f8b4 	bl	8001044 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000edc:	f000 f932 	bl	8001144 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 fef6 	bl	8001cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee4:	f000 febc 	bl	8001c60 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ee8:	f000 fdb4 	bl	8001a54 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000eec:	f000 fe50 	bl	8001b90 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ef0:	f000 fb3e 	bl	8001570 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ef4:	f000 fc34 	bl	8001760 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ef8:	f000 fd36 	bl	8001968 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000efc:	f000 fc88 	bl	8001810 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f00:	f000 fa72 	bl	80013e8 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f04:	f000 f94e 	bl	80011a4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f08:	f000 fb00 	bl	800150c <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f0c:	f000 fbd0 	bl	80016b0 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f10:	f000 fb70 	bl	80015f4 <MX_RTC_Init>
  MX_TIM4_Init();
 8000f14:	f000 fdee 	bl	8001af4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#ifndef DAMY
	if (!handshake()) {
 8000f18:	f001 f8ce 	bl	80020b8 <handshake>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <main+0x56>
		Error_Handler();
 8000f22:	f001 ff5b 	bl	8002ddc <Error_Handler>
	}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f26:	f011 fe57 	bl	8012bd8 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	2080      	movs	r0, #128	; 0x80
 8000f30:	f012 f8c7 	bl	80130c2 <osMessageQueueNew>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <main+0x108>)
 8000f38:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <main+0x10c>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <main+0x110>)
 8000f40:	f011 fe94 	bl	8012c6c <osThreadNew>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <main+0x114>)
 8000f48:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <main+0x118>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4827      	ldr	r0, [pc, #156]	; (8000fec <main+0x11c>)
 8000f50:	f011 fe8c 	bl	8012c6c <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <main+0x120>)
 8000f58:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f5a:	4a26      	ldr	r2, [pc, #152]	; (8000ff4 <main+0x124>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <main+0x128>)
 8000f60:	f011 fe84 	bl	8012c6c <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <main+0x12c>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <main+0x130>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4825      	ldr	r0, [pc, #148]	; (8001004 <main+0x134>)
 8000f70:	f011 fe7c 	bl	8012c6c <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <main+0x138>)
 8000f78:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <main+0x13c>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4824      	ldr	r0, [pc, #144]	; (8001010 <main+0x140>)
 8000f80:	f011 fe74 	bl	8012c6c <osThreadNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <main+0x144>)
 8000f88:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <main+0x148>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <main+0x14c>)
 8000f90:	f011 fe6c 	bl	8012c6c <osThreadNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <main+0x150>)
 8000f98:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f9a:	4a22      	ldr	r2, [pc, #136]	; (8001024 <main+0x154>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <main+0x158>)
 8000fa0:	f011 fe64 	bl	8012c6c <osThreadNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <main+0x15c>)
 8000fa8:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000faa:	4a21      	ldr	r2, [pc, #132]	; (8001030 <main+0x160>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4821      	ldr	r0, [pc, #132]	; (8001034 <main+0x164>)
 8000fb0:	f011 fe5c 	bl	8012c6c <osThreadNew>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a20      	ldr	r2, [pc, #128]	; (8001038 <main+0x168>)
 8000fb8:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f011 ff44 	bl	8012e48 <osEventFlagsNew>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <main+0x16c>)
 8000fc4:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fc6:	f001 f905 	bl	80021d4 <system_setup>
	printf("Starting kernal...\n");
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <main+0x170>)
 8000fcc:	f015 fcbc 	bl	8016948 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fd0:	f011 fe26 	bl	8012c20 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x104>
 8000fd6:	bf00      	nop
 8000fd8:	24000c3c 	.word	0x24000c3c
 8000fdc:	08017344 	.word	0x08017344
 8000fe0:	08002991 	.word	0x08002991
 8000fe4:	24000744 	.word	0x24000744
 8000fe8:	08017368 	.word	0x08017368
 8000fec:	080029d5 	.word	0x080029d5
 8000ff0:	24000748 	.word	0x24000748
 8000ff4:	0801738c 	.word	0x0801738c
 8000ff8:	08002a19 	.word	0x08002a19
 8000ffc:	2400074c 	.word	0x2400074c
 8001000:	080173b0 	.word	0x080173b0
 8001004:	08002a5d 	.word	0x08002a5d
 8001008:	24000750 	.word	0x24000750
 800100c:	080173d4 	.word	0x080173d4
 8001010:	08002ac5 	.word	0x08002ac5
 8001014:	24000754 	.word	0x24000754
 8001018:	080173f8 	.word	0x080173f8
 800101c:	08002b6d 	.word	0x08002b6d
 8001020:	240009b4 	.word	0x240009b4
 8001024:	0801741c 	.word	0x0801741c
 8001028:	08002c15 	.word	0x08002c15
 800102c:	24000c14 	.word	0x24000c14
 8001030:	08017440 	.word	0x08017440
 8001034:	08002ccd 	.word	0x08002ccd
 8001038:	24000c18 	.word	0x24000c18
 800103c:	24000c58 	.word	0x24000c58
 8001040:	080172f8 	.word	0x080172f8

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09c      	sub	sp, #112	; 0x70
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	224c      	movs	r2, #76	; 0x4c
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f015 fb22 	bl	801669c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2220      	movs	r2, #32
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f015 fb1c 	bl	801669c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001064:	2002      	movs	r0, #2
 8001066:	f008 fdd9 	bl	8009c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <SystemClock_Config+0xf8>)
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	4a32      	ldr	r2, [pc, #200]	; (800113c <SystemClock_Config+0xf8>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	62d3      	str	r3, [r2, #44]	; 0x2c
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <SystemClock_Config+0xf8>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <SystemClock_Config+0xfc>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800108c:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <SystemClock_Config+0xfc>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <SystemClock_Config+0xfc>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010a0:	bf00      	nop
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <SystemClock_Config+0xfc>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ae:	d1f8      	bne.n	80010a2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010b0:	2303      	movs	r3, #3
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80010ba:	2309      	movs	r3, #9
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010ce:	2320      	movs	r3, #32
 80010d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010da:	2302      	movs	r3, #2
 80010dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010de:	2308      	movs	r3, #8
 80010e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f008 fdce 	bl	8009c90 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010fa:	f001 fe6f 	bl	8002ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	233f      	movs	r3, #63	; 0x3f
 8001100:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2303      	movs	r3, #3
 8001104:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f009 fa0e 	bl	800a544 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800112e:	f001 fe55 	bl	8002ddc <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3770      	adds	r7, #112	; 0x70
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	58000400 	.word	0x58000400
 8001140:	58024800 	.word	0x58024800

08001144 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0b0      	sub	sp, #192	; 0xc0
 8001148:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	22c0      	movs	r2, #192	; 0xc0
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f015 faa3 	bl	801669c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001156:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001162:	2304      	movs	r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001166:	2320      	movs	r3, #32
 8001168:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800116a:	2308      	movs	r3, #8
 800116c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800116e:	2304      	movs	r3, #4
 8001170:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4618      	mov	r0, r3
 800118c:	f009 fda8 	bl	800ace0 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001196:	f001 fe21 	bl	8002ddc <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	37c0      	adds	r7, #192	; 0xc0
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
 80011c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c8:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011ca:	4a7b      	ldr	r2, [pc, #492]	; (80013b8 <MX_ADC1_Init+0x214>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011ce:	4b79      	ldr	r3, [pc, #484]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b77      	ldr	r3, [pc, #476]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011d8:	2208      	movs	r2, #8
 80011da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011dc:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011de:	2201      	movs	r2, #1
 80011e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e2:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011e4:	2204      	movs	r2, #4
 80011e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011e8:	4b72      	ldr	r3, [pc, #456]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ee:	4b71      	ldr	r3, [pc, #452]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011f6:	220b      	movs	r2, #11
 80011f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fa:	4b6e      	ldr	r3, [pc, #440]	; (80013b4 <MX_ADC1_Init+0x210>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001200:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <MX_ADC1_Init+0x210>)
 800120e:	2203      	movs	r2, #3
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001212:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800121a:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <MX_ADC1_Init+0x210>)
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001220:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001228:	4862      	ldr	r0, [pc, #392]	; (80013b4 <MX_ADC1_Init+0x210>)
 800122a:	f002 ffa5 	bl	8004178 <HAL_ADC_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001234:	f001 fdd2 	bl	8002ddc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	485c      	ldr	r0, [pc, #368]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001244:	f004 f8c0 	bl	80053c8 <HAL_ADCEx_MultiModeConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800124e:	f001 fdc5 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <MX_ADC1_Init+0x218>)
 8001254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001256:	2306      	movs	r3, #6
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800125a:	2307      	movs	r3, #7
 800125c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	484f      	ldr	r0, [pc, #316]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001276:	f003 fa03 	bl	8004680 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001280:	f001 fdac 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001284:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <MX_ADC1_Init+0x21c>)
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001288:	230c      	movs	r3, #12
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4848      	ldr	r0, [pc, #288]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001292:	f003 f9f5 	bl	8004680 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800129c:	f001 fd9e 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <MX_ADC1_Init+0x220>)
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012a4:	2312      	movs	r3, #18
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4841      	ldr	r0, [pc, #260]	; (80013b4 <MX_ADC1_Init+0x210>)
 80012ae:	f003 f9e7 	bl	8004680 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012b8:	f001 fd90 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <MX_ADC1_Init+0x224>)
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012c0:	2318      	movs	r3, #24
 80012c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	483a      	ldr	r0, [pc, #232]	; (80013b4 <MX_ADC1_Init+0x210>)
 80012ca:	f003 f9d9 	bl	8004680 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012d4:	f001 fd82 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012d8:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <MX_ADC1_Init+0x228>)
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4833      	ldr	r0, [pc, #204]	; (80013b4 <MX_ADC1_Init+0x210>)
 80012e8:	f003 f9ca 	bl	8004680 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012f2:	f001 fd73 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <MX_ADC1_Init+0x22c>)
 80012f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	482b      	ldr	r0, [pc, #172]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001306:	f003 f9bb 	bl	8004680 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001310:	f001 fd64 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_ADC1_Init+0x230>)
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001318:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4824      	ldr	r0, [pc, #144]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001324:	f003 f9ac 	bl	8004680 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800132e:	f001 fd55 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <MX_ADC1_Init+0x234>)
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001336:	f44f 7389 	mov.w	r3, #274	; 0x112
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	481c      	ldr	r0, [pc, #112]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001342:	f003 f99d 	bl	8004680 <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800134c:	f001 fd46 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_ADC1_Init+0x238>)
 8001352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001354:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001358:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4815      	ldr	r0, [pc, #84]	; (80013b4 <MX_ADC1_Init+0x210>)
 8001360:	f003 f98e 	bl	8004680 <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800136a:	f001 fd37 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_ADC1_Init+0x23c>)
 8001370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_ADC1_Init+0x210>)
 800137e:	f003 f97f 	bl	8004680 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001388:	f001 fd28 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_ADC1_Init+0x240>)
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001390:	f240 2306 	movw	r3, #518	; 0x206
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC1_Init+0x210>)
 800139c:	f003 f970 	bl	8004680 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80013a6:	f001 fd19 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2400013c 	.word	0x2400013c
 80013b8:	40022000 	.word	0x40022000
 80013bc:	0c900008 	.word	0x0c900008
 80013c0:	10c00010 	.word	0x10c00010
 80013c4:	14f00020 	.word	0x14f00020
 80013c8:	1d500080 	.word	0x1d500080
 80013cc:	21800100 	.word	0x21800100
 80013d0:	25b00200 	.word	0x25b00200
 80013d4:	2a000400 	.word	0x2a000400
 80013d8:	2e300800 	.word	0x2e300800
 80013dc:	3ac04000 	.word	0x3ac04000
 80013e0:	3ef08000 	.word	0x3ef08000
 80013e4:	47520000 	.word	0x47520000

080013e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001402:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <MX_ADC3_Init+0x114>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001408:	2208      	movs	r2, #8
 800140a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <MX_ADC3_Init+0x110>)
 800140e:	2201      	movs	r2, #1
 8001410:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001414:	2204      	movs	r2, #4
 8001416:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <MX_ADC3_Init+0x110>)
 800141a:	2200      	movs	r2, #0
 800141c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001420:	2201      	movs	r2, #1
 8001422:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001426:	2204      	movs	r2, #4
 8001428:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <MX_ADC3_Init+0x110>)
 800142c:	2200      	movs	r2, #0
 800142e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_ADC3_Init+0x110>)
 800143e:	2203      	movs	r2, #3
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_ADC3_Init+0x110>)
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_ADC3_Init+0x110>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001458:	4827      	ldr	r0, [pc, #156]	; (80014f8 <MX_ADC3_Init+0x110>)
 800145a:	f002 fe8d 	bl	8004178 <HAL_ADC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001464:	f001 fcba 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_ADC3_Init+0x118>)
 800146a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800146c:	2306      	movs	r3, #6
 800146e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001470:	2307      	movs	r3, #7
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001474:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001478:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147a:	2304      	movs	r3, #4
 800147c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	481b      	ldr	r0, [pc, #108]	; (80014f8 <MX_ADC3_Init+0x110>)
 800148c:	f003 f8f8 	bl	8004680 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001496:	f001 fca1 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_ADC3_Init+0x11c>)
 800149c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800149e:	230c      	movs	r3, #12
 80014a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_ADC3_Init+0x110>)
 80014a8:	f003 f8ea 	bl	8004680 <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80014b2:	f001 fc93 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014ba:	2312      	movs	r3, #18
 80014bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_ADC3_Init+0x110>)
 80014c4:	f003 f8dc 	bl	8004680 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014ce:	f001 fc85 	bl	8002ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_ADC3_Init+0x120>)
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014d6:	2318      	movs	r3, #24
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC3_Init+0x110>)
 80014e0:	f003 f8ce 	bl	8004680 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014ea:	f001 fc77 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	240001a0 	.word	0x240001a0
 80014fc:	58026000 	.word	0x58026000
 8001500:	cb840000 	.word	0xcb840000
 8001504:	cfb80000 	.word	0xcfb80000
 8001508:	04300002 	.word	0x04300002

0800150c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2224      	movs	r2, #36	; 0x24
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f015 f8bf 	bl	801669c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_DAC1_Init+0x5c>)
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_DAC1_Init+0x60>)
 8001522:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <MX_DAC1_Init+0x5c>)
 8001526:	f004 f90d 	bl	8005744 <HAL_DAC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001530:	f001 fc54 	bl	8002ddc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001538:	230a      	movs	r3, #10
 800153a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001540:	2301      	movs	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_DAC1_Init+0x5c>)
 8001550:	f004 fb28 	bl	8005ba4 <HAL_DAC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800155a:	f001 fc3f 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	240002f4 	.word	0x240002f4
 800156c:	40007400 	.word	0x40007400

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <MX_I2C1_Init+0x7c>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_I2C1_Init+0x78>)
 800157c:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_I2C1_Init+0x80>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001588:	2201      	movs	r2, #1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_I2C1_Init+0x78>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_I2C1_Init+0x78>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C1_Init+0x78>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_I2C1_Init+0x78>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <MX_I2C1_Init+0x78>)
 80015ac:	f007 fcee 	bl	8008f8c <HAL_I2C_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015b6:	f001 fc11 	bl	8002ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <MX_I2C1_Init+0x78>)
 80015be:	f008 fa35 	bl	8009a2c <HAL_I2CEx_ConfigAnalogFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c8:	f001 fc08 	bl	8002ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_I2C1_Init+0x78>)
 80015d0:	f008 fa77 	bl	8009ac2 <HAL_I2CEx_ConfigDigitalFilter>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015da:	f001 fbff 	bl	8002ddc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f008 fabc 	bl	8009b5c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	24000380 	.word	0x24000380
 80015ec:	40005400 	.word	0x40005400
 80015f0:	0020081f 	.word	0x0020081f

080015f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_RTC_Init+0xb4>)
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <MX_RTC_Init+0xb8>)
 8001610:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_RTC_Init+0xb4>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <MX_RTC_Init+0xb4>)
 800161a:	2263      	movs	r2, #99	; 0x63
 800161c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_RTC_Init+0xb4>)
 8001620:	f242 720f 	movw	r2, #9999	; 0x270f
 8001624:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_RTC_Init+0xb4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_RTC_Init+0xb4>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_RTC_Init+0xb4>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_RTC_Init+0xb4>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163e:	481a      	ldr	r0, [pc, #104]	; (80016a8 <MX_RTC_Init+0xb4>)
 8001640:	f00c f84c 	bl	800d6dc <HAL_RTC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800164a:	f001 fbc7 	bl	8002ddc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800164e:	2300      	movs	r3, #0
 8001650:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001652:	2300      	movs	r3, #0
 8001654:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001656:	2300      	movs	r3, #0
 8001658:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2201      	movs	r2, #1
 8001666:	4619      	mov	r1, r3
 8001668:	480f      	ldr	r0, [pc, #60]	; (80016a8 <MX_RTC_Init+0xb4>)
 800166a:	f00c f8b9 	bl	800d7e0 <HAL_RTC_SetTime>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001674:	f001 fbb2 	bl	8002ddc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001678:	2301      	movs	r3, #1
 800167a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800167c:	2301      	movs	r3, #1
 800167e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001680:	2301      	movs	r3, #1
 8001682:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001684:	2300      	movs	r3, #0
 8001686:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	2201      	movs	r2, #1
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_RTC_Init+0xb4>)
 8001690:	f00c f9a0 	bl	800d9d4 <HAL_RTC_SetDate>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800169a:	f001 fb9f 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240003d4 	.word	0x240003d4
 80016ac:	58004000 	.word	0x58004000

080016b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <MX_SPI1_Init+0xac>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016cc:	220f      	movs	r2, #15
 80016ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016e6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_SPI1_Init+0xa8>)
 800171a:	2200      	movs	r2, #0
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_SPI1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001744:	f00c faec 	bl	800dd20 <HAL_SPI_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800174e:	f001 fb45 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	240003f8 	.word	0x240003f8
 800175c:	40013000 	.word	0x40013000

08001760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <MX_SPI2_Init+0xac>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_SPI2_Init+0xa8>)
 800176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001774:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001778:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <MX_SPI2_Init+0xa8>)
 800177c:	220f      	movs	r2, #15
 800177e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_SPI2_Init+0xa8>)
 800178e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001792:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001796:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800179a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017f4:	f00c fa94 	bl	800dd20 <HAL_SPI_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017fe:	f001 faed 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	24000480 	.word	0x24000480
 800180c:	40003800 	.word	0x40003800

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b09a      	sub	sp, #104	; 0x68
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	222c      	movs	r2, #44	; 0x2c
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f014 ff26 	bl	801669c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <MX_TIM1_Init+0x150>)
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <MX_TIM1_Init+0x154>)
 8001854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <MX_TIM1_Init+0x150>)
 8001858:	2231      	movs	r2, #49	; 0x31
 800185a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b40      	ldr	r3, [pc, #256]	; (8001960 <MX_TIM1_Init+0x150>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <MX_TIM1_Init+0x150>)
 8001864:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <MX_TIM1_Init+0x150>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001870:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <MX_TIM1_Init+0x150>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <MX_TIM1_Init+0x150>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800187c:	4838      	ldr	r0, [pc, #224]	; (8001960 <MX_TIM1_Init+0x150>)
 800187e:	f00c fea0 	bl	800e5c2 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001888:	f001 faa8 	bl	8002ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001896:	4619      	mov	r1, r3
 8001898:	4831      	ldr	r0, [pc, #196]	; (8001960 <MX_TIM1_Init+0x150>)
 800189a:	f00d fc1b 	bl	800f0d4 <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018a4:	f001 fa9a 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a8:	482d      	ldr	r0, [pc, #180]	; (8001960 <MX_TIM1_Init+0x150>)
 80018aa:	f00d f997 	bl	800ebdc <HAL_TIM_PWM_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018b4:	f001 fa92 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4825      	ldr	r0, [pc, #148]	; (8001960 <MX_TIM1_Init+0x150>)
 80018cc:	f00e f958 	bl	800fb80 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018d6:	f001 fa81 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4818      	ldr	r0, [pc, #96]	; (8001960 <MX_TIM1_Init+0x150>)
 8001900:	f00d fad4 	bl	800eeac <HAL_TIM_PWM_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800190a:	f001 fa67 	bl	8002ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <MX_TIM1_Init+0x150>)
 8001944:	f00e f9aa 	bl	800fc9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800194e:	f001 fa45 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <MX_TIM1_Init+0x150>)
 8001954:	f001 fdf2 	bl	800353c <HAL_TIM_MspPostInit>

}
 8001958:	bf00      	nop
 800195a:	3768      	adds	r7, #104	; 0x68
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	24000508 	.word	0x24000508
 8001964:	40010000 	.word	0x40010000

08001968 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001988:	463b      	mov	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <MX_TIM2_Init+0xe8>)
 800199c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019a4:	2231      	movs	r2, #49	; 0x31
 80019a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019b0:	f640 4234 	movw	r2, #3124	; 0xc34
 80019b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c2:	4823      	ldr	r0, [pc, #140]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019c4:	f00c fdfd 	bl	800e5c2 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019ce:	f001 fa05 	bl	8002ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019dc:	4619      	mov	r1, r3
 80019de:	481c      	ldr	r0, [pc, #112]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019e0:	f00d fb78 	bl	800f0d4 <HAL_TIM_ConfigClockSource>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019ea:	f001 f9f7 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ee:	4818      	ldr	r0, [pc, #96]	; (8001a50 <MX_TIM2_Init+0xe8>)
 80019f0:	f00d f8f4 	bl	800ebdc <HAL_TIM_PWM_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019fa:	f001 f9ef 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019fe:	2320      	movs	r3, #32
 8001a00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4810      	ldr	r0, [pc, #64]	; (8001a50 <MX_TIM2_Init+0xe8>)
 8001a0e:	f00e f8b7 	bl	800fb80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a18:	f001 f9e0 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a1c:	2360      	movs	r3, #96	; 0x60
 8001a1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM2_Init+0xe8>)
 8001a34:	f00d fa3a 	bl	800eeac <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a3e:	f001 f9cd 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM2_Init+0xe8>)
 8001a44:	f001 fd7a 	bl	800353c <HAL_TIM_MspPostInit>

}
 8001a48:	bf00      	nop
 8001a4a:	3738      	adds	r7, #56	; 0x38
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	24000554 	.word	0x24000554

08001a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <MX_TIM3_Init+0x9c>)
 8001a76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a88:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a9a:	4814      	ldr	r0, [pc, #80]	; (8001aec <MX_TIM3_Init+0x98>)
 8001a9c:	f00c fd91 	bl	800e5c2 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001aa6:	f001 f999 	bl	8002ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_TIM3_Init+0x98>)
 8001ab8:	f00d fb0c 	bl	800f0d4 <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001ac2:	f001 f98b 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_TIM3_Init+0x98>)
 8001ad4:	f00e f854 	bl	800fb80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ade:	f001 f97d 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	240005a0 	.word	0x240005a0
 8001af0:	40000400 	.word	0x40000400

08001af4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <MX_TIM4_Init+0x98>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b1a:	2263      	movs	r2, #99	; 0x63
 8001b1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b26:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b38:	4813      	ldr	r0, [pc, #76]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b3a:	f00c fd42 	bl	800e5c2 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b44:	f001 f94a 	bl	8002ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b56:	f00d fabd 	bl	800f0d4 <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b60:	f001 f93c 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_TIM4_Init+0x94>)
 8001b72:	f00e f805 	bl	800fb80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f001 f92e 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	240005ec 	.word	0x240005ec
 8001b8c:	40000800 	.word	0x40000800

08001b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001b96:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <MX_USART1_UART_Init+0xcc>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001b9c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd8:	481f      	ldr	r0, [pc, #124]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bda:	f00e f8fb 	bl	800fdd4 <HAL_UART_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001be4:	f001 f8fa 	bl	8002ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bec:	f010 fee5 	bl	80129ba <HAL_UARTEx_SetTxFifoThreshold>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bf6:	f001 f8f1 	bl	8002ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4816      	ldr	r0, [pc, #88]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001bfe:	f010 ff1a 	bl	8012a36 <HAL_UARTEx_SetRxFifoThreshold>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c08:	f001 f8e8 	bl	8002ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c0e:	f010 fe9b 	bl	8012948 <HAL_UARTEx_DisableFifoMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c18:	f001 f8e0 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c22:	f010 ff08 	bl	8012a36 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c26:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c28:	f010 fe53 	bl	80128d2 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c2c:	480a      	ldr	r0, [pc, #40]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c2e:	f010 fe1d 	bl	801286c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c40:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <MX_USART1_UART_Init+0xc8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c50:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	24000638 	.word	0x24000638
 8001c5c:	40011000 	.word	0x40011000

08001c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <MX_DMA_Init+0x6c>)
 8001c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <MX_DMA_Init+0x6c>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <MX_DMA_Init+0x6c>)
 8001c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2105      	movs	r1, #5
 8001c88:	200b      	movs	r0, #11
 8001c8a:	f003 fd33 	bl	80056f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c8e:	200b      	movs	r0, #11
 8001c90:	f003 fd4a 	bl	8005728 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	200c      	movs	r0, #12
 8001c9a:	f003 fd2b 	bl	80056f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c9e:	200c      	movs	r0, #12
 8001ca0:	f003 fd42 	bl	8005728 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2105      	movs	r1, #5
 8001ca8:	200d      	movs	r0, #13
 8001caa:	f003 fd23 	bl	80056f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001cae:	200d      	movs	r0, #13
 8001cb0:	f003 fd3a 	bl	8005728 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2105      	movs	r1, #5
 8001cb8:	2010      	movs	r0, #16
 8001cba:	f003 fd1b 	bl	80056f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cbe:	2010      	movs	r0, #16
 8001cc0:	f003 fd32 	bl	8005728 <HAL_NVIC_EnableIRQ>

}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58024400 	.word	0x58024400

08001cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <MX_GPIO_Init+0xe8>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d64:	4815      	ldr	r0, [pc, #84]	; (8001dbc <MX_GPIO_Init+0xec>)
 8001d66:	f007 f8f7 	bl	8008f58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2164      	movs	r1, #100	; 0x64
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <MX_GPIO_Init+0xf0>)
 8001d70:	f007 f8f2 	bl	8008f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d74:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <MX_GPIO_Init+0xec>)
 8001d8e:	f006 ff1b 	bl	8008bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d92:	2364      	movs	r3, #100	; 0x64
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_GPIO_Init+0xf0>)
 8001daa:	f006 ff0d 	bl	8008bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58020800 	.word	0x58020800
 8001dc0:	58020400 	.word	0x58020400

08001dc4 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	f107 0208 	add.w	r2, r7, #8
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	4817      	ldr	r0, [pc, #92]	; (8001e40 <poll_i2c_sensor+0x7c>)
 8001de4:	f007 f96e 	bl	80090c4 <HAL_I2C_Master_Transmit>
 8001de8:	4603      	mov	r3, r0
 8001dea:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001dec:	7b7b      	ldrb	r3, [r7, #13]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001df2:	4814      	ldr	r0, [pc, #80]	; (8001e44 <poll_i2c_sensor+0x80>)
 8001df4:	f014 fda8 	bl	8016948 <puts>
 8001df8:	e01c      	b.n	8001e34 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	f107 0208 	add.w	r2, r7, #8
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <poll_i2c_sensor+0x7c>)
 8001e0c:	f007 fa72 	bl	80092f4 <HAL_I2C_Master_Receive>
 8001e10:	4603      	mov	r3, r0
 8001e12:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e14:	7b7b      	ldrb	r3, [r7, #13]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <poll_i2c_sensor+0x84>)
 8001e1c:	f014 fd94 	bl	8016948 <puts>
 8001e20:	e008      	b.n	8001e34 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e22:	7a3b      	ldrb	r3, [r7, #8]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2c:	7a7a      	ldrb	r2, [r7, #9]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	10db      	asrs	r3, r3, #3
 8001e32:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	24000380 	.word	0x24000380
 8001e44:	0801730c 	.word	0x0801730c
 8001e48:	0801731c 	.word	0x0801731c

08001e4c <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e54:	f107 010c 	add.w	r1, r7, #12
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <receive_pmt_spi+0x44>)
 8001e5e:	f00c f883 	bl	800df68 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e66:	7b7b      	ldrb	r3, [r7, #13]
 8001e68:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <receive_pmt_spi+0x44>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <receive_pmt_spi+0x44>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e78:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7bba      	ldrb	r2, [r7, #14]
 8001e7e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	701a      	strb	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	240003f8 	.word	0x240003f8

08001e94 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e9c:	f107 010c 	add.w	r1, r7, #12
 8001ea0:	2364      	movs	r3, #100	; 0x64
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <receive_erpa_spi+0x44>)
 8001ea6:	f00c f85f 	bl	800df68 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001eae:	7b7b      	ldrb	r3, [r7, #13]
 8001eb0:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <receive_erpa_spi+0x44>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <receive_erpa_spi+0x44>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7bba      	ldrb	r2, [r7, #14]
 8001ec6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	701a      	strb	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	24000480 	.word	0x24000480

08001edc <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <receive_erpa_adc+0x30>)
 8001ee6:	885b      	ldrh	r3, [r3, #2]
 8001ee8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <receive_erpa_adc+0x30>)
 8001eec:	895b      	ldrh	r3, [r3, #10]
 8001eee:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	89fa      	ldrh	r2, [r7, #14]
 8001ef4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	89ba      	ldrh	r2, [r7, #12]
 8001efc:	801a      	strh	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	24000ca0 	.word	0x24000ca0

08001f10 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f18:	2390      	movs	r3, #144	; 0x90
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff52 	bl	8001dc4 <poll_i2c_sensor>
 8001f20:	4603      	mov	r3, r0
 8001f22:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f24:	2394      	movs	r3, #148	; 0x94
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff4c 	bl	8001dc4 <poll_i2c_sensor>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f30:	2392      	movs	r3, #146	; 0x92
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff46 	bl	8001dc4 <poll_i2c_sensor>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f3c:	2396      	movs	r3, #150	; 0x96
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff40 	bl	8001dc4 <poll_i2c_sensor>
 8001f44:	4603      	mov	r3, r0
 8001f46:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	89fa      	ldrh	r2, [r7, #14]
 8001f4c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3302      	adds	r3, #2
 8001f52:	89ba      	ldrh	r2, [r7, #12]
 8001f54:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	897a      	ldrh	r2, [r7, #10]
 8001f5c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3306      	adds	r3, #6
 8001f62:	893a      	ldrh	r2, [r7, #8]
 8001f64:	801a      	strh	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <receive_hk_adc1+0x90>)
 8001f7a:	8a9b      	ldrh	r3, [r3, #20]
 8001f7c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <receive_hk_adc1+0x90>)
 8001f80:	8a1b      	ldrh	r3, [r3, #16]
 8001f82:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <receive_hk_adc1+0x90>)
 8001f86:	899b      	ldrh	r3, [r3, #12]
 8001f88:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <receive_hk_adc1+0x90>)
 8001f8c:	8a5b      	ldrh	r3, [r3, #18]
 8001f8e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <receive_hk_adc1+0x90>)
 8001f92:	889b      	ldrh	r3, [r3, #4]
 8001f94:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <receive_hk_adc1+0x90>)
 8001f98:	88db      	ldrh	r3, [r3, #6]
 8001f9a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <receive_hk_adc1+0x90>)
 8001f9e:	89db      	ldrh	r3, [r3, #14]
 8001fa0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <receive_hk_adc1+0x90>)
 8001fa4:	891b      	ldrh	r3, [r3, #8]
 8001fa6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <receive_hk_adc1+0x90>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8bfa      	ldrh	r2, [r7, #30]
 8001fb2:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	8bba      	ldrh	r2, [r7, #28]
 8001fba:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	8b7a      	ldrh	r2, [r7, #26]
 8001fc2:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	8b3a      	ldrh	r2, [r7, #24]
 8001fca:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	8afa      	ldrh	r2, [r7, #22]
 8001fd2:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	330a      	adds	r3, #10
 8001fd8:	8aba      	ldrh	r2, [r7, #20]
 8001fda:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	8a7a      	ldrh	r2, [r7, #18]
 8001fe2:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	330e      	adds	r3, #14
 8001fe8:	8a3a      	ldrh	r2, [r7, #16]
 8001fea:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3310      	adds	r3, #16
 8001ff0:	89fa      	ldrh	r2, [r7, #14]
 8001ff2:	801a      	strh	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	3724      	adds	r7, #36	; 0x24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	24000ca0 	.word	0x24000ca0

08002004 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <receive_hk_adc3+0x4c>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <receive_hk_adc3+0x4c>)
 8002014:	885b      	ldrh	r3, [r3, #2]
 8002016:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <receive_hk_adc3+0x4c>)
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <receive_hk_adc3+0x4c>)
 8002020:	88db      	ldrh	r3, [r3, #6]
 8002022:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	89fa      	ldrh	r2, [r7, #14]
 8002028:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	89ba      	ldrh	r2, [r7, #12]
 8002030:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	897a      	ldrh	r2, [r7, #10]
 8002038:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3306      	adds	r3, #6
 800203e:	893a      	ldrh	r2, [r7, #8]
 8002040:	801a      	strh	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	24000cc0 	.word	0x24000cc0

08002054 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_UART_TxCpltCallback+0x1c>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	24000000 	.word	0x24000000

08002074 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4618      	mov	r0, r3
 8002086:	f014 faeb 	bl	8016660 <malloc>
 800208a:	4603      	mov	r3, r0
 800208c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f014 faf3 	bl	8016680 <memcpy>
	packet.size = size;
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b090      	sub	sp, #64	; 0x40
 80020bc:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 80020be:	230a      	movs	r3, #10
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 80020c2:	f107 011c 	add.w	r1, r7, #28
 80020c6:	2364      	movs	r3, #100	; 0x64
 80020c8:	2209      	movs	r2, #9
 80020ca:	4840      	ldr	r0, [pc, #256]	; (80021cc <handshake+0x114>)
 80020cc:	f00d ff60 	bl	800ff90 <HAL_UART_Receive>
		key = rx_buffer[0];
 80020d0:	7f3b      	ldrb	r3, [r7, #28]
 80020d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 80020d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020da:	2bff      	cmp	r3, #255	; 0xff
 80020dc:	d1f1      	bne.n	80020c2 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 80020de:	7f7b      	ldrb	r3, [r7, #29]
 80020e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 80020e4:	7fbb      	ldrb	r3, [r7, #30]
 80020e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
 80020ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 80020f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 80020f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8002100:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002104:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 8002108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b21a      	sxth	r2, r3
 8002110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 800211c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002120:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8002122:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002126:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8002128:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800212c:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 800212e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002132:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8002134:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002138:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 800213a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800213e:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 8002140:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002142:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	2200      	movs	r2, #0
 800214a:	4619      	mov	r1, r3
 800214c:	4820      	ldr	r0, [pc, #128]	; (80021d0 <handshake+0x118>)
 800214e:	f00b fc41 	bl	800d9d4 <HAL_RTC_SetDate>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002158:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <handshake+0xac>
		Error_Handler();
 8002160:	f000 fe3c 	bl	8002ddc <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	4819      	ldr	r0, [pc, #100]	; (80021d0 <handshake+0x118>)
 800216c:	f00b fb38 	bl	800d7e0 <HAL_RTC_SetTime>
 8002170:	4603      	mov	r3, r0
 8002172:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002176:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <handshake+0xca>
		Error_Handler();
 800217e:	f000 fe2d 	bl	8002ddc <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002182:	23fa      	movs	r3, #250	; 0xfa
 8002184:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002188:	2302      	movs	r3, #2
 800218a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a4:	e009      	b.n	80021ba <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 80021a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021aa:	2364      	movs	r3, #100	; 0x64
 80021ac:	2205      	movs	r2, #5
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <handshake+0x114>)
 80021b0:	f00d fe60 	bl	800fe74 <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	3301      	adds	r3, #1
 80021b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf1      	blt.n	80021a6 <handshake+0xee>
	}

	return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3740      	adds	r7, #64	; 0x40
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	24000638 	.word	0x24000638
 80021d0:	240003d4 	.word	0x240003d4

080021d4 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80021d8:	2100      	movs	r1, #0
 80021da:	481b      	ldr	r0, [pc, #108]	; (8002248 <system_setup+0x74>)
 80021dc:	f00c fac0 	bl	800e760 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80021ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80021ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f2:	4816      	ldr	r0, [pc, #88]	; (800224c <system_setup+0x78>)
 80021f4:	f003 f884 	bl	8005300 <HAL_ADCEx_Calibration_Start>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80021fe:	f000 fded 	bl	8002ddc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002202:	220b      	movs	r2, #11
 8002204:	4912      	ldr	r1, [pc, #72]	; (8002250 <system_setup+0x7c>)
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <system_setup+0x78>)
 8002208:	f002 f958 	bl	80044bc <HAL_ADC_Start_DMA>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002212:	f000 fde3 	bl	8002ddc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002216:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800221a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <system_setup+0x80>)
 8002220:	f003 f86e 	bl	8005300 <HAL_ADCEx_Calibration_Start>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800222a:	f000 fdd7 	bl	8002ddc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800222e:	2204      	movs	r2, #4
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <system_setup+0x84>)
 8002232:	4808      	ldr	r0, [pc, #32]	; (8002254 <system_setup+0x80>)
 8002234:	f002 f942 	bl	80044bc <HAL_ADC_Start_DMA>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800223e:	f000 fdcd 	bl	8002ddc <Error_Handler>
	}
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	240005ec 	.word	0x240005ec
 800224c:	2400013c 	.word	0x2400013c
 8002250:	24000ca0 	.word	0x24000ca0
 8002254:	240001a0 	.word	0x240001a0
 8002258:	24000cc0 	.word	0x24000cc0

0800225c <getUptime>:

void getUptime(uint8_t *buffer) {
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
	uint32_t ms = UptimeMillis;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <getUptime+0x88>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <getUptime+0x8c>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	613b      	str	r3, [r7, #16]

	// Did UptimeMillis rollover while reading SysTick->VAL?
	if (ms != UptimeMillis) {
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <getUptime+0x88>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	429a      	cmp	r2, r3
 800227c:	d005      	beq.n	800228a <getUptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = UptimeMillis;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <getUptime+0x88>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <getUptime+0x8c>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002290:	fb03 f202 	mul.w	r2, r3, r2
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <getUptime+0x8c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	4914      	ldr	r1, [pc, #80]	; (80022ec <getUptime+0x90>)
 800229c:	fba1 1303 	umull	r1, r3, r1, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0e1b      	lsrs	r3, r3, #24
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0c1a      	lsrs	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3301      	adds	r3, #1
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0a1a      	lsrs	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3302      	adds	r3, #2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3303      	adds	r3, #3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	24000c38 	.word	0x24000c38
 80022e8:	e000e010 	.word	0xe000e010
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	4821      	ldr	r0, [pc, #132]	; (8002388 <getTimestamp+0x98>)
 8002302:	f00b fb0b 	bl	800d91c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2200      	movs	r2, #0
 800230c:	4619      	mov	r1, r3
 800230e:	481e      	ldr	r0, [pc, #120]	; (8002388 <getTimestamp+0x98>)
 8002310:	f00b fbe8 	bl	800dae4 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2264      	movs	r2, #100	; 0x64
 8002318:	fb03 f202 	mul.w	r2, r3, r2
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <getTimestamp+0x9c>)
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3301      	adds	r3, #1
 800232c:	7b7a      	ldrb	r2, [r7, #13]
 800232e:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3302      	adds	r3, #2
 8002334:	7bba      	ldrb	r2, [r7, #14]
 8002336:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3303      	adds	r3, #3
 800233c:	7c3a      	ldrb	r2, [r7, #16]
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	7c7a      	ldrb	r2, [r7, #17]
 8002346:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3305      	adds	r3, #5
 800234c:	7cba      	ldrb	r2, [r7, #18]
 800234e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3306      	adds	r3, #6
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	0c1a      	lsrs	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3307      	adds	r3, #7
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	0a1a      	lsrs	r2, r3, #8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3308      	adds	r3, #8
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3309      	adds	r3, #9
 8002378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	240003d4 	.word	0x240003d4
 800238c:	000f4240 	.word	0x000f4240

08002390 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002396:	bf00      	nop
 8002398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239c:	4836      	ldr	r0, [pc, #216]	; (8002478 <sample_pmt+0xe8>)
 800239e:	f006 fdc3 	bl	8008f28 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f7      	bne.n	8002398 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80023a8:	200a      	movs	r0, #10
 80023aa:	f014 f959 	bl	8016660 <malloc>
 80023ae:	4603      	mov	r3, r0
 80023b0:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80023b2:	2002      	movs	r0, #2
 80023b4:	f014 f954 	bl	8016660 <malloc>
 80023b8:	4603      	mov	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80023bc:	2004      	movs	r0, #4
 80023be:	f014 f94f 	bl	8016660 <malloc>
 80023c2:	4603      	mov	r3, r0
 80023c4:	60fb      	str	r3, [r7, #12]

	getUptime(uptime);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff ff48 	bl	800225c <getUptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80023cc:	6938      	ldr	r0, [r7, #16]
 80023ce:	f7ff fd3d 	bl	8001e4c <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	22bb      	movs	r2, #187	; 0xbb
 80023d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	22bb      	movs	r2, #187	; 0xbb
 80023de:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <sample_pmt+0xec>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3302      	adds	r3, #2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <sample_pmt+0xec>)
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3303      	adds	r3, #3
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3304      	adds	r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	7812      	ldrb	r2, [r2, #0]
 8002404:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3305      	adds	r3, #5
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	7852      	ldrb	r2, [r2, #1]
 800240e:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3306      	adds	r3, #6
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3307      	adds	r3, #7
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	7852      	ldrb	r2, [r2, #1]
 8002422:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3308      	adds	r3, #8
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	7892      	ldrb	r2, [r2, #2]
 800242c:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3309      	adds	r3, #9
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	78d2      	ldrb	r2, [r2, #3]
 8002436:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	220a      	movs	r2, #10
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe18 	bl	8002074 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <sample_pmt+0xf0>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	1d39      	adds	r1, r7, #4
 800244a:	2300      	movs	r3, #0
 800244c:	2200      	movs	r2, #0
 800244e:	f010 feab 	bl	80131a8 <osMessageQueuePut>
	available_msgs++;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <sample_pmt+0xf4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <sample_pmt+0xf4>)
 800245a:	6013      	str	r3, [r2, #0]
	free(buffer);
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f014 f907 	bl	8016670 <free>
	free(pmt_spi);
 8002462:	6938      	ldr	r0, [r7, #16]
 8002464:	f014 f904 	bl	8016670 <free>
	free(uptime);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f014 f901 	bl	8016670 <free>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	58020000 	.word	0x58020000
 800247c:	24000c4c 	.word	0x24000c4c
 8002480:	24000c3c 	.word	0x24000c3c
 8002484:	24000c48 	.word	0x24000c48

08002488 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800248e:	bf00      	nop
 8002490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002494:	484a      	ldr	r0, [pc, #296]	; (80025c0 <sample_erpa+0x138>)
 8002496:	f006 fd47 	bl	8008f28 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f7      	bne.n	8002490 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80024a0:	200e      	movs	r0, #14
 80024a2:	f014 f8dd 	bl	8016660 <malloc>
 80024a6:	4603      	mov	r3, r0
 80024a8:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80024aa:	2002      	movs	r0, #2
 80024ac:	f014 f8d8 	bl	8016660 <malloc>
 80024b0:	4603      	mov	r3, r0
 80024b2:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 80024b4:	2004      	movs	r0, #4
 80024b6:	f014 f8d3 	bl	8016660 <malloc>
 80024ba:	4603      	mov	r3, r0
 80024bc:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80024be:	2004      	movs	r0, #4
 80024c0:	f014 f8ce 	bl	8016660 <malloc>
 80024c4:	4603      	mov	r3, r0
 80024c6:	60bb      	str	r3, [r7, #8]

	getUptime(uptime);
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f7ff fec7 	bl	800225c <getUptime>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80024ce:	6938      	ldr	r0, [r7, #16]
 80024d0:	f7ff fce0 	bl	8001e94 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fd01 	bl	8001edc <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	22aa      	movs	r2, #170	; 0xaa
 80024de:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	22aa      	movs	r2, #170	; 0xaa
 80024e6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <sample_erpa+0x13c>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3302      	adds	r3, #2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <sample_erpa+0x13c>)
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3303      	adds	r3, #3
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	b29a      	uxth	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3304      	adds	r3, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	881a      	ldrh	r2, [r3, #0]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3305      	adds	r3, #5
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3302      	adds	r3, #2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	b29a      	uxth	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3306      	adds	r3, #6
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3302      	adds	r3, #2
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3307      	adds	r3, #7
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3308      	adds	r3, #8
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3309      	adds	r3, #9
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	7852      	ldrb	r2, [r2, #1]
 8002552:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	330a      	adds	r3, #10
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	330b      	adds	r3, #11
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	7852      	ldrb	r2, [r2, #1]
 8002566:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	330c      	adds	r3, #12
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	7892      	ldrb	r2, [r2, #2]
 8002570:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	330d      	adds	r3, #13
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	78d2      	ldrb	r2, [r2, #3]
 800257a:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 800257c:	463b      	mov	r3, r7
 800257e:	220e      	movs	r2, #14
 8002580:	6979      	ldr	r1, [r7, #20]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fd76 	bl	8002074 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <sample_erpa+0x140>)
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	4639      	mov	r1, r7
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	f010 fe09 	bl	80131a8 <osMessageQueuePut>
	available_msgs++;
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <sample_erpa+0x144>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <sample_erpa+0x144>)
 800259e:	6013      	str	r3, [r2, #0]
	free(buffer);
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	f014 f865 	bl	8016670 <free>
	free(erpa_spi);
 80025a6:	6938      	ldr	r0, [r7, #16]
 80025a8:	f014 f862 	bl	8016670 <free>
	free(erpa_adc);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f014 f85f 	bl	8016670 <free>
	free(uptime);
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	f014 f85c 	bl	8016670 <free>
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58020400 	.word	0x58020400
 80025c4:	24000c4e 	.word	0x24000c4e
 80025c8:	24000c3c 	.word	0x24000c3c
 80025cc:	24000c48 	.word	0x24000c48

080025d0 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80025d6:	2030      	movs	r0, #48	; 0x30
 80025d8:	f014 f842 	bl	8016660 <malloc>
 80025dc:	4603      	mov	r3, r0
 80025de:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80025e0:	2008      	movs	r0, #8
 80025e2:	f014 f83d 	bl	8016660 <malloc>
 80025e6:	4603      	mov	r3, r0
 80025e8:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80025ea:	200a      	movs	r0, #10
 80025ec:	f014 f838 	bl	8016660 <malloc>
 80025f0:	4603      	mov	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fe7b 	bl	80022f0 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <sample_hk+0x78>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002602:	db25      	blt.n	8002650 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002604:	6938      	ldr	r0, [r7, #16]
 8002606:	f7ff fc83 	bl	8001f10 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <sample_hk+0x7c>)
 8002614:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	3302      	adds	r3, #2
 800261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <sample_hk+0x7c>)
 8002622:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	3304      	adds	r3, #4
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <sample_hk+0x7c>)
 8002630:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	3306      	adds	r3, #6
 8002636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263a:	b29a      	uxth	r2, r3
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <sample_hk+0x7c>)
 800263e:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002640:	4b01      	ldr	r3, [pc, #4]	; (8002648 <sample_hk+0x78>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e01f      	b.n	8002688 <sample_hk+0xb8>
 8002648:	24000004 	.word	0x24000004
 800264c:	24000cc8 	.word	0x24000cc8
	} else {
		TEMPERATURE_COUNTER++;
 8002650:	4b9f      	ldr	r3, [pc, #636]	; (80028d0 <sample_hk+0x300>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	4a9e      	ldr	r2, [pc, #632]	; (80028d0 <sample_hk+0x300>)
 8002658:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800265a:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <sample_hk+0x304>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b21a      	sxth	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002664:	4b9b      	ldr	r3, [pc, #620]	; (80028d4 <sample_hk+0x304>)
 8002666:	885a      	ldrh	r2, [r3, #2]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	3302      	adds	r3, #2
 800266c:	b212      	sxth	r2, r2
 800266e:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002670:	4b98      	ldr	r3, [pc, #608]	; (80028d4 <sample_hk+0x304>)
 8002672:	889a      	ldrh	r2, [r3, #4]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	3304      	adds	r3, #4
 8002678:	b212      	sxth	r2, r2
 800267a:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 800267c:	4b95      	ldr	r3, [pc, #596]	; (80028d4 <sample_hk+0x304>)
 800267e:	88da      	ldrh	r2, [r3, #6]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	3306      	adds	r3, #6
 8002684:	b212      	sxth	r2, r2
 8002686:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	22cc      	movs	r2, #204	; 0xcc
 800268c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	22cc      	movs	r2, #204	; 0xcc
 8002694:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002696:	4b90      	ldr	r3, [pc, #576]	; (80028d8 <sample_hk+0x308>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3302      	adds	r3, #2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80026a6:	4b8c      	ldr	r3, [pc, #560]	; (80028d8 <sample_hk+0x308>)
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3303      	adds	r3, #3
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80026b2:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <sample_hk+0x30c>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3304      	adds	r3, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 80026c2:	4b86      	ldr	r3, [pc, #536]	; (80028dc <sample_hk+0x30c>)
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3305      	adds	r3, #5
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 80026ce:	4b84      	ldr	r3, [pc, #528]	; (80028e0 <sample_hk+0x310>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3306      	adds	r3, #6
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 80026de:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <sample_hk+0x310>)
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3307      	adds	r3, #7
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f0:	121a      	asrs	r2, r3, #8
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3308      	adds	r3, #8
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3309      	adds	r3, #9
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3302      	adds	r3, #2
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	121a      	asrs	r2, r3, #8
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	330a      	adds	r3, #10
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	3302      	adds	r3, #2
 800271e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	330b      	adds	r3, #11
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	3304      	adds	r3, #4
 800272e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002732:	121a      	asrs	r2, r3, #8
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	330c      	adds	r3, #12
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	3304      	adds	r3, #4
 8002740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	330d      	adds	r3, #13
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3306      	adds	r3, #6
 8002750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002754:	121a      	asrs	r2, r3, #8
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	330e      	adds	r3, #14
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	3306      	adds	r3, #6
 8002762:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	330f      	adds	r3, #15
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 800276e:	4b5d      	ldr	r3, [pc, #372]	; (80028e4 <sample_hk+0x314>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29a      	uxth	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3310      	adds	r3, #16
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 800277e:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <sample_hk+0x314>)
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3311      	adds	r3, #17
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <sample_hk+0x318>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	b29a      	uxth	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3312      	adds	r3, #18
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <sample_hk+0x318>)
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3313      	adds	r3, #19
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 80027a6:	4b51      	ldr	r3, [pc, #324]	; (80028ec <sample_hk+0x31c>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3314      	adds	r3, #20
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 80027b6:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <sample_hk+0x31c>)
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3315      	adds	r3, #21
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 80027c2:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <sample_hk+0x320>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3316      	adds	r3, #22
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <sample_hk+0x320>)
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3317      	adds	r3, #23
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 80027de:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <sample_hk+0x324>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3318      	adds	r3, #24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <sample_hk+0x324>)
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3319      	adds	r3, #25
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <sample_hk+0x328>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29a      	uxth	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	331a      	adds	r3, #26
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <sample_hk+0x328>)
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	331b      	adds	r3, #27
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <sample_hk+0x32c>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	b29a      	uxth	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	331c      	adds	r3, #28
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <sample_hk+0x32c>)
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	331d      	adds	r3, #29
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002832:	4b33      	ldr	r3, [pc, #204]	; (8002900 <sample_hk+0x330>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	331e      	adds	r3, #30
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <sample_hk+0x330>)
 8002844:	881a      	ldrh	r2, [r3, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	331f      	adds	r3, #31
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800284e:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <sample_hk+0x334>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29a      	uxth	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3320      	adds	r3, #32
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <sample_hk+0x334>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3321      	adds	r3, #33	; 0x21
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <sample_hk+0x338>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	b29a      	uxth	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3322      	adds	r3, #34	; 0x22
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <sample_hk+0x338>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3323      	adds	r3, #35	; 0x23
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <sample_hk+0x33c>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29a      	uxth	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3324      	adds	r3, #36	; 0x24
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <sample_hk+0x33c>)
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3325      	adds	r3, #37	; 0x25
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3326      	adds	r3, #38	; 0x26
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3327      	adds	r3, #39	; 0x27
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	7852      	ldrb	r2, [r2, #1]
 80028b4:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3328      	adds	r3, #40	; 0x28
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	7892      	ldrb	r2, [r2, #2]
 80028be:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3329      	adds	r3, #41	; 0x29
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	78d2      	ldrb	r2, [r2, #3]
 80028c8:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	332a      	adds	r3, #42	; 0x2a
 80028ce:	e01f      	b.n	8002910 <sample_hk+0x340>
 80028d0:	24000004 	.word	0x24000004
 80028d4:	24000cc8 	.word	0x24000cc8
 80028d8:	24000c50 	.word	0x24000c50
 80028dc:	24000c1c 	.word	0x24000c1c
 80028e0:	24000c1e 	.word	0x24000c1e
 80028e4:	24000c20 	.word	0x24000c20
 80028e8:	24000c22 	.word	0x24000c22
 80028ec:	24000c24 	.word	0x24000c24
 80028f0:	24000c26 	.word	0x24000c26
 80028f4:	24000c28 	.word	0x24000c28
 80028f8:	24000c2a 	.word	0x24000c2a
 80028fc:	24000c2c 	.word	0x24000c2c
 8002900:	24000c2e 	.word	0x24000c2e
 8002904:	24000c30 	.word	0x24000c30
 8002908:	24000c32 	.word	0x24000c32
 800290c:	24000c34 	.word	0x24000c34
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	7912      	ldrb	r2, [r2, #4]
 8002914:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	332b      	adds	r3, #43	; 0x2b
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	7952      	ldrb	r2, [r2, #5]
 800291e:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	332c      	adds	r3, #44	; 0x2c
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	7992      	ldrb	r2, [r2, #6]
 8002928:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	332d      	adds	r3, #45	; 0x2d
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	79d2      	ldrb	r2, [r2, #7]
 8002932:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	332e      	adds	r3, #46	; 0x2e
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	7a12      	ldrb	r2, [r2, #8]
 800293c:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	332f      	adds	r3, #47	; 0x2f
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	7a52      	ldrb	r2, [r2, #9]
 8002946:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2230      	movs	r2, #48	; 0x30
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb90 	bl	8002074 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <sample_hk+0x3b8>)
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	1d39      	adds	r1, r7, #4
 800295a:	2300      	movs	r3, #0
 800295c:	2200      	movs	r2, #0
 800295e:	f010 fc23 	bl	80131a8 <osMessageQueuePut>
	available_msgs++;
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <sample_hk+0x3bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <sample_hk+0x3bc>)
 800296a:	6013      	str	r3, [r2, #0]

	free(buffer);
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f013 fe7f 	bl	8016670 <free>
	free(hk_i2c);
 8002972:	6938      	ldr	r0, [r7, #16]
 8002974:	f013 fe7c 	bl	8016670 <free>
	free(timestamp);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f013 fe79 	bl	8016670 <free>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	24000c3c 	.word	0x24000c3c
 800298c:	24000c48 	.word	0x24000c48

08002990 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <PMT_init+0x38>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a0:	2200      	movs	r2, #0
 80029a2:	2101      	movs	r1, #1
 80029a4:	f010 fb27 	bl	8012ff6 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <PMT_init+0x3c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <PMT_init+0x30>
			sample_pmt();
 80029b0:	f7ff fcee 	bl	8002390 <sample_pmt>
			pmt_seq++;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <PMT_init+0x40>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <PMT_init+0x40>)
 80029be:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 80029c0:	f010 f9e6 	bl	8012d90 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 80029c4:	e7e8      	b.n	8002998 <PMT_init+0x8>
 80029c6:	bf00      	nop
 80029c8:	24000c58 	.word	0x24000c58
 80029cc:	24000c52 	.word	0x24000c52
 80029d0:	24000c4c 	.word	0x24000c4c

080029d4 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <ERPA_init+0x38>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e4:	2200      	movs	r2, #0
 80029e6:	2102      	movs	r1, #2
 80029e8:	f010 fb05 	bl	8012ff6 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <ERPA_init+0x3c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <ERPA_init+0x30>
			sample_erpa();
 80029f4:	f7ff fd48 	bl	8002488 <sample_erpa>
			erpa_seq++;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <ERPA_init+0x40>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <ERPA_init+0x40>)
 8002a02:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002a04:	f010 f9c4 	bl	8012d90 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002a08:	e7e8      	b.n	80029dc <ERPA_init+0x8>
 8002a0a:	bf00      	nop
 8002a0c:	24000c58 	.word	0x24000c58
 8002a10:	24000c53 	.word	0x24000c53
 8002a14:	24000c4e 	.word	0x24000c4e

08002a18 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HK_init+0x38>)
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	f010 fae3 	bl	8012ff6 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HK_init+0x3c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HK_init+0x30>
			sample_hk();
 8002a38:	f7ff fdca 	bl	80025d0 <sample_hk>
			hk_seq++;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HK_init+0x40>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HK_init+0x40>)
 8002a46:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002a48:	f010 f9a2 	bl	8012d90 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002a4c:	e7e8      	b.n	8002a20 <HK_init+0x8>
 8002a4e:	bf00      	nop
 8002a50:	24000c58 	.word	0x24000c58
 8002a54:	24000c54 	.word	0x24000c54
 8002a58:	24000c50 	.word	0x24000c50

08002a5c <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a64:	2201      	movs	r2, #1
 8002a66:	4914      	ldr	r1, [pc, #80]	; (8002ab8 <UART_RX_init+0x5c>)
 8002a68:	4814      	ldr	r0, [pc, #80]	; (8002abc <UART_RX_init+0x60>)
 8002a6a:	f00d fb59 	bl	8010120 <HAL_UART_Receive_IT>

	    int current_flag = osEventFlagsGet(event_flags);
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <UART_RX_init+0x64>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f010 fa9e 	bl	8012fb4 <osEventFlagsGet>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0316 	and.w	r3, r3, #22
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d014      	beq.n	8002ab0 <UART_RX_init+0x54>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <UART_RX_init+0x64>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2116      	movs	r1, #22
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f010 fa5f 	bl	8012f50 <osEventFlagsClear>
			vTaskSuspendAll();
 8002a92:	f012 f897 	bl	8014bc4 <vTaskSuspendAll>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f007 f883 	bl	8009ba4 <HAL_PWR_EnterSTOPMode>
			// When MCU is triggered to wake up, it resumes right here.
			// That's why it looks like we enter stop mode and then instantly
			// configure the clock and resume tasks, but in reality the MCU
			// just stops right here.

		    SystemClock_Config();
 8002a9e:	f7fe fad1 	bl	8001044 <SystemClock_Config>

		    HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <UART_RX_init+0x5c>)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <UART_RX_init+0x60>)
 8002aa8:	f00d fb3a 	bl	8010120 <HAL_UART_Receive_IT>

			xTaskResumeAll();
 8002aac:	f012 f898 	bl	8014be0 <xTaskResumeAll>
		}
		osDelay(5);
 8002ab0:	2005      	movs	r0, #5
 8002ab2:	f010 f9ae 	bl	8012e12 <osDelay>
	for (;;) {
 8002ab6:	e7d5      	b.n	8002a64 <UART_RX_init+0x8>
 8002ab8:	24000c5c 	.word	0x24000c5c
 8002abc:	24000638 	.word	0x24000638
 8002ac0:	24000c58 	.word	0x24000c58

08002ac4 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <GPIO_on_init+0x9c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f010 f97d 	bl	8012dd0 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <GPIO_on_init+0xa0>)
 8002ad8:	2104      	movs	r1, #4
 8002ada:	2201      	movs	r2, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f006 fa3b 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ae2:	2064      	movs	r0, #100	; 0x64
 8002ae4:	f010 f995 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <GPIO_on_init+0xa0>)
 8002aea:	2120      	movs	r1, #32
 8002aec:	2201      	movs	r2, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f006 fa32 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002af4:	2064      	movs	r0, #100	; 0x64
 8002af6:	f010 f98c 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <GPIO_on_init+0xa4>)
 8002afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b00:	2201      	movs	r2, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f006 fa28 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b08:	2064      	movs	r0, #100	; 0x64
 8002b0a:	f010 f982 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <GPIO_on_init+0xa4>)
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	2201      	movs	r2, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f006 fa1f 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	f010 f979 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <GPIO_on_init+0xa4>)
 8002b22:	2140      	movs	r1, #64	; 0x40
 8002b24:	2201      	movs	r2, #1
 8002b26:	4618      	mov	r0, r3
 8002b28:	f006 fa16 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b2c:	2064      	movs	r0, #100	; 0x64
 8002b2e:	f010 f970 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <GPIO_on_init+0xa4>)
 8002b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f006 fa0c 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b40:	2064      	movs	r0, #100	; 0x64
 8002b42:	f010 f966 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <GPIO_on_init+0xa4>)
 8002b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f006 fa02 	bl	8008f58 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <GPIO_on_init+0x9c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f010 f939 	bl	8012dd0 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002b5e:	e7ba      	b.n	8002ad6 <GPIO_on_init+0x12>
 8002b60:	24000754 	.word	0x24000754
 8002b64:	58020400 	.word	0x58020400
 8002b68:	58020800 	.word	0x58020800

08002b6c <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <GPIO_off_init+0x9c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f010 f929 	bl	8012dd0 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b7e:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <GPIO_off_init+0xa0>)
 8002b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b84:	2200      	movs	r2, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 f9e6 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b8c:	2064      	movs	r0, #100	; 0x64
 8002b8e:	f010 f940 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <GPIO_off_init+0xa0>)
 8002b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f006 f9dc 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ba0:	2064      	movs	r0, #100	; 0x64
 8002ba2:	f010 f936 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <GPIO_off_init+0xa0>)
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	2200      	movs	r2, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f006 f9d3 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bb2:	2064      	movs	r0, #100	; 0x64
 8002bb4:	f010 f92d 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <GPIO_off_init+0xa0>)
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 f9ca 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	f010 f924 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <GPIO_off_init+0xa0>)
 8002bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f006 f9c0 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	f010 f91a 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <GPIO_off_init+0xa4>)
 8002be0:	2120      	movs	r1, #32
 8002be2:	2200      	movs	r2, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f006 f9b7 	bl	8008f58 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bea:	2064      	movs	r0, #100	; 0x64
 8002bec:	f010 f911 	bl	8012e12 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <GPIO_off_init+0xa4>)
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 f9ae 	bl	8008f58 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002bfc:	4b02      	ldr	r3, [pc, #8]	; (8002c08 <GPIO_off_init+0x9c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f010 f8e5 	bl	8012dd0 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002c06:	e7ba      	b.n	8002b7e <GPIO_off_init+0x12>
 8002c08:	240009b4 	.word	0x240009b4
 8002c0c:	58020800 	.word	0x58020800
 8002c10:	58020400 	.word	0x58020400

08002c14 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <UART_TX_init+0xa4>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4923      	ldr	r1, [pc, #140]	; (8002cbc <UART_TX_init+0xa8>)
 8002c30:	f010 fb1a 	bl	8013268 <osMessageQueueGet>
 8002c34:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d120      	bne.n	8002c7e <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <UART_TX_init+0xa8>)
 8002c3e:	889b      	ldrh	r3, [r3, #4]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4a:	d218      	bcs.n	8002c7e <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <UART_TX_init+0xac>)
 8002c50:	4413      	add	r3, r2
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <UART_TX_init+0xa8>)
 8002c54:	6811      	ldr	r1, [r2, #0]
 8002c56:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <UART_TX_init+0xa8>)
 8002c58:	8892      	ldrh	r2, [r2, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f013 fd10 	bl	8016680 <memcpy>
					free(msg.array);
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <UART_TX_init+0xa8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f013 fd03 	bl	8016670 <free>
					total_size += msg.size;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <UART_TX_init+0xa8>)
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002c7c:	d203      	bcs.n	8002c86 <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0cf      	beq.n	8002c24 <UART_TX_init+0x10>
 8002c84:	e000      	b.n	8002c88 <UART_TX_init+0x74>
						break;
 8002c86:	bf00      	nop

		if (total_size > 0) {
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <UART_TX_init+0xac>)
 8002c96:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <UART_TX_init+0xb0>)
 8002c98:	f00d fa8e 	bl	80101b8 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002c9c:	e001      	b.n	8002ca2 <UART_TX_init+0x8e>
				osThreadYield();
 8002c9e:	f010 f877 	bl	8012d90 <osThreadYield>
			while (tx_flag == 0) {
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <UART_TX_init+0xb4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f9      	beq.n	8002c9e <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <UART_TX_init+0xb4>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002cb0:	f010 f86e 	bl	8012d90 <osThreadYield>
		total_size = 0;
 8002cb4:	e7b4      	b.n	8002c20 <UART_TX_init+0xc>
 8002cb6:	bf00      	nop
 8002cb8:	24000c3c 	.word	0x24000c3c
 8002cbc:	24000c40 	.word	0x24000c40
 8002cc0:	24000cd0 	.word	0x24000cd0
 8002cc4:	24000638 	.word	0x24000638
 8002cc8:	24000000 	.word	0x24000000

08002ccc <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
		osThreadExit();
#endif
	//osThreadExit(); // REMOVE

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <Voltage_Monitor_init+0xb4>)
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2108      	movs	r1, #8
 8002ce0:	f010 f989 	bl	8012ff6 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002ce4:	2012      	movs	r0, #18
 8002ce6:	f013 fcbb 	bl	8016660 <malloc>
 8002cea:	4603      	mov	r3, r0
 8002cec:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002cee:	2008      	movs	r0, #8
 8002cf0:	f013 fcb6 	bl	8016660 <malloc>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff f939 	bl	8001f70 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f7ff f980 	bl	8002004 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	885a      	ldrh	r2, [r3, #2]
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <Voltage_Monitor_init+0xb8>)
 8002d0a:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <Voltage_Monitor_init+0xbc>)
 8002d12:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <Voltage_Monitor_init+0xc0>)
 8002d1a:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	885a      	ldrh	r2, [r3, #2]
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <Voltage_Monitor_init+0xc4>)
 8002d22:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	889a      	ldrh	r2, [r3, #4]
 8002d28:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <Voltage_Monitor_init+0xc8>)
 8002d2a:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	88da      	ldrh	r2, [r3, #6]
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <Voltage_Monitor_init+0xcc>)
 8002d32:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	899a      	ldrh	r2, [r3, #12]
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <Voltage_Monitor_init+0xd0>)
 8002d3a:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88da      	ldrh	r2, [r3, #6]
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <Voltage_Monitor_init+0xd4>)
 8002d42:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	889a      	ldrh	r2, [r3, #4]
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <Voltage_Monitor_init+0xd8>)
 8002d4a:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	89da      	ldrh	r2, [r3, #14]
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <Voltage_Monitor_init+0xdc>)
 8002d52:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8a1a      	ldrh	r2, [r3, #16]
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <Voltage_Monitor_init+0xe0>)
 8002d5a:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	891a      	ldrh	r2, [r3, #8]
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <Voltage_Monitor_init+0xe4>)
 8002d62:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	895a      	ldrh	r2, [r3, #10]
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <Voltage_Monitor_init+0xe8>)
 8002d6a:	801a      	strh	r2, [r3, #0]
//
//		if (!inRange(_n800v, 3018, 3336)) {
//			error_protocol(RAIL_n800v);
//		}

		free(hk_adc1);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f013 fc7f 	bl	8016670 <free>
		free(hk_adc3);
 8002d72:	68b8      	ldr	r0, [r7, #8]
 8002d74:	f013 fc7c 	bl	8016670 <free>

		osThreadYield();
 8002d78:	f010 f80a 	bl	8012d90 <osThreadYield>
	for (;;) {
 8002d7c:	e7aa      	b.n	8002cd4 <Voltage_Monitor_init+0x8>
 8002d7e:	bf00      	nop
 8002d80:	24000c58 	.word	0x24000c58
 8002d84:	24000c1c 	.word	0x24000c1c
 8002d88:	24000c1e 	.word	0x24000c1e
 8002d8c:	24000c20 	.word	0x24000c20
 8002d90:	24000c22 	.word	0x24000c22
 8002d94:	24000c24 	.word	0x24000c24
 8002d98:	24000c26 	.word	0x24000c26
 8002d9c:	24000c28 	.word	0x24000c28
 8002da0:	24000c2a 	.word	0x24000c2a
 8002da4:	24000c2c 	.word	0x24000c2c
 8002da8:	24000c2e 	.word	0x24000c2e
 8002dac:	24000c30 	.word	0x24000c30
 8002db0:	24000c32 	.word	0x24000c32
 8002db4:	24000c34 	.word	0x24000c34

08002db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dca:	f000 ff85 	bl	8003cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40001000 	.word	0x40001000

08002ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de0:	b672      	cpsid	i
}
 8002de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002de4:	e7fe      	b.n	8002de4 <Error_Handler+0x8>
	...

08002de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_MspInit+0x38>)
 8002df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <HAL_MspInit+0x38>)
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_MspInit+0x38>)
 8002e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f06f 0001 	mvn.w	r0, #1
 8002e14:	f002 fc6e 	bl	80056f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024400 	.word	0x58024400

08002e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a7b      	ldr	r2, [pc, #492]	; (8003030 <HAL_ADC_MspInit+0x20c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f040 8091 	bne.w	8002f6a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e48:	4b7a      	ldr	r3, [pc, #488]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e4e:	4a79      	ldr	r2, [pc, #484]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e58:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6c:	4a71      	ldr	r2, [pc, #452]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e76:	4b6f      	ldr	r3, [pc, #444]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b6b      	ldr	r3, [pc, #428]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8a:	4a6a      	ldr	r2, [pc, #424]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e94:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	4b64      	ldr	r3, [pc, #400]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea8:	4a62      	ldr	r2, [pc, #392]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb2:	4b60      	ldr	r3, [pc, #384]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002ec0:	2333      	movs	r3, #51	; 0x33
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4859      	ldr	r0, [pc, #356]	; (8003038 <HAL_ADC_MspInit+0x214>)
 8002ed4:	f005 fe78 	bl	8008bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002ed8:	23ce      	movs	r3, #206	; 0xce
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002edc:	2303      	movs	r3, #3
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4854      	ldr	r0, [pc, #336]	; (800303c <HAL_ADC_MspInit+0x218>)
 8002eec:	f005 fe6c 	bl	8008bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	484f      	ldr	r0, [pc, #316]	; (8003040 <HAL_ADC_MspInit+0x21c>)
 8002f04:	f005 fe60 	bl	8008bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002f08:	4b4e      	ldr	r3, [pc, #312]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f0a:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_ADC_MspInit+0x224>)
 8002f0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f0e:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f10:	2209      	movs	r2, #9
 8002f12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f20:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f30:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f46:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f4c:	483d      	ldr	r0, [pc, #244]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f4e:	f002 ffff 	bl	8005f50 <HAL_DMA_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002f58:	f7ff ff40 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a39      	ldr	r2, [pc, #228]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f60:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f62:	4a38      	ldr	r2, [pc, #224]	; (8003044 <HAL_ADC_MspInit+0x220>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f68:	e05e      	b.n	8003028 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a37      	ldr	r2, [pc, #220]	; (800304c <HAL_ADC_MspInit+0x228>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d159      	bne.n	8003028 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_ADC_MspInit+0x210>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002fb0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002fb4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002fb8:	f000 feba 	bl	8003d30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002fbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002fc0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002fc4:	f000 feb4 	bl	8003d30 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002fca:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_ADC_MspInit+0x230>)
 8002fcc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002fd0:	2273      	movs	r2, #115	; 0x73
 8002fd2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fe6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fee:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8002ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ffe:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8003002:	2200      	movs	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800300c:	4810      	ldr	r0, [pc, #64]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 800300e:	f002 ff9f 	bl	8005f50 <HAL_DMA_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003018:	f7ff fee0 	bl	8002ddc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8003020:	64da      	str	r2, [r3, #76]	; 0x4c
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <HAL_ADC_MspInit+0x22c>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003028:	bf00      	nop
 800302a:	3738      	adds	r7, #56	; 0x38
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40022000 	.word	0x40022000
 8003034:	58024400 	.word	0x58024400
 8003038:	58020800 	.word	0x58020800
 800303c:	58020000 	.word	0x58020000
 8003040:	58020400 	.word	0x58020400
 8003044:	24000204 	.word	0x24000204
 8003048:	40020010 	.word	0x40020010
 800304c:	58026000 	.word	0x58026000
 8003050:	2400027c 	.word	0x2400027c
 8003054:	40020028 	.word	0x40020028

08003058 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a34      	ldr	r2, [pc, #208]	; (8003148 <HAL_DAC_MspInit+0xf0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d161      	bne.n	800313e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_DAC_MspInit+0xf4>)
 800307c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003080:	4a32      	ldr	r2, [pc, #200]	; (800314c <HAL_DAC_MspInit+0xf4>)
 8003082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800308a:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_DAC_MspInit+0xf4>)
 800308c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_DAC_MspInit+0xf4>)
 800309a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309e:	4a2b      	ldr	r2, [pc, #172]	; (800314c <HAL_DAC_MspInit+0xf4>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_DAC_MspInit+0xf4>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030b6:	2310      	movs	r3, #16
 80030b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ba:	2303      	movs	r3, #3
 80030bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4619      	mov	r1, r3
 80030c8:	4821      	ldr	r0, [pc, #132]	; (8003150 <HAL_DAC_MspInit+0xf8>)
 80030ca:	f005 fd7d 	bl	8008bc8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_DAC_MspInit+0x100>)
 80030d2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030d6:	2243      	movs	r2, #67	; 0x43
 80030d8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030dc:	2240      	movs	r2, #64	; 0x40
 80030de:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030f4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 80030f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030fc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 8003100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003104:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 8003108:	2200      	movs	r2, #0
 800310a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 800310e:	2200      	movs	r2, #0
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003112:	4810      	ldr	r0, [pc, #64]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 8003114:	f002 ff1c 	bl	8005f50 <HAL_DMA_Init>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800311e:	f7ff fe5d 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_DAC_MspInit+0xfc>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2105      	movs	r1, #5
 8003132:	2036      	movs	r0, #54	; 0x36
 8003134:	f002 fade 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003138:	2036      	movs	r0, #54	; 0x36
 800313a:	f002 faf5 	bl	8005728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40007400 	.word	0x40007400
 800314c:	58024400 	.word	0x58024400
 8003150:	58020000 	.word	0x58020000
 8003154:	24000308 	.word	0x24000308
 8003158:	40020088 	.word	0x40020088

0800315c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b0ba      	sub	sp, #232	; 0xe8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	22c0      	movs	r2, #192	; 0xc0
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f013 fa8d 	bl	801669c <memset>
  if(hi2c->Instance==I2C1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_I2C_MspInit+0xc8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d146      	bne.n	800321a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800318c:	f04f 0208 	mov.w	r2, #8
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800319e:	f107 0310 	add.w	r3, r7, #16
 80031a2:	4618      	mov	r0, r3
 80031a4:	f007 fd9c 	bl	800ace0 <HAL_RCCEx_PeriphCLKConfig>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80031ae:	f7ff fe15 	bl	8002ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_I2C_MspInit+0xcc>)
 80031b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b8:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_I2C_MspInit+0xcc>)
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_I2C_MspInit+0xcc>)
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d8:	2312      	movs	r3, #18
 80031da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ea:	2304      	movs	r3, #4
 80031ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031f4:	4619      	mov	r1, r3
 80031f6:	480d      	ldr	r0, [pc, #52]	; (800322c <HAL_I2C_MspInit+0xd0>)
 80031f8:	f005 fce6 	bl	8008bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_I2C_MspInit+0xcc>)
 80031fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_I2C_MspInit+0xcc>)
 8003204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003208:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_I2C_MspInit+0xcc>)
 800320e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800321a:	bf00      	nop
 800321c:	37e8      	adds	r7, #232	; 0xe8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40005400 	.word	0x40005400
 8003228:	58024400 	.word	0x58024400
 800322c:	58020400 	.word	0x58020400

08003230 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b0b2      	sub	sp, #200	; 0xc8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	22c0      	movs	r2, #192	; 0xc0
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f013 fa2b 	bl	801669c <memset>
  if(hrtc->Instance==RTC)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_RTC_MspInit+0x5c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d118      	bne.n	8003282 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003250:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RTC_MspInit+0x60>)
 800325e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003262:	f107 0308 	add.w	r3, r7, #8
 8003266:	4618      	mov	r0, r3
 8003268:	f007 fd3a 	bl	800ace0 <HAL_RCCEx_PeriphCLKConfig>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003272:	f7ff fdb3 	bl	8002ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RTC_MspInit+0x64>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a06      	ldr	r2, [pc, #24]	; (8003294 <HAL_RTC_MspInit+0x64>)
 800327c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003282:	bf00      	nop
 8003284:	37c8      	adds	r7, #200	; 0xc8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	58004000 	.word	0x58004000
 8003290:	00019300 	.word	0x00019300
 8003294:	58024400 	.word	0x58024400

08003298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b0bc      	sub	sp, #240	; 0xf0
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b0:	f107 0318 	add.w	r3, r7, #24
 80032b4:	22c0      	movs	r2, #192	; 0xc0
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f013 f9ef 	bl	801669c <memset>
  if(hspi->Instance==SPI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4c      	ldr	r2, [pc, #304]	; (80033f4 <HAL_SPI_MspInit+0x15c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d145      	bne.n	8003354 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d8:	f107 0318 	add.w	r3, r7, #24
 80032dc:	4618      	mov	r0, r3
 80032de:	f007 fcff 	bl	800ace0 <HAL_RCCEx_PeriphCLKConfig>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80032e8:	f7ff fd78 	bl	8002ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ec:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032f2:	4a41      	ldr	r2, [pc, #260]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003310:	4a39      	ldr	r2, [pc, #228]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003328:	2318      	movs	r3, #24
 800332a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003340:	2305      	movs	r3, #5
 8003342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003346:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800334a:	4619      	mov	r1, r3
 800334c:	482b      	ldr	r0, [pc, #172]	; (80033fc <HAL_SPI_MspInit+0x164>)
 800334e:	f005 fc3b 	bl	8008bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003352:	e04a      	b.n	80033ea <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <HAL_SPI_MspInit+0x168>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d145      	bne.n	80033ea <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800335e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800336a:	2300      	movs	r3, #0
 800336c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	4618      	mov	r0, r3
 8003374:	f007 fcb4 	bl	800ace0 <HAL_RCCEx_PeriphCLKConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800337e:	f7ff fd2d 	bl	8002ddc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 800338a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a0:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80033be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80033c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033d8:	2305      	movs	r3, #5
 80033da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033e2:	4619      	mov	r1, r3
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <HAL_SPI_MspInit+0x164>)
 80033e6:	f005 fbef 	bl	8008bc8 <HAL_GPIO_Init>
}
 80033ea:	bf00      	nop
 80033ec:	37f0      	adds	r7, #240	; 0xf0
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40013000 	.word	0x40013000
 80033f8:	58024400 	.word	0x58024400
 80033fc:	58020400 	.word	0x58020400
 8003400:	40003800 	.word	0x40003800

08003404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a46      	ldr	r2, [pc, #280]	; (800352c <HAL_TIM_Base_MspInit+0x128>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d12f      	bne.n	8003476 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003416:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 8003418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800341c:	4a44      	ldr	r2, [pc, #272]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003426:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 8003428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2105      	movs	r1, #5
 8003438:	2018      	movs	r0, #24
 800343a:	f002 f95b 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800343e:	2018      	movs	r0, #24
 8003440:	f002 f972 	bl	8005728 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2105      	movs	r1, #5
 8003448:	2019      	movs	r0, #25
 800344a:	f002 f953 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800344e:	2019      	movs	r0, #25
 8003450:	f002 f96a 	bl	8005728 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2105      	movs	r1, #5
 8003458:	201a      	movs	r0, #26
 800345a:	f002 f94b 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800345e:	201a      	movs	r0, #26
 8003460:	f002 f962 	bl	8005728 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2105      	movs	r1, #5
 8003468:	201b      	movs	r0, #27
 800346a:	f002 f943 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800346e:	201b      	movs	r0, #27
 8003470:	f002 f95a 	bl	8005728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003474:	e055      	b.n	8003522 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d117      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003480:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 8003482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003486:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 8003492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2105      	movs	r1, #5
 80034a2:	201c      	movs	r0, #28
 80034a4:	f002 f926 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034a8:	201c      	movs	r0, #28
 80034aa:	f002 f93d 	bl	8005728 <HAL_NVIC_EnableIRQ>
}
 80034ae:	e038      	b.n	8003522 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_TIM_Base_MspInit+0x130>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d117      	bne.n	80034ea <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 80034bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 80034c2:	f043 0302 	orr.w	r3, r3, #2
 80034c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	201d      	movs	r0, #29
 80034de:	f002 f909 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034e2:	201d      	movs	r0, #29
 80034e4:	f002 f920 	bl	8005728 <HAL_NVIC_EnableIRQ>
}
 80034e8:	e01b      	b.n	8003522 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <HAL_TIM_Base_MspInit+0x134>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d116      	bne.n	8003522 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 80034f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fa:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_TIM_Base_MspInit+0x12c>)
 8003506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2105      	movs	r1, #5
 8003516:	201e      	movs	r0, #30
 8003518:	f002 f8ec 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800351c:	201e      	movs	r0, #30
 800351e:	f002 f903 	bl	8005728 <HAL_NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	58024400 	.word	0x58024400
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800

0800353c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_TIM_MspPostInit+0xb8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d120      	bne.n	80035a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_TIM_MspPostInit+0xbc>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003564:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <HAL_TIM_MspPostInit+0xbc>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_TIM_MspPostInit+0xbc>)
 8003570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800357c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800358e:	2301      	movs	r3, #1
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	4818      	ldr	r0, [pc, #96]	; (80035fc <HAL_TIM_MspPostInit+0xc0>)
 800359a:	f005 fb15 	bl	8008bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800359e:	e024      	b.n	80035ea <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d11f      	bne.n	80035ea <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_TIM_MspPostInit+0xbc>)
 80035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <HAL_TIM_MspPostInit+0xbc>)
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_TIM_MspPostInit+0xbc>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	4806      	ldr	r0, [pc, #24]	; (8003600 <HAL_TIM_MspPostInit+0xc4>)
 80035e6:	f005 faef 	bl	8008bc8 <HAL_GPIO_Init>
}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	58024400 	.word	0x58024400
 80035fc:	58020000 	.word	0x58020000
 8003600:	58020400 	.word	0x58020400

08003604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ba      	sub	sp, #232	; 0xe8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	22c0      	movs	r2, #192	; 0xc0
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f013 f839 	bl	801669c <memset>
  if(huart->Instance==USART1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a41      	ldr	r2, [pc, #260]	; (8003734 <HAL_UART_MspInit+0x130>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d17b      	bne.n	800372c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003634:	f04f 0201 	mov.w	r2, #1
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003640:	2318      	movs	r3, #24
 8003642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003646:	f107 0310 	add.w	r3, r7, #16
 800364a:	4618      	mov	r0, r3
 800364c:	f007 fb48 	bl	800ace0 <HAL_RCCEx_PeriphCLKConfig>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003656:	f7ff fbc1 	bl	8002ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800365a:	4b37      	ldr	r3, [pc, #220]	; (8003738 <HAL_UART_MspInit+0x134>)
 800365c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003660:	4a35      	ldr	r2, [pc, #212]	; (8003738 <HAL_UART_MspInit+0x134>)
 8003662:	f043 0310 	orr.w	r3, r3, #16
 8003666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_UART_MspInit+0x134>)
 800366c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003678:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <HAL_UART_MspInit+0x134>)
 800367a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367e:	4a2e      	ldr	r2, [pc, #184]	; (8003738 <HAL_UART_MspInit+0x134>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_UART_MspInit+0x134>)
 800368a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800369a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036b0:	2307      	movs	r3, #7
 80036b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036ba:	4619      	mov	r1, r3
 80036bc:	481f      	ldr	r0, [pc, #124]	; (800373c <HAL_UART_MspInit+0x138>)
 80036be:	f005 fa83 	bl	8008bc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_UART_MspInit+0x140>)
 80036c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036ca:	222a      	movs	r2, #42	; 0x2a
 80036cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_UART_MspInit+0x13c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003700:	480f      	ldr	r0, [pc, #60]	; (8003740 <HAL_UART_MspInit+0x13c>)
 8003702:	f002 fc25 	bl	8005f50 <HAL_DMA_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800370c:	f7ff fb66 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <HAL_UART_MspInit+0x13c>)
 8003714:	67da      	str	r2, [r3, #124]	; 0x7c
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_UART_MspInit+0x13c>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800371c:	2200      	movs	r2, #0
 800371e:	2105      	movs	r1, #5
 8003720:	2025      	movs	r0, #37	; 0x25
 8003722:	f001 ffe7 	bl	80056f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003726:	2025      	movs	r0, #37	; 0x25
 8003728:	f001 fffe 	bl	8005728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800372c:	bf00      	nop
 800372e:	37e8      	adds	r7, #232	; 0xe8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40011000 	.word	0x40011000
 8003738:	58024400 	.word	0x58024400
 800373c:	58020000 	.word	0x58020000
 8003740:	240006cc 	.word	0x240006cc
 8003744:	40020040 	.word	0x40020040

08003748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b090      	sub	sp, #64	; 0x40
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d827      	bhi.n	80037a6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003756:	2200      	movs	r2, #0
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	2036      	movs	r0, #54	; 0x36
 800375c:	f001 ffca 	bl	80056f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003760:	2036      	movs	r0, #54	; 0x36
 8003762:	f001 ffe1 	bl	8005728 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_InitTick+0xc4>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_InitTick+0xc8>)
 800376e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003772:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_InitTick+0xc8>)
 8003774:	f043 0310 	orr.w	r3, r3, #16
 8003778:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_InitTick+0xc8>)
 800377e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800378a:	f107 0210 	add.w	r2, r7, #16
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f007 fa61 	bl	800ac5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_InitTick+0x6a>
 80037a4:	e001      	b.n	80037aa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e02b      	b.n	8003802 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037aa:	f007 fa2b 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 80037ae:	63f8      	str	r0, [r7, #60]	; 0x3c
 80037b0:	e004      	b.n	80037bc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037b2:	f007 fa27 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 80037b6:	4603      	mov	r3, r0
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <HAL_InitTick+0xcc>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	0c9b      	lsrs	r3, r3, #18
 80037c6:	3b01      	subs	r3, #1
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_InitTick+0xd0>)
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <HAL_InitTick+0xd4>)
 80037ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_InitTick+0xd0>)
 80037d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037d8:	4a0f      	ldr	r2, [pc, #60]	; (8003818 <HAL_InitTick+0xd0>)
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_InitTick+0xd0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_InitTick+0xd0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037ea:	480b      	ldr	r0, [pc, #44]	; (8003818 <HAL_InitTick+0xd0>)
 80037ec:	f00a fee9 	bl	800e5c2 <HAL_TIM_Base_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037f6:	4808      	ldr	r0, [pc, #32]	; (8003818 <HAL_InitTick+0xd0>)
 80037f8:	f00a ff3a 	bl	800e670 <HAL_TIM_Base_Start_IT>
 80037fc:	4603      	mov	r3, r0
 80037fe:	e000      	b.n	8003802 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
}
 8003802:	4618      	mov	r0, r3
 8003804:	3740      	adds	r7, #64	; 0x40
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	24000098 	.word	0x24000098
 8003810:	58024400 	.word	0x58024400
 8003814:	431bde83 	.word	0x431bde83
 8003818:	240010b8 	.word	0x240010b8
 800381c:	40001000 	.word	0x40001000

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <MemManage_Handler+0x4>

08003832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <BusFault_Handler+0x4>

08003838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <UsageFault_Handler+0x4>

0800383e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <DMA1_Stream0_IRQHandler+0x10>)
 8003852:	f003 fea7 	bl	80075a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	24000204 	.word	0x24000204

08003860 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <DMA1_Stream1_IRQHandler+0x10>)
 8003866:	f003 fe9d 	bl	80075a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2400027c 	.word	0x2400027c

08003874 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <DMA1_Stream2_IRQHandler+0x10>)
 800387a:	f003 fe93 	bl	80075a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	240006cc 	.word	0x240006cc

08003888 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <DMA1_Stream5_IRQHandler+0x10>)
 800388e:	f003 fe89 	bl	80075a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	24000308 	.word	0x24000308

0800389c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <TIM1_BRK_IRQHandler+0x10>)
 80038a2:	f00b f9fc 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	24000508 	.word	0x24000508

080038b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <TIM1_UP_IRQHandler+0x10>)
 80038b6:	f00b f9f2 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	24000508 	.word	0x24000508

080038c4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80038ca:	f00b f9e8 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	24000508 	.word	0x24000508

080038d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <TIM1_CC_IRQHandler+0x10>)
 80038de:	f00b f9de 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	24000508 	.word	0x24000508

080038ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <TIM2_IRQHandler+0x10>)
 80038f2:	f00b f9d4 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	24000554 	.word	0x24000554

08003900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <TIM3_IRQHandler+0x10>)
 8003906:	f00b f9ca 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	240005a0 	.word	0x240005a0

08003914 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <TIM4_IRQHandler+0x10>)
 800391a:	f00b f9c0 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	240005ec 	.word	0x240005ec

08003928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <USART1_IRQHandler+0x10>)
 800392e:	f00c fcc3 	bl	80102b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	24000638 	.word	0x24000638

0800393c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <TIM6_DAC_IRQHandler+0x20>)
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800394a:	4804      	ldr	r0, [pc, #16]	; (800395c <TIM6_DAC_IRQHandler+0x20>)
 800394c:	f002 f881 	bl	8005a52 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <TIM6_DAC_IRQHandler+0x24>)
 8003952:	f00b f9a4 	bl	800ec9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	240002f4 	.word	0x240002f4
 8003960:	240010b8 	.word	0x240010b8

08003964 <ITM_SendChar>:
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <ITM_SendChar+0x48>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <ITM_SendChar+0x48>)
 8003974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <ITM_SendChar+0x4c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <ITM_SendChar+0x4c>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	bf00      	nop
 8003988:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f8      	beq.n	8003988 <ITM_SendChar+0x24>
 8003996:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000edfc 	.word	0xe000edfc
 80039b0:	e0000e00 	.word	0xe0000e00

080039b4 <_read>:
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e00a      	b.n	80039dc <_read+0x28>
 80039c6:	f3af 8000 	nop.w
 80039ca:	4601      	mov	r1, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	60ba      	str	r2, [r7, #8]
 80039d2:	b2ca      	uxtb	r2, r1
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbf0      	blt.n	80039c6 <_read+0x12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_write>:
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e009      	b.n	8003a14 <_write+0x26>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	60ba      	str	r2, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ffab 	bl	8003964 <ITM_SendChar>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	dbf1      	blt.n	8003a00 <_write+0x12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_close>:
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_fstat>:
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	2300      	movs	r3, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_isatty>:
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	2301      	movs	r3, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_lseek>:
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	2300      	movs	r3, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <_sbrk>:
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <_sbrk+0x5c>)
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <_sbrk+0x60>)
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <_sbrk+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk+0x22>
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <_sbrk+0x64>)
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <_sbrk+0x68>)
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d207      	bcs.n	8003ad0 <_sbrk+0x40>
 8003ac0:	f012 fda4 	bl	801660c <__errno>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	220c      	movs	r2, #12
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ace:	e009      	b.n	8003ae4 <_sbrk+0x54>
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <_sbrk+0x64>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <_sbrk+0x64>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <_sbrk+0x64>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	24080000 	.word	0x24080000
 8003af0:	00000400 	.word	0x00000400
 8003af4:	24001104 	.word	0x24001104
 8003af8:	24005a70 	.word	0x24005a70

08003afc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003b00:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <SystemInit+0xe4>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	4a36      	ldr	r2, [pc, #216]	; (8003be0 <SystemInit+0xe4>)
 8003b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <SystemInit+0xe8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	2b06      	cmp	r3, #6
 8003b1a:	d807      	bhi.n	8003b2c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b1c:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <SystemInit+0xe8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 030f 	bic.w	r3, r3, #15
 8003b24:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <SystemInit+0xe8>)
 8003b26:	f043 0307 	orr.w	r3, r3, #7
 8003b2a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <SystemInit+0xec>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <SystemInit+0xec>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <SystemInit+0xec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <SystemInit+0xec>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4929      	ldr	r1, [pc, #164]	; (8003be8 <SystemInit+0xec>)
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <SystemInit+0xf0>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <SystemInit+0xe8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <SystemInit+0xe8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 030f 	bic.w	r3, r3, #15
 8003b5e:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <SystemInit+0xe8>)
 8003b60:	f043 0307 	orr.w	r3, r3, #7
 8003b64:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <SystemInit+0xec>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <SystemInit+0xec>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003b72:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <SystemInit+0xec>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <SystemInit+0xec>)
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <SystemInit+0xf4>)
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <SystemInit+0xec>)
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <SystemInit+0xf8>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <SystemInit+0xec>)
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <SystemInit+0xfc>)
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <SystemInit+0xec>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <SystemInit+0xec>)
 8003b92:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <SystemInit+0xfc>)
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <SystemInit+0xec>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <SystemInit+0xec>)
 8003b9e:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <SystemInit+0xfc>)
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <SystemInit+0xec>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <SystemInit+0xec>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <SystemInit+0xec>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <SystemInit+0xec>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <SystemInit+0x100>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <SystemInit+0x104>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc6:	d202      	bcs.n	8003bce <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <SystemInit+0x108>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <SystemInit+0x10c>)
 8003bd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003bd4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00
 8003be4:	52002000 	.word	0x52002000
 8003be8:	58024400 	.word	0x58024400
 8003bec:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bf0:	02020200 	.word	0x02020200
 8003bf4:	01ff0000 	.word	0x01ff0000
 8003bf8:	01010280 	.word	0x01010280
 8003bfc:	5c001000 	.word	0x5c001000
 8003c00:	ffff0000 	.word	0xffff0000
 8003c04:	51008108 	.word	0x51008108
 8003c08:	52004000 	.word	0x52004000

08003c0c <Reset_Handler>:
 8003c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c44 <LoopFillZerobss+0xe>
 8003c10:	f7ff ff74 	bl	8003afc <SystemInit>
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <LoopFillZerobss+0x12>)
 8003c16:	490d      	ldr	r1, [pc, #52]	; (8003c4c <LoopFillZerobss+0x16>)
 8003c18:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <LoopFillZerobss+0x1a>)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e002      	b.n	8003c24 <LoopCopyDataInit>

08003c1e <CopyDataInit>:
 8003c1e:	58d4      	ldr	r4, [r2, r3]
 8003c20:	50c4      	str	r4, [r0, r3]
 8003c22:	3304      	adds	r3, #4

08003c24 <LoopCopyDataInit>:
 8003c24:	18c4      	adds	r4, r0, r3
 8003c26:	428c      	cmp	r4, r1
 8003c28:	d3f9      	bcc.n	8003c1e <CopyDataInit>
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <LoopFillZerobss+0x1e>)
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	; (8003c58 <LoopFillZerobss+0x22>)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e001      	b.n	8003c36 <LoopFillZerobss>

08003c32 <FillZerobss>:
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	3204      	adds	r2, #4

08003c36 <LoopFillZerobss>:
 8003c36:	42a2      	cmp	r2, r4
 8003c38:	d3fb      	bcc.n	8003c32 <FillZerobss>
 8003c3a:	f012 fced 	bl	8016618 <__libc_init_array>
 8003c3e:	f7fd f947 	bl	8000ed0 <main>
 8003c42:	4770      	bx	lr
 8003c44:	24080000 	.word	0x24080000
 8003c48:	24000000 	.word	0x24000000
 8003c4c:	24000108 	.word	0x24000108
 8003c50:	08017518 	.word	0x08017518
 8003c54:	24000120 	.word	0x24000120
 8003c58:	24005a6c 	.word	0x24005a6c

08003c5c <ADC3_IRQHandler>:
 8003c5c:	e7fe      	b.n	8003c5c <ADC3_IRQHandler>
	...

08003c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c66:	2003      	movs	r0, #3
 8003c68:	f001 fd39 	bl	80056de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c6c:	f006 fe20 	bl	800a8b0 <HAL_RCC_GetSysClockFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_Init+0x68>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	4913      	ldr	r1, [pc, #76]	; (8003ccc <HAL_Init+0x6c>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_Init+0x68>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <HAL_Init+0x6c>)
 8003c94:	5cd3      	ldrb	r3, [r2, r3]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <HAL_Init+0x70>)
 8003ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <HAL_Init+0x74>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003caa:	2005      	movs	r0, #5
 8003cac:	f7ff fd4c 	bl	8003748 <HAL_InitTick>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e002      	b.n	8003cc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cba:	f7ff f895 	bl	8002de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	08017464 	.word	0x08017464
 8003cd0:	24000094 	.word	0x24000094
 8003cd4:	24000090 	.word	0x24000090

08003cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x20>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x24>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_IncTick+0x24>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	2400009c 	.word	0x2400009c
 8003cfc:	24001108 	.word	0x24001108

08003d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return uwTick;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_GetTick+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	24001108 	.word	0x24001108

08003d18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_GetREVID+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0c1b      	lsrs	r3, r3, #16
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	5c001000 	.word	0x5c001000

08003d30 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	58000400 	.word	0x58000400

08003d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3360      	adds	r3, #96	; 0x60
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	611a      	str	r2, [r3, #16]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b087      	sub	sp, #28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3360      	adds	r3, #96	; 0x60
 8003e46:	461a      	mov	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	601a      	str	r2, [r3, #0]
  }
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3330      	adds	r3, #48	; 0x30
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	4413      	add	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	211f      	movs	r1, #31
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	f003 011f 	and.w	r1, r3, #31
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f023 0203 	bic.w	r2, r3, #3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	461a      	mov	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	0e5b      	lsrs	r3, r3, #25
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	4413      	add	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	0d1b      	lsrs	r3, r3, #20
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2107      	movs	r1, #7
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	401a      	ands	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0d1b      	lsrs	r3, r3, #20
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	431a      	orrs	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f003 0318 	and.w	r3, r3, #24
 8003f8a:	4908      	ldr	r1, [pc, #32]	; (8003fac <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f8c:	40d9      	lsrs	r1, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	400b      	ands	r3, r1
 8003f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	000fffff 	.word	0x000fffff

08003fb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <LL_ADC_DisableDeepPowerDown+0x20>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6093      	str	r3, [r2, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	5fffffc0 	.word	0x5fffffc0

08003ff0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004004:	d101      	bne.n	800400a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <LL_ADC_EnableInternalRegulator+0x24>)
 8004026:	4013      	ands	r3, r2
 8004028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	6fffffc0 	.word	0x6fffffc0

08004040 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004054:	d101      	bne.n	800405a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <LL_ADC_Enable+0x24>)
 8004076:	4013      	ands	r3, r2
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	7fffffc0 	.word	0x7fffffc0

08004090 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <LL_ADC_Disable+0x24>)
 800409e:	4013      	ands	r3, r2
 80040a0:	f043 0202 	orr.w	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	7fffffc0 	.word	0x7fffffc0

080040b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <LL_ADC_IsEnabled+0x18>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <LL_ADC_IsEnabled+0x1a>
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d101      	bne.n	80040f6 <LL_ADC_IsDisableOngoing+0x18>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <LL_ADC_IsDisableOngoing+0x1a>
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <LL_ADC_REG_StartConversion+0x24>)
 8004112:	4013      	ands	r3, r2
 8004114:	f043 0204 	orr.w	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	7fffffc0 	.word	0x7fffffc0

0800412c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b04      	cmp	r3, #4
 800413e:	d101      	bne.n	8004144 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d101      	bne.n	800416a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b089      	sub	sp, #36	; 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e18f      	b.n	80044b2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fe fe3f 	bl	8002e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff19 	bl	8003ff0 <LL_ADC_IsDeepPowerDownEnabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff feff 	bl	8003fcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ff34 	bl	8004040 <LL_ADC_IsInternalRegulatorEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d114      	bne.n	8004208 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff18 	bl	8004018 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e8:	4b87      	ldr	r3, [pc, #540]	; (8004408 <HAL_ADC_Init+0x290>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	4a87      	ldr	r2, [pc, #540]	; (800440c <HAL_ADC_Init+0x294>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	3301      	adds	r3, #1
 80041f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041fa:	e002      	b.n	8004202 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f9      	bne.n	80041fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff17 	bl	8004040 <LL_ADC_IsInternalRegulatorEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10d      	bne.n	8004234 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0210 	orr.w	r2, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff77 	bl	800412c <LL_ADC_REG_IsConversionOngoing>
 800423e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 8129 	bne.w	80044a0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 8125 	bne.w	80044a0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800425e:	f043 0202 	orr.w	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff24 	bl	80040b8 <LL_ADC_IsEnabled>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d136      	bne.n	80042e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a65      	ldr	r2, [pc, #404]	; (8004410 <HAL_ADC_Init+0x298>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_ADC_Init+0x112>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a63      	ldr	r2, [pc, #396]	; (8004414 <HAL_ADC_Init+0x29c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10e      	bne.n	80042a8 <HAL_ADC_Init+0x130>
 800428a:	4861      	ldr	r0, [pc, #388]	; (8004410 <HAL_ADC_Init+0x298>)
 800428c:	f7ff ff14 	bl	80040b8 <LL_ADC_IsEnabled>
 8004290:	4604      	mov	r4, r0
 8004292:	4860      	ldr	r0, [pc, #384]	; (8004414 <HAL_ADC_Init+0x29c>)
 8004294:	f7ff ff10 	bl	80040b8 <LL_ADC_IsEnabled>
 8004298:	4603      	mov	r3, r0
 800429a:	4323      	orrs	r3, r4
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e008      	b.n	80042ba <HAL_ADC_Init+0x142>
 80042a8:	485b      	ldr	r0, [pc, #364]	; (8004418 <HAL_ADC_Init+0x2a0>)
 80042aa:	f7ff ff05 	bl	80040b8 <LL_ADC_IsEnabled>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d012      	beq.n	80042e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a53      	ldr	r2, [pc, #332]	; (8004410 <HAL_ADC_Init+0x298>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_ADC_Init+0x15a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a51      	ldr	r2, [pc, #324]	; (8004414 <HAL_ADC_Init+0x29c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_Init+0x15e>
 80042d2:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_ADC_Init+0x2a4>)
 80042d4:	e000      	b.n	80042d8 <HAL_ADC_Init+0x160>
 80042d6:	4a52      	ldr	r2, [pc, #328]	; (8004420 <HAL_ADC_Init+0x2a8>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f7ff fd3c 	bl	8003d5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80042e4:	f7ff fd18 	bl	8003d18 <HAL_GetREVID>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d914      	bls.n	800431c <HAL_ADC_Init+0x1a4>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d110      	bne.n	800431c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	7d5b      	ldrb	r3, [r3, #21]
 80042fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004304:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800430a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7f1b      	ldrb	r3, [r3, #28]
 8004310:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004312:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004314:	f043 030c 	orr.w	r3, r3, #12
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e00d      	b.n	8004338 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7d5b      	ldrb	r3, [r3, #21]
 8004320:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004326:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800432c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7f1b      	ldrb	r3, [r3, #28]
 8004332:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7f1b      	ldrb	r3, [r3, #28]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	3b01      	subs	r3, #1
 8004346:	045b      	lsls	r3, r3, #17
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_ADC_Init+0x2ac>)
 8004372:	4013      	ands	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	430b      	orrs	r3, r1
 800437c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fed2 	bl	800412c <LL_ADC_REG_IsConversionOngoing>
 8004388:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fedf 	bl	8004152 <LL_ADC_INJ_IsConversionOngoing>
 8004394:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d15f      	bne.n	800445c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d15c      	bne.n	800445c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7d1b      	ldrb	r3, [r3, #20]
 80043a6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <HAL_ADC_Init+0x2b0>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	69b9      	ldr	r1, [r7, #24]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d130      	bne.n	8004430 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_ADC_Init+0x2b4>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0411      	lsls	r1, r2, #16
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043f0:	4311      	orrs	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043f6:	430a      	orrs	r2, r1
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	611a      	str	r2, [r3, #16]
 8004404:	e01c      	b.n	8004440 <HAL_ADC_Init+0x2c8>
 8004406:	bf00      	nop
 8004408:	24000090 	.word	0x24000090
 800440c:	053e2d63 	.word	0x053e2d63
 8004410:	40022000 	.word	0x40022000
 8004414:	40022100 	.word	0x40022100
 8004418:	58026000 	.word	0x58026000
 800441c:	40022300 	.word	0x40022300
 8004420:	58026300 	.word	0x58026300
 8004424:	fff0c003 	.word	0xfff0c003
 8004428:	ffffbffc 	.word	0xffffbffc
 800442c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fdec 	bl	8005034 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10c      	bne.n	800447e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f023 010f 	bic.w	r1, r3, #15
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
 800447c:	e007      	b.n	800448e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 020f 	bic.w	r2, r2, #15
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
 800449e:	e007      	b.n	80044b0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd90      	pop	{r4, r7, pc}
 80044ba:	bf00      	nop

080044bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a55      	ldr	r2, [pc, #340]	; (8004624 <HAL_ADC_Start_DMA+0x168>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_Start_DMA+0x20>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a54      	ldr	r2, [pc, #336]	; (8004628 <HAL_ADC_Start_DMA+0x16c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <HAL_ADC_Start_DMA+0x24>
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_ADC_Start_DMA+0x170>)
 80044de:	e000      	b.n	80044e2 <HAL_ADC_Start_DMA+0x26>
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_ADC_Start_DMA+0x174>)
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fd64 	bl	8003fb0 <LL_ADC_GetMultimode>
 80044e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fe1c 	bl	800412c <LL_ADC_REG_IsConversionOngoing>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 808c 	bne.w	8004614 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_ADC_Start_DMA+0x4e>
 8004506:	2302      	movs	r3, #2
 8004508:	e087      	b.n	800461a <HAL_ADC_Start_DMA+0x15e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b05      	cmp	r3, #5
 800451c:	d002      	beq.n	8004524 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b09      	cmp	r3, #9
 8004522:	d170      	bne.n	8004606 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fc07 	bl	8004d38 <ADC_Enable>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d163      	bne.n	80045fc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004538:	4b3e      	ldr	r3, [pc, #248]	; (8004634 <HAL_ADC_Start_DMA+0x178>)
 800453a:	4013      	ands	r3, r2
 800453c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a37      	ldr	r2, [pc, #220]	; (8004628 <HAL_ADC_Start_DMA+0x16c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d002      	beq.n	8004554 <HAL_ADC_Start_DMA+0x98>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e000      	b.n	8004556 <HAL_ADC_Start_DMA+0x9a>
 8004554:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_ADC_Start_DMA+0x168>)
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	4293      	cmp	r3, r2
 800455c:	d002      	beq.n	8004564 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d006      	beq.n	800458a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004580:	f023 0206 	bic.w	r2, r3, #6
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	659a      	str	r2, [r3, #88]	; 0x58
 8004588:	e002      	b.n	8004590 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	4a28      	ldr	r2, [pc, #160]	; (8004638 <HAL_ADC_Start_DMA+0x17c>)
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <HAL_ADC_Start_DMA+0x180>)
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a4:	4a26      	ldr	r2, [pc, #152]	; (8004640 <HAL_ADC_Start_DMA+0x184>)
 80045a6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	221c      	movs	r2, #28
 80045ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0210 	orr.w	r2, r2, #16
 80045c6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7ff fc89 	bl	8003eea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3340      	adds	r3, #64	; 0x40
 80045e2:	4619      	mov	r1, r3
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f002 f80e 	bl	8006608 <HAL_DMA_Start_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fd85 	bl	8004104 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045fa:	e00d      	b.n	8004618 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004604:	e008      	b.n	8004618 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004612:	e001      	b.n	8004618 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004614:	2302      	movs	r3, #2
 8004616:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40022000 	.word	0x40022000
 8004628:	40022100 	.word	0x40022100
 800462c:	40022300 	.word	0x40022300
 8004630:	58026300 	.word	0x58026300
 8004634:	fffff0fe 	.word	0xfffff0fe
 8004638:	08004f0b 	.word	0x08004f0b
 800463c:	08004fe3 	.word	0x08004fe3
 8004640:	08004fff 	.word	0x08004fff

08004644 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b0a1      	sub	sp, #132	; 0x84
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_ADC_ConfigChannel+0x1b0>)
 800469a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x2a>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e32e      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x688>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fd38 	bl	800412c <LL_ADC_REG_IsConversionOngoing>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 8313 	bne.w	8004cea <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db2c      	blt.n	8004726 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d108      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x6a>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	e016      	b.n	8004718 <HAL_ADC_ConfigChannel+0x98>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004702:	2320      	movs	r3, #32
 8004704:	e003      	b.n	800470e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004708:	fab3 f383 	clz	r3, r3
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	2201      	movs	r2, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	69d1      	ldr	r1, [r2, #28]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	430b      	orrs	r3, r1
 8004724:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7ff fbad 	bl	8003e92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fcf5 	bl	800412c <LL_ADC_REG_IsConversionOngoing>
 8004742:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fd02 	bl	8004152 <LL_ADC_INJ_IsConversionOngoing>
 800474e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 80b8 	bne.w	80048c8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 80b4 	bne.w	80048c8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	461a      	mov	r2, r3
 800476e:	f7ff fbcf 	bl	8003f10 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004772:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_ADC_ConfigChannel+0x1b4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477e:	d10b      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x118>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	e01d      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x154>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <HAL_ADC_ConfigChannel+0x13e>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	e00a      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x154>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d02c      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ec:	f7ff faea 	bl	8003dc4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6919      	ldr	r1, [r3, #16]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	7e5b      	ldrb	r3, [r3, #25]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d102      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x186>
 8004800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004804:	e000      	b.n	8004808 <HAL_ADC_ConfigChannel+0x188>
 8004806:	2300      	movs	r3, #0
 8004808:	461a      	mov	r2, r3
 800480a:	f7ff fb14 	bl	8003e36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	7e1b      	ldrb	r3, [r3, #24]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x1a4>
 800481e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004822:	e000      	b.n	8004826 <HAL_ADC_ConfigChannel+0x1a6>
 8004824:	2300      	movs	r3, #0
 8004826:	461a      	mov	r2, r3
 8004828:	f7ff faec 	bl	8003e04 <LL_ADC_SetDataRightShift>
 800482c:	e04c      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x248>
 800482e:	bf00      	nop
 8004830:	47ff0000 	.word	0x47ff0000
 8004834:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800487e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	069b      	lsls	r3, r3, #26
 8004890:	429a      	cmp	r2, r3
 8004892:	d107      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	069b      	lsls	r3, r3, #26
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fbf3 	bl	80040b8 <LL_ADC_IsEnabled>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 8211 	bne.w	8004cfc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7ff fb3e 	bl	8003f68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4aa1      	ldr	r2, [pc, #644]	; (8004b78 <HAL_ADC_ConfigChannel+0x4f8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f040 812e 	bne.w	8004b54 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x2a0>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	0e9b      	lsrs	r3, r3, #26
 800490e:	3301      	adds	r3, #1
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2b09      	cmp	r3, #9
 8004916:	bf94      	ite	ls
 8004918:	2301      	movls	r3, #1
 800491a:	2300      	movhi	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e019      	b.n	8004954 <HAL_ADC_ConfigChannel+0x2d4>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e003      	b.n	8004944 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800493c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3301      	adds	r3, #1
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2b09      	cmp	r3, #9
 800494c:	bf94      	ite	ls
 800494e:	2301      	movls	r3, #1
 8004950:	2300      	movhi	r3, #0
 8004952:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004954:	2b00      	cmp	r3, #0
 8004956:	d079      	beq.n	8004a4c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x2f4>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0e9b      	lsrs	r3, r3, #26
 800496a:	3301      	adds	r3, #1
 800496c:	069b      	lsls	r3, r3, #26
 800496e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004972:	e015      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x320>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004984:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800498c:	2320      	movs	r3, #32
 800498e:	e003      	b.n	8004998 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	3301      	adds	r3, #1
 800499a:	069b      	lsls	r3, r3, #26
 800499c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x340>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0e9b      	lsrs	r3, r3, #26
 80049b2:	3301      	adds	r3, #1
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2101      	movs	r1, #1
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	e017      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x370>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80049d8:	2320      	movs	r3, #32
 80049da:	e003      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80049dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2101      	movs	r1, #1
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	ea42 0103 	orr.w	r1, r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x396>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	3301      	adds	r3, #1
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	051b      	lsls	r3, r3, #20
 8004a14:	e018      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x3c8>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004a2e:	2320      	movs	r3, #32
 8004a30:	e003      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	e07e      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x3e8>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0e9b      	lsrs	r3, r3, #26
 8004a5e:	3301      	adds	r3, #1
 8004a60:	069b      	lsls	r3, r3, #26
 8004a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a66:	e015      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x414>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e003      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	069b      	lsls	r3, r3, #26
 8004a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x434>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0e9b      	lsrs	r3, r3, #26
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2101      	movs	r1, #1
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	e017      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x464>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e003      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	fab3 f383 	clz	r3, r3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2101      	movs	r1, #1
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x490>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	3301      	adds	r3, #1
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4613      	mov	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4413      	add	r3, r2
 8004b06:	3b1e      	subs	r3, #30
 8004b08:	051b      	lsls	r3, r3, #20
 8004b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	e01b      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x4c8>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	60fb      	str	r3, [r7, #12]
  return result;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	e003      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	f003 021f 	and.w	r2, r3, #31
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	4413      	add	r3, r2
 8004b40:	3b1e      	subs	r3, #30
 8004b42:	051b      	lsls	r3, r3, #20
 8004b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6892      	ldr	r2, [r2, #8]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f7ff f9de 	bl	8003f10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f280 80cf 	bge.w	8004cfc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <HAL_ADC_ConfigChannel+0x4fc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_ADC_ConfigChannel+0x4f2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <HAL_ADC_ConfigChannel+0x500>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10a      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x508>
 8004b72:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <HAL_ADC_ConfigChannel+0x504>)
 8004b74:	e009      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x50a>
 8004b76:	bf00      	nop
 8004b78:	47ff0000 	.word	0x47ff0000
 8004b7c:	40022000 	.word	0x40022000
 8004b80:	40022100 	.word	0x40022100
 8004b84:	40022300 	.word	0x40022300
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_ADC_ConfigChannel+0x690>)
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff f90c 	bl	8003da8 <LL_ADC_GetCommonPathInternalCh>
 8004b90:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5f      	ldr	r2, [pc, #380]	; (8004d14 <HAL_ADC_ConfigChannel+0x694>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_ADC_ConfigChannel+0x526>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a5d      	ldr	r2, [pc, #372]	; (8004d18 <HAL_ADC_ConfigChannel+0x698>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x544>
 8004ba6:	485b      	ldr	r0, [pc, #364]	; (8004d14 <HAL_ADC_ConfigChannel+0x694>)
 8004ba8:	f7ff fa86 	bl	80040b8 <LL_ADC_IsEnabled>
 8004bac:	4604      	mov	r4, r0
 8004bae:	485a      	ldr	r0, [pc, #360]	; (8004d18 <HAL_ADC_ConfigChannel+0x698>)
 8004bb0:	f7ff fa82 	bl	80040b8 <LL_ADC_IsEnabled>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4323      	orrs	r3, r4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x556>
 8004bc4:	4855      	ldr	r0, [pc, #340]	; (8004d1c <HAL_ADC_ConfigChannel+0x69c>)
 8004bc6:	f7ff fa77 	bl	80040b8 <LL_ADC_IsEnabled>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d07d      	beq.n	8004cd6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a50      	ldr	r2, [pc, #320]	; (8004d20 <HAL_ADC_ConfigChannel+0x6a0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d130      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0x5c6>
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d12b      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <HAL_ADC_ConfigChannel+0x69c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	f040 8081 	bne.w	8004cfc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a45      	ldr	r2, [pc, #276]	; (8004d14 <HAL_ADC_ConfigChannel+0x694>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_ADC_ConfigChannel+0x58e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a43      	ldr	r2, [pc, #268]	; (8004d18 <HAL_ADC_ConfigChannel+0x698>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x592>
 8004c0e:	4a45      	ldr	r2, [pc, #276]	; (8004d24 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c10:	e000      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x594>
 8004c12:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <HAL_ADC_ConfigChannel+0x690>)
 8004c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7ff f8b0 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c22:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <HAL_ADC_ConfigChannel+0x6a8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <HAL_ADC_ConfigChannel+0x6ac>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	3301      	adds	r3, #1
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c36:	e002      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f9      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c44:	e05a      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a39      	ldr	r2, [pc, #228]	; (8004d30 <HAL_ADC_ConfigChannel+0x6b0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d11e      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x60e>
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d119      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <HAL_ADC_ConfigChannel+0x69c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d14b      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <HAL_ADC_ConfigChannel+0x694>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x5f8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <HAL_ADC_ConfigChannel+0x698>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x5fc>
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c7a:	e000      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x5fe>
 8004c7c:	4a24      	ldr	r2, [pc, #144]	; (8004d10 <HAL_ADC_ConfigChannel+0x690>)
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7ff f87b 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c8c:	e036      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <HAL_ADC_ConfigChannel+0x6b4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d131      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
 8004c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d12c      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_ADC_ConfigChannel+0x69c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d127      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_ADC_ConfigChannel+0x694>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_ADC_ConfigChannel+0x640>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_ADC_ConfigChannel+0x698>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x644>
 8004cc0:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_ADC_ConfigChannel+0x6a4>)
 8004cc2:	e000      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x646>
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <HAL_ADC_ConfigChannel+0x690>)
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7ff f857 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
 8004cd4:	e012      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ce8:	e008      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3784      	adds	r7, #132	; 0x84
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd90      	pop	{r4, r7, pc}
 8004d10:	58026300 	.word	0x58026300
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40022100 	.word	0x40022100
 8004d1c:	58026000 	.word	0x58026000
 8004d20:	cb840000 	.word	0xcb840000
 8004d24:	40022300 	.word	0x40022300
 8004d28:	24000090 	.word	0x24000090
 8004d2c:	053e2d63 	.word	0x053e2d63
 8004d30:	c7520000 	.word	0xc7520000
 8004d34:	cfb80000 	.word	0xcfb80000

08004d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff f9b7 	bl	80040b8 <LL_ADC_IsEnabled>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d16e      	bne.n	8004e2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <ADC_Enable+0x100>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0210 	orr.w	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e05a      	b.n	8004e30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff f972 	bl	8004068 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d84:	f7fe ffbc 	bl	8003d00 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <ADC_Enable+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <ADC_Enable+0x66>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <ADC_Enable+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <ADC_Enable+0x6a>
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <ADC_Enable+0x10c>)
 8004da0:	e000      	b.n	8004da4 <ADC_Enable+0x6c>
 8004da2:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <ADC_Enable+0x110>)
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff f903 	bl	8003fb0 <LL_ADC_GetMultimode>
 8004daa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <ADC_Enable+0x108>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d002      	beq.n	8004dbc <ADC_Enable+0x84>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e000      	b.n	8004dbe <ADC_Enable+0x86>
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <ADC_Enable+0x104>)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d02c      	beq.n	8004e20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d130      	bne.n	8004e2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dcc:	e028      	b.n	8004e20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff f970 	bl	80040b8 <LL_ADC_IsEnabled>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff f940 	bl	8004068 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004de8:	f7fe ff8a 	bl	8003d00 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d914      	bls.n	8004e20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d00d      	beq.n	8004e20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0210 	orr.w	r2, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e007      	b.n	8004e30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d1cf      	bne.n	8004dce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	8000003f 	.word	0x8000003f
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40022100 	.word	0x40022100
 8004e44:	40022300 	.word	0x40022300
 8004e48:	58026300 	.word	0x58026300

08004e4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff f940 	bl	80040de <LL_ADC_IsDisableOngoing>
 8004e5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff f927 	bl	80040b8 <LL_ADC_IsEnabled>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d047      	beq.n	8004f00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d144      	bne.n	8004f00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030d 	and.w	r3, r3, #13
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d10c      	bne.n	8004e9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff f901 	bl	8004090 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2203      	movs	r2, #3
 8004e94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e96:	f7fe ff33 	bl	8003d00 <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e9c:	e029      	b.n	8004ef2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f043 0210 	orr.w	r2, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e023      	b.n	8004f02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004eba:	f7fe ff21 	bl	8003d00 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d914      	bls.n	8004ef2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f043 0210 	orr.w	r2, r3, #16
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e007      	b.n	8004f02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1dc      	bne.n	8004eba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d14b      	bne.n	8004fbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d021      	beq.n	8004f82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe ff92 	bl	8003e6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d032      	beq.n	8004fb4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d12b      	bne.n	8004fb4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11f      	bne.n	8004fb4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
 8004f80:	e018      	b.n	8004fb4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d111      	bne.n	8004fb4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	f043 0201 	orr.w	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff fb45 	bl	8004644 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fba:	e00e      	b.n	8004fda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7ff fb4f 	bl	800466c <HAL_ADC_ErrorCallback>
}
 8004fce:	e004      	b.n	8004fda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff fb31 	bl	8004658 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f043 0204 	orr.w	r2, r3, #4
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff fb21 	bl	800466c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a7a      	ldr	r2, [pc, #488]	; (800522c <ADC_ConfigureBoostMode+0x1f8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <ADC_ConfigureBoostMode+0x1c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a79      	ldr	r2, [pc, #484]	; (8005230 <ADC_ConfigureBoostMode+0x1fc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d109      	bne.n	8005064 <ADC_ConfigureBoostMode+0x30>
 8005050:	4b78      	ldr	r3, [pc, #480]	; (8005234 <ADC_ConfigureBoostMode+0x200>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e008      	b.n	8005076 <ADC_ConfigureBoostMode+0x42>
 8005064:	4b74      	ldr	r3, [pc, #464]	; (8005238 <ADC_ConfigureBoostMode+0x204>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01c      	beq.n	80050b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800507a:	f005 fd93 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800507e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005088:	d010      	beq.n	80050ac <ADC_ConfigureBoostMode+0x78>
 800508a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800508e:	d873      	bhi.n	8005178 <ADC_ConfigureBoostMode+0x144>
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d002      	beq.n	800509c <ADC_ConfigureBoostMode+0x68>
 8005096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800509a:	d16d      	bne.n	8005178 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	60fb      	str	r3, [r7, #12]
        break;
 80050aa:	e068      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	60fb      	str	r3, [r7, #12]
        break;
 80050b2:	e064      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80050b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80050b8:	f04f 0100 	mov.w	r1, #0
 80050bc:	f007 f81a 	bl	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80050c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050ca:	d051      	beq.n	8005170 <ADC_ConfigureBoostMode+0x13c>
 80050cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050d0:	d854      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 80050d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050d6:	d047      	beq.n	8005168 <ADC_ConfigureBoostMode+0x134>
 80050d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050dc:	d84e      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 80050de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050e2:	d03d      	beq.n	8005160 <ADC_ConfigureBoostMode+0x12c>
 80050e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050e8:	d848      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 80050ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ee:	d033      	beq.n	8005158 <ADC_ConfigureBoostMode+0x124>
 80050f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f4:	d842      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 80050f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050fa:	d029      	beq.n	8005150 <ADC_ConfigureBoostMode+0x11c>
 80050fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005100:	d83c      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 8005102:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005106:	d01a      	beq.n	800513e <ADC_ConfigureBoostMode+0x10a>
 8005108:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800510c:	d836      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 800510e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005112:	d014      	beq.n	800513e <ADC_ConfigureBoostMode+0x10a>
 8005114:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005118:	d830      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 800511a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511e:	d00e      	beq.n	800513e <ADC_ConfigureBoostMode+0x10a>
 8005120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005124:	d82a      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 8005126:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800512a:	d008      	beq.n	800513e <ADC_ConfigureBoostMode+0x10a>
 800512c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005130:	d824      	bhi.n	800517c <ADC_ConfigureBoostMode+0x148>
 8005132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005136:	d002      	beq.n	800513e <ADC_ConfigureBoostMode+0x10a>
 8005138:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800513c:	d11e      	bne.n	800517c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	0c9b      	lsrs	r3, r3, #18
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	60fb      	str	r3, [r7, #12]
        break;
 800514e:	e016      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	60fb      	str	r3, [r7, #12]
        break;
 8005156:	e012      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	60fb      	str	r3, [r7, #12]
        break;
 800515e:	e00e      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	60fb      	str	r3, [r7, #12]
        break;
 8005166:	e00a      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	09db      	lsrs	r3, r3, #7
 800516c:	60fb      	str	r3, [r7, #12]
        break;
 800516e:	e006      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	60fb      	str	r3, [r7, #12]
        break;
 8005176:	e002      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800517c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800517e:	f7fe fdcb 	bl	8003d18 <HAL_GetREVID>
 8005182:	4603      	mov	r3, r0
 8005184:	f241 0203 	movw	r2, #4099	; 0x1003
 8005188:	4293      	cmp	r3, r2
 800518a:	d815      	bhi.n	80051b8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a2b      	ldr	r2, [pc, #172]	; (800523c <ADC_ConfigureBoostMode+0x208>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d908      	bls.n	80051a6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80051a4:	e03e      	b.n	8005224 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b4:	609a      	str	r2, [r3, #8]
}
 80051b6:	e035      	b.n	8005224 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <ADC_ConfigureBoostMode+0x20c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d808      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	e025      	b.n	8005224 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <ADC_ConfigureBoostMode+0x210>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d80a      	bhi.n	80051f6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f2:	609a      	str	r2, [r3, #8]
}
 80051f4:	e016      	b.n	8005224 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <ADC_ConfigureBoostMode+0x214>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d80a      	bhi.n	8005214 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	609a      	str	r2, [r3, #8]
}
 8005212:	e007      	b.n	8005224 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40022000 	.word	0x40022000
 8005230:	40022100 	.word	0x40022100
 8005234:	40022300 	.word	0x40022300
 8005238:	58026300 	.word	0x58026300
 800523c:	01312d00 	.word	0x01312d00
 8005240:	005f5e10 	.word	0x005f5e10
 8005244:	00bebc20 	.word	0x00bebc20
 8005248:	017d7840 	.word	0x017d7840

0800524c <LL_ADC_IsEnabled>:
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <LL_ADC_IsEnabled+0x18>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <LL_ADC_IsEnabled+0x1a>
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <LL_ADC_StartCalibration>:
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <LL_ADC_StartCalibration+0x38>)
 8005286:	4013      	ands	r3, r2
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005294:	430a      	orrs	r2, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	3ffeffc0 	.word	0x3ffeffc0

080052b0 <LL_ADC_IsCalibrationOnGoing>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c4:	d101      	bne.n	80052ca <LL_ADC_IsCalibrationOnGoing+0x1a>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_ADC_REG_IsConversionOngoing>:
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d101      	bne.n	80052f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_ADCEx_Calibration_Start+0x1e>
 800531a:	2302      	movs	r3, #2
 800531c:	e04c      	b.n	80053b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff fd90 	bl	8004e4c <ADC_Disable>
 800532c:	4603      	mov	r3, r0
 800532e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d135      	bne.n	80053a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533a:	4b21      	ldr	r3, [pc, #132]	; (80053c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800533c:	4013      	ands	r3, r2
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff ff90 	bl	8005274 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005354:	e014      	b.n	8005380 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d30d      	bcc.n	8005380 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	f023 0312 	bic.w	r3, r3, #18
 800536c:	f043 0210 	orr.w	r2, r3, #16
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e01b      	b.n	80053b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff93 	bl	80052b0 <LL_ADC_IsCalibrationOnGoing>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e2      	bne.n	8005356 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f023 0303 	bic.w	r3, r3, #3
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
 80053a0:	e005      	b.n	80053ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f043 0210 	orr.w	r2, r3, #16
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	ffffeefd 	.word	0xffffeefd
 80053c4:	25c3f800 	.word	0x25c3f800

080053c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b09f      	sub	sp, #124	; 0x7c
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e0be      	b.n	8005564 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80053ee:	2300      	movs	r3, #0
 80053f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a5c      	ldr	r2, [pc, #368]	; (800556c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d102      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005400:	4b5b      	ldr	r3, [pc, #364]	; (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	e001      	b.n	800540a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f043 0220 	orr.w	r2, r3, #32
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e09d      	b.n	8005564 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff ff54 	bl	80052d8 <LL_ADC_REG_IsConversionOngoing>
 8005430:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff ff4e 	bl	80052d8 <LL_ADC_REG_IsConversionOngoing>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d17f      	bne.n	8005542 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005444:	2b00      	cmp	r3, #0
 8005446:	d17c      	bne.n	8005542 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a47      	ldr	r2, [pc, #284]	; (800556c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a46      	ldr	r2, [pc, #280]	; (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800545c:	4b45      	ldr	r3, [pc, #276]	; (8005574 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800545e:	e000      	b.n	8005462 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005460:	4b45      	ldr	r3, [pc, #276]	; (8005578 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005462:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d039      	beq.n	80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800546c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	431a      	orrs	r2, r3
 800547a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a3a      	ldr	r2, [pc, #232]	; (800556c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a38      	ldr	r2, [pc, #224]	; (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d10e      	bne.n	80054b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005492:	4836      	ldr	r0, [pc, #216]	; (800556c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005494:	f7ff feda 	bl	800524c <LL_ADC_IsEnabled>
 8005498:	4604      	mov	r4, r0
 800549a:	4835      	ldr	r0, [pc, #212]	; (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800549c:	f7ff fed6 	bl	800524c <LL_ADC_IsEnabled>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4323      	orrs	r3, r4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e008      	b.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80054b0:	4832      	ldr	r0, [pc, #200]	; (800557c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054b2:	f7ff fecb 	bl	800524c <LL_ADC_IsEnabled>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d047      	beq.n	8005556 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	6892      	ldr	r2, [r2, #8]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	431a      	orrs	r2, r3
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054de:	e03a      	b.n	8005556 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80054e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10e      	bne.n	800551e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005500:	481a      	ldr	r0, [pc, #104]	; (800556c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005502:	f7ff fea3 	bl	800524c <LL_ADC_IsEnabled>
 8005506:	4604      	mov	r4, r0
 8005508:	4819      	ldr	r0, [pc, #100]	; (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800550a:	f7ff fe9f 	bl	800524c <LL_ADC_IsEnabled>
 800550e:	4603      	mov	r3, r0
 8005510:	4323      	orrs	r3, r4
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e008      	b.n	8005530 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800551e:	4817      	ldr	r0, [pc, #92]	; (800557c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005520:	f7ff fe94 	bl	800524c <LL_ADC_IsEnabled>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf0c      	ite	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	2300      	movne	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800553a:	4013      	ands	r3, r2
 800553c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800553e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005540:	e009      	b.n	8005556 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005554:	e000      	b.n	8005558 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005556:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005560:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005564:	4618      	mov	r0, r3
 8005566:	377c      	adds	r7, #124	; 0x7c
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}
 800556c:	40022000 	.word	0x40022000
 8005570:	40022100 	.word	0x40022100
 8005574:	40022300 	.word	0x40022300
 8005578:	58026300 	.word	0x58026300
 800557c:	58026000 	.word	0x58026000
 8005580:	fffff0e0 	.word	0xfffff0e0

08005584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <__NVIC_SetPriorityGrouping+0x40>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055a0:	4013      	ands	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <__NVIC_SetPriorityGrouping+0x44>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055b2:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <__NVIC_SetPriorityGrouping+0x40>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	60d3      	str	r3, [r2, #12]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	e000ed00 	.word	0xe000ed00
 80055c8:	05fa0000 	.word	0x05fa0000

080055cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <__NVIC_GetPriorityGrouping+0x18>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	f003 0307 	and.w	r3, r3, #7
}
 80055da:	4618      	mov	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	db0b      	blt.n	8005612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	f003 021f 	and.w	r2, r3, #31
 8005600:	4907      	ldr	r1, [pc, #28]	; (8005620 <__NVIC_EnableIRQ+0x38>)
 8005602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	2001      	movs	r0, #1
 800560a:	fa00 f202 	lsl.w	r2, r0, r2
 800560e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	e000e100 	.word	0xe000e100

08005624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005634:	2b00      	cmp	r3, #0
 8005636:	db0a      	blt.n	800564e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	490c      	ldr	r1, [pc, #48]	; (8005670 <__NVIC_SetPriority+0x4c>)
 800563e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	440b      	add	r3, r1
 8005648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800564c:	e00a      	b.n	8005664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <__NVIC_SetPriority+0x50>)
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	3b04      	subs	r3, #4
 800565c:	0112      	lsls	r2, r2, #4
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	440b      	add	r3, r1
 8005662:	761a      	strb	r2, [r3, #24]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	e000e100 	.word	0xe000e100
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f1c3 0307 	rsb	r3, r3, #7
 8005692:	2b04      	cmp	r3, #4
 8005694:	bf28      	it	cs
 8005696:	2304      	movcs	r3, #4
 8005698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3304      	adds	r3, #4
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d902      	bls.n	80056a8 <NVIC_EncodePriority+0x30>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3b03      	subs	r3, #3
 80056a6:	e000      	b.n	80056aa <NVIC_EncodePriority+0x32>
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43da      	mvns	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	401a      	ands	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	43d9      	mvns	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	4313      	orrs	r3, r2
         );
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3724      	adds	r7, #36	; 0x24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff4c 	bl	8005584 <__NVIC_SetPriorityGrouping>
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005702:	f7ff ff63 	bl	80055cc <__NVIC_GetPriorityGrouping>
 8005706:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	6978      	ldr	r0, [r7, #20]
 800570e:	f7ff ffb3 	bl	8005678 <NVIC_EncodePriority>
 8005712:	4602      	mov	r2, r0
 8005714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff82 	bl	8005624 <__NVIC_SetPriority>
}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ff56 	bl	80055e8 <__NVIC_EnableIRQ>
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e014      	b.n	8005780 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	791b      	ldrb	r3, [r3, #4]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fd fc76 	bl	8003058 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e046      	b.n	800582a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	795b      	ldrb	r3, [r3, #5]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_DAC_Start+0x20>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e040      	b.n	800582a <HAL_DAC_Start+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6819      	ldr	r1, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d11d      	bne.n	800581c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	605a      	str	r2, [r3, #4]
 80057f0:	e014      	b.n	800581c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2102      	movs	r1, #2
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	429a      	cmp	r2, r3
 800580a:	d107      	bne.n	800581c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0202 	orr.w	r2, r2, #2
 800581a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0a2      	b.n	8005996 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	795b      	ldrb	r3, [r3, #5]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_DAC_Start_DMA+0x24>
 8005858:	2302      	movs	r3, #2
 800585a:	e09c      	b.n	8005996 <HAL_DAC_Start_DMA+0x15e>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2202      	movs	r2, #2
 8005866:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d129      	bne.n	80058c2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4a4b      	ldr	r2, [pc, #300]	; (80059a0 <HAL_DAC_Start_DMA+0x168>)
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	4a4a      	ldr	r2, [pc, #296]	; (80059a4 <HAL_DAC_Start_DMA+0x16c>)
 800587c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4a49      	ldr	r2, [pc, #292]	; (80059a8 <HAL_DAC_Start_DMA+0x170>)
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005894:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_DAC_Start_DMA+0x6c>
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d005      	beq.n	80058ae <HAL_DAC_Start_DMA+0x76>
 80058a2:	e009      	b.n	80058b8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	613b      	str	r3, [r7, #16]
        break;
 80058ac:	e033      	b.n	8005916 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	613b      	str	r3, [r7, #16]
        break;
 80058b6:	e02e      	b.n	8005916 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3310      	adds	r3, #16
 80058be:	613b      	str	r3, [r7, #16]
        break;
 80058c0:	e029      	b.n	8005916 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	4a39      	ldr	r2, [pc, #228]	; (80059ac <HAL_DAC_Start_DMA+0x174>)
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4a38      	ldr	r2, [pc, #224]	; (80059b0 <HAL_DAC_Start_DMA+0x178>)
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4a37      	ldr	r2, [pc, #220]	; (80059b4 <HAL_DAC_Start_DMA+0x17c>)
 80058d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_DAC_Start_DMA+0xc0>
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d005      	beq.n	8005902 <HAL_DAC_Start_DMA+0xca>
 80058f6:	e009      	b.n	800590c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	613b      	str	r3, [r7, #16]
        break;
 8005900:	e009      	b.n	8005916 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3318      	adds	r3, #24
 8005908:	613b      	str	r3, [r7, #16]
        break;
 800590a:	e004      	b.n	8005916 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	331c      	adds	r3, #28
 8005912:	613b      	str	r3, [r7, #16]
        break;
 8005914:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d111      	bne.n	8005940 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800592a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6898      	ldr	r0, [r3, #8]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	f000 fe67 	bl	8006608 <HAL_DMA_Start_IT>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	e010      	b.n	8005962 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800594e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68d8      	ldr	r0, [r3, #12]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	f000 fe55 	bl	8006608 <HAL_DMA_Start_IT>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10c      	bne.n	8005988 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	2201      	movs	r2, #1
 800597c:	409a      	lsls	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e005      	b.n	8005994 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	08005e29 	.word	0x08005e29
 80059a4:	08005e4b 	.word	0x08005e4b
 80059a8:	08005e67 	.word	0x08005e67
 80059ac:	08005ee5 	.word	0x08005ee5
 80059b0:	08005f07 	.word	0x08005f07
 80059b4:	08005f23 	.word	0x08005f23

080059b8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e03e      	b.n	8005a4a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43da      	mvns	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	400a      	ands	r2, r1
 80059e8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2201      	movs	r2, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43da      	mvns	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	400a      	ands	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10d      	bne.n	8005a28 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f863 	bl	8006adc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e00c      	b.n	8005a42 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 f855 	bl	8006adc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005a40:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a68:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01d      	beq.n	8005ab0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d018      	beq.n	8005ab0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2204      	movs	r2, #4
 8005a82:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f043 0201 	orr.w	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f86f 	bl	8005b8e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01d      	beq.n	8005af6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d018      	beq.n	8005af6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f043 0202 	orr.w	r2, r3, #2
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9ed 	bl	8005ed0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b087      	sub	sp, #28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e015      	b.n	8005b46 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e004      	b.n	8005b3c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	3314      	adds	r3, #20
 8005b3a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_DAC_ConfigChannel+0x1e>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e12a      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	795b      	ldrb	r3, [r3, #5]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_DAC_ConfigChannel+0x2e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e124      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x278>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d17a      	bne.n	8005cdc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005be6:	f7fe f88b 	bl	8003d00 <HAL_GetTick>
 8005bea:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d13d      	bne.n	8005c6e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005bf2:	e018      	b.n	8005c26 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bf4:	f7fe f884 	bl	8003d00 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d911      	bls.n	8005c26 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c08:	4b86      	ldr	r3, [pc, #536]	; (8005e24 <HAL_DAC_ConfigChannel+0x280>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f043 0208 	orr.w	r2, r3, #8
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0fa      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2c:	4b7d      	ldr	r3, [pc, #500]	; (8005e24 <HAL_DAC_ConfigChannel+0x280>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1df      	bne.n	8005bf4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	6992      	ldr	r2, [r2, #24]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c3e:	e020      	b.n	8005c82 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c40:	f7fe f85e 	bl	8003d00 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d90f      	bls.n	8005c6e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da0a      	bge.n	8005c6e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f043 0208 	orr.w	r2, r3, #8
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2203      	movs	r2, #3
 8005c68:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e0d6      	b.n	8005e1c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dbe3      	blt.n	8005c40 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	6992      	ldr	r2, [r2, #24]
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	ea02 0103 	and.w	r1, r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	21ff      	movs	r1, #255	; 0xff
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	ea02 0103 	and.w	r1, r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11d      	bne.n	8005d20 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	221f      	movs	r2, #31
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2207      	movs	r2, #7
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d102      	bne.n	8005d4a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	e00f      	b.n	8005d6a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d102      	bne.n	8005d58 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005d52:	2301      	movs	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
 8005d56:	e008      	b.n	8005d6a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005d60:	2301      	movs	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
 8005d64:	e001      	b.n	8005d6a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43da      	mvns	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	400a      	ands	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	22c0      	movs	r2, #192	; 0xc0
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43da      	mvns	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	400a      	ands	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3728      	adds	r7, #40	; 0x28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20008000 	.word	0x20008000

08005e28 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff fe8b 	bl	8005b52 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	711a      	strb	r2, [r3, #4]
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fe84 	bl	8005b66 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fe7a 	bl	8005b7a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	711a      	strb	r2, [r3, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7ff ffce 	bl	8005e94 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	711a      	strb	r2, [r3, #4]
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ffc7 	bl	8005ea8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f043 0204 	orr.w	r2, r3, #4
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ffbd 	bl	8005ebc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	711a      	strb	r2, [r3, #4]
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f58:	f7fd fed2 	bl	8003d00 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e316      	b.n	8006596 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a66      	ldr	r2, [pc, #408]	; (8006108 <HAL_DMA_Init+0x1b8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d04a      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a65      	ldr	r2, [pc, #404]	; (800610c <HAL_DMA_Init+0x1bc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d045      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a63      	ldr	r2, [pc, #396]	; (8006110 <HAL_DMA_Init+0x1c0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d040      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a62      	ldr	r2, [pc, #392]	; (8006114 <HAL_DMA_Init+0x1c4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d03b      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a60      	ldr	r2, [pc, #384]	; (8006118 <HAL_DMA_Init+0x1c8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d036      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5f      	ldr	r2, [pc, #380]	; (800611c <HAL_DMA_Init+0x1cc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d031      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_DMA_Init+0x1d0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d02c      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a5c      	ldr	r2, [pc, #368]	; (8006124 <HAL_DMA_Init+0x1d4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d027      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5a      	ldr	r2, [pc, #360]	; (8006128 <HAL_DMA_Init+0x1d8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d022      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a59      	ldr	r2, [pc, #356]	; (800612c <HAL_DMA_Init+0x1dc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d01d      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a57      	ldr	r2, [pc, #348]	; (8006130 <HAL_DMA_Init+0x1e0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a56      	ldr	r2, [pc, #344]	; (8006134 <HAL_DMA_Init+0x1e4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a54      	ldr	r2, [pc, #336]	; (8006138 <HAL_DMA_Init+0x1e8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a53      	ldr	r2, [pc, #332]	; (800613c <HAL_DMA_Init+0x1ec>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a51      	ldr	r2, [pc, #324]	; (8006140 <HAL_DMA_Init+0x1f0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_DMA_Init+0xb8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a50      	ldr	r2, [pc, #320]	; (8006144 <HAL_DMA_Init+0x1f4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_DMA_Init+0xbc>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_DMA_Init+0xbe>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 813b 	beq.w	800628a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <HAL_DMA_Init+0x1b8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d04a      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a36      	ldr	r2, [pc, #216]	; (800610c <HAL_DMA_Init+0x1bc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d045      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a34      	ldr	r2, [pc, #208]	; (8006110 <HAL_DMA_Init+0x1c0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d040      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a33      	ldr	r2, [pc, #204]	; (8006114 <HAL_DMA_Init+0x1c4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d03b      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <HAL_DMA_Init+0x1c8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d036      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a30      	ldr	r2, [pc, #192]	; (800611c <HAL_DMA_Init+0x1cc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d031      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2e      	ldr	r2, [pc, #184]	; (8006120 <HAL_DMA_Init+0x1d0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02c      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <HAL_DMA_Init+0x1d4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_DMA_Init+0x1d8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2a      	ldr	r2, [pc, #168]	; (800612c <HAL_DMA_Init+0x1dc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a28      	ldr	r2, [pc, #160]	; (8006130 <HAL_DMA_Init+0x1e0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_DMA_Init+0x1e4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <HAL_DMA_Init+0x1e8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <HAL_DMA_Init+0x1ec>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_DMA_Init+0x1f0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_DMA_Init+0x174>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a21      	ldr	r2, [pc, #132]	; (8006144 <HAL_DMA_Init+0x1f4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <HAL_DMA_Init+0x186>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e007      	b.n	80060e6 <HAL_DMA_Init+0x196>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060e6:	e02f      	b.n	8006148 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060e8:	f7fd fe0a 	bl	8003d00 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d928      	bls.n	8006148 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2203      	movs	r2, #3
 8006100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e246      	b.n	8006596 <HAL_DMA_Init+0x646>
 8006108:	40020010 	.word	0x40020010
 800610c:	40020028 	.word	0x40020028
 8006110:	40020040 	.word	0x40020040
 8006114:	40020058 	.word	0x40020058
 8006118:	40020070 	.word	0x40020070
 800611c:	40020088 	.word	0x40020088
 8006120:	400200a0 	.word	0x400200a0
 8006124:	400200b8 	.word	0x400200b8
 8006128:	40020410 	.word	0x40020410
 800612c:	40020428 	.word	0x40020428
 8006130:	40020440 	.word	0x40020440
 8006134:	40020458 	.word	0x40020458
 8006138:	40020470 	.word	0x40020470
 800613c:	40020488 	.word	0x40020488
 8006140:	400204a0 	.word	0x400204a0
 8006144:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1c8      	bne.n	80060e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4b83      	ldr	r3, [pc, #524]	; (8006370 <HAL_DMA_Init+0x420>)
 8006162:	4013      	ands	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800616e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800617a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006186:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b04      	cmp	r3, #4
 800619a:	d107      	bne.n	80061ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	4313      	orrs	r3, r2
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80061ac:	4b71      	ldr	r3, [pc, #452]	; (8006374 <HAL_DMA_Init+0x424>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b71      	ldr	r3, [pc, #452]	; (8006378 <HAL_DMA_Init+0x428>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b8:	d328      	bcc.n	800620c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b28      	cmp	r3, #40	; 0x28
 80061c0:	d903      	bls.n	80061ca <HAL_DMA_Init+0x27a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b2e      	cmp	r3, #46	; 0x2e
 80061c8:	d917      	bls.n	80061fa <HAL_DMA_Init+0x2aa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b3e      	cmp	r3, #62	; 0x3e
 80061d0:	d903      	bls.n	80061da <HAL_DMA_Init+0x28a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b42      	cmp	r3, #66	; 0x42
 80061d8:	d90f      	bls.n	80061fa <HAL_DMA_Init+0x2aa>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b46      	cmp	r3, #70	; 0x46
 80061e0:	d903      	bls.n	80061ea <HAL_DMA_Init+0x29a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b48      	cmp	r3, #72	; 0x48
 80061e8:	d907      	bls.n	80061fa <HAL_DMA_Init+0x2aa>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b4e      	cmp	r3, #78	; 0x4e
 80061f0:	d905      	bls.n	80061fe <HAL_DMA_Init+0x2ae>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b52      	cmp	r3, #82	; 0x52
 80061f8:	d801      	bhi.n	80061fe <HAL_DMA_Init+0x2ae>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <HAL_DMA_Init+0x2b0>
 80061fe:	2300      	movs	r3, #0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800620a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0307 	bic.w	r3, r3, #7
 8006222:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b04      	cmp	r3, #4
 8006234:	d117      	bne.n	8006266 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 fb33 	bl	80088b4 <DMA_CheckFifoParam>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e197      	b.n	8006596 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fa6e 	bl	8008750 <DMA_CalcBaseAndBitshift>
 8006274:	4603      	mov	r3, r0
 8006276:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	223f      	movs	r2, #63	; 0x3f
 8006282:	409a      	lsls	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
 8006288:	e0cd      	b.n	8006426 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a3b      	ldr	r2, [pc, #236]	; (800637c <HAL_DMA_Init+0x42c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d022      	beq.n	80062da <HAL_DMA_Init+0x38a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a39      	ldr	r2, [pc, #228]	; (8006380 <HAL_DMA_Init+0x430>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d01d      	beq.n	80062da <HAL_DMA_Init+0x38a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a38      	ldr	r2, [pc, #224]	; (8006384 <HAL_DMA_Init+0x434>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_DMA_Init+0x38a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a36      	ldr	r2, [pc, #216]	; (8006388 <HAL_DMA_Init+0x438>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_DMA_Init+0x38a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a35      	ldr	r2, [pc, #212]	; (800638c <HAL_DMA_Init+0x43c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_DMA_Init+0x38a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a33      	ldr	r2, [pc, #204]	; (8006390 <HAL_DMA_Init+0x440>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_DMA_Init+0x38a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a32      	ldr	r2, [pc, #200]	; (8006394 <HAL_DMA_Init+0x444>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_DMA_Init+0x38a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a30      	ldr	r2, [pc, #192]	; (8006398 <HAL_DMA_Init+0x448>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d101      	bne.n	80062de <HAL_DMA_Init+0x38e>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_DMA_Init+0x390>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8097 	beq.w	8006414 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a24      	ldr	r2, [pc, #144]	; (800637c <HAL_DMA_Init+0x42c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d021      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <HAL_DMA_Init+0x430>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01c      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_DMA_Init+0x434>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d017      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <HAL_DMA_Init+0x438>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d012      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <HAL_DMA_Init+0x43c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00d      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <HAL_DMA_Init+0x440>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d008      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_DMA_Init+0x444>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <HAL_DMA_Init+0x3e4>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a19      	ldr	r2, [pc, #100]	; (8006398 <HAL_DMA_Init+0x448>)
 8006332:	4293      	cmp	r3, r2
 8006334:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4b12      	ldr	r3, [pc, #72]	; (800639c <HAL_DMA_Init+0x44c>)
 8006352:	4013      	ands	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d020      	beq.n	80063a0 <HAL_DMA_Init+0x450>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d102      	bne.n	800636c <HAL_DMA_Init+0x41c>
 8006366:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800636a:	e01a      	b.n	80063a2 <HAL_DMA_Init+0x452>
 800636c:	2300      	movs	r3, #0
 800636e:	e018      	b.n	80063a2 <HAL_DMA_Init+0x452>
 8006370:	fe10803f 	.word	0xfe10803f
 8006374:	5c001000 	.word	0x5c001000
 8006378:	ffff0000 	.word	0xffff0000
 800637c:	58025408 	.word	0x58025408
 8006380:	5802541c 	.word	0x5802541c
 8006384:	58025430 	.word	0x58025430
 8006388:	58025444 	.word	0x58025444
 800638c:	58025458 	.word	0x58025458
 8006390:	5802546c 	.word	0x5802546c
 8006394:	58025480 	.word	0x58025480
 8006398:	58025494 	.word	0x58025494
 800639c:	fffe000f 	.word	0xfffe000f
 80063a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	68d2      	ldr	r2, [r2, #12]
 80063a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	4b6e      	ldr	r3, [pc, #440]	; (80065a0 <HAL_DMA_Init+0x650>)
 80063e8:	4413      	add	r3, r2
 80063ea:	4a6e      	ldr	r2, [pc, #440]	; (80065a4 <HAL_DMA_Init+0x654>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	009a      	lsls	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f002 f9a9 	bl	8008750 <DMA_CalcBaseAndBitshift>
 80063fe:	4603      	mov	r3, r0
 8006400:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	2201      	movs	r2, #1
 800640c:	409a      	lsls	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	e008      	b.n	8006426 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2240      	movs	r2, #64	; 0x40
 8006418:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2203      	movs	r2, #3
 800641e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0b7      	b.n	8006596 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5f      	ldr	r2, [pc, #380]	; (80065a8 <HAL_DMA_Init+0x658>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d072      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a5d      	ldr	r2, [pc, #372]	; (80065ac <HAL_DMA_Init+0x65c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d06d      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5c      	ldr	r2, [pc, #368]	; (80065b0 <HAL_DMA_Init+0x660>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d068      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a5a      	ldr	r2, [pc, #360]	; (80065b4 <HAL_DMA_Init+0x664>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d063      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a59      	ldr	r2, [pc, #356]	; (80065b8 <HAL_DMA_Init+0x668>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d05e      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a57      	ldr	r2, [pc, #348]	; (80065bc <HAL_DMA_Init+0x66c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d059      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a56      	ldr	r2, [pc, #344]	; (80065c0 <HAL_DMA_Init+0x670>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d054      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a54      	ldr	r2, [pc, #336]	; (80065c4 <HAL_DMA_Init+0x674>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d04f      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a53      	ldr	r2, [pc, #332]	; (80065c8 <HAL_DMA_Init+0x678>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a51      	ldr	r2, [pc, #324]	; (80065cc <HAL_DMA_Init+0x67c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a50      	ldr	r2, [pc, #320]	; (80065d0 <HAL_DMA_Init+0x680>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a4e      	ldr	r2, [pc, #312]	; (80065d4 <HAL_DMA_Init+0x684>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a4d      	ldr	r2, [pc, #308]	; (80065d8 <HAL_DMA_Init+0x688>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a4b      	ldr	r2, [pc, #300]	; (80065dc <HAL_DMA_Init+0x68c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a4a      	ldr	r2, [pc, #296]	; (80065e0 <HAL_DMA_Init+0x690>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a48      	ldr	r2, [pc, #288]	; (80065e4 <HAL_DMA_Init+0x694>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a47      	ldr	r2, [pc, #284]	; (80065e8 <HAL_DMA_Init+0x698>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a45      	ldr	r2, [pc, #276]	; (80065ec <HAL_DMA_Init+0x69c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a44      	ldr	r2, [pc, #272]	; (80065f0 <HAL_DMA_Init+0x6a0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a42      	ldr	r2, [pc, #264]	; (80065f4 <HAL_DMA_Init+0x6a4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a41      	ldr	r2, [pc, #260]	; (80065f8 <HAL_DMA_Init+0x6a8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a3f      	ldr	r2, [pc, #252]	; (80065fc <HAL_DMA_Init+0x6ac>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a3e      	ldr	r2, [pc, #248]	; (8006600 <HAL_DMA_Init+0x6b0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_Init+0x5c6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3c      	ldr	r2, [pc, #240]	; (8006604 <HAL_DMA_Init+0x6b4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_DMA_Init+0x5ca>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_DMA_Init+0x5cc>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d032      	beq.n	8006586 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f002 fa43 	bl	80089ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	d102      	bne.n	8006534 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006548:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d010      	beq.n	8006574 <HAL_DMA_Init+0x624>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b08      	cmp	r3, #8
 8006558:	d80c      	bhi.n	8006574 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f002 fac0 	bl	8008ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	e008      	b.n	8006586 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	a7fdabf8 	.word	0xa7fdabf8
 80065a4:	cccccccd 	.word	0xcccccccd
 80065a8:	40020010 	.word	0x40020010
 80065ac:	40020028 	.word	0x40020028
 80065b0:	40020040 	.word	0x40020040
 80065b4:	40020058 	.word	0x40020058
 80065b8:	40020070 	.word	0x40020070
 80065bc:	40020088 	.word	0x40020088
 80065c0:	400200a0 	.word	0x400200a0
 80065c4:	400200b8 	.word	0x400200b8
 80065c8:	40020410 	.word	0x40020410
 80065cc:	40020428 	.word	0x40020428
 80065d0:	40020440 	.word	0x40020440
 80065d4:	40020458 	.word	0x40020458
 80065d8:	40020470 	.word	0x40020470
 80065dc:	40020488 	.word	0x40020488
 80065e0:	400204a0 	.word	0x400204a0
 80065e4:	400204b8 	.word	0x400204b8
 80065e8:	58025408 	.word	0x58025408
 80065ec:	5802541c 	.word	0x5802541c
 80065f0:	58025430 	.word	0x58025430
 80065f4:	58025444 	.word	0x58025444
 80065f8:	58025458 	.word	0x58025458
 80065fc:	5802546c 	.word	0x5802546c
 8006600:	58025480 	.word	0x58025480
 8006604:	58025494 	.word	0x58025494

08006608 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e226      	b.n	8006a72 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_DMA_Start_IT+0x2a>
 800662e:	2302      	movs	r3, #2
 8006630:	e21f      	b.n	8006a72 <HAL_DMA_Start_IT+0x46a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	f040 820a 	bne.w	8006a5c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a68      	ldr	r2, [pc, #416]	; (80067fc <HAL_DMA_Start_IT+0x1f4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d04a      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a66      	ldr	r2, [pc, #408]	; (8006800 <HAL_DMA_Start_IT+0x1f8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d045      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a65      	ldr	r2, [pc, #404]	; (8006804 <HAL_DMA_Start_IT+0x1fc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d040      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a63      	ldr	r2, [pc, #396]	; (8006808 <HAL_DMA_Start_IT+0x200>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d03b      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a62      	ldr	r2, [pc, #392]	; (800680c <HAL_DMA_Start_IT+0x204>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d036      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a60      	ldr	r2, [pc, #384]	; (8006810 <HAL_DMA_Start_IT+0x208>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d031      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a5f      	ldr	r2, [pc, #380]	; (8006814 <HAL_DMA_Start_IT+0x20c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d02c      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a5d      	ldr	r2, [pc, #372]	; (8006818 <HAL_DMA_Start_IT+0x210>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d027      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a5c      	ldr	r2, [pc, #368]	; (800681c <HAL_DMA_Start_IT+0x214>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a5a      	ldr	r2, [pc, #360]	; (8006820 <HAL_DMA_Start_IT+0x218>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a59      	ldr	r2, [pc, #356]	; (8006824 <HAL_DMA_Start_IT+0x21c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a57      	ldr	r2, [pc, #348]	; (8006828 <HAL_DMA_Start_IT+0x220>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a56      	ldr	r2, [pc, #344]	; (800682c <HAL_DMA_Start_IT+0x224>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a54      	ldr	r2, [pc, #336]	; (8006830 <HAL_DMA_Start_IT+0x228>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a53      	ldr	r2, [pc, #332]	; (8006834 <HAL_DMA_Start_IT+0x22c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_DMA_Start_IT+0xee>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a51      	ldr	r2, [pc, #324]	; (8006838 <HAL_DMA_Start_IT+0x230>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d108      	bne.n	8006708 <HAL_DMA_Start_IT+0x100>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0201 	bic.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e007      	b.n	8006718 <HAL_DMA_Start_IT+0x110>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f001 fe6a 	bl	80083f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a34      	ldr	r2, [pc, #208]	; (80067fc <HAL_DMA_Start_IT+0x1f4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d04a      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a33      	ldr	r2, [pc, #204]	; (8006800 <HAL_DMA_Start_IT+0x1f8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d045      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a31      	ldr	r2, [pc, #196]	; (8006804 <HAL_DMA_Start_IT+0x1fc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d040      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a30      	ldr	r2, [pc, #192]	; (8006808 <HAL_DMA_Start_IT+0x200>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d03b      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2e      	ldr	r2, [pc, #184]	; (800680c <HAL_DMA_Start_IT+0x204>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d036      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2d      	ldr	r2, [pc, #180]	; (8006810 <HAL_DMA_Start_IT+0x208>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d031      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a2b      	ldr	r2, [pc, #172]	; (8006814 <HAL_DMA_Start_IT+0x20c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02c      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <HAL_DMA_Start_IT+0x210>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d027      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a28      	ldr	r2, [pc, #160]	; (800681c <HAL_DMA_Start_IT+0x214>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <HAL_DMA_Start_IT+0x218>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d01d      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a25      	ldr	r2, [pc, #148]	; (8006824 <HAL_DMA_Start_IT+0x21c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a24      	ldr	r2, [pc, #144]	; (8006828 <HAL_DMA_Start_IT+0x220>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <HAL_DMA_Start_IT+0x224>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <HAL_DMA_Start_IT+0x228>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <HAL_DMA_Start_IT+0x22c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_DMA_Start_IT+0x1bc>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1e      	ldr	r2, [pc, #120]	; (8006838 <HAL_DMA_Start_IT+0x230>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d101      	bne.n	80067c8 <HAL_DMA_Start_IT+0x1c0>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <HAL_DMA_Start_IT+0x1c2>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d036      	beq.n	800683c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f023 021e 	bic.w	r2, r3, #30
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0216 	orr.w	r2, r2, #22
 80067e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d03e      	beq.n	8006868 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0208 	orr.w	r2, r2, #8
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e035      	b.n	8006868 <HAL_DMA_Start_IT+0x260>
 80067fc:	40020010 	.word	0x40020010
 8006800:	40020028 	.word	0x40020028
 8006804:	40020040 	.word	0x40020040
 8006808:	40020058 	.word	0x40020058
 800680c:	40020070 	.word	0x40020070
 8006810:	40020088 	.word	0x40020088
 8006814:	400200a0 	.word	0x400200a0
 8006818:	400200b8 	.word	0x400200b8
 800681c:	40020410 	.word	0x40020410
 8006820:	40020428 	.word	0x40020428
 8006824:	40020440 	.word	0x40020440
 8006828:	40020458 	.word	0x40020458
 800682c:	40020470 	.word	0x40020470
 8006830:	40020488 	.word	0x40020488
 8006834:	400204a0 	.word	0x400204a0
 8006838:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 020e 	bic.w	r2, r3, #14
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 020a 	orr.w	r2, r2, #10
 800684e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0204 	orr.w	r2, r2, #4
 8006866:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a83      	ldr	r2, [pc, #524]	; (8006a7c <HAL_DMA_Start_IT+0x474>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d072      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a82      	ldr	r2, [pc, #520]	; (8006a80 <HAL_DMA_Start_IT+0x478>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d06d      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a80      	ldr	r2, [pc, #512]	; (8006a84 <HAL_DMA_Start_IT+0x47c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d068      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a7f      	ldr	r2, [pc, #508]	; (8006a88 <HAL_DMA_Start_IT+0x480>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d063      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a7d      	ldr	r2, [pc, #500]	; (8006a8c <HAL_DMA_Start_IT+0x484>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d05e      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a7c      	ldr	r2, [pc, #496]	; (8006a90 <HAL_DMA_Start_IT+0x488>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d059      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a7a      	ldr	r2, [pc, #488]	; (8006a94 <HAL_DMA_Start_IT+0x48c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d054      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a79      	ldr	r2, [pc, #484]	; (8006a98 <HAL_DMA_Start_IT+0x490>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d04f      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a77      	ldr	r2, [pc, #476]	; (8006a9c <HAL_DMA_Start_IT+0x494>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d04a      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a76      	ldr	r2, [pc, #472]	; (8006aa0 <HAL_DMA_Start_IT+0x498>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d045      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a74      	ldr	r2, [pc, #464]	; (8006aa4 <HAL_DMA_Start_IT+0x49c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d040      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a73      	ldr	r2, [pc, #460]	; (8006aa8 <HAL_DMA_Start_IT+0x4a0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d03b      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a71      	ldr	r2, [pc, #452]	; (8006aac <HAL_DMA_Start_IT+0x4a4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d036      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a70      	ldr	r2, [pc, #448]	; (8006ab0 <HAL_DMA_Start_IT+0x4a8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d031      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a6e      	ldr	r2, [pc, #440]	; (8006ab4 <HAL_DMA_Start_IT+0x4ac>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02c      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a6d      	ldr	r2, [pc, #436]	; (8006ab8 <HAL_DMA_Start_IT+0x4b0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d027      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a6b      	ldr	r2, [pc, #428]	; (8006abc <HAL_DMA_Start_IT+0x4b4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6a      	ldr	r2, [pc, #424]	; (8006ac0 <HAL_DMA_Start_IT+0x4b8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a68      	ldr	r2, [pc, #416]	; (8006ac4 <HAL_DMA_Start_IT+0x4bc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a67      	ldr	r2, [pc, #412]	; (8006ac8 <HAL_DMA_Start_IT+0x4c0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a65      	ldr	r2, [pc, #404]	; (8006acc <HAL_DMA_Start_IT+0x4c4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a64      	ldr	r2, [pc, #400]	; (8006ad0 <HAL_DMA_Start_IT+0x4c8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a62      	ldr	r2, [pc, #392]	; (8006ad4 <HAL_DMA_Start_IT+0x4cc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_DMA_Start_IT+0x350>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a61      	ldr	r2, [pc, #388]	; (8006ad8 <HAL_DMA_Start_IT+0x4d0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d101      	bne.n	800695c <HAL_DMA_Start_IT+0x354>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <HAL_DMA_Start_IT+0x356>
 800695c:	2300      	movs	r3, #0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01a      	beq.n	8006998 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800697e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006996:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a37      	ldr	r2, [pc, #220]	; (8006a7c <HAL_DMA_Start_IT+0x474>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d04a      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a36      	ldr	r2, [pc, #216]	; (8006a80 <HAL_DMA_Start_IT+0x478>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d045      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a34      	ldr	r2, [pc, #208]	; (8006a84 <HAL_DMA_Start_IT+0x47c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d040      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a33      	ldr	r2, [pc, #204]	; (8006a88 <HAL_DMA_Start_IT+0x480>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d03b      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a31      	ldr	r2, [pc, #196]	; (8006a8c <HAL_DMA_Start_IT+0x484>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d036      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a30      	ldr	r2, [pc, #192]	; (8006a90 <HAL_DMA_Start_IT+0x488>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d031      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a2e      	ldr	r2, [pc, #184]	; (8006a94 <HAL_DMA_Start_IT+0x48c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d02c      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2d      	ldr	r2, [pc, #180]	; (8006a98 <HAL_DMA_Start_IT+0x490>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d027      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <HAL_DMA_Start_IT+0x494>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d022      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <HAL_DMA_Start_IT+0x498>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d01d      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <HAL_DMA_Start_IT+0x49c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d018      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <HAL_DMA_Start_IT+0x4a0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d013      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a25      	ldr	r2, [pc, #148]	; (8006aac <HAL_DMA_Start_IT+0x4a4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00e      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <HAL_DMA_Start_IT+0x4a8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <HAL_DMA_Start_IT+0x4ac>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_DMA_Start_IT+0x430>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <HAL_DMA_Start_IT+0x4b0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d108      	bne.n	8006a4a <HAL_DMA_Start_IT+0x442>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e012      	b.n	8006a70 <HAL_DMA_Start_IT+0x468>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e009      	b.n	8006a70 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40020010 	.word	0x40020010
 8006a80:	40020028 	.word	0x40020028
 8006a84:	40020040 	.word	0x40020040
 8006a88:	40020058 	.word	0x40020058
 8006a8c:	40020070 	.word	0x40020070
 8006a90:	40020088 	.word	0x40020088
 8006a94:	400200a0 	.word	0x400200a0
 8006a98:	400200b8 	.word	0x400200b8
 8006a9c:	40020410 	.word	0x40020410
 8006aa0:	40020428 	.word	0x40020428
 8006aa4:	40020440 	.word	0x40020440
 8006aa8:	40020458 	.word	0x40020458
 8006aac:	40020470 	.word	0x40020470
 8006ab0:	40020488 	.word	0x40020488
 8006ab4:	400204a0 	.word	0x400204a0
 8006ab8:	400204b8 	.word	0x400204b8
 8006abc:	58025408 	.word	0x58025408
 8006ac0:	5802541c 	.word	0x5802541c
 8006ac4:	58025430 	.word	0x58025430
 8006ac8:	58025444 	.word	0x58025444
 8006acc:	58025458 	.word	0x58025458
 8006ad0:	5802546c 	.word	0x5802546c
 8006ad4:	58025480 	.word	0x58025480
 8006ad8:	58025494 	.word	0x58025494

08006adc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006ae4:	f7fd f90c 	bl	8003d00 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e2dc      	b.n	80070ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d008      	beq.n	8006b12 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2280      	movs	r2, #128	; 0x80
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e2cd      	b.n	80070ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a76      	ldr	r2, [pc, #472]	; (8006cf0 <HAL_DMA_Abort+0x214>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d04a      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a74      	ldr	r2, [pc, #464]	; (8006cf4 <HAL_DMA_Abort+0x218>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d045      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a73      	ldr	r2, [pc, #460]	; (8006cf8 <HAL_DMA_Abort+0x21c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d040      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a71      	ldr	r2, [pc, #452]	; (8006cfc <HAL_DMA_Abort+0x220>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d03b      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a70      	ldr	r2, [pc, #448]	; (8006d00 <HAL_DMA_Abort+0x224>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d036      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6e      	ldr	r2, [pc, #440]	; (8006d04 <HAL_DMA_Abort+0x228>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d031      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a6d      	ldr	r2, [pc, #436]	; (8006d08 <HAL_DMA_Abort+0x22c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d02c      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a6b      	ldr	r2, [pc, #428]	; (8006d0c <HAL_DMA_Abort+0x230>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d027      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a6a      	ldr	r2, [pc, #424]	; (8006d10 <HAL_DMA_Abort+0x234>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d022      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a68      	ldr	r2, [pc, #416]	; (8006d14 <HAL_DMA_Abort+0x238>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01d      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a67      	ldr	r2, [pc, #412]	; (8006d18 <HAL_DMA_Abort+0x23c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a65      	ldr	r2, [pc, #404]	; (8006d1c <HAL_DMA_Abort+0x240>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a64      	ldr	r2, [pc, #400]	; (8006d20 <HAL_DMA_Abort+0x244>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a62      	ldr	r2, [pc, #392]	; (8006d24 <HAL_DMA_Abort+0x248>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a61      	ldr	r2, [pc, #388]	; (8006d28 <HAL_DMA_Abort+0x24c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_DMA_Abort+0xd6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a5f      	ldr	r2, [pc, #380]	; (8006d2c <HAL_DMA_Abort+0x250>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_DMA_Abort+0xda>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <HAL_DMA_Abort+0xdc>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d013      	beq.n	8006be4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 021e 	bic.w	r2, r2, #30
 8006bca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bda:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e00a      	b.n	8006bfa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 020e 	bic.w	r2, r2, #14
 8006bf2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3c      	ldr	r2, [pc, #240]	; (8006cf0 <HAL_DMA_Abort+0x214>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d072      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a3a      	ldr	r2, [pc, #232]	; (8006cf4 <HAL_DMA_Abort+0x218>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d06d      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a39      	ldr	r2, [pc, #228]	; (8006cf8 <HAL_DMA_Abort+0x21c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d068      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a37      	ldr	r2, [pc, #220]	; (8006cfc <HAL_DMA_Abort+0x220>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d063      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a36      	ldr	r2, [pc, #216]	; (8006d00 <HAL_DMA_Abort+0x224>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d05e      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a34      	ldr	r2, [pc, #208]	; (8006d04 <HAL_DMA_Abort+0x228>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d059      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	; (8006d08 <HAL_DMA_Abort+0x22c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d054      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a31      	ldr	r2, [pc, #196]	; (8006d0c <HAL_DMA_Abort+0x230>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d04f      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a30      	ldr	r2, [pc, #192]	; (8006d10 <HAL_DMA_Abort+0x234>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d04a      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2e      	ldr	r2, [pc, #184]	; (8006d14 <HAL_DMA_Abort+0x238>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d045      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2d      	ldr	r2, [pc, #180]	; (8006d18 <HAL_DMA_Abort+0x23c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d040      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <HAL_DMA_Abort+0x240>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d03b      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <HAL_DMA_Abort+0x244>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d036      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <HAL_DMA_Abort+0x248>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d031      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a27      	ldr	r2, [pc, #156]	; (8006d28 <HAL_DMA_Abort+0x24c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d02c      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a25      	ldr	r2, [pc, #148]	; (8006d2c <HAL_DMA_Abort+0x250>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d027      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <HAL_DMA_Abort+0x254>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d022      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a22      	ldr	r2, [pc, #136]	; (8006d34 <HAL_DMA_Abort+0x258>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_DMA_Abort+0x25c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <HAL_DMA_Abort+0x260>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1e      	ldr	r2, [pc, #120]	; (8006d40 <HAL_DMA_Abort+0x264>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_DMA_Abort+0x268>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1b      	ldr	r2, [pc, #108]	; (8006d48 <HAL_DMA_Abort+0x26c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_DMA_Abort+0x20e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_DMA_Abort+0x270>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d132      	bne.n	8006d50 <HAL_DMA_Abort+0x274>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e031      	b.n	8006d52 <HAL_DMA_Abort+0x276>
 8006cee:	bf00      	nop
 8006cf0:	40020010 	.word	0x40020010
 8006cf4:	40020028 	.word	0x40020028
 8006cf8:	40020040 	.word	0x40020040
 8006cfc:	40020058 	.word	0x40020058
 8006d00:	40020070 	.word	0x40020070
 8006d04:	40020088 	.word	0x40020088
 8006d08:	400200a0 	.word	0x400200a0
 8006d0c:	400200b8 	.word	0x400200b8
 8006d10:	40020410 	.word	0x40020410
 8006d14:	40020428 	.word	0x40020428
 8006d18:	40020440 	.word	0x40020440
 8006d1c:	40020458 	.word	0x40020458
 8006d20:	40020470 	.word	0x40020470
 8006d24:	40020488 	.word	0x40020488
 8006d28:	400204a0 	.word	0x400204a0
 8006d2c:	400204b8 	.word	0x400204b8
 8006d30:	58025408 	.word	0x58025408
 8006d34:	5802541c 	.word	0x5802541c
 8006d38:	58025430 	.word	0x58025430
 8006d3c:	58025444 	.word	0x58025444
 8006d40:	58025458 	.word	0x58025458
 8006d44:	5802546c 	.word	0x5802546c
 8006d48:	58025480 	.word	0x58025480
 8006d4c:	58025494 	.word	0x58025494
 8006d50:	2300      	movs	r3, #0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a6d      	ldr	r2, [pc, #436]	; (8006f20 <HAL_DMA_Abort+0x444>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04a      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a6b      	ldr	r2, [pc, #428]	; (8006f24 <HAL_DMA_Abort+0x448>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d045      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a6a      	ldr	r2, [pc, #424]	; (8006f28 <HAL_DMA_Abort+0x44c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d040      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a68      	ldr	r2, [pc, #416]	; (8006f2c <HAL_DMA_Abort+0x450>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d03b      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a67      	ldr	r2, [pc, #412]	; (8006f30 <HAL_DMA_Abort+0x454>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d036      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a65      	ldr	r2, [pc, #404]	; (8006f34 <HAL_DMA_Abort+0x458>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d031      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a64      	ldr	r2, [pc, #400]	; (8006f38 <HAL_DMA_Abort+0x45c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d02c      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a62      	ldr	r2, [pc, #392]	; (8006f3c <HAL_DMA_Abort+0x460>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d027      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a61      	ldr	r2, [pc, #388]	; (8006f40 <HAL_DMA_Abort+0x464>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a5f      	ldr	r2, [pc, #380]	; (8006f44 <HAL_DMA_Abort+0x468>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a5e      	ldr	r2, [pc, #376]	; (8006f48 <HAL_DMA_Abort+0x46c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5c      	ldr	r2, [pc, #368]	; (8006f4c <HAL_DMA_Abort+0x470>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5b      	ldr	r2, [pc, #364]	; (8006f50 <HAL_DMA_Abort+0x474>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a59      	ldr	r2, [pc, #356]	; (8006f54 <HAL_DMA_Abort+0x478>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <HAL_DMA_Abort+0x47c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_Abort+0x32a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a56      	ldr	r2, [pc, #344]	; (8006f5c <HAL_DMA_Abort+0x480>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <HAL_DMA_Abort+0x33c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0201 	bic.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <HAL_DMA_Abort+0x34c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e28:	e013      	b.n	8006e52 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e2a:	f7fc ff69 	bl	8003d00 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b05      	cmp	r3, #5
 8006e36:	d90c      	bls.n	8006e52 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2203      	movs	r2, #3
 8006e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e12d      	b.n	80070ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e5      	bne.n	8006e2a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2f      	ldr	r2, [pc, #188]	; (8006f20 <HAL_DMA_Abort+0x444>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04a      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2d      	ldr	r2, [pc, #180]	; (8006f24 <HAL_DMA_Abort+0x448>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d045      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <HAL_DMA_Abort+0x44c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d040      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <HAL_DMA_Abort+0x450>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d03b      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a29      	ldr	r2, [pc, #164]	; (8006f30 <HAL_DMA_Abort+0x454>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d036      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a27      	ldr	r2, [pc, #156]	; (8006f34 <HAL_DMA_Abort+0x458>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d031      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <HAL_DMA_Abort+0x45c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d02c      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <HAL_DMA_Abort+0x460>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d027      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <HAL_DMA_Abort+0x464>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <HAL_DMA_Abort+0x468>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a20      	ldr	r2, [pc, #128]	; (8006f48 <HAL_DMA_Abort+0x46c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d018      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_DMA_Abort+0x470>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <HAL_DMA_Abort+0x474>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_DMA_Abort+0x478>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <HAL_DMA_Abort+0x47c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_DMA_Abort+0x422>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_DMA_Abort+0x480>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d101      	bne.n	8006f02 <HAL_DMA_Abort+0x426>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <HAL_DMA_Abort+0x428>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02b      	beq.n	8006f60 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	223f      	movs	r2, #63	; 0x3f
 8006f18:	409a      	lsls	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	e02a      	b.n	8006f76 <HAL_DMA_Abort+0x49a>
 8006f20:	40020010 	.word	0x40020010
 8006f24:	40020028 	.word	0x40020028
 8006f28:	40020040 	.word	0x40020040
 8006f2c:	40020058 	.word	0x40020058
 8006f30:	40020070 	.word	0x40020070
 8006f34:	40020088 	.word	0x40020088
 8006f38:	400200a0 	.word	0x400200a0
 8006f3c:	400200b8 	.word	0x400200b8
 8006f40:	40020410 	.word	0x40020410
 8006f44:	40020428 	.word	0x40020428
 8006f48:	40020440 	.word	0x40020440
 8006f4c:	40020458 	.word	0x40020458
 8006f50:	40020470 	.word	0x40020470
 8006f54:	40020488 	.word	0x40020488
 8006f58:	400204a0 	.word	0x400204a0
 8006f5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2201      	movs	r2, #1
 8006f70:	409a      	lsls	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a4f      	ldr	r2, [pc, #316]	; (80070b8 <HAL_DMA_Abort+0x5dc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d072      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a4d      	ldr	r2, [pc, #308]	; (80070bc <HAL_DMA_Abort+0x5e0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d06d      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a4c      	ldr	r2, [pc, #304]	; (80070c0 <HAL_DMA_Abort+0x5e4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d068      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a4a      	ldr	r2, [pc, #296]	; (80070c4 <HAL_DMA_Abort+0x5e8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d063      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a49      	ldr	r2, [pc, #292]	; (80070c8 <HAL_DMA_Abort+0x5ec>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d05e      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a47      	ldr	r2, [pc, #284]	; (80070cc <HAL_DMA_Abort+0x5f0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d059      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a46      	ldr	r2, [pc, #280]	; (80070d0 <HAL_DMA_Abort+0x5f4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d054      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a44      	ldr	r2, [pc, #272]	; (80070d4 <HAL_DMA_Abort+0x5f8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d04f      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a43      	ldr	r2, [pc, #268]	; (80070d8 <HAL_DMA_Abort+0x5fc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d04a      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a41      	ldr	r2, [pc, #260]	; (80070dc <HAL_DMA_Abort+0x600>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d045      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a40      	ldr	r2, [pc, #256]	; (80070e0 <HAL_DMA_Abort+0x604>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d040      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a3e      	ldr	r2, [pc, #248]	; (80070e4 <HAL_DMA_Abort+0x608>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d03b      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a3d      	ldr	r2, [pc, #244]	; (80070e8 <HAL_DMA_Abort+0x60c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d036      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a3b      	ldr	r2, [pc, #236]	; (80070ec <HAL_DMA_Abort+0x610>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d031      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a3a      	ldr	r2, [pc, #232]	; (80070f0 <HAL_DMA_Abort+0x614>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d02c      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a38      	ldr	r2, [pc, #224]	; (80070f4 <HAL_DMA_Abort+0x618>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d027      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a37      	ldr	r2, [pc, #220]	; (80070f8 <HAL_DMA_Abort+0x61c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d022      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a35      	ldr	r2, [pc, #212]	; (80070fc <HAL_DMA_Abort+0x620>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01d      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a34      	ldr	r2, [pc, #208]	; (8007100 <HAL_DMA_Abort+0x624>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d018      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a32      	ldr	r2, [pc, #200]	; (8007104 <HAL_DMA_Abort+0x628>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a31      	ldr	r2, [pc, #196]	; (8007108 <HAL_DMA_Abort+0x62c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00e      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2f      	ldr	r2, [pc, #188]	; (800710c <HAL_DMA_Abort+0x630>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d009      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2e      	ldr	r2, [pc, #184]	; (8007110 <HAL_DMA_Abort+0x634>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_DMA_Abort+0x58a>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a2c      	ldr	r2, [pc, #176]	; (8007114 <HAL_DMA_Abort+0x638>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d101      	bne.n	800706a <HAL_DMA_Abort+0x58e>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <HAL_DMA_Abort+0x590>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d015      	beq.n	800709c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007078:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00c      	beq.n	800709c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007090:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800709a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40020010 	.word	0x40020010
 80070bc:	40020028 	.word	0x40020028
 80070c0:	40020040 	.word	0x40020040
 80070c4:	40020058 	.word	0x40020058
 80070c8:	40020070 	.word	0x40020070
 80070cc:	40020088 	.word	0x40020088
 80070d0:	400200a0 	.word	0x400200a0
 80070d4:	400200b8 	.word	0x400200b8
 80070d8:	40020410 	.word	0x40020410
 80070dc:	40020428 	.word	0x40020428
 80070e0:	40020440 	.word	0x40020440
 80070e4:	40020458 	.word	0x40020458
 80070e8:	40020470 	.word	0x40020470
 80070ec:	40020488 	.word	0x40020488
 80070f0:	400204a0 	.word	0x400204a0
 80070f4:	400204b8 	.word	0x400204b8
 80070f8:	58025408 	.word	0x58025408
 80070fc:	5802541c 	.word	0x5802541c
 8007100:	58025430 	.word	0x58025430
 8007104:	58025444 	.word	0x58025444
 8007108:	58025458 	.word	0x58025458
 800710c:	5802546c 	.word	0x5802546c
 8007110:	58025480 	.word	0x58025480
 8007114:	58025494 	.word	0x58025494

08007118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e237      	b.n	800759a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d004      	beq.n	8007140 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e22c      	b.n	800759a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a5c      	ldr	r2, [pc, #368]	; (80072b8 <HAL_DMA_Abort_IT+0x1a0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d04a      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a5b      	ldr	r2, [pc, #364]	; (80072bc <HAL_DMA_Abort_IT+0x1a4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d045      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a59      	ldr	r2, [pc, #356]	; (80072c0 <HAL_DMA_Abort_IT+0x1a8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d040      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a58      	ldr	r2, [pc, #352]	; (80072c4 <HAL_DMA_Abort_IT+0x1ac>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d03b      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a56      	ldr	r2, [pc, #344]	; (80072c8 <HAL_DMA_Abort_IT+0x1b0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d036      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a55      	ldr	r2, [pc, #340]	; (80072cc <HAL_DMA_Abort_IT+0x1b4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d031      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a53      	ldr	r2, [pc, #332]	; (80072d0 <HAL_DMA_Abort_IT+0x1b8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d02c      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a52      	ldr	r2, [pc, #328]	; (80072d4 <HAL_DMA_Abort_IT+0x1bc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d027      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a50      	ldr	r2, [pc, #320]	; (80072d8 <HAL_DMA_Abort_IT+0x1c0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d022      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a4f      	ldr	r2, [pc, #316]	; (80072dc <HAL_DMA_Abort_IT+0x1c4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d01d      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a4d      	ldr	r2, [pc, #308]	; (80072e0 <HAL_DMA_Abort_IT+0x1c8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d018      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a4c      	ldr	r2, [pc, #304]	; (80072e4 <HAL_DMA_Abort_IT+0x1cc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d013      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a4a      	ldr	r2, [pc, #296]	; (80072e8 <HAL_DMA_Abort_IT+0x1d0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00e      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a49      	ldr	r2, [pc, #292]	; (80072ec <HAL_DMA_Abort_IT+0x1d4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d009      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a47      	ldr	r2, [pc, #284]	; (80072f0 <HAL_DMA_Abort_IT+0x1d8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d004      	beq.n	80071e0 <HAL_DMA_Abort_IT+0xc8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a46      	ldr	r2, [pc, #280]	; (80072f4 <HAL_DMA_Abort_IT+0x1dc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d101      	bne.n	80071e4 <HAL_DMA_Abort_IT+0xcc>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <HAL_DMA_Abort_IT+0xce>
 80071e4:	2300      	movs	r3, #0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 8086 	beq.w	80072f8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2f      	ldr	r2, [pc, #188]	; (80072b8 <HAL_DMA_Abort_IT+0x1a0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d04a      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2e      	ldr	r2, [pc, #184]	; (80072bc <HAL_DMA_Abort_IT+0x1a4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d045      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2c      	ldr	r2, [pc, #176]	; (80072c0 <HAL_DMA_Abort_IT+0x1a8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d040      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2b      	ldr	r2, [pc, #172]	; (80072c4 <HAL_DMA_Abort_IT+0x1ac>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d03b      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <HAL_DMA_Abort_IT+0x1b0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d036      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a28      	ldr	r2, [pc, #160]	; (80072cc <HAL_DMA_Abort_IT+0x1b4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d031      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <HAL_DMA_Abort_IT+0x1b8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d02c      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a25      	ldr	r2, [pc, #148]	; (80072d4 <HAL_DMA_Abort_IT+0x1bc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d027      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a23      	ldr	r2, [pc, #140]	; (80072d8 <HAL_DMA_Abort_IT+0x1c0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d022      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a22      	ldr	r2, [pc, #136]	; (80072dc <HAL_DMA_Abort_IT+0x1c4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d01d      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <HAL_DMA_Abort_IT+0x1c8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d018      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <HAL_DMA_Abort_IT+0x1cc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1d      	ldr	r2, [pc, #116]	; (80072e8 <HAL_DMA_Abort_IT+0x1d0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00e      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1c      	ldr	r2, [pc, #112]	; (80072ec <HAL_DMA_Abort_IT+0x1d4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d009      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_DMA_Abort_IT+0x1d8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d004      	beq.n	8007294 <HAL_DMA_Abort_IT+0x17c>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <HAL_DMA_Abort_IT+0x1dc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <HAL_DMA_Abort_IT+0x18e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0201 	bic.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e178      	b.n	8007598 <HAL_DMA_Abort_IT+0x480>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	e16f      	b.n	8007598 <HAL_DMA_Abort_IT+0x480>
 80072b8:	40020010 	.word	0x40020010
 80072bc:	40020028 	.word	0x40020028
 80072c0:	40020040 	.word	0x40020040
 80072c4:	40020058 	.word	0x40020058
 80072c8:	40020070 	.word	0x40020070
 80072cc:	40020088 	.word	0x40020088
 80072d0:	400200a0 	.word	0x400200a0
 80072d4:	400200b8 	.word	0x400200b8
 80072d8:	40020410 	.word	0x40020410
 80072dc:	40020428 	.word	0x40020428
 80072e0:	40020440 	.word	0x40020440
 80072e4:	40020458 	.word	0x40020458
 80072e8:	40020470 	.word	0x40020470
 80072ec:	40020488 	.word	0x40020488
 80072f0:	400204a0 	.word	0x400204a0
 80072f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 020e 	bic.w	r2, r2, #14
 8007306:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a6c      	ldr	r2, [pc, #432]	; (80074c0 <HAL_DMA_Abort_IT+0x3a8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d04a      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a6b      	ldr	r2, [pc, #428]	; (80074c4 <HAL_DMA_Abort_IT+0x3ac>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d045      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a69      	ldr	r2, [pc, #420]	; (80074c8 <HAL_DMA_Abort_IT+0x3b0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d040      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a68      	ldr	r2, [pc, #416]	; (80074cc <HAL_DMA_Abort_IT+0x3b4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d03b      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a66      	ldr	r2, [pc, #408]	; (80074d0 <HAL_DMA_Abort_IT+0x3b8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d036      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a65      	ldr	r2, [pc, #404]	; (80074d4 <HAL_DMA_Abort_IT+0x3bc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d031      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a63      	ldr	r2, [pc, #396]	; (80074d8 <HAL_DMA_Abort_IT+0x3c0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d02c      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a62      	ldr	r2, [pc, #392]	; (80074dc <HAL_DMA_Abort_IT+0x3c4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d027      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a60      	ldr	r2, [pc, #384]	; (80074e0 <HAL_DMA_Abort_IT+0x3c8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d022      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a5f      	ldr	r2, [pc, #380]	; (80074e4 <HAL_DMA_Abort_IT+0x3cc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d01d      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a5d      	ldr	r2, [pc, #372]	; (80074e8 <HAL_DMA_Abort_IT+0x3d0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a5c      	ldr	r2, [pc, #368]	; (80074ec <HAL_DMA_Abort_IT+0x3d4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a5a      	ldr	r2, [pc, #360]	; (80074f0 <HAL_DMA_Abort_IT+0x3d8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a59      	ldr	r2, [pc, #356]	; (80074f4 <HAL_DMA_Abort_IT+0x3dc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a57      	ldr	r2, [pc, #348]	; (80074f8 <HAL_DMA_Abort_IT+0x3e0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_DMA_Abort_IT+0x290>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a56      	ldr	r2, [pc, #344]	; (80074fc <HAL_DMA_Abort_IT+0x3e4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d108      	bne.n	80073ba <HAL_DMA_Abort_IT+0x2a2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e007      	b.n	80073ca <HAL_DMA_Abort_IT+0x2b2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a3c      	ldr	r2, [pc, #240]	; (80074c0 <HAL_DMA_Abort_IT+0x3a8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d072      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3a      	ldr	r2, [pc, #232]	; (80074c4 <HAL_DMA_Abort_IT+0x3ac>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d06d      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a39      	ldr	r2, [pc, #228]	; (80074c8 <HAL_DMA_Abort_IT+0x3b0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d068      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a37      	ldr	r2, [pc, #220]	; (80074cc <HAL_DMA_Abort_IT+0x3b4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d063      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a36      	ldr	r2, [pc, #216]	; (80074d0 <HAL_DMA_Abort_IT+0x3b8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d05e      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a34      	ldr	r2, [pc, #208]	; (80074d4 <HAL_DMA_Abort_IT+0x3bc>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d059      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a33      	ldr	r2, [pc, #204]	; (80074d8 <HAL_DMA_Abort_IT+0x3c0>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d054      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a31      	ldr	r2, [pc, #196]	; (80074dc <HAL_DMA_Abort_IT+0x3c4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d04f      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a30      	ldr	r2, [pc, #192]	; (80074e0 <HAL_DMA_Abort_IT+0x3c8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d04a      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a2e      	ldr	r2, [pc, #184]	; (80074e4 <HAL_DMA_Abort_IT+0x3cc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d045      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2d      	ldr	r2, [pc, #180]	; (80074e8 <HAL_DMA_Abort_IT+0x3d0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d040      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2b      	ldr	r2, [pc, #172]	; (80074ec <HAL_DMA_Abort_IT+0x3d4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d03b      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <HAL_DMA_Abort_IT+0x3d8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d036      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a28      	ldr	r2, [pc, #160]	; (80074f4 <HAL_DMA_Abort_IT+0x3dc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d031      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a27      	ldr	r2, [pc, #156]	; (80074f8 <HAL_DMA_Abort_IT+0x3e0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d02c      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <HAL_DMA_Abort_IT+0x3e4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d027      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a24      	ldr	r2, [pc, #144]	; (8007500 <HAL_DMA_Abort_IT+0x3e8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d022      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <HAL_DMA_Abort_IT+0x3ec>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01d      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a21      	ldr	r2, [pc, #132]	; (8007508 <HAL_DMA_Abort_IT+0x3f0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d018      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1f      	ldr	r2, [pc, #124]	; (800750c <HAL_DMA_Abort_IT+0x3f4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <HAL_DMA_Abort_IT+0x3f8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <HAL_DMA_Abort_IT+0x3fc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <HAL_DMA_Abort_IT+0x400>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_DMA_Abort_IT+0x3a2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <HAL_DMA_Abort_IT+0x404>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d132      	bne.n	8007520 <HAL_DMA_Abort_IT+0x408>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e031      	b.n	8007522 <HAL_DMA_Abort_IT+0x40a>
 80074be:	bf00      	nop
 80074c0:	40020010 	.word	0x40020010
 80074c4:	40020028 	.word	0x40020028
 80074c8:	40020040 	.word	0x40020040
 80074cc:	40020058 	.word	0x40020058
 80074d0:	40020070 	.word	0x40020070
 80074d4:	40020088 	.word	0x40020088
 80074d8:	400200a0 	.word	0x400200a0
 80074dc:	400200b8 	.word	0x400200b8
 80074e0:	40020410 	.word	0x40020410
 80074e4:	40020428 	.word	0x40020428
 80074e8:	40020440 	.word	0x40020440
 80074ec:	40020458 	.word	0x40020458
 80074f0:	40020470 	.word	0x40020470
 80074f4:	40020488 	.word	0x40020488
 80074f8:	400204a0 	.word	0x400204a0
 80074fc:	400204b8 	.word	0x400204b8
 8007500:	58025408 	.word	0x58025408
 8007504:	5802541c 	.word	0x5802541c
 8007508:	58025430 	.word	0x58025430
 800750c:	58025444 	.word	0x58025444
 8007510:	58025458 	.word	0x58025458
 8007514:	5802546c 	.word	0x5802546c
 8007518:	58025480 	.word	0x58025480
 800751c:	58025494 	.word	0x58025494
 8007520:	2300      	movs	r3, #0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d028      	beq.n	8007578 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007534:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2201      	movs	r2, #1
 8007546:	409a      	lsls	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007554:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800756c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007576:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop

080075a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075b0:	4b67      	ldr	r3, [pc, #412]	; (8007750 <HAL_DMA_IRQHandler+0x1ac>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a67      	ldr	r2, [pc, #412]	; (8007754 <HAL_DMA_IRQHandler+0x1b0>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	0a9b      	lsrs	r3, r3, #10
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a5f      	ldr	r2, [pc, #380]	; (8007758 <HAL_DMA_IRQHandler+0x1b4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d04a      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a5d      	ldr	r2, [pc, #372]	; (800775c <HAL_DMA_IRQHandler+0x1b8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d045      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a5c      	ldr	r2, [pc, #368]	; (8007760 <HAL_DMA_IRQHandler+0x1bc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d040      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a5a      	ldr	r2, [pc, #360]	; (8007764 <HAL_DMA_IRQHandler+0x1c0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d03b      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a59      	ldr	r2, [pc, #356]	; (8007768 <HAL_DMA_IRQHandler+0x1c4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d036      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a57      	ldr	r2, [pc, #348]	; (800776c <HAL_DMA_IRQHandler+0x1c8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d031      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a56      	ldr	r2, [pc, #344]	; (8007770 <HAL_DMA_IRQHandler+0x1cc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d02c      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a54      	ldr	r2, [pc, #336]	; (8007774 <HAL_DMA_IRQHandler+0x1d0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d027      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a53      	ldr	r2, [pc, #332]	; (8007778 <HAL_DMA_IRQHandler+0x1d4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d022      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a51      	ldr	r2, [pc, #324]	; (800777c <HAL_DMA_IRQHandler+0x1d8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d01d      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a50      	ldr	r2, [pc, #320]	; (8007780 <HAL_DMA_IRQHandler+0x1dc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d018      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a4e      	ldr	r2, [pc, #312]	; (8007784 <HAL_DMA_IRQHandler+0x1e0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a4d      	ldr	r2, [pc, #308]	; (8007788 <HAL_DMA_IRQHandler+0x1e4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00e      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a4b      	ldr	r2, [pc, #300]	; (800778c <HAL_DMA_IRQHandler+0x1e8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d009      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a4a      	ldr	r2, [pc, #296]	; (8007790 <HAL_DMA_IRQHandler+0x1ec>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_DMA_IRQHandler+0xd2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a48      	ldr	r2, [pc, #288]	; (8007794 <HAL_DMA_IRQHandler+0x1f0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d101      	bne.n	800767a <HAL_DMA_IRQHandler+0xd6>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <HAL_DMA_IRQHandler+0xd8>
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 842b 	beq.w	8007ed8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	2208      	movs	r2, #8
 800768c:	409a      	lsls	r2, r3
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	4013      	ands	r3, r2
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 80a2 	beq.w	80077dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a2e      	ldr	r2, [pc, #184]	; (8007758 <HAL_DMA_IRQHandler+0x1b4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d04a      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2d      	ldr	r2, [pc, #180]	; (800775c <HAL_DMA_IRQHandler+0x1b8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d045      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2b      	ldr	r2, [pc, #172]	; (8007760 <HAL_DMA_IRQHandler+0x1bc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d040      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <HAL_DMA_IRQHandler+0x1c0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d03b      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a28      	ldr	r2, [pc, #160]	; (8007768 <HAL_DMA_IRQHandler+0x1c4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d036      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a27      	ldr	r2, [pc, #156]	; (800776c <HAL_DMA_IRQHandler+0x1c8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d031      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a25      	ldr	r2, [pc, #148]	; (8007770 <HAL_DMA_IRQHandler+0x1cc>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d02c      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a24      	ldr	r2, [pc, #144]	; (8007774 <HAL_DMA_IRQHandler+0x1d0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d027      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a22      	ldr	r2, [pc, #136]	; (8007778 <HAL_DMA_IRQHandler+0x1d4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d022      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	; (800777c <HAL_DMA_IRQHandler+0x1d8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d01d      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <HAL_DMA_IRQHandler+0x1dc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <HAL_DMA_IRQHandler+0x1e0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <HAL_DMA_IRQHandler+0x1e4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1b      	ldr	r2, [pc, #108]	; (800778c <HAL_DMA_IRQHandler+0x1e8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a19      	ldr	r2, [pc, #100]	; (8007790 <HAL_DMA_IRQHandler+0x1ec>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_DMA_IRQHandler+0x194>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a18      	ldr	r2, [pc, #96]	; (8007794 <HAL_DMA_IRQHandler+0x1f0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d12f      	bne.n	8007798 <HAL_DMA_IRQHandler+0x1f4>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	bf14      	ite	ne
 8007746:	2301      	movne	r3, #1
 8007748:	2300      	moveq	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	e02e      	b.n	80077ac <HAL_DMA_IRQHandler+0x208>
 800774e:	bf00      	nop
 8007750:	24000090 	.word	0x24000090
 8007754:	1b4e81b5 	.word	0x1b4e81b5
 8007758:	40020010 	.word	0x40020010
 800775c:	40020028 	.word	0x40020028
 8007760:	40020040 	.word	0x40020040
 8007764:	40020058 	.word	0x40020058
 8007768:	40020070 	.word	0x40020070
 800776c:	40020088 	.word	0x40020088
 8007770:	400200a0 	.word	0x400200a0
 8007774:	400200b8 	.word	0x400200b8
 8007778:	40020410 	.word	0x40020410
 800777c:	40020428 	.word	0x40020428
 8007780:	40020440 	.word	0x40020440
 8007784:	40020458 	.word	0x40020458
 8007788:	40020470 	.word	0x40020470
 800778c:	40020488 	.word	0x40020488
 8007790:	400204a0 	.word	0x400204a0
 8007794:	400204b8 	.word	0x400204b8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d015      	beq.n	80077dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0204 	bic.w	r2, r2, #4
 80077be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	2208      	movs	r2, #8
 80077ca:	409a      	lsls	r2, r3
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f043 0201 	orr.w	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d06e      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a69      	ldr	r2, [pc, #420]	; (800799c <HAL_DMA_IRQHandler+0x3f8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d04a      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a67      	ldr	r2, [pc, #412]	; (80079a0 <HAL_DMA_IRQHandler+0x3fc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d045      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a66      	ldr	r2, [pc, #408]	; (80079a4 <HAL_DMA_IRQHandler+0x400>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d040      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a64      	ldr	r2, [pc, #400]	; (80079a8 <HAL_DMA_IRQHandler+0x404>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a63      	ldr	r2, [pc, #396]	; (80079ac <HAL_DMA_IRQHandler+0x408>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d036      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a61      	ldr	r2, [pc, #388]	; (80079b0 <HAL_DMA_IRQHandler+0x40c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d031      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a60      	ldr	r2, [pc, #384]	; (80079b4 <HAL_DMA_IRQHandler+0x410>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d02c      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a5e      	ldr	r2, [pc, #376]	; (80079b8 <HAL_DMA_IRQHandler+0x414>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d027      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a5d      	ldr	r2, [pc, #372]	; (80079bc <HAL_DMA_IRQHandler+0x418>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a5b      	ldr	r2, [pc, #364]	; (80079c0 <HAL_DMA_IRQHandler+0x41c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01d      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a5a      	ldr	r2, [pc, #360]	; (80079c4 <HAL_DMA_IRQHandler+0x420>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a58      	ldr	r2, [pc, #352]	; (80079c8 <HAL_DMA_IRQHandler+0x424>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a57      	ldr	r2, [pc, #348]	; (80079cc <HAL_DMA_IRQHandler+0x428>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a55      	ldr	r2, [pc, #340]	; (80079d0 <HAL_DMA_IRQHandler+0x42c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a54      	ldr	r2, [pc, #336]	; (80079d4 <HAL_DMA_IRQHandler+0x430>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_DMA_IRQHandler+0x2ee>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a52      	ldr	r2, [pc, #328]	; (80079d8 <HAL_DMA_IRQHandler+0x434>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10a      	bne.n	80078a8 <HAL_DMA_IRQHandler+0x304>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	e003      	b.n	80078b0 <HAL_DMA_IRQHandler+0x30c>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00d      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2201      	movs	r2, #1
 80078be:	409a      	lsls	r2, r3
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	f043 0202 	orr.w	r2, r3, #2
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	2204      	movs	r2, #4
 80078da:	409a      	lsls	r2, r3
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	4013      	ands	r3, r2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 808f 	beq.w	8007a04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a2c      	ldr	r2, [pc, #176]	; (800799c <HAL_DMA_IRQHandler+0x3f8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d04a      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a2a      	ldr	r2, [pc, #168]	; (80079a0 <HAL_DMA_IRQHandler+0x3fc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d045      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <HAL_DMA_IRQHandler+0x400>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d040      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a27      	ldr	r2, [pc, #156]	; (80079a8 <HAL_DMA_IRQHandler+0x404>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d03b      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a26      	ldr	r2, [pc, #152]	; (80079ac <HAL_DMA_IRQHandler+0x408>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d036      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a24      	ldr	r2, [pc, #144]	; (80079b0 <HAL_DMA_IRQHandler+0x40c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d031      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a23      	ldr	r2, [pc, #140]	; (80079b4 <HAL_DMA_IRQHandler+0x410>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d02c      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a21      	ldr	r2, [pc, #132]	; (80079b8 <HAL_DMA_IRQHandler+0x414>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d027      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a20      	ldr	r2, [pc, #128]	; (80079bc <HAL_DMA_IRQHandler+0x418>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d022      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <HAL_DMA_IRQHandler+0x41c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01d      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <HAL_DMA_IRQHandler+0x420>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d018      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <HAL_DMA_IRQHandler+0x424>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <HAL_DMA_IRQHandler+0x428>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00e      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a18      	ldr	r2, [pc, #96]	; (80079d0 <HAL_DMA_IRQHandler+0x42c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d009      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a17      	ldr	r2, [pc, #92]	; (80079d4 <HAL_DMA_IRQHandler+0x430>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d004      	beq.n	8007986 <HAL_DMA_IRQHandler+0x3e2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <HAL_DMA_IRQHandler+0x434>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d12a      	bne.n	80079dc <HAL_DMA_IRQHandler+0x438>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	e023      	b.n	80079e4 <HAL_DMA_IRQHandler+0x440>
 800799c:	40020010 	.word	0x40020010
 80079a0:	40020028 	.word	0x40020028
 80079a4:	40020040 	.word	0x40020040
 80079a8:	40020058 	.word	0x40020058
 80079ac:	40020070 	.word	0x40020070
 80079b0:	40020088 	.word	0x40020088
 80079b4:	400200a0 	.word	0x400200a0
 80079b8:	400200b8 	.word	0x400200b8
 80079bc:	40020410 	.word	0x40020410
 80079c0:	40020428 	.word	0x40020428
 80079c4:	40020440 	.word	0x40020440
 80079c8:	40020458 	.word	0x40020458
 80079cc:	40020470 	.word	0x40020470
 80079d0:	40020488 	.word	0x40020488
 80079d4:	400204a0 	.word	0x400204a0
 80079d8:	400204b8 	.word	0x400204b8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00d      	beq.n	8007a04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ec:	f003 031f 	and.w	r3, r3, #31
 80079f0:	2204      	movs	r2, #4
 80079f2:	409a      	lsls	r2, r3
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fc:	f043 0204 	orr.w	r2, r3, #4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	409a      	lsls	r2, r3
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80a6 	beq.w	8007b66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a85      	ldr	r2, [pc, #532]	; (8007c34 <HAL_DMA_IRQHandler+0x690>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d04a      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a83      	ldr	r2, [pc, #524]	; (8007c38 <HAL_DMA_IRQHandler+0x694>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d045      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a82      	ldr	r2, [pc, #520]	; (8007c3c <HAL_DMA_IRQHandler+0x698>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d040      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a80      	ldr	r2, [pc, #512]	; (8007c40 <HAL_DMA_IRQHandler+0x69c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d03b      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a7f      	ldr	r2, [pc, #508]	; (8007c44 <HAL_DMA_IRQHandler+0x6a0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d036      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a7d      	ldr	r2, [pc, #500]	; (8007c48 <HAL_DMA_IRQHandler+0x6a4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d031      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a7c      	ldr	r2, [pc, #496]	; (8007c4c <HAL_DMA_IRQHandler+0x6a8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d02c      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a7a      	ldr	r2, [pc, #488]	; (8007c50 <HAL_DMA_IRQHandler+0x6ac>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d027      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a79      	ldr	r2, [pc, #484]	; (8007c54 <HAL_DMA_IRQHandler+0x6b0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d022      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a77      	ldr	r2, [pc, #476]	; (8007c58 <HAL_DMA_IRQHandler+0x6b4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01d      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a76      	ldr	r2, [pc, #472]	; (8007c5c <HAL_DMA_IRQHandler+0x6b8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d018      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a74      	ldr	r2, [pc, #464]	; (8007c60 <HAL_DMA_IRQHandler+0x6bc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a73      	ldr	r2, [pc, #460]	; (8007c64 <HAL_DMA_IRQHandler+0x6c0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00e      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a71      	ldr	r2, [pc, #452]	; (8007c68 <HAL_DMA_IRQHandler+0x6c4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d009      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a70      	ldr	r2, [pc, #448]	; (8007c6c <HAL_DMA_IRQHandler+0x6c8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d004      	beq.n	8007aba <HAL_DMA_IRQHandler+0x516>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6e      	ldr	r2, [pc, #440]	; (8007c70 <HAL_DMA_IRQHandler+0x6cc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d10a      	bne.n	8007ad0 <HAL_DMA_IRQHandler+0x52c>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf14      	ite	ne
 8007ac8:	2301      	movne	r3, #1
 8007aca:	2300      	moveq	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	e009      	b.n	8007ae4 <HAL_DMA_IRQHandler+0x540>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d03e      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	2210      	movs	r2, #16
 8007af2:	409a      	lsls	r2, r3
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d018      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d108      	bne.n	8007b26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d024      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
 8007b24:	e01f      	b.n	8007b66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01b      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	e016      	b.n	8007b66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d107      	bne.n	8007b56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0208 	bic.w	r2, r2, #8
 8007b54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6a:	f003 031f 	and.w	r3, r3, #31
 8007b6e:	2220      	movs	r2, #32
 8007b70:	409a      	lsls	r2, r3
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	4013      	ands	r3, r2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8110 	beq.w	8007d9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2c      	ldr	r2, [pc, #176]	; (8007c34 <HAL_DMA_IRQHandler+0x690>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d04a      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	; (8007c38 <HAL_DMA_IRQHandler+0x694>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d045      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <HAL_DMA_IRQHandler+0x698>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d040      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a28      	ldr	r2, [pc, #160]	; (8007c40 <HAL_DMA_IRQHandler+0x69c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d03b      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a26      	ldr	r2, [pc, #152]	; (8007c44 <HAL_DMA_IRQHandler+0x6a0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d036      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a25      	ldr	r2, [pc, #148]	; (8007c48 <HAL_DMA_IRQHandler+0x6a4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d031      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a23      	ldr	r2, [pc, #140]	; (8007c4c <HAL_DMA_IRQHandler+0x6a8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d02c      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a22      	ldr	r2, [pc, #136]	; (8007c50 <HAL_DMA_IRQHandler+0x6ac>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d027      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <HAL_DMA_IRQHandler+0x6b0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d022      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1f      	ldr	r2, [pc, #124]	; (8007c58 <HAL_DMA_IRQHandler+0x6b4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d01d      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <HAL_DMA_IRQHandler+0x6b8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d018      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <HAL_DMA_IRQHandler+0x6bc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <HAL_DMA_IRQHandler+0x6c0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a19      	ldr	r2, [pc, #100]	; (8007c68 <HAL_DMA_IRQHandler+0x6c4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a17      	ldr	r2, [pc, #92]	; (8007c6c <HAL_DMA_IRQHandler+0x6c8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x678>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a16      	ldr	r2, [pc, #88]	; (8007c70 <HAL_DMA_IRQHandler+0x6cc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d12b      	bne.n	8007c74 <HAL_DMA_IRQHandler+0x6d0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bf14      	ite	ne
 8007c2a:	2301      	movne	r3, #1
 8007c2c:	2300      	moveq	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	e02a      	b.n	8007c88 <HAL_DMA_IRQHandler+0x6e4>
 8007c32:	bf00      	nop
 8007c34:	40020010 	.word	0x40020010
 8007c38:	40020028 	.word	0x40020028
 8007c3c:	40020040 	.word	0x40020040
 8007c40:	40020058 	.word	0x40020058
 8007c44:	40020070 	.word	0x40020070
 8007c48:	40020088 	.word	0x40020088
 8007c4c:	400200a0 	.word	0x400200a0
 8007c50:	400200b8 	.word	0x400200b8
 8007c54:	40020410 	.word	0x40020410
 8007c58:	40020428 	.word	0x40020428
 8007c5c:	40020440 	.word	0x40020440
 8007c60:	40020458 	.word	0x40020458
 8007c64:	40020470 	.word	0x40020470
 8007c68:	40020488 	.word	0x40020488
 8007c6c:	400204a0 	.word	0x400204a0
 8007c70:	400204b8 	.word	0x400204b8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8087 	beq.w	8007d9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2220      	movs	r2, #32
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d139      	bne.n	8007d1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0216 	bic.w	r2, r2, #22
 8007cb8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	695a      	ldr	r2, [r3, #20]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cc8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <HAL_DMA_IRQHandler+0x736>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0208 	bic.w	r2, r2, #8
 8007ce8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	223f      	movs	r2, #63	; 0x3f
 8007cf4:	409a      	lsls	r2, r3
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 834a 	beq.w	80083a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
          }
          return;
 8007d1c:	e344      	b.n	80083a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d018      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d108      	bne.n	8007d4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d02c      	beq.n	8007d9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
 8007d4a:	e027      	b.n	8007d9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d023      	beq.n	8007d9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
 8007d5c:	e01e      	b.n	8007d9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10f      	bne.n	8007d8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0210 	bic.w	r2, r2, #16
 8007d7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8306 	beq.w	80083b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8088 	beq.w	8007ec4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2204      	movs	r2, #4
 8007db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a7a      	ldr	r2, [pc, #488]	; (8007fac <HAL_DMA_IRQHandler+0xa08>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d04a      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a79      	ldr	r2, [pc, #484]	; (8007fb0 <HAL_DMA_IRQHandler+0xa0c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d045      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a77      	ldr	r2, [pc, #476]	; (8007fb4 <HAL_DMA_IRQHandler+0xa10>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d040      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a76      	ldr	r2, [pc, #472]	; (8007fb8 <HAL_DMA_IRQHandler+0xa14>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d03b      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a74      	ldr	r2, [pc, #464]	; (8007fbc <HAL_DMA_IRQHandler+0xa18>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d036      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a73      	ldr	r2, [pc, #460]	; (8007fc0 <HAL_DMA_IRQHandler+0xa1c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d031      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a71      	ldr	r2, [pc, #452]	; (8007fc4 <HAL_DMA_IRQHandler+0xa20>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d02c      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a70      	ldr	r2, [pc, #448]	; (8007fc8 <HAL_DMA_IRQHandler+0xa24>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d027      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a6e      	ldr	r2, [pc, #440]	; (8007fcc <HAL_DMA_IRQHandler+0xa28>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d022      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a6d      	ldr	r2, [pc, #436]	; (8007fd0 <HAL_DMA_IRQHandler+0xa2c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d01d      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a6b      	ldr	r2, [pc, #428]	; (8007fd4 <HAL_DMA_IRQHandler+0xa30>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d018      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a6a      	ldr	r2, [pc, #424]	; (8007fd8 <HAL_DMA_IRQHandler+0xa34>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d013      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a68      	ldr	r2, [pc, #416]	; (8007fdc <HAL_DMA_IRQHandler+0xa38>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00e      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a67      	ldr	r2, [pc, #412]	; (8007fe0 <HAL_DMA_IRQHandler+0xa3c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d009      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a65      	ldr	r2, [pc, #404]	; (8007fe4 <HAL_DMA_IRQHandler+0xa40>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d004      	beq.n	8007e5c <HAL_DMA_IRQHandler+0x8b8>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a64      	ldr	r2, [pc, #400]	; (8007fe8 <HAL_DMA_IRQHandler+0xa44>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d108      	bne.n	8007e6e <HAL_DMA_IRQHandler+0x8ca>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e007      	b.n	8007e7e <HAL_DMA_IRQHandler+0x8da>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d307      	bcc.n	8007e9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f2      	bne.n	8007e7e <HAL_DMA_IRQHandler+0x8da>
 8007e98:	e000      	b.n	8007e9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e9a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2203      	movs	r2, #3
 8007eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007eb2:	e003      	b.n	8007ebc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 8272 	beq.w	80083b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	e26c      	b.n	80083b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a43      	ldr	r2, [pc, #268]	; (8007fec <HAL_DMA_IRQHandler+0xa48>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d022      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a42      	ldr	r2, [pc, #264]	; (8007ff0 <HAL_DMA_IRQHandler+0xa4c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d01d      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a40      	ldr	r2, [pc, #256]	; (8007ff4 <HAL_DMA_IRQHandler+0xa50>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d018      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <HAL_DMA_IRQHandler+0xa54>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d013      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a3d      	ldr	r2, [pc, #244]	; (8007ffc <HAL_DMA_IRQHandler+0xa58>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00e      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a3c      	ldr	r2, [pc, #240]	; (8008000 <HAL_DMA_IRQHandler+0xa5c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d009      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a3a      	ldr	r2, [pc, #232]	; (8008004 <HAL_DMA_IRQHandler+0xa60>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <HAL_DMA_IRQHandler+0x984>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a39      	ldr	r2, [pc, #228]	; (8008008 <HAL_DMA_IRQHandler+0xa64>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d101      	bne.n	8007f2c <HAL_DMA_IRQHandler+0x988>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <HAL_DMA_IRQHandler+0x98a>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 823f 	beq.w	80083b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2204      	movs	r2, #4
 8007f46:	409a      	lsls	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80cd 	beq.w	80080ec <HAL_DMA_IRQHandler+0xb48>
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80c7 	beq.w	80080ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f62:	f003 031f 	and.w	r3, r3, #31
 8007f66:	2204      	movs	r2, #4
 8007f68:	409a      	lsls	r2, r3
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d049      	beq.n	800800c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 8210 	beq.w	80083ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f94:	e20a      	b.n	80083ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8206 	beq.w	80083ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fa8:	e200      	b.n	80083ac <HAL_DMA_IRQHandler+0xe08>
 8007faa:	bf00      	nop
 8007fac:	40020010 	.word	0x40020010
 8007fb0:	40020028 	.word	0x40020028
 8007fb4:	40020040 	.word	0x40020040
 8007fb8:	40020058 	.word	0x40020058
 8007fbc:	40020070 	.word	0x40020070
 8007fc0:	40020088 	.word	0x40020088
 8007fc4:	400200a0 	.word	0x400200a0
 8007fc8:	400200b8 	.word	0x400200b8
 8007fcc:	40020410 	.word	0x40020410
 8007fd0:	40020428 	.word	0x40020428
 8007fd4:	40020440 	.word	0x40020440
 8007fd8:	40020458 	.word	0x40020458
 8007fdc:	40020470 	.word	0x40020470
 8007fe0:	40020488 	.word	0x40020488
 8007fe4:	400204a0 	.word	0x400204a0
 8007fe8:	400204b8 	.word	0x400204b8
 8007fec:	58025408 	.word	0x58025408
 8007ff0:	5802541c 	.word	0x5802541c
 8007ff4:	58025430 	.word	0x58025430
 8007ff8:	58025444 	.word	0x58025444
 8007ffc:	58025458 	.word	0x58025458
 8008000:	5802546c 	.word	0x5802546c
 8008004:	58025480 	.word	0x58025480
 8008008:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d160      	bne.n	80080d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a7f      	ldr	r2, [pc, #508]	; (8008218 <HAL_DMA_IRQHandler+0xc74>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d04a      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a7d      	ldr	r2, [pc, #500]	; (800821c <HAL_DMA_IRQHandler+0xc78>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d045      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a7c      	ldr	r2, [pc, #496]	; (8008220 <HAL_DMA_IRQHandler+0xc7c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d040      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a7a      	ldr	r2, [pc, #488]	; (8008224 <HAL_DMA_IRQHandler+0xc80>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d03b      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a79      	ldr	r2, [pc, #484]	; (8008228 <HAL_DMA_IRQHandler+0xc84>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d036      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a77      	ldr	r2, [pc, #476]	; (800822c <HAL_DMA_IRQHandler+0xc88>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d031      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a76      	ldr	r2, [pc, #472]	; (8008230 <HAL_DMA_IRQHandler+0xc8c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d02c      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a74      	ldr	r2, [pc, #464]	; (8008234 <HAL_DMA_IRQHandler+0xc90>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d027      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a73      	ldr	r2, [pc, #460]	; (8008238 <HAL_DMA_IRQHandler+0xc94>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d022      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a71      	ldr	r2, [pc, #452]	; (800823c <HAL_DMA_IRQHandler+0xc98>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01d      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a70      	ldr	r2, [pc, #448]	; (8008240 <HAL_DMA_IRQHandler+0xc9c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d018      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a6e      	ldr	r2, [pc, #440]	; (8008244 <HAL_DMA_IRQHandler+0xca0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a6d      	ldr	r2, [pc, #436]	; (8008248 <HAL_DMA_IRQHandler+0xca4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a6b      	ldr	r2, [pc, #428]	; (800824c <HAL_DMA_IRQHandler+0xca8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a6a      	ldr	r2, [pc, #424]	; (8008250 <HAL_DMA_IRQHandler+0xcac>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_DMA_IRQHandler+0xb12>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a68      	ldr	r2, [pc, #416]	; (8008254 <HAL_DMA_IRQHandler+0xcb0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d108      	bne.n	80080c8 <HAL_DMA_IRQHandler+0xb24>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0208 	bic.w	r2, r2, #8
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	e007      	b.n	80080d8 <HAL_DMA_IRQHandler+0xb34>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0204 	bic.w	r2, r2, #4
 80080d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8165 	beq.w	80083ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ea:	e15f      	b.n	80083ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	2202      	movs	r2, #2
 80080f6:	409a      	lsls	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80c5 	beq.w	800828c <HAL_DMA_IRQHandler+0xce8>
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80bf 	beq.w	800828c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2202      	movs	r2, #2
 8008118:	409a      	lsls	r2, r3
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d018      	beq.n	800815a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 813a 	beq.w	80083b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008144:	e134      	b.n	80083b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8130 	beq.w	80083b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008158:	e12a      	b.n	80083b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 8089 	bne.w	8008278 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a2b      	ldr	r2, [pc, #172]	; (8008218 <HAL_DMA_IRQHandler+0xc74>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d04a      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a29      	ldr	r2, [pc, #164]	; (800821c <HAL_DMA_IRQHandler+0xc78>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d045      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a28      	ldr	r2, [pc, #160]	; (8008220 <HAL_DMA_IRQHandler+0xc7c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d040      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a26      	ldr	r2, [pc, #152]	; (8008224 <HAL_DMA_IRQHandler+0xc80>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d03b      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a25      	ldr	r2, [pc, #148]	; (8008228 <HAL_DMA_IRQHandler+0xc84>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d036      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a23      	ldr	r2, [pc, #140]	; (800822c <HAL_DMA_IRQHandler+0xc88>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d031      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a22      	ldr	r2, [pc, #136]	; (8008230 <HAL_DMA_IRQHandler+0xc8c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d02c      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a20      	ldr	r2, [pc, #128]	; (8008234 <HAL_DMA_IRQHandler+0xc90>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d027      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <HAL_DMA_IRQHandler+0xc94>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1d      	ldr	r2, [pc, #116]	; (800823c <HAL_DMA_IRQHandler+0xc98>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1c      	ldr	r2, [pc, #112]	; (8008240 <HAL_DMA_IRQHandler+0xc9c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1a      	ldr	r2, [pc, #104]	; (8008244 <HAL_DMA_IRQHandler+0xca0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a19      	ldr	r2, [pc, #100]	; (8008248 <HAL_DMA_IRQHandler+0xca4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a17      	ldr	r2, [pc, #92]	; (800824c <HAL_DMA_IRQHandler+0xca8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a16      	ldr	r2, [pc, #88]	; (8008250 <HAL_DMA_IRQHandler+0xcac>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_DMA_IRQHandler+0xc62>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_DMA_IRQHandler+0xcb0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d128      	bne.n	8008258 <HAL_DMA_IRQHandler+0xcb4>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0214 	bic.w	r2, r2, #20
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e027      	b.n	8008268 <HAL_DMA_IRQHandler+0xcc4>
 8008218:	40020010 	.word	0x40020010
 800821c:	40020028 	.word	0x40020028
 8008220:	40020040 	.word	0x40020040
 8008224:	40020058 	.word	0x40020058
 8008228:	40020070 	.word	0x40020070
 800822c:	40020088 	.word	0x40020088
 8008230:	400200a0 	.word	0x400200a0
 8008234:	400200b8 	.word	0x400200b8
 8008238:	40020410 	.word	0x40020410
 800823c:	40020428 	.word	0x40020428
 8008240:	40020440 	.word	0x40020440
 8008244:	40020458 	.word	0x40020458
 8008248:	40020470 	.word	0x40020470
 800824c:	40020488 	.word	0x40020488
 8008250:	400204a0 	.word	0x400204a0
 8008254:	400204b8 	.word	0x400204b8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 020a 	bic.w	r2, r2, #10
 8008266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8097 	beq.w	80083b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800828a:	e091      	b.n	80083b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	2208      	movs	r2, #8
 8008296:	409a      	lsls	r2, r3
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8088 	beq.w	80083b2 <HAL_DMA_IRQHandler+0xe0e>
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8082 	beq.w	80083b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a41      	ldr	r2, [pc, #260]	; (80083b8 <HAL_DMA_IRQHandler+0xe14>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d04a      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a3f      	ldr	r2, [pc, #252]	; (80083bc <HAL_DMA_IRQHandler+0xe18>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d045      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a3e      	ldr	r2, [pc, #248]	; (80083c0 <HAL_DMA_IRQHandler+0xe1c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d040      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a3c      	ldr	r2, [pc, #240]	; (80083c4 <HAL_DMA_IRQHandler+0xe20>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d03b      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a3b      	ldr	r2, [pc, #236]	; (80083c8 <HAL_DMA_IRQHandler+0xe24>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d036      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a39      	ldr	r2, [pc, #228]	; (80083cc <HAL_DMA_IRQHandler+0xe28>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d031      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a38      	ldr	r2, [pc, #224]	; (80083d0 <HAL_DMA_IRQHandler+0xe2c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d02c      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a36      	ldr	r2, [pc, #216]	; (80083d4 <HAL_DMA_IRQHandler+0xe30>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d027      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a35      	ldr	r2, [pc, #212]	; (80083d8 <HAL_DMA_IRQHandler+0xe34>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d022      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a33      	ldr	r2, [pc, #204]	; (80083dc <HAL_DMA_IRQHandler+0xe38>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d01d      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a32      	ldr	r2, [pc, #200]	; (80083e0 <HAL_DMA_IRQHandler+0xe3c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d018      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a30      	ldr	r2, [pc, #192]	; (80083e4 <HAL_DMA_IRQHandler+0xe40>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d013      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a2f      	ldr	r2, [pc, #188]	; (80083e8 <HAL_DMA_IRQHandler+0xe44>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00e      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a2d      	ldr	r2, [pc, #180]	; (80083ec <HAL_DMA_IRQHandler+0xe48>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d009      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a2c      	ldr	r2, [pc, #176]	; (80083f0 <HAL_DMA_IRQHandler+0xe4c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d004      	beq.n	800834e <HAL_DMA_IRQHandler+0xdaa>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <HAL_DMA_IRQHandler+0xe50>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d108      	bne.n	8008360 <HAL_DMA_IRQHandler+0xdbc>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 021c 	bic.w	r2, r2, #28
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e007      	b.n	8008370 <HAL_DMA_IRQHandler+0xdcc>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 020e 	bic.w	r2, r2, #14
 800836e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	2201      	movs	r2, #1
 800837a:	409a      	lsls	r2, r3
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d009      	beq.n	80083b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
 80083a6:	e004      	b.n	80083b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80083a8:	bf00      	nop
 80083aa:	e002      	b.n	80083b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ac:	bf00      	nop
 80083ae:	e000      	b.n	80083b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083b2:	3728      	adds	r7, #40	; 0x28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40020010 	.word	0x40020010
 80083bc:	40020028 	.word	0x40020028
 80083c0:	40020040 	.word	0x40020040
 80083c4:	40020058 	.word	0x40020058
 80083c8:	40020070 	.word	0x40020070
 80083cc:	40020088 	.word	0x40020088
 80083d0:	400200a0 	.word	0x400200a0
 80083d4:	400200b8 	.word	0x400200b8
 80083d8:	40020410 	.word	0x40020410
 80083dc:	40020428 	.word	0x40020428
 80083e0:	40020440 	.word	0x40020440
 80083e4:	40020458 	.word	0x40020458
 80083e8:	40020470 	.word	0x40020470
 80083ec:	40020488 	.word	0x40020488
 80083f0:	400204a0 	.word	0x400204a0
 80083f4:	400204b8 	.word	0x400204b8

080083f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008410:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a7f      	ldr	r2, [pc, #508]	; (8008614 <DMA_SetConfig+0x21c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d072      	beq.n	8008502 <DMA_SetConfig+0x10a>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a7d      	ldr	r2, [pc, #500]	; (8008618 <DMA_SetConfig+0x220>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d06d      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a7c      	ldr	r2, [pc, #496]	; (800861c <DMA_SetConfig+0x224>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d068      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a7a      	ldr	r2, [pc, #488]	; (8008620 <DMA_SetConfig+0x228>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d063      	beq.n	8008502 <DMA_SetConfig+0x10a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a79      	ldr	r2, [pc, #484]	; (8008624 <DMA_SetConfig+0x22c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d05e      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a77      	ldr	r2, [pc, #476]	; (8008628 <DMA_SetConfig+0x230>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d059      	beq.n	8008502 <DMA_SetConfig+0x10a>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a76      	ldr	r2, [pc, #472]	; (800862c <DMA_SetConfig+0x234>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d054      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a74      	ldr	r2, [pc, #464]	; (8008630 <DMA_SetConfig+0x238>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d04f      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a73      	ldr	r2, [pc, #460]	; (8008634 <DMA_SetConfig+0x23c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d04a      	beq.n	8008502 <DMA_SetConfig+0x10a>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a71      	ldr	r2, [pc, #452]	; (8008638 <DMA_SetConfig+0x240>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d045      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a70      	ldr	r2, [pc, #448]	; (800863c <DMA_SetConfig+0x244>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d040      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a6e      	ldr	r2, [pc, #440]	; (8008640 <DMA_SetConfig+0x248>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d03b      	beq.n	8008502 <DMA_SetConfig+0x10a>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a6d      	ldr	r2, [pc, #436]	; (8008644 <DMA_SetConfig+0x24c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d036      	beq.n	8008502 <DMA_SetConfig+0x10a>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a6b      	ldr	r2, [pc, #428]	; (8008648 <DMA_SetConfig+0x250>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d031      	beq.n	8008502 <DMA_SetConfig+0x10a>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a6a      	ldr	r2, [pc, #424]	; (800864c <DMA_SetConfig+0x254>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d02c      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a68      	ldr	r2, [pc, #416]	; (8008650 <DMA_SetConfig+0x258>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d027      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a67      	ldr	r2, [pc, #412]	; (8008654 <DMA_SetConfig+0x25c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d022      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a65      	ldr	r2, [pc, #404]	; (8008658 <DMA_SetConfig+0x260>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01d      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a64      	ldr	r2, [pc, #400]	; (800865c <DMA_SetConfig+0x264>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d018      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a62      	ldr	r2, [pc, #392]	; (8008660 <DMA_SetConfig+0x268>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a61      	ldr	r2, [pc, #388]	; (8008664 <DMA_SetConfig+0x26c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00e      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a5f      	ldr	r2, [pc, #380]	; (8008668 <DMA_SetConfig+0x270>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d009      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a5e      	ldr	r2, [pc, #376]	; (800866c <DMA_SetConfig+0x274>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d004      	beq.n	8008502 <DMA_SetConfig+0x10a>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a5c      	ldr	r2, [pc, #368]	; (8008670 <DMA_SetConfig+0x278>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d101      	bne.n	8008506 <DMA_SetConfig+0x10e>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <DMA_SetConfig+0x110>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00d      	beq.n	8008528 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008514:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d004      	beq.n	8008528 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008526:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a39      	ldr	r2, [pc, #228]	; (8008614 <DMA_SetConfig+0x21c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d04a      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a38      	ldr	r2, [pc, #224]	; (8008618 <DMA_SetConfig+0x220>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d045      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a36      	ldr	r2, [pc, #216]	; (800861c <DMA_SetConfig+0x224>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d040      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a35      	ldr	r2, [pc, #212]	; (8008620 <DMA_SetConfig+0x228>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d03b      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a33      	ldr	r2, [pc, #204]	; (8008624 <DMA_SetConfig+0x22c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d036      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a32      	ldr	r2, [pc, #200]	; (8008628 <DMA_SetConfig+0x230>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d031      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a30      	ldr	r2, [pc, #192]	; (800862c <DMA_SetConfig+0x234>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d02c      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2f      	ldr	r2, [pc, #188]	; (8008630 <DMA_SetConfig+0x238>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d027      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a2d      	ldr	r2, [pc, #180]	; (8008634 <DMA_SetConfig+0x23c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d022      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <DMA_SetConfig+0x240>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d01d      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a2a      	ldr	r2, [pc, #168]	; (800863c <DMA_SetConfig+0x244>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d018      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a29      	ldr	r2, [pc, #164]	; (8008640 <DMA_SetConfig+0x248>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d013      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a27      	ldr	r2, [pc, #156]	; (8008644 <DMA_SetConfig+0x24c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00e      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a26      	ldr	r2, [pc, #152]	; (8008648 <DMA_SetConfig+0x250>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d009      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a24      	ldr	r2, [pc, #144]	; (800864c <DMA_SetConfig+0x254>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <DMA_SetConfig+0x1d0>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a23      	ldr	r2, [pc, #140]	; (8008650 <DMA_SetConfig+0x258>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d101      	bne.n	80085cc <DMA_SetConfig+0x1d4>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <DMA_SetConfig+0x1d6>
 80085cc:	2300      	movs	r3, #0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d059      	beq.n	8008686 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d6:	f003 031f 	and.w	r3, r3, #31
 80085da:	223f      	movs	r2, #63	; 0x3f
 80085dc:	409a      	lsls	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d138      	bne.n	8008674 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008612:	e086      	b.n	8008722 <DMA_SetConfig+0x32a>
 8008614:	40020010 	.word	0x40020010
 8008618:	40020028 	.word	0x40020028
 800861c:	40020040 	.word	0x40020040
 8008620:	40020058 	.word	0x40020058
 8008624:	40020070 	.word	0x40020070
 8008628:	40020088 	.word	0x40020088
 800862c:	400200a0 	.word	0x400200a0
 8008630:	400200b8 	.word	0x400200b8
 8008634:	40020410 	.word	0x40020410
 8008638:	40020428 	.word	0x40020428
 800863c:	40020440 	.word	0x40020440
 8008640:	40020458 	.word	0x40020458
 8008644:	40020470 	.word	0x40020470
 8008648:	40020488 	.word	0x40020488
 800864c:	400204a0 	.word	0x400204a0
 8008650:	400204b8 	.word	0x400204b8
 8008654:	58025408 	.word	0x58025408
 8008658:	5802541c 	.word	0x5802541c
 800865c:	58025430 	.word	0x58025430
 8008660:	58025444 	.word	0x58025444
 8008664:	58025458 	.word	0x58025458
 8008668:	5802546c 	.word	0x5802546c
 800866c:	58025480 	.word	0x58025480
 8008670:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	60da      	str	r2, [r3, #12]
}
 8008684:	e04d      	b.n	8008722 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a29      	ldr	r2, [pc, #164]	; (8008730 <DMA_SetConfig+0x338>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d022      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a27      	ldr	r2, [pc, #156]	; (8008734 <DMA_SetConfig+0x33c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d01d      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a26      	ldr	r2, [pc, #152]	; (8008738 <DMA_SetConfig+0x340>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d018      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a24      	ldr	r2, [pc, #144]	; (800873c <DMA_SetConfig+0x344>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d013      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a23      	ldr	r2, [pc, #140]	; (8008740 <DMA_SetConfig+0x348>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00e      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a21      	ldr	r2, [pc, #132]	; (8008744 <DMA_SetConfig+0x34c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d009      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a20      	ldr	r2, [pc, #128]	; (8008748 <DMA_SetConfig+0x350>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d004      	beq.n	80086d6 <DMA_SetConfig+0x2de>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1e      	ldr	r2, [pc, #120]	; (800874c <DMA_SetConfig+0x354>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d101      	bne.n	80086da <DMA_SetConfig+0x2e2>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <DMA_SetConfig+0x2e4>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d020      	beq.n	8008722 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	2201      	movs	r2, #1
 80086ea:	409a      	lsls	r2, r3
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b40      	cmp	r3, #64	; 0x40
 80086fe:	d108      	bne.n	8008712 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	60da      	str	r2, [r3, #12]
}
 8008710:	e007      	b.n	8008722 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	58025408 	.word	0x58025408
 8008734:	5802541c 	.word	0x5802541c
 8008738:	58025430 	.word	0x58025430
 800873c:	58025444 	.word	0x58025444
 8008740:	58025458 	.word	0x58025458
 8008744:	5802546c 	.word	0x5802546c
 8008748:	58025480 	.word	0x58025480
 800874c:	58025494 	.word	0x58025494

08008750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a42      	ldr	r2, [pc, #264]	; (8008868 <DMA_CalcBaseAndBitshift+0x118>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d04a      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a41      	ldr	r2, [pc, #260]	; (800886c <DMA_CalcBaseAndBitshift+0x11c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d045      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a3f      	ldr	r2, [pc, #252]	; (8008870 <DMA_CalcBaseAndBitshift+0x120>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d040      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3e      	ldr	r2, [pc, #248]	; (8008874 <DMA_CalcBaseAndBitshift+0x124>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d03b      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a3c      	ldr	r2, [pc, #240]	; (8008878 <DMA_CalcBaseAndBitshift+0x128>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d036      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a3b      	ldr	r2, [pc, #236]	; (800887c <DMA_CalcBaseAndBitshift+0x12c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d031      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a39      	ldr	r2, [pc, #228]	; (8008880 <DMA_CalcBaseAndBitshift+0x130>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d02c      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a38      	ldr	r2, [pc, #224]	; (8008884 <DMA_CalcBaseAndBitshift+0x134>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d027      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a36      	ldr	r2, [pc, #216]	; (8008888 <DMA_CalcBaseAndBitshift+0x138>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d022      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a35      	ldr	r2, [pc, #212]	; (800888c <DMA_CalcBaseAndBitshift+0x13c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d01d      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a33      	ldr	r2, [pc, #204]	; (8008890 <DMA_CalcBaseAndBitshift+0x140>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d018      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a32      	ldr	r2, [pc, #200]	; (8008894 <DMA_CalcBaseAndBitshift+0x144>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d013      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a30      	ldr	r2, [pc, #192]	; (8008898 <DMA_CalcBaseAndBitshift+0x148>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00e      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a2f      	ldr	r2, [pc, #188]	; (800889c <DMA_CalcBaseAndBitshift+0x14c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d009      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <DMA_CalcBaseAndBitshift+0x150>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <DMA_CalcBaseAndBitshift+0xa8>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a2c      	ldr	r2, [pc, #176]	; (80088a4 <DMA_CalcBaseAndBitshift+0x154>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d101      	bne.n	80087fc <DMA_CalcBaseAndBitshift+0xac>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <DMA_CalcBaseAndBitshift+0xae>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d024      	beq.n	800884c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	3b10      	subs	r3, #16
 800880a:	4a27      	ldr	r2, [pc, #156]	; (80088a8 <DMA_CalcBaseAndBitshift+0x158>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	091b      	lsrs	r3, r3, #4
 8008812:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	4a24      	ldr	r2, [pc, #144]	; (80088ac <DMA_CalcBaseAndBitshift+0x15c>)
 800881c:	5cd3      	ldrb	r3, [r2, r3]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b03      	cmp	r3, #3
 8008828:	d908      	bls.n	800883c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	4b1f      	ldr	r3, [pc, #124]	; (80088b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008832:	4013      	ands	r3, r2
 8008834:	1d1a      	adds	r2, r3, #4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	659a      	str	r2, [r3, #88]	; 0x58
 800883a:	e00d      	b.n	8008858 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008844:	4013      	ands	r3, r2
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6593      	str	r3, [r2, #88]	; 0x58
 800884a:	e005      	b.n	8008858 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	40020010 	.word	0x40020010
 800886c:	40020028 	.word	0x40020028
 8008870:	40020040 	.word	0x40020040
 8008874:	40020058 	.word	0x40020058
 8008878:	40020070 	.word	0x40020070
 800887c:	40020088 	.word	0x40020088
 8008880:	400200a0 	.word	0x400200a0
 8008884:	400200b8 	.word	0x400200b8
 8008888:	40020410 	.word	0x40020410
 800888c:	40020428 	.word	0x40020428
 8008890:	40020440 	.word	0x40020440
 8008894:	40020458 	.word	0x40020458
 8008898:	40020470 	.word	0x40020470
 800889c:	40020488 	.word	0x40020488
 80088a0:	400204a0 	.word	0x400204a0
 80088a4:	400204b8 	.word	0x400204b8
 80088a8:	aaaaaaab 	.word	0xaaaaaaab
 80088ac:	08017474 	.word	0x08017474
 80088b0:	fffffc00 	.word	0xfffffc00

080088b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d120      	bne.n	800890a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d858      	bhi.n	8008982 <DMA_CheckFifoParam+0xce>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <DMA_CheckFifoParam+0x24>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	080088e9 	.word	0x080088e9
 80088dc:	080088fb 	.word	0x080088fb
 80088e0:	080088e9 	.word	0x080088e9
 80088e4:	08008983 	.word	0x08008983
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d048      	beq.n	8008986 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088f8:	e045      	b.n	8008986 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008902:	d142      	bne.n	800898a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008908:	e03f      	b.n	800898a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008912:	d123      	bne.n	800895c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	2b03      	cmp	r3, #3
 800891a:	d838      	bhi.n	800898e <DMA_CheckFifoParam+0xda>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <DMA_CheckFifoParam+0x70>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	08008935 	.word	0x08008935
 8008928:	0800893b 	.word	0x0800893b
 800892c:	08008935 	.word	0x08008935
 8008930:	0800894d 	.word	0x0800894d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
        break;
 8008938:	e030      	b.n	800899c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d025      	beq.n	8008992 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800894a:	e022      	b.n	8008992 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008954:	d11f      	bne.n	8008996 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800895a:	e01c      	b.n	8008996 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	2b02      	cmp	r3, #2
 8008962:	d902      	bls.n	800896a <DMA_CheckFifoParam+0xb6>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d003      	beq.n	8008970 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008968:	e018      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
        break;
 800896e:	e015      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00e      	beq.n	800899a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
    break;
 8008980:	e00b      	b.n	800899a <DMA_CheckFifoParam+0xe6>
        break;
 8008982:	bf00      	nop
 8008984:	e00a      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        break;
 8008986:	bf00      	nop
 8008988:	e008      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        break;
 800898a:	bf00      	nop
 800898c:	e006      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        break;
 800898e:	bf00      	nop
 8008990:	e004      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        break;
 8008992:	bf00      	nop
 8008994:	e002      	b.n	800899c <DMA_CheckFifoParam+0xe8>
        break;
 8008996:	bf00      	nop
 8008998:	e000      	b.n	800899c <DMA_CheckFifoParam+0xe8>
    break;
 800899a:	bf00      	nop
    }
  }

  return status;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop

080089ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a38      	ldr	r2, [pc, #224]	; (8008aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d022      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a36      	ldr	r2, [pc, #216]	; (8008aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01d      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a35      	ldr	r2, [pc, #212]	; (8008aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d018      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a33      	ldr	r2, [pc, #204]	; (8008aac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a32      	ldr	r2, [pc, #200]	; (8008ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00e      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a30      	ldr	r2, [pc, #192]	; (8008ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d009      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a2f      	ldr	r2, [pc, #188]	; (8008ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a2d      	ldr	r2, [pc, #180]	; (8008abc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d101      	bne.n	8008a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01a      	beq.n	8008a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	3b08      	subs	r3, #8
 8008a1c:	4a28      	ldr	r2, [pc, #160]	; (8008ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a24      	ldr	r2, [pc, #144]	; (8008ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	2201      	movs	r2, #1
 8008a42:	409a      	lsls	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a48:	e024      	b.n	8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	3b10      	subs	r3, #16
 8008a52:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a54:	fba2 2303 	umull	r2, r3, r2, r3
 8008a58:	091b      	lsrs	r3, r3, #4
 8008a5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4a1c      	ldr	r2, [pc, #112]	; (8008ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d806      	bhi.n	8008a72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4a1b      	ldr	r2, [pc, #108]	; (8008ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d902      	bls.n	8008a72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a16      	ldr	r2, [pc, #88]	; (8008adc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 031f 	and.w	r3, r3, #31
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	409a      	lsls	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	58025408 	.word	0x58025408
 8008aa4:	5802541c 	.word	0x5802541c
 8008aa8:	58025430 	.word	0x58025430
 8008aac:	58025444 	.word	0x58025444
 8008ab0:	58025458 	.word	0x58025458
 8008ab4:	5802546c 	.word	0x5802546c
 8008ab8:	58025480 	.word	0x58025480
 8008abc:	58025494 	.word	0x58025494
 8008ac0:	cccccccd 	.word	0xcccccccd
 8008ac4:	16009600 	.word	0x16009600
 8008ac8:	58025880 	.word	0x58025880
 8008acc:	aaaaaaab 	.word	0xaaaaaaab
 8008ad0:	400204b8 	.word	0x400204b8
 8008ad4:	4002040f 	.word	0x4002040f
 8008ad8:	10008200 	.word	0x10008200
 8008adc:	40020880 	.word	0x40020880

08008ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d04a      	beq.n	8008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d847      	bhi.n	8008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a25      	ldr	r2, [pc, #148]	; (8008b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d022      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a24      	ldr	r2, [pc, #144]	; (8008b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d01d      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d018      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a21      	ldr	r2, [pc, #132]	; (8008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d013      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1f      	ldr	r2, [pc, #124]	; (8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00e      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1e      	ldr	r2, [pc, #120]	; (8008bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d009      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1c      	ldr	r2, [pc, #112]	; (8008bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d004      	beq.n	8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a1b      	ldr	r2, [pc, #108]	; (8008bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d101      	bne.n	8008b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4b17      	ldr	r3, [pc, #92]	; (8008bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a15      	ldr	r2, [pc, #84]	; (8008bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b68:	671a      	str	r2, [r3, #112]	; 0x70
 8008b6a:	e009      	b.n	8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	2201      	movs	r2, #1
 8008b86:	409a      	lsls	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	58025408 	.word	0x58025408
 8008b9c:	5802541c 	.word	0x5802541c
 8008ba0:	58025430 	.word	0x58025430
 8008ba4:	58025444 	.word	0x58025444
 8008ba8:	58025458 	.word	0x58025458
 8008bac:	5802546c 	.word	0x5802546c
 8008bb0:	58025480 	.word	0x58025480
 8008bb4:	58025494 	.word	0x58025494
 8008bb8:	1600963f 	.word	0x1600963f
 8008bbc:	58025940 	.word	0x58025940
 8008bc0:	1000823f 	.word	0x1000823f
 8008bc4:	40020940 	.word	0x40020940

08008bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b089      	sub	sp, #36	; 0x24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bd6:	4b89      	ldr	r3, [pc, #548]	; (8008dfc <HAL_GPIO_Init+0x234>)
 8008bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bda:	e194      	b.n	8008f06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	2101      	movs	r1, #1
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	4013      	ands	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 8186 	beq.w	8008f00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d005      	beq.n	8008c0c <HAL_GPIO_Init+0x44>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d130      	bne.n	8008c6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	2203      	movs	r2, #3
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4013      	ands	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c42:	2201      	movs	r2, #1
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	091b      	lsrs	r3, r3, #4
 8008c58:	f003 0201 	and.w	r2, r3, #1
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d017      	beq.n	8008caa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	2203      	movs	r2, #3
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d123      	bne.n	8008cfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	08da      	lsrs	r2, r3, #3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3208      	adds	r2, #8
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	220f      	movs	r2, #15
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	08da      	lsrs	r2, r3, #3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3208      	adds	r2, #8
 8008cf8:	69b9      	ldr	r1, [r7, #24]
 8008cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	2203      	movs	r2, #3
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	4013      	ands	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f003 0203 	and.w	r2, r3, #3
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	fa02 f303 	lsl.w	r3, r2, r3
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80e0 	beq.w	8008f00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d40:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <HAL_GPIO_Init+0x238>)
 8008d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d46:	4a2e      	ldr	r2, [pc, #184]	; (8008e00 <HAL_GPIO_Init+0x238>)
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d50:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <HAL_GPIO_Init+0x238>)
 8008d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d5e:	4a29      	ldr	r2, [pc, #164]	; (8008e04 <HAL_GPIO_Init+0x23c>)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	089b      	lsrs	r3, r3, #2
 8008d64:	3302      	adds	r3, #2
 8008d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	220f      	movs	r2, #15
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a20      	ldr	r2, [pc, #128]	; (8008e08 <HAL_GPIO_Init+0x240>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d052      	beq.n	8008e30 <HAL_GPIO_Init+0x268>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a1f      	ldr	r2, [pc, #124]	; (8008e0c <HAL_GPIO_Init+0x244>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d031      	beq.n	8008df6 <HAL_GPIO_Init+0x22e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a1e      	ldr	r2, [pc, #120]	; (8008e10 <HAL_GPIO_Init+0x248>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d02b      	beq.n	8008df2 <HAL_GPIO_Init+0x22a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <HAL_GPIO_Init+0x24c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d025      	beq.n	8008dee <HAL_GPIO_Init+0x226>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <HAL_GPIO_Init+0x250>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d01f      	beq.n	8008dea <HAL_GPIO_Init+0x222>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a1b      	ldr	r2, [pc, #108]	; (8008e1c <HAL_GPIO_Init+0x254>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d019      	beq.n	8008de6 <HAL_GPIO_Init+0x21e>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a1a      	ldr	r2, [pc, #104]	; (8008e20 <HAL_GPIO_Init+0x258>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d013      	beq.n	8008de2 <HAL_GPIO_Init+0x21a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a19      	ldr	r2, [pc, #100]	; (8008e24 <HAL_GPIO_Init+0x25c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00d      	beq.n	8008dde <HAL_GPIO_Init+0x216>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a18      	ldr	r2, [pc, #96]	; (8008e28 <HAL_GPIO_Init+0x260>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <HAL_GPIO_Init+0x212>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <HAL_GPIO_Init+0x264>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d101      	bne.n	8008dd6 <HAL_GPIO_Init+0x20e>
 8008dd2:	2309      	movs	r3, #9
 8008dd4:	e02d      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e02b      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008dda:	2308      	movs	r3, #8
 8008ddc:	e029      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008dde:	2307      	movs	r3, #7
 8008de0:	e027      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008de2:	2306      	movs	r3, #6
 8008de4:	e025      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008de6:	2305      	movs	r3, #5
 8008de8:	e023      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008dea:	2304      	movs	r3, #4
 8008dec:	e021      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008dee:	2303      	movs	r3, #3
 8008df0:	e01f      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e01d      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e01b      	b.n	8008e32 <HAL_GPIO_Init+0x26a>
 8008dfa:	bf00      	nop
 8008dfc:	58000080 	.word	0x58000080
 8008e00:	58024400 	.word	0x58024400
 8008e04:	58000400 	.word	0x58000400
 8008e08:	58020000 	.word	0x58020000
 8008e0c:	58020400 	.word	0x58020400
 8008e10:	58020800 	.word	0x58020800
 8008e14:	58020c00 	.word	0x58020c00
 8008e18:	58021000 	.word	0x58021000
 8008e1c:	58021400 	.word	0x58021400
 8008e20:	58021800 	.word	0x58021800
 8008e24:	58021c00 	.word	0x58021c00
 8008e28:	58022000 	.word	0x58022000
 8008e2c:	58022400 	.word	0x58022400
 8008e30:	2300      	movs	r3, #0
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	f002 0203 	and.w	r2, r2, #3
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	4093      	lsls	r3, r2
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e42:	4938      	ldr	r1, [pc, #224]	; (8008f24 <HAL_GPIO_Init+0x35c>)
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	089b      	lsrs	r3, r3, #2
 8008e48:	3302      	adds	r3, #2
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	43db      	mvns	r3, r3
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	43db      	mvns	r3, r3
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	3301      	adds	r3, #1
 8008f04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f ae63 	bne.w	8008bdc <HAL_GPIO_Init+0x14>
  }
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	3724      	adds	r7, #36	; 0x24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	58000400 	.word	0x58000400

08008f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]
 8008f44:	e001      	b.n	8008f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
 8008f64:	4613      	mov	r3, r2
 8008f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f68:	787b      	ldrb	r3, [r7, #1]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f6e:	887a      	ldrh	r2, [r7, #2]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f74:	e003      	b.n	8008f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f76:	887b      	ldrh	r3, [r7, #2]
 8008f78:	041a      	lsls	r2, r3, #16
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	619a      	str	r2, [r3, #24]
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
	...

08008f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e08b      	b.n	80090b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7fa f8d2 	bl	800315c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2224      	movs	r2, #36	; 0x24
 8008fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d107      	bne.n	8009006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	e006      	b.n	8009014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d108      	bne.n	800902e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800902a:	605a      	str	r2, [r3, #4]
 800902c:	e007      	b.n	800903e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800903c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6859      	ldr	r1, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <HAL_I2C_Init+0x134>)
 800904a:	430b      	orrs	r3, r1
 800904c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800905c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1a      	ldr	r2, [r3, #32]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	02008000 	.word	0x02008000

080090c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	461a      	mov	r2, r3
 80090d0:	460b      	mov	r3, r1
 80090d2:	817b      	strh	r3, [r7, #10]
 80090d4:	4613      	mov	r3, r2
 80090d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	f040 80fd 	bne.w	80092e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_I2C_Master_Transmit+0x30>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e0f6      	b.n	80092e2 <HAL_I2C_Master_Transmit+0x21e>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090fc:	f7fa fe00 	bl	8003d00 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	2319      	movs	r3, #25
 8009108:	2201      	movs	r2, #1
 800910a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fa0a 	bl	8009528 <I2C_WaitOnFlagUntilTimeout>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e0e1      	b.n	80092e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2221      	movs	r2, #33	; 0x21
 8009122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2210      	movs	r2, #16
 800912a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	893a      	ldrh	r2, [r7, #8]
 800913e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914a:	b29b      	uxth	r3, r3
 800914c:	2bff      	cmp	r3, #255	; 0xff
 800914e:	d906      	bls.n	800915e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	22ff      	movs	r2, #255	; 0xff
 8009154:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e007      	b.n	800916e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009162:	b29a      	uxth	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800916c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d024      	beq.n	80091c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800919e:	3b01      	subs	r3, #1
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	3301      	adds	r3, #1
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	8979      	ldrh	r1, [r7, #10]
 80091b2:	4b4e      	ldr	r3, [pc, #312]	; (80092ec <HAL_I2C_Master_Transmit+0x228>)
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fc05 	bl	80099c8 <I2C_TransferConfig>
 80091be:	e066      	b.n	800928e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	8979      	ldrh	r1, [r7, #10]
 80091c8:	4b48      	ldr	r3, [pc, #288]	; (80092ec <HAL_I2C_Master_Transmit+0x228>)
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fbfa 	bl	80099c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80091d4:	e05b      	b.n	800928e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	6a39      	ldr	r1, [r7, #32]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f9fd 	bl	80095da <I2C_WaitOnTXISFlagUntilTimeout>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e07b      	b.n	80092e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	781a      	ldrb	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d034      	beq.n	800928e <HAL_I2C_Master_Transmit+0x1ca>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009228:	2b00      	cmp	r3, #0
 800922a:	d130      	bne.n	800928e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	2200      	movs	r2, #0
 8009234:	2180      	movs	r1, #128	; 0x80
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 f976 	bl	8009528 <I2C_WaitOnFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e04d      	b.n	80092e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924a:	b29b      	uxth	r3, r3
 800924c:	2bff      	cmp	r3, #255	; 0xff
 800924e:	d90e      	bls.n	800926e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	22ff      	movs	r2, #255	; 0xff
 8009254:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800925a:	b2da      	uxtb	r2, r3
 800925c:	8979      	ldrh	r1, [r7, #10]
 800925e:	2300      	movs	r3, #0
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 fbae 	bl	80099c8 <I2C_TransferConfig>
 800926c:	e00f      	b.n	800928e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009272:	b29a      	uxth	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800927c:	b2da      	uxtb	r2, r3
 800927e:	8979      	ldrh	r1, [r7, #10]
 8009280:	2300      	movs	r3, #0
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fb9d 	bl	80099c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009292:	b29b      	uxth	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d19e      	bne.n	80091d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	6a39      	ldr	r1, [r7, #32]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f9e3 	bl	8009668 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e01a      	b.n	80092e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2220      	movs	r2, #32
 80092b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6859      	ldr	r1, [r3, #4]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <HAL_I2C_Master_Transmit+0x22c>)
 80092c0:	400b      	ands	r3, r1
 80092c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	e000      	b.n	80092e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80092e0:	2302      	movs	r3, #2
  }
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	80002000 	.word	0x80002000
 80092f0:	fe00e800 	.word	0xfe00e800

080092f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	461a      	mov	r2, r3
 8009300:	460b      	mov	r3, r1
 8009302:	817b      	strh	r3, [r7, #10]
 8009304:	4613      	mov	r3, r2
 8009306:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b20      	cmp	r3, #32
 8009312:	f040 80db 	bne.w	80094cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_I2C_Master_Receive+0x30>
 8009320:	2302      	movs	r3, #2
 8009322:	e0d4      	b.n	80094ce <HAL_I2C_Master_Receive+0x1da>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800932c:	f7fa fce8 	bl	8003d00 <HAL_GetTick>
 8009330:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	2319      	movs	r3, #25
 8009338:	2201      	movs	r2, #1
 800933a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 f8f2 	bl	8009528 <I2C_WaitOnFlagUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e0bf      	b.n	80094ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2222      	movs	r2, #34	; 0x22
 8009352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2210      	movs	r2, #16
 800935a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	893a      	ldrh	r2, [r7, #8]
 800936e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	2bff      	cmp	r3, #255	; 0xff
 800937e:	d90e      	bls.n	800939e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938a:	b2da      	uxtb	r2, r3
 800938c:	8979      	ldrh	r1, [r7, #10]
 800938e:	4b52      	ldr	r3, [pc, #328]	; (80094d8 <HAL_I2C_Master_Receive+0x1e4>)
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fb16 	bl	80099c8 <I2C_TransferConfig>
 800939c:	e06d      	b.n	800947a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	8979      	ldrh	r1, [r7, #10]
 80093b0:	4b49      	ldr	r3, [pc, #292]	; (80094d8 <HAL_I2C_Master_Receive+0x1e4>)
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 fb05 	bl	80099c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80093be:	e05c      	b.n	800947a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	6a39      	ldr	r1, [r7, #32]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f993 	bl	80096f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e07c      	b.n	80094ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d034      	beq.n	800947a <HAL_I2C_Master_Receive+0x186>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009414:	2b00      	cmp	r3, #0
 8009416:	d130      	bne.n	800947a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	2200      	movs	r2, #0
 8009420:	2180      	movs	r1, #128	; 0x80
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f880 	bl	8009528 <I2C_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e04d      	b.n	80094ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009436:	b29b      	uxth	r3, r3
 8009438:	2bff      	cmp	r3, #255	; 0xff
 800943a:	d90e      	bls.n	800945a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	22ff      	movs	r2, #255	; 0xff
 8009440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009446:	b2da      	uxtb	r2, r3
 8009448:	8979      	ldrh	r1, [r7, #10]
 800944a:	2300      	movs	r3, #0
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fab8 	bl	80099c8 <I2C_TransferConfig>
 8009458:	e00f      	b.n	800947a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009468:	b2da      	uxtb	r2, r3
 800946a:	8979      	ldrh	r1, [r7, #10]
 800946c:	2300      	movs	r3, #0
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 faa7 	bl	80099c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d19d      	bne.n	80093c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	6a39      	ldr	r1, [r7, #32]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 f8ed 	bl	8009668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e01a      	b.n	80094ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2220      	movs	r2, #32
 800949e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <HAL_I2C_Master_Receive+0x1e8>)
 80094ac:	400b      	ands	r3, r1
 80094ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	e000      	b.n	80094ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80094cc:	2302      	movs	r3, #2
  }
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	80002400 	.word	0x80002400
 80094dc:	fe00e800 	.word	0xfe00e800

080094e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d103      	bne.n	80094fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b01      	cmp	r3, #1
 800950a:	d007      	beq.n	800951c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	619a      	str	r2, [r3, #24]
  }
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009538:	e03b      	b.n	80095b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f962 	bl	8009808 <I2C_IsErrorOccurred>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e041      	b.n	80095d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009554:	d02d      	beq.n	80095b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009556:	f7fa fbd3 	bl	8003d00 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d122      	bne.n	80095b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	4013      	ands	r3, r2
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	429a      	cmp	r2, r3
 800957a:	bf0c      	ite	eq
 800957c:	2301      	moveq	r3, #1
 800957e:	2300      	movne	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	429a      	cmp	r2, r3
 8009588:	d113      	bne.n	80095b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958e:	f043 0220 	orr.w	r2, r3, #32
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e00f      	b.n	80095d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699a      	ldr	r2, [r3, #24]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4013      	ands	r3, r2
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	429a      	cmp	r2, r3
 80095c0:	bf0c      	ite	eq
 80095c2:	2301      	moveq	r3, #1
 80095c4:	2300      	movne	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d0b4      	beq.n	800953a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095e6:	e033      	b.n	8009650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f90b 	bl	8009808 <I2C_IsErrorOccurred>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e031      	b.n	8009660 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009602:	d025      	beq.n	8009650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009604:	f7fa fb7c 	bl	8003d00 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	429a      	cmp	r2, r3
 8009612:	d302      	bcc.n	800961a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11a      	bne.n	8009650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b02      	cmp	r3, #2
 8009626:	d013      	beq.n	8009650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962c:	f043 0220 	orr.w	r2, r3, #32
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e007      	b.n	8009660 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b02      	cmp	r3, #2
 800965c:	d1c4      	bne.n	80095e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009674:	e02f      	b.n	80096d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f8c4 	bl	8009808 <I2C_IsErrorOccurred>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e02d      	b.n	80096e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968a:	f7fa fb39 	bl	8003d00 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	429a      	cmp	r2, r3
 8009698:	d302      	bcc.n	80096a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11a      	bne.n	80096d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f003 0320 	and.w	r3, r3, #32
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	d013      	beq.n	80096d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b2:	f043 0220 	orr.w	r2, r3, #32
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2220      	movs	r2, #32
 80096be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e007      	b.n	80096e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	d1c8      	bne.n	8009676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009700:	e071      	b.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 f87e 	bl	8009808 <I2C_IsErrorOccurred>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f003 0320 	and.w	r3, r3, #32
 8009720:	2b20      	cmp	r3, #32
 8009722:	d13b      	bne.n	800979c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d138      	bne.n	800979c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b04      	cmp	r3, #4
 8009736:	d105      	bne.n	8009744 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	f003 0310 	and.w	r3, r3, #16
 800974e:	2b10      	cmp	r3, #16
 8009750:	d121      	bne.n	8009796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2210      	movs	r2, #16
 8009758:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2204      	movs	r2, #4
 800975e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2220      	movs	r2, #32
 8009766:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6859      	ldr	r1, [r3, #4]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4b24      	ldr	r3, [pc, #144]	; (8009804 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009774:	400b      	ands	r3, r1
 8009776:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	75fb      	strb	r3, [r7, #23]
 8009794:	e002      	b.n	800979c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800979c:	f7fa fab0 	bl	8003d00 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d302      	bcc.n	80097b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d119      	bne.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d116      	bne.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d00f      	beq.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d002      	beq.n	80097fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d083      	beq.n	8009702 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	fe00e800 	.word	0xfe00e800

08009808 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	; 0x28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b00      	cmp	r3, #0
 8009832:	d068      	beq.n	8009906 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2210      	movs	r2, #16
 800983a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800983c:	e049      	b.n	80098d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009844:	d045      	beq.n	80098d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009846:	f7fa fa5b 	bl	8003d00 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d302      	bcc.n	800985c <I2C_IsErrorOccurred+0x54>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d13a      	bne.n	80098d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009866:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800986e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987e:	d121      	bne.n	80098c4 <I2C_IsErrorOccurred+0xbc>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009886:	d01d      	beq.n	80098c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009888:	7cfb      	ldrb	r3, [r7, #19]
 800988a:	2b20      	cmp	r3, #32
 800988c:	d01a      	beq.n	80098c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800989c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800989e:	f7fa fa2f 	bl	8003d00 <HAL_GetTick>
 80098a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098a4:	e00e      	b.n	80098c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80098a6:	f7fa fa2b 	bl	8003d00 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b19      	cmp	r3, #25
 80098b2:	d907      	bls.n	80098c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	f043 0320 	orr.w	r3, r3, #32
 80098ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80098c2:	e006      	b.n	80098d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d1e9      	bne.n	80098a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f003 0320 	and.w	r3, r3, #32
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d003      	beq.n	80098e8 <I2C_IsErrorOccurred+0xe0>
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0aa      	beq.n	800983e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80098e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2220      	movs	r2, #32
 80098f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	f043 0304 	orr.w	r3, r3, #4
 80098fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00b      	beq.n	8009952 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	f043 0308 	orr.w	r3, r3, #8
 8009940:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800994a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800996c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01c      	beq.n	80099b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff fdaf 	bl	80094e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6859      	ldr	r1, [r3, #4]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <I2C_IsErrorOccurred+0x1bc>)
 800998e:	400b      	ands	r3, r1
 8009990:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	431a      	orrs	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80099b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3728      	adds	r7, #40	; 0x28
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	fe00e800 	.word	0xfe00e800

080099c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	817b      	strh	r3, [r7, #10]
 80099d6:	4613      	mov	r3, r2
 80099d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099da:	897b      	ldrh	r3, [r7, #10]
 80099dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099e0:	7a7b      	ldrb	r3, [r7, #9]
 80099e2:	041b      	lsls	r3, r3, #16
 80099e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	0d5b      	lsrs	r3, r3, #21
 8009a02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009a06:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <I2C_TransferConfig+0x60>)
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	43db      	mvns	r3, r3
 8009a0c:	ea02 0103 	and.w	r1, r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	03ff63ff 	.word	0x03ff63ff

08009a2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d138      	bne.n	8009ab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e032      	b.n	8009ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2224      	movs	r2, #36	; 0x24
 8009a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6819      	ldr	r1, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e000      	b.n	8009ab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ab4:	2302      	movs	r3, #2
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d139      	bne.n	8009b4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e033      	b.n	8009b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2224      	movs	r2, #36	; 0x24
 8009af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e000      	b.n	8009b4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b4c:	2302      	movs	r3, #2
  }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
	...

08009b5c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b6c:	f043 0302 	orr.w	r3, r3, #2
 8009b70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009b74:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009b82:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	4906      	ldr	r1, [pc, #24]	; (8009ba0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	604b      	str	r3, [r1, #4]
}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	58000400 	.word	0x58000400

08009ba4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009bb0:	4b18      	ldr	r3, [pc, #96]	; (8009c14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f023 0201 	bic.w	r2, r3, #1
 8009bb8:	4916      	ldr	r1, [pc, #88]	; (8009c14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009bc0:	4b14      	ldr	r3, [pc, #80]	; (8009c14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	4a13      	ldr	r2, [pc, #76]	; (8009c14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bc6:	f023 0305 	bic.w	r3, r3, #5
 8009bca:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009bcc:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	4a10      	ldr	r2, [pc, #64]	; (8009c14 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bd2:	f023 0302 	bic.w	r3, r3, #2
 8009bd6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	4a0e      	ldr	r2, [pc, #56]	; (8009c18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009bde:	f043 0304 	orr.w	r3, r3, #4
 8009be2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009be4:	f3bf 8f4f 	dsb	sy
}
 8009be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009bea:	f3bf 8f6f 	isb	sy
}
 8009bee:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d101      	bne.n	8009bfa <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009bf6:	bf30      	wfi
 8009bf8:	e000      	b.n	8009bfc <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009bfa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c02:	f023 0304 	bic.w	r3, r3, #4
 8009c06:	6113      	str	r3, [r2, #16]
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	58024800 	.word	0x58024800
 8009c18:	e000ed00 	.word	0xe000ed00

08009c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c24:	4b19      	ldr	r3, [pc, #100]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d00a      	beq.n	8009c46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c30:	4b16      	ldr	r3, [pc, #88]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0307 	and.w	r3, r3, #7
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d001      	beq.n	8009c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e01f      	b.n	8009c82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	e01d      	b.n	8009c82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c46:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f023 0207 	bic.w	r2, r3, #7
 8009c4e:	490f      	ldr	r1, [pc, #60]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c56:	f7fa f853 	bl	8003d00 <HAL_GetTick>
 8009c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c5c:	e009      	b.n	8009c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c5e:	f7fa f84f 	bl	8003d00 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c6c:	d901      	bls.n	8009c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e007      	b.n	8009c82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7e:	d1ee      	bne.n	8009c5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	58024800 	.word	0x58024800

08009c90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08c      	sub	sp, #48	; 0x30
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f000 bc48 	b.w	800a534 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8088 	beq.w	8009dc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cb2:	4b99      	ldr	r3, [pc, #612]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cbc:	4b96      	ldr	r3, [pc, #600]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	2b10      	cmp	r3, #16
 8009cc6:	d007      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x48>
 8009cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cca:	2b18      	cmp	r3, #24
 8009ccc:	d111      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x62>
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d10c      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cd8:	4b8f      	ldr	r3, [pc, #572]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d06d      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x130>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d169      	bne.n	8009dc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f000 bc21 	b.w	800a534 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfa:	d106      	bne.n	8009d0a <HAL_RCC_OscConfig+0x7a>
 8009cfc:	4b86      	ldr	r3, [pc, #536]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a85      	ldr	r2, [pc, #532]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e02e      	b.n	8009d68 <HAL_RCC_OscConfig+0xd8>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10c      	bne.n	8009d2c <HAL_RCC_OscConfig+0x9c>
 8009d12:	4b81      	ldr	r3, [pc, #516]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a80      	ldr	r2, [pc, #512]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	4b7e      	ldr	r3, [pc, #504]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a7d      	ldr	r2, [pc, #500]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	e01d      	b.n	8009d68 <HAL_RCC_OscConfig+0xd8>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d34:	d10c      	bne.n	8009d50 <HAL_RCC_OscConfig+0xc0>
 8009d36:	4b78      	ldr	r3, [pc, #480]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a77      	ldr	r2, [pc, #476]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	4b75      	ldr	r3, [pc, #468]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a74      	ldr	r2, [pc, #464]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	e00b      	b.n	8009d68 <HAL_RCC_OscConfig+0xd8>
 8009d50:	4b71      	ldr	r3, [pc, #452]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a70      	ldr	r2, [pc, #448]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	4b6e      	ldr	r3, [pc, #440]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a6d      	ldr	r2, [pc, #436]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d013      	beq.n	8009d98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d70:	f7f9 ffc6 	bl	8003d00 <HAL_GetTick>
 8009d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d76:	e008      	b.n	8009d8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d78:	f7f9 ffc2 	bl	8003d00 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	2b64      	cmp	r3, #100	; 0x64
 8009d84:	d901      	bls.n	8009d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e3d4      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d8a:	4b63      	ldr	r3, [pc, #396]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0f0      	beq.n	8009d78 <HAL_RCC_OscConfig+0xe8>
 8009d96:	e014      	b.n	8009dc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d98:	f7f9 ffb2 	bl	8003d00 <HAL_GetTick>
 8009d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d9e:	e008      	b.n	8009db2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009da0:	f7f9 ffae 	bl	8003d00 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2b64      	cmp	r3, #100	; 0x64
 8009dac:	d901      	bls.n	8009db2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e3c0      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009db2:	4b59      	ldr	r3, [pc, #356]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1f0      	bne.n	8009da0 <HAL_RCC_OscConfig+0x110>
 8009dbe:	e000      	b.n	8009dc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80ca 	beq.w	8009f64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dd0:	4b51      	ldr	r3, [pc, #324]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dda:	4b4f      	ldr	r3, [pc, #316]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <HAL_RCC_OscConfig+0x166>
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	2b18      	cmp	r3, #24
 8009dea:	d156      	bne.n	8009e9a <HAL_RCC_OscConfig+0x20a>
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	f003 0303 	and.w	r3, r3, #3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d151      	bne.n	8009e9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009df6:	4b48      	ldr	r3, [pc, #288]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <HAL_RCC_OscConfig+0x17e>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e392      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e0e:	4b42      	ldr	r3, [pc, #264]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f023 0219 	bic.w	r2, r3, #25
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	493f      	ldr	r1, [pc, #252]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e20:	f7f9 ff6e 	bl	8003d00 <HAL_GetTick>
 8009e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e26:	e008      	b.n	8009e3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e28:	f7f9 ff6a 	bl	8003d00 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e37c      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e3a:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0304 	and.w	r3, r3, #4
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0f0      	beq.n	8009e28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e46:	f7f9 ff67 	bl	8003d18 <HAL_GetREVID>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d817      	bhi.n	8009e84 <HAL_RCC_OscConfig+0x1f4>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b40      	cmp	r3, #64	; 0x40
 8009e5a:	d108      	bne.n	8009e6e <HAL_RCC_OscConfig+0x1de>
 8009e5c:	4b2e      	ldr	r3, [pc, #184]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e64:	4a2c      	ldr	r2, [pc, #176]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e6c:	e07a      	b.n	8009f64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e6e:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	031b      	lsls	r3, r3, #12
 8009e7c:	4926      	ldr	r1, [pc, #152]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e82:	e06f      	b.n	8009f64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e84:	4b24      	ldr	r3, [pc, #144]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	061b      	lsls	r3, r3, #24
 8009e92:	4921      	ldr	r1, [pc, #132]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e98:	e064      	b.n	8009f64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d047      	beq.n	8009f32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ea2:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f023 0219 	bic.w	r2, r3, #25
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	491a      	ldr	r1, [pc, #104]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb4:	f7f9 ff24 	bl	8003d00 <HAL_GetTick>
 8009eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009eba:	e008      	b.n	8009ece <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ebc:	f7f9 ff20 	bl	8003d00 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d901      	bls.n	8009ece <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e332      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ece:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0f0      	beq.n	8009ebc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eda:	f7f9 ff1d 	bl	8003d18 <HAL_GetREVID>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d819      	bhi.n	8009f1c <HAL_RCC_OscConfig+0x28c>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b40      	cmp	r3, #64	; 0x40
 8009eee:	d108      	bne.n	8009f02 <HAL_RCC_OscConfig+0x272>
 8009ef0:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ef8:	4a07      	ldr	r2, [pc, #28]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009efe:	6053      	str	r3, [r2, #4]
 8009f00:	e030      	b.n	8009f64 <HAL_RCC_OscConfig+0x2d4>
 8009f02:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	031b      	lsls	r3, r3, #12
 8009f10:	4901      	ldr	r1, [pc, #4]	; (8009f18 <HAL_RCC_OscConfig+0x288>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	604b      	str	r3, [r1, #4]
 8009f16:	e025      	b.n	8009f64 <HAL_RCC_OscConfig+0x2d4>
 8009f18:	58024400 	.word	0x58024400
 8009f1c:	4b9a      	ldr	r3, [pc, #616]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	061b      	lsls	r3, r3, #24
 8009f2a:	4997      	ldr	r1, [pc, #604]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	604b      	str	r3, [r1, #4]
 8009f30:	e018      	b.n	8009f64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f32:	4b95      	ldr	r3, [pc, #596]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a94      	ldr	r2, [pc, #592]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f38:	f023 0301 	bic.w	r3, r3, #1
 8009f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f3e:	f7f9 fedf 	bl	8003d00 <HAL_GetTick>
 8009f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f44:	e008      	b.n	8009f58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f46:	f7f9 fedb 	bl	8003d00 <HAL_GetTick>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d901      	bls.n	8009f58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e2ed      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f58:	4b8b      	ldr	r3, [pc, #556]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1f0      	bne.n	8009f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 80a9 	beq.w	800a0c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f72:	4b85      	ldr	r3, [pc, #532]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f7c:	4b82      	ldr	r3, [pc, #520]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d007      	beq.n	8009f98 <HAL_RCC_OscConfig+0x308>
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	2b18      	cmp	r3, #24
 8009f8c:	d13a      	bne.n	800a004 <HAL_RCC_OscConfig+0x374>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f003 0303 	and.w	r3, r3, #3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d135      	bne.n	800a004 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f98:	4b7b      	ldr	r3, [pc, #492]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x320>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	2b80      	cmp	r3, #128	; 0x80
 8009faa:	d001      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e2c1      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fb0:	f7f9 feb2 	bl	8003d18 <HAL_GetREVID>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d817      	bhi.n	8009fee <HAL_RCC_OscConfig+0x35e>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d108      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x348>
 8009fc6:	4b70      	ldr	r3, [pc, #448]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009fce:	4a6e      	ldr	r2, [pc, #440]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fd6:	e075      	b.n	800a0c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fd8:	4b6b      	ldr	r3, [pc, #428]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	069b      	lsls	r3, r3, #26
 8009fe6:	4968      	ldr	r1, [pc, #416]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fec:	e06a      	b.n	800a0c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fee:	4b66      	ldr	r3, [pc, #408]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	061b      	lsls	r3, r3, #24
 8009ffc:	4962      	ldr	r1, [pc, #392]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a002:	e05f      	b.n	800a0c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d042      	beq.n	800a092 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a00c:	4b5e      	ldr	r3, [pc, #376]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a5d      	ldr	r2, [pc, #372]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a018:	f7f9 fe72 	bl	8003d00 <HAL_GetTick>
 800a01c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a01e:	e008      	b.n	800a032 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a020:	f7f9 fe6e 	bl	8003d00 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d901      	bls.n	800a032 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e280      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a032:	4b55      	ldr	r3, [pc, #340]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0f0      	beq.n	800a020 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a03e:	f7f9 fe6b 	bl	8003d18 <HAL_GetREVID>
 800a042:	4603      	mov	r3, r0
 800a044:	f241 0203 	movw	r2, #4099	; 0x1003
 800a048:	4293      	cmp	r3, r2
 800a04a:	d817      	bhi.n	800a07c <HAL_RCC_OscConfig+0x3ec>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	2b20      	cmp	r3, #32
 800a052:	d108      	bne.n	800a066 <HAL_RCC_OscConfig+0x3d6>
 800a054:	4b4c      	ldr	r3, [pc, #304]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a05c:	4a4a      	ldr	r2, [pc, #296]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a05e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a062:	6053      	str	r3, [r2, #4]
 800a064:	e02e      	b.n	800a0c4 <HAL_RCC_OscConfig+0x434>
 800a066:	4b48      	ldr	r3, [pc, #288]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	069b      	lsls	r3, r3, #26
 800a074:	4944      	ldr	r1, [pc, #272]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a076:	4313      	orrs	r3, r2
 800a078:	604b      	str	r3, [r1, #4]
 800a07a:	e023      	b.n	800a0c4 <HAL_RCC_OscConfig+0x434>
 800a07c:	4b42      	ldr	r3, [pc, #264]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	061b      	lsls	r3, r3, #24
 800a08a:	493f      	ldr	r1, [pc, #252]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60cb      	str	r3, [r1, #12]
 800a090:	e018      	b.n	800a0c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a092:	4b3d      	ldr	r3, [pc, #244]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a3c      	ldr	r2, [pc, #240]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a09c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a09e:	f7f9 fe2f 	bl	8003d00 <HAL_GetTick>
 800a0a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0a4:	e008      	b.n	800a0b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0a6:	f7f9 fe2b 	bl	8003d00 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d901      	bls.n	800a0b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e23d      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0b8:	4b33      	ldr	r3, [pc, #204]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f0      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d036      	beq.n	800a13e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d019      	beq.n	800a10c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0d8:	4b2b      	ldr	r3, [pc, #172]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0dc:	4a2a      	ldr	r2, [pc, #168]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0e4:	f7f9 fe0c 	bl	8003d00 <HAL_GetTick>
 800a0e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0ea:	e008      	b.n	800a0fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0ec:	f7f9 fe08 	bl	8003d00 <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d901      	bls.n	800a0fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e21a      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0fe:	4b22      	ldr	r3, [pc, #136]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f0      	beq.n	800a0ec <HAL_RCC_OscConfig+0x45c>
 800a10a:	e018      	b.n	800a13e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a10c:	4b1e      	ldr	r3, [pc, #120]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a110:	4a1d      	ldr	r2, [pc, #116]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a112:	f023 0301 	bic.w	r3, r3, #1
 800a116:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a118:	f7f9 fdf2 	bl	8003d00 <HAL_GetTick>
 800a11c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a11e:	e008      	b.n	800a132 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a120:	f7f9 fdee 	bl	8003d00 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d901      	bls.n	800a132 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e200      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1f0      	bne.n	800a120 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d039      	beq.n	800a1be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d01c      	beq.n	800a18c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a152:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a0c      	ldr	r2, [pc, #48]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a15c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a15e:	f7f9 fdcf 	bl	8003d00 <HAL_GetTick>
 800a162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a164:	e008      	b.n	800a178 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a166:	f7f9 fdcb 	bl	8003d00 <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b02      	cmp	r3, #2
 800a172:	d901      	bls.n	800a178 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e1dd      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a178:	4b03      	ldr	r3, [pc, #12]	; (800a188 <HAL_RCC_OscConfig+0x4f8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0f0      	beq.n	800a166 <HAL_RCC_OscConfig+0x4d6>
 800a184:	e01b      	b.n	800a1be <HAL_RCC_OscConfig+0x52e>
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a18c:	4b9b      	ldr	r3, [pc, #620]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a9a      	ldr	r2, [pc, #616]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a196:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a198:	f7f9 fdb2 	bl	8003d00 <HAL_GetTick>
 800a19c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1a0:	f7f9 fdae 	bl	8003d00 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e1c0      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1b2:	4b92      	ldr	r3, [pc, #584]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1f0      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 8081 	beq.w	800a2ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a1cc:	4b8c      	ldr	r3, [pc, #560]	; (800a400 <HAL_RCC_OscConfig+0x770>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a8b      	ldr	r2, [pc, #556]	; (800a400 <HAL_RCC_OscConfig+0x770>)
 800a1d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1d8:	f7f9 fd92 	bl	8003d00 <HAL_GetTick>
 800a1dc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1e0:	f7f9 fd8e 	bl	8003d00 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b64      	cmp	r3, #100	; 0x64
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e1a0      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1f2:	4b83      	ldr	r3, [pc, #524]	; (800a400 <HAL_RCC_OscConfig+0x770>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0f0      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d106      	bne.n	800a214 <HAL_RCC_OscConfig+0x584>
 800a206:	4b7d      	ldr	r3, [pc, #500]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20a:	4a7c      	ldr	r2, [pc, #496]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a20c:	f043 0301 	orr.w	r3, r3, #1
 800a210:	6713      	str	r3, [r2, #112]	; 0x70
 800a212:	e02d      	b.n	800a270 <HAL_RCC_OscConfig+0x5e0>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10c      	bne.n	800a236 <HAL_RCC_OscConfig+0x5a6>
 800a21c:	4b77      	ldr	r3, [pc, #476]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a220:	4a76      	ldr	r2, [pc, #472]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	6713      	str	r3, [r2, #112]	; 0x70
 800a228:	4b74      	ldr	r3, [pc, #464]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22c:	4a73      	ldr	r2, [pc, #460]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a22e:	f023 0304 	bic.w	r3, r3, #4
 800a232:	6713      	str	r3, [r2, #112]	; 0x70
 800a234:	e01c      	b.n	800a270 <HAL_RCC_OscConfig+0x5e0>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	d10c      	bne.n	800a258 <HAL_RCC_OscConfig+0x5c8>
 800a23e:	4b6f      	ldr	r3, [pc, #444]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	4a6e      	ldr	r2, [pc, #440]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a244:	f043 0304 	orr.w	r3, r3, #4
 800a248:	6713      	str	r3, [r2, #112]	; 0x70
 800a24a:	4b6c      	ldr	r3, [pc, #432]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	4a6b      	ldr	r2, [pc, #428]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a250:	f043 0301 	orr.w	r3, r3, #1
 800a254:	6713      	str	r3, [r2, #112]	; 0x70
 800a256:	e00b      	b.n	800a270 <HAL_RCC_OscConfig+0x5e0>
 800a258:	4b68      	ldr	r3, [pc, #416]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	4a67      	ldr	r2, [pc, #412]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	6713      	str	r3, [r2, #112]	; 0x70
 800a264:	4b65      	ldr	r3, [pc, #404]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a268:	4a64      	ldr	r2, [pc, #400]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a26a:	f023 0304 	bic.w	r3, r3, #4
 800a26e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d015      	beq.n	800a2a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a278:	f7f9 fd42 	bl	8003d00 <HAL_GetTick>
 800a27c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a27e:	e00a      	b.n	800a296 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a280:	f7f9 fd3e 	bl	8003d00 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a28e:	4293      	cmp	r3, r2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e14e      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a296:	4b59      	ldr	r3, [pc, #356]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0ee      	beq.n	800a280 <HAL_RCC_OscConfig+0x5f0>
 800a2a2:	e014      	b.n	800a2ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2a4:	f7f9 fd2c 	bl	8003d00 <HAL_GetTick>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2aa:	e00a      	b.n	800a2c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2ac:	f7f9 fd28 	bl	8003d00 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d901      	bls.n	800a2c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e138      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2c2:	4b4e      	ldr	r3, [pc, #312]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1ee      	bne.n	800a2ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 812d 	beq.w	800a532 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a2d8:	4b48      	ldr	r3, [pc, #288]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2e0:	2b18      	cmp	r3, #24
 800a2e2:	f000 80bd 	beq.w	800a460 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	f040 809e 	bne.w	800a42c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2f0:	4b42      	ldr	r3, [pc, #264]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a41      	ldr	r2, [pc, #260]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a2f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2fc:	f7f9 fd00 	bl	8003d00 <HAL_GetTick>
 800a300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a302:	e008      	b.n	800a316 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a304:	f7f9 fcfc 	bl	8003d00 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e10e      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a316:	4b39      	ldr	r3, [pc, #228]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1f0      	bne.n	800a304 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a322:	4b36      	ldr	r3, [pc, #216]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a326:	4b37      	ldr	r3, [pc, #220]	; (800a404 <HAL_RCC_OscConfig+0x774>)
 800a328:	4013      	ands	r3, r2
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a332:	0112      	lsls	r2, r2, #4
 800a334:	430a      	orrs	r2, r1
 800a336:	4931      	ldr	r1, [pc, #196]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	628b      	str	r3, [r1, #40]	; 0x28
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a340:	3b01      	subs	r3, #1
 800a342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34a:	3b01      	subs	r3, #1
 800a34c:	025b      	lsls	r3, r3, #9
 800a34e:	b29b      	uxth	r3, r3
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a356:	3b01      	subs	r3, #1
 800a358:	041b      	lsls	r3, r3, #16
 800a35a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a364:	3b01      	subs	r3, #1
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a36c:	4923      	ldr	r1, [pc, #140]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a372:	4b22      	ldr	r3, [pc, #136]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	4a21      	ldr	r2, [pc, #132]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a378:	f023 0301 	bic.w	r3, r3, #1
 800a37c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a37e:	4b1f      	ldr	r3, [pc, #124]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a382:	4b21      	ldr	r3, [pc, #132]	; (800a408 <HAL_RCC_OscConfig+0x778>)
 800a384:	4013      	ands	r3, r2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a38a:	00d2      	lsls	r2, r2, #3
 800a38c:	491b      	ldr	r1, [pc, #108]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a392:	4b1a      	ldr	r3, [pc, #104]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	f023 020c 	bic.w	r2, r3, #12
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	4917      	ldr	r1, [pc, #92]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3a4:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	f023 0202 	bic.w	r2, r3, #2
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b0:	4912      	ldr	r1, [pc, #72]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3b6:	4b11      	ldr	r3, [pc, #68]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ba:	4a10      	ldr	r2, [pc, #64]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3c2:	4b0e      	ldr	r3, [pc, #56]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c6:	4a0d      	ldr	r2, [pc, #52]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	4a0a      	ldr	r2, [pc, #40]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a3da:	4b08      	ldr	r3, [pc, #32]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	4a07      	ldr	r2, [pc, #28]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a04      	ldr	r2, [pc, #16]	; (800a3fc <HAL_RCC_OscConfig+0x76c>)
 800a3ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f2:	f7f9 fc85 	bl	8003d00 <HAL_GetTick>
 800a3f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3f8:	e011      	b.n	800a41e <HAL_RCC_OscConfig+0x78e>
 800a3fa:	bf00      	nop
 800a3fc:	58024400 	.word	0x58024400
 800a400:	58024800 	.word	0x58024800
 800a404:	fffffc0c 	.word	0xfffffc0c
 800a408:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a40c:	f7f9 fc78 	bl	8003d00 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b02      	cmp	r3, #2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e08a      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a41e:	4b47      	ldr	r3, [pc, #284]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f0      	beq.n	800a40c <HAL_RCC_OscConfig+0x77c>
 800a42a:	e082      	b.n	800a532 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a42c:	4b43      	ldr	r3, [pc, #268]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a42      	ldr	r2, [pc, #264]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a438:	f7f9 fc62 	bl	8003d00 <HAL_GetTick>
 800a43c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a43e:	e008      	b.n	800a452 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a440:	f7f9 fc5e 	bl	8003d00 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e070      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a452:	4b3a      	ldr	r3, [pc, #232]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f0      	bne.n	800a440 <HAL_RCC_OscConfig+0x7b0>
 800a45e:	e068      	b.n	800a532 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a460:	4b36      	ldr	r3, [pc, #216]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a464:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a466:	4b35      	ldr	r3, [pc, #212]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	2b01      	cmp	r3, #1
 800a472:	d031      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f003 0203 	and.w	r2, r3, #3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a47e:	429a      	cmp	r2, r3
 800a480:	d12a      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	091b      	lsrs	r3, r3, #4
 800a486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a48e:	429a      	cmp	r2, r3
 800a490:	d122      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d11a      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	0a5b      	lsrs	r3, r3, #9
 800a4a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d111      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d108      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	0e1b      	lsrs	r3, r3, #24
 800a4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d001      	beq.n	800a4dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e02b      	b.n	800a534 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a4dc:	4b17      	ldr	r3, [pc, #92]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e0:	08db      	lsrs	r3, r3, #3
 800a4e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d01f      	beq.n	800a532 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a4f2:	4b12      	ldr	r3, [pc, #72]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f6:	4a11      	ldr	r2, [pc, #68]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a4fe:	f7f9 fbff 	bl	8003d00 <HAL_GetTick>
 800a502:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a504:	bf00      	nop
 800a506:	f7f9 fbfb 	bl	8003d00 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	4293      	cmp	r3, r2
 800a510:	d0f9      	beq.n	800a506 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a512:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <HAL_RCC_OscConfig+0x8b0>)
 800a518:	4013      	ands	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a51e:	00d2      	lsls	r2, r2, #3
 800a520:	4906      	ldr	r1, [pc, #24]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a522:	4313      	orrs	r3, r2
 800a524:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	4a04      	ldr	r2, [pc, #16]	; (800a53c <HAL_RCC_OscConfig+0x8ac>)
 800a52c:	f043 0301 	orr.w	r3, r3, #1
 800a530:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3730      	adds	r7, #48	; 0x30
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	58024400 	.word	0x58024400
 800a540:	ffff0007 	.word	0xffff0007

0800a544 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e19c      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a558:	4b8a      	ldr	r3, [pc, #552]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d910      	bls.n	800a588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a566:	4b87      	ldr	r3, [pc, #540]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f023 020f 	bic.w	r2, r3, #15
 800a56e:	4985      	ldr	r1, [pc, #532]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	4313      	orrs	r3, r2
 800a574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a576:	4b83      	ldr	r3, [pc, #524]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d001      	beq.n	800a588 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e184      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	d010      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691a      	ldr	r2, [r3, #16]
 800a598:	4b7b      	ldr	r3, [pc, #492]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d908      	bls.n	800a5b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5a4:	4b78      	ldr	r3, [pc, #480]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	4975      	ldr	r1, [pc, #468]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0308 	and.w	r3, r3, #8
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d010      	beq.n	800a5e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	695a      	ldr	r2, [r3, #20]
 800a5c6:	4b70      	ldr	r3, [pc, #448]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d908      	bls.n	800a5e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5d2:	4b6d      	ldr	r3, [pc, #436]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	496a      	ldr	r1, [pc, #424]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0310 	and.w	r3, r3, #16
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d010      	beq.n	800a612 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	699a      	ldr	r2, [r3, #24]
 800a5f4:	4b64      	ldr	r3, [pc, #400]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d908      	bls.n	800a612 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a600:	4b61      	ldr	r3, [pc, #388]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	495e      	ldr	r1, [pc, #376]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d010      	beq.n	800a640 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69da      	ldr	r2, [r3, #28]
 800a622:	4b59      	ldr	r3, [pc, #356]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d908      	bls.n	800a640 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a62e:	4b56      	ldr	r3, [pc, #344]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	4953      	ldr	r1, [pc, #332]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a63c:	4313      	orrs	r3, r2
 800a63e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d010      	beq.n	800a66e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	4b4d      	ldr	r3, [pc, #308]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	f003 030f 	and.w	r3, r3, #15
 800a658:	429a      	cmp	r2, r3
 800a65a:	d908      	bls.n	800a66e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a65c:	4b4a      	ldr	r3, [pc, #296]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	f023 020f 	bic.w	r2, r3, #15
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4947      	ldr	r1, [pc, #284]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d055      	beq.n	800a726 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a67a:	4b43      	ldr	r3, [pc, #268]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4940      	ldr	r1, [pc, #256]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d107      	bne.n	800a6a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a694:	4b3c      	ldr	r3, [pc, #240]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d121      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e0f6      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d107      	bne.n	800a6bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ac:	4b36      	ldr	r3, [pc, #216]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d115      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e0ea      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d107      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6c4:	4b30      	ldr	r3, [pc, #192]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e0de      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6d4:	4b2c      	ldr	r3, [pc, #176]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0304 	and.w	r3, r3, #4
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0d6      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6e4:	4b28      	ldr	r3, [pc, #160]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	f023 0207 	bic.w	r2, r3, #7
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	4925      	ldr	r1, [pc, #148]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f6:	f7f9 fb03 	bl	8003d00 <HAL_GetTick>
 800a6fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6fc:	e00a      	b.n	800a714 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6fe:	f7f9 faff 	bl	8003d00 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	f241 3288 	movw	r2, #5000	; 0x1388
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e0be      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a714:	4b1c      	ldr	r3, [pc, #112]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	429a      	cmp	r2, r3
 800a724:	d1eb      	bne.n	800a6fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d010      	beq.n	800a754 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	4b14      	ldr	r3, [pc, #80]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	f003 030f 	and.w	r3, r3, #15
 800a73e:	429a      	cmp	r2, r3
 800a740:	d208      	bcs.n	800a754 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a742:	4b11      	ldr	r3, [pc, #68]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	f023 020f 	bic.w	r2, r3, #15
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	490e      	ldr	r1, [pc, #56]	; (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a750:	4313      	orrs	r3, r2
 800a752:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a754:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 030f 	and.w	r3, r3, #15
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d214      	bcs.n	800a78c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f023 020f 	bic.w	r2, r3, #15
 800a76a:	4906      	ldr	r1, [pc, #24]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	4313      	orrs	r3, r2
 800a770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a772:	4b04      	ldr	r3, [pc, #16]	; (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d005      	beq.n	800a78c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e086      	b.n	800a892 <HAL_RCC_ClockConfig+0x34e>
 800a784:	52002000 	.word	0x52002000
 800a788:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b00      	cmp	r3, #0
 800a796:	d010      	beq.n	800a7ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	4b3f      	ldr	r3, [pc, #252]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d208      	bcs.n	800a7ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7a8:	4b3c      	ldr	r3, [pc, #240]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	4939      	ldr	r1, [pc, #228]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d010      	beq.n	800a7e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695a      	ldr	r2, [r3, #20]
 800a7ca:	4b34      	ldr	r3, [pc, #208]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d208      	bcs.n	800a7e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7d6:	4b31      	ldr	r3, [pc, #196]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	492e      	ldr	r1, [pc, #184]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	4b28      	ldr	r3, [pc, #160]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a800:	429a      	cmp	r2, r3
 800a802:	d208      	bcs.n	800a816 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a804:	4b25      	ldr	r3, [pc, #148]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	4922      	ldr	r1, [pc, #136]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a812:	4313      	orrs	r3, r2
 800a814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0320 	and.w	r3, r3, #32
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d010      	beq.n	800a844 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	69da      	ldr	r2, [r3, #28]
 800a826:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a82e:	429a      	cmp	r2, r3
 800a830:	d208      	bcs.n	800a844 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a832:	4b1a      	ldr	r3, [pc, #104]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	4917      	ldr	r1, [pc, #92]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a840:	4313      	orrs	r3, r2
 800a842:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a844:	f000 f834 	bl	800a8b0 <HAL_RCC_GetSysClockFreq>
 800a848:	4602      	mov	r2, r0
 800a84a:	4b14      	ldr	r3, [pc, #80]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	0a1b      	lsrs	r3, r3, #8
 800a850:	f003 030f 	and.w	r3, r3, #15
 800a854:	4912      	ldr	r1, [pc, #72]	; (800a8a0 <HAL_RCC_ClockConfig+0x35c>)
 800a856:	5ccb      	ldrb	r3, [r1, r3]
 800a858:	f003 031f 	and.w	r3, r3, #31
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
 800a860:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <HAL_RCC_ClockConfig+0x358>)
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	4a0d      	ldr	r2, [pc, #52]	; (800a8a0 <HAL_RCC_ClockConfig+0x35c>)
 800a86c:	5cd3      	ldrb	r3, [r2, r3]
 800a86e:	f003 031f 	and.w	r3, r3, #31
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	fa22 f303 	lsr.w	r3, r2, r3
 800a878:	4a0a      	ldr	r2, [pc, #40]	; (800a8a4 <HAL_RCC_ClockConfig+0x360>)
 800a87a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a87c:	4a0a      	ldr	r2, [pc, #40]	; (800a8a8 <HAL_RCC_ClockConfig+0x364>)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a882:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <HAL_RCC_ClockConfig+0x368>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f7f8 ff5e 	bl	8003748 <HAL_InitTick>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	58024400 	.word	0x58024400
 800a8a0:	08017464 	.word	0x08017464
 800a8a4:	24000094 	.word	0x24000094
 800a8a8:	24000090 	.word	0x24000090
 800a8ac:	24000098 	.word	0x24000098

0800a8b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b089      	sub	sp, #36	; 0x24
 800a8b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8b6:	4bb3      	ldr	r3, [pc, #716]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8be:	2b18      	cmp	r3, #24
 800a8c0:	f200 8155 	bhi.w	800ab6e <HAL_RCC_GetSysClockFreq+0x2be>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a931 	.word	0x0800a931
 800a8d0:	0800ab6f 	.word	0x0800ab6f
 800a8d4:	0800ab6f 	.word	0x0800ab6f
 800a8d8:	0800ab6f 	.word	0x0800ab6f
 800a8dc:	0800ab6f 	.word	0x0800ab6f
 800a8e0:	0800ab6f 	.word	0x0800ab6f
 800a8e4:	0800ab6f 	.word	0x0800ab6f
 800a8e8:	0800ab6f 	.word	0x0800ab6f
 800a8ec:	0800a957 	.word	0x0800a957
 800a8f0:	0800ab6f 	.word	0x0800ab6f
 800a8f4:	0800ab6f 	.word	0x0800ab6f
 800a8f8:	0800ab6f 	.word	0x0800ab6f
 800a8fc:	0800ab6f 	.word	0x0800ab6f
 800a900:	0800ab6f 	.word	0x0800ab6f
 800a904:	0800ab6f 	.word	0x0800ab6f
 800a908:	0800ab6f 	.word	0x0800ab6f
 800a90c:	0800a95d 	.word	0x0800a95d
 800a910:	0800ab6f 	.word	0x0800ab6f
 800a914:	0800ab6f 	.word	0x0800ab6f
 800a918:	0800ab6f 	.word	0x0800ab6f
 800a91c:	0800ab6f 	.word	0x0800ab6f
 800a920:	0800ab6f 	.word	0x0800ab6f
 800a924:	0800ab6f 	.word	0x0800ab6f
 800a928:	0800ab6f 	.word	0x0800ab6f
 800a92c:	0800a963 	.word	0x0800a963
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a930:	4b94      	ldr	r3, [pc, #592]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a93c:	4b91      	ldr	r3, [pc, #580]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	08db      	lsrs	r3, r3, #3
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	4a90      	ldr	r2, [pc, #576]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a948:	fa22 f303 	lsr.w	r3, r2, r3
 800a94c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a94e:	e111      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a950:	4b8d      	ldr	r3, [pc, #564]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a952:	61bb      	str	r3, [r7, #24]
      break;
 800a954:	e10e      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a956:	4b8d      	ldr	r3, [pc, #564]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a958:	61bb      	str	r3, [r7, #24]
      break;
 800a95a:	e10b      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a95c:	4b8c      	ldr	r3, [pc, #560]	; (800ab90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a95e:	61bb      	str	r3, [r7, #24]
      break;
 800a960:	e108      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a962:	4b88      	ldr	r3, [pc, #544]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a96c:	4b85      	ldr	r3, [pc, #532]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	091b      	lsrs	r3, r3, #4
 800a972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a976:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a978:	4b82      	ldr	r3, [pc, #520]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a982:	4b80      	ldr	r3, [pc, #512]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a986:	08db      	lsrs	r3, r3, #3
 800a988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 80e1 	beq.w	800ab68 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	f000 8083 	beq.w	800aab4 <HAL_RCC_GetSysClockFreq+0x204>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	f200 80a1 	bhi.w	800aaf8 <HAL_RCC_GetSysClockFreq+0x248>
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <HAL_RCC_GetSysClockFreq+0x114>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d056      	beq.n	800aa70 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9c2:	e099      	b.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9c4:	4b6f      	ldr	r3, [pc, #444]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d02d      	beq.n	800aa2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9d0:	4b6c      	ldr	r3, [pc, #432]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	4a6b      	ldr	r2, [pc, #428]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fa:	4b62      	ldr	r3, [pc, #392]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa2a:	e087      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3e:	4b51      	ldr	r3, [pc, #324]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa52:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa6e:	e065      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b40      	ldr	r3, [pc, #256]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aab2:	e043      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aba0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac6:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aada:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaf6:	e021      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0a:	4b1e      	ldr	r3, [pc, #120]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab3c:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	0a5b      	lsrs	r3, r3, #9
 800ab42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab46:	3301      	adds	r3, #1
 800ab48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab60:	ee17 3a90 	vmov	r3, s15
 800ab64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab66:	e005      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61bb      	str	r3, [r7, #24]
      break;
 800ab6c:	e002      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab70:	61bb      	str	r3, [r7, #24]
      break;
 800ab72:	bf00      	nop
  }

  return sysclockfreq;
 800ab74:	69bb      	ldr	r3, [r7, #24]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3724      	adds	r7, #36	; 0x24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	58024400 	.word	0x58024400
 800ab88:	03d09000 	.word	0x03d09000
 800ab8c:	003d0900 	.word	0x003d0900
 800ab90:	017d7840 	.word	0x017d7840
 800ab94:	46000000 	.word	0x46000000
 800ab98:	4c742400 	.word	0x4c742400
 800ab9c:	4a742400 	.word	0x4a742400
 800aba0:	4bbebc20 	.word	0x4bbebc20

0800aba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abaa:	f7ff fe81 	bl	800a8b0 <HAL_RCC_GetSysClockFreq>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b10      	ldr	r3, [pc, #64]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x50>)
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	0a1b      	lsrs	r3, r3, #8
 800abb6:	f003 030f 	and.w	r3, r3, #15
 800abba:	490f      	ldr	r1, [pc, #60]	; (800abf8 <HAL_RCC_GetHCLKFreq+0x54>)
 800abbc:	5ccb      	ldrb	r3, [r1, r3]
 800abbe:	f003 031f 	and.w	r3, r3, #31
 800abc2:	fa22 f303 	lsr.w	r3, r2, r3
 800abc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x50>)
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <HAL_RCC_GetHCLKFreq+0x54>)
 800abd2:	5cd3      	ldrb	r3, [r2, r3]
 800abd4:	f003 031f 	and.w	r3, r3, #31
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	fa22 f303 	lsr.w	r3, r2, r3
 800abde:	4a07      	ldr	r2, [pc, #28]	; (800abfc <HAL_RCC_GetHCLKFreq+0x58>)
 800abe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abe2:	4a07      	ldr	r2, [pc, #28]	; (800ac00 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abe8:	4b04      	ldr	r3, [pc, #16]	; (800abfc <HAL_RCC_GetHCLKFreq+0x58>)
 800abea:	681b      	ldr	r3, [r3, #0]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	58024400 	.word	0x58024400
 800abf8:	08017464 	.word	0x08017464
 800abfc:	24000094 	.word	0x24000094
 800ac00:	24000090 	.word	0x24000090

0800ac04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac08:	f7ff ffcc 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b06      	ldr	r3, [pc, #24]	; (800ac28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	091b      	lsrs	r3, r3, #4
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	4904      	ldr	r1, [pc, #16]	; (800ac2c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac1a:	5ccb      	ldrb	r3, [r1, r3]
 800ac1c:	f003 031f 	and.w	r3, r3, #31
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	58024400 	.word	0x58024400
 800ac2c:	08017464 	.word	0x08017464

0800ac30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac34:	f7ff ffb6 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4b06      	ldr	r3, [pc, #24]	; (800ac54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	4904      	ldr	r1, [pc, #16]	; (800ac58 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac46:	5ccb      	ldrb	r3, [r1, r3]
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	58024400 	.word	0x58024400
 800ac58:	08017464 	.word	0x08017464

0800ac5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	223f      	movs	r2, #63	; 0x3f
 800ac6a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f003 0207 	and.w	r2, r3, #7
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ac78:	4b17      	ldr	r3, [pc, #92]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ac84:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	f003 020f 	and.w	r2, r3, #15
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aca8:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800acb4:	4b08      	ldr	r3, [pc, #32]	; (800acd8 <HAL_RCC_GetClockConfig+0x7c>)
 800acb6:	6a1b      	ldr	r3, [r3, #32]
 800acb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <HAL_RCC_GetClockConfig+0x80>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 020f 	and.w	r2, r3, #15
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	601a      	str	r2, [r3, #0]
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	58024400 	.word	0x58024400
 800acdc:	52002000 	.word	0x52002000

0800ace0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ace0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ace4:	b0ca      	sub	sp, #296	; 0x128
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800acec:	2300      	movs	r3, #0
 800acee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800acf2:	2300      	movs	r3, #0
 800acf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ad04:	2500      	movs	r5, #0
 800ad06:	ea54 0305 	orrs.w	r3, r4, r5
 800ad0a:	d049      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad16:	d02f      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ad18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad1c:	d828      	bhi.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad22:	d01a      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad28:	d822      	bhi.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ad2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad32:	d007      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad34:	e01c      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad36:	4bb8      	ldr	r3, [pc, #736]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3a:	4ab7      	ldr	r2, [pc, #732]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad42:	e01a      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad48:	3308      	adds	r3, #8
 800ad4a:	2102      	movs	r1, #2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f002 fb61 	bl	800d414 <RCCEx_PLL2_Config>
 800ad52:	4603      	mov	r3, r0
 800ad54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad58:	e00f      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5e:	3328      	adds	r3, #40	; 0x28
 800ad60:	2102      	movs	r1, #2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f002 fc08 	bl	800d578 <RCCEx_PLL3_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad6e:	e004      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad76:	e000      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad82:	4ba5      	ldr	r3, [pc, #660]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad90:	4aa1      	ldr	r2, [pc, #644]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad92:	430b      	orrs	r3, r1
 800ad94:	6513      	str	r3, [r2, #80]	; 0x50
 800ad96:	e003      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800adac:	f04f 0900 	mov.w	r9, #0
 800adb0:	ea58 0309 	orrs.w	r3, r8, r9
 800adb4:	d047      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800adb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d82a      	bhi.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800adc0:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800adc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc6:	bf00      	nop
 800adc8:	0800addd 	.word	0x0800addd
 800adcc:	0800adeb 	.word	0x0800adeb
 800add0:	0800ae01 	.word	0x0800ae01
 800add4:	0800ae1f 	.word	0x0800ae1f
 800add8:	0800ae1f 	.word	0x0800ae1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800addc:	4b8e      	ldr	r3, [pc, #568]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	4a8d      	ldr	r2, [pc, #564]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ade2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ade6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ade8:	e01a      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adee:	3308      	adds	r3, #8
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f002 fb0e 	bl	800d414 <RCCEx_PLL2_Config>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adfe:	e00f      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae04:	3328      	adds	r3, #40	; 0x28
 800ae06:	2100      	movs	r1, #0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f002 fbb5 	bl	800d578 <RCCEx_PLL3_Config>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae14:	e004      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae1c:	e000      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ae1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae28:	4b7b      	ldr	r3, [pc, #492]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2c:	f023 0107 	bic.w	r1, r3, #7
 800ae30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae36:	4a78      	ldr	r2, [pc, #480]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	6513      	str	r3, [r2, #80]	; 0x50
 800ae3c:	e003      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ae52:	f04f 0b00 	mov.w	fp, #0
 800ae56:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae5a:	d04c      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ae5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae66:	d030      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ae68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae6c:	d829      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae6e:	2bc0      	cmp	r3, #192	; 0xc0
 800ae70:	d02d      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ae72:	2bc0      	cmp	r3, #192	; 0xc0
 800ae74:	d825      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae76:	2b80      	cmp	r3, #128	; 0x80
 800ae78:	d018      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ae7a:	2b80      	cmp	r3, #128	; 0x80
 800ae7c:	d821      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d007      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ae86:	e01c      	b.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae88:	4b63      	ldr	r3, [pc, #396]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	4a62      	ldr	r2, [pc, #392]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae94:	e01c      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f002 fab8 	bl	800d414 <RCCEx_PLL2_Config>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aeaa:	e011      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aeac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb0:	3328      	adds	r3, #40	; 0x28
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 fb5f 	bl	800d578 <RCCEx_PLL3_Config>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aec0:	e006      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aec8:	e002      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aeca:	bf00      	nop
 800aecc:	e000      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aece:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aed8:	4b4f      	ldr	r3, [pc, #316]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aedc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800aee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aee6:	4a4c      	ldr	r2, [pc, #304]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aee8:	430b      	orrs	r3, r1
 800aeea:	6513      	str	r3, [r2, #80]	; 0x50
 800aeec:	e003      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800af02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800af06:	2300      	movs	r3, #0
 800af08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800af0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800af10:	460b      	mov	r3, r1
 800af12:	4313      	orrs	r3, r2
 800af14:	d053      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800af16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af22:	d035      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800af24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af28:	d82e      	bhi.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af2e:	d031      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800af30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af34:	d828      	bhi.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af3a:	d01a      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800af3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af40:	d822      	bhi.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800af46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af4a:	d007      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800af4c:	e01c      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af4e:	4b32      	ldr	r3, [pc, #200]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	4a31      	ldr	r2, [pc, #196]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af5a:	e01c      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af60:	3308      	adds	r3, #8
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f002 fa55 	bl	800d414 <RCCEx_PLL2_Config>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af70:	e011      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af76:	3328      	adds	r3, #40	; 0x28
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f002 fafc 	bl	800d578 <RCCEx_PLL3_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af86:	e006      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af8e:	e002      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800af90:	bf00      	nop
 800af92:	e000      	b.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800af94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10b      	bne.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af9e:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800afa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afae:	4a1a      	ldr	r2, [pc, #104]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afb0:	430b      	orrs	r3, r1
 800afb2:	6593      	str	r3, [r2, #88]	; 0x58
 800afb4:	e003      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800afbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800afca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afce:	2300      	movs	r3, #0
 800afd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800afd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800afd8:	460b      	mov	r3, r1
 800afda:	4313      	orrs	r3, r2
 800afdc:	d056      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800afde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afea:	d038      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aff0:	d831      	bhi.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aff2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aff6:	d034      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aff8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800affc:	d82b      	bhi.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800affe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b002:	d01d      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b008:	d825      	bhi.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d006      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b00e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b012:	d00a      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b014:	e01f      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b016:	bf00      	nop
 800b018:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b01c:	4ba2      	ldr	r3, [pc, #648]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	4aa1      	ldr	r2, [pc, #644]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b028:	e01c      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b02e:	3308      	adds	r3, #8
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f002 f9ee 	bl	800d414 <RCCEx_PLL2_Config>
 800b038:	4603      	mov	r3, r0
 800b03a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b03e:	e011      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b044:	3328      	adds	r3, #40	; 0x28
 800b046:	2100      	movs	r1, #0
 800b048:	4618      	mov	r0, r3
 800b04a:	f002 fa95 	bl	800d578 <RCCEx_PLL3_Config>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b054:	e006      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b05c:	e002      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b05e:	bf00      	nop
 800b060:	e000      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b062:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10b      	bne.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b06c:	4b8e      	ldr	r3, [pc, #568]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b070:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b078:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b07c:	4a8a      	ldr	r2, [pc, #552]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b07e:	430b      	orrs	r3, r1
 800b080:	6593      	str	r3, [r2, #88]	; 0x58
 800b082:	e003      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b09c:	2300      	movs	r3, #0
 800b09e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	d03a      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0b2:	2b30      	cmp	r3, #48	; 0x30
 800b0b4:	d01f      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b0b6:	2b30      	cmp	r3, #48	; 0x30
 800b0b8:	d819      	bhi.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	d00c      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	d815      	bhi.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d019      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b0c6:	2b10      	cmp	r3, #16
 800b0c8:	d111      	bne.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ca:	4b77      	ldr	r3, [pc, #476]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ce:	4a76      	ldr	r2, [pc, #472]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b0d6:	e011      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0dc:	3308      	adds	r3, #8
 800b0de:	2102      	movs	r1, #2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 f997 	bl	800d414 <RCCEx_PLL2_Config>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b0ec:	e006      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0f4:	e002      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b0f6:	bf00      	nop
 800b0f8:	e000      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10a      	bne.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b104:	4b68      	ldr	r3, [pc, #416]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b108:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b112:	4a65      	ldr	r2, [pc, #404]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b114:	430b      	orrs	r3, r1
 800b116:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b118:	e003      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b11e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b12e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b132:	2300      	movs	r3, #0
 800b134:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b138:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4313      	orrs	r3, r2
 800b140:	d051      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b14c:	d035      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b152:	d82e      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b158:	d031      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b15a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b15e:	d828      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b164:	d01a      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b16a:	d822      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b174:	d007      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b176:	e01c      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b178:	4b4b      	ldr	r3, [pc, #300]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4a4a      	ldr	r2, [pc, #296]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b184:	e01c      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18a:	3308      	adds	r3, #8
 800b18c:	2100      	movs	r1, #0
 800b18e:	4618      	mov	r0, r3
 800b190:	f002 f940 	bl	800d414 <RCCEx_PLL2_Config>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b19a:	e011      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a0:	3328      	adds	r3, #40	; 0x28
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f002 f9e7 	bl	800d578 <RCCEx_PLL3_Config>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1b0:	e006      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b8:	e002      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1ba:	bf00      	nop
 800b1bc:	e000      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1c8:	4b37      	ldr	r3, [pc, #220]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d6:	4a34      	ldr	r2, [pc, #208]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	6513      	str	r3, [r2, #80]	; 0x50
 800b1dc:	e003      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b1f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b1fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b200:	460b      	mov	r3, r1
 800b202:	4313      	orrs	r3, r2
 800b204:	d056      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b20c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b210:	d033      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b216:	d82c      	bhi.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b21c:	d02f      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b21e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b222:	d826      	bhi.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b228:	d02b      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b22a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b22e:	d820      	bhi.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b234:	d012      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b23a:	d81a      	bhi.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d022      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b244:	d115      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b24a:	3308      	adds	r3, #8
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 f8e0 	bl	800d414 <RCCEx_PLL2_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b25a:	e015      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b260:	3328      	adds	r3, #40	; 0x28
 800b262:	2101      	movs	r1, #1
 800b264:	4618      	mov	r0, r3
 800b266:	f002 f987 	bl	800d578 <RCCEx_PLL3_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b270:	e00a      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b278:	e006      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b27a:	bf00      	nop
 800b27c:	e004      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b27e:	bf00      	nop
 800b280:	e002      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b282:	bf00      	nop
 800b284:	e000      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b286:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10d      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b290:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b294:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b29e:	4a02      	ldr	r2, [pc, #8]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2a0:	430b      	orrs	r3, r1
 800b2a2:	6513      	str	r3, [r2, #80]	; 0x50
 800b2a4:	e006      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b2a6:	bf00      	nop
 800b2a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b2c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d055      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2e0:	d033      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b2e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2e6:	d82c      	bhi.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ec:	d02f      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f2:	d826      	bhi.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b2f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2f8:	d02b      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b2fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2fe:	d820      	bhi.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b304:	d012      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30a:	d81a      	bhi.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d022      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b314:	d115      	bne.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31a:	3308      	adds	r3, #8
 800b31c:	2101      	movs	r1, #1
 800b31e:	4618      	mov	r0, r3
 800b320:	f002 f878 	bl	800d414 <RCCEx_PLL2_Config>
 800b324:	4603      	mov	r3, r0
 800b326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b32a:	e015      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b330:	3328      	adds	r3, #40	; 0x28
 800b332:	2101      	movs	r1, #1
 800b334:	4618      	mov	r0, r3
 800b336:	f002 f91f 	bl	800d578 <RCCEx_PLL3_Config>
 800b33a:	4603      	mov	r3, r0
 800b33c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b340:	e00a      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b348:	e006      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b34a:	bf00      	nop
 800b34c:	e004      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b34e:	bf00      	nop
 800b350:	e002      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b352:	bf00      	nop
 800b354:	e000      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b356:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10b      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b360:	4ba3      	ldr	r3, [pc, #652]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b364:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b370:	4a9f      	ldr	r2, [pc, #636]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b372:	430b      	orrs	r3, r1
 800b374:	6593      	str	r3, [r2, #88]	; 0x58
 800b376:	e003      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b38c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b390:	2300      	movs	r3, #0
 800b392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b39a:	460b      	mov	r3, r1
 800b39c:	4313      	orrs	r3, r2
 800b39e:	d037      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3aa:	d00e      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b3ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b0:	d816      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d018      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b3b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ba:	d111      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3bc:	4b8c      	ldr	r3, [pc, #560]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	4a8b      	ldr	r2, [pc, #556]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3c8:	e00f      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 f81e 	bl	800d414 <RCCEx_PLL2_Config>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3de:	e004      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3e6:	e000      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10a      	bne.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b3f2:	4b7f      	ldr	r3, [pc, #508]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b400:	4a7b      	ldr	r2, [pc, #492]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b402:	430b      	orrs	r3, r1
 800b404:	6513      	str	r3, [r2, #80]	; 0x50
 800b406:	e003      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b41c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b420:	2300      	movs	r3, #0
 800b422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b426:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4313      	orrs	r3, r2
 800b42e:	d039      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b436:	2b03      	cmp	r3, #3
 800b438:	d81c      	bhi.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b43a:	a201      	add	r2, pc, #4	; (adr r2, 800b440 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b47d 	.word	0x0800b47d
 800b444:	0800b451 	.word	0x0800b451
 800b448:	0800b45f 	.word	0x0800b45f
 800b44c:	0800b47d 	.word	0x0800b47d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b450:	4b67      	ldr	r3, [pc, #412]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a66      	ldr	r2, [pc, #408]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b45c:	e00f      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b462:	3308      	adds	r3, #8
 800b464:	2102      	movs	r1, #2
 800b466:	4618      	mov	r0, r3
 800b468:	f001 ffd4 	bl	800d414 <RCCEx_PLL2_Config>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b472:	e004      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b47a:	e000      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b486:	4b5a      	ldr	r3, [pc, #360]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48a:	f023 0103 	bic.w	r1, r3, #3
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b494:	4a56      	ldr	r2, [pc, #344]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b496:	430b      	orrs	r3, r1
 800b498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b49a:	e003      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b4b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f000 809f 	beq.w	800b604 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4c6:	4b4b      	ldr	r3, [pc, #300]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a4a      	ldr	r2, [pc, #296]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4d2:	f7f8 fc15 	bl	8003d00 <HAL_GetTick>
 800b4d6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4da:	e00b      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4dc:	f7f8 fc10 	bl	8003d00 <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b64      	cmp	r3, #100	; 0x64
 800b4ea:	d903      	bls.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4f2:	e005      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4f4:	4b3f      	ldr	r3, [pc, #252]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0ed      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b504:	2b00      	cmp	r3, #0
 800b506:	d179      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b508:	4b39      	ldr	r3, [pc, #228]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b50a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b514:	4053      	eors	r3, r2
 800b516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d015      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b51e:	4b34      	ldr	r3, [pc, #208]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b526:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b52a:	4b31      	ldr	r3, [pc, #196]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52e:	4a30      	ldr	r2, [pc, #192]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b534:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b536:	4b2e      	ldr	r3, [pc, #184]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53a:	4a2d      	ldr	r2, [pc, #180]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b53c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b540:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b542:	4a2b      	ldr	r2, [pc, #172]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b548:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b556:	d118      	bne.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b558:	f7f8 fbd2 	bl	8003d00 <HAL_GetTick>
 800b55c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b560:	e00d      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b562:	f7f8 fbcd 	bl	8003d00 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b56c:	1ad2      	subs	r2, r2, r3
 800b56e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b572:	429a      	cmp	r2, r3
 800b574:	d903      	bls.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b57c:	e005      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b57e:	4b1c      	ldr	r3, [pc, #112]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b582:	f003 0302 	and.w	r3, r3, #2
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0eb      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b58a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d129      	bne.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b596:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b59a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b59e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5a2:	d10e      	bne.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b5a4:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5b4:	091a      	lsrs	r2, r3, #4
 800b5b6:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	4a0d      	ldr	r2, [pc, #52]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	6113      	str	r3, [r2, #16]
 800b5c0:	e005      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b5c2:	4b0b      	ldr	r3, [pc, #44]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	4a0a      	ldr	r2, [pc, #40]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5cc:	6113      	str	r3, [r2, #16]
 800b5ce:	4b08      	ldr	r3, [pc, #32]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5de:	4a04      	ldr	r2, [pc, #16]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	6713      	str	r3, [r2, #112]	; 0x70
 800b5e4:	e00e      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b5ee:	e009      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b5f0:	58024400 	.word	0x58024400
 800b5f4:	58024800 	.word	0x58024800
 800b5f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f002 0301 	and.w	r3, r2, #1
 800b610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b614:	2300      	movs	r3, #0
 800b616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b61a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b61e:	460b      	mov	r3, r1
 800b620:	4313      	orrs	r3, r2
 800b622:	f000 8089 	beq.w	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62c:	2b28      	cmp	r3, #40	; 0x28
 800b62e:	d86b      	bhi.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b630:	a201      	add	r2, pc, #4	; (adr r2, 800b638 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b636:	bf00      	nop
 800b638:	0800b711 	.word	0x0800b711
 800b63c:	0800b709 	.word	0x0800b709
 800b640:	0800b709 	.word	0x0800b709
 800b644:	0800b709 	.word	0x0800b709
 800b648:	0800b709 	.word	0x0800b709
 800b64c:	0800b709 	.word	0x0800b709
 800b650:	0800b709 	.word	0x0800b709
 800b654:	0800b709 	.word	0x0800b709
 800b658:	0800b6dd 	.word	0x0800b6dd
 800b65c:	0800b709 	.word	0x0800b709
 800b660:	0800b709 	.word	0x0800b709
 800b664:	0800b709 	.word	0x0800b709
 800b668:	0800b709 	.word	0x0800b709
 800b66c:	0800b709 	.word	0x0800b709
 800b670:	0800b709 	.word	0x0800b709
 800b674:	0800b709 	.word	0x0800b709
 800b678:	0800b6f3 	.word	0x0800b6f3
 800b67c:	0800b709 	.word	0x0800b709
 800b680:	0800b709 	.word	0x0800b709
 800b684:	0800b709 	.word	0x0800b709
 800b688:	0800b709 	.word	0x0800b709
 800b68c:	0800b709 	.word	0x0800b709
 800b690:	0800b709 	.word	0x0800b709
 800b694:	0800b709 	.word	0x0800b709
 800b698:	0800b711 	.word	0x0800b711
 800b69c:	0800b709 	.word	0x0800b709
 800b6a0:	0800b709 	.word	0x0800b709
 800b6a4:	0800b709 	.word	0x0800b709
 800b6a8:	0800b709 	.word	0x0800b709
 800b6ac:	0800b709 	.word	0x0800b709
 800b6b0:	0800b709 	.word	0x0800b709
 800b6b4:	0800b709 	.word	0x0800b709
 800b6b8:	0800b711 	.word	0x0800b711
 800b6bc:	0800b709 	.word	0x0800b709
 800b6c0:	0800b709 	.word	0x0800b709
 800b6c4:	0800b709 	.word	0x0800b709
 800b6c8:	0800b709 	.word	0x0800b709
 800b6cc:	0800b709 	.word	0x0800b709
 800b6d0:	0800b709 	.word	0x0800b709
 800b6d4:	0800b709 	.word	0x0800b709
 800b6d8:	0800b711 	.word	0x0800b711
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f001 fe95 	bl	800d414 <RCCEx_PLL2_Config>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b6f0:	e00f      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f6:	3328      	adds	r3, #40	; 0x28
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 ff3c 	bl	800d578 <RCCEx_PLL3_Config>
 800b700:	4603      	mov	r3, r0
 800b702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b706:	e004      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b70e:	e000      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b71a:	4bbf      	ldr	r3, [pc, #764]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b728:	4abb      	ldr	r2, [pc, #748]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b72a:	430b      	orrs	r3, r1
 800b72c:	6553      	str	r3, [r2, #84]	; 0x54
 800b72e:	e003      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f002 0302 	and.w	r3, r2, #2
 800b744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b748:	2300      	movs	r3, #0
 800b74a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b74e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b752:	460b      	mov	r3, r1
 800b754:	4313      	orrs	r3, r2
 800b756:	d041      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b75e:	2b05      	cmp	r3, #5
 800b760:	d824      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b762:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b7b5 	.word	0x0800b7b5
 800b76c:	0800b781 	.word	0x0800b781
 800b770:	0800b797 	.word	0x0800b797
 800b774:	0800b7b5 	.word	0x0800b7b5
 800b778:	0800b7b5 	.word	0x0800b7b5
 800b77c:	0800b7b5 	.word	0x0800b7b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b784:	3308      	adds	r3, #8
 800b786:	2101      	movs	r1, #1
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 fe43 	bl	800d414 <RCCEx_PLL2_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b794:	e00f      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79a:	3328      	adds	r3, #40	; 0x28
 800b79c:	2101      	movs	r1, #1
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 feea 	bl	800d578 <RCCEx_PLL3_Config>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7aa:	e004      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7b2:	e000      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7be:	4b96      	ldr	r3, [pc, #600]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c2:	f023 0107 	bic.w	r1, r3, #7
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7cc:	4a92      	ldr	r2, [pc, #584]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	6553      	str	r3, [r2, #84]	; 0x54
 800b7d2:	e003      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f002 0304 	and.w	r3, r2, #4
 800b7e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	d044      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b804:	2b05      	cmp	r3, #5
 800b806:	d825      	bhi.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b808:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80e:	bf00      	nop
 800b810:	0800b85d 	.word	0x0800b85d
 800b814:	0800b829 	.word	0x0800b829
 800b818:	0800b83f 	.word	0x0800b83f
 800b81c:	0800b85d 	.word	0x0800b85d
 800b820:	0800b85d 	.word	0x0800b85d
 800b824:	0800b85d 	.word	0x0800b85d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82c:	3308      	adds	r3, #8
 800b82e:	2101      	movs	r1, #1
 800b830:	4618      	mov	r0, r3
 800b832:	f001 fdef 	bl	800d414 <RCCEx_PLL2_Config>
 800b836:	4603      	mov	r3, r0
 800b838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b83c:	e00f      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b842:	3328      	adds	r3, #40	; 0x28
 800b844:	2101      	movs	r1, #1
 800b846:	4618      	mov	r0, r3
 800b848:	f001 fe96 	bl	800d578 <RCCEx_PLL3_Config>
 800b84c:	4603      	mov	r3, r0
 800b84e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b852:	e004      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b85a:	e000      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b85e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10b      	bne.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b866:	4b6c      	ldr	r3, [pc, #432]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86a:	f023 0107 	bic.w	r1, r3, #7
 800b86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b876:	4a68      	ldr	r2, [pc, #416]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b878:	430b      	orrs	r3, r1
 800b87a:	6593      	str	r3, [r2, #88]	; 0x58
 800b87c:	e003      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f002 0320 	and.w	r3, r2, #32
 800b892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b896:	2300      	movs	r3, #0
 800b898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b89c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	d055      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8b2:	d033      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b8b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8b8:	d82c      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8be:	d02f      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c4:	d826      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8ca:	d02b      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b8cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8d0:	d820      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8d6:	d012      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8dc:	d81a      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d022      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b8e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8e6:	d115      	bne.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 fd8f 	bl	800d414 <RCCEx_PLL2_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b8fc:	e015      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b902:	3328      	adds	r3, #40	; 0x28
 800b904:	2102      	movs	r1, #2
 800b906:	4618      	mov	r0, r3
 800b908:	f001 fe36 	bl	800d578 <RCCEx_PLL3_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b912:	e00a      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b91a:	e006      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b91c:	bf00      	nop
 800b91e:	e004      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b920:	bf00      	nop
 800b922:	e002      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b924:	bf00      	nop
 800b926:	e000      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b92a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10b      	bne.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b932:	4b39      	ldr	r3, [pc, #228]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b936:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b942:	4a35      	ldr	r2, [pc, #212]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b944:	430b      	orrs	r3, r1
 800b946:	6553      	str	r3, [r2, #84]	; 0x54
 800b948:	e003      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b94e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b95e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b962:	2300      	movs	r3, #0
 800b964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b968:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4313      	orrs	r3, r2
 800b970:	d058      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b97a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b97e:	d033      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b980:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b984:	d82c      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b98a:	d02f      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b98c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b990:	d826      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b996:	d02b      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b99c:	d820      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b99e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a2:	d012      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a8:	d81a      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d022      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b9ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9b2:	d115      	bne.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b8:	3308      	adds	r3, #8
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f001 fd29 	bl	800d414 <RCCEx_PLL2_Config>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9c8:	e015      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ce:	3328      	adds	r3, #40	; 0x28
 800b9d0:	2102      	movs	r1, #2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f001 fdd0 	bl	800d578 <RCCEx_PLL3_Config>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9de:	e00a      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9e6:	e006      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9e8:	bf00      	nop
 800b9ea:	e004      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9ec:	bf00      	nop
 800b9ee:	e002      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9f0:	bf00      	nop
 800b9f2:	e000      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10e      	bne.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b9fe:	4b06      	ldr	r3, [pc, #24]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba02:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba0e:	4a02      	ldr	r2, [pc, #8]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6593      	str	r3, [r2, #88]	; 0x58
 800ba14:	e006      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ba16:	bf00      	nop
 800ba18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ba30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba34:	2300      	movs	r3, #0
 800ba36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d055      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba50:	d033      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ba52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba56:	d82c      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba5c:	d02f      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ba5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba62:	d826      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba68:	d02b      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ba6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba6e:	d820      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba74:	d012      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ba76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba7a:	d81a      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d022      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ba80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba84:	d115      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 fcc0 	bl	800d414 <RCCEx_PLL2_Config>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba9a:	e015      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa0:	3328      	adds	r3, #40	; 0x28
 800baa2:	2102      	movs	r1, #2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 fd67 	bl	800d578 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bab0:	e00a      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bab8:	e006      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baba:	bf00      	nop
 800babc:	e004      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800babe:	bf00      	nop
 800bac0:	e002      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10b      	bne.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bad0:	4ba1      	ldr	r3, [pc, #644]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800badc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bae0:	4a9d      	ldr	r2, [pc, #628]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bae2:	430b      	orrs	r3, r1
 800bae4:	6593      	str	r3, [r2, #88]	; 0x58
 800bae6:	e003      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800baf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	f002 0308 	and.w	r3, r2, #8
 800bafc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb00:	2300      	movs	r3, #0
 800bb02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	d01e      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb1c:	d10c      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb22:	3328      	adds	r3, #40	; 0x28
 800bb24:	2102      	movs	r1, #2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 fd26 	bl	800d578 <RCCEx_PLL3_Config>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bb38:	4b87      	ldr	r3, [pc, #540]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb48:	4a83      	ldr	r2, [pc, #524]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb4a:	430b      	orrs	r3, r1
 800bb4c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f002 0310 	and.w	r3, r2, #16
 800bb5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	d01e      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb7a:	d10c      	bne.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb80:	3328      	adds	r3, #40	; 0x28
 800bb82:	2102      	movs	r1, #2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 fcf7 	bl	800d578 <RCCEx_PLL3_Config>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb96:	4b70      	ldr	r3, [pc, #448]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bba6:	4a6c      	ldr	r2, [pc, #432]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bba8:	430b      	orrs	r3, r1
 800bbaa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bbb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	d03e      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbd8:	d022      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bbda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbde:	d81b      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d003      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bbe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe8:	d00b      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bbea:	e015      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 fc0d 	bl	800d414 <RCCEx_PLL2_Config>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc00:	e00f      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3328      	adds	r3, #40	; 0x28
 800bc08:	2102      	movs	r1, #2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fcb4 	bl	800d578 <RCCEx_PLL3_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc2a:	4b4b      	ldr	r3, [pc, #300]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc3a:	4a47      	ldr	r2, [pc, #284]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc3c:	430b      	orrs	r3, r1
 800bc3e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc40:	e003      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc56:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc58:	2300      	movs	r3, #0
 800bc5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bc60:	460b      	mov	r3, r1
 800bc62:	4313      	orrs	r3, r2
 800bc64:	d03b      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc72:	d01f      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bc74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc78:	d818      	bhi.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bc7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc7e:	d003      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bc80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc84:	d007      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bc86:	e011      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc88:	4b33      	ldr	r3, [pc, #204]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	4a32      	ldr	r2, [pc, #200]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc94:	e00f      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9a:	3328      	adds	r3, #40	; 0x28
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f001 fc6a 	bl	800d578 <RCCEx_PLL3_Config>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bcaa:	e004      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcb2:	e000      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bcb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10b      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bcbe:	4b26      	ldr	r3, [pc, #152]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bcc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcce:	4a22      	ldr	r2, [pc, #136]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	6553      	str	r3, [r2, #84]	; 0x54
 800bcd4:	e003      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bcde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bcea:	673b      	str	r3, [r7, #112]	; 0x70
 800bcec:	2300      	movs	r3, #0
 800bcee:	677b      	str	r3, [r7, #116]	; 0x74
 800bcf0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	d034      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bd04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd08:	d007      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bd0a:	e011      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd0c:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd10:	4a11      	ldr	r2, [pc, #68]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd18:	e00e      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1e:	3308      	adds	r3, #8
 800bd20:	2102      	movs	r1, #2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f001 fb76 	bl	800d414 <RCCEx_PLL2_Config>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd2e:	e003      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10d      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd40:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd4e:	4a02      	ldr	r2, [pc, #8]	; (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd50:	430b      	orrs	r3, r1
 800bd52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd54:	e006      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bd56:	bf00      	nop
 800bd58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bd70:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd72:	2300      	movs	r3, #0
 800bd74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	d00c      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd84:	3328      	adds	r3, #40	; 0x28
 800bd86:	2102      	movs	r1, #2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fbf5 	bl	800d578 <RCCEx_PLL3_Config>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bda6:	663b      	str	r3, [r7, #96]	; 0x60
 800bda8:	2300      	movs	r3, #0
 800bdaa:	667b      	str	r3, [r7, #100]	; 0x64
 800bdac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	d038      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdc2:	d018      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bdc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdc8:	d811      	bhi.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bdca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdce:	d014      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bdd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd4:	d80b      	bhi.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d011      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bdda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdde:	d106      	bne.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde0:	4bc3      	ldr	r3, [pc, #780]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	4ac2      	ldr	r2, [pc, #776]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bde6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bdec:	e008      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdf4:	e004      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bdf6:	bf00      	nop
 800bdf8:	e002      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bdfa:	bf00      	nop
 800bdfc:	e000      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bdfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be08:	4bb9      	ldr	r3, [pc, #740]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be18:	4ab5      	ldr	r2, [pc, #724]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be1a:	430b      	orrs	r3, r1
 800be1c:	6553      	str	r3, [r2, #84]	; 0x54
 800be1e:	e003      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800be34:	65bb      	str	r3, [r7, #88]	; 0x58
 800be36:	2300      	movs	r3, #0
 800be38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800be3e:	460b      	mov	r3, r1
 800be40:	4313      	orrs	r3, r2
 800be42:	d009      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be44:	4baa      	ldr	r3, [pc, #680]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be52:	4aa7      	ldr	r2, [pc, #668]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be54:	430b      	orrs	r3, r1
 800be56:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800be58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800be64:	653b      	str	r3, [r7, #80]	; 0x50
 800be66:	2300      	movs	r3, #0
 800be68:	657b      	str	r3, [r7, #84]	; 0x54
 800be6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800be6e:	460b      	mov	r3, r1
 800be70:	4313      	orrs	r3, r2
 800be72:	d00a      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800be74:	4b9e      	ldr	r3, [pc, #632]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800be7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be84:	4a9a      	ldr	r2, [pc, #616]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be86:	430b      	orrs	r3, r1
 800be88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800be96:	64bb      	str	r3, [r7, #72]	; 0x48
 800be98:	2300      	movs	r3, #0
 800be9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bea0:	460b      	mov	r3, r1
 800bea2:	4313      	orrs	r3, r2
 800bea4:	d009      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bea6:	4b92      	ldr	r3, [pc, #584]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beaa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800beae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb4:	4a8e      	ldr	r2, [pc, #568]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beb6:	430b      	orrs	r3, r1
 800beb8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800beba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bec6:	643b      	str	r3, [r7, #64]	; 0x40
 800bec8:	2300      	movs	r3, #0
 800beca:	647b      	str	r3, [r7, #68]	; 0x44
 800becc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bed0:	460b      	mov	r3, r1
 800bed2:	4313      	orrs	r3, r2
 800bed4:	d00e      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bed6:	4b86      	ldr	r3, [pc, #536]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	4a85      	ldr	r2, [pc, #532]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bedc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bee0:	6113      	str	r3, [r2, #16]
 800bee2:	4b83      	ldr	r3, [pc, #524]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bee4:	6919      	ldr	r1, [r3, #16]
 800bee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800beee:	4a80      	ldr	r2, [pc, #512]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bef0:	430b      	orrs	r3, r1
 800bef2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bf00:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf02:	2300      	movs	r3, #0
 800bf04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	d009      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bf10:	4b77      	ldr	r3, [pc, #476]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf14:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bf18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1e:	4a74      	ldr	r2, [pc, #464]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf20:	430b      	orrs	r3, r1
 800bf22:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bf30:	633b      	str	r3, [r7, #48]	; 0x30
 800bf32:	2300      	movs	r3, #0
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
 800bf36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	d00a      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf40:	4b6b      	ldr	r3, [pc, #428]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf44:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf50:	4a67      	ldr	r2, [pc, #412]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf52:	430b      	orrs	r3, r1
 800bf54:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	2100      	movs	r1, #0
 800bf60:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	d011      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf76:	3308      	adds	r3, #8
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f001 fa4a 	bl	800d414 <RCCEx_PLL2_Config>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	6239      	str	r1, [r7, #32]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bfac:	460b      	mov	r3, r1
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	d011      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	2101      	movs	r1, #1
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f001 fa2a 	bl	800d414 <RCCEx_PLL2_Config>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bfd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	2100      	movs	r1, #0
 800bfe0:	61b9      	str	r1, [r7, #24]
 800bfe2:	f003 0304 	and.w	r3, r3, #4
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bfec:	460b      	mov	r3, r1
 800bfee:	4313      	orrs	r3, r2
 800bff0:	d011      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bff6:	3308      	adds	r3, #8
 800bff8:	2102      	movs	r1, #2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 fa0a 	bl	800d414 <RCCEx_PLL2_Config>
 800c000:	4603      	mov	r3, r0
 800c002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	2100      	movs	r1, #0
 800c020:	6139      	str	r1, [r7, #16]
 800c022:	f003 0308 	and.w	r3, r3, #8
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c02c:	460b      	mov	r3, r1
 800c02e:	4313      	orrs	r3, r2
 800c030:	d011      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c036:	3328      	adds	r3, #40	; 0x28
 800c038:	2100      	movs	r1, #0
 800c03a:	4618      	mov	r0, r3
 800c03c:	f001 fa9c 	bl	800d578 <RCCEx_PLL3_Config>
 800c040:	4603      	mov	r3, r0
 800c042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c052:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	2100      	movs	r1, #0
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	f003 0310 	and.w	r3, r3, #16
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c06c:	460b      	mov	r3, r1
 800c06e:	4313      	orrs	r3, r2
 800c070:	d011      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c076:	3328      	adds	r3, #40	; 0x28
 800c078:	2101      	movs	r1, #1
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 fa7c 	bl	800d578 <RCCEx_PLL3_Config>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c08e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	2100      	movs	r1, #0
 800c0a0:	6039      	str	r1, [r7, #0]
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	607b      	str	r3, [r7, #4]
 800c0a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	d011      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b6:	3328      	adds	r3, #40	; 0x28
 800c0b8:	2102      	movs	r1, #2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f001 fa5c 	bl	800d578 <RCCEx_PLL3_Config>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c0d6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d101      	bne.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e000      	b.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0f0:	58024400 	.word	0x58024400

0800c0f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b090      	sub	sp, #64	; 0x40
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c102:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c106:	430b      	orrs	r3, r1
 800c108:	f040 8094 	bne.w	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c10c:	4b9e      	ldr	r3, [pc, #632]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c110:	f003 0307 	and.w	r3, r3, #7
 800c114:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	2b04      	cmp	r3, #4
 800c11a:	f200 8087 	bhi.w	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c139 	.word	0x0800c139
 800c128:	0800c161 	.word	0x0800c161
 800c12c:	0800c189 	.word	0x0800c189
 800c130:	0800c225 	.word	0x0800c225
 800c134:	0800c1b1 	.word	0x0800c1b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c138:	4b93      	ldr	r3, [pc, #588]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c144:	d108      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 f810 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c154:	f000 bd45 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c15c:	f000 bd41 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c160:	4b89      	ldr	r3, [pc, #548]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c16c:	d108      	bne.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c16e:	f107 0318 	add.w	r3, r7, #24
 800c172:	4618      	mov	r0, r3
 800c174:	f000 fd54 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17c:	f000 bd31 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c184:	f000 bd2d 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c188:	4b7f      	ldr	r3, [pc, #508]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c194:	d108      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c196:	f107 030c 	add.w	r3, r7, #12
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 fe94 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a4:	f000 bd1d 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ac:	f000 bd19 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1b0:	4b75      	ldr	r3, [pc, #468]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1ba:	4b73      	ldr	r3, [pc, #460]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 0304 	and.w	r3, r3, #4
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d10c      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d109      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1cc:	4b6e      	ldr	r3, [pc, #440]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	08db      	lsrs	r3, r3, #3
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	4a6d      	ldr	r2, [pc, #436]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1de:	e01f      	b.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1e0:	4b69      	ldr	r3, [pc, #420]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ec:	d106      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1f4:	d102      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1f6:	4b66      	ldr	r3, [pc, #408]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fa:	e011      	b.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1fc:	4b62      	ldr	r3, [pc, #392]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c208:	d106      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c210:	d102      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c212:	4b60      	ldr	r3, [pc, #384]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c216:	e003      	b.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c21c:	f000 bce1 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c220:	f000 bcdf 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c224:	4b5c      	ldr	r3, [pc, #368]	; (800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c228:	f000 bcdb 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c230:	f000 bcd7 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c234:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c238:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c23c:	430b      	orrs	r3, r1
 800c23e:	f040 80ad 	bne.w	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c242:	4b51      	ldr	r3, [pc, #324]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c246:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c24a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c252:	d056      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c25a:	f200 8090 	bhi.w	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	2bc0      	cmp	r3, #192	; 0xc0
 800c262:	f000 8088 	beq.w	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	2bc0      	cmp	r3, #192	; 0xc0
 800c26a:	f200 8088 	bhi.w	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	2b80      	cmp	r3, #128	; 0x80
 800c272:	d032      	beq.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	2b80      	cmp	r3, #128	; 0x80
 800c278:	f200 8081 	bhi.w	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	2b40      	cmp	r3, #64	; 0x40
 800c286:	d014      	beq.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c288:	e079      	b.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c28a:	4b3f      	ldr	r3, [pc, #252]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c296:	d108      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 ff67 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2a6:	f000 bc9c 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ae:	f000 bc98 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2b2:	4b35      	ldr	r3, [pc, #212]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2be:	d108      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2c0:	f107 0318 	add.w	r3, r7, #24
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 fcab 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ce:	f000 bc88 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d6:	f000 bc84 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2da:	4b2b      	ldr	r3, [pc, #172]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e6:	d108      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2e8:	f107 030c 	add.w	r3, r7, #12
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fdeb 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f6:	f000 bc74 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fe:	f000 bc70 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c302:	4b21      	ldr	r3, [pc, #132]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c30a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c30c:	4b1e      	ldr	r3, [pc, #120]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	2b04      	cmp	r3, #4
 800c316:	d10c      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c31e:	4b1a      	ldr	r3, [pc, #104]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	08db      	lsrs	r3, r3, #3
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	4a18      	ldr	r2, [pc, #96]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c32a:	fa22 f303 	lsr.w	r3, r2, r3
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c330:	e01f      	b.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c332:	4b15      	ldr	r3, [pc, #84]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c33e:	d106      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c346:	d102      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c348:	4b11      	ldr	r3, [pc, #68]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c34c:	e011      	b.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c34e:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c35a:	d106      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c362:	d102      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c368:	e003      	b.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c36e:	f000 bc38 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c372:	f000 bc36 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c376:	4b08      	ldr	r3, [pc, #32]	; (800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37a:	f000 bc32 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c382:	f000 bc2e 	b.w	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c386:	bf00      	nop
 800c388:	58024400 	.word	0x58024400
 800c38c:	03d09000 	.word	0x03d09000
 800c390:	003d0900 	.word	0x003d0900
 800c394:	017d7840 	.word	0x017d7840
 800c398:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	f040 809c 	bne.w	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c3aa:	4b9e      	ldr	r3, [pc, #632]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c3b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3ba:	d054      	beq.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3c2:	f200 808b 	bhi.w	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3cc:	f000 8083 	beq.w	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3d6:	f200 8081 	bhi.w	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3e0:	d02f      	beq.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3e8:	d878      	bhi.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3f6:	d012      	beq.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c3f8:	e070      	b.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3fa:	4b8a      	ldr	r3, [pc, #552]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c406:	d107      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 feaf 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c416:	e3e4      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e3e1      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c41e:	4b81      	ldr	r3, [pc, #516]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c42a:	d107      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c42c:	f107 0318 	add.w	r3, r7, #24
 800c430:	4618      	mov	r0, r3
 800c432:	f000 fbf5 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43a:	e3d2      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c440:	e3cf      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c442:	4b78      	ldr	r3, [pc, #480]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c44a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c44e:	d107      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c450:	f107 030c 	add.w	r3, r7, #12
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fd37 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45e:	e3c0      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c464:	e3bd      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c466:	4b6f      	ldr	r3, [pc, #444]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c46e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c470:	4b6c      	ldr	r3, [pc, #432]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0304 	and.w	r3, r3, #4
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d10c      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d109      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c482:	4b68      	ldr	r3, [pc, #416]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	08db      	lsrs	r3, r3, #3
 800c488:	f003 0303 	and.w	r3, r3, #3
 800c48c:	4a66      	ldr	r2, [pc, #408]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c48e:	fa22 f303 	lsr.w	r3, r2, r3
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c494:	e01e      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c496:	4b63      	ldr	r3, [pc, #396]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a2:	d106      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4aa:	d102      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4ac:	4b5f      	ldr	r3, [pc, #380]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b0:	e010      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4b2:	4b5c      	ldr	r3, [pc, #368]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4be:	d106      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4c6:	d102      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4c8:	4b59      	ldr	r3, [pc, #356]	; (800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4cc:	e002      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4d2:	e386      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4d4:	e385      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4d6:	4b57      	ldr	r3, [pc, #348]	; (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4da:	e382      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e0:	e37f      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c4e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c4ea:	430b      	orrs	r3, r1
 800c4ec:	f040 80a7 	bne.w	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c4f0:	4b4c      	ldr	r3, [pc, #304]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c4f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c500:	d055      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c508:	f200 8096 	bhi.w	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c512:	f000 8084 	beq.w	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c51c:	f200 808c 	bhi.w	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c526:	d030      	beq.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c52e:	f200 8083 	bhi.w	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c53e:	d012      	beq.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c540:	e07a      	b.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c542:	4b38      	ldr	r3, [pc, #224]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c54a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c54e:	d107      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c554:	4618      	mov	r0, r3
 800c556:	f000 fe0b 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55e:	e340      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c564:	e33d      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c566:	4b2f      	ldr	r3, [pc, #188]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c56e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c572:	d107      	bne.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c574:	f107 0318 	add.w	r3, r7, #24
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fb51 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c582:	e32e      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c584:	2300      	movs	r3, #0
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c588:	e32b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c58a:	4b26      	ldr	r3, [pc, #152]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c596:	d107      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c598:	f107 030c 	add.w	r3, r7, #12
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fc93 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a6:	e31c      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ac:	e319      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5ae:	4b1d      	ldr	r3, [pc, #116]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5b8:	4b1a      	ldr	r3, [pc, #104]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d10c      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d109      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ca:	4b16      	ldr	r3, [pc, #88]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	08db      	lsrs	r3, r3, #3
 800c5d0:	f003 0303 	and.w	r3, r3, #3
 800c5d4:	4a14      	ldr	r2, [pc, #80]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5dc:	e01e      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5de:	4b11      	ldr	r3, [pc, #68]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ea:	d106      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5f2:	d102      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5f4:	4b0d      	ldr	r3, [pc, #52]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f8:	e010      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5fa:	4b0a      	ldr	r3, [pc, #40]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c606:	d106      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c60e:	d102      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c610:	4b07      	ldr	r3, [pc, #28]	; (800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c614:	e002      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c61a:	e2e2      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c61c:	e2e1      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c61e:	4b05      	ldr	r3, [pc, #20]	; (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c622:	e2de      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c624:	58024400 	.word	0x58024400
 800c628:	03d09000 	.word	0x03d09000
 800c62c:	003d0900 	.word	0x003d0900
 800c630:	017d7840 	.word	0x017d7840
 800c634:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63c:	e2d1      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c642:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c646:	430b      	orrs	r3, r1
 800c648:	f040 809c 	bne.w	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c64c:	4b93      	ldr	r3, [pc, #588]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c650:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c654:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c65c:	d054      	beq.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c664:	f200 808b 	bhi.w	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c66e:	f000 8083 	beq.w	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c678:	f200 8081 	bhi.w	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c682:	d02f      	beq.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c68a:	d878      	bhi.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d004      	beq.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c698:	d012      	beq.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c69a:	e070      	b.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c69c:	4b7f      	ldr	r3, [pc, #508]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6a8:	d107      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fd5e 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b8:	e293      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6be:	e290      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6c0:	4b76      	ldr	r3, [pc, #472]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6cc:	d107      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ce:	f107 0318 	add.w	r3, r7, #24
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 faa4 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6dc:	e281      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e2:	e27e      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6e4:	4b6d      	ldr	r3, [pc, #436]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f0:	d107      	bne.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f2:	f107 030c 	add.w	r3, r7, #12
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 fbe6 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c700:	e26f      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c706:	e26c      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c708:	4b64      	ldr	r3, [pc, #400]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c70a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c70c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c710:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c712:	4b62      	ldr	r3, [pc, #392]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 0304 	and.w	r3, r3, #4
 800c71a:	2b04      	cmp	r3, #4
 800c71c:	d10c      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c720:	2b00      	cmp	r3, #0
 800c722:	d109      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c724:	4b5d      	ldr	r3, [pc, #372]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	08db      	lsrs	r3, r3, #3
 800c72a:	f003 0303 	and.w	r3, r3, #3
 800c72e:	4a5c      	ldr	r2, [pc, #368]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c730:	fa22 f303 	lsr.w	r3, r2, r3
 800c734:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c736:	e01e      	b.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c738:	4b58      	ldr	r3, [pc, #352]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c744:	d106      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c74c:	d102      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c74e:	4b55      	ldr	r3, [pc, #340]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c752:	e010      	b.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c754:	4b51      	ldr	r3, [pc, #324]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c760:	d106      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c768:	d102      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c76a:	4b4f      	ldr	r3, [pc, #316]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c76e:	e002      	b.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c774:	e235      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c776:	e234      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c778:	4b4c      	ldr	r3, [pc, #304]	; (800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77c:	e231      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c782:	e22e      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c784:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c788:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c78c:	430b      	orrs	r3, r1
 800c78e:	f040 808f 	bne.w	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c792:	4b42      	ldr	r3, [pc, #264]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c796:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c79a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7a2:	d06b      	beq.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7aa:	d874      	bhi.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7b2:	d056      	beq.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7ba:	d86c      	bhi.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7c2:	d03b      	beq.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7ca:	d864      	bhi.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7d2:	d021      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7da:	d85c      	bhi.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d004      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e8:	d004      	beq.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c7ea:	e054      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c7ec:	f7fe fa0a 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 800c7f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7f2:	e1f6      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f4:	4b29      	ldr	r3, [pc, #164]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c800:	d107      	bne.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c802:	f107 0318 	add.w	r3, r7, #24
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fa0a 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c810:	e1e7      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c816:	e1e4      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c818:	4b20      	ldr	r3, [pc, #128]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c824:	d107      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c826:	f107 030c 	add.w	r3, r7, #12
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 fb4c 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c834:	e1d5      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83a:	e1d2      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c83c:	4b17      	ldr	r3, [pc, #92]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b04      	cmp	r3, #4
 800c846:	d109      	bne.n	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c848:	4b14      	ldr	r3, [pc, #80]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	08db      	lsrs	r3, r3, #3
 800c84e:	f003 0303 	and.w	r3, r3, #3
 800c852:	4a13      	ldr	r2, [pc, #76]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c854:	fa22 f303 	lsr.w	r3, r2, r3
 800c858:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85a:	e1c2      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c860:	e1bf      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c862:	4b0e      	ldr	r3, [pc, #56]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c86e:	d102      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c874:	e1b5      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87a:	e1b2      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c87c:	4b07      	ldr	r3, [pc, #28]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c888:	d102      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c88a:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c88e:	e1a8      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c894:	e1a5      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89a:	e1a2      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c89c:	58024400 	.word	0x58024400
 800c8a0:	03d09000 	.word	0x03d09000
 800c8a4:	003d0900 	.word	0x003d0900
 800c8a8:	017d7840 	.word	0x017d7840
 800c8ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c8b8:	430b      	orrs	r3, r1
 800c8ba:	d173      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c8bc:	4b9c      	ldr	r3, [pc, #624]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8cc:	d02f      	beq.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8d4:	d863      	bhi.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e2:	d012      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c8e4:	e05b      	b.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8e6:	4b92      	ldr	r3, [pc, #584]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8f2:	d107      	bne.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8f4:	f107 0318 	add.w	r3, r7, #24
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 f991 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c902:	e16e      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c908:	e16b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c90a:	4b89      	ldr	r3, [pc, #548]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c916:	d107      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c918:	f107 030c 	add.w	r3, r7, #12
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 fad3 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c926:	e15c      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92c:	e159      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c92e:	4b80      	ldr	r3, [pc, #512]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c936:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c938:	4b7d      	ldr	r3, [pc, #500]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b04      	cmp	r3, #4
 800c942:	d10c      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c946:	2b00      	cmp	r3, #0
 800c948:	d109      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c94a:	4b79      	ldr	r3, [pc, #484]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	08db      	lsrs	r3, r3, #3
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	4a77      	ldr	r2, [pc, #476]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c956:	fa22 f303 	lsr.w	r3, r2, r3
 800c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c95c:	e01e      	b.n	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c95e:	4b74      	ldr	r3, [pc, #464]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c96a:	d106      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c972:	d102      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c974:	4b70      	ldr	r3, [pc, #448]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c978:	e010      	b.n	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c97a:	4b6d      	ldr	r3, [pc, #436]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c986:	d106      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c98a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c98e:	d102      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c990:	4b6a      	ldr	r3, [pc, #424]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c994:	e002      	b.n	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c99a:	e122      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c99c:	e121      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a2:	e11e      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c9a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9a8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c9ac:	430b      	orrs	r3, r1
 800c9ae:	d133      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c9b0:	4b5f      	ldr	r3, [pc, #380]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9c6:	d012      	beq.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c9c8:	e023      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9ca:	4b59      	ldr	r3, [pc, #356]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9d6:	d107      	bne.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 fbc7 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e6:	e0fc      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ec:	e0f9      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9ee:	4b50      	ldr	r3, [pc, #320]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9fa:	d107      	bne.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9fc:	f107 0318 	add.w	r3, r7, #24
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 f90d 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca0a:	e0ea      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca10:	e0e7      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca16:	e0e4      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ca18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ca20:	430b      	orrs	r3, r1
 800ca22:	f040 808d 	bne.w	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ca26:	4b42      	ldr	r3, [pc, #264]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ca2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca36:	d06b      	beq.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca3e:	d874      	bhi.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca46:	d056      	beq.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca4e:	d86c      	bhi.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca56:	d03b      	beq.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca5e:	d864      	bhi.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca66:	d021      	beq.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca6e:	d85c      	bhi.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d004      	beq.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca7c:	d004      	beq.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ca7e:	e054      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ca80:	f000 f8b8 	bl	800cbf4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca86:	e0ac      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca88:	4b29      	ldr	r3, [pc, #164]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca94:	d107      	bne.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca96:	f107 0318 	add.w	r3, r7, #24
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 f8c0 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa4:	e09d      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caaa:	e09a      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caac:	4b20      	ldr	r3, [pc, #128]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab8:	d107      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caba:	f107 030c 	add.w	r3, r7, #12
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 fa02 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac8:	e08b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cace:	e088      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cad0:	4b17      	ldr	r3, [pc, #92]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 0304 	and.w	r3, r3, #4
 800cad8:	2b04      	cmp	r3, #4
 800cada:	d109      	bne.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cadc:	4b14      	ldr	r3, [pc, #80]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	08db      	lsrs	r3, r3, #3
 800cae2:	f003 0303 	and.w	r3, r3, #3
 800cae6:	4a13      	ldr	r2, [pc, #76]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cae8:	fa22 f303 	lsr.w	r3, r2, r3
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caee:	e078      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf4:	e075      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800caf6:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb02:	d102      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cb04:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb08:	e06b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb0e:	e068      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb1c:	d102      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cb1e:	4b07      	ldr	r3, [pc, #28]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb22:	e05e      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb28:	e05b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2e:	e058      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb30:	58024400 	.word	0x58024400
 800cb34:	03d09000 	.word	0x03d09000
 800cb38:	003d0900 	.word	0x003d0900
 800cb3c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb44:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	d148      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb4c:	4b27      	ldr	r3, [pc, #156]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb5c:	d02a      	beq.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb64:	d838      	bhi.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb72:	d00d      	beq.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cb74:	e030      	b.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb76:	4b1d      	ldr	r3, [pc, #116]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb82:	d102      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cb84:	4b1a      	ldr	r3, [pc, #104]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb88:	e02b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8e:	e028      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb90:	4b16      	ldr	r3, [pc, #88]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb9c:	d107      	bne.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fae4 	bl	800d170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbac:	e019      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb2:	e016      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbb4:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbc0:	d107      	bne.n	800cbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc2:	f107 0318 	add.w	r3, r7, #24
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 f82a 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd0:	e007      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd6:	e004      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbdc:	e001      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3740      	adds	r7, #64	; 0x40
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	58024400 	.word	0x58024400
 800cbf0:	017d7840 	.word	0x017d7840

0800cbf4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cbf8:	f7fd ffd4 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	091b      	lsrs	r3, r3, #4
 800cc04:	f003 0307 	and.w	r3, r3, #7
 800cc08:	4904      	ldr	r1, [pc, #16]	; (800cc1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cc0a:	5ccb      	ldrb	r3, [r1, r3]
 800cc0c:	f003 031f 	and.w	r3, r3, #31
 800cc10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	58024400 	.word	0x58024400
 800cc1c:	08017464 	.word	0x08017464

0800cc20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b089      	sub	sp, #36	; 0x24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc28:	4ba1      	ldr	r3, [pc, #644]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cc32:	4b9f      	ldr	r3, [pc, #636]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc36:	0b1b      	lsrs	r3, r3, #12
 800cc38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cc3e:	4b9c      	ldr	r3, [pc, #624]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc42:	091b      	lsrs	r3, r3, #4
 800cc44:	f003 0301 	and.w	r3, r3, #1
 800cc48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cc4a:	4b99      	ldr	r3, [pc, #612]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4e:	08db      	lsrs	r3, r3, #3
 800cc50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	fb02 f303 	mul.w	r3, r2, r3
 800cc5a:	ee07 3a90 	vmov	s15, r3
 800cc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 8111 	beq.w	800ce90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	f000 8083 	beq.w	800cd7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	f200 80a1 	bhi.w	800cdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d056      	beq.n	800cd38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cc8a:	e099      	b.n	800cdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc8c:	4b88      	ldr	r3, [pc, #544]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 0320 	and.w	r3, r3, #32
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d02d      	beq.n	800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc98:	4b85      	ldr	r3, [pc, #532]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	08db      	lsrs	r3, r3, #3
 800cc9e:	f003 0303 	and.w	r3, r3, #3
 800cca2:	4a84      	ldr	r2, [pc, #528]	; (800ceb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cca4:	fa22 f303 	lsr.w	r3, r2, r3
 800cca8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	ee07 3a90 	vmov	s15, r3
 800ccb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	ee07 3a90 	vmov	s15, r3
 800ccba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccc2:	4b7b      	ldr	r3, [pc, #492]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccca:	ee07 3a90 	vmov	s15, r3
 800ccce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccf2:	e087      	b.n	800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	ee07 3a90 	vmov	s15, r3
 800ccfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cebc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cd02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd06:	4b6a      	ldr	r3, [pc, #424]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd0e:	ee07 3a90 	vmov	s15, r3
 800cd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd16:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd36:	e065      	b.n	800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd4a:	4b59      	ldr	r3, [pc, #356]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd7a:	e043      	b.n	800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cd8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd8e:	4b48      	ldr	r3, [pc, #288]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cda2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cda6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdbe:	e021      	b.n	800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdd2:	4b37      	ldr	r3, [pc, #220]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ce04:	4b2a      	ldr	r3, [pc, #168]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce08:	0a5b      	lsrs	r3, r3, #9
 800ce0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce2a:	ee17 2a90 	vmov	r2, s15
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ce32:	4b1f      	ldr	r3, [pc, #124]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce36:	0c1b      	lsrs	r3, r3, #16
 800ce38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce3c:	ee07 3a90 	vmov	s15, r3
 800ce40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce58:	ee17 2a90 	vmov	r2, s15
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ce60:	4b13      	ldr	r3, [pc, #76]	; (800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	0e1b      	lsrs	r3, r3, #24
 800ce66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce86:	ee17 2a90 	vmov	r2, s15
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ce8e:	e008      	b.n	800cea2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	609a      	str	r2, [r3, #8]
}
 800cea2:	bf00      	nop
 800cea4:	3724      	adds	r7, #36	; 0x24
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	03d09000 	.word	0x03d09000
 800ceb8:	46000000 	.word	0x46000000
 800cebc:	4c742400 	.word	0x4c742400
 800cec0:	4a742400 	.word	0x4a742400
 800cec4:	4bbebc20 	.word	0x4bbebc20

0800cec8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b089      	sub	sp, #36	; 0x24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ced0:	4ba1      	ldr	r3, [pc, #644]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ced2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced4:	f003 0303 	and.w	r3, r3, #3
 800ced8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ceda:	4b9f      	ldr	r3, [pc, #636]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cede:	0d1b      	lsrs	r3, r3, #20
 800cee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cee4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cee6:	4b9c      	ldr	r3, [pc, #624]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceea:	0a1b      	lsrs	r3, r3, #8
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cef2:	4b99      	ldr	r3, [pc, #612]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef6:	08db      	lsrs	r3, r3, #3
 800cef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	fb02 f303 	mul.w	r3, r2, r3
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 8111 	beq.w	800d138 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	f000 8083 	beq.w	800d024 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	f200 80a1 	bhi.w	800d068 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d056      	beq.n	800cfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cf32:	e099      	b.n	800d068 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf34:	4b88      	ldr	r3, [pc, #544]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 0320 	and.w	r3, r3, #32
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d02d      	beq.n	800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf40:	4b85      	ldr	r3, [pc, #532]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	08db      	lsrs	r3, r3, #3
 800cf46:	f003 0303 	and.w	r3, r3, #3
 800cf4a:	4a84      	ldr	r2, [pc, #528]	; (800d15c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cf4c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	ee07 3a90 	vmov	s15, r3
 800cf58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf6a:	4b7b      	ldr	r3, [pc, #492]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf9a:	e087      	b.n	800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d164 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cfaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfae:	4b6a      	ldr	r3, [pc, #424]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfde:	e065      	b.n	800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	ee07 3a90 	vmov	s15, r3
 800cfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d168 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff2:	4b59      	ldr	r3, [pc, #356]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d002:	ed97 6a03 	vldr	s12, [r7, #12]
 800d006:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d022:	e043      	b.n	800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d16c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d036:	4b48      	ldr	r3, [pc, #288]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d046:	ed97 6a03 	vldr	s12, [r7, #12]
 800d04a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d066:	e021      	b.n	800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d072:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d168 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d07a:	4b37      	ldr	r3, [pc, #220]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d08e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d0ac:	4b2a      	ldr	r3, [pc, #168]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b0:	0a5b      	lsrs	r3, r3, #9
 800d0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b6:	ee07 3a90 	vmov	s15, r3
 800d0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0d2:	ee17 2a90 	vmov	r2, s15
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d0da:	4b1f      	ldr	r3, [pc, #124]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0de:	0c1b      	lsrs	r3, r3, #16
 800d0e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0e4:	ee07 3a90 	vmov	s15, r3
 800d0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d100:	ee17 2a90 	vmov	r2, s15
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d108:	4b13      	ldr	r3, [pc, #76]	; (800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10c:	0e1b      	lsrs	r3, r3, #24
 800d10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d11e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d122:	edd7 6a07 	vldr	s13, [r7, #28]
 800d126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d12a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d12e:	ee17 2a90 	vmov	r2, s15
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d136:	e008      	b.n	800d14a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	609a      	str	r2, [r3, #8]
}
 800d14a:	bf00      	nop
 800d14c:	3724      	adds	r7, #36	; 0x24
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	58024400 	.word	0x58024400
 800d15c:	03d09000 	.word	0x03d09000
 800d160:	46000000 	.word	0x46000000
 800d164:	4c742400 	.word	0x4c742400
 800d168:	4a742400 	.word	0x4a742400
 800d16c:	4bbebc20 	.word	0x4bbebc20

0800d170 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d170:	b480      	push	{r7}
 800d172:	b089      	sub	sp, #36	; 0x24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d178:	4ba0      	ldr	r3, [pc, #640]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17c:	f003 0303 	and.w	r3, r3, #3
 800d180:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d182:	4b9e      	ldr	r3, [pc, #632]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d186:	091b      	lsrs	r3, r3, #4
 800d188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d18c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d18e:	4b9b      	ldr	r3, [pc, #620]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d198:	4b98      	ldr	r3, [pc, #608]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d19c:	08db      	lsrs	r3, r3, #3
 800d19e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	fb02 f303 	mul.w	r3, r2, r3
 800d1a8:	ee07 3a90 	vmov	s15, r3
 800d1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 8111 	beq.w	800d3de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	f000 8083 	beq.w	800d2ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	f200 80a1 	bhi.w	800d30e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d056      	beq.n	800d286 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d1d8:	e099      	b.n	800d30e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1da:	4b88      	ldr	r3, [pc, #544]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f003 0320 	and.w	r3, r3, #32
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d02d      	beq.n	800d242 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1e6:	4b85      	ldr	r3, [pc, #532]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	08db      	lsrs	r3, r3, #3
 800d1ec:	f003 0303 	and.w	r3, r3, #3
 800d1f0:	4a83      	ldr	r2, [pc, #524]	; (800d400 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	ee07 3a90 	vmov	s15, r3
 800d1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	ee07 3a90 	vmov	s15, r3
 800d208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d210:	4b7a      	ldr	r3, [pc, #488]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d218:	ee07 3a90 	vmov	s15, r3
 800d21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d220:	ed97 6a03 	vldr	s12, [r7, #12]
 800d224:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d404 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d22c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d240:	e087      	b.n	800d352 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	ee07 3a90 	vmov	s15, r3
 800d248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d408 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d254:	4b69      	ldr	r3, [pc, #420]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25c:	ee07 3a90 	vmov	s15, r3
 800d260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d264:	ed97 6a03 	vldr	s12, [r7, #12]
 800d268:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d404 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d280:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d284:	e065      	b.n	800d352 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	ee07 3a90 	vmov	s15, r3
 800d28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d290:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d40c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d298:	4b58      	ldr	r3, [pc, #352]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a0:	ee07 3a90 	vmov	s15, r3
 800d2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d404 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2c8:	e043      	b.n	800d352 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	ee07 3a90 	vmov	s15, r3
 800d2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d410 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2dc:	4b47      	ldr	r3, [pc, #284]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e4:	ee07 3a90 	vmov	s15, r3
 800d2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d404 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d30c:	e021      	b.n	800d352 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	ee07 3a90 	vmov	s15, r3
 800d314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d318:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d408 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d320:	4b36      	ldr	r3, [pc, #216]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d328:	ee07 3a90 	vmov	s15, r3
 800d32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d330:	ed97 6a03 	vldr	s12, [r7, #12]
 800d334:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d404 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d340:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d350:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d352:	4b2a      	ldr	r3, [pc, #168]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d356:	0a5b      	lsrs	r3, r3, #9
 800d358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d35c:	ee07 3a90 	vmov	s15, r3
 800d360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d36c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d378:	ee17 2a90 	vmov	r2, s15
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d380:	4b1e      	ldr	r3, [pc, #120]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d384:	0c1b      	lsrs	r3, r3, #16
 800d386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d38a:	ee07 3a90 	vmov	s15, r3
 800d38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d39a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d39e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3a6:	ee17 2a90 	vmov	r2, s15
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b2:	0e1b      	lsrs	r3, r3, #24
 800d3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b8:	ee07 3a90 	vmov	s15, r3
 800d3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d4:	ee17 2a90 	vmov	r2, s15
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d3dc:	e008      	b.n	800d3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	609a      	str	r2, [r3, #8]
}
 800d3f0:	bf00      	nop
 800d3f2:	3724      	adds	r7, #36	; 0x24
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	58024400 	.word	0x58024400
 800d400:	03d09000 	.word	0x03d09000
 800d404:	46000000 	.word	0x46000000
 800d408:	4c742400 	.word	0x4c742400
 800d40c:	4a742400 	.word	0x4a742400
 800d410:	4bbebc20 	.word	0x4bbebc20

0800d414 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d422:	4b53      	ldr	r3, [pc, #332]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d426:	f003 0303 	and.w	r3, r3, #3
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d101      	bne.n	800d432 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e099      	b.n	800d566 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d432:	4b4f      	ldr	r3, [pc, #316]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a4e      	ldr	r2, [pc, #312]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d438:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d43c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d43e:	f7f6 fc5f 	bl	8003d00 <HAL_GetTick>
 800d442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d444:	e008      	b.n	800d458 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d446:	f7f6 fc5b 	bl	8003d00 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	2b02      	cmp	r3, #2
 800d452:	d901      	bls.n	800d458 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e086      	b.n	800d566 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d458:	4b45      	ldr	r3, [pc, #276]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1f0      	bne.n	800d446 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d464:	4b42      	ldr	r3, [pc, #264]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d468:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	031b      	lsls	r3, r3, #12
 800d472:	493f      	ldr	r1, [pc, #252]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d474:	4313      	orrs	r3, r2
 800d476:	628b      	str	r3, [r1, #40]	; 0x28
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	3b01      	subs	r3, #1
 800d47e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	3b01      	subs	r3, #1
 800d488:	025b      	lsls	r3, r3, #9
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	431a      	orrs	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	3b01      	subs	r3, #1
 800d494:	041b      	lsls	r3, r3, #16
 800d496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d49a:	431a      	orrs	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	061b      	lsls	r3, r3, #24
 800d4a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d4a8:	4931      	ldr	r1, [pc, #196]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d4ae:	4b30      	ldr	r3, [pc, #192]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	492d      	ldr	r1, [pc, #180]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4c0:	4b2b      	ldr	r3, [pc, #172]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	f023 0220 	bic.w	r2, r3, #32
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	4928      	ldr	r1, [pc, #160]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d4d2:	4b27      	ldr	r3, [pc, #156]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d6:	4a26      	ldr	r2, [pc, #152]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4d8:	f023 0310 	bic.w	r3, r3, #16
 800d4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d4de:	4b24      	ldr	r3, [pc, #144]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4e2:	4b24      	ldr	r3, [pc, #144]	; (800d574 <RCCEx_PLL2_Config+0x160>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	69d2      	ldr	r2, [r2, #28]
 800d4ea:	00d2      	lsls	r2, r2, #3
 800d4ec:	4920      	ldr	r1, [pc, #128]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d4f2:	4b1f      	ldr	r3, [pc, #124]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f6:	4a1e      	ldr	r2, [pc, #120]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d4f8:	f043 0310 	orr.w	r3, r3, #16
 800d4fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d504:	4b1a      	ldr	r3, [pc, #104]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	4a19      	ldr	r2, [pc, #100]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d50a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d50e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d510:	e00f      	b.n	800d532 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d106      	bne.n	800d526 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d518:	4b15      	ldr	r3, [pc, #84]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	4a14      	ldr	r2, [pc, #80]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d51e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d522:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d524:	e005      	b.n	800d532 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d526:	4b12      	ldr	r3, [pc, #72]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52a:	4a11      	ldr	r2, [pc, #68]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d52c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d532:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a0e      	ldr	r2, [pc, #56]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d53c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d53e:	f7f6 fbdf 	bl	8003d00 <HAL_GetTick>
 800d542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d544:	e008      	b.n	800d558 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d546:	f7f6 fbdb 	bl	8003d00 <HAL_GetTick>
 800d54a:	4602      	mov	r2, r0
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	2b02      	cmp	r3, #2
 800d552:	d901      	bls.n	800d558 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d554:	2303      	movs	r3, #3
 800d556:	e006      	b.n	800d566 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <RCCEx_PLL2_Config+0x15c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0f0      	beq.n	800d546 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d564:	7bfb      	ldrb	r3, [r7, #15]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	58024400 	.word	0x58024400
 800d574:	ffff0007 	.word	0xffff0007

0800d578 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d586:	4b53      	ldr	r3, [pc, #332]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	2b03      	cmp	r3, #3
 800d590:	d101      	bne.n	800d596 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e099      	b.n	800d6ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d596:	4b4f      	ldr	r3, [pc, #316]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a4e      	ldr	r2, [pc, #312]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d59c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5a2:	f7f6 fbad 	bl	8003d00 <HAL_GetTick>
 800d5a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5a8:	e008      	b.n	800d5bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5aa:	f7f6 fba9 	bl	8003d00 <HAL_GetTick>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d901      	bls.n	800d5bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e086      	b.n	800d6ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5bc:	4b45      	ldr	r3, [pc, #276]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1f0      	bne.n	800d5aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d5c8:	4b42      	ldr	r3, [pc, #264]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	051b      	lsls	r3, r3, #20
 800d5d6:	493f      	ldr	r1, [pc, #252]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	628b      	str	r3, [r1, #40]	; 0x28
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	025b      	lsls	r3, r3, #9
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	431a      	orrs	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	041b      	lsls	r3, r3, #16
 800d5fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5fe:	431a      	orrs	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	3b01      	subs	r3, #1
 800d606:	061b      	lsls	r3, r3, #24
 800d608:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d60c:	4931      	ldr	r1, [pc, #196]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d60e:	4313      	orrs	r3, r2
 800d610:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d612:	4b30      	ldr	r3, [pc, #192]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d616:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	492d      	ldr	r1, [pc, #180]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d620:	4313      	orrs	r3, r2
 800d622:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d624:	4b2b      	ldr	r3, [pc, #172]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d628:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	4928      	ldr	r1, [pc, #160]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d632:	4313      	orrs	r3, r2
 800d634:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d636:	4b27      	ldr	r3, [pc, #156]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	4a26      	ldr	r2, [pc, #152]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d63c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d642:	4b24      	ldr	r3, [pc, #144]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d646:	4b24      	ldr	r3, [pc, #144]	; (800d6d8 <RCCEx_PLL3_Config+0x160>)
 800d648:	4013      	ands	r3, r2
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	69d2      	ldr	r2, [r2, #28]
 800d64e:	00d2      	lsls	r2, r2, #3
 800d650:	4920      	ldr	r1, [pc, #128]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d652:	4313      	orrs	r3, r2
 800d654:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d656:	4b1f      	ldr	r3, [pc, #124]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65a:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d65c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d106      	bne.n	800d676 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d668:	4b1a      	ldr	r3, [pc, #104]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66c:	4a19      	ldr	r2, [pc, #100]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d66e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d672:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d674:	e00f      	b.n	800d696 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d106      	bne.n	800d68a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d67c:	4b15      	ldr	r3, [pc, #84]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	4a14      	ldr	r2, [pc, #80]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d682:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d686:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d688:	e005      	b.n	800d696 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d68a:	4b12      	ldr	r3, [pc, #72]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68e:	4a11      	ldr	r2, [pc, #68]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d694:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d696:	4b0f      	ldr	r3, [pc, #60]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a0e      	ldr	r2, [pc, #56]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d69c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6a2:	f7f6 fb2d 	bl	8003d00 <HAL_GetTick>
 800d6a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6a8:	e008      	b.n	800d6bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d6aa:	f7f6 fb29 	bl	8003d00 <HAL_GetTick>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d901      	bls.n	800d6bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e006      	b.n	800d6ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6bc:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <RCCEx_PLL3_Config+0x15c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d0f0      	beq.n	800d6aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	58024400 	.word	0x58024400
 800d6d8:	ffff0007 	.word	0xffff0007

0800d6dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d071      	beq.n	800d7d2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7f5 fd94 	bl	8003230 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2202      	movs	r2, #2
 800d70c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	f003 0310 	and.w	r3, r3, #16
 800d71a:	2b10      	cmp	r3, #16
 800d71c:	d050      	beq.n	800d7c0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	22ca      	movs	r2, #202	; 0xca
 800d724:	625a      	str	r2, [r3, #36]	; 0x24
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2253      	movs	r2, #83	; 0x53
 800d72c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fa4a 	bl	800dbc8 <RTC_EnterInitMode>
 800d734:	4603      	mov	r3, r0
 800d736:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d124      	bne.n	800d788 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6899      	ldr	r1, [r3, #8]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	4b24      	ldr	r3, [pc, #144]	; (800d7dc <HAL_RTC_Init+0x100>)
 800d74a:	400b      	ands	r3, r1
 800d74c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6899      	ldr	r1, [r3, #8]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	431a      	orrs	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	431a      	orrs	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	0419      	lsls	r1, r3, #16
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fa56 	bl	800dc30 <RTC_ExitInitMode>
 800d784:	4603      	mov	r3, r0
 800d786:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d788:	7bfb      	ldrb	r3, [r7, #15]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d113      	bne.n	800d7b6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 0203 	bic.w	r2, r2, #3
 800d79c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	69da      	ldr	r2, [r3, #28]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	431a      	orrs	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	430a      	orrs	r2, r1
 800d7b4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	22ff      	movs	r2, #255	; 0xff
 800d7bc:	625a      	str	r2, [r3, #36]	; 0x24
 800d7be:	e001      	b.n	800d7c4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d103      	bne.n	800d7d2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	ff8fffbf 	.word	0xff8fffbf

0800d7e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7e0:	b590      	push	{r4, r7, lr}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d101      	bne.n	800d7fa <HAL_RTC_SetTime+0x1a>
 800d7f6:	2302      	movs	r3, #2
 800d7f8:	e089      	b.n	800d90e <HAL_RTC_SetTime+0x12e>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2202      	movs	r2, #2
 800d806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	22ca      	movs	r2, #202	; 0xca
 800d810:	625a      	str	r2, [r3, #36]	; 0x24
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2253      	movs	r2, #83	; 0x53
 800d818:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f000 f9d4 	bl	800dbc8 <RTC_EnterInitMode>
 800d820:	4603      	mov	r3, r0
 800d822:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d824:	7cfb      	ldrb	r3, [r7, #19]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d161      	bne.n	800d8ee <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d126      	bne.n	800d87e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d102      	bne.n	800d844 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2200      	movs	r2, #0
 800d842:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fa2f 	bl	800dcac <RTC_ByteToBcd2>
 800d84e:	4603      	mov	r3, r0
 800d850:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	785b      	ldrb	r3, [r3, #1]
 800d856:	4618      	mov	r0, r3
 800d858:	f000 fa28 	bl	800dcac <RTC_ByteToBcd2>
 800d85c:	4603      	mov	r3, r0
 800d85e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d860:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	789b      	ldrb	r3, [r3, #2]
 800d866:	4618      	mov	r0, r3
 800d868:	f000 fa20 	bl	800dcac <RTC_ByteToBcd2>
 800d86c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d86e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	78db      	ldrb	r3, [r3, #3]
 800d876:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d878:	4313      	orrs	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	e018      	b.n	800d8b0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d102      	bne.n	800d892 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2200      	movs	r2, #0
 800d890:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d89e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8a4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	78db      	ldrb	r3, [r3, #3]
 800d8aa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	6979      	ldr	r1, [r7, #20]
 800d8b6:	4b18      	ldr	r3, [pc, #96]	; (800d918 <HAL_RTC_SetTime+0x138>)
 800d8b8:	400b      	ands	r3, r1
 800d8ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	689a      	ldr	r2, [r3, #8]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d8ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6899      	ldr	r1, [r3, #8]
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	68da      	ldr	r2, [r3, #12]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	430a      	orrs	r2, r1
 800d8e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f000 f9a3 	bl	800dc30 <RTC_ExitInitMode>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	22ff      	movs	r2, #255	; 0xff
 800d8f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d8f6:	7cfb      	ldrb	r3, [r7, #19]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d103      	bne.n	800d904 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d90c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	371c      	adds	r7, #28
 800d912:	46bd      	mov	sp, r7
 800d914:	bd90      	pop	{r4, r7, pc}
 800d916:	bf00      	nop
 800d918:	007f7f7f 	.word	0x007f7f7f

0800d91c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <HAL_RTC_GetTime+0xb4>)
 800d948:	4013      	ands	r3, r2
 800d94a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	0c1b      	lsrs	r3, r3, #16
 800d950:	b2db      	uxtb	r3, r3
 800d952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d956:	b2da      	uxtb	r2, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	0a1b      	lsrs	r3, r3, #8
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d966:	b2da      	uxtb	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d974:	b2da      	uxtb	r2, r3
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	0d9b      	lsrs	r3, r3, #22
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	f003 0301 	and.w	r3, r3, #1
 800d984:	b2da      	uxtb	r2, r3
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d11a      	bne.n	800d9c6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f9a9 	bl	800dcec <RTC_Bcd2ToByte>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	785b      	ldrb	r3, [r3, #1]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 f9a0 	bl	800dcec <RTC_Bcd2ToByte>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	789b      	ldrb	r3, [r3, #2]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 f997 	bl	800dcec <RTC_Bcd2ToByte>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	007f7f7f 	.word	0x007f7f7f

0800d9d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9d4:	b590      	push	{r4, r7, lr}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d101      	bne.n	800d9ee <HAL_RTC_SetDate+0x1a>
 800d9ea:	2302      	movs	r3, #2
 800d9ec:	e073      	b.n	800dad6 <HAL_RTC_SetDate+0x102>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10e      	bne.n	800da22 <HAL_RTC_SetDate+0x4e>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	f003 0310 	and.w	r3, r3, #16
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d008      	beq.n	800da22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	785b      	ldrb	r3, [r3, #1]
 800da14:	f023 0310 	bic.w	r3, r3, #16
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	330a      	adds	r3, #10
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d11c      	bne.n	800da62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	78db      	ldrb	r3, [r3, #3]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f000 f93d 	bl	800dcac <RTC_ByteToBcd2>
 800da32:	4603      	mov	r3, r0
 800da34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	785b      	ldrb	r3, [r3, #1]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 f936 	bl	800dcac <RTC_ByteToBcd2>
 800da40:	4603      	mov	r3, r0
 800da42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	789b      	ldrb	r3, [r3, #2]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 f92e 	bl	800dcac <RTC_ByteToBcd2>
 800da50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da5c:	4313      	orrs	r3, r2
 800da5e:	617b      	str	r3, [r7, #20]
 800da60:	e00e      	b.n	800da80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	78db      	ldrb	r3, [r3, #3]
 800da66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	785b      	ldrb	r3, [r3, #1]
 800da6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da6e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800da74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da7c:	4313      	orrs	r3, r2
 800da7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	22ca      	movs	r2, #202	; 0xca
 800da86:	625a      	str	r2, [r3, #36]	; 0x24
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2253      	movs	r2, #83	; 0x53
 800da8e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 f899 	bl	800dbc8 <RTC_EnterInitMode>
 800da96:	4603      	mov	r3, r0
 800da98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da9a:	7cfb      	ldrb	r3, [r7, #19]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	6979      	ldr	r1, [r7, #20]
 800daa6:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <HAL_RTC_SetDate+0x10c>)
 800daa8:	400b      	ands	r3, r1
 800daaa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f000 f8bf 	bl	800dc30 <RTC_ExitInitMode>
 800dab2:	4603      	mov	r3, r0
 800dab4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	22ff      	movs	r2, #255	; 0xff
 800dabc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dabe:	7cfb      	ldrb	r3, [r7, #19]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d103      	bne.n	800dacc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dad4:	7cfb      	ldrb	r3, [r7, #19]


}
 800dad6:	4618      	mov	r0, r3
 800dad8:	371c      	adds	r7, #28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd90      	pop	{r4, r7, pc}
 800dade:	bf00      	nop
 800dae0:	00ffff3f 	.word	0x00ffff3f

0800dae4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	4b21      	ldr	r3, [pc, #132]	; (800db7c <HAL_RTC_GetDate+0x98>)
 800daf8:	4013      	ands	r3, r2
 800dafa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	0c1b      	lsrs	r3, r3, #16
 800db00:	b2da      	uxtb	r2, r3
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	0a1b      	lsrs	r3, r3, #8
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 031f 	and.w	r3, r3, #31
 800db10:	b2da      	uxtb	r2, r3
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	0b5b      	lsrs	r3, r3, #13
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	f003 0307 	and.w	r3, r3, #7
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d11a      	bne.n	800db70 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	78db      	ldrb	r3, [r3, #3]
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 f8d4 	bl	800dcec <RTC_Bcd2ToByte>
 800db44:	4603      	mov	r3, r0
 800db46:	461a      	mov	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	4618      	mov	r0, r3
 800db52:	f000 f8cb 	bl	800dcec <RTC_Bcd2ToByte>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	789b      	ldrb	r3, [r3, #2]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f8c2 	bl	800dcec <RTC_Bcd2ToByte>
 800db68:	4603      	mov	r3, r0
 800db6a:	461a      	mov	r2, r3
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	00ffff3f 	.word	0x00ffff3f

0800db80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a0d      	ldr	r2, [pc, #52]	; (800dbc4 <HAL_RTC_WaitForSynchro+0x44>)
 800db8e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800db90:	f7f6 f8b6 	bl	8003d00 <HAL_GetTick>
 800db94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db96:	e009      	b.n	800dbac <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db98:	f7f6 f8b2 	bl	8003d00 <HAL_GetTick>
 800db9c:	4602      	mov	r2, r0
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dba6:	d901      	bls.n	800dbac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e007      	b.n	800dbbc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	f003 0320 	and.w	r3, r3, #32
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d0ee      	beq.n	800db98 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	0003ff5f 	.word	0x0003ff5f

0800dbc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d120      	bne.n	800dc24 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dbec:	f7f6 f888 	bl	8003d00 <HAL_GetTick>
 800dbf0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbf2:	e00d      	b.n	800dc10 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dbf4:	f7f6 f884 	bl	8003d00 <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc02:	d905      	bls.n	800dc10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dc04:	2303      	movs	r3, #3
 800dc06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2203      	movs	r2, #3
 800dc0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d102      	bne.n	800dc24 <RTC_EnterInitMode+0x5c>
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d1e7      	bne.n	800dbf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
	...

0800dc30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	4a19      	ldr	r2, [pc, #100]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc46:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dc48:	4b17      	ldr	r3, [pc, #92]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f003 0320 	and.w	r3, r3, #32
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10c      	bne.n	800dc6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7ff ff93 	bl	800db80 <HAL_RTC_WaitForSynchro>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d01e      	beq.n	800dc9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2203      	movs	r2, #3
 800dc64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	73fb      	strb	r3, [r7, #15]
 800dc6c:	e017      	b.n	800dc9e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc6e:	4b0e      	ldr	r3, [pc, #56]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	4a0d      	ldr	r2, [pc, #52]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc74:	f023 0320 	bic.w	r3, r3, #32
 800dc78:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff ff80 	bl	800db80 <HAL_RTC_WaitForSynchro>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d005      	beq.n	800dc92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2203      	movs	r2, #3
 800dc8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc92:	4b05      	ldr	r3, [pc, #20]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	4a04      	ldr	r2, [pc, #16]	; (800dca8 <RTC_ExitInitMode+0x78>)
 800dc98:	f043 0320 	orr.w	r3, r3, #32
 800dc9c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	58004000 	.word	0x58004000

0800dcac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dcbe:	e005      	b.n	800dccc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dcc6:	7afb      	ldrb	r3, [r7, #11]
 800dcc8:	3b0a      	subs	r3, #10
 800dcca:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dccc:	7afb      	ldrb	r3, [r7, #11]
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	d8f6      	bhi.n	800dcc0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	011b      	lsls	r3, r3, #4
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	7afb      	ldrb	r3, [r7, #11]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	b2db      	uxtb	r3, r3
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3714      	adds	r7, #20
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	091b      	lsrs	r3, r3, #4
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	0092      	lsls	r2, r2, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dd06:	79fb      	ldrb	r3, [r7, #7]
 800dd08:	f003 030f 	and.w	r3, r3, #15
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	4413      	add	r3, r2
 800dd12:	b2db      	uxtb	r3, r3
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e10f      	b.n	800df52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a87      	ldr	r2, [pc, #540]	; (800df5c <HAL_SPI_Init+0x23c>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d00f      	beq.n	800dd62 <HAL_SPI_Init+0x42>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a86      	ldr	r2, [pc, #536]	; (800df60 <HAL_SPI_Init+0x240>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d00a      	beq.n	800dd62 <HAL_SPI_Init+0x42>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a84      	ldr	r2, [pc, #528]	; (800df64 <HAL_SPI_Init+0x244>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d005      	beq.n	800dd62 <HAL_SPI_Init+0x42>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	2b0f      	cmp	r3, #15
 800dd5c:	d901      	bls.n	800dd62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e0f7      	b.n	800df52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fc12 	bl	800e58c <SPI_GetPacketSize>
 800dd68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a7b      	ldr	r2, [pc, #492]	; (800df5c <HAL_SPI_Init+0x23c>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d00c      	beq.n	800dd8e <HAL_SPI_Init+0x6e>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a79      	ldr	r2, [pc, #484]	; (800df60 <HAL_SPI_Init+0x240>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d007      	beq.n	800dd8e <HAL_SPI_Init+0x6e>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a78      	ldr	r2, [pc, #480]	; (800df64 <HAL_SPI_Init+0x244>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d002      	beq.n	800dd8e <HAL_SPI_Init+0x6e>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b08      	cmp	r3, #8
 800dd8c:	d811      	bhi.n	800ddb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dd92:	4a72      	ldr	r2, [pc, #456]	; (800df5c <HAL_SPI_Init+0x23c>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d009      	beq.n	800ddac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a70      	ldr	r2, [pc, #448]	; (800df60 <HAL_SPI_Init+0x240>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d004      	beq.n	800ddac <HAL_SPI_Init+0x8c>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a6f      	ldr	r2, [pc, #444]	; (800df64 <HAL_SPI_Init+0x244>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d104      	bne.n	800ddb6 <HAL_SPI_Init+0x96>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2b10      	cmp	r3, #16
 800ddb0:	d901      	bls.n	800ddb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e0cd      	b.n	800df52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d106      	bne.n	800ddd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7f5 fa64 	bl	8003298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f022 0201 	bic.w	r2, r2, #1
 800dde6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ddf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ddfc:	d119      	bne.n	800de32 <HAL_SPI_Init+0x112>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de06:	d103      	bne.n	800de10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d008      	beq.n	800de22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10c      	bne.n	800de32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de20:	d107      	bne.n	800de32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00f      	beq.n	800de5e <HAL_SPI_Init+0x13e>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	2b06      	cmp	r3, #6
 800de44:	d90b      	bls.n	800de5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	430a      	orrs	r2, r1
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	e007      	b.n	800de6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	69da      	ldr	r2, [r3, #28]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de76:	431a      	orrs	r2, r3
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	431a      	orrs	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de80:	ea42 0103 	orr.w	r1, r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	430a      	orrs	r2, r1
 800de8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de98:	431a      	orrs	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9e:	431a      	orrs	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	431a      	orrs	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	431a      	orrs	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	431a      	orrs	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a1b      	ldr	r3, [r3, #32]
 800deb6:	431a      	orrs	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	431a      	orrs	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dec2:	431a      	orrs	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	431a      	orrs	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dece:	ea42 0103 	orr.w	r1, r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	430a      	orrs	r2, r1
 800dedc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d113      	bne.n	800df0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800def8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f022 0201 	bic.w	r2, r2, #1
 800df1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00a      	beq.n	800df40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	430a      	orrs	r2, r1
 800df3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	40013000 	.word	0x40013000
 800df60:	40003800 	.word	0x40003800
 800df64:	40003c00 	.word	0x40003c00

0800df68 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	603b      	str	r3, [r7, #0]
 800df74:	4613      	mov	r3, r2
 800df76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df7c:	095b      	lsrs	r3, r3, #5
 800df7e:	b29b      	uxth	r3, r3
 800df80:	3301      	adds	r3, #1
 800df82:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3330      	adds	r3, #48	; 0x30
 800df8a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df8c:	f7f5 feb8 	bl	8003d00 <HAL_GetTick>
 800df90:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d001      	beq.n	800dfa2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800df9e:	2302      	movs	r3, #2
 800dfa0:	e250      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <HAL_SPI_Receive+0x46>
 800dfa8:	88fb      	ldrh	r3, [r7, #6]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e248      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d101      	bne.n	800dfc0 <HAL_SPI_Receive+0x58>
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	e241      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2204      	movs	r2, #4
 800dfcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	88fa      	ldrh	r2, [r7, #6]
 800dfe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	88fa      	ldrh	r2, [r7, #6]
 800dfea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2200      	movs	r2, #0
 800e000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e018:	d108      	bne.n	800e02c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	e009      	b.n	800e040 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e03e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	4b95      	ldr	r3, [pc, #596]	; (800e29c <HAL_SPI_Receive+0x334>)
 800e048:	4013      	ands	r3, r2
 800e04a:	88f9      	ldrh	r1, [r7, #6]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	6812      	ldr	r2, [r2, #0]
 800e050:	430b      	orrs	r3, r1
 800e052:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f042 0201 	orr.w	r2, r2, #1
 800e062:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e06c:	d107      	bne.n	800e07e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e07c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	2b0f      	cmp	r3, #15
 800e084:	d96c      	bls.n	800e160 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e086:	e064      	b.n	800e152 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	695b      	ldr	r3, [r3, #20]
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d114      	bne.n	800e0c8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ae:	1d1a      	adds	r2, r3, #4
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0c6:	e044      	b.n	800e152 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	8bfa      	ldrh	r2, [r7, #30]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d919      	bls.n	800e10a <HAL_SPI_Receive+0x1a2>
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d014      	beq.n	800e10a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0ea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0f0:	1d1a      	adds	r2, r3, #4
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	3b01      	subs	r3, #1
 800e100:	b29a      	uxth	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e108:	e023      	b.n	800e152 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e10a:	f7f5 fdf9 	bl	8003d00 <HAL_GetTick>
 800e10e:	4602      	mov	r2, r0
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	429a      	cmp	r2, r3
 800e118:	d803      	bhi.n	800e122 <HAL_SPI_Receive+0x1ba>
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e120:	d102      	bne.n	800e128 <HAL_SPI_Receive+0x1c0>
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d114      	bne.n	800e152 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 f98f 	bl	800e44c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2201      	movs	r2, #1
 800e142:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	e178      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e158:	b29b      	uxth	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d194      	bne.n	800e088 <HAL_SPI_Receive+0x120>
 800e15e:	e15e      	b.n	800e41e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	2b07      	cmp	r3, #7
 800e166:	f240 8153 	bls.w	800e410 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e16a:	e08f      	b.n	800e28c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d114      	bne.n	800e1ac <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	8812      	ldrh	r2, [r2, #0]
 800e18a:	b292      	uxth	r2, r2
 800e18c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e192:	1c9a      	adds	r2, r3, #2
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1aa:	e06f      	b.n	800e28c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	8bfa      	ldrh	r2, [r7, #30]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d924      	bls.n	800e204 <HAL_SPI_Receive+0x29c>
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d01f      	beq.n	800e204 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1c8:	69ba      	ldr	r2, [r7, #24]
 800e1ca:	8812      	ldrh	r2, [r2, #0]
 800e1cc:	b292      	uxth	r2, r2
 800e1ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d4:	1c9a      	adds	r2, r3, #2
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1de:	69ba      	ldr	r2, [r7, #24]
 800e1e0:	8812      	ldrh	r2, [r2, #0]
 800e1e2:	b292      	uxth	r2, r2
 800e1e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ea:	1c9a      	adds	r2, r3, #2
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	3b02      	subs	r3, #2
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e202:	e043      	b.n	800e28c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d119      	bne.n	800e244 <HAL_SPI_Receive+0x2dc>
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e216:	2b00      	cmp	r3, #0
 800e218:	d014      	beq.n	800e244 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e21e:	69ba      	ldr	r2, [r7, #24]
 800e220:	8812      	ldrh	r2, [r2, #0]
 800e222:	b292      	uxth	r2, r2
 800e224:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e22a:	1c9a      	adds	r2, r3, #2
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e236:	b29b      	uxth	r3, r3
 800e238:	3b01      	subs	r3, #1
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e242:	e023      	b.n	800e28c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e244:	f7f5 fd5c 	bl	8003d00 <HAL_GetTick>
 800e248:	4602      	mov	r2, r0
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	429a      	cmp	r2, r3
 800e252:	d803      	bhi.n	800e25c <HAL_SPI_Receive+0x2f4>
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e25a:	d102      	bne.n	800e262 <HAL_SPI_Receive+0x2fa>
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d114      	bne.n	800e28c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f000 f8f2 	bl	800e44c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e26e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e288:	2303      	movs	r3, #3
 800e28a:	e0db      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e292:	b29b      	uxth	r3, r3
 800e294:	2b00      	cmp	r3, #0
 800e296:	f47f af69 	bne.w	800e16c <HAL_SPI_Receive+0x204>
 800e29a:	e0c0      	b.n	800e41e <HAL_SPI_Receive+0x4b6>
 800e29c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	695b      	ldr	r3, [r3, #20]
 800e2a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	695b      	ldr	r3, [r3, #20]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d117      	bne.n	800e2e6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c2:	7812      	ldrb	r2, [r2, #0]
 800e2c4:	b2d2      	uxtb	r2, r2
 800e2c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2cc:	1c5a      	adds	r2, r3, #1
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2e4:	e094      	b.n	800e410 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	8bfa      	ldrh	r2, [r7, #30]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d946      	bls.n	800e382 <HAL_SPI_Receive+0x41a>
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d041      	beq.n	800e382 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e30a:	7812      	ldrb	r2, [r2, #0]
 800e30c:	b2d2      	uxtb	r2, r2
 800e30e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e326:	7812      	ldrb	r2, [r2, #0]
 800e328:	b2d2      	uxtb	r2, r2
 800e32a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	b2d2      	uxtb	r2, r2
 800e346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e35e:	7812      	ldrb	r2, [r2, #0]
 800e360:	b2d2      	uxtb	r2, r2
 800e362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e368:	1c5a      	adds	r2, r3, #1
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e374:	b29b      	uxth	r3, r3
 800e376:	3b04      	subs	r3, #4
 800e378:	b29a      	uxth	r2, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e380:	e046      	b.n	800e410 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e388:	b29b      	uxth	r3, r3
 800e38a:	2b03      	cmp	r3, #3
 800e38c:	d81c      	bhi.n	800e3c8 <HAL_SPI_Receive+0x460>
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e394:	2b00      	cmp	r3, #0
 800e396:	d017      	beq.n	800e3c8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3a4:	7812      	ldrb	r2, [r2, #0]
 800e3a6:	b2d2      	uxtb	r2, r2
 800e3a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ae:	1c5a      	adds	r2, r3, #1
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3c6:	e023      	b.n	800e410 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3c8:	f7f5 fc9a 	bl	8003d00 <HAL_GetTick>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d803      	bhi.n	800e3e0 <HAL_SPI_Receive+0x478>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3de:	d102      	bne.n	800e3e6 <HAL_SPI_Receive+0x47e>
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d114      	bne.n	800e410 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f000 f830 	bl	800e44c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e40c:	2303      	movs	r3, #3
 800e40e:	e019      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e416:	b29b      	uxth	r3, r3
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f47f af41 	bne.w	800e2a0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f000 f814 	bl	800e44c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2201      	movs	r2, #1
 800e428:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e43e:	2301      	movs	r3, #1
 800e440:	e000      	b.n	800e444 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e442:	2300      	movs	r3, #0
  }
}
 800e444:	4618      	mov	r0, r3
 800e446:	3720      	adds	r7, #32
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	699a      	ldr	r2, [r3, #24]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f042 0208 	orr.w	r2, r2, #8
 800e46a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	699a      	ldr	r2, [r3, #24]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f042 0210 	orr.w	r2, r2, #16
 800e47a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f022 0201 	bic.w	r2, r2, #1
 800e48a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6919      	ldr	r1, [r3, #16]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	4b3c      	ldr	r3, [pc, #240]	; (800e588 <SPI_CloseTransfer+0x13c>)
 800e498:	400b      	ands	r3, r1
 800e49a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	689a      	ldr	r2, [r3, #8]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e4aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d014      	beq.n	800e4e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f003 0320 	and.w	r3, r3, #32
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00f      	beq.n	800e4e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	699a      	ldr	r2, [r3, #24]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f042 0220 	orr.w	r2, r2, #32
 800e4e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d014      	beq.n	800e518 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00f      	beq.n	800e518 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4fe:	f043 0204 	orr.w	r2, r3, #4
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	699a      	ldr	r2, [r3, #24]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e516:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00f      	beq.n	800e542 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e528:	f043 0201 	orr.w	r2, r3, #1
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	699a      	ldr	r2, [r3, #24]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e540:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00f      	beq.n	800e56c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e552:	f043 0208 	orr.w	r2, r3, #8
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	699a      	ldr	r2, [r3, #24]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e56a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e57c:	bf00      	nop
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	fffffc90 	.word	0xfffffc90

0800e58c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b085      	sub	sp, #20
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e598:	095b      	lsrs	r3, r3, #5
 800e59a:	3301      	adds	r3, #1
 800e59c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	3307      	adds	r3, #7
 800e5aa:	08db      	lsrs	r3, r3, #3
 800e5ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b082      	sub	sp, #8
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e049      	b.n	800e668 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d106      	bne.n	800e5ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7f4 ff0b 	bl	8003404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2202      	movs	r2, #2
 800e5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	4619      	mov	r1, r3
 800e600:	4610      	mov	r0, r2
 800e602:	f000 fe7d 	bl	800f300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	2b01      	cmp	r3, #1
 800e682:	d001      	beq.n	800e688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	e054      	b.n	800e732 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2202      	movs	r2, #2
 800e68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68da      	ldr	r2, [r3, #12]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f042 0201 	orr.w	r2, r2, #1
 800e69e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a26      	ldr	r2, [pc, #152]	; (800e740 <HAL_TIM_Base_Start_IT+0xd0>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d022      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6b2:	d01d      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a22      	ldr	r2, [pc, #136]	; (800e744 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d018      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a21      	ldr	r2, [pc, #132]	; (800e748 <HAL_TIM_Base_Start_IT+0xd8>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d013      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a1f      	ldr	r2, [pc, #124]	; (800e74c <HAL_TIM_Base_Start_IT+0xdc>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d00e      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a1e      	ldr	r2, [pc, #120]	; (800e750 <HAL_TIM_Base_Start_IT+0xe0>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d009      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a1c      	ldr	r2, [pc, #112]	; (800e754 <HAL_TIM_Base_Start_IT+0xe4>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d004      	beq.n	800e6f0 <HAL_TIM_Base_Start_IT+0x80>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a1b      	ldr	r2, [pc, #108]	; (800e758 <HAL_TIM_Base_Start_IT+0xe8>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d115      	bne.n	800e71c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	4b19      	ldr	r3, [pc, #100]	; (800e75c <HAL_TIM_Base_Start_IT+0xec>)
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b06      	cmp	r3, #6
 800e700:	d015      	beq.n	800e72e <HAL_TIM_Base_Start_IT+0xbe>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e708:	d011      	beq.n	800e72e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f042 0201 	orr.w	r2, r2, #1
 800e718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e71a:	e008      	b.n	800e72e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f042 0201 	orr.w	r2, r2, #1
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	e000      	b.n	800e730 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	40010000 	.word	0x40010000
 800e744:	40000400 	.word	0x40000400
 800e748:	40000800 	.word	0x40000800
 800e74c:	40000c00 	.word	0x40000c00
 800e750:	40010400 	.word	0x40010400
 800e754:	40001800 	.word	0x40001800
 800e758:	40014000 	.word	0x40014000
 800e75c:	00010007 	.word	0x00010007

0800e760 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d109      	bne.n	800e788 <HAL_TIM_OC_Start_IT+0x28>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	bf14      	ite	ne
 800e780:	2301      	movne	r3, #1
 800e782:	2300      	moveq	r3, #0
 800e784:	b2db      	uxtb	r3, r3
 800e786:	e03c      	b.n	800e802 <HAL_TIM_OC_Start_IT+0xa2>
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2b04      	cmp	r3, #4
 800e78c:	d109      	bne.n	800e7a2 <HAL_TIM_OC_Start_IT+0x42>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b01      	cmp	r3, #1
 800e798:	bf14      	ite	ne
 800e79a:	2301      	movne	r3, #1
 800e79c:	2300      	moveq	r3, #0
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	e02f      	b.n	800e802 <HAL_TIM_OC_Start_IT+0xa2>
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	2b08      	cmp	r3, #8
 800e7a6:	d109      	bne.n	800e7bc <HAL_TIM_OC_Start_IT+0x5c>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	bf14      	ite	ne
 800e7b4:	2301      	movne	r3, #1
 800e7b6:	2300      	moveq	r3, #0
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	e022      	b.n	800e802 <HAL_TIM_OC_Start_IT+0xa2>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b0c      	cmp	r3, #12
 800e7c0:	d109      	bne.n	800e7d6 <HAL_TIM_OC_Start_IT+0x76>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	bf14      	ite	ne
 800e7ce:	2301      	movne	r3, #1
 800e7d0:	2300      	moveq	r3, #0
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	e015      	b.n	800e802 <HAL_TIM_OC_Start_IT+0xa2>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	2b10      	cmp	r3, #16
 800e7da:	d109      	bne.n	800e7f0 <HAL_TIM_OC_Start_IT+0x90>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	bf14      	ite	ne
 800e7e8:	2301      	movne	r3, #1
 800e7ea:	2300      	moveq	r3, #0
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	e008      	b.n	800e802 <HAL_TIM_OC_Start_IT+0xa2>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	bf14      	ite	ne
 800e7fc:	2301      	movne	r3, #1
 800e7fe:	2300      	moveq	r3, #0
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d001      	beq.n	800e80a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e806:	2301      	movs	r3, #1
 800e808:	e0ec      	b.n	800e9e4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d104      	bne.n	800e81a <HAL_TIM_OC_Start_IT+0xba>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2202      	movs	r2, #2
 800e814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e818:	e023      	b.n	800e862 <HAL_TIM_OC_Start_IT+0x102>
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d104      	bne.n	800e82a <HAL_TIM_OC_Start_IT+0xca>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2202      	movs	r2, #2
 800e824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e828:	e01b      	b.n	800e862 <HAL_TIM_OC_Start_IT+0x102>
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	2b08      	cmp	r3, #8
 800e82e:	d104      	bne.n	800e83a <HAL_TIM_OC_Start_IT+0xda>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2202      	movs	r2, #2
 800e834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e838:	e013      	b.n	800e862 <HAL_TIM_OC_Start_IT+0x102>
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	2b0c      	cmp	r3, #12
 800e83e:	d104      	bne.n	800e84a <HAL_TIM_OC_Start_IT+0xea>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2202      	movs	r2, #2
 800e844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e848:	e00b      	b.n	800e862 <HAL_TIM_OC_Start_IT+0x102>
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	2b10      	cmp	r3, #16
 800e84e:	d104      	bne.n	800e85a <HAL_TIM_OC_Start_IT+0xfa>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2202      	movs	r2, #2
 800e854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e858:	e003      	b.n	800e862 <HAL_TIM_OC_Start_IT+0x102>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2202      	movs	r2, #2
 800e85e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b0c      	cmp	r3, #12
 800e866:	d841      	bhi.n	800e8ec <HAL_TIM_OC_Start_IT+0x18c>
 800e868:	a201      	add	r2, pc, #4	; (adr r2, 800e870 <HAL_TIM_OC_Start_IT+0x110>)
 800e86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e86e:	bf00      	nop
 800e870:	0800e8a5 	.word	0x0800e8a5
 800e874:	0800e8ed 	.word	0x0800e8ed
 800e878:	0800e8ed 	.word	0x0800e8ed
 800e87c:	0800e8ed 	.word	0x0800e8ed
 800e880:	0800e8b7 	.word	0x0800e8b7
 800e884:	0800e8ed 	.word	0x0800e8ed
 800e888:	0800e8ed 	.word	0x0800e8ed
 800e88c:	0800e8ed 	.word	0x0800e8ed
 800e890:	0800e8c9 	.word	0x0800e8c9
 800e894:	0800e8ed 	.word	0x0800e8ed
 800e898:	0800e8ed 	.word	0x0800e8ed
 800e89c:	0800e8ed 	.word	0x0800e8ed
 800e8a0:	0800e8db 	.word	0x0800e8db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68da      	ldr	r2, [r3, #12]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f042 0202 	orr.w	r2, r2, #2
 800e8b2:	60da      	str	r2, [r3, #12]
      break;
 800e8b4:	e01d      	b.n	800e8f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f042 0204 	orr.w	r2, r2, #4
 800e8c4:	60da      	str	r2, [r3, #12]
      break;
 800e8c6:	e014      	b.n	800e8f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68da      	ldr	r2, [r3, #12]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f042 0208 	orr.w	r2, r2, #8
 800e8d6:	60da      	str	r2, [r3, #12]
      break;
 800e8d8:	e00b      	b.n	800e8f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68da      	ldr	r2, [r3, #12]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f042 0210 	orr.w	r2, r2, #16
 800e8e8:	60da      	str	r2, [r3, #12]
      break;
 800e8ea:	e002      	b.n	800e8f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e8f0:	bf00      	nop
  }

  if (status == HAL_OK)
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d174      	bne.n	800e9e2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	6839      	ldr	r1, [r7, #0]
 800e900:	4618      	mov	r0, r3
 800e902:	f001 f917 	bl	800fb34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a38      	ldr	r2, [pc, #224]	; (800e9ec <HAL_TIM_OC_Start_IT+0x28c>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d013      	beq.n	800e938 <HAL_TIM_OC_Start_IT+0x1d8>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a36      	ldr	r2, [pc, #216]	; (800e9f0 <HAL_TIM_OC_Start_IT+0x290>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d00e      	beq.n	800e938 <HAL_TIM_OC_Start_IT+0x1d8>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a35      	ldr	r2, [pc, #212]	; (800e9f4 <HAL_TIM_OC_Start_IT+0x294>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d009      	beq.n	800e938 <HAL_TIM_OC_Start_IT+0x1d8>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a33      	ldr	r2, [pc, #204]	; (800e9f8 <HAL_TIM_OC_Start_IT+0x298>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d004      	beq.n	800e938 <HAL_TIM_OC_Start_IT+0x1d8>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a32      	ldr	r2, [pc, #200]	; (800e9fc <HAL_TIM_OC_Start_IT+0x29c>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d101      	bne.n	800e93c <HAL_TIM_OC_Start_IT+0x1dc>
 800e938:	2301      	movs	r3, #1
 800e93a:	e000      	b.n	800e93e <HAL_TIM_OC_Start_IT+0x1de>
 800e93c:	2300      	movs	r3, #0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d007      	beq.n	800e952 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a25      	ldr	r2, [pc, #148]	; (800e9ec <HAL_TIM_OC_Start_IT+0x28c>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d022      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e964:	d01d      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a25      	ldr	r2, [pc, #148]	; (800ea00 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d018      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a23      	ldr	r2, [pc, #140]	; (800ea04 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d013      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a22      	ldr	r2, [pc, #136]	; (800ea08 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d00e      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a19      	ldr	r2, [pc, #100]	; (800e9f0 <HAL_TIM_OC_Start_IT+0x290>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d009      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a1e      	ldr	r2, [pc, #120]	; (800ea0c <HAL_TIM_OC_Start_IT+0x2ac>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d004      	beq.n	800e9a2 <HAL_TIM_OC_Start_IT+0x242>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a15      	ldr	r2, [pc, #84]	; (800e9f4 <HAL_TIM_OC_Start_IT+0x294>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d115      	bne.n	800e9ce <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689a      	ldr	r2, [r3, #8]
 800e9a8:	4b19      	ldr	r3, [pc, #100]	; (800ea10 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2b06      	cmp	r3, #6
 800e9b2:	d015      	beq.n	800e9e0 <HAL_TIM_OC_Start_IT+0x280>
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9ba:	d011      	beq.n	800e9e0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f042 0201 	orr.w	r2, r2, #1
 800e9ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9cc:	e008      	b.n	800e9e0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f042 0201 	orr.w	r2, r2, #1
 800e9dc:	601a      	str	r2, [r3, #0]
 800e9de:	e000      	b.n	800e9e2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	40010000 	.word	0x40010000
 800e9f0:	40010400 	.word	0x40010400
 800e9f4:	40014000 	.word	0x40014000
 800e9f8:	40014400 	.word	0x40014400
 800e9fc:	40014800 	.word	0x40014800
 800ea00:	40000400 	.word	0x40000400
 800ea04:	40000800 	.word	0x40000800
 800ea08:	40000c00 	.word	0x40000c00
 800ea0c:	40001800 	.word	0x40001800
 800ea10:	00010007 	.word	0x00010007

0800ea14 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2b0c      	cmp	r3, #12
 800ea26:	d841      	bhi.n	800eaac <HAL_TIM_OC_Stop_IT+0x98>
 800ea28:	a201      	add	r2, pc, #4	; (adr r2, 800ea30 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ea2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2e:	bf00      	nop
 800ea30:	0800ea65 	.word	0x0800ea65
 800ea34:	0800eaad 	.word	0x0800eaad
 800ea38:	0800eaad 	.word	0x0800eaad
 800ea3c:	0800eaad 	.word	0x0800eaad
 800ea40:	0800ea77 	.word	0x0800ea77
 800ea44:	0800eaad 	.word	0x0800eaad
 800ea48:	0800eaad 	.word	0x0800eaad
 800ea4c:	0800eaad 	.word	0x0800eaad
 800ea50:	0800ea89 	.word	0x0800ea89
 800ea54:	0800eaad 	.word	0x0800eaad
 800ea58:	0800eaad 	.word	0x0800eaad
 800ea5c:	0800eaad 	.word	0x0800eaad
 800ea60:	0800ea9b 	.word	0x0800ea9b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68da      	ldr	r2, [r3, #12]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f022 0202 	bic.w	r2, r2, #2
 800ea72:	60da      	str	r2, [r3, #12]
      break;
 800ea74:	e01d      	b.n	800eab2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	68da      	ldr	r2, [r3, #12]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f022 0204 	bic.w	r2, r2, #4
 800ea84:	60da      	str	r2, [r3, #12]
      break;
 800ea86:	e014      	b.n	800eab2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68da      	ldr	r2, [r3, #12]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f022 0208 	bic.w	r2, r2, #8
 800ea96:	60da      	str	r2, [r3, #12]
      break;
 800ea98:	e00b      	b.n	800eab2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	68da      	ldr	r2, [r3, #12]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f022 0210 	bic.w	r2, r2, #16
 800eaa8:	60da      	str	r2, [r3, #12]
      break;
 800eaaa:	e002      	b.n	800eab2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	73fb      	strb	r3, [r7, #15]
      break;
 800eab0:	bf00      	nop
  }

  if (status == HAL_OK)
 800eab2:	7bfb      	ldrb	r3, [r7, #15]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f040 8081 	bne.w	800ebbc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2200      	movs	r2, #0
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f001 f836 	bl	800fb34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a3e      	ldr	r2, [pc, #248]	; (800ebc8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d013      	beq.n	800eafa <HAL_TIM_OC_Stop_IT+0xe6>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a3d      	ldr	r2, [pc, #244]	; (800ebcc <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d00e      	beq.n	800eafa <HAL_TIM_OC_Stop_IT+0xe6>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a3b      	ldr	r2, [pc, #236]	; (800ebd0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d009      	beq.n	800eafa <HAL_TIM_OC_Stop_IT+0xe6>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a3a      	ldr	r2, [pc, #232]	; (800ebd4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d004      	beq.n	800eafa <HAL_TIM_OC_Stop_IT+0xe6>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a38      	ldr	r2, [pc, #224]	; (800ebd8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d101      	bne.n	800eafe <HAL_TIM_OC_Stop_IT+0xea>
 800eafa:	2301      	movs	r3, #1
 800eafc:	e000      	b.n	800eb00 <HAL_TIM_OC_Stop_IT+0xec>
 800eafe:	2300      	movs	r3, #0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d017      	beq.n	800eb34 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6a1a      	ldr	r2, [r3, #32]
 800eb0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800eb0e:	4013      	ands	r3, r2
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10f      	bne.n	800eb34 <HAL_TIM_OC_Stop_IT+0x120>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6a1a      	ldr	r2, [r3, #32]
 800eb1a:	f240 4344 	movw	r3, #1092	; 0x444
 800eb1e:	4013      	ands	r3, r2
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d107      	bne.n	800eb34 <HAL_TIM_OC_Stop_IT+0x120>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eb32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6a1a      	ldr	r2, [r3, #32]
 800eb3a:	f241 1311 	movw	r3, #4369	; 0x1111
 800eb3e:	4013      	ands	r3, r2
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10f      	bne.n	800eb64 <HAL_TIM_OC_Stop_IT+0x150>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	f240 4344 	movw	r3, #1092	; 0x444
 800eb4e:	4013      	ands	r3, r2
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d107      	bne.n	800eb64 <HAL_TIM_OC_Stop_IT+0x150>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f022 0201 	bic.w	r2, r2, #1
 800eb62:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <HAL_TIM_OC_Stop_IT+0x160>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb72:	e023      	b.n	800ebbc <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	2b04      	cmp	r3, #4
 800eb78:	d104      	bne.n	800eb84 <HAL_TIM_OC_Stop_IT+0x170>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb82:	e01b      	b.n	800ebbc <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b08      	cmp	r3, #8
 800eb88:	d104      	bne.n	800eb94 <HAL_TIM_OC_Stop_IT+0x180>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb92:	e013      	b.n	800ebbc <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	2b0c      	cmp	r3, #12
 800eb98:	d104      	bne.n	800eba4 <HAL_TIM_OC_Stop_IT+0x190>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eba2:	e00b      	b.n	800ebbc <HAL_TIM_OC_Stop_IT+0x1a8>
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b10      	cmp	r3, #16
 800eba8:	d104      	bne.n	800ebb4 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebb2:	e003      	b.n	800ebbc <HAL_TIM_OC_Stop_IT+0x1a8>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	40010000 	.word	0x40010000
 800ebcc:	40010400 	.word	0x40010400
 800ebd0:	40014000 	.word	0x40014000
 800ebd4:	40014400 	.word	0x40014400
 800ebd8:	40014800 	.word	0x40014800

0800ebdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ebea:	2301      	movs	r3, #1
 800ebec:	e049      	b.n	800ec82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d106      	bne.n	800ec08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f841 	bl	800ec8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3304      	adds	r3, #4
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	f000 fb70 	bl	800f300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b083      	sub	sp, #12
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ec92:	bf00      	nop
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b084      	sub	sp, #16
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d020      	beq.n	800ed02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f003 0302 	and.w	r3, r3, #2
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d01b      	beq.n	800ed02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f06f 0202 	mvn.w	r2, #2
 800ecd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	699b      	ldr	r3, [r3, #24]
 800ece0:	f003 0303 	and.w	r3, r3, #3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 faeb 	bl	800f2c4 <HAL_TIM_IC_CaptureCallback>
 800ecee:	e005      	b.n	800ecfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7f1 fc85 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 faee 	bl	800f2d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	f003 0304 	and.w	r3, r3, #4
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d020      	beq.n	800ed4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f003 0304 	and.w	r3, r3, #4
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d01b      	beq.n	800ed4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f06f 0204 	mvn.w	r2, #4
 800ed1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2202      	movs	r2, #2
 800ed24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d003      	beq.n	800ed3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 fac5 	bl	800f2c4 <HAL_TIM_IC_CaptureCallback>
 800ed3a:	e005      	b.n	800ed48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7f1 fc5f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fac8 	bl	800f2d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d020      	beq.n	800ed9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f003 0308 	and.w	r3, r3, #8
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d01b      	beq.n	800ed9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f06f 0208 	mvn.w	r2, #8
 800ed6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2204      	movs	r2, #4
 800ed70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69db      	ldr	r3, [r3, #28]
 800ed78:	f003 0303 	and.w	r3, r3, #3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 fa9f 	bl	800f2c4 <HAL_TIM_IC_CaptureCallback>
 800ed86:	e005      	b.n	800ed94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7f1 fc39 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 faa2 	bl	800f2d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	f003 0310 	and.w	r3, r3, #16
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d020      	beq.n	800ede6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f003 0310 	and.w	r3, r3, #16
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d01b      	beq.n	800ede6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f06f 0210 	mvn.w	r2, #16
 800edb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2208      	movs	r2, #8
 800edbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	69db      	ldr	r3, [r3, #28]
 800edc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fa79 	bl	800f2c4 <HAL_TIM_IC_CaptureCallback>
 800edd2:	e005      	b.n	800ede0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7f1 fc13 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fa7c 	bl	800f2d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00c      	beq.n	800ee0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d007      	beq.n	800ee0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f06f 0201 	mvn.w	r2, #1
 800ee02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7f3 ffd7 	bl	8002db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d104      	bne.n	800ee1e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00c      	beq.n	800ee38 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d007      	beq.n	800ee38 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ee30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 ffba 	bl	800fdac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00c      	beq.n	800ee5c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d007      	beq.n	800ee5c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ee54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 ffb2 	bl	800fdc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00c      	beq.n	800ee80 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d007      	beq.n	800ee80 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fa36 	bl	800f2ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f003 0320 	and.w	r3, r3, #32
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00c      	beq.n	800eea4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f003 0320 	and.w	r3, r3, #32
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d007      	beq.n	800eea4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f06f 0220 	mvn.w	r2, #32
 800ee9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 ff7a 	bl	800fd98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eea4:	bf00      	nop
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b086      	sub	sp, #24
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d101      	bne.n	800eeca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eec6:	2302      	movs	r3, #2
 800eec8:	e0ff      	b.n	800f0ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2201      	movs	r2, #1
 800eece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b14      	cmp	r3, #20
 800eed6:	f200 80f0 	bhi.w	800f0ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eeda:	a201      	add	r2, pc, #4	; (adr r2, 800eee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee0:	0800ef35 	.word	0x0800ef35
 800eee4:	0800f0bb 	.word	0x0800f0bb
 800eee8:	0800f0bb 	.word	0x0800f0bb
 800eeec:	0800f0bb 	.word	0x0800f0bb
 800eef0:	0800ef75 	.word	0x0800ef75
 800eef4:	0800f0bb 	.word	0x0800f0bb
 800eef8:	0800f0bb 	.word	0x0800f0bb
 800eefc:	0800f0bb 	.word	0x0800f0bb
 800ef00:	0800efb7 	.word	0x0800efb7
 800ef04:	0800f0bb 	.word	0x0800f0bb
 800ef08:	0800f0bb 	.word	0x0800f0bb
 800ef0c:	0800f0bb 	.word	0x0800f0bb
 800ef10:	0800eff7 	.word	0x0800eff7
 800ef14:	0800f0bb 	.word	0x0800f0bb
 800ef18:	0800f0bb 	.word	0x0800f0bb
 800ef1c:	0800f0bb 	.word	0x0800f0bb
 800ef20:	0800f039 	.word	0x0800f039
 800ef24:	0800f0bb 	.word	0x0800f0bb
 800ef28:	0800f0bb 	.word	0x0800f0bb
 800ef2c:	0800f0bb 	.word	0x0800f0bb
 800ef30:	0800f079 	.word	0x0800f079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fa86 	bl	800f44c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	699a      	ldr	r2, [r3, #24]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f042 0208 	orr.w	r2, r2, #8
 800ef4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	699a      	ldr	r2, [r3, #24]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f022 0204 	bic.w	r2, r2, #4
 800ef5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	6999      	ldr	r1, [r3, #24]
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	691a      	ldr	r2, [r3, #16]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	430a      	orrs	r2, r1
 800ef70:	619a      	str	r2, [r3, #24]
      break;
 800ef72:	e0a5      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68b9      	ldr	r1, [r7, #8]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 faf6 	bl	800f56c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	699a      	ldr	r2, [r3, #24]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	699a      	ldr	r2, [r3, #24]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6999      	ldr	r1, [r3, #24]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	021a      	lsls	r2, r3, #8
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	430a      	orrs	r2, r1
 800efb2:	619a      	str	r2, [r3, #24]
      break;
 800efb4:	e084      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68b9      	ldr	r1, [r7, #8]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fb5f 	bl	800f680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	69da      	ldr	r2, [r3, #28]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f042 0208 	orr.w	r2, r2, #8
 800efd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	69da      	ldr	r2, [r3, #28]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f022 0204 	bic.w	r2, r2, #4
 800efe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	69d9      	ldr	r1, [r3, #28]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	691a      	ldr	r2, [r3, #16]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	430a      	orrs	r2, r1
 800eff2:	61da      	str	r2, [r3, #28]
      break;
 800eff4:	e064      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68b9      	ldr	r1, [r7, #8]
 800effc:	4618      	mov	r0, r3
 800effe:	f000 fbc7 	bl	800f790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	69da      	ldr	r2, [r3, #28]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	69da      	ldr	r2, [r3, #28]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	69d9      	ldr	r1, [r3, #28]
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	021a      	lsls	r2, r3, #8
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	430a      	orrs	r2, r1
 800f034:	61da      	str	r2, [r3, #28]
      break;
 800f036:	e043      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68b9      	ldr	r1, [r7, #8]
 800f03e:	4618      	mov	r0, r3
 800f040:	f000 fc10 	bl	800f864 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f042 0208 	orr.w	r2, r2, #8
 800f052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f022 0204 	bic.w	r2, r2, #4
 800f062:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	691a      	ldr	r2, [r3, #16]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	430a      	orrs	r2, r1
 800f074:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f076:	e023      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	4618      	mov	r0, r3
 800f080:	f000 fc54 	bl	800f92c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f092:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	021a      	lsls	r2, r3, #8
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	430a      	orrs	r2, r1
 800f0b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f0b8:	e002      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800f0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop

0800f0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d101      	bne.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	e0dc      	b.n	800f2aa <HAL_TIM_ConfigClockSource+0x1d6>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2202      	movs	r2, #2
 800f0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	4b6a      	ldr	r3, [pc, #424]	; (800f2b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f10c:	4013      	ands	r3, r2
 800f10e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a64      	ldr	r2, [pc, #400]	; (800f2b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f126:	4293      	cmp	r3, r2
 800f128:	f000 80a9 	beq.w	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f12c:	4a62      	ldr	r2, [pc, #392]	; (800f2b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	f200 80ae 	bhi.w	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f134:	4a61      	ldr	r2, [pc, #388]	; (800f2bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800f136:	4293      	cmp	r3, r2
 800f138:	f000 80a1 	beq.w	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f13c:	4a5f      	ldr	r2, [pc, #380]	; (800f2bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	f200 80a6 	bhi.w	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f144:	4a5e      	ldr	r2, [pc, #376]	; (800f2c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f146:	4293      	cmp	r3, r2
 800f148:	f000 8099 	beq.w	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f14c:	4a5c      	ldr	r2, [pc, #368]	; (800f2c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	f200 809e 	bhi.w	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f158:	f000 8091 	beq.w	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f15c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f160:	f200 8096 	bhi.w	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f168:	f000 8089 	beq.w	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f16c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f170:	f200 808e 	bhi.w	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f178:	d03e      	beq.n	800f1f8 <HAL_TIM_ConfigClockSource+0x124>
 800f17a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f17e:	f200 8087 	bhi.w	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f186:	f000 8086 	beq.w	800f296 <HAL_TIM_ConfigClockSource+0x1c2>
 800f18a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f18e:	d87f      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f190:	2b70      	cmp	r3, #112	; 0x70
 800f192:	d01a      	beq.n	800f1ca <HAL_TIM_ConfigClockSource+0xf6>
 800f194:	2b70      	cmp	r3, #112	; 0x70
 800f196:	d87b      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f198:	2b60      	cmp	r3, #96	; 0x60
 800f19a:	d050      	beq.n	800f23e <HAL_TIM_ConfigClockSource+0x16a>
 800f19c:	2b60      	cmp	r3, #96	; 0x60
 800f19e:	d877      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1a0:	2b50      	cmp	r3, #80	; 0x50
 800f1a2:	d03c      	beq.n	800f21e <HAL_TIM_ConfigClockSource+0x14a>
 800f1a4:	2b50      	cmp	r3, #80	; 0x50
 800f1a6:	d873      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1a8:	2b40      	cmp	r3, #64	; 0x40
 800f1aa:	d058      	beq.n	800f25e <HAL_TIM_ConfigClockSource+0x18a>
 800f1ac:	2b40      	cmp	r3, #64	; 0x40
 800f1ae:	d86f      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1b0:	2b30      	cmp	r3, #48	; 0x30
 800f1b2:	d064      	beq.n	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f1b4:	2b30      	cmp	r3, #48	; 0x30
 800f1b6:	d86b      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1b8:	2b20      	cmp	r3, #32
 800f1ba:	d060      	beq.n	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f1bc:	2b20      	cmp	r3, #32
 800f1be:	d867      	bhi.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d05c      	beq.n	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f1c4:	2b10      	cmp	r3, #16
 800f1c6:	d05a      	beq.n	800f27e <HAL_TIM_ConfigClockSource+0x1aa>
 800f1c8:	e062      	b.n	800f290 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	6899      	ldr	r1, [r3, #8]
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	685a      	ldr	r2, [r3, #4]
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	f000 fc8b 	bl	800faf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f1ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	609a      	str	r2, [r3, #8]
      break;
 800f1f6:	e04f      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6818      	ldr	r0, [r3, #0]
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	6899      	ldr	r1, [r3, #8]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	f000 fc74 	bl	800faf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	689a      	ldr	r2, [r3, #8]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f21a:	609a      	str	r2, [r3, #8]
      break;
 800f21c:	e03c      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6818      	ldr	r0, [r3, #0]
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	6859      	ldr	r1, [r3, #4]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	461a      	mov	r2, r3
 800f22c:	f000 fbe4 	bl	800f9f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2150      	movs	r1, #80	; 0x50
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fc3e 	bl	800fab8 <TIM_ITRx_SetConfig>
      break;
 800f23c:	e02c      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6818      	ldr	r0, [r3, #0]
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	6859      	ldr	r1, [r3, #4]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	461a      	mov	r2, r3
 800f24c:	f000 fc03 	bl	800fa56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2160      	movs	r1, #96	; 0x60
 800f256:	4618      	mov	r0, r3
 800f258:	f000 fc2e 	bl	800fab8 <TIM_ITRx_SetConfig>
      break;
 800f25c:	e01c      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6818      	ldr	r0, [r3, #0]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	6859      	ldr	r1, [r3, #4]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	461a      	mov	r2, r3
 800f26c:	f000 fbc4 	bl	800f9f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2140      	movs	r1, #64	; 0x40
 800f276:	4618      	mov	r0, r3
 800f278:	f000 fc1e 	bl	800fab8 <TIM_ITRx_SetConfig>
      break;
 800f27c:	e00c      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4619      	mov	r1, r3
 800f288:	4610      	mov	r0, r2
 800f28a:	f000 fc15 	bl	800fab8 <TIM_ITRx_SetConfig>
      break;
 800f28e:	e003      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f290:	2301      	movs	r3, #1
 800f292:	73fb      	strb	r3, [r7, #15]
      break;
 800f294:	e000      	b.n	800f298 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	ffceff88 	.word	0xffceff88
 800f2b8:	00100040 	.word	0x00100040
 800f2bc:	00100030 	.word	0x00100030
 800f2c0:	00100020 	.word	0x00100020

0800f2c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f300:	b480      	push	{r7}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a46      	ldr	r2, [pc, #280]	; (800f42c <TIM_Base_SetConfig+0x12c>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d013      	beq.n	800f340 <TIM_Base_SetConfig+0x40>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f31e:	d00f      	beq.n	800f340 <TIM_Base_SetConfig+0x40>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a43      	ldr	r2, [pc, #268]	; (800f430 <TIM_Base_SetConfig+0x130>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d00b      	beq.n	800f340 <TIM_Base_SetConfig+0x40>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a42      	ldr	r2, [pc, #264]	; (800f434 <TIM_Base_SetConfig+0x134>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d007      	beq.n	800f340 <TIM_Base_SetConfig+0x40>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4a41      	ldr	r2, [pc, #260]	; (800f438 <TIM_Base_SetConfig+0x138>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d003      	beq.n	800f340 <TIM_Base_SetConfig+0x40>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a40      	ldr	r2, [pc, #256]	; (800f43c <TIM_Base_SetConfig+0x13c>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d108      	bne.n	800f352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	4313      	orrs	r3, r2
 800f350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a35      	ldr	r2, [pc, #212]	; (800f42c <TIM_Base_SetConfig+0x12c>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d01f      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f360:	d01b      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a32      	ldr	r2, [pc, #200]	; (800f430 <TIM_Base_SetConfig+0x130>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d017      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a31      	ldr	r2, [pc, #196]	; (800f434 <TIM_Base_SetConfig+0x134>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d013      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a30      	ldr	r2, [pc, #192]	; (800f438 <TIM_Base_SetConfig+0x138>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d00f      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a2f      	ldr	r2, [pc, #188]	; (800f43c <TIM_Base_SetConfig+0x13c>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d00b      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a2e      	ldr	r2, [pc, #184]	; (800f440 <TIM_Base_SetConfig+0x140>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d007      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a2d      	ldr	r2, [pc, #180]	; (800f444 <TIM_Base_SetConfig+0x144>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d003      	beq.n	800f39a <TIM_Base_SetConfig+0x9a>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a2c      	ldr	r2, [pc, #176]	; (800f448 <TIM_Base_SetConfig+0x148>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d108      	bne.n	800f3ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	695b      	ldr	r3, [r3, #20]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	689a      	ldr	r2, [r3, #8]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a16      	ldr	r2, [pc, #88]	; (800f42c <TIM_Base_SetConfig+0x12c>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d00f      	beq.n	800f3f8 <TIM_Base_SetConfig+0xf8>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a18      	ldr	r2, [pc, #96]	; (800f43c <TIM_Base_SetConfig+0x13c>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d00b      	beq.n	800f3f8 <TIM_Base_SetConfig+0xf8>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a17      	ldr	r2, [pc, #92]	; (800f440 <TIM_Base_SetConfig+0x140>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d007      	beq.n	800f3f8 <TIM_Base_SetConfig+0xf8>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a16      	ldr	r2, [pc, #88]	; (800f444 <TIM_Base_SetConfig+0x144>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d003      	beq.n	800f3f8 <TIM_Base_SetConfig+0xf8>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a15      	ldr	r2, [pc, #84]	; (800f448 <TIM_Base_SetConfig+0x148>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d103      	bne.n	800f400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	691a      	ldr	r2, [r3, #16]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d105      	bne.n	800f41e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	691b      	ldr	r3, [r3, #16]
 800f416:	f023 0201 	bic.w	r2, r3, #1
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	611a      	str	r2, [r3, #16]
  }
}
 800f41e:	bf00      	nop
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	40010000 	.word	0x40010000
 800f430:	40000400 	.word	0x40000400
 800f434:	40000800 	.word	0x40000800
 800f438:	40000c00 	.word	0x40000c00
 800f43c:	40010400 	.word	0x40010400
 800f440:	40014000 	.word	0x40014000
 800f444:	40014400 	.word	0x40014400
 800f448:	40014800 	.word	0x40014800

0800f44c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b087      	sub	sp, #28
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a1b      	ldr	r3, [r3, #32]
 800f460:	f023 0201 	bic.w	r2, r3, #1
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	699b      	ldr	r3, [r3, #24]
 800f472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	4b37      	ldr	r3, [pc, #220]	; (800f554 <TIM_OC1_SetConfig+0x108>)
 800f478:	4013      	ands	r3, r2
 800f47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f023 0303 	bic.w	r3, r3, #3
 800f482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	4313      	orrs	r3, r2
 800f48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	f023 0302 	bic.w	r3, r3, #2
 800f494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	4313      	orrs	r3, r2
 800f49e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a2d      	ldr	r2, [pc, #180]	; (800f558 <TIM_OC1_SetConfig+0x10c>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d00f      	beq.n	800f4c8 <TIM_OC1_SetConfig+0x7c>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a2c      	ldr	r2, [pc, #176]	; (800f55c <TIM_OC1_SetConfig+0x110>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d00b      	beq.n	800f4c8 <TIM_OC1_SetConfig+0x7c>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a2b      	ldr	r2, [pc, #172]	; (800f560 <TIM_OC1_SetConfig+0x114>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d007      	beq.n	800f4c8 <TIM_OC1_SetConfig+0x7c>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a2a      	ldr	r2, [pc, #168]	; (800f564 <TIM_OC1_SetConfig+0x118>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d003      	beq.n	800f4c8 <TIM_OC1_SetConfig+0x7c>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a29      	ldr	r2, [pc, #164]	; (800f568 <TIM_OC1_SetConfig+0x11c>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d10c      	bne.n	800f4e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f023 0308 	bic.w	r3, r3, #8
 800f4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	f023 0304 	bic.w	r3, r3, #4
 800f4e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a1c      	ldr	r2, [pc, #112]	; (800f558 <TIM_OC1_SetConfig+0x10c>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d00f      	beq.n	800f50a <TIM_OC1_SetConfig+0xbe>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a1b      	ldr	r2, [pc, #108]	; (800f55c <TIM_OC1_SetConfig+0x110>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d00b      	beq.n	800f50a <TIM_OC1_SetConfig+0xbe>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a1a      	ldr	r2, [pc, #104]	; (800f560 <TIM_OC1_SetConfig+0x114>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d007      	beq.n	800f50a <TIM_OC1_SetConfig+0xbe>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a19      	ldr	r2, [pc, #100]	; (800f564 <TIM_OC1_SetConfig+0x118>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d003      	beq.n	800f50a <TIM_OC1_SetConfig+0xbe>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a18      	ldr	r2, [pc, #96]	; (800f568 <TIM_OC1_SetConfig+0x11c>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d111      	bne.n	800f52e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	4313      	orrs	r3, r2
 800f522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	685a      	ldr	r2, [r3, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	697a      	ldr	r2, [r7, #20]
 800f546:	621a      	str	r2, [r3, #32]
}
 800f548:	bf00      	nop
 800f54a:	371c      	adds	r7, #28
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr
 800f554:	fffeff8f 	.word	0xfffeff8f
 800f558:	40010000 	.word	0x40010000
 800f55c:	40010400 	.word	0x40010400
 800f560:	40014000 	.word	0x40014000
 800f564:	40014400 	.word	0x40014400
 800f568:	40014800 	.word	0x40014800

0800f56c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b087      	sub	sp, #28
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a1b      	ldr	r3, [r3, #32]
 800f580:	f023 0210 	bic.w	r2, r3, #16
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	699b      	ldr	r3, [r3, #24]
 800f592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	4b34      	ldr	r3, [pc, #208]	; (800f668 <TIM_OC2_SetConfig+0xfc>)
 800f598:	4013      	ands	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	021b      	lsls	r3, r3, #8
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	f023 0320 	bic.w	r3, r3, #32
 800f5b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	011b      	lsls	r3, r3, #4
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a29      	ldr	r2, [pc, #164]	; (800f66c <TIM_OC2_SetConfig+0x100>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d003      	beq.n	800f5d4 <TIM_OC2_SetConfig+0x68>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a28      	ldr	r2, [pc, #160]	; (800f670 <TIM_OC2_SetConfig+0x104>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d10d      	bne.n	800f5f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	011b      	lsls	r3, r3, #4
 800f5e2:	697a      	ldr	r2, [r7, #20]
 800f5e4:	4313      	orrs	r3, r2
 800f5e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4a1e      	ldr	r2, [pc, #120]	; (800f66c <TIM_OC2_SetConfig+0x100>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d00f      	beq.n	800f618 <TIM_OC2_SetConfig+0xac>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a1d      	ldr	r2, [pc, #116]	; (800f670 <TIM_OC2_SetConfig+0x104>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d00b      	beq.n	800f618 <TIM_OC2_SetConfig+0xac>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4a1c      	ldr	r2, [pc, #112]	; (800f674 <TIM_OC2_SetConfig+0x108>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d007      	beq.n	800f618 <TIM_OC2_SetConfig+0xac>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a1b      	ldr	r2, [pc, #108]	; (800f678 <TIM_OC2_SetConfig+0x10c>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d003      	beq.n	800f618 <TIM_OC2_SetConfig+0xac>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a1a      	ldr	r2, [pc, #104]	; (800f67c <TIM_OC2_SetConfig+0x110>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d113      	bne.n	800f640 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f61e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	695b      	ldr	r3, [r3, #20]
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	4313      	orrs	r3, r2
 800f632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	699b      	ldr	r3, [r3, #24]
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	693a      	ldr	r2, [r7, #16]
 800f644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	685a      	ldr	r2, [r3, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	621a      	str	r2, [r3, #32]
}
 800f65a:	bf00      	nop
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	feff8fff 	.word	0xfeff8fff
 800f66c:	40010000 	.word	0x40010000
 800f670:	40010400 	.word	0x40010400
 800f674:	40014000 	.word	0x40014000
 800f678:	40014400 	.word	0x40014400
 800f67c:	40014800 	.word	0x40014800

0800f680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f680:	b480      	push	{r7}
 800f682:	b087      	sub	sp, #28
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a1b      	ldr	r3, [r3, #32]
 800f68e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a1b      	ldr	r3, [r3, #32]
 800f694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	69db      	ldr	r3, [r3, #28]
 800f6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	4b33      	ldr	r3, [pc, #204]	; (800f778 <TIM_OC3_SetConfig+0xf8>)
 800f6ac:	4013      	ands	r3, r2
 800f6ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f023 0303 	bic.w	r3, r3, #3
 800f6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	021b      	lsls	r3, r3, #8
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a28      	ldr	r2, [pc, #160]	; (800f77c <TIM_OC3_SetConfig+0xfc>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d003      	beq.n	800f6e6 <TIM_OC3_SetConfig+0x66>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a27      	ldr	r2, [pc, #156]	; (800f780 <TIM_OC3_SetConfig+0x100>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d10d      	bne.n	800f702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	021b      	lsls	r3, r3, #8
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4a1d      	ldr	r2, [pc, #116]	; (800f77c <TIM_OC3_SetConfig+0xfc>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d00f      	beq.n	800f72a <TIM_OC3_SetConfig+0xaa>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4a1c      	ldr	r2, [pc, #112]	; (800f780 <TIM_OC3_SetConfig+0x100>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d00b      	beq.n	800f72a <TIM_OC3_SetConfig+0xaa>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4a1b      	ldr	r2, [pc, #108]	; (800f784 <TIM_OC3_SetConfig+0x104>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d007      	beq.n	800f72a <TIM_OC3_SetConfig+0xaa>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a1a      	ldr	r2, [pc, #104]	; (800f788 <TIM_OC3_SetConfig+0x108>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d003      	beq.n	800f72a <TIM_OC3_SetConfig+0xaa>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a19      	ldr	r2, [pc, #100]	; (800f78c <TIM_OC3_SetConfig+0x10c>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d113      	bne.n	800f752 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	695b      	ldr	r3, [r3, #20]
 800f73e:	011b      	lsls	r3, r3, #4
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	4313      	orrs	r3, r2
 800f744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	699b      	ldr	r3, [r3, #24]
 800f74a:	011b      	lsls	r3, r3, #4
 800f74c:	693a      	ldr	r2, [r7, #16]
 800f74e:	4313      	orrs	r3, r2
 800f750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	693a      	ldr	r2, [r7, #16]
 800f756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	697a      	ldr	r2, [r7, #20]
 800f76a:	621a      	str	r2, [r3, #32]
}
 800f76c:	bf00      	nop
 800f76e:	371c      	adds	r7, #28
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr
 800f778:	fffeff8f 	.word	0xfffeff8f
 800f77c:	40010000 	.word	0x40010000
 800f780:	40010400 	.word	0x40010400
 800f784:	40014000 	.word	0x40014000
 800f788:	40014400 	.word	0x40014400
 800f78c:	40014800 	.word	0x40014800

0800f790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a1b      	ldr	r3, [r3, #32]
 800f7a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	69db      	ldr	r3, [r3, #28]
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	4b24      	ldr	r3, [pc, #144]	; (800f84c <TIM_OC4_SetConfig+0xbc>)
 800f7bc:	4013      	ands	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	021b      	lsls	r3, r3, #8
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	031b      	lsls	r3, r3, #12
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a19      	ldr	r2, [pc, #100]	; (800f850 <TIM_OC4_SetConfig+0xc0>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d00f      	beq.n	800f810 <TIM_OC4_SetConfig+0x80>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a18      	ldr	r2, [pc, #96]	; (800f854 <TIM_OC4_SetConfig+0xc4>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d00b      	beq.n	800f810 <TIM_OC4_SetConfig+0x80>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a17      	ldr	r2, [pc, #92]	; (800f858 <TIM_OC4_SetConfig+0xc8>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d007      	beq.n	800f810 <TIM_OC4_SetConfig+0x80>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a16      	ldr	r2, [pc, #88]	; (800f85c <TIM_OC4_SetConfig+0xcc>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d003      	beq.n	800f810 <TIM_OC4_SetConfig+0x80>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4a15      	ldr	r2, [pc, #84]	; (800f860 <TIM_OC4_SetConfig+0xd0>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d109      	bne.n	800f824 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	695b      	ldr	r3, [r3, #20]
 800f81c:	019b      	lsls	r3, r3, #6
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	4313      	orrs	r3, r2
 800f822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	697a      	ldr	r2, [r7, #20]
 800f828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	621a      	str	r2, [r3, #32]
}
 800f83e:	bf00      	nop
 800f840:	371c      	adds	r7, #28
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop
 800f84c:	feff8fff 	.word	0xfeff8fff
 800f850:	40010000 	.word	0x40010000
 800f854:	40010400 	.word	0x40010400
 800f858:	40014000 	.word	0x40014000
 800f85c:	40014400 	.word	0x40014400
 800f860:	40014800 	.word	0x40014800

0800f864 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f864:	b480      	push	{r7}
 800f866:	b087      	sub	sp, #28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6a1b      	ldr	r3, [r3, #32]
 800f872:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6a1b      	ldr	r3, [r3, #32]
 800f878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	4b21      	ldr	r3, [pc, #132]	; (800f914 <TIM_OC5_SetConfig+0xb0>)
 800f890:	4013      	ands	r3, r2
 800f892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f8a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	041b      	lsls	r3, r3, #16
 800f8ac:	693a      	ldr	r2, [r7, #16]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4a18      	ldr	r2, [pc, #96]	; (800f918 <TIM_OC5_SetConfig+0xb4>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d00f      	beq.n	800f8da <TIM_OC5_SetConfig+0x76>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a17      	ldr	r2, [pc, #92]	; (800f91c <TIM_OC5_SetConfig+0xb8>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d00b      	beq.n	800f8da <TIM_OC5_SetConfig+0x76>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a16      	ldr	r2, [pc, #88]	; (800f920 <TIM_OC5_SetConfig+0xbc>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d007      	beq.n	800f8da <TIM_OC5_SetConfig+0x76>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a15      	ldr	r2, [pc, #84]	; (800f924 <TIM_OC5_SetConfig+0xc0>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d003      	beq.n	800f8da <TIM_OC5_SetConfig+0x76>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a14      	ldr	r2, [pc, #80]	; (800f928 <TIM_OC5_SetConfig+0xc4>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d109      	bne.n	800f8ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	695b      	ldr	r3, [r3, #20]
 800f8e6:	021b      	lsls	r3, r3, #8
 800f8e8:	697a      	ldr	r2, [r7, #20]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	693a      	ldr	r2, [r7, #16]
 800f906:	621a      	str	r2, [r3, #32]
}
 800f908:	bf00      	nop
 800f90a:	371c      	adds	r7, #28
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	fffeff8f 	.word	0xfffeff8f
 800f918:	40010000 	.word	0x40010000
 800f91c:	40010400 	.word	0x40010400
 800f920:	40014000 	.word	0x40014000
 800f924:	40014400 	.word	0x40014400
 800f928:	40014800 	.word	0x40014800

0800f92c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b087      	sub	sp, #28
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a1b      	ldr	r3, [r3, #32]
 800f940:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	4b22      	ldr	r3, [pc, #136]	; (800f9e0 <TIM_OC6_SetConfig+0xb4>)
 800f958:	4013      	ands	r3, r2
 800f95a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	021b      	lsls	r3, r3, #8
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	4313      	orrs	r3, r2
 800f966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f96e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	051b      	lsls	r3, r3, #20
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	4313      	orrs	r3, r2
 800f97a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a19      	ldr	r2, [pc, #100]	; (800f9e4 <TIM_OC6_SetConfig+0xb8>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d00f      	beq.n	800f9a4 <TIM_OC6_SetConfig+0x78>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a18      	ldr	r2, [pc, #96]	; (800f9e8 <TIM_OC6_SetConfig+0xbc>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d00b      	beq.n	800f9a4 <TIM_OC6_SetConfig+0x78>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a17      	ldr	r2, [pc, #92]	; (800f9ec <TIM_OC6_SetConfig+0xc0>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d007      	beq.n	800f9a4 <TIM_OC6_SetConfig+0x78>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a16      	ldr	r2, [pc, #88]	; (800f9f0 <TIM_OC6_SetConfig+0xc4>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d003      	beq.n	800f9a4 <TIM_OC6_SetConfig+0x78>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a15      	ldr	r2, [pc, #84]	; (800f9f4 <TIM_OC6_SetConfig+0xc8>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d109      	bne.n	800f9b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	695b      	ldr	r3, [r3, #20]
 800f9b0:	029b      	lsls	r3, r3, #10
 800f9b2:	697a      	ldr	r2, [r7, #20]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	68fa      	ldr	r2, [r7, #12]
 800f9c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	685a      	ldr	r2, [r3, #4]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	693a      	ldr	r2, [r7, #16]
 800f9d0:	621a      	str	r2, [r3, #32]
}
 800f9d2:	bf00      	nop
 800f9d4:	371c      	adds	r7, #28
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	feff8fff 	.word	0xfeff8fff
 800f9e4:	40010000 	.word	0x40010000
 800f9e8:	40010400 	.word	0x40010400
 800f9ec:	40014000 	.word	0x40014000
 800f9f0:	40014400 	.word	0x40014400
 800f9f4:	40014800 	.word	0x40014800

0800f9f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6a1b      	ldr	r3, [r3, #32]
 800fa08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	6a1b      	ldr	r3, [r3, #32]
 800fa0e:	f023 0201 	bic.w	r2, r3, #1
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	699b      	ldr	r3, [r3, #24]
 800fa1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	011b      	lsls	r3, r3, #4
 800fa28:	693a      	ldr	r2, [r7, #16]
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f023 030a 	bic.w	r3, r3, #10
 800fa34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	693a      	ldr	r2, [r7, #16]
 800fa42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	621a      	str	r2, [r3, #32]
}
 800fa4a:	bf00      	nop
 800fa4c:	371c      	adds	r7, #28
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa56:	b480      	push	{r7}
 800fa58:	b087      	sub	sp, #28
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	60f8      	str	r0, [r7, #12]
 800fa5e:	60b9      	str	r1, [r7, #8]
 800fa60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	f023 0210 	bic.w	r2, r3, #16
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	699b      	ldr	r3, [r3, #24]
 800fa78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	031b      	lsls	r3, r3, #12
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fa92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	011b      	lsls	r3, r3, #4
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	697a      	ldr	r2, [r7, #20]
 800faa8:	621a      	str	r2, [r3, #32]
}
 800faaa:	bf00      	nop
 800faac:	371c      	adds	r7, #28
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
	...

0800fab8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fac8:	68fa      	ldr	r2, [r7, #12]
 800faca:	4b09      	ldr	r3, [pc, #36]	; (800faf0 <TIM_ITRx_SetConfig+0x38>)
 800facc:	4013      	ands	r3, r2
 800face:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fad0:	683a      	ldr	r2, [r7, #0]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	f043 0307 	orr.w	r3, r3, #7
 800fada:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	609a      	str	r2, [r3, #8]
}
 800fae2:	bf00      	nop
 800fae4:	3714      	adds	r7, #20
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	ffcfff8f 	.word	0xffcfff8f

0800faf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b087      	sub	sp, #28
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
 800fb00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	021a      	lsls	r2, r3, #8
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	431a      	orrs	r2, r3
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	697a      	ldr	r2, [r7, #20]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	697a      	ldr	r2, [r7, #20]
 800fb26:	609a      	str	r2, [r3, #8]
}
 800fb28:	bf00      	nop
 800fb2a:	371c      	adds	r7, #28
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b087      	sub	sp, #28
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	f003 031f 	and.w	r3, r3, #31
 800fb46:	2201      	movs	r2, #1
 800fb48:	fa02 f303 	lsl.w	r3, r2, r3
 800fb4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6a1a      	ldr	r2, [r3, #32]
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	43db      	mvns	r3, r3
 800fb56:	401a      	ands	r2, r3
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6a1a      	ldr	r2, [r3, #32]
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	f003 031f 	and.w	r3, r3, #31
 800fb66:	6879      	ldr	r1, [r7, #4]
 800fb68:	fa01 f303 	lsl.w	r3, r1, r3
 800fb6c:	431a      	orrs	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	621a      	str	r2, [r3, #32]
}
 800fb72:	bf00      	nop
 800fb74:	371c      	adds	r7, #28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
	...

0800fb80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d101      	bne.n	800fb98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb94:	2302      	movs	r3, #2
 800fb96:	e06d      	b.n	800fc74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2202      	movs	r2, #2
 800fba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4a30      	ldr	r2, [pc, #192]	; (800fc80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d004      	beq.n	800fbcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a2f      	ldr	r2, [pc, #188]	; (800fc84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d108      	bne.n	800fbde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fbd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a20      	ldr	r2, [pc, #128]	; (800fc80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d022      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc0a:	d01d      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a1d      	ldr	r2, [pc, #116]	; (800fc88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d018      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a1c      	ldr	r2, [pc, #112]	; (800fc8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d013      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a1a      	ldr	r2, [pc, #104]	; (800fc90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d00e      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4a15      	ldr	r2, [pc, #84]	; (800fc84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d009      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a16      	ldr	r2, [pc, #88]	; (800fc94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d004      	beq.n	800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4a15      	ldr	r2, [pc, #84]	; (800fc98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc44:	4293      	cmp	r3, r2
 800fc46:	d10c      	bne.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	4313      	orrs	r3, r2
 800fc58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	68ba      	ldr	r2, [r7, #8]
 800fc60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2201      	movs	r2, #1
 800fc66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc72:	2300      	movs	r3, #0
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3714      	adds	r7, #20
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr
 800fc80:	40010000 	.word	0x40010000
 800fc84:	40010400 	.word	0x40010400
 800fc88:	40000400 	.word	0x40000400
 800fc8c:	40000800 	.word	0x40000800
 800fc90:	40000c00 	.word	0x40000c00
 800fc94:	40001800 	.word	0x40001800
 800fc98:	40014000 	.word	0x40014000

0800fc9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fca6:	2300      	movs	r3, #0
 800fca8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d101      	bne.n	800fcb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	e065      	b.n	800fd84 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	4313      	orrs	r3, r2
 800fccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	695b      	ldr	r3, [r3, #20]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	699b      	ldr	r3, [r3, #24]
 800fd2c:	041b      	lsls	r3, r3, #16
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4a16      	ldr	r2, [pc, #88]	; (800fd90 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d004      	beq.n	800fd46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a14      	ldr	r2, [pc, #80]	; (800fd94 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d115      	bne.n	800fd72 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd50:	051b      	lsls	r3, r3, #20
 800fd52:	4313      	orrs	r3, r2
 800fd54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	69db      	ldr	r3, [r3, #28]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	6a1b      	ldr	r3, [r3, #32]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3714      	adds	r7, #20
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr
 800fd90:	40010000 	.word	0x40010000
 800fd94:	40010400 	.word	0x40010400

0800fd98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fdb4:	bf00      	nop
 800fdb6:	370c      	adds	r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fdc8:	bf00      	nop
 800fdca:	370c      	adds	r7, #12
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d101      	bne.n	800fde6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e042      	b.n	800fe6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d106      	bne.n	800fdfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7f3 fc03 	bl	8003604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2224      	movs	r2, #36	; 0x24
 800fe02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f022 0201 	bic.w	r2, r2, #1
 800fe14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d002      	beq.n	800fe24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f001 fb8c 	bl	801153c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 fe21 	bl	8010a6c <UART_SetConfig>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d101      	bne.n	800fe34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fe30:	2301      	movs	r3, #1
 800fe32:	e01b      	b.n	800fe6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	685a      	ldr	r2, [r3, #4]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	689a      	ldr	r2, [r3, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f042 0201 	orr.w	r2, r2, #1
 800fe62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f001 fc0b 	bl	8011680 <UART_CheckIdleState>
 800fe6a:	4603      	mov	r3, r0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08a      	sub	sp, #40	; 0x28
 800fe78:	af02      	add	r7, sp, #8
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	4613      	mov	r3, r2
 800fe82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe8a:	2b20      	cmp	r3, #32
 800fe8c:	d17b      	bne.n	800ff86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d002      	beq.n	800fe9a <HAL_UART_Transmit+0x26>
 800fe94:	88fb      	ldrh	r3, [r7, #6]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d101      	bne.n	800fe9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	e074      	b.n	800ff88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2221      	movs	r2, #33	; 0x21
 800feaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800feae:	f7f3 ff27 	bl	8003d00 <HAL_GetTick>
 800feb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	88fa      	ldrh	r2, [r7, #6]
 800feb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	88fa      	ldrh	r2, [r7, #6]
 800fec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fecc:	d108      	bne.n	800fee0 <HAL_UART_Transmit+0x6c>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	691b      	ldr	r3, [r3, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d104      	bne.n	800fee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fed6:	2300      	movs	r3, #0
 800fed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	61bb      	str	r3, [r7, #24]
 800fede:	e003      	b.n	800fee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fee4:	2300      	movs	r3, #0
 800fee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fee8:	e030      	b.n	800ff4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	2200      	movs	r2, #0
 800fef2:	2180      	movs	r1, #128	; 0x80
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f001 fc6d 	bl	80117d4 <UART_WaitOnFlagUntilTimeout>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d005      	beq.n	800ff0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2220      	movs	r2, #32
 800ff04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	e03d      	b.n	800ff88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10b      	bne.n	800ff2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	461a      	mov	r2, r3
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	3302      	adds	r3, #2
 800ff26:	61bb      	str	r3, [r7, #24]
 800ff28:	e007      	b.n	800ff3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	781a      	ldrb	r2, [r3, #0]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	3301      	adds	r3, #1
 800ff38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	3b01      	subs	r3, #1
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1c8      	bne.n	800feea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2140      	movs	r1, #64	; 0x40
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f001 fc36 	bl	80117d4 <UART_WaitOnFlagUntilTimeout>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d005      	beq.n	800ff7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2220      	movs	r2, #32
 800ff72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ff76:	2303      	movs	r3, #3
 800ff78:	e006      	b.n	800ff88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2220      	movs	r2, #32
 800ff7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ff82:	2300      	movs	r3, #0
 800ff84:	e000      	b.n	800ff88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ff86:	2302      	movs	r3, #2
  }
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3720      	adds	r7, #32
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b08a      	sub	sp, #40	; 0x28
 800ff94:	af02      	add	r7, sp, #8
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffa6:	2b20      	cmp	r3, #32
 800ffa8:	f040 80b5 	bne.w	8010116 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d002      	beq.n	800ffb8 <HAL_UART_Receive+0x28>
 800ffb2:	88fb      	ldrh	r3, [r7, #6]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d101      	bne.n	800ffbc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e0ad      	b.n	8010118 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2222      	movs	r2, #34	; 0x22
 800ffc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffd2:	f7f3 fe95 	bl	8003d00 <HAL_GetTick>
 800ffd6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	88fa      	ldrh	r2, [r7, #6]
 800ffdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	88fa      	ldrh	r2, [r7, #6]
 800ffe4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fff0:	d10e      	bne.n	8010010 <HAL_UART_Receive+0x80>
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	691b      	ldr	r3, [r3, #16]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d105      	bne.n	8010006 <HAL_UART_Receive+0x76>
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010004:	e02d      	b.n	8010062 <HAL_UART_Receive+0xd2>
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	22ff      	movs	r2, #255	; 0xff
 801000a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801000e:	e028      	b.n	8010062 <HAL_UART_Receive+0xd2>
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10d      	bne.n	8010034 <HAL_UART_Receive+0xa4>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	691b      	ldr	r3, [r3, #16]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d104      	bne.n	801002a <HAL_UART_Receive+0x9a>
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	22ff      	movs	r2, #255	; 0xff
 8010024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010028:	e01b      	b.n	8010062 <HAL_UART_Receive+0xd2>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	227f      	movs	r2, #127	; 0x7f
 801002e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010032:	e016      	b.n	8010062 <HAL_UART_Receive+0xd2>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801003c:	d10d      	bne.n	801005a <HAL_UART_Receive+0xca>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d104      	bne.n	8010050 <HAL_UART_Receive+0xc0>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	227f      	movs	r2, #127	; 0x7f
 801004a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801004e:	e008      	b.n	8010062 <HAL_UART_Receive+0xd2>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	223f      	movs	r2, #63	; 0x3f
 8010054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010058:	e003      	b.n	8010062 <HAL_UART_Receive+0xd2>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2200      	movs	r2, #0
 801005e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010068:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010072:	d108      	bne.n	8010086 <HAL_UART_Receive+0xf6>
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d104      	bne.n	8010086 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801007c:	2300      	movs	r3, #0
 801007e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	61bb      	str	r3, [r7, #24]
 8010084:	e003      	b.n	801008e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801008a:	2300      	movs	r3, #0
 801008c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801008e:	e036      	b.n	80100fe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2200      	movs	r2, #0
 8010098:	2120      	movs	r1, #32
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f001 fb9a 	bl	80117d4 <UART_WaitOnFlagUntilTimeout>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d005      	beq.n	80100b2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2220      	movs	r2, #32
 80100aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80100ae:	2303      	movs	r3, #3
 80100b0:	e032      	b.n	8010118 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d10c      	bne.n	80100d2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100be:	b29a      	uxth	r2, r3
 80100c0:	8a7b      	ldrh	r3, [r7, #18]
 80100c2:	4013      	ands	r3, r2
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	3302      	adds	r3, #2
 80100ce:	61bb      	str	r3, [r7, #24]
 80100d0:	e00c      	b.n	80100ec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d8:	b2da      	uxtb	r2, r3
 80100da:	8a7b      	ldrh	r3, [r7, #18]
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	4013      	ands	r3, r2
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	3301      	adds	r3, #1
 80100ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	3b01      	subs	r3, #1
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010104:	b29b      	uxth	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1c2      	bne.n	8010090 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2220      	movs	r2, #32
 801010e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010112:	2300      	movs	r3, #0
 8010114:	e000      	b.n	8010118 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010116:	2302      	movs	r3, #2
  }
}
 8010118:	4618      	mov	r0, r3
 801011a:	3720      	adds	r7, #32
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b08a      	sub	sp, #40	; 0x28
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	4613      	mov	r3, r2
 801012c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010134:	2b20      	cmp	r3, #32
 8010136:	d137      	bne.n	80101a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <HAL_UART_Receive_IT+0x24>
 801013e:	88fb      	ldrh	r3, [r7, #6]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d101      	bne.n	8010148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010144:	2301      	movs	r3, #1
 8010146:	e030      	b.n	80101aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2200      	movs	r2, #0
 801014c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4a18      	ldr	r2, [pc, #96]	; (80101b4 <HAL_UART_Receive_IT+0x94>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d01f      	beq.n	8010198 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010162:	2b00      	cmp	r3, #0
 8010164:	d018      	beq.n	8010198 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	e853 3f00 	ldrex	r3, [r3]
 8010172:	613b      	str	r3, [r7, #16]
   return(result);
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801017a:	627b      	str	r3, [r7, #36]	; 0x24
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	461a      	mov	r2, r3
 8010182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010184:	623b      	str	r3, [r7, #32]
 8010186:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010188:	69f9      	ldr	r1, [r7, #28]
 801018a:	6a3a      	ldr	r2, [r7, #32]
 801018c:	e841 2300 	strex	r3, r2, [r1]
 8010190:	61bb      	str	r3, [r7, #24]
   return(result);
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1e6      	bne.n	8010166 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010198:	88fb      	ldrh	r3, [r7, #6]
 801019a:	461a      	mov	r2, r3
 801019c:	68b9      	ldr	r1, [r7, #8]
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f001 fb86 	bl	80118b0 <UART_Start_Receive_IT>
 80101a4:	4603      	mov	r3, r0
 80101a6:	e000      	b.n	80101aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80101a8:	2302      	movs	r3, #2
  }
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3728      	adds	r7, #40	; 0x28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	58000c00 	.word	0x58000c00

080101b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b08a      	sub	sp, #40	; 0x28
 80101bc:	af00      	add	r7, sp, #0
 80101be:	60f8      	str	r0, [r7, #12]
 80101c0:	60b9      	str	r1, [r7, #8]
 80101c2:	4613      	mov	r3, r2
 80101c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101cc:	2b20      	cmp	r3, #32
 80101ce:	d167      	bne.n	80102a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <HAL_UART_Transmit_DMA+0x24>
 80101d6:	88fb      	ldrh	r3, [r7, #6]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d101      	bne.n	80101e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80101dc:	2301      	movs	r3, #1
 80101de:	e060      	b.n	80102a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	68ba      	ldr	r2, [r7, #8]
 80101e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	88fa      	ldrh	r2, [r7, #6]
 80101ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	88fa      	ldrh	r2, [r7, #6]
 80101f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2221      	movs	r2, #33	; 0x21
 8010202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801020a:	2b00      	cmp	r3, #0
 801020c:	d028      	beq.n	8010260 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010212:	4a26      	ldr	r2, [pc, #152]	; (80102ac <HAL_UART_Transmit_DMA+0xf4>)
 8010214:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801021a:	4a25      	ldr	r2, [pc, #148]	; (80102b0 <HAL_UART_Transmit_DMA+0xf8>)
 801021c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010222:	4a24      	ldr	r2, [pc, #144]	; (80102b4 <HAL_UART_Transmit_DMA+0xfc>)
 8010224:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801022a:	2200      	movs	r2, #0
 801022c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010236:	4619      	mov	r1, r3
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	3328      	adds	r3, #40	; 0x28
 801023e:	461a      	mov	r2, r3
 8010240:	88fb      	ldrh	r3, [r7, #6]
 8010242:	f7f6 f9e1 	bl	8006608 <HAL_DMA_Start_IT>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d009      	beq.n	8010260 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2210      	movs	r2, #16
 8010250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2220      	movs	r2, #32
 8010258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801025c:	2301      	movs	r3, #1
 801025e:	e020      	b.n	80102a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2240      	movs	r2, #64	; 0x40
 8010266:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	3308      	adds	r3, #8
 801026e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	e853 3f00 	ldrex	r3, [r3]
 8010276:	613b      	str	r3, [r7, #16]
   return(result);
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801027e:	627b      	str	r3, [r7, #36]	; 0x24
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	3308      	adds	r3, #8
 8010286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010288:	623a      	str	r2, [r7, #32]
 801028a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028c:	69f9      	ldr	r1, [r7, #28]
 801028e:	6a3a      	ldr	r2, [r7, #32]
 8010290:	e841 2300 	strex	r3, r2, [r1]
 8010294:	61bb      	str	r3, [r7, #24]
   return(result);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d1e5      	bne.n	8010268 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801029c:	2300      	movs	r3, #0
 801029e:	e000      	b.n	80102a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80102a0:	2302      	movs	r3, #2
  }
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3728      	adds	r7, #40	; 0x28
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	08011c45 	.word	0x08011c45
 80102b0:	08011cdb 	.word	0x08011cdb
 80102b4:	08011cf7 	.word	0x08011cf7

080102b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b0ba      	sub	sp, #232	; 0xe8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	69db      	ldr	r3, [r3, #28]
 80102c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80102de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80102e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80102e6:	4013      	ands	r3, r2
 80102e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80102ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d11b      	bne.n	801032c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102f8:	f003 0320 	and.w	r3, r3, #32
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d015      	beq.n	801032c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010304:	f003 0320 	and.w	r3, r3, #32
 8010308:	2b00      	cmp	r3, #0
 801030a:	d105      	bne.n	8010318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801030c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010314:	2b00      	cmp	r3, #0
 8010316:	d009      	beq.n	801032c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 8377 	beq.w	8010a10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	4798      	blx	r3
      }
      return;
 801032a:	e371      	b.n	8010a10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801032c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010330:	2b00      	cmp	r3, #0
 8010332:	f000 8123 	beq.w	801057c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801033a:	4b8d      	ldr	r3, [pc, #564]	; (8010570 <HAL_UART_IRQHandler+0x2b8>)
 801033c:	4013      	ands	r3, r2
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010346:	4b8b      	ldr	r3, [pc, #556]	; (8010574 <HAL_UART_IRQHandler+0x2bc>)
 8010348:	4013      	ands	r3, r2
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 8116 	beq.w	801057c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	d011      	beq.n	8010380 <HAL_UART_IRQHandler+0xc8>
 801035c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00b      	beq.n	8010380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2201      	movs	r2, #1
 801036e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010376:	f043 0201 	orr.w	r2, r3, #1
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010384:	f003 0302 	and.w	r3, r3, #2
 8010388:	2b00      	cmp	r3, #0
 801038a:	d011      	beq.n	80103b0 <HAL_UART_IRQHandler+0xf8>
 801038c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00b      	beq.n	80103b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2202      	movs	r2, #2
 801039e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103a6:	f043 0204 	orr.w	r2, r3, #4
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80103b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103b4:	f003 0304 	and.w	r3, r3, #4
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d011      	beq.n	80103e0 <HAL_UART_IRQHandler+0x128>
 80103bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103c0:	f003 0301 	and.w	r3, r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00b      	beq.n	80103e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2204      	movs	r2, #4
 80103ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103d6:	f043 0202 	orr.w	r2, r3, #2
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80103e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103e4:	f003 0308 	and.w	r3, r3, #8
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d017      	beq.n	801041c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80103ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103f0:	f003 0320 	and.w	r3, r3, #32
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d105      	bne.n	8010404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80103f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80103fc:	4b5c      	ldr	r3, [pc, #368]	; (8010570 <HAL_UART_IRQHandler+0x2b8>)
 80103fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00b      	beq.n	801041c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2208      	movs	r2, #8
 801040a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010412:	f043 0208 	orr.w	r2, r3, #8
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801041c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010424:	2b00      	cmp	r3, #0
 8010426:	d012      	beq.n	801044e <HAL_UART_IRQHandler+0x196>
 8010428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801042c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010430:	2b00      	cmp	r3, #0
 8010432:	d00c      	beq.n	801044e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801043c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010444:	f043 0220 	orr.w	r2, r3, #32
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 82dd 	beq.w	8010a14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801045a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801045e:	f003 0320 	and.w	r3, r3, #32
 8010462:	2b00      	cmp	r3, #0
 8010464:	d013      	beq.n	801048e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801046a:	f003 0320 	and.w	r3, r3, #32
 801046e:	2b00      	cmp	r3, #0
 8010470:	d105      	bne.n	801047e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801047a:	2b00      	cmp	r3, #0
 801047c:	d007      	beq.n	801048e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a2:	2b40      	cmp	r3, #64	; 0x40
 80104a4:	d005      	beq.n	80104b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80104a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80104aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d054      	beq.n	801055c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f001 fb60 	bl	8011b78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104c2:	2b40      	cmp	r3, #64	; 0x40
 80104c4:	d146      	bne.n	8010554 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80104d4:	e853 3f00 	ldrex	r3, [r3]
 80104d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80104dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	3308      	adds	r3, #8
 80104ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80104f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80104f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80104fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010502:	e841 2300 	strex	r3, r2, [r1]
 8010506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801050a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1d9      	bne.n	80104c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010518:	2b00      	cmp	r3, #0
 801051a:	d017      	beq.n	801054c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010522:	4a15      	ldr	r2, [pc, #84]	; (8010578 <HAL_UART_IRQHandler+0x2c0>)
 8010524:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801052c:	4618      	mov	r0, r3
 801052e:	f7f6 fdf3 	bl	8007118 <HAL_DMA_Abort_IT>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d019      	beq.n	801056c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801053e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010546:	4610      	mov	r0, r2
 8010548:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801054a:	e00f      	b.n	801056c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 fa77 	bl	8010a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010552:	e00b      	b.n	801056c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 fa73 	bl	8010a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801055a:	e007      	b.n	801056c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fa6f 	bl	8010a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801056a:	e253      	b.n	8010a14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801056c:	bf00      	nop
    return;
 801056e:	e251      	b.n	8010a14 <HAL_UART_IRQHandler+0x75c>
 8010570:	10000001 	.word	0x10000001
 8010574:	04000120 	.word	0x04000120
 8010578:	08011d77 	.word	0x08011d77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010580:	2b01      	cmp	r3, #1
 8010582:	f040 81e7 	bne.w	8010954 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801058a:	f003 0310 	and.w	r3, r3, #16
 801058e:	2b00      	cmp	r3, #0
 8010590:	f000 81e0 	beq.w	8010954 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010598:	f003 0310 	and.w	r3, r3, #16
 801059c:	2b00      	cmp	r3, #0
 801059e:	f000 81d9 	beq.w	8010954 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2210      	movs	r2, #16
 80105a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105b4:	2b40      	cmp	r3, #64	; 0x40
 80105b6:	f040 8151 	bne.w	801085c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a96      	ldr	r2, [pc, #600]	; (801081c <HAL_UART_IRQHandler+0x564>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d068      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a93      	ldr	r2, [pc, #588]	; (8010820 <HAL_UART_IRQHandler+0x568>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d061      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a91      	ldr	r2, [pc, #580]	; (8010824 <HAL_UART_IRQHandler+0x56c>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d05a      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a8e      	ldr	r2, [pc, #568]	; (8010828 <HAL_UART_IRQHandler+0x570>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d053      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a8c      	ldr	r2, [pc, #560]	; (801082c <HAL_UART_IRQHandler+0x574>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d04c      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a89      	ldr	r2, [pc, #548]	; (8010830 <HAL_UART_IRQHandler+0x578>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d045      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4a87      	ldr	r2, [pc, #540]	; (8010834 <HAL_UART_IRQHandler+0x57c>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d03e      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a84      	ldr	r2, [pc, #528]	; (8010838 <HAL_UART_IRQHandler+0x580>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d037      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	4a82      	ldr	r2, [pc, #520]	; (801083c <HAL_UART_IRQHandler+0x584>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d030      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a7f      	ldr	r2, [pc, #508]	; (8010840 <HAL_UART_IRQHandler+0x588>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d029      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a7d      	ldr	r2, [pc, #500]	; (8010844 <HAL_UART_IRQHandler+0x58c>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d022      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a7a      	ldr	r2, [pc, #488]	; (8010848 <HAL_UART_IRQHandler+0x590>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d01b      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a78      	ldr	r2, [pc, #480]	; (801084c <HAL_UART_IRQHandler+0x594>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d014      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a75      	ldr	r2, [pc, #468]	; (8010850 <HAL_UART_IRQHandler+0x598>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d00d      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4a73      	ldr	r2, [pc, #460]	; (8010854 <HAL_UART_IRQHandler+0x59c>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d006      	beq.n	801069a <HAL_UART_IRQHandler+0x3e2>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a70      	ldr	r2, [pc, #448]	; (8010858 <HAL_UART_IRQHandler+0x5a0>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d106      	bne.n	80106a8 <HAL_UART_IRQHandler+0x3f0>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	e005      	b.n	80106b4 <HAL_UART_IRQHandler+0x3fc>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80106b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 81ab 	beq.w	8010a18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80106cc:	429a      	cmp	r2, r3
 80106ce:	f080 81a3 	bcs.w	8010a18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80106d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106e2:	69db      	ldr	r3, [r3, #28]
 80106e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106e8:	f000 8087 	beq.w	80107fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106f8:	e853 3f00 	ldrex	r3, [r3]
 80106fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	461a      	mov	r2, r3
 8010712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801071a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010726:	e841 2300 	strex	r3, r2, [r1]
 801072a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801072e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1da      	bne.n	80106ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	3308      	adds	r3, #8
 801073c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010740:	e853 3f00 	ldrex	r3, [r3]
 8010744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010748:	f023 0301 	bic.w	r3, r3, #1
 801074c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	3308      	adds	r3, #8
 8010756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801075a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801075e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010766:	e841 2300 	strex	r3, r2, [r1]
 801076a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801076c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1e1      	bne.n	8010736 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	3308      	adds	r3, #8
 8010778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801077c:	e853 3f00 	ldrex	r3, [r3]
 8010780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	3308      	adds	r3, #8
 8010792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801079c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801079e:	e841 2300 	strex	r3, r2, [r1]
 80107a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80107a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d1e3      	bne.n	8010772 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2220      	movs	r2, #32
 80107ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c0:	e853 3f00 	ldrex	r3, [r3]
 80107c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80107c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107c8:	f023 0310 	bic.w	r3, r3, #16
 80107cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	461a      	mov	r2, r3
 80107d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107da:	65bb      	str	r3, [r7, #88]	; 0x58
 80107dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107e2:	e841 2300 	strex	r3, r2, [r1]
 80107e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80107e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d1e4      	bne.n	80107b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7f6 f971 	bl	8006adc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2202      	movs	r2, #2
 80107fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801080c:	b29b      	uxth	r3, r3
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	b29b      	uxth	r3, r3
 8010812:	4619      	mov	r1, r3
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 f91d 	bl	8010a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801081a:	e0fd      	b.n	8010a18 <HAL_UART_IRQHandler+0x760>
 801081c:	40020010 	.word	0x40020010
 8010820:	40020028 	.word	0x40020028
 8010824:	40020040 	.word	0x40020040
 8010828:	40020058 	.word	0x40020058
 801082c:	40020070 	.word	0x40020070
 8010830:	40020088 	.word	0x40020088
 8010834:	400200a0 	.word	0x400200a0
 8010838:	400200b8 	.word	0x400200b8
 801083c:	40020410 	.word	0x40020410
 8010840:	40020428 	.word	0x40020428
 8010844:	40020440 	.word	0x40020440
 8010848:	40020458 	.word	0x40020458
 801084c:	40020470 	.word	0x40020470
 8010850:	40020488 	.word	0x40020488
 8010854:	400204a0 	.word	0x400204a0
 8010858:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010868:	b29b      	uxth	r3, r3
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010876:	b29b      	uxth	r3, r3
 8010878:	2b00      	cmp	r3, #0
 801087a:	f000 80cf 	beq.w	8010a1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801087e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 80ca 	beq.w	8010a1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010890:	e853 3f00 	ldrex	r3, [r3]
 8010894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801089c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	461a      	mov	r2, r3
 80108a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80108aa:	647b      	str	r3, [r7, #68]	; 0x44
 80108ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108b2:	e841 2300 	strex	r3, r2, [r1]
 80108b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80108b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1e4      	bne.n	8010888 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	3308      	adds	r3, #8
 80108c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c8:	e853 3f00 	ldrex	r3, [r3]
 80108cc:	623b      	str	r3, [r7, #32]
   return(result);
 80108ce:	6a3a      	ldr	r2, [r7, #32]
 80108d0:	4b55      	ldr	r3, [pc, #340]	; (8010a28 <HAL_UART_IRQHandler+0x770>)
 80108d2:	4013      	ands	r3, r2
 80108d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	3308      	adds	r3, #8
 80108de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80108e2:	633a      	str	r2, [r7, #48]	; 0x30
 80108e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ea:	e841 2300 	strex	r3, r2, [r1]
 80108ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1e3      	bne.n	80108be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2220      	movs	r2, #32
 80108fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	e853 3f00 	ldrex	r3, [r3]
 8010916:	60fb      	str	r3, [r7, #12]
   return(result);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f023 0310 	bic.w	r3, r3, #16
 801091e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	461a      	mov	r2, r3
 8010928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801092c:	61fb      	str	r3, [r7, #28]
 801092e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010930:	69b9      	ldr	r1, [r7, #24]
 8010932:	69fa      	ldr	r2, [r7, #28]
 8010934:	e841 2300 	strex	r3, r2, [r1]
 8010938:	617b      	str	r3, [r7, #20]
   return(result);
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1e4      	bne.n	801090a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2202      	movs	r2, #2
 8010944:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 f881 	bl	8010a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010952:	e063      	b.n	8010a1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00e      	beq.n	801097e <HAL_UART_IRQHandler+0x6c6>
 8010960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d008      	beq.n	801097e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f001 ff5a 	bl	8012830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801097c:	e051      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801097e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010986:	2b00      	cmp	r3, #0
 8010988:	d014      	beq.n	80109b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801098a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010992:	2b00      	cmp	r3, #0
 8010994:	d105      	bne.n	80109a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801099a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d008      	beq.n	80109b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d03a      	beq.n	8010a20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	4798      	blx	r3
    }
    return;
 80109b2:	e035      	b.n	8010a20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80109b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d009      	beq.n	80109d4 <HAL_UART_IRQHandler+0x71c>
 80109c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d003      	beq.n	80109d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f001 f9e8 	bl	8011da2 <UART_EndTransmit_IT>
    return;
 80109d2:	e026      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80109d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d009      	beq.n	80109f4 <HAL_UART_IRQHandler+0x73c>
 80109e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d003      	beq.n	80109f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f001 ff33 	bl	8012858 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80109f2:	e016      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80109f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d010      	beq.n	8010a22 <HAL_UART_IRQHandler+0x76a>
 8010a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	da0c      	bge.n	8010a22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f001 ff1b 	bl	8012844 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010a0e:	e008      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
      return;
 8010a10:	bf00      	nop
 8010a12:	e006      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
    return;
 8010a14:	bf00      	nop
 8010a16:	e004      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
      return;
 8010a18:	bf00      	nop
 8010a1a:	e002      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
      return;
 8010a1c:	bf00      	nop
 8010a1e:	e000      	b.n	8010a22 <HAL_UART_IRQHandler+0x76a>
    return;
 8010a20:	bf00      	nop
  }
}
 8010a22:	37e8      	adds	r7, #232	; 0xe8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	effffffe 	.word	0xeffffffe

08010a2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010a34:	bf00      	nop
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010a48:	bf00      	nop
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010a60:	bf00      	nop
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a70:	b092      	sub	sp, #72	; 0x48
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	689a      	ldr	r2, [r3, #8]
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	431a      	orrs	r2, r3
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	695b      	ldr	r3, [r3, #20]
 8010a8a:	431a      	orrs	r2, r3
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	69db      	ldr	r3, [r3, #28]
 8010a90:	4313      	orrs	r3, r2
 8010a92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	4bbe      	ldr	r3, [pc, #760]	; (8010d94 <UART_SetConfig+0x328>)
 8010a9c:	4013      	ands	r3, r2
 8010a9e:	697a      	ldr	r2, [r7, #20]
 8010aa0:	6812      	ldr	r2, [r2, #0]
 8010aa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010aa4:	430b      	orrs	r3, r1
 8010aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	68da      	ldr	r2, [r3, #12]
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	430a      	orrs	r2, r1
 8010abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4ab3      	ldr	r2, [pc, #716]	; (8010d98 <UART_SetConfig+0x32c>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d004      	beq.n	8010ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	6a1b      	ldr	r3, [r3, #32]
 8010ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	689a      	ldr	r2, [r3, #8]
 8010ade:	4baf      	ldr	r3, [pc, #700]	; (8010d9c <UART_SetConfig+0x330>)
 8010ae0:	4013      	ands	r3, r2
 8010ae2:	697a      	ldr	r2, [r7, #20]
 8010ae4:	6812      	ldr	r2, [r2, #0]
 8010ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ae8:	430b      	orrs	r3, r1
 8010aea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af2:	f023 010f 	bic.w	r1, r3, #15
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	430a      	orrs	r2, r1
 8010b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4aa6      	ldr	r2, [pc, #664]	; (8010da0 <UART_SetConfig+0x334>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d177      	bne.n	8010bfc <UART_SetConfig+0x190>
 8010b0c:	4ba5      	ldr	r3, [pc, #660]	; (8010da4 <UART_SetConfig+0x338>)
 8010b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b14:	2b28      	cmp	r3, #40	; 0x28
 8010b16:	d86d      	bhi.n	8010bf4 <UART_SetConfig+0x188>
 8010b18:	a201      	add	r2, pc, #4	; (adr r2, 8010b20 <UART_SetConfig+0xb4>)
 8010b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1e:	bf00      	nop
 8010b20:	08010bc5 	.word	0x08010bc5
 8010b24:	08010bf5 	.word	0x08010bf5
 8010b28:	08010bf5 	.word	0x08010bf5
 8010b2c:	08010bf5 	.word	0x08010bf5
 8010b30:	08010bf5 	.word	0x08010bf5
 8010b34:	08010bf5 	.word	0x08010bf5
 8010b38:	08010bf5 	.word	0x08010bf5
 8010b3c:	08010bf5 	.word	0x08010bf5
 8010b40:	08010bcd 	.word	0x08010bcd
 8010b44:	08010bf5 	.word	0x08010bf5
 8010b48:	08010bf5 	.word	0x08010bf5
 8010b4c:	08010bf5 	.word	0x08010bf5
 8010b50:	08010bf5 	.word	0x08010bf5
 8010b54:	08010bf5 	.word	0x08010bf5
 8010b58:	08010bf5 	.word	0x08010bf5
 8010b5c:	08010bf5 	.word	0x08010bf5
 8010b60:	08010bd5 	.word	0x08010bd5
 8010b64:	08010bf5 	.word	0x08010bf5
 8010b68:	08010bf5 	.word	0x08010bf5
 8010b6c:	08010bf5 	.word	0x08010bf5
 8010b70:	08010bf5 	.word	0x08010bf5
 8010b74:	08010bf5 	.word	0x08010bf5
 8010b78:	08010bf5 	.word	0x08010bf5
 8010b7c:	08010bf5 	.word	0x08010bf5
 8010b80:	08010bdd 	.word	0x08010bdd
 8010b84:	08010bf5 	.word	0x08010bf5
 8010b88:	08010bf5 	.word	0x08010bf5
 8010b8c:	08010bf5 	.word	0x08010bf5
 8010b90:	08010bf5 	.word	0x08010bf5
 8010b94:	08010bf5 	.word	0x08010bf5
 8010b98:	08010bf5 	.word	0x08010bf5
 8010b9c:	08010bf5 	.word	0x08010bf5
 8010ba0:	08010be5 	.word	0x08010be5
 8010ba4:	08010bf5 	.word	0x08010bf5
 8010ba8:	08010bf5 	.word	0x08010bf5
 8010bac:	08010bf5 	.word	0x08010bf5
 8010bb0:	08010bf5 	.word	0x08010bf5
 8010bb4:	08010bf5 	.word	0x08010bf5
 8010bb8:	08010bf5 	.word	0x08010bf5
 8010bbc:	08010bf5 	.word	0x08010bf5
 8010bc0:	08010bed 	.word	0x08010bed
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bca:	e222      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010bcc:	2304      	movs	r3, #4
 8010bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd2:	e21e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010bd4:	2308      	movs	r3, #8
 8010bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bda:	e21a      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010bdc:	2310      	movs	r3, #16
 8010bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be2:	e216      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010be4:	2320      	movs	r3, #32
 8010be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bea:	e212      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010bec:	2340      	movs	r3, #64	; 0x40
 8010bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf2:	e20e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010bf4:	2380      	movs	r3, #128	; 0x80
 8010bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfa:	e20a      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a69      	ldr	r2, [pc, #420]	; (8010da8 <UART_SetConfig+0x33c>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d130      	bne.n	8010c68 <UART_SetConfig+0x1fc>
 8010c06:	4b67      	ldr	r3, [pc, #412]	; (8010da4 <UART_SetConfig+0x338>)
 8010c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c0a:	f003 0307 	and.w	r3, r3, #7
 8010c0e:	2b05      	cmp	r3, #5
 8010c10:	d826      	bhi.n	8010c60 <UART_SetConfig+0x1f4>
 8010c12:	a201      	add	r2, pc, #4	; (adr r2, 8010c18 <UART_SetConfig+0x1ac>)
 8010c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c18:	08010c31 	.word	0x08010c31
 8010c1c:	08010c39 	.word	0x08010c39
 8010c20:	08010c41 	.word	0x08010c41
 8010c24:	08010c49 	.word	0x08010c49
 8010c28:	08010c51 	.word	0x08010c51
 8010c2c:	08010c59 	.word	0x08010c59
 8010c30:	2300      	movs	r3, #0
 8010c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c36:	e1ec      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c38:	2304      	movs	r3, #4
 8010c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3e:	e1e8      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c40:	2308      	movs	r3, #8
 8010c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c46:	e1e4      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c48:	2310      	movs	r3, #16
 8010c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4e:	e1e0      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c50:	2320      	movs	r3, #32
 8010c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c56:	e1dc      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c58:	2340      	movs	r3, #64	; 0x40
 8010c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5e:	e1d8      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c60:	2380      	movs	r3, #128	; 0x80
 8010c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c66:	e1d4      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4a4f      	ldr	r2, [pc, #316]	; (8010dac <UART_SetConfig+0x340>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d130      	bne.n	8010cd4 <UART_SetConfig+0x268>
 8010c72:	4b4c      	ldr	r3, [pc, #304]	; (8010da4 <UART_SetConfig+0x338>)
 8010c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c76:	f003 0307 	and.w	r3, r3, #7
 8010c7a:	2b05      	cmp	r3, #5
 8010c7c:	d826      	bhi.n	8010ccc <UART_SetConfig+0x260>
 8010c7e:	a201      	add	r2, pc, #4	; (adr r2, 8010c84 <UART_SetConfig+0x218>)
 8010c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c84:	08010c9d 	.word	0x08010c9d
 8010c88:	08010ca5 	.word	0x08010ca5
 8010c8c:	08010cad 	.word	0x08010cad
 8010c90:	08010cb5 	.word	0x08010cb5
 8010c94:	08010cbd 	.word	0x08010cbd
 8010c98:	08010cc5 	.word	0x08010cc5
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e1b6      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ca4:	2304      	movs	r3, #4
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e1b2      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010cac:	2308      	movs	r3, #8
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e1ae      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010cb4:	2310      	movs	r3, #16
 8010cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cba:	e1aa      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010cbc:	2320      	movs	r3, #32
 8010cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc2:	e1a6      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010cc4:	2340      	movs	r3, #64	; 0x40
 8010cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cca:	e1a2      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ccc:	2380      	movs	r3, #128	; 0x80
 8010cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd2:	e19e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a35      	ldr	r2, [pc, #212]	; (8010db0 <UART_SetConfig+0x344>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d130      	bne.n	8010d40 <UART_SetConfig+0x2d4>
 8010cde:	4b31      	ldr	r3, [pc, #196]	; (8010da4 <UART_SetConfig+0x338>)
 8010ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ce2:	f003 0307 	and.w	r3, r3, #7
 8010ce6:	2b05      	cmp	r3, #5
 8010ce8:	d826      	bhi.n	8010d38 <UART_SetConfig+0x2cc>
 8010cea:	a201      	add	r2, pc, #4	; (adr r2, 8010cf0 <UART_SetConfig+0x284>)
 8010cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf0:	08010d09 	.word	0x08010d09
 8010cf4:	08010d11 	.word	0x08010d11
 8010cf8:	08010d19 	.word	0x08010d19
 8010cfc:	08010d21 	.word	0x08010d21
 8010d00:	08010d29 	.word	0x08010d29
 8010d04:	08010d31 	.word	0x08010d31
 8010d08:	2300      	movs	r3, #0
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e180      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d10:	2304      	movs	r3, #4
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d16:	e17c      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d18:	2308      	movs	r3, #8
 8010d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1e:	e178      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d20:	2310      	movs	r3, #16
 8010d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d26:	e174      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d28:	2320      	movs	r3, #32
 8010d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d2e:	e170      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d30:	2340      	movs	r3, #64	; 0x40
 8010d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d36:	e16c      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d38:	2380      	movs	r3, #128	; 0x80
 8010d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3e:	e168      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4a1b      	ldr	r2, [pc, #108]	; (8010db4 <UART_SetConfig+0x348>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d142      	bne.n	8010dd0 <UART_SetConfig+0x364>
 8010d4a:	4b16      	ldr	r3, [pc, #88]	; (8010da4 <UART_SetConfig+0x338>)
 8010d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d4e:	f003 0307 	and.w	r3, r3, #7
 8010d52:	2b05      	cmp	r3, #5
 8010d54:	d838      	bhi.n	8010dc8 <UART_SetConfig+0x35c>
 8010d56:	a201      	add	r2, pc, #4	; (adr r2, 8010d5c <UART_SetConfig+0x2f0>)
 8010d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d5c:	08010d75 	.word	0x08010d75
 8010d60:	08010d7d 	.word	0x08010d7d
 8010d64:	08010d85 	.word	0x08010d85
 8010d68:	08010d8d 	.word	0x08010d8d
 8010d6c:	08010db9 	.word	0x08010db9
 8010d70:	08010dc1 	.word	0x08010dc1
 8010d74:	2300      	movs	r3, #0
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e14a      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d7c:	2304      	movs	r3, #4
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e146      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d84:	2308      	movs	r3, #8
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e142      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d8c:	2310      	movs	r3, #16
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d92:	e13e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010d94:	cfff69f3 	.word	0xcfff69f3
 8010d98:	58000c00 	.word	0x58000c00
 8010d9c:	11fff4ff 	.word	0x11fff4ff
 8010da0:	40011000 	.word	0x40011000
 8010da4:	58024400 	.word	0x58024400
 8010da8:	40004400 	.word	0x40004400
 8010dac:	40004800 	.word	0x40004800
 8010db0:	40004c00 	.word	0x40004c00
 8010db4:	40005000 	.word	0x40005000
 8010db8:	2320      	movs	r3, #32
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e128      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010dc0:	2340      	movs	r3, #64	; 0x40
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e124      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010dc8:	2380      	movs	r3, #128	; 0x80
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e120      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4acb      	ldr	r2, [pc, #812]	; (8011104 <UART_SetConfig+0x698>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d176      	bne.n	8010ec8 <UART_SetConfig+0x45c>
 8010dda:	4bcb      	ldr	r3, [pc, #812]	; (8011108 <UART_SetConfig+0x69c>)
 8010ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010de2:	2b28      	cmp	r3, #40	; 0x28
 8010de4:	d86c      	bhi.n	8010ec0 <UART_SetConfig+0x454>
 8010de6:	a201      	add	r2, pc, #4	; (adr r2, 8010dec <UART_SetConfig+0x380>)
 8010de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dec:	08010e91 	.word	0x08010e91
 8010df0:	08010ec1 	.word	0x08010ec1
 8010df4:	08010ec1 	.word	0x08010ec1
 8010df8:	08010ec1 	.word	0x08010ec1
 8010dfc:	08010ec1 	.word	0x08010ec1
 8010e00:	08010ec1 	.word	0x08010ec1
 8010e04:	08010ec1 	.word	0x08010ec1
 8010e08:	08010ec1 	.word	0x08010ec1
 8010e0c:	08010e99 	.word	0x08010e99
 8010e10:	08010ec1 	.word	0x08010ec1
 8010e14:	08010ec1 	.word	0x08010ec1
 8010e18:	08010ec1 	.word	0x08010ec1
 8010e1c:	08010ec1 	.word	0x08010ec1
 8010e20:	08010ec1 	.word	0x08010ec1
 8010e24:	08010ec1 	.word	0x08010ec1
 8010e28:	08010ec1 	.word	0x08010ec1
 8010e2c:	08010ea1 	.word	0x08010ea1
 8010e30:	08010ec1 	.word	0x08010ec1
 8010e34:	08010ec1 	.word	0x08010ec1
 8010e38:	08010ec1 	.word	0x08010ec1
 8010e3c:	08010ec1 	.word	0x08010ec1
 8010e40:	08010ec1 	.word	0x08010ec1
 8010e44:	08010ec1 	.word	0x08010ec1
 8010e48:	08010ec1 	.word	0x08010ec1
 8010e4c:	08010ea9 	.word	0x08010ea9
 8010e50:	08010ec1 	.word	0x08010ec1
 8010e54:	08010ec1 	.word	0x08010ec1
 8010e58:	08010ec1 	.word	0x08010ec1
 8010e5c:	08010ec1 	.word	0x08010ec1
 8010e60:	08010ec1 	.word	0x08010ec1
 8010e64:	08010ec1 	.word	0x08010ec1
 8010e68:	08010ec1 	.word	0x08010ec1
 8010e6c:	08010eb1 	.word	0x08010eb1
 8010e70:	08010ec1 	.word	0x08010ec1
 8010e74:	08010ec1 	.word	0x08010ec1
 8010e78:	08010ec1 	.word	0x08010ec1
 8010e7c:	08010ec1 	.word	0x08010ec1
 8010e80:	08010ec1 	.word	0x08010ec1
 8010e84:	08010ec1 	.word	0x08010ec1
 8010e88:	08010ec1 	.word	0x08010ec1
 8010e8c:	08010eb9 	.word	0x08010eb9
 8010e90:	2301      	movs	r3, #1
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e0bc      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010e98:	2304      	movs	r3, #4
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e0b8      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ea0:	2308      	movs	r3, #8
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e0b4      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ea8:	2310      	movs	r3, #16
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e0b0      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010eb0:	2320      	movs	r3, #32
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb6:	e0ac      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010eb8:	2340      	movs	r3, #64	; 0x40
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e0a8      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ec0:	2380      	movs	r3, #128	; 0x80
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e0a4      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a8f      	ldr	r2, [pc, #572]	; (801110c <UART_SetConfig+0x6a0>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d130      	bne.n	8010f34 <UART_SetConfig+0x4c8>
 8010ed2:	4b8d      	ldr	r3, [pc, #564]	; (8011108 <UART_SetConfig+0x69c>)
 8010ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ed6:	f003 0307 	and.w	r3, r3, #7
 8010eda:	2b05      	cmp	r3, #5
 8010edc:	d826      	bhi.n	8010f2c <UART_SetConfig+0x4c0>
 8010ede:	a201      	add	r2, pc, #4	; (adr r2, 8010ee4 <UART_SetConfig+0x478>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010efd 	.word	0x08010efd
 8010ee8:	08010f05 	.word	0x08010f05
 8010eec:	08010f0d 	.word	0x08010f0d
 8010ef0:	08010f15 	.word	0x08010f15
 8010ef4:	08010f1d 	.word	0x08010f1d
 8010ef8:	08010f25 	.word	0x08010f25
 8010efc:	2300      	movs	r3, #0
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f02:	e086      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f04:	2304      	movs	r3, #4
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e082      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f0c:	2308      	movs	r3, #8
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e07e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f14:	2310      	movs	r3, #16
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e07a      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f1c:	2320      	movs	r3, #32
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f22:	e076      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f24:	2340      	movs	r3, #64	; 0x40
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2a:	e072      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f2c:	2380      	movs	r3, #128	; 0x80
 8010f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f32:	e06e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a75      	ldr	r2, [pc, #468]	; (8011110 <UART_SetConfig+0x6a4>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d130      	bne.n	8010fa0 <UART_SetConfig+0x534>
 8010f3e:	4b72      	ldr	r3, [pc, #456]	; (8011108 <UART_SetConfig+0x69c>)
 8010f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f42:	f003 0307 	and.w	r3, r3, #7
 8010f46:	2b05      	cmp	r3, #5
 8010f48:	d826      	bhi.n	8010f98 <UART_SetConfig+0x52c>
 8010f4a:	a201      	add	r2, pc, #4	; (adr r2, 8010f50 <UART_SetConfig+0x4e4>)
 8010f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f50:	08010f69 	.word	0x08010f69
 8010f54:	08010f71 	.word	0x08010f71
 8010f58:	08010f79 	.word	0x08010f79
 8010f5c:	08010f81 	.word	0x08010f81
 8010f60:	08010f89 	.word	0x08010f89
 8010f64:	08010f91 	.word	0x08010f91
 8010f68:	2300      	movs	r3, #0
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6e:	e050      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f70:	2304      	movs	r3, #4
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f76:	e04c      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f78:	2308      	movs	r3, #8
 8010f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7e:	e048      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f80:	2310      	movs	r3, #16
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f86:	e044      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f88:	2320      	movs	r3, #32
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8e:	e040      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f90:	2340      	movs	r3, #64	; 0x40
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e03c      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010f98:	2380      	movs	r3, #128	; 0x80
 8010f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9e:	e038      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a5b      	ldr	r2, [pc, #364]	; (8011114 <UART_SetConfig+0x6a8>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d130      	bne.n	801100c <UART_SetConfig+0x5a0>
 8010faa:	4b57      	ldr	r3, [pc, #348]	; (8011108 <UART_SetConfig+0x69c>)
 8010fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fae:	f003 0307 	and.w	r3, r3, #7
 8010fb2:	2b05      	cmp	r3, #5
 8010fb4:	d826      	bhi.n	8011004 <UART_SetConfig+0x598>
 8010fb6:	a201      	add	r2, pc, #4	; (adr r2, 8010fbc <UART_SetConfig+0x550>)
 8010fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fbc:	08010fd5 	.word	0x08010fd5
 8010fc0:	08010fdd 	.word	0x08010fdd
 8010fc4:	08010fe5 	.word	0x08010fe5
 8010fc8:	08010fed 	.word	0x08010fed
 8010fcc:	08010ff5 	.word	0x08010ff5
 8010fd0:	08010ffd 	.word	0x08010ffd
 8010fd4:	2302      	movs	r3, #2
 8010fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fda:	e01a      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010fdc:	2304      	movs	r3, #4
 8010fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe2:	e016      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010fe4:	2308      	movs	r3, #8
 8010fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fea:	e012      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010fec:	2310      	movs	r3, #16
 8010fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff2:	e00e      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ff4:	2320      	movs	r3, #32
 8010ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffa:	e00a      	b.n	8011012 <UART_SetConfig+0x5a6>
 8010ffc:	2340      	movs	r3, #64	; 0x40
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e006      	b.n	8011012 <UART_SetConfig+0x5a6>
 8011004:	2380      	movs	r3, #128	; 0x80
 8011006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100a:	e002      	b.n	8011012 <UART_SetConfig+0x5a6>
 801100c:	2380      	movs	r3, #128	; 0x80
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	4a3f      	ldr	r2, [pc, #252]	; (8011114 <UART_SetConfig+0x6a8>)
 8011018:	4293      	cmp	r3, r2
 801101a:	f040 80f8 	bne.w	801120e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801101e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011022:	2b20      	cmp	r3, #32
 8011024:	dc46      	bgt.n	80110b4 <UART_SetConfig+0x648>
 8011026:	2b02      	cmp	r3, #2
 8011028:	f2c0 8082 	blt.w	8011130 <UART_SetConfig+0x6c4>
 801102c:	3b02      	subs	r3, #2
 801102e:	2b1e      	cmp	r3, #30
 8011030:	d87e      	bhi.n	8011130 <UART_SetConfig+0x6c4>
 8011032:	a201      	add	r2, pc, #4	; (adr r2, 8011038 <UART_SetConfig+0x5cc>)
 8011034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011038:	080110bb 	.word	0x080110bb
 801103c:	08011131 	.word	0x08011131
 8011040:	080110c3 	.word	0x080110c3
 8011044:	08011131 	.word	0x08011131
 8011048:	08011131 	.word	0x08011131
 801104c:	08011131 	.word	0x08011131
 8011050:	080110d3 	.word	0x080110d3
 8011054:	08011131 	.word	0x08011131
 8011058:	08011131 	.word	0x08011131
 801105c:	08011131 	.word	0x08011131
 8011060:	08011131 	.word	0x08011131
 8011064:	08011131 	.word	0x08011131
 8011068:	08011131 	.word	0x08011131
 801106c:	08011131 	.word	0x08011131
 8011070:	080110e3 	.word	0x080110e3
 8011074:	08011131 	.word	0x08011131
 8011078:	08011131 	.word	0x08011131
 801107c:	08011131 	.word	0x08011131
 8011080:	08011131 	.word	0x08011131
 8011084:	08011131 	.word	0x08011131
 8011088:	08011131 	.word	0x08011131
 801108c:	08011131 	.word	0x08011131
 8011090:	08011131 	.word	0x08011131
 8011094:	08011131 	.word	0x08011131
 8011098:	08011131 	.word	0x08011131
 801109c:	08011131 	.word	0x08011131
 80110a0:	08011131 	.word	0x08011131
 80110a4:	08011131 	.word	0x08011131
 80110a8:	08011131 	.word	0x08011131
 80110ac:	08011131 	.word	0x08011131
 80110b0:	08011123 	.word	0x08011123
 80110b4:	2b40      	cmp	r3, #64	; 0x40
 80110b6:	d037      	beq.n	8011128 <UART_SetConfig+0x6bc>
 80110b8:	e03a      	b.n	8011130 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80110ba:	f7fb fd9b 	bl	800cbf4 <HAL_RCCEx_GetD3PCLK1Freq>
 80110be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110c0:	e03c      	b.n	801113c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fb fdaa 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110d0:	e034      	b.n	801113c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110d2:	f107 0318 	add.w	r3, r7, #24
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fb fef6 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110e0:	e02c      	b.n	801113c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110e2:	4b09      	ldr	r3, [pc, #36]	; (8011108 <UART_SetConfig+0x69c>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f003 0320 	and.w	r3, r3, #32
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d016      	beq.n	801111c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110ee:	4b06      	ldr	r3, [pc, #24]	; (8011108 <UART_SetConfig+0x69c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	08db      	lsrs	r3, r3, #3
 80110f4:	f003 0303 	and.w	r3, r3, #3
 80110f8:	4a07      	ldr	r2, [pc, #28]	; (8011118 <UART_SetConfig+0x6ac>)
 80110fa:	fa22 f303 	lsr.w	r3, r2, r3
 80110fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011100:	e01c      	b.n	801113c <UART_SetConfig+0x6d0>
 8011102:	bf00      	nop
 8011104:	40011400 	.word	0x40011400
 8011108:	58024400 	.word	0x58024400
 801110c:	40007800 	.word	0x40007800
 8011110:	40007c00 	.word	0x40007c00
 8011114:	58000c00 	.word	0x58000c00
 8011118:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801111c:	4b9d      	ldr	r3, [pc, #628]	; (8011394 <UART_SetConfig+0x928>)
 801111e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011120:	e00c      	b.n	801113c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011122:	4b9d      	ldr	r3, [pc, #628]	; (8011398 <UART_SetConfig+0x92c>)
 8011124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011126:	e009      	b.n	801113c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801112c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801112e:	e005      	b.n	801113c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011130:	2300      	movs	r3, #0
 8011132:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011134:	2301      	movs	r3, #1
 8011136:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801113a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801113c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801113e:	2b00      	cmp	r3, #0
 8011140:	f000 81de 	beq.w	8011500 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011148:	4a94      	ldr	r2, [pc, #592]	; (801139c <UART_SetConfig+0x930>)
 801114a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801114e:	461a      	mov	r2, r3
 8011150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011152:	fbb3 f3f2 	udiv	r3, r3, r2
 8011156:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	4613      	mov	r3, r2
 801115e:	005b      	lsls	r3, r3, #1
 8011160:	4413      	add	r3, r2
 8011162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011164:	429a      	cmp	r2, r3
 8011166:	d305      	bcc.n	8011174 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801116e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011170:	429a      	cmp	r2, r3
 8011172:	d903      	bls.n	801117c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011174:	2301      	movs	r3, #1
 8011176:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801117a:	e1c1      	b.n	8011500 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801117c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117e:	2200      	movs	r2, #0
 8011180:	60bb      	str	r3, [r7, #8]
 8011182:	60fa      	str	r2, [r7, #12]
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011188:	4a84      	ldr	r2, [pc, #528]	; (801139c <UART_SetConfig+0x930>)
 801118a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801118e:	b29b      	uxth	r3, r3
 8011190:	2200      	movs	r2, #0
 8011192:	603b      	str	r3, [r7, #0]
 8011194:	607a      	str	r2, [r7, #4]
 8011196:	e9d7 2300 	ldrd	r2, r3, [r7]
 801119a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801119e:	f7ef f89f 	bl	80002e0 <__aeabi_uldivmod>
 80111a2:	4602      	mov	r2, r0
 80111a4:	460b      	mov	r3, r1
 80111a6:	4610      	mov	r0, r2
 80111a8:	4619      	mov	r1, r3
 80111aa:	f04f 0200 	mov.w	r2, #0
 80111ae:	f04f 0300 	mov.w	r3, #0
 80111b2:	020b      	lsls	r3, r1, #8
 80111b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80111b8:	0202      	lsls	r2, r0, #8
 80111ba:	6979      	ldr	r1, [r7, #20]
 80111bc:	6849      	ldr	r1, [r1, #4]
 80111be:	0849      	lsrs	r1, r1, #1
 80111c0:	2000      	movs	r0, #0
 80111c2:	460c      	mov	r4, r1
 80111c4:	4605      	mov	r5, r0
 80111c6:	eb12 0804 	adds.w	r8, r2, r4
 80111ca:	eb43 0905 	adc.w	r9, r3, r5
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	2200      	movs	r2, #0
 80111d4:	469a      	mov	sl, r3
 80111d6:	4693      	mov	fp, r2
 80111d8:	4652      	mov	r2, sl
 80111da:	465b      	mov	r3, fp
 80111dc:	4640      	mov	r0, r8
 80111de:	4649      	mov	r1, r9
 80111e0:	f7ef f87e 	bl	80002e0 <__aeabi_uldivmod>
 80111e4:	4602      	mov	r2, r0
 80111e6:	460b      	mov	r3, r1
 80111e8:	4613      	mov	r3, r2
 80111ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80111ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80111f2:	d308      	bcc.n	8011206 <UART_SetConfig+0x79a>
 80111f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111fa:	d204      	bcs.n	8011206 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011202:	60da      	str	r2, [r3, #12]
 8011204:	e17c      	b.n	8011500 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011206:	2301      	movs	r3, #1
 8011208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801120c:	e178      	b.n	8011500 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	69db      	ldr	r3, [r3, #28]
 8011212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011216:	f040 80c5 	bne.w	80113a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801121a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801121e:	2b20      	cmp	r3, #32
 8011220:	dc48      	bgt.n	80112b4 <UART_SetConfig+0x848>
 8011222:	2b00      	cmp	r3, #0
 8011224:	db7b      	blt.n	801131e <UART_SetConfig+0x8b2>
 8011226:	2b20      	cmp	r3, #32
 8011228:	d879      	bhi.n	801131e <UART_SetConfig+0x8b2>
 801122a:	a201      	add	r2, pc, #4	; (adr r2, 8011230 <UART_SetConfig+0x7c4>)
 801122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011230:	080112bb 	.word	0x080112bb
 8011234:	080112c3 	.word	0x080112c3
 8011238:	0801131f 	.word	0x0801131f
 801123c:	0801131f 	.word	0x0801131f
 8011240:	080112cb 	.word	0x080112cb
 8011244:	0801131f 	.word	0x0801131f
 8011248:	0801131f 	.word	0x0801131f
 801124c:	0801131f 	.word	0x0801131f
 8011250:	080112db 	.word	0x080112db
 8011254:	0801131f 	.word	0x0801131f
 8011258:	0801131f 	.word	0x0801131f
 801125c:	0801131f 	.word	0x0801131f
 8011260:	0801131f 	.word	0x0801131f
 8011264:	0801131f 	.word	0x0801131f
 8011268:	0801131f 	.word	0x0801131f
 801126c:	0801131f 	.word	0x0801131f
 8011270:	080112eb 	.word	0x080112eb
 8011274:	0801131f 	.word	0x0801131f
 8011278:	0801131f 	.word	0x0801131f
 801127c:	0801131f 	.word	0x0801131f
 8011280:	0801131f 	.word	0x0801131f
 8011284:	0801131f 	.word	0x0801131f
 8011288:	0801131f 	.word	0x0801131f
 801128c:	0801131f 	.word	0x0801131f
 8011290:	0801131f 	.word	0x0801131f
 8011294:	0801131f 	.word	0x0801131f
 8011298:	0801131f 	.word	0x0801131f
 801129c:	0801131f 	.word	0x0801131f
 80112a0:	0801131f 	.word	0x0801131f
 80112a4:	0801131f 	.word	0x0801131f
 80112a8:	0801131f 	.word	0x0801131f
 80112ac:	0801131f 	.word	0x0801131f
 80112b0:	08011311 	.word	0x08011311
 80112b4:	2b40      	cmp	r3, #64	; 0x40
 80112b6:	d02e      	beq.n	8011316 <UART_SetConfig+0x8aa>
 80112b8:	e031      	b.n	801131e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112ba:	f7f9 fca3 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 80112be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112c0:	e033      	b.n	801132a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80112c2:	f7f9 fcb5 	bl	800ac30 <HAL_RCC_GetPCLK2Freq>
 80112c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112c8:	e02f      	b.n	801132a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fb fca6 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d8:	e027      	b.n	801132a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112da:	f107 0318 	add.w	r3, r7, #24
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fb fdf2 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e8:	e01f      	b.n	801132a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112ea:	4b2d      	ldr	r3, [pc, #180]	; (80113a0 <UART_SetConfig+0x934>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	f003 0320 	and.w	r3, r3, #32
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d009      	beq.n	801130a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112f6:	4b2a      	ldr	r3, [pc, #168]	; (80113a0 <UART_SetConfig+0x934>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	08db      	lsrs	r3, r3, #3
 80112fc:	f003 0303 	and.w	r3, r3, #3
 8011300:	4a24      	ldr	r2, [pc, #144]	; (8011394 <UART_SetConfig+0x928>)
 8011302:	fa22 f303 	lsr.w	r3, r2, r3
 8011306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011308:	e00f      	b.n	801132a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801130a:	4b22      	ldr	r3, [pc, #136]	; (8011394 <UART_SetConfig+0x928>)
 801130c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801130e:	e00c      	b.n	801132a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011310:	4b21      	ldr	r3, [pc, #132]	; (8011398 <UART_SetConfig+0x92c>)
 8011312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011314:	e009      	b.n	801132a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801131a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801131c:	e005      	b.n	801132a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801131e:	2300      	movs	r3, #0
 8011320:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801132a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801132c:	2b00      	cmp	r3, #0
 801132e:	f000 80e7 	beq.w	8011500 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011336:	4a19      	ldr	r2, [pc, #100]	; (801139c <UART_SetConfig+0x930>)
 8011338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801133c:	461a      	mov	r2, r3
 801133e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011340:	fbb3 f3f2 	udiv	r3, r3, r2
 8011344:	005a      	lsls	r2, r3, #1
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	085b      	lsrs	r3, r3, #1
 801134c:	441a      	add	r2, r3
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	fbb2 f3f3 	udiv	r3, r2, r3
 8011356:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135a:	2b0f      	cmp	r3, #15
 801135c:	d916      	bls.n	801138c <UART_SetConfig+0x920>
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011364:	d212      	bcs.n	801138c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011368:	b29b      	uxth	r3, r3
 801136a:	f023 030f 	bic.w	r3, r3, #15
 801136e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011372:	085b      	lsrs	r3, r3, #1
 8011374:	b29b      	uxth	r3, r3
 8011376:	f003 0307 	and.w	r3, r3, #7
 801137a:	b29a      	uxth	r2, r3
 801137c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801137e:	4313      	orrs	r3, r2
 8011380:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011388:	60da      	str	r2, [r3, #12]
 801138a:	e0b9      	b.n	8011500 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801138c:	2301      	movs	r3, #1
 801138e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011392:	e0b5      	b.n	8011500 <UART_SetConfig+0xa94>
 8011394:	03d09000 	.word	0x03d09000
 8011398:	003d0900 	.word	0x003d0900
 801139c:	0801747c 	.word	0x0801747c
 80113a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80113a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113a8:	2b20      	cmp	r3, #32
 80113aa:	dc49      	bgt.n	8011440 <UART_SetConfig+0x9d4>
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	db7c      	blt.n	80114aa <UART_SetConfig+0xa3e>
 80113b0:	2b20      	cmp	r3, #32
 80113b2:	d87a      	bhi.n	80114aa <UART_SetConfig+0xa3e>
 80113b4:	a201      	add	r2, pc, #4	; (adr r2, 80113bc <UART_SetConfig+0x950>)
 80113b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ba:	bf00      	nop
 80113bc:	08011447 	.word	0x08011447
 80113c0:	0801144f 	.word	0x0801144f
 80113c4:	080114ab 	.word	0x080114ab
 80113c8:	080114ab 	.word	0x080114ab
 80113cc:	08011457 	.word	0x08011457
 80113d0:	080114ab 	.word	0x080114ab
 80113d4:	080114ab 	.word	0x080114ab
 80113d8:	080114ab 	.word	0x080114ab
 80113dc:	08011467 	.word	0x08011467
 80113e0:	080114ab 	.word	0x080114ab
 80113e4:	080114ab 	.word	0x080114ab
 80113e8:	080114ab 	.word	0x080114ab
 80113ec:	080114ab 	.word	0x080114ab
 80113f0:	080114ab 	.word	0x080114ab
 80113f4:	080114ab 	.word	0x080114ab
 80113f8:	080114ab 	.word	0x080114ab
 80113fc:	08011477 	.word	0x08011477
 8011400:	080114ab 	.word	0x080114ab
 8011404:	080114ab 	.word	0x080114ab
 8011408:	080114ab 	.word	0x080114ab
 801140c:	080114ab 	.word	0x080114ab
 8011410:	080114ab 	.word	0x080114ab
 8011414:	080114ab 	.word	0x080114ab
 8011418:	080114ab 	.word	0x080114ab
 801141c:	080114ab 	.word	0x080114ab
 8011420:	080114ab 	.word	0x080114ab
 8011424:	080114ab 	.word	0x080114ab
 8011428:	080114ab 	.word	0x080114ab
 801142c:	080114ab 	.word	0x080114ab
 8011430:	080114ab 	.word	0x080114ab
 8011434:	080114ab 	.word	0x080114ab
 8011438:	080114ab 	.word	0x080114ab
 801143c:	0801149d 	.word	0x0801149d
 8011440:	2b40      	cmp	r3, #64	; 0x40
 8011442:	d02e      	beq.n	80114a2 <UART_SetConfig+0xa36>
 8011444:	e031      	b.n	80114aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011446:	f7f9 fbdd 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 801144a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801144c:	e033      	b.n	80114b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801144e:	f7f9 fbef 	bl	800ac30 <HAL_RCC_GetPCLK2Freq>
 8011452:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011454:	e02f      	b.n	80114b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801145a:	4618      	mov	r0, r3
 801145c:	f7fb fbe0 	bl	800cc20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011464:	e027      	b.n	80114b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011466:	f107 0318 	add.w	r3, r7, #24
 801146a:	4618      	mov	r0, r3
 801146c:	f7fb fd2c 	bl	800cec8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011474:	e01f      	b.n	80114b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011476:	4b2d      	ldr	r3, [pc, #180]	; (801152c <UART_SetConfig+0xac0>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f003 0320 	and.w	r3, r3, #32
 801147e:	2b00      	cmp	r3, #0
 8011480:	d009      	beq.n	8011496 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011482:	4b2a      	ldr	r3, [pc, #168]	; (801152c <UART_SetConfig+0xac0>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	08db      	lsrs	r3, r3, #3
 8011488:	f003 0303 	and.w	r3, r3, #3
 801148c:	4a28      	ldr	r2, [pc, #160]	; (8011530 <UART_SetConfig+0xac4>)
 801148e:	fa22 f303 	lsr.w	r3, r2, r3
 8011492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011494:	e00f      	b.n	80114b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011496:	4b26      	ldr	r3, [pc, #152]	; (8011530 <UART_SetConfig+0xac4>)
 8011498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801149a:	e00c      	b.n	80114b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801149c:	4b25      	ldr	r3, [pc, #148]	; (8011534 <UART_SetConfig+0xac8>)
 801149e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a0:	e009      	b.n	80114b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a8:	e005      	b.n	80114b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80114aa:	2300      	movs	r3, #0
 80114ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114ae:	2301      	movs	r3, #1
 80114b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114b4:	bf00      	nop
    }

    if (pclk != 0U)
 80114b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d021      	beq.n	8011500 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c0:	4a1d      	ldr	r2, [pc, #116]	; (8011538 <UART_SetConfig+0xacc>)
 80114c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114c6:	461a      	mov	r2, r3
 80114c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	085b      	lsrs	r3, r3, #1
 80114d4:	441a      	add	r2, r3
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	fbb2 f3f3 	udiv	r3, r2, r3
 80114de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e2:	2b0f      	cmp	r3, #15
 80114e4:	d909      	bls.n	80114fa <UART_SetConfig+0xa8e>
 80114e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114ec:	d205      	bcs.n	80114fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80114ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f0:	b29a      	uxth	r2, r3
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	60da      	str	r2, [r3, #12]
 80114f8:	e002      	b.n	8011500 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	2201      	movs	r2, #1
 8011504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	2201      	movs	r2, #1
 801150c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	2200      	movs	r2, #0
 8011514:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	2200      	movs	r2, #0
 801151a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801151c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011520:	4618      	mov	r0, r3
 8011522:	3748      	adds	r7, #72	; 0x48
 8011524:	46bd      	mov	sp, r7
 8011526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801152a:	bf00      	nop
 801152c:	58024400 	.word	0x58024400
 8011530:	03d09000 	.word	0x03d09000
 8011534:	003d0900 	.word	0x003d0900
 8011538:	0801747c 	.word	0x0801747c

0801153c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011548:	f003 0308 	and.w	r3, r3, #8
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00a      	beq.n	8011566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	430a      	orrs	r2, r1
 8011564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156a:	f003 0301 	and.w	r3, r3, #1
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00a      	beq.n	8011588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	430a      	orrs	r2, r1
 8011586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801158c:	f003 0302 	and.w	r3, r3, #2
 8011590:	2b00      	cmp	r3, #0
 8011592:	d00a      	beq.n	80115aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	430a      	orrs	r2, r1
 80115a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	f003 0304 	and.w	r3, r3, #4
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00a      	beq.n	80115cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	430a      	orrs	r2, r1
 80115ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d0:	f003 0310 	and.w	r3, r3, #16
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00a      	beq.n	80115ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	430a      	orrs	r2, r1
 80115ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115f2:	f003 0320 	and.w	r3, r3, #32
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00a      	beq.n	8011610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	430a      	orrs	r2, r1
 801160e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011618:	2b00      	cmp	r3, #0
 801161a:	d01a      	beq.n	8011652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	430a      	orrs	r2, r1
 8011630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801163a:	d10a      	bne.n	8011652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	430a      	orrs	r2, r1
 8011650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00a      	beq.n	8011674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	430a      	orrs	r2, r1
 8011672:	605a      	str	r2, [r3, #4]
  }
}
 8011674:	bf00      	nop
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b098      	sub	sp, #96	; 0x60
 8011684:	af02      	add	r7, sp, #8
 8011686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011690:	f7f2 fb36 	bl	8003d00 <HAL_GetTick>
 8011694:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f003 0308 	and.w	r3, r3, #8
 80116a0:	2b08      	cmp	r3, #8
 80116a2:	d12f      	bne.n	8011704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80116a8:	9300      	str	r3, [sp, #0]
 80116aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ac:	2200      	movs	r2, #0
 80116ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f000 f88e 	bl	80117d4 <UART_WaitOnFlagUntilTimeout>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d022      	beq.n	8011704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c6:	e853 3f00 	ldrex	r3, [r3]
 80116ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80116cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80116d2:	653b      	str	r3, [r7, #80]	; 0x50
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	461a      	mov	r2, r3
 80116da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116dc:	647b      	str	r3, [r7, #68]	; 0x44
 80116de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80116e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116e4:	e841 2300 	strex	r3, r2, [r1]
 80116e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1e6      	bne.n	80116be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2220      	movs	r2, #32
 80116f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011700:	2303      	movs	r3, #3
 8011702:	e063      	b.n	80117cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f003 0304 	and.w	r3, r3, #4
 801170e:	2b04      	cmp	r3, #4
 8011710:	d149      	bne.n	80117a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011712:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171a:	2200      	movs	r2, #0
 801171c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 f857 	bl	80117d4 <UART_WaitOnFlagUntilTimeout>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d03c      	beq.n	80117a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011734:	e853 3f00 	ldrex	r3, [r3]
 8011738:	623b      	str	r3, [r7, #32]
   return(result);
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801174a:	633b      	str	r3, [r7, #48]	; 0x30
 801174c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801174e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011752:	e841 2300 	strex	r3, r2, [r1]
 8011756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175a:	2b00      	cmp	r3, #0
 801175c:	d1e6      	bne.n	801172c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	3308      	adds	r3, #8
 8011764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	e853 3f00 	ldrex	r3, [r3]
 801176c:	60fb      	str	r3, [r7, #12]
   return(result);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f023 0301 	bic.w	r3, r3, #1
 8011774:	64bb      	str	r3, [r7, #72]	; 0x48
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	3308      	adds	r3, #8
 801177c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801177e:	61fa      	str	r2, [r7, #28]
 8011780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011782:	69b9      	ldr	r1, [r7, #24]
 8011784:	69fa      	ldr	r2, [r7, #28]
 8011786:	e841 2300 	strex	r3, r2, [r1]
 801178a:	617b      	str	r3, [r7, #20]
   return(result);
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d1e5      	bne.n	801175e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2220      	movs	r2, #32
 8011796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117a2:	2303      	movs	r3, #3
 80117a4:	e012      	b.n	80117cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2220      	movs	r2, #32
 80117aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2220      	movs	r2, #32
 80117b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2200      	movs	r2, #0
 80117ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2200      	movs	r2, #0
 80117c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2200      	movs	r2, #0
 80117c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117ca:	2300      	movs	r3, #0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3758      	adds	r7, #88	; 0x58
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	603b      	str	r3, [r7, #0]
 80117e0:	4613      	mov	r3, r2
 80117e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117e4:	e04f      	b.n	8011886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117ec:	d04b      	beq.n	8011886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117ee:	f7f2 fa87 	bl	8003d00 <HAL_GetTick>
 80117f2:	4602      	mov	r2, r0
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	69ba      	ldr	r2, [r7, #24]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d302      	bcc.n	8011804 <UART_WaitOnFlagUntilTimeout+0x30>
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d101      	bne.n	8011808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011804:	2303      	movs	r3, #3
 8011806:	e04e      	b.n	80118a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f003 0304 	and.w	r3, r3, #4
 8011812:	2b00      	cmp	r3, #0
 8011814:	d037      	beq.n	8011886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	2b80      	cmp	r3, #128	; 0x80
 801181a:	d034      	beq.n	8011886 <UART_WaitOnFlagUntilTimeout+0xb2>
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2b40      	cmp	r3, #64	; 0x40
 8011820:	d031      	beq.n	8011886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	69db      	ldr	r3, [r3, #28]
 8011828:	f003 0308 	and.w	r3, r3, #8
 801182c:	2b08      	cmp	r3, #8
 801182e:	d110      	bne.n	8011852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2208      	movs	r2, #8
 8011836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011838:	68f8      	ldr	r0, [r7, #12]
 801183a:	f000 f99d 	bl	8011b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2208      	movs	r2, #8
 8011842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2200      	movs	r2, #0
 801184a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801184e:	2301      	movs	r3, #1
 8011850:	e029      	b.n	80118a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	69db      	ldr	r3, [r3, #28]
 8011858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801185c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011860:	d111      	bne.n	8011886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801186a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f000 f983 	bl	8011b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2220      	movs	r2, #32
 8011876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011882:	2303      	movs	r3, #3
 8011884:	e00f      	b.n	80118a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	69da      	ldr	r2, [r3, #28]
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	4013      	ands	r3, r2
 8011890:	68ba      	ldr	r2, [r7, #8]
 8011892:	429a      	cmp	r2, r3
 8011894:	bf0c      	ite	eq
 8011896:	2301      	moveq	r3, #1
 8011898:	2300      	movne	r3, #0
 801189a:	b2db      	uxtb	r3, r3
 801189c:	461a      	mov	r2, r3
 801189e:	79fb      	ldrb	r3, [r7, #7]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d0a0      	beq.n	80117e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b0a3      	sub	sp, #140	; 0x8c
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	4613      	mov	r3, r2
 80118bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	68ba      	ldr	r2, [r7, #8]
 80118c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	88fa      	ldrh	r2, [r7, #6]
 80118c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	88fa      	ldrh	r2, [r7, #6]
 80118d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2200      	movs	r2, #0
 80118d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118e2:	d10e      	bne.n	8011902 <UART_Start_Receive_IT+0x52>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d105      	bne.n	80118f8 <UART_Start_Receive_IT+0x48>
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80118f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80118f6:	e02d      	b.n	8011954 <UART_Start_Receive_IT+0xa4>
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	22ff      	movs	r2, #255	; 0xff
 80118fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011900:	e028      	b.n	8011954 <UART_Start_Receive_IT+0xa4>
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10d      	bne.n	8011926 <UART_Start_Receive_IT+0x76>
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	691b      	ldr	r3, [r3, #16]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d104      	bne.n	801191c <UART_Start_Receive_IT+0x6c>
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	22ff      	movs	r2, #255	; 0xff
 8011916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801191a:	e01b      	b.n	8011954 <UART_Start_Receive_IT+0xa4>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	227f      	movs	r2, #127	; 0x7f
 8011920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011924:	e016      	b.n	8011954 <UART_Start_Receive_IT+0xa4>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	689b      	ldr	r3, [r3, #8]
 801192a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801192e:	d10d      	bne.n	801194c <UART_Start_Receive_IT+0x9c>
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d104      	bne.n	8011942 <UART_Start_Receive_IT+0x92>
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	227f      	movs	r2, #127	; 0x7f
 801193c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011940:	e008      	b.n	8011954 <UART_Start_Receive_IT+0xa4>
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	223f      	movs	r2, #63	; 0x3f
 8011946:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801194a:	e003      	b.n	8011954 <UART_Start_Receive_IT+0xa4>
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2200      	movs	r2, #0
 8011950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2200      	movs	r2, #0
 8011958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2222      	movs	r2, #34	; 0x22
 8011960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	3308      	adds	r3, #8
 801196a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801196e:	e853 3f00 	ldrex	r3, [r3]
 8011972:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011976:	f043 0301 	orr.w	r3, r3, #1
 801197a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	3308      	adds	r3, #8
 8011984:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011988:	673a      	str	r2, [r7, #112]	; 0x70
 801198a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801198e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011990:	e841 2300 	strex	r3, r2, [r1]
 8011994:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011998:	2b00      	cmp	r3, #0
 801199a:	d1e3      	bne.n	8011964 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119a4:	d14f      	bne.n	8011a46 <UART_Start_Receive_IT+0x196>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80119ac:	88fa      	ldrh	r2, [r7, #6]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d349      	bcc.n	8011a46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	689b      	ldr	r3, [r3, #8]
 80119b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119ba:	d107      	bne.n	80119cc <UART_Start_Receive_IT+0x11c>
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d103      	bne.n	80119cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	4a47      	ldr	r2, [pc, #284]	; (8011ae4 <UART_Start_Receive_IT+0x234>)
 80119c8:	675a      	str	r2, [r3, #116]	; 0x74
 80119ca:	e002      	b.n	80119d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	4a46      	ldr	r2, [pc, #280]	; (8011ae8 <UART_Start_Receive_IT+0x238>)
 80119d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	691b      	ldr	r3, [r3, #16]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d01a      	beq.n	8011a10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119e2:	e853 3f00 	ldrex	r3, [r3]
 80119e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80119e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	461a      	mov	r2, r3
 80119f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011a02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a04:	e841 2300 	strex	r3, r2, [r1]
 8011a08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1e4      	bne.n	80119da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	3308      	adds	r3, #8
 8011a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a1a:	e853 3f00 	ldrex	r3, [r3]
 8011a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	3308      	adds	r3, #8
 8011a2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011a30:	64ba      	str	r2, [r7, #72]	; 0x48
 8011a32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a38:	e841 2300 	strex	r3, r2, [r1]
 8011a3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d1e5      	bne.n	8011a10 <UART_Start_Receive_IT+0x160>
 8011a44:	e046      	b.n	8011ad4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a4e:	d107      	bne.n	8011a60 <UART_Start_Receive_IT+0x1b0>
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	691b      	ldr	r3, [r3, #16]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d103      	bne.n	8011a60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	4a24      	ldr	r2, [pc, #144]	; (8011aec <UART_Start_Receive_IT+0x23c>)
 8011a5c:	675a      	str	r2, [r3, #116]	; 0x74
 8011a5e:	e002      	b.n	8011a66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	4a23      	ldr	r2, [pc, #140]	; (8011af0 <UART_Start_Receive_IT+0x240>)
 8011a64:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	691b      	ldr	r3, [r3, #16]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d019      	beq.n	8011aa2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	e853 3f00 	ldrex	r3, [r3]
 8011a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011a82:	677b      	str	r3, [r7, #116]	; 0x74
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8011a8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a94:	e841 2300 	strex	r3, r2, [r1]
 8011a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1e6      	bne.n	8011a6e <UART_Start_Receive_IT+0x1be>
 8011aa0:	e018      	b.n	8011ad4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	e853 3f00 	ldrex	r3, [r3]
 8011aae:	613b      	str	r3, [r7, #16]
   return(result);
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	f043 0320 	orr.w	r3, r3, #32
 8011ab6:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	461a      	mov	r2, r3
 8011abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ac0:	623b      	str	r3, [r7, #32]
 8011ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac4:	69f9      	ldr	r1, [r7, #28]
 8011ac6:	6a3a      	ldr	r2, [r7, #32]
 8011ac8:	e841 2300 	strex	r3, r2, [r1]
 8011acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ace:	69bb      	ldr	r3, [r7, #24]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1e6      	bne.n	8011aa2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	378c      	adds	r7, #140	; 0x8c
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop
 8011ae4:	080124c9 	.word	0x080124c9
 8011ae8:	08012169 	.word	0x08012169
 8011aec:	08011fb1 	.word	0x08011fb1
 8011af0:	08011df9 	.word	0x08011df9

08011af4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b08f      	sub	sp, #60	; 0x3c
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	e853 3f00 	ldrex	r3, [r3]
 8011b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011b10:	637b      	str	r3, [r7, #52]	; 0x34
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	461a      	mov	r2, r3
 8011b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b22:	e841 2300 	strex	r3, r2, [r1]
 8011b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1e6      	bne.n	8011afc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	3308      	adds	r3, #8
 8011b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	e853 3f00 	ldrex	r3, [r3]
 8011b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011b44:	633b      	str	r3, [r7, #48]	; 0x30
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b4e:	61ba      	str	r2, [r7, #24]
 8011b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b52:	6979      	ldr	r1, [r7, #20]
 8011b54:	69ba      	ldr	r2, [r7, #24]
 8011b56:	e841 2300 	strex	r3, r2, [r1]
 8011b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1e5      	bne.n	8011b2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2220      	movs	r2, #32
 8011b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011b6a:	bf00      	nop
 8011b6c:	373c      	adds	r7, #60	; 0x3c
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
	...

08011b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b095      	sub	sp, #84	; 0x54
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b88:	e853 3f00 	ldrex	r3, [r3]
 8011b8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8011ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ba6:	e841 2300 	strex	r3, r2, [r1]
 8011baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1e6      	bne.n	8011b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3308      	adds	r3, #8
 8011bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bba:	6a3b      	ldr	r3, [r7, #32]
 8011bbc:	e853 3f00 	ldrex	r3, [r3]
 8011bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bc2:	69fa      	ldr	r2, [r7, #28]
 8011bc4:	4b1e      	ldr	r3, [pc, #120]	; (8011c40 <UART_EndRxTransfer+0xc8>)
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	3308      	adds	r3, #8
 8011bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bda:	e841 2300 	strex	r3, r2, [r1]
 8011bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1e5      	bne.n	8011bb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d118      	bne.n	8011c20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	e853 3f00 	ldrex	r3, [r3]
 8011bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	f023 0310 	bic.w	r3, r3, #16
 8011c02:	647b      	str	r3, [r7, #68]	; 0x44
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c0c:	61bb      	str	r3, [r7, #24]
 8011c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c10:	6979      	ldr	r1, [r7, #20]
 8011c12:	69ba      	ldr	r2, [r7, #24]
 8011c14:	e841 2300 	strex	r3, r2, [r1]
 8011c18:	613b      	str	r3, [r7, #16]
   return(result);
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e6      	bne.n	8011bee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2220      	movs	r2, #32
 8011c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c34:	bf00      	nop
 8011c36:	3754      	adds	r7, #84	; 0x54
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr
 8011c40:	effffffe 	.word	0xeffffffe

08011c44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b090      	sub	sp, #64	; 0x40
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c50:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	69db      	ldr	r3, [r3, #28]
 8011c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c5a:	d037      	beq.n	8011ccc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	3308      	adds	r3, #8
 8011c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	e853 3f00 	ldrex	r3, [r3]
 8011c72:	623b      	str	r3, [r7, #32]
   return(result);
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	3308      	adds	r3, #8
 8011c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c84:	633a      	str	r2, [r7, #48]	; 0x30
 8011c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c8c:	e841 2300 	strex	r3, r2, [r1]
 8011c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d1e5      	bne.n	8011c64 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	e853 3f00 	ldrex	r3, [r3]
 8011ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cac:	637b      	str	r3, [r7, #52]	; 0x34
 8011cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb6:	61fb      	str	r3, [r7, #28]
 8011cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cba:	69b9      	ldr	r1, [r7, #24]
 8011cbc:	69fa      	ldr	r2, [r7, #28]
 8011cbe:	e841 2300 	strex	r3, r2, [r1]
 8011cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d1e6      	bne.n	8011c98 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011cca:	e002      	b.n	8011cd2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011ccc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cce:	f7f0 f9c1 	bl	8002054 <HAL_UART_TxCpltCallback>
}
 8011cd2:	bf00      	nop
 8011cd4:	3740      	adds	r7, #64	; 0x40
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b084      	sub	sp, #16
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f7fe fe9f 	bl	8010a2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cee:	bf00      	nop
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b086      	sub	sp, #24
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	689b      	ldr	r3, [r3, #8]
 8011d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d1e:	2b80      	cmp	r3, #128	; 0x80
 8011d20:	d109      	bne.n	8011d36 <UART_DMAError+0x40>
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	2b21      	cmp	r3, #33	; 0x21
 8011d26:	d106      	bne.n	8011d36 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011d30:	6978      	ldr	r0, [r7, #20]
 8011d32:	f7ff fedf 	bl	8011af4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d40:	2b40      	cmp	r3, #64	; 0x40
 8011d42:	d109      	bne.n	8011d58 <UART_DMAError+0x62>
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2b22      	cmp	r3, #34	; 0x22
 8011d48:	d106      	bne.n	8011d58 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011d52:	6978      	ldr	r0, [r7, #20]
 8011d54:	f7ff ff10 	bl	8011b78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d5e:	f043 0210 	orr.w	r2, r3, #16
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d68:	6978      	ldr	r0, [r7, #20]
 8011d6a:	f7fe fe69 	bl	8010a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d6e:	bf00      	nop
 8011d70:	3718      	adds	r7, #24
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f7fe fe53 	bl	8010a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d9a:	bf00      	nop
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b088      	sub	sp, #32
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	e853 3f00 	ldrex	r3, [r3]
 8011db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dbe:	61fb      	str	r3, [r7, #28]
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	61bb      	str	r3, [r7, #24]
 8011dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dcc:	6979      	ldr	r1, [r7, #20]
 8011dce:	69ba      	ldr	r2, [r7, #24]
 8011dd0:	e841 2300 	strex	r3, r2, [r1]
 8011dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1e6      	bne.n	8011daa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2220      	movs	r2, #32
 8011de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7f0 f932 	bl	8002054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011df0:	bf00      	nop
 8011df2:	3720      	adds	r7, #32
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b09c      	sub	sp, #112	; 0x70
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e10:	2b22      	cmp	r3, #34	; 0x22
 8011e12:	f040 80be 	bne.w	8011f92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011e24:	b2d9      	uxtb	r1, r3
 8011e26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e30:	400a      	ands	r2, r1
 8011e32:	b2d2      	uxtb	r2, r2
 8011e34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e3a:	1c5a      	adds	r2, r3, #1
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f040 80a1 	bne.w	8011fa2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e68:	e853 3f00 	ldrex	r3, [r3]
 8011e6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e86:	e841 2300 	strex	r3, r2, [r1]
 8011e8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1e6      	bne.n	8011e60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	3308      	adds	r3, #8
 8011e98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9c:	e853 3f00 	ldrex	r3, [r3]
 8011ea0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ea4:	f023 0301 	bic.w	r3, r3, #1
 8011ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	3308      	adds	r3, #8
 8011eb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8011eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011eba:	e841 2300 	strex	r3, r2, [r1]
 8011ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d1e5      	bne.n	8011e92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2220      	movs	r2, #32
 8011eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4a33      	ldr	r2, [pc, #204]	; (8011fac <UART_RxISR_8BIT+0x1b4>)
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	d01f      	beq.n	8011f24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d018      	beq.n	8011f24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efa:	e853 3f00 	ldrex	r3, [r3]
 8011efe:	623b      	str	r3, [r7, #32]
   return(result);
 8011f00:	6a3b      	ldr	r3, [r7, #32]
 8011f02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011f06:	663b      	str	r3, [r7, #96]	; 0x60
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f10:	633b      	str	r3, [r7, #48]	; 0x30
 8011f12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f18:	e841 2300 	strex	r3, r2, [r1]
 8011f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1e6      	bne.n	8011ef2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d12e      	bne.n	8011f8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	e853 3f00 	ldrex	r3, [r3]
 8011f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f023 0310 	bic.w	r3, r3, #16
 8011f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f50:	61fb      	str	r3, [r7, #28]
 8011f52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f54:	69b9      	ldr	r1, [r7, #24]
 8011f56:	69fa      	ldr	r2, [r7, #28]
 8011f58:	e841 2300 	strex	r3, r2, [r1]
 8011f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1e6      	bne.n	8011f32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	f003 0310 	and.w	r3, r3, #16
 8011f6e:	2b10      	cmp	r3, #16
 8011f70:	d103      	bne.n	8011f7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2210      	movs	r2, #16
 8011f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f80:	4619      	mov	r1, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7fe fd66 	bl	8010a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f88:	e00b      	b.n	8011fa2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7ee fb7c 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8011f90:	e007      	b.n	8011fa2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	699a      	ldr	r2, [r3, #24]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f042 0208 	orr.w	r2, r2, #8
 8011fa0:	619a      	str	r2, [r3, #24]
}
 8011fa2:	bf00      	nop
 8011fa4:	3770      	adds	r7, #112	; 0x70
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	58000c00 	.word	0x58000c00

08011fb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b09c      	sub	sp, #112	; 0x70
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fc8:	2b22      	cmp	r3, #34	; 0x22
 8011fca:	f040 80be 	bne.w	801214a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fdc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011fde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ff2:	1c9a      	adds	r2, r3, #2
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	3b01      	subs	r3, #1
 8012002:	b29a      	uxth	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012010:	b29b      	uxth	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	f040 80a1 	bne.w	801215a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012020:	e853 3f00 	ldrex	r3, [r3]
 8012024:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801202c:	667b      	str	r3, [r7, #100]	; 0x64
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	461a      	mov	r2, r3
 8012034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012036:	657b      	str	r3, [r7, #84]	; 0x54
 8012038:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801203a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801203c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801203e:	e841 2300 	strex	r3, r2, [r1]
 8012042:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012046:	2b00      	cmp	r3, #0
 8012048:	d1e6      	bne.n	8012018 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	3308      	adds	r3, #8
 8012050:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012054:	e853 3f00 	ldrex	r3, [r3]
 8012058:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	f023 0301 	bic.w	r3, r3, #1
 8012060:	663b      	str	r3, [r7, #96]	; 0x60
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	3308      	adds	r3, #8
 8012068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801206a:	643a      	str	r2, [r7, #64]	; 0x40
 801206c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801206e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012070:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012072:	e841 2300 	strex	r3, r2, [r1]
 8012076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207a:	2b00      	cmp	r3, #0
 801207c:	d1e5      	bne.n	801204a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2220      	movs	r2, #32
 8012082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2200      	movs	r2, #0
 801208a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	4a33      	ldr	r2, [pc, #204]	; (8012164 <UART_RxISR_16BIT+0x1b4>)
 8012098:	4293      	cmp	r3, r2
 801209a:	d01f      	beq.n	80120dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d018      	beq.n	80120dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	e853 3f00 	ldrex	r3, [r3]
 80120b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80120be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	461a      	mov	r2, r3
 80120c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120d0:	e841 2300 	strex	r3, r2, [r1]
 80120d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1e6      	bne.n	80120aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d12e      	bne.n	8012142 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	e853 3f00 	ldrex	r3, [r3]
 80120f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	f023 0310 	bic.w	r3, r3, #16
 80120fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	461a      	mov	r2, r3
 8012106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012108:	61bb      	str	r3, [r7, #24]
 801210a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801210c:	6979      	ldr	r1, [r7, #20]
 801210e:	69ba      	ldr	r2, [r7, #24]
 8012110:	e841 2300 	strex	r3, r2, [r1]
 8012114:	613b      	str	r3, [r7, #16]
   return(result);
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1e6      	bne.n	80120ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	69db      	ldr	r3, [r3, #28]
 8012122:	f003 0310 	and.w	r3, r3, #16
 8012126:	2b10      	cmp	r3, #16
 8012128:	d103      	bne.n	8012132 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2210      	movs	r2, #16
 8012130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012138:	4619      	mov	r1, r3
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7fe fc8a 	bl	8010a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012140:	e00b      	b.n	801215a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7ee faa0 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012148:	e007      	b.n	801215a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	699a      	ldr	r2, [r3, #24]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f042 0208 	orr.w	r2, r2, #8
 8012158:	619a      	str	r2, [r3, #24]
}
 801215a:	bf00      	nop
 801215c:	3770      	adds	r7, #112	; 0x70
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	58000c00 	.word	0x58000c00

08012168 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b0ac      	sub	sp, #176	; 0xb0
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012176:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	69db      	ldr	r3, [r3, #28]
 8012180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	689b      	ldr	r3, [r3, #8]
 8012194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801219e:	2b22      	cmp	r3, #34	; 0x22
 80121a0:	f040 8180 	bne.w	80124a4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121ae:	e123      	b.n	80123f8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80121ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80121be:	b2d9      	uxtb	r1, r3
 80121c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80121c4:	b2da      	uxtb	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ca:	400a      	ands	r2, r1
 80121cc:	b2d2      	uxtb	r2, r2
 80121ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121d4:	1c5a      	adds	r2, r3, #1
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	3b01      	subs	r3, #1
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	69db      	ldr	r3, [r3, #28]
 80121f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80121f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80121fa:	f003 0307 	and.w	r3, r3, #7
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d053      	beq.n	80122aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012206:	f003 0301 	and.w	r3, r3, #1
 801220a:	2b00      	cmp	r3, #0
 801220c:	d011      	beq.n	8012232 <UART_RxISR_8BIT_FIFOEN+0xca>
 801220e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00b      	beq.n	8012232 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2201      	movs	r2, #1
 8012220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012228:	f043 0201 	orr.w	r2, r3, #1
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012236:	f003 0302 	and.w	r3, r3, #2
 801223a:	2b00      	cmp	r3, #0
 801223c:	d011      	beq.n	8012262 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801223e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00b      	beq.n	8012262 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2202      	movs	r2, #2
 8012250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012258:	f043 0204 	orr.w	r2, r3, #4
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012266:	f003 0304 	and.w	r3, r3, #4
 801226a:	2b00      	cmp	r3, #0
 801226c:	d011      	beq.n	8012292 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801226e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012272:	f003 0301 	and.w	r3, r3, #1
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00b      	beq.n	8012292 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2204      	movs	r2, #4
 8012280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012288:	f043 0202 	orr.w	r2, r3, #2
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012298:	2b00      	cmp	r3, #0
 801229a:	d006      	beq.n	80122aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7fe fbcf 	bl	8010a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f040 80a0 	bne.w	80123f8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122c0:	e853 3f00 	ldrex	r3, [r3]
 80122c4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80122c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	461a      	mov	r2, r3
 80122d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80122da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80122dc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80122e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80122e2:	e841 2300 	strex	r3, r2, [r1]
 80122e6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80122e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d1e4      	bne.n	80122b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	3308      	adds	r3, #8
 80122f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122f8:	e853 3f00 	ldrex	r3, [r3]
 80122fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80122fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012300:	4b6e      	ldr	r3, [pc, #440]	; (80124bc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012302:	4013      	ands	r3, r2
 8012304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	3308      	adds	r3, #8
 801230e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012312:	66ba      	str	r2, [r7, #104]	; 0x68
 8012314:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012316:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012318:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801231a:	e841 2300 	strex	r3, r2, [r1]
 801231e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1e3      	bne.n	80122ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2220      	movs	r2, #32
 801232a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2200      	movs	r2, #0
 8012332:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2200      	movs	r2, #0
 8012338:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4a60      	ldr	r2, [pc, #384]	; (80124c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d021      	beq.n	8012388 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801234e:	2b00      	cmp	r3, #0
 8012350:	d01a      	beq.n	8012388 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801235a:	e853 3f00 	ldrex	r3, [r3]
 801235e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012362:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	461a      	mov	r2, r3
 8012370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012374:	657b      	str	r3, [r7, #84]	; 0x54
 8012376:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012378:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801237a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801237c:	e841 2300 	strex	r3, r2, [r1]
 8012380:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1e4      	bne.n	8012352 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801238c:	2b01      	cmp	r3, #1
 801238e:	d130      	bne.n	80123f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801239e:	e853 3f00 	ldrex	r3, [r3]
 80123a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80123a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a6:	f023 0310 	bic.w	r3, r3, #16
 80123aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123b8:	643b      	str	r3, [r7, #64]	; 0x40
 80123ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80123be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123c0:	e841 2300 	strex	r3, r2, [r1]
 80123c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80123c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d1e4      	bne.n	8012396 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	69db      	ldr	r3, [r3, #28]
 80123d2:	f003 0310 	and.w	r3, r3, #16
 80123d6:	2b10      	cmp	r3, #16
 80123d8:	d103      	bne.n	80123e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2210      	movs	r2, #16
 80123e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123e8:	4619      	mov	r1, r3
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7fe fb32 	bl	8010a54 <HAL_UARTEx_RxEventCallback>
 80123f0:	e002      	b.n	80123f8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7ee f948 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80123f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d006      	beq.n	801240e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012404:	f003 0320 	and.w	r3, r3, #32
 8012408:	2b00      	cmp	r3, #0
 801240a:	f47f aed1 	bne.w	80121b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012414:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012418:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801241c:	2b00      	cmp	r3, #0
 801241e:	d049      	beq.n	80124b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012426:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801242a:	429a      	cmp	r2, r3
 801242c:	d242      	bcs.n	80124b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3308      	adds	r3, #8
 8012434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012436:	6a3b      	ldr	r3, [r7, #32]
 8012438:	e853 3f00 	ldrex	r3, [r3]
 801243c:	61fb      	str	r3, [r7, #28]
   return(result);
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	3308      	adds	r3, #8
 801244e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801245a:	e841 2300 	strex	r3, r2, [r1]
 801245e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1e3      	bne.n	801242e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4a16      	ldr	r2, [pc, #88]	; (80124c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801246a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	e853 3f00 	ldrex	r3, [r3]
 8012478:	60bb      	str	r3, [r7, #8]
   return(result);
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	f043 0320 	orr.w	r3, r3, #32
 8012480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	461a      	mov	r2, r3
 801248a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801248e:	61bb      	str	r3, [r7, #24]
 8012490:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012492:	6979      	ldr	r1, [r7, #20]
 8012494:	69ba      	ldr	r2, [r7, #24]
 8012496:	e841 2300 	strex	r3, r2, [r1]
 801249a:	613b      	str	r3, [r7, #16]
   return(result);
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1e4      	bne.n	801246c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124a2:	e007      	b.n	80124b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	699a      	ldr	r2, [r3, #24]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f042 0208 	orr.w	r2, r2, #8
 80124b2:	619a      	str	r2, [r3, #24]
}
 80124b4:	bf00      	nop
 80124b6:	37b0      	adds	r7, #176	; 0xb0
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	effffffe 	.word	0xeffffffe
 80124c0:	58000c00 	.word	0x58000c00
 80124c4:	08011df9 	.word	0x08011df9

080124c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b0ae      	sub	sp, #184	; 0xb8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	69db      	ldr	r3, [r3, #28]
 80124e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	689b      	ldr	r3, [r3, #8]
 80124f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124fe:	2b22      	cmp	r3, #34	; 0x22
 8012500:	f040 8184 	bne.w	801280c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801250a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801250e:	e127      	b.n	8012760 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012516:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801251e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012522:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012526:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801252a:	4013      	ands	r3, r2
 801252c:	b29a      	uxth	r2, r3
 801252e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012532:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012538:	1c9a      	adds	r2, r3, #2
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012544:	b29b      	uxth	r3, r3
 8012546:	3b01      	subs	r3, #1
 8012548:	b29a      	uxth	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	69db      	ldr	r3, [r3, #28]
 8012556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801255a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801255e:	f003 0307 	and.w	r3, r3, #7
 8012562:	2b00      	cmp	r3, #0
 8012564:	d053      	beq.n	801260e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801256a:	f003 0301 	and.w	r3, r3, #1
 801256e:	2b00      	cmp	r3, #0
 8012570:	d011      	beq.n	8012596 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801257a:	2b00      	cmp	r3, #0
 801257c:	d00b      	beq.n	8012596 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2201      	movs	r2, #1
 8012584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801258c:	f043 0201 	orr.w	r2, r3, #1
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801259a:	f003 0302 	and.w	r3, r3, #2
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d011      	beq.n	80125c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80125a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125a6:	f003 0301 	and.w	r3, r3, #1
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d00b      	beq.n	80125c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2202      	movs	r2, #2
 80125b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125bc:	f043 0204 	orr.w	r2, r3, #4
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80125ca:	f003 0304 	and.w	r3, r3, #4
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d011      	beq.n	80125f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80125d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125d6:	f003 0301 	and.w	r3, r3, #1
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00b      	beq.n	80125f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	2204      	movs	r2, #4
 80125e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125ec:	f043 0202 	orr.w	r2, r3, #2
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d006      	beq.n	801260e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7fe fa1d 	bl	8010a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2200      	movs	r2, #0
 801260a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012614:	b29b      	uxth	r3, r3
 8012616:	2b00      	cmp	r3, #0
 8012618:	f040 80a2 	bne.w	8012760 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012624:	e853 3f00 	ldrex	r3, [r3]
 8012628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801262a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	461a      	mov	r2, r3
 801263a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801263e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012642:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801264a:	e841 2300 	strex	r3, r2, [r1]
 801264e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1e2      	bne.n	801261c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	3308      	adds	r3, #8
 801265c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012660:	e853 3f00 	ldrex	r3, [r3]
 8012664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012668:	4b6e      	ldr	r3, [pc, #440]	; (8012824 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801266a:	4013      	ands	r3, r2
 801266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	3308      	adds	r3, #8
 8012676:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801267a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801267c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801267e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012682:	e841 2300 	strex	r3, r2, [r1]
 8012686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801268a:	2b00      	cmp	r3, #0
 801268c:	d1e3      	bne.n	8012656 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2220      	movs	r2, #32
 8012692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2200      	movs	r2, #0
 801269a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2200      	movs	r2, #0
 80126a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a60      	ldr	r2, [pc, #384]	; (8012828 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d021      	beq.n	80126f0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d01a      	beq.n	80126f0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c2:	e853 3f00 	ldrex	r3, [r3]
 80126c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80126c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80126ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	461a      	mov	r2, r3
 80126d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80126de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80126e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126e4:	e841 2300 	strex	r3, r2, [r1]
 80126e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80126ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1e4      	bne.n	80126ba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126f4:	2b01      	cmp	r3, #1
 80126f6:	d130      	bne.n	801275a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2200      	movs	r2, #0
 80126fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012706:	e853 3f00 	ldrex	r3, [r3]
 801270a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270e:	f023 0310 	bic.w	r3, r3, #16
 8012712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	461a      	mov	r2, r3
 801271c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012720:	647b      	str	r3, [r7, #68]	; 0x44
 8012722:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012728:	e841 2300 	strex	r3, r2, [r1]
 801272c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012730:	2b00      	cmp	r3, #0
 8012732:	d1e4      	bne.n	80126fe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	69db      	ldr	r3, [r3, #28]
 801273a:	f003 0310 	and.w	r3, r3, #16
 801273e:	2b10      	cmp	r3, #16
 8012740:	d103      	bne.n	801274a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2210      	movs	r2, #16
 8012748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012750:	4619      	mov	r1, r3
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7fe f97e 	bl	8010a54 <HAL_UARTEx_RxEventCallback>
 8012758:	e002      	b.n	8012760 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ed ff94 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012760:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012764:	2b00      	cmp	r3, #0
 8012766:	d006      	beq.n	8012776 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801276c:	f003 0320 	and.w	r3, r3, #32
 8012770:	2b00      	cmp	r3, #0
 8012772:	f47f aecd 	bne.w	8012510 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801277c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012780:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012784:	2b00      	cmp	r3, #0
 8012786:	d049      	beq.n	801281c <UART_RxISR_16BIT_FIFOEN+0x354>
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801278e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012792:	429a      	cmp	r2, r3
 8012794:	d242      	bcs.n	801281c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	3308      	adds	r3, #8
 801279c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a0:	e853 3f00 	ldrex	r3, [r3]
 80127a4:	623b      	str	r3, [r7, #32]
   return(result);
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80127ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	3308      	adds	r3, #8
 80127b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80127ba:	633a      	str	r2, [r7, #48]	; 0x30
 80127bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127c2:	e841 2300 	strex	r3, r2, [r1]
 80127c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80127c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1e3      	bne.n	8012796 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4a16      	ldr	r2, [pc, #88]	; (801282c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80127d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	e853 3f00 	ldrex	r3, [r3]
 80127e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	f043 0320 	orr.w	r3, r3, #32
 80127e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	461a      	mov	r2, r3
 80127f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127f6:	61fb      	str	r3, [r7, #28]
 80127f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127fa:	69b9      	ldr	r1, [r7, #24]
 80127fc:	69fa      	ldr	r2, [r7, #28]
 80127fe:	e841 2300 	strex	r3, r2, [r1]
 8012802:	617b      	str	r3, [r7, #20]
   return(result);
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d1e4      	bne.n	80127d4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801280a:	e007      	b.n	801281c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	699a      	ldr	r2, [r3, #24]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f042 0208 	orr.w	r2, r2, #8
 801281a:	619a      	str	r2, [r3, #24]
}
 801281c:	bf00      	nop
 801281e:	37b8      	adds	r7, #184	; 0xb8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	effffffe 	.word	0xeffffffe
 8012828:	58000c00 	.word	0x58000c00
 801282c:	08011fb1 	.word	0x08011fb1

08012830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012830:	b480      	push	{r7}
 8012832:	b083      	sub	sp, #12
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012838:	bf00      	nop
 801283a:	370c      	adds	r7, #12
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr

08012844 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801284c:	bf00      	nop
 801284e:	370c      	adds	r7, #12
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012860:	bf00      	nop
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 801286c:	b480      	push	{r7}
 801286e:	b089      	sub	sp, #36	; 0x24
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801287a:	2b01      	cmp	r3, #1
 801287c:	d101      	bne.n	8012882 <HAL_UARTEx_EnableStopMode+0x16>
 801287e:	2302      	movs	r3, #2
 8012880:	e021      	b.n	80128c6 <HAL_UARTEx_EnableStopMode+0x5a>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2201      	movs	r2, #1
 8012886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	e853 3f00 	ldrex	r3, [r3]
 8012896:	60bb      	str	r3, [r7, #8]
   return(result);
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	f043 0302 	orr.w	r3, r3, #2
 801289e:	61fb      	str	r3, [r7, #28]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	461a      	mov	r2, r3
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	61bb      	str	r3, [r7, #24]
 80128aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ac:	6979      	ldr	r1, [r7, #20]
 80128ae:	69ba      	ldr	r2, [r7, #24]
 80128b0:	e841 2300 	strex	r3, r2, [r1]
 80128b4:	613b      	str	r3, [r7, #16]
   return(result);
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1e6      	bne.n	801288a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3724      	adds	r7, #36	; 0x24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b084      	sub	sp, #16
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d101      	bne.n	80128e8 <HAL_UARTEx_EnableFifoMode+0x16>
 80128e4:	2302      	movs	r3, #2
 80128e6:	e02b      	b.n	8012940 <HAL_UARTEx_EnableFifoMode+0x6e>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2201      	movs	r2, #1
 80128ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2224      	movs	r2, #36	; 0x24
 80128f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f022 0201 	bic.w	r2, r2, #1
 801290e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012916:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801291e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f8c3 	bl	8012ab4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2220      	movs	r2, #32
 8012932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801293e:	2300      	movs	r3, #0
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012956:	2b01      	cmp	r3, #1
 8012958:	d101      	bne.n	801295e <HAL_UARTEx_DisableFifoMode+0x16>
 801295a:	2302      	movs	r3, #2
 801295c:	e027      	b.n	80129ae <HAL_UARTEx_DisableFifoMode+0x66>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2201      	movs	r2, #1
 8012962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2224      	movs	r2, #36	; 0x24
 801296a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f022 0201 	bic.w	r2, r2, #1
 8012984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801298c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2200      	movs	r2, #0
 8012992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	68fa      	ldr	r2, [r7, #12]
 801299a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2220      	movs	r2, #32
 80129a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2200      	movs	r2, #0
 80129a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3714      	adds	r7, #20
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b084      	sub	sp, #16
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
 80129c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d101      	bne.n	80129d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80129ce:	2302      	movs	r3, #2
 80129d0:	e02d      	b.n	8012a2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2201      	movs	r2, #1
 80129d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2224      	movs	r2, #36	; 0x24
 80129de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f022 0201 	bic.w	r2, r2, #1
 80129f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	689b      	ldr	r3, [r3, #8]
 8012a00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	683a      	ldr	r2, [r7, #0]
 8012a0a:	430a      	orrs	r2, r1
 8012a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f850 	bl	8012ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2220      	movs	r2, #32
 8012a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a2c:	2300      	movs	r3, #0
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3710      	adds	r7, #16
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}

08012a36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b084      	sub	sp, #16
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
 8012a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	d101      	bne.n	8012a4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012a4a:	2302      	movs	r3, #2
 8012a4c:	e02d      	b.n	8012aaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2201      	movs	r2, #1
 8012a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2224      	movs	r2, #36	; 0x24
 8012a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f022 0201 	bic.w	r2, r2, #1
 8012a74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	430a      	orrs	r2, r1
 8012a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f000 f812 	bl	8012ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2220      	movs	r2, #32
 8012a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3710      	adds	r7, #16
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
	...

08012ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b085      	sub	sp, #20
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d108      	bne.n	8012ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2201      	movs	r2, #1
 8012ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ad4:	e031      	b.n	8012b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012ad6:	2310      	movs	r3, #16
 8012ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ada:	2310      	movs	r3, #16
 8012adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	689b      	ldr	r3, [r3, #8]
 8012ae4:	0e5b      	lsrs	r3, r3, #25
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	f003 0307 	and.w	r3, r3, #7
 8012aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	689b      	ldr	r3, [r3, #8]
 8012af4:	0f5b      	lsrs	r3, r3, #29
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	f003 0307 	and.w	r3, r3, #7
 8012afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012afe:	7bbb      	ldrb	r3, [r7, #14]
 8012b00:	7b3a      	ldrb	r2, [r7, #12]
 8012b02:	4911      	ldr	r1, [pc, #68]	; (8012b48 <UARTEx_SetNbDataToProcess+0x94>)
 8012b04:	5c8a      	ldrb	r2, [r1, r2]
 8012b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012b0a:	7b3a      	ldrb	r2, [r7, #12]
 8012b0c:	490f      	ldr	r1, [pc, #60]	; (8012b4c <UARTEx_SetNbDataToProcess+0x98>)
 8012b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b1c:	7bfb      	ldrb	r3, [r7, #15]
 8012b1e:	7b7a      	ldrb	r2, [r7, #13]
 8012b20:	4909      	ldr	r1, [pc, #36]	; (8012b48 <UARTEx_SetNbDataToProcess+0x94>)
 8012b22:	5c8a      	ldrb	r2, [r1, r2]
 8012b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012b28:	7b7a      	ldrb	r2, [r7, #13]
 8012b2a:	4908      	ldr	r1, [pc, #32]	; (8012b4c <UARTEx_SetNbDataToProcess+0x98>)
 8012b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012b3a:	bf00      	nop
 8012b3c:	3714      	adds	r7, #20
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	08017494 	.word	0x08017494
 8012b4c:	0801749c 	.word	0x0801749c

08012b50 <__NVIC_SetPriority>:
{
 8012b50:	b480      	push	{r7}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	6039      	str	r1, [r7, #0]
 8012b5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	db0a      	blt.n	8012b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	b2da      	uxtb	r2, r3
 8012b68:	490c      	ldr	r1, [pc, #48]	; (8012b9c <__NVIC_SetPriority+0x4c>)
 8012b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b6e:	0112      	lsls	r2, r2, #4
 8012b70:	b2d2      	uxtb	r2, r2
 8012b72:	440b      	add	r3, r1
 8012b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012b78:	e00a      	b.n	8012b90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	b2da      	uxtb	r2, r3
 8012b7e:	4908      	ldr	r1, [pc, #32]	; (8012ba0 <__NVIC_SetPriority+0x50>)
 8012b80:	88fb      	ldrh	r3, [r7, #6]
 8012b82:	f003 030f 	and.w	r3, r3, #15
 8012b86:	3b04      	subs	r3, #4
 8012b88:	0112      	lsls	r2, r2, #4
 8012b8a:	b2d2      	uxtb	r2, r2
 8012b8c:	440b      	add	r3, r1
 8012b8e:	761a      	strb	r2, [r3, #24]
}
 8012b90:	bf00      	nop
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr
 8012b9c:	e000e100 	.word	0xe000e100
 8012ba0:	e000ed00 	.word	0xe000ed00

08012ba4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012ba8:	4b05      	ldr	r3, [pc, #20]	; (8012bc0 <SysTick_Handler+0x1c>)
 8012baa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012bac:	f002 fc92 	bl	80154d4 <xTaskGetSchedulerState>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d001      	beq.n	8012bba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012bb6:	f003 faaf 	bl	8016118 <xPortSysTickHandler>
  }
}
 8012bba:	bf00      	nop
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	e000e010 	.word	0xe000e010

08012bc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012bc8:	2100      	movs	r1, #0
 8012bca:	f06f 0004 	mvn.w	r0, #4
 8012bce:	f7ff ffbf 	bl	8012b50 <__NVIC_SetPriority>
#endif
}
 8012bd2:	bf00      	nop
 8012bd4:	bd80      	pop	{r7, pc}
	...

08012bd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012bd8:	b480      	push	{r7}
 8012bda:	b083      	sub	sp, #12
 8012bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bde:	f3ef 8305 	mrs	r3, IPSR
 8012be2:	603b      	str	r3, [r7, #0]
  return(result);
 8012be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d003      	beq.n	8012bf2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012bea:	f06f 0305 	mvn.w	r3, #5
 8012bee:	607b      	str	r3, [r7, #4]
 8012bf0:	e00c      	b.n	8012c0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012bf2:	4b0a      	ldr	r3, [pc, #40]	; (8012c1c <osKernelInitialize+0x44>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d105      	bne.n	8012c06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012bfa:	4b08      	ldr	r3, [pc, #32]	; (8012c1c <osKernelInitialize+0x44>)
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012c00:	2300      	movs	r3, #0
 8012c02:	607b      	str	r3, [r7, #4]
 8012c04:	e002      	b.n	8012c0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012c0c:	687b      	ldr	r3, [r7, #4]
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	370c      	adds	r7, #12
 8012c12:	46bd      	mov	sp, r7
 8012c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c18:	4770      	bx	lr
 8012c1a:	bf00      	nop
 8012c1c:	2400110c 	.word	0x2400110c

08012c20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c26:	f3ef 8305 	mrs	r3, IPSR
 8012c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8012c2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d003      	beq.n	8012c3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8012c32:	f06f 0305 	mvn.w	r3, #5
 8012c36:	607b      	str	r3, [r7, #4]
 8012c38:	e010      	b.n	8012c5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012c3a:	4b0b      	ldr	r3, [pc, #44]	; (8012c68 <osKernelStart+0x48>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d109      	bne.n	8012c56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012c42:	f7ff ffbf 	bl	8012bc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012c46:	4b08      	ldr	r3, [pc, #32]	; (8012c68 <osKernelStart+0x48>)
 8012c48:	2202      	movs	r2, #2
 8012c4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012c4c:	f001 ff54 	bl	8014af8 <vTaskStartScheduler>
      stat = osOK;
 8012c50:	2300      	movs	r3, #0
 8012c52:	607b      	str	r3, [r7, #4]
 8012c54:	e002      	b.n	8012c5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012c5c:	687b      	ldr	r3, [r7, #4]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3708      	adds	r7, #8
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	2400110c 	.word	0x2400110c

08012c6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b08e      	sub	sp, #56	; 0x38
 8012c70:	af04      	add	r7, sp, #16
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c7c:	f3ef 8305 	mrs	r3, IPSR
 8012c80:	617b      	str	r3, [r7, #20]
  return(result);
 8012c82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d17e      	bne.n	8012d86 <osThreadNew+0x11a>
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d07b      	beq.n	8012d86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012c8e:	2380      	movs	r3, #128	; 0x80
 8012c90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012c92:	2318      	movs	r3, #24
 8012c94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012c96:	2300      	movs	r3, #0
 8012c98:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d045      	beq.n	8012d32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d002      	beq.n	8012cb4 <osThreadNew+0x48>
        name = attr->name;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	699b      	ldr	r3, [r3, #24]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d002      	beq.n	8012cc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	699b      	ldr	r3, [r3, #24]
 8012cc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012cc2:	69fb      	ldr	r3, [r7, #28]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d008      	beq.n	8012cda <osThreadNew+0x6e>
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	2b38      	cmp	r3, #56	; 0x38
 8012ccc:	d805      	bhi.n	8012cda <osThreadNew+0x6e>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	f003 0301 	and.w	r3, r3, #1
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d001      	beq.n	8012cde <osThreadNew+0x72>
        return (NULL);
 8012cda:	2300      	movs	r3, #0
 8012cdc:	e054      	b.n	8012d88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	695b      	ldr	r3, [r3, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d003      	beq.n	8012cee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	695b      	ldr	r3, [r3, #20]
 8012cea:	089b      	lsrs	r3, r3, #2
 8012cec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	689b      	ldr	r3, [r3, #8]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d00e      	beq.n	8012d14 <osThreadNew+0xa8>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	68db      	ldr	r3, [r3, #12]
 8012cfa:	2b5b      	cmp	r3, #91	; 0x5b
 8012cfc:	d90a      	bls.n	8012d14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d006      	beq.n	8012d14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	695b      	ldr	r3, [r3, #20]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d002      	beq.n	8012d14 <osThreadNew+0xa8>
        mem = 1;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	61bb      	str	r3, [r7, #24]
 8012d12:	e010      	b.n	8012d36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d10c      	bne.n	8012d36 <osThreadNew+0xca>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d108      	bne.n	8012d36 <osThreadNew+0xca>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	691b      	ldr	r3, [r3, #16]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d104      	bne.n	8012d36 <osThreadNew+0xca>
          mem = 0;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	61bb      	str	r3, [r7, #24]
 8012d30:	e001      	b.n	8012d36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	d110      	bne.n	8012d5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012d44:	9202      	str	r2, [sp, #8]
 8012d46:	9301      	str	r3, [sp, #4]
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	6a3a      	ldr	r2, [r7, #32]
 8012d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f001 fbe0 	bl	8014518 <xTaskCreateStatic>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	613b      	str	r3, [r7, #16]
 8012d5c:	e013      	b.n	8012d86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d110      	bne.n	8012d86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012d64:	6a3b      	ldr	r3, [r7, #32]
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	f107 0310 	add.w	r3, r7, #16
 8012d6c:	9301      	str	r3, [sp, #4]
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f001 fc2b 	bl	80145d2 <xTaskCreate>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d001      	beq.n	8012d86 <osThreadNew+0x11a>
            hTask = NULL;
 8012d82:	2300      	movs	r3, #0
 8012d84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012d86:	693b      	ldr	r3, [r7, #16]
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3728      	adds	r7, #40	; 0x28
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d96:	f3ef 8305 	mrs	r3, IPSR
 8012d9a:	603b      	str	r3, [r7, #0]
  return(result);
 8012d9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d003      	beq.n	8012daa <osThreadYield+0x1a>
    stat = osErrorISR;
 8012da2:	f06f 0305 	mvn.w	r3, #5
 8012da6:	607b      	str	r3, [r7, #4]
 8012da8:	e009      	b.n	8012dbe <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012daa:	2300      	movs	r3, #0
 8012dac:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012dae:	4b07      	ldr	r3, [pc, #28]	; (8012dcc <osThreadYield+0x3c>)
 8012db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012db4:	601a      	str	r2, [r3, #0]
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012dbe:	687b      	ldr	r3, [r7, #4]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	e000ed04 	.word	0xe000ed04

08012dd0 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b086      	sub	sp, #24
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ddc:	f3ef 8305 	mrs	r3, IPSR
 8012de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012de2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d003      	beq.n	8012df0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012de8:	f06f 0305 	mvn.w	r3, #5
 8012dec:	617b      	str	r3, [r7, #20]
 8012dee:	e00b      	b.n	8012e08 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d103      	bne.n	8012dfe <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012df6:	f06f 0303 	mvn.w	r3, #3
 8012dfa:	617b      	str	r3, [r7, #20]
 8012dfc:	e004      	b.n	8012e08 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012e02:	6938      	ldr	r0, [r7, #16]
 8012e04:	f001 fd5e 	bl	80148c4 <vTaskSuspend>
  }

  return (stat);
 8012e08:	697b      	ldr	r3, [r7, #20]
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3718      	adds	r7, #24
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b084      	sub	sp, #16
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e1a:	f3ef 8305 	mrs	r3, IPSR
 8012e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d003      	beq.n	8012e2e <osDelay+0x1c>
    stat = osErrorISR;
 8012e26:	f06f 0305 	mvn.w	r3, #5
 8012e2a:	60fb      	str	r3, [r7, #12]
 8012e2c:	e007      	b.n	8012e3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <osDelay+0x2c>
      vTaskDelay(ticks);
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f001 fd0f 	bl	801485c <vTaskDelay>
    }
  }

  return (stat);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3710      	adds	r7, #16
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b086      	sub	sp, #24
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012e50:	2300      	movs	r3, #0
 8012e52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e54:	f3ef 8305 	mrs	r3, IPSR
 8012e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e5a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d12d      	bne.n	8012ebc <osEventFlagsNew+0x74>
    mem = -1;
 8012e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e64:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d015      	beq.n	8012e98 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d006      	beq.n	8012e82 <osEventFlagsNew+0x3a>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	68db      	ldr	r3, [r3, #12]
 8012e78:	2b1f      	cmp	r3, #31
 8012e7a:	d902      	bls.n	8012e82 <osEventFlagsNew+0x3a>
        mem = 1;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	613b      	str	r3, [r7, #16]
 8012e80:	e00c      	b.n	8012e9c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d108      	bne.n	8012e9c <osEventFlagsNew+0x54>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d104      	bne.n	8012e9c <osEventFlagsNew+0x54>
          mem = 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	613b      	str	r3, [r7, #16]
 8012e96:	e001      	b.n	8012e9c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d106      	bne.n	8012eb0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	689b      	ldr	r3, [r3, #8]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 fa70 	bl	801338c <xEventGroupCreateStatic>
 8012eac:	6178      	str	r0, [r7, #20]
 8012eae:	e005      	b.n	8012ebc <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d102      	bne.n	8012ebc <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012eb6:	f000 faa0 	bl	80133fa <xEventGroupCreate>
 8012eba:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012ebc:	697b      	ldr	r3, [r7, #20]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3718      	adds	r7, #24
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
	...

08012ec8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b086      	sub	sp, #24
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d004      	beq.n	8012ee6 <osEventFlagsSet+0x1e>
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d003      	beq.n	8012eee <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012ee6:	f06f 0303 	mvn.w	r3, #3
 8012eea:	617b      	str	r3, [r7, #20]
 8012eec:	e028      	b.n	8012f40 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012eee:	f3ef 8305 	mrs	r3, IPSR
 8012ef2:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ef4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d01d      	beq.n	8012f36 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012efa:	2300      	movs	r3, #0
 8012efc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012efe:	f107 0308 	add.w	r3, r7, #8
 8012f02:	461a      	mov	r2, r3
 8012f04:	6839      	ldr	r1, [r7, #0]
 8012f06:	6938      	ldr	r0, [r7, #16]
 8012f08:	f000 fc98 	bl	801383c <xEventGroupSetBitsFromISR>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d103      	bne.n	8012f1a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012f12:	f06f 0302 	mvn.w	r3, #2
 8012f16:	617b      	str	r3, [r7, #20]
 8012f18:	e012      	b.n	8012f40 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d00d      	beq.n	8012f40 <osEventFlagsSet+0x78>
 8012f24:	4b09      	ldr	r3, [pc, #36]	; (8012f4c <osEventFlagsSet+0x84>)
 8012f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f2a:	601a      	str	r2, [r3, #0]
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	f3bf 8f6f 	isb	sy
 8012f34:	e004      	b.n	8012f40 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012f36:	6839      	ldr	r1, [r7, #0]
 8012f38:	6938      	ldr	r0, [r7, #16]
 8012f3a:	f000 fbb7 	bl	80136ac <xEventGroupSetBits>
 8012f3e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012f40:	697b      	ldr	r3, [r7, #20]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3718      	adds	r7, #24
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	e000ed04 	.word	0xe000ed04

08012f50 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d004      	beq.n	8012f6e <osEventFlagsClear+0x1e>
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d003      	beq.n	8012f76 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012f6e:	f06f 0303 	mvn.w	r3, #3
 8012f72:	617b      	str	r3, [r7, #20]
 8012f74:	e019      	b.n	8012faa <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f76:	f3ef 8305 	mrs	r3, IPSR
 8012f7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d00e      	beq.n	8012fa0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8012f82:	6938      	ldr	r0, [r7, #16]
 8012f84:	f000 fb6e 	bl	8013664 <xEventGroupGetBitsFromISR>
 8012f88:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8012f8a:	6839      	ldr	r1, [r7, #0]
 8012f8c:	6938      	ldr	r0, [r7, #16]
 8012f8e:	f000 fb55 	bl	801363c <xEventGroupClearBitsFromISR>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d108      	bne.n	8012faa <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8012f98:	f06f 0302 	mvn.w	r3, #2
 8012f9c:	617b      	str	r3, [r7, #20]
 8012f9e:	e004      	b.n	8012faa <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6938      	ldr	r0, [r7, #16]
 8012fa4:	f000 fb12 	bl	80135cc <xEventGroupClearBits>
 8012fa8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012faa:	697b      	ldr	r3, [r7, #20]
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3718      	adds	r7, #24
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b086      	sub	sp, #24
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d102      	bne.n	8012fcc <osEventFlagsGet+0x18>
    rflags = 0U;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	617b      	str	r3, [r7, #20]
 8012fca:	e00f      	b.n	8012fec <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fcc:	f3ef 8305 	mrs	r3, IPSR
 8012fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012fd2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d004      	beq.n	8012fe2 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8012fd8:	6938      	ldr	r0, [r7, #16]
 8012fda:	f000 fb43 	bl	8013664 <xEventGroupGetBitsFromISR>
 8012fde:	6178      	str	r0, [r7, #20]
 8012fe0:	e004      	b.n	8012fec <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	6938      	ldr	r0, [r7, #16]
 8012fe6:	f000 faf1 	bl	80135cc <xEventGroupClearBits>
 8012fea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012fec:	697b      	ldr	r3, [r7, #20]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3718      	adds	r7, #24
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b08c      	sub	sp, #48	; 0x30
 8012ffa:	af02      	add	r7, sp, #8
 8012ffc:	60f8      	str	r0, [r7, #12]
 8012ffe:	60b9      	str	r1, [r7, #8]
 8013000:	607a      	str	r2, [r7, #4]
 8013002:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d004      	beq.n	8013018 <osEventFlagsWait+0x22>
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013014:	2b00      	cmp	r3, #0
 8013016:	d003      	beq.n	8013020 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013018:	f06f 0303 	mvn.w	r3, #3
 801301c:	61fb      	str	r3, [r7, #28]
 801301e:	e04b      	b.n	80130b8 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013020:	f3ef 8305 	mrs	r3, IPSR
 8013024:	617b      	str	r3, [r7, #20]
  return(result);
 8013026:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013028:	2b00      	cmp	r3, #0
 801302a:	d003      	beq.n	8013034 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801302c:	f06f 0305 	mvn.w	r3, #5
 8013030:	61fb      	str	r3, [r7, #28]
 8013032:	e041      	b.n	80130b8 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f003 0301 	and.w	r3, r3, #1
 801303a:	2b00      	cmp	r3, #0
 801303c:	d002      	beq.n	8013044 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801303e:	2301      	movs	r3, #1
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
 8013042:	e001      	b.n	8013048 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013044:	2300      	movs	r3, #0
 8013046:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f003 0302 	and.w	r3, r3, #2
 801304e:	2b00      	cmp	r3, #0
 8013050:	d002      	beq.n	8013058 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013052:	2300      	movs	r3, #0
 8013054:	623b      	str	r3, [r7, #32]
 8013056:	e001      	b.n	801305c <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013058:	2301      	movs	r3, #1
 801305a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	6a3a      	ldr	r2, [r7, #32]
 8013064:	68b9      	ldr	r1, [r7, #8]
 8013066:	69b8      	ldr	r0, [r7, #24]
 8013068:	f000 f9e2 	bl	8013430 <xEventGroupWaitBits>
 801306c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	2b00      	cmp	r3, #0
 8013076:	d010      	beq.n	801309a <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	4013      	ands	r3, r2
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	429a      	cmp	r2, r3
 8013082:	d019      	beq.n	80130b8 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d003      	beq.n	8013092 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801308a:	f06f 0301 	mvn.w	r3, #1
 801308e:	61fb      	str	r3, [r7, #28]
 8013090:	e012      	b.n	80130b8 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013092:	f06f 0302 	mvn.w	r3, #2
 8013096:	61fb      	str	r3, [r7, #28]
 8013098:	e00e      	b.n	80130b8 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801309a:	68ba      	ldr	r2, [r7, #8]
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	4013      	ands	r3, r2
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d109      	bne.n	80130b8 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d003      	beq.n	80130b2 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80130aa:	f06f 0301 	mvn.w	r3, #1
 80130ae:	61fb      	str	r3, [r7, #28]
 80130b0:	e002      	b.n	80130b8 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80130b2:	f06f 0302 	mvn.w	r3, #2
 80130b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80130b8:	69fb      	ldr	r3, [r7, #28]
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3728      	adds	r7, #40	; 0x28
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b08a      	sub	sp, #40	; 0x28
 80130c6:	af02      	add	r7, sp, #8
 80130c8:	60f8      	str	r0, [r7, #12]
 80130ca:	60b9      	str	r1, [r7, #8]
 80130cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80130ce:	2300      	movs	r3, #0
 80130d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130d2:	f3ef 8305 	mrs	r3, IPSR
 80130d6:	613b      	str	r3, [r7, #16]
  return(result);
 80130d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d15f      	bne.n	801319e <osMessageQueueNew+0xdc>
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d05c      	beq.n	801319e <osMessageQueueNew+0xdc>
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d059      	beq.n	801319e <osMessageQueueNew+0xdc>
    mem = -1;
 80130ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d029      	beq.n	801314a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d012      	beq.n	8013124 <osMessageQueueNew+0x62>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	2b4f      	cmp	r3, #79	; 0x4f
 8013104:	d90e      	bls.n	8013124 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801310a:	2b00      	cmp	r3, #0
 801310c:	d00a      	beq.n	8013124 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	695a      	ldr	r2, [r3, #20]
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	68b9      	ldr	r1, [r7, #8]
 8013116:	fb01 f303 	mul.w	r3, r1, r3
 801311a:	429a      	cmp	r2, r3
 801311c:	d302      	bcc.n	8013124 <osMessageQueueNew+0x62>
        mem = 1;
 801311e:	2301      	movs	r3, #1
 8013120:	61bb      	str	r3, [r7, #24]
 8013122:	e014      	b.n	801314e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	689b      	ldr	r3, [r3, #8]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d110      	bne.n	801314e <osMessageQueueNew+0x8c>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10c      	bne.n	801314e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013138:	2b00      	cmp	r3, #0
 801313a:	d108      	bne.n	801314e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <osMessageQueueNew+0x8c>
          mem = 0;
 8013144:	2300      	movs	r3, #0
 8013146:	61bb      	str	r3, [r7, #24]
 8013148:	e001      	b.n	801314e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d10b      	bne.n	801316c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	691a      	ldr	r2, [r3, #16]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	689b      	ldr	r3, [r3, #8]
 801315c:	2100      	movs	r1, #0
 801315e:	9100      	str	r1, [sp, #0]
 8013160:	68b9      	ldr	r1, [r7, #8]
 8013162:	68f8      	ldr	r0, [r7, #12]
 8013164:	f000 fc9a 	bl	8013a9c <xQueueGenericCreateStatic>
 8013168:	61f8      	str	r0, [r7, #28]
 801316a:	e008      	b.n	801317e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d105      	bne.n	801317e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013172:	2200      	movs	r2, #0
 8013174:	68b9      	ldr	r1, [r7, #8]
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f000 fd08 	bl	8013b8c <xQueueGenericCreate>
 801317c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00c      	beq.n	801319e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d003      	beq.n	8013192 <osMessageQueueNew+0xd0>
        name = attr->name;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	617b      	str	r3, [r7, #20]
 8013190:	e001      	b.n	8013196 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013192:	2300      	movs	r3, #0
 8013194:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013196:	6979      	ldr	r1, [r7, #20]
 8013198:	69f8      	ldr	r0, [r7, #28]
 801319a:	f001 f95f 	bl	801445c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801319e:	69fb      	ldr	r3, [r7, #28]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3720      	adds	r7, #32
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b088      	sub	sp, #32
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	603b      	str	r3, [r7, #0]
 80131b4:	4613      	mov	r3, r2
 80131b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80131bc:	2300      	movs	r3, #0
 80131be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131c0:	f3ef 8305 	mrs	r3, IPSR
 80131c4:	617b      	str	r3, [r7, #20]
  return(result);
 80131c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d028      	beq.n	801321e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d005      	beq.n	80131de <osMessageQueuePut+0x36>
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d002      	beq.n	80131de <osMessageQueuePut+0x36>
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80131de:	f06f 0303 	mvn.w	r3, #3
 80131e2:	61fb      	str	r3, [r7, #28]
 80131e4:	e038      	b.n	8013258 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80131e6:	2300      	movs	r3, #0
 80131e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80131ea:	f107 0210 	add.w	r2, r7, #16
 80131ee:	2300      	movs	r3, #0
 80131f0:	68b9      	ldr	r1, [r7, #8]
 80131f2:	69b8      	ldr	r0, [r7, #24]
 80131f4:	f000 fe26 	bl	8013e44 <xQueueGenericSendFromISR>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d003      	beq.n	8013206 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80131fe:	f06f 0302 	mvn.w	r3, #2
 8013202:	61fb      	str	r3, [r7, #28]
 8013204:	e028      	b.n	8013258 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d025      	beq.n	8013258 <osMessageQueuePut+0xb0>
 801320c:	4b15      	ldr	r3, [pc, #84]	; (8013264 <osMessageQueuePut+0xbc>)
 801320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	f3bf 8f6f 	isb	sy
 801321c:	e01c      	b.n	8013258 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d002      	beq.n	801322a <osMessageQueuePut+0x82>
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d103      	bne.n	8013232 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801322a:	f06f 0303 	mvn.w	r3, #3
 801322e:	61fb      	str	r3, [r7, #28]
 8013230:	e012      	b.n	8013258 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013232:	2300      	movs	r3, #0
 8013234:	683a      	ldr	r2, [r7, #0]
 8013236:	68b9      	ldr	r1, [r7, #8]
 8013238:	69b8      	ldr	r0, [r7, #24]
 801323a:	f000 fd05 	bl	8013c48 <xQueueGenericSend>
 801323e:	4603      	mov	r3, r0
 8013240:	2b01      	cmp	r3, #1
 8013242:	d009      	beq.n	8013258 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d003      	beq.n	8013252 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801324a:	f06f 0301 	mvn.w	r3, #1
 801324e:	61fb      	str	r3, [r7, #28]
 8013250:	e002      	b.n	8013258 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013252:	f06f 0302 	mvn.w	r3, #2
 8013256:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013258:	69fb      	ldr	r3, [r7, #28]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3720      	adds	r7, #32
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	e000ed04 	.word	0xe000ed04

08013268 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013268:	b580      	push	{r7, lr}
 801326a:	b088      	sub	sp, #32
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
 8013274:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801327a:	2300      	movs	r3, #0
 801327c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801327e:	f3ef 8305 	mrs	r3, IPSR
 8013282:	617b      	str	r3, [r7, #20]
  return(result);
 8013284:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013286:	2b00      	cmp	r3, #0
 8013288:	d028      	beq.n	80132dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d005      	beq.n	801329c <osMessageQueueGet+0x34>
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <osMessageQueueGet+0x34>
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d003      	beq.n	80132a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801329c:	f06f 0303 	mvn.w	r3, #3
 80132a0:	61fb      	str	r3, [r7, #28]
 80132a2:	e037      	b.n	8013314 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80132a4:	2300      	movs	r3, #0
 80132a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80132a8:	f107 0310 	add.w	r3, r7, #16
 80132ac:	461a      	mov	r2, r3
 80132ae:	68b9      	ldr	r1, [r7, #8]
 80132b0:	69b8      	ldr	r0, [r7, #24]
 80132b2:	f000 ff43 	bl	801413c <xQueueReceiveFromISR>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d003      	beq.n	80132c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80132bc:	f06f 0302 	mvn.w	r3, #2
 80132c0:	61fb      	str	r3, [r7, #28]
 80132c2:	e027      	b.n	8013314 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d024      	beq.n	8013314 <osMessageQueueGet+0xac>
 80132ca:	4b15      	ldr	r3, [pc, #84]	; (8013320 <osMessageQueueGet+0xb8>)
 80132cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132d0:	601a      	str	r2, [r3, #0]
 80132d2:	f3bf 8f4f 	dsb	sy
 80132d6:	f3bf 8f6f 	isb	sy
 80132da:	e01b      	b.n	8013314 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d002      	beq.n	80132e8 <osMessageQueueGet+0x80>
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d103      	bne.n	80132f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80132e8:	f06f 0303 	mvn.w	r3, #3
 80132ec:	61fb      	str	r3, [r7, #28]
 80132ee:	e011      	b.n	8013314 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80132f0:	683a      	ldr	r2, [r7, #0]
 80132f2:	68b9      	ldr	r1, [r7, #8]
 80132f4:	69b8      	ldr	r0, [r7, #24]
 80132f6:	f000 fe41 	bl	8013f7c <xQueueReceive>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d009      	beq.n	8013314 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d003      	beq.n	801330e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013306:	f06f 0301 	mvn.w	r3, #1
 801330a:	61fb      	str	r3, [r7, #28]
 801330c:	e002      	b.n	8013314 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801330e:	f06f 0302 	mvn.w	r3, #2
 8013312:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013314:	69fb      	ldr	r3, [r7, #28]
}
 8013316:	4618      	mov	r0, r3
 8013318:	3720      	adds	r7, #32
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	e000ed04 	.word	0xe000ed04

08013324 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013324:	b480      	push	{r7}
 8013326:	b085      	sub	sp, #20
 8013328:	af00      	add	r7, sp, #0
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	60b9      	str	r1, [r7, #8]
 801332e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	4a07      	ldr	r2, [pc, #28]	; (8013350 <vApplicationGetIdleTaskMemory+0x2c>)
 8013334:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	4a06      	ldr	r2, [pc, #24]	; (8013354 <vApplicationGetIdleTaskMemory+0x30>)
 801333a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2280      	movs	r2, #128	; 0x80
 8013340:	601a      	str	r2, [r3, #0]
}
 8013342:	bf00      	nop
 8013344:	3714      	adds	r7, #20
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	24001110 	.word	0x24001110
 8013354:	2400116c 	.word	0x2400116c

08013358 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	4a07      	ldr	r2, [pc, #28]	; (8013384 <vApplicationGetTimerTaskMemory+0x2c>)
 8013368:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	4a06      	ldr	r2, [pc, #24]	; (8013388 <vApplicationGetTimerTaskMemory+0x30>)
 801336e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013376:	601a      	str	r2, [r3, #0]
}
 8013378:	bf00      	nop
 801337a:	3714      	adds	r7, #20
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr
 8013384:	2400136c 	.word	0x2400136c
 8013388:	240013c8 	.word	0x240013c8

0801338c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d10a      	bne.n	80133b0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801339e:	f383 8811 	msr	BASEPRI, r3
 80133a2:	f3bf 8f6f 	isb	sy
 80133a6:	f3bf 8f4f 	dsb	sy
 80133aa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80133ac:	bf00      	nop
 80133ae:	e7fe      	b.n	80133ae <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80133b0:	2320      	movs	r3, #32
 80133b2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	2b20      	cmp	r3, #32
 80133b8:	d00a      	beq.n	80133d0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80133ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133be:	f383 8811 	msr	BASEPRI, r3
 80133c2:	f3bf 8f6f 	isb	sy
 80133c6:	f3bf 8f4f 	dsb	sy
 80133ca:	60fb      	str	r3, [r7, #12]
}
 80133cc:	bf00      	nop
 80133ce:	e7fe      	b.n	80133ce <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00a      	beq.n	80133f0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	2200      	movs	r2, #0
 80133de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	3304      	adds	r3, #4
 80133e4:	4618      	mov	r0, r3
 80133e6:	f000 fa3d 	bl	8013864 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	2201      	movs	r2, #1
 80133ee:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80133f0:	697b      	ldr	r3, [r7, #20]
	}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3718      	adds	r7, #24
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80133fa:	b580      	push	{r7, lr}
 80133fc:	b082      	sub	sp, #8
 80133fe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013400:	2020      	movs	r0, #32
 8013402:	f002 ff19 	bl	8016238 <pvPortMalloc>
 8013406:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d00a      	beq.n	8013424 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	3304      	adds	r3, #4
 8013418:	4618      	mov	r0, r3
 801341a:	f000 fa23 	bl	8013864 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2200      	movs	r2, #0
 8013422:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013424:	687b      	ldr	r3, [r7, #4]
	}
 8013426:	4618      	mov	r0, r3
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
	...

08013430 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b090      	sub	sp, #64	; 0x40
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	607a      	str	r2, [r7, #4]
 801343c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013442:	2300      	movs	r3, #0
 8013444:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013446:	2300      	movs	r3, #0
 8013448:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d10a      	bne.n	8013466 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013454:	f383 8811 	msr	BASEPRI, r3
 8013458:	f3bf 8f6f 	isb	sy
 801345c:	f3bf 8f4f 	dsb	sy
 8013460:	623b      	str	r3, [r7, #32]
}
 8013462:	bf00      	nop
 8013464:	e7fe      	b.n	8013464 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801346c:	2b00      	cmp	r3, #0
 801346e:	d00a      	beq.n	8013486 <xEventGroupWaitBits+0x56>
	__asm volatile
 8013470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013474:	f383 8811 	msr	BASEPRI, r3
 8013478:	f3bf 8f6f 	isb	sy
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	61fb      	str	r3, [r7, #28]
}
 8013482:	bf00      	nop
 8013484:	e7fe      	b.n	8013484 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d10a      	bne.n	80134a2 <xEventGroupWaitBits+0x72>
	__asm volatile
 801348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013490:	f383 8811 	msr	BASEPRI, r3
 8013494:	f3bf 8f6f 	isb	sy
 8013498:	f3bf 8f4f 	dsb	sy
 801349c:	61bb      	str	r3, [r7, #24]
}
 801349e:	bf00      	nop
 80134a0:	e7fe      	b.n	80134a0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134a2:	f002 f817 	bl	80154d4 <xTaskGetSchedulerState>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d102      	bne.n	80134b2 <xEventGroupWaitBits+0x82>
 80134ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d101      	bne.n	80134b6 <xEventGroupWaitBits+0x86>
 80134b2:	2301      	movs	r3, #1
 80134b4:	e000      	b.n	80134b8 <xEventGroupWaitBits+0x88>
 80134b6:	2300      	movs	r3, #0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d10a      	bne.n	80134d2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80134bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c0:	f383 8811 	msr	BASEPRI, r3
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	617b      	str	r3, [r7, #20]
}
 80134ce:	bf00      	nop
 80134d0:	e7fe      	b.n	80134d0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80134d2:	f001 fb77 	bl	8014bc4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80134d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	68b9      	ldr	r1, [r7, #8]
 80134e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134e2:	f000 f988 	bl	80137f6 <prvTestWaitCondition>
 80134e6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80134e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d00e      	beq.n	801350c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80134ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80134f2:	2300      	movs	r3, #0
 80134f4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d028      	beq.n	801354e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80134fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	43db      	mvns	r3, r3
 8013504:	401a      	ands	r2, r3
 8013506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	e020      	b.n	801354e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801350c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801350e:	2b00      	cmp	r3, #0
 8013510:	d104      	bne.n	801351c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013514:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013516:	2301      	movs	r3, #1
 8013518:	633b      	str	r3, [r7, #48]	; 0x30
 801351a:	e018      	b.n	801354e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d003      	beq.n	801352a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013528:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d003      	beq.n	8013538 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013536:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353a:	1d18      	adds	r0, r3, #4
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013540:	4313      	orrs	r3, r2
 8013542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013544:	4619      	mov	r1, r3
 8013546:	f001 fd3d 	bl	8014fc4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801354e:	f001 fb47 	bl	8014be0 <xTaskResumeAll>
 8013552:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013556:	2b00      	cmp	r3, #0
 8013558:	d031      	beq.n	80135be <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355c:	2b00      	cmp	r3, #0
 801355e:	d107      	bne.n	8013570 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013560:	4b19      	ldr	r3, [pc, #100]	; (80135c8 <xEventGroupWaitBits+0x198>)
 8013562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013566:	601a      	str	r2, [r3, #0]
 8013568:	f3bf 8f4f 	dsb	sy
 801356c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013570:	f002 f83c 	bl	80155ec <uxTaskResetEventItemValue>
 8013574:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801357c:	2b00      	cmp	r3, #0
 801357e:	d11a      	bne.n	80135b6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013580:	f002 fd38 	bl	8015ff4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801358a:	683a      	ldr	r2, [r7, #0]
 801358c:	68b9      	ldr	r1, [r7, #8]
 801358e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013590:	f000 f931 	bl	80137f6 <prvTestWaitCondition>
 8013594:	4603      	mov	r3, r0
 8013596:	2b00      	cmp	r3, #0
 8013598:	d009      	beq.n	80135ae <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d006      	beq.n	80135ae <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80135a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	43db      	mvns	r3, r3
 80135a8:	401a      	ands	r2, r3
 80135aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ac:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80135ae:	2301      	movs	r3, #1
 80135b0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80135b2:	f002 fd4f 	bl	8016054 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80135b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80135bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80135be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3740      	adds	r7, #64	; 0x40
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	e000ed04 	.word	0xe000ed04

080135cc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b086      	sub	sp, #24
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d10a      	bne.n	80135f6 <xEventGroupClearBits+0x2a>
	__asm volatile
 80135e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e4:	f383 8811 	msr	BASEPRI, r3
 80135e8:	f3bf 8f6f 	isb	sy
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	60fb      	str	r3, [r7, #12]
}
 80135f2:	bf00      	nop
 80135f4:	e7fe      	b.n	80135f4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00a      	beq.n	8013616 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013604:	f383 8811 	msr	BASEPRI, r3
 8013608:	f3bf 8f6f 	isb	sy
 801360c:	f3bf 8f4f 	dsb	sy
 8013610:	60bb      	str	r3, [r7, #8]
}
 8013612:	bf00      	nop
 8013614:	e7fe      	b.n	8013614 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013616:	f002 fced 	bl	8015ff4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	43db      	mvns	r3, r3
 8013628:	401a      	ands	r2, r3
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801362e:	f002 fd11 	bl	8016054 <vPortExitCritical>

	return uxReturn;
 8013632:	693b      	ldr	r3, [r7, #16]
}
 8013634:	4618      	mov	r0, r3
 8013636:	3718      	adds	r7, #24
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}

0801363c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013646:	2300      	movs	r3, #0
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	4804      	ldr	r0, [pc, #16]	; (8013660 <xEventGroupClearBitsFromISR+0x24>)
 801364e:	f002 fb87 	bl	8015d60 <xTimerPendFunctionCallFromISR>
 8013652:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013654:	68fb      	ldr	r3, [r7, #12]
	}
 8013656:	4618      	mov	r0, r3
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
 801365e:	bf00      	nop
 8013660:	080137dd 	.word	0x080137dd

08013664 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013664:	b480      	push	{r7}
 8013666:	b089      	sub	sp, #36	; 0x24
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013670:	f3ef 8211 	mrs	r2, BASEPRI
 8013674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013678:	f383 8811 	msr	BASEPRI, r3
 801367c:	f3bf 8f6f 	isb	sy
 8013680:	f3bf 8f4f 	dsb	sy
 8013684:	60fa      	str	r2, [r7, #12]
 8013686:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013688:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801368a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	617b      	str	r3, [r7, #20]
 8013692:	69bb      	ldr	r3, [r7, #24]
 8013694:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801369c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801369e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80136a0:	4618      	mov	r0, r3
 80136a2:	3724      	adds	r7, #36	; 0x24
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr

080136ac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b08e      	sub	sp, #56	; 0x38
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80136b6:	2300      	movs	r3, #0
 80136b8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80136be:	2300      	movs	r3, #0
 80136c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d10a      	bne.n	80136de <xEventGroupSetBits+0x32>
	__asm volatile
 80136c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136cc:	f383 8811 	msr	BASEPRI, r3
 80136d0:	f3bf 8f6f 	isb	sy
 80136d4:	f3bf 8f4f 	dsb	sy
 80136d8:	613b      	str	r3, [r7, #16]
}
 80136da:	bf00      	nop
 80136dc:	e7fe      	b.n	80136dc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d00a      	beq.n	80136fe <xEventGroupSetBits+0x52>
	__asm volatile
 80136e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ec:	f383 8811 	msr	BASEPRI, r3
 80136f0:	f3bf 8f6f 	isb	sy
 80136f4:	f3bf 8f4f 	dsb	sy
 80136f8:	60fb      	str	r3, [r7, #12]
}
 80136fa:	bf00      	nop
 80136fc:	e7fe      	b.n	80136fc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80136fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013700:	3304      	adds	r3, #4
 8013702:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013706:	3308      	adds	r3, #8
 8013708:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801370a:	f001 fa5b 	bl	8014bc4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	431a      	orrs	r2, r3
 801371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013720:	e03c      	b.n	801379c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801372e:	2300      	movs	r3, #0
 8013730:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013738:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013740:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013748:	2b00      	cmp	r3, #0
 801374a:	d108      	bne.n	801375e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	4013      	ands	r3, r2
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00b      	beq.n	8013770 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013758:	2301      	movs	r3, #1
 801375a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801375c:	e008      	b.n	8013770 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	4013      	ands	r3, r2
 8013766:	69ba      	ldr	r2, [r7, #24]
 8013768:	429a      	cmp	r2, r3
 801376a:	d101      	bne.n	8013770 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801376c:	2301      	movs	r3, #1
 801376e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	2b00      	cmp	r3, #0
 8013774:	d010      	beq.n	8013798 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801377c:	2b00      	cmp	r3, #0
 801377e:	d003      	beq.n	8013788 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	4313      	orrs	r3, r2
 8013786:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013790:	4619      	mov	r1, r3
 8013792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013794:	f001 fce2 	bl	801515c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801379c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801379e:	6a3b      	ldr	r3, [r7, #32]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d1be      	bne.n	8013722 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80137a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137aa:	43db      	mvns	r3, r3
 80137ac:	401a      	ands	r2, r3
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80137b2:	f001 fa15 	bl	8014be0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80137b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b8:	681b      	ldr	r3, [r3, #0]
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3738      	adds	r7, #56	; 0x38
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b082      	sub	sp, #8
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80137cc:	6839      	ldr	r1, [r7, #0]
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7ff ff6c 	bl	80136ac <xEventGroupSetBits>
}
 80137d4:	bf00      	nop
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80137e6:	6839      	ldr	r1, [r7, #0]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff feef 	bl	80135cc <xEventGroupClearBits>
}
 80137ee:	bf00      	nop
 80137f0:	3708      	adds	r7, #8
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}

080137f6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80137f6:	b480      	push	{r7}
 80137f8:	b087      	sub	sp, #28
 80137fa:	af00      	add	r7, sp, #0
 80137fc:	60f8      	str	r0, [r7, #12]
 80137fe:	60b9      	str	r1, [r7, #8]
 8013800:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013802:	2300      	movs	r3, #0
 8013804:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d107      	bne.n	801381c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801380c:	68fa      	ldr	r2, [r7, #12]
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	4013      	ands	r3, r2
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00a      	beq.n	801382c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013816:	2301      	movs	r3, #1
 8013818:	617b      	str	r3, [r7, #20]
 801381a:	e007      	b.n	801382c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	4013      	ands	r3, r2
 8013822:	68ba      	ldr	r2, [r7, #8]
 8013824:	429a      	cmp	r2, r3
 8013826:	d101      	bne.n	801382c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013828:	2301      	movs	r3, #1
 801382a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801382c:	697b      	ldr	r3, [r7, #20]
}
 801382e:	4618      	mov	r0, r3
 8013830:	371c      	adds	r7, #28
 8013832:	46bd      	mov	sp, r7
 8013834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013838:	4770      	bx	lr
	...

0801383c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	68ba      	ldr	r2, [r7, #8]
 801384c:	68f9      	ldr	r1, [r7, #12]
 801384e:	4804      	ldr	r0, [pc, #16]	; (8013860 <xEventGroupSetBitsFromISR+0x24>)
 8013850:	f002 fa86 	bl	8015d60 <xTimerPendFunctionCallFromISR>
 8013854:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013856:	697b      	ldr	r3, [r7, #20]
	}
 8013858:	4618      	mov	r0, r3
 801385a:	3718      	adds	r7, #24
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	080137c3 	.word	0x080137c3

08013864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f103 0208 	add.w	r2, r3, #8
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801387c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f103 0208 	add.w	r2, r3, #8
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f103 0208 	add.w	r2, r3, #8
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2200      	movs	r2, #0
 8013896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013898:	bf00      	nop
 801389a:	370c      	adds	r7, #12
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr

080138a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80138a4:	b480      	push	{r7}
 80138a6:	b083      	sub	sp, #12
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80138b2:	bf00      	nop
 80138b4:	370c      	adds	r7, #12
 80138b6:	46bd      	mov	sp, r7
 80138b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138bc:	4770      	bx	lr

080138be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138be:	b480      	push	{r7}
 80138c0:	b085      	sub	sp, #20
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	6078      	str	r0, [r7, #4]
 80138c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	689a      	ldr	r2, [r3, #8]
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	683a      	ldr	r2, [r7, #0]
 80138e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	683a      	ldr	r2, [r7, #0]
 80138e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	1c5a      	adds	r2, r3, #1
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	601a      	str	r2, [r3, #0]
}
 80138fa:	bf00      	nop
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr

08013906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013906:	b480      	push	{r7}
 8013908:	b085      	sub	sp, #20
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
 801390e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801391c:	d103      	bne.n	8013926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	691b      	ldr	r3, [r3, #16]
 8013922:	60fb      	str	r3, [r7, #12]
 8013924:	e00c      	b.n	8013940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	3308      	adds	r3, #8
 801392a:	60fb      	str	r3, [r7, #12]
 801392c:	e002      	b.n	8013934 <vListInsert+0x2e>
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	60fb      	str	r3, [r7, #12]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	68ba      	ldr	r2, [r7, #8]
 801393c:	429a      	cmp	r2, r3
 801393e:	d2f6      	bcs.n	801392e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	685a      	ldr	r2, [r3, #4]
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	683a      	ldr	r2, [r7, #0]
 801394e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	1c5a      	adds	r2, r3, #1
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	601a      	str	r2, [r3, #0]
}
 801396c:	bf00      	nop
 801396e:	3714      	adds	r7, #20
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013978:	b480      	push	{r7}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	691b      	ldr	r3, [r3, #16]
 8013984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	6892      	ldr	r2, [r2, #8]
 801398e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	6852      	ldr	r2, [r2, #4]
 8013998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d103      	bne.n	80139ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	689a      	ldr	r2, [r3, #8]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	1e5a      	subs	r2, r3, #1
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	681b      	ldr	r3, [r3, #0]
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3714      	adds	r7, #20
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr

080139cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d10a      	bne.n	80139f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80139e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e4:	f383 8811 	msr	BASEPRI, r3
 80139e8:	f3bf 8f6f 	isb	sy
 80139ec:	f3bf 8f4f 	dsb	sy
 80139f0:	60bb      	str	r3, [r7, #8]
}
 80139f2:	bf00      	nop
 80139f4:	e7fe      	b.n	80139f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80139f6:	f002 fafd 	bl	8015ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a02:	68f9      	ldr	r1, [r7, #12]
 8013a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013a06:	fb01 f303 	mul.w	r3, r1, r3
 8013a0a:	441a      	add	r2, r3
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a26:	3b01      	subs	r3, #1
 8013a28:	68f9      	ldr	r1, [r7, #12]
 8013a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013a2c:	fb01 f303 	mul.w	r3, r1, r3
 8013a30:	441a      	add	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	22ff      	movs	r2, #255	; 0xff
 8013a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	22ff      	movs	r2, #255	; 0xff
 8013a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d114      	bne.n	8013a76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	691b      	ldr	r3, [r3, #16]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d01a      	beq.n	8013a8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	3310      	adds	r3, #16
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f001 fb1b 	bl	8015094 <xTaskRemoveFromEventList>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d012      	beq.n	8013a8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013a64:	4b0c      	ldr	r3, [pc, #48]	; (8013a98 <xQueueGenericReset+0xcc>)
 8013a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	f3bf 8f6f 	isb	sy
 8013a74:	e009      	b.n	8013a8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	3310      	adds	r3, #16
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7ff fef2 	bl	8013864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	3324      	adds	r3, #36	; 0x24
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7ff feed 	bl	8013864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013a8a:	f002 fae3 	bl	8016054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013a8e:	2301      	movs	r3, #1
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3710      	adds	r7, #16
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	e000ed04 	.word	0xe000ed04

08013a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b08e      	sub	sp, #56	; 0x38
 8013aa0:	af02      	add	r7, sp, #8
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d10a      	bne.n	8013ac6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab4:	f383 8811 	msr	BASEPRI, r3
 8013ab8:	f3bf 8f6f 	isb	sy
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ac2:	bf00      	nop
 8013ac4:	e7fe      	b.n	8013ac4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d10a      	bne.n	8013ae2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad0:	f383 8811 	msr	BASEPRI, r3
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	f3bf 8f4f 	dsb	sy
 8013adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ade:	bf00      	nop
 8013ae0:	e7fe      	b.n	8013ae0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d002      	beq.n	8013aee <xQueueGenericCreateStatic+0x52>
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <xQueueGenericCreateStatic+0x56>
 8013aee:	2301      	movs	r3, #1
 8013af0:	e000      	b.n	8013af4 <xQueueGenericCreateStatic+0x58>
 8013af2:	2300      	movs	r3, #0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d10a      	bne.n	8013b0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afc:	f383 8811 	msr	BASEPRI, r3
 8013b00:	f3bf 8f6f 	isb	sy
 8013b04:	f3bf 8f4f 	dsb	sy
 8013b08:	623b      	str	r3, [r7, #32]
}
 8013b0a:	bf00      	nop
 8013b0c:	e7fe      	b.n	8013b0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d102      	bne.n	8013b1a <xQueueGenericCreateStatic+0x7e>
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d101      	bne.n	8013b1e <xQueueGenericCreateStatic+0x82>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e000      	b.n	8013b20 <xQueueGenericCreateStatic+0x84>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d10a      	bne.n	8013b3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b28:	f383 8811 	msr	BASEPRI, r3
 8013b2c:	f3bf 8f6f 	isb	sy
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	61fb      	str	r3, [r7, #28]
}
 8013b36:	bf00      	nop
 8013b38:	e7fe      	b.n	8013b38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013b3a:	2350      	movs	r3, #80	; 0x50
 8013b3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	2b50      	cmp	r3, #80	; 0x50
 8013b42:	d00a      	beq.n	8013b5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b48:	f383 8811 	msr	BASEPRI, r3
 8013b4c:	f3bf 8f6f 	isb	sy
 8013b50:	f3bf 8f4f 	dsb	sy
 8013b54:	61bb      	str	r3, [r7, #24]
}
 8013b56:	bf00      	nop
 8013b58:	e7fe      	b.n	8013b58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013b5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d00d      	beq.n	8013b82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b68:	2201      	movs	r2, #1
 8013b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b74:	9300      	str	r3, [sp, #0]
 8013b76:	4613      	mov	r3, r2
 8013b78:	687a      	ldr	r2, [r7, #4]
 8013b7a:	68b9      	ldr	r1, [r7, #8]
 8013b7c:	68f8      	ldr	r0, [r7, #12]
 8013b7e:	f000 f83f 	bl	8013c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3730      	adds	r7, #48	; 0x30
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b08a      	sub	sp, #40	; 0x28
 8013b90:	af02      	add	r7, sp, #8
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	4613      	mov	r3, r2
 8013b98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d10a      	bne.n	8013bb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	613b      	str	r3, [r7, #16]
}
 8013bb2:	bf00      	nop
 8013bb4:	e7fe      	b.n	8013bb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	68ba      	ldr	r2, [r7, #8]
 8013bba:	fb02 f303 	mul.w	r3, r2, r3
 8013bbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	3350      	adds	r3, #80	; 0x50
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f002 fb37 	bl	8016238 <pvPortMalloc>
 8013bca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d011      	beq.n	8013bf6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	3350      	adds	r3, #80	; 0x50
 8013bda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	2200      	movs	r2, #0
 8013be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013be4:	79fa      	ldrb	r2, [r7, #7]
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	4613      	mov	r3, r2
 8013bec:	697a      	ldr	r2, [r7, #20]
 8013bee:	68b9      	ldr	r1, [r7, #8]
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f000 f805 	bl	8013c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3720      	adds	r7, #32
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d103      	bne.n	8013c1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	69ba      	ldr	r2, [r7, #24]
 8013c18:	601a      	str	r2, [r3, #0]
 8013c1a:	e002      	b.n	8013c22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013c1c:	69bb      	ldr	r3, [r7, #24]
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	68ba      	ldr	r2, [r7, #8]
 8013c2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013c2e:	2101      	movs	r1, #1
 8013c30:	69b8      	ldr	r0, [r7, #24]
 8013c32:	f7ff fecb 	bl	80139cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013c36:	69bb      	ldr	r3, [r7, #24]
 8013c38:	78fa      	ldrb	r2, [r7, #3]
 8013c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013c3e:	bf00      	nop
 8013c40:	3710      	adds	r7, #16
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
	...

08013c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b08e      	sub	sp, #56	; 0x38
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
 8013c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013c56:	2300      	movs	r3, #0
 8013c58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d10a      	bne.n	8013c7a <xQueueGenericSend+0x32>
	__asm volatile
 8013c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c68:	f383 8811 	msr	BASEPRI, r3
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013c76:	bf00      	nop
 8013c78:	e7fe      	b.n	8013c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d103      	bne.n	8013c88 <xQueueGenericSend+0x40>
 8013c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d101      	bne.n	8013c8c <xQueueGenericSend+0x44>
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e000      	b.n	8013c8e <xQueueGenericSend+0x46>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d10a      	bne.n	8013ca8 <xQueueGenericSend+0x60>
	__asm volatile
 8013c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c96:	f383 8811 	msr	BASEPRI, r3
 8013c9a:	f3bf 8f6f 	isb	sy
 8013c9e:	f3bf 8f4f 	dsb	sy
 8013ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ca4:	bf00      	nop
 8013ca6:	e7fe      	b.n	8013ca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	2b02      	cmp	r3, #2
 8013cac:	d103      	bne.n	8013cb6 <xQueueGenericSend+0x6e>
 8013cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d101      	bne.n	8013cba <xQueueGenericSend+0x72>
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e000      	b.n	8013cbc <xQueueGenericSend+0x74>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d10a      	bne.n	8013cd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8013cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc4:	f383 8811 	msr	BASEPRI, r3
 8013cc8:	f3bf 8f6f 	isb	sy
 8013ccc:	f3bf 8f4f 	dsb	sy
 8013cd0:	623b      	str	r3, [r7, #32]
}
 8013cd2:	bf00      	nop
 8013cd4:	e7fe      	b.n	8013cd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013cd6:	f001 fbfd 	bl	80154d4 <xTaskGetSchedulerState>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d102      	bne.n	8013ce6 <xQueueGenericSend+0x9e>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d101      	bne.n	8013cea <xQueueGenericSend+0xa2>
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	e000      	b.n	8013cec <xQueueGenericSend+0xa4>
 8013cea:	2300      	movs	r3, #0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d10a      	bne.n	8013d06 <xQueueGenericSend+0xbe>
	__asm volatile
 8013cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf4:	f383 8811 	msr	BASEPRI, r3
 8013cf8:	f3bf 8f6f 	isb	sy
 8013cfc:	f3bf 8f4f 	dsb	sy
 8013d00:	61fb      	str	r3, [r7, #28]
}
 8013d02:	bf00      	nop
 8013d04:	e7fe      	b.n	8013d04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013d06:	f002 f975 	bl	8015ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d302      	bcc.n	8013d1c <xQueueGenericSend+0xd4>
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	2b02      	cmp	r3, #2
 8013d1a:	d129      	bne.n	8013d70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013d1c:	683a      	ldr	r2, [r7, #0]
 8013d1e:	68b9      	ldr	r1, [r7, #8]
 8013d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d22:	f000 fa8b 	bl	801423c <prvCopyDataToQueue>
 8013d26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d010      	beq.n	8013d52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d32:	3324      	adds	r3, #36	; 0x24
 8013d34:	4618      	mov	r0, r3
 8013d36:	f001 f9ad 	bl	8015094 <xTaskRemoveFromEventList>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d013      	beq.n	8013d68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013d40:	4b3f      	ldr	r3, [pc, #252]	; (8013e40 <xQueueGenericSend+0x1f8>)
 8013d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d46:	601a      	str	r2, [r3, #0]
 8013d48:	f3bf 8f4f 	dsb	sy
 8013d4c:	f3bf 8f6f 	isb	sy
 8013d50:	e00a      	b.n	8013d68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d007      	beq.n	8013d68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013d58:	4b39      	ldr	r3, [pc, #228]	; (8013e40 <xQueueGenericSend+0x1f8>)
 8013d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d5e:	601a      	str	r2, [r3, #0]
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013d68:	f002 f974 	bl	8016054 <vPortExitCritical>
				return pdPASS;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e063      	b.n	8013e38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d103      	bne.n	8013d7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d76:	f002 f96d 	bl	8016054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	e05c      	b.n	8013e38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d106      	bne.n	8013d92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d84:	f107 0314 	add.w	r3, r7, #20
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f001 fa49 	bl	8015220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d8e:	2301      	movs	r3, #1
 8013d90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d92:	f002 f95f 	bl	8016054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d96:	f000 ff15 	bl	8014bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d9a:	f002 f92b 	bl	8015ff4 <vPortEnterCritical>
 8013d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013da4:	b25b      	sxtb	r3, r3
 8013da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013daa:	d103      	bne.n	8013db4 <xQueueGenericSend+0x16c>
 8013dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dae:	2200      	movs	r2, #0
 8013db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013dba:	b25b      	sxtb	r3, r3
 8013dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dc0:	d103      	bne.n	8013dca <xQueueGenericSend+0x182>
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013dca:	f002 f943 	bl	8016054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013dce:	1d3a      	adds	r2, r7, #4
 8013dd0:	f107 0314 	add.w	r3, r7, #20
 8013dd4:	4611      	mov	r1, r2
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f001 fa38 	bl	801524c <xTaskCheckForTimeOut>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d124      	bne.n	8013e2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013de4:	f000 fb22 	bl	801442c <prvIsQueueFull>
 8013de8:	4603      	mov	r3, r0
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d018      	beq.n	8013e20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	3310      	adds	r3, #16
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	4611      	mov	r1, r2
 8013df6:	4618      	mov	r0, r3
 8013df8:	f001 f8c0 	bl	8014f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dfe:	f000 faad 	bl	801435c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013e02:	f000 feed 	bl	8014be0 <xTaskResumeAll>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f47f af7c 	bne.w	8013d06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013e0e:	4b0c      	ldr	r3, [pc, #48]	; (8013e40 <xQueueGenericSend+0x1f8>)
 8013e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e14:	601a      	str	r2, [r3, #0]
 8013e16:	f3bf 8f4f 	dsb	sy
 8013e1a:	f3bf 8f6f 	isb	sy
 8013e1e:	e772      	b.n	8013d06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e22:	f000 fa9b 	bl	801435c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013e26:	f000 fedb 	bl	8014be0 <xTaskResumeAll>
 8013e2a:	e76c      	b.n	8013d06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e2e:	f000 fa95 	bl	801435c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013e32:	f000 fed5 	bl	8014be0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3738      	adds	r7, #56	; 0x38
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	e000ed04 	.word	0xe000ed04

08013e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b090      	sub	sp, #64	; 0x40
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	60b9      	str	r1, [r7, #8]
 8013e4e:	607a      	str	r2, [r7, #4]
 8013e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d10a      	bne.n	8013e72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e60:	f383 8811 	msr	BASEPRI, r3
 8013e64:	f3bf 8f6f 	isb	sy
 8013e68:	f3bf 8f4f 	dsb	sy
 8013e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e6e:	bf00      	nop
 8013e70:	e7fe      	b.n	8013e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <xQueueGenericSendFromISR+0x3c>
 8013e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <xQueueGenericSendFromISR+0x40>
 8013e80:	2301      	movs	r3, #1
 8013e82:	e000      	b.n	8013e86 <xQueueGenericSendFromISR+0x42>
 8013e84:	2300      	movs	r3, #0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d10a      	bne.n	8013ea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e8e:	f383 8811 	msr	BASEPRI, r3
 8013e92:	f3bf 8f6f 	isb	sy
 8013e96:	f3bf 8f4f 	dsb	sy
 8013e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e9c:	bf00      	nop
 8013e9e:	e7fe      	b.n	8013e9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	2b02      	cmp	r3, #2
 8013ea4:	d103      	bne.n	8013eae <xQueueGenericSendFromISR+0x6a>
 8013ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	d101      	bne.n	8013eb2 <xQueueGenericSendFromISR+0x6e>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	e000      	b.n	8013eb4 <xQueueGenericSendFromISR+0x70>
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d10a      	bne.n	8013ece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebc:	f383 8811 	msr	BASEPRI, r3
 8013ec0:	f3bf 8f6f 	isb	sy
 8013ec4:	f3bf 8f4f 	dsb	sy
 8013ec8:	623b      	str	r3, [r7, #32]
}
 8013eca:	bf00      	nop
 8013ecc:	e7fe      	b.n	8013ecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ece:	f002 f973 	bl	80161b8 <vPortValidateInterruptPriority>
	__asm volatile
 8013ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8013ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eda:	f383 8811 	msr	BASEPRI, r3
 8013ede:	f3bf 8f6f 	isb	sy
 8013ee2:	f3bf 8f4f 	dsb	sy
 8013ee6:	61fa      	str	r2, [r7, #28]
 8013ee8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013eea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013eec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d302      	bcc.n	8013f00 <xQueueGenericSendFromISR+0xbc>
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	2b02      	cmp	r3, #2
 8013efe:	d12f      	bne.n	8013f60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f10:	683a      	ldr	r2, [r7, #0]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f16:	f000 f991 	bl	801423c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013f1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f22:	d112      	bne.n	8013f4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d016      	beq.n	8013f5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2e:	3324      	adds	r3, #36	; 0x24
 8013f30:	4618      	mov	r0, r3
 8013f32:	f001 f8af 	bl	8015094 <xTaskRemoveFromEventList>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d00e      	beq.n	8013f5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d00b      	beq.n	8013f5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2201      	movs	r2, #1
 8013f46:	601a      	str	r2, [r3, #0]
 8013f48:	e007      	b.n	8013f5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f4e:	3301      	adds	r3, #1
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	b25a      	sxtb	r2, r3
 8013f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013f5e:	e001      	b.n	8013f64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013f60:	2300      	movs	r3, #0
 8013f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f66:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	f383 8811 	msr	BASEPRI, r3
}
 8013f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3740      	adds	r7, #64	; 0x40
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
	...

08013f7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b08c      	sub	sp, #48	; 0x30
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10a      	bne.n	8013fac <xQueueReceive+0x30>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	623b      	str	r3, [r7, #32]
}
 8013fa8:	bf00      	nop
 8013faa:	e7fe      	b.n	8013faa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d103      	bne.n	8013fba <xQueueReceive+0x3e>
 8013fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <xQueueReceive+0x42>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e000      	b.n	8013fc0 <xQueueReceive+0x44>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d10a      	bne.n	8013fda <xQueueReceive+0x5e>
	__asm volatile
 8013fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc8:	f383 8811 	msr	BASEPRI, r3
 8013fcc:	f3bf 8f6f 	isb	sy
 8013fd0:	f3bf 8f4f 	dsb	sy
 8013fd4:	61fb      	str	r3, [r7, #28]
}
 8013fd6:	bf00      	nop
 8013fd8:	e7fe      	b.n	8013fd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013fda:	f001 fa7b 	bl	80154d4 <xTaskGetSchedulerState>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d102      	bne.n	8013fea <xQueueReceive+0x6e>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <xQueueReceive+0x72>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e000      	b.n	8013ff0 <xQueueReceive+0x74>
 8013fee:	2300      	movs	r3, #0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d10a      	bne.n	801400a <xQueueReceive+0x8e>
	__asm volatile
 8013ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff8:	f383 8811 	msr	BASEPRI, r3
 8013ffc:	f3bf 8f6f 	isb	sy
 8014000:	f3bf 8f4f 	dsb	sy
 8014004:	61bb      	str	r3, [r7, #24]
}
 8014006:	bf00      	nop
 8014008:	e7fe      	b.n	8014008 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801400a:	f001 fff3 	bl	8015ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014012:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014016:	2b00      	cmp	r3, #0
 8014018:	d01f      	beq.n	801405a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801401a:	68b9      	ldr	r1, [r7, #8]
 801401c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801401e:	f000 f977 	bl	8014310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	1e5a      	subs	r2, r3, #1
 8014026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402c:	691b      	ldr	r3, [r3, #16]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d00f      	beq.n	8014052 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	3310      	adds	r3, #16
 8014036:	4618      	mov	r0, r3
 8014038:	f001 f82c 	bl	8015094 <xTaskRemoveFromEventList>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d007      	beq.n	8014052 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014042:	4b3d      	ldr	r3, [pc, #244]	; (8014138 <xQueueReceive+0x1bc>)
 8014044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014048:	601a      	str	r2, [r3, #0]
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014052:	f001 ffff 	bl	8016054 <vPortExitCritical>
				return pdPASS;
 8014056:	2301      	movs	r3, #1
 8014058:	e069      	b.n	801412e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d103      	bne.n	8014068 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014060:	f001 fff8 	bl	8016054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014064:	2300      	movs	r3, #0
 8014066:	e062      	b.n	801412e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406a:	2b00      	cmp	r3, #0
 801406c:	d106      	bne.n	801407c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801406e:	f107 0310 	add.w	r3, r7, #16
 8014072:	4618      	mov	r0, r3
 8014074:	f001 f8d4 	bl	8015220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014078:	2301      	movs	r3, #1
 801407a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801407c:	f001 ffea 	bl	8016054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014080:	f000 fda0 	bl	8014bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014084:	f001 ffb6 	bl	8015ff4 <vPortEnterCritical>
 8014088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801408e:	b25b      	sxtb	r3, r3
 8014090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014094:	d103      	bne.n	801409e <xQueueReceive+0x122>
 8014096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014098:	2200      	movs	r2, #0
 801409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140a4:	b25b      	sxtb	r3, r3
 80140a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140aa:	d103      	bne.n	80140b4 <xQueueReceive+0x138>
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	2200      	movs	r2, #0
 80140b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80140b4:	f001 ffce 	bl	8016054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80140b8:	1d3a      	adds	r2, r7, #4
 80140ba:	f107 0310 	add.w	r3, r7, #16
 80140be:	4611      	mov	r1, r2
 80140c0:	4618      	mov	r0, r3
 80140c2:	f001 f8c3 	bl	801524c <xTaskCheckForTimeOut>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d123      	bne.n	8014114 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140ce:	f000 f997 	bl	8014400 <prvIsQueueEmpty>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d017      	beq.n	8014108 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80140d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140da:	3324      	adds	r3, #36	; 0x24
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	4611      	mov	r1, r2
 80140e0:	4618      	mov	r0, r3
 80140e2:	f000 ff4b 	bl	8014f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80140e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140e8:	f000 f938 	bl	801435c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80140ec:	f000 fd78 	bl	8014be0 <xTaskResumeAll>
 80140f0:	4603      	mov	r3, r0
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d189      	bne.n	801400a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80140f6:	4b10      	ldr	r3, [pc, #64]	; (8014138 <xQueueReceive+0x1bc>)
 80140f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140fc:	601a      	str	r2, [r3, #0]
 80140fe:	f3bf 8f4f 	dsb	sy
 8014102:	f3bf 8f6f 	isb	sy
 8014106:	e780      	b.n	801400a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801410a:	f000 f927 	bl	801435c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801410e:	f000 fd67 	bl	8014be0 <xTaskResumeAll>
 8014112:	e77a      	b.n	801400a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014116:	f000 f921 	bl	801435c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801411a:	f000 fd61 	bl	8014be0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801411e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014120:	f000 f96e 	bl	8014400 <prvIsQueueEmpty>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	f43f af6f 	beq.w	801400a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801412c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801412e:	4618      	mov	r0, r3
 8014130:	3730      	adds	r7, #48	; 0x30
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	e000ed04 	.word	0xe000ed04

0801413c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b08e      	sub	sp, #56	; 0x38
 8014140:	af00      	add	r7, sp, #0
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10a      	bne.n	8014168 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014156:	f383 8811 	msr	BASEPRI, r3
 801415a:	f3bf 8f6f 	isb	sy
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	623b      	str	r3, [r7, #32]
}
 8014164:	bf00      	nop
 8014166:	e7fe      	b.n	8014166 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d103      	bne.n	8014176 <xQueueReceiveFromISR+0x3a>
 801416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014172:	2b00      	cmp	r3, #0
 8014174:	d101      	bne.n	801417a <xQueueReceiveFromISR+0x3e>
 8014176:	2301      	movs	r3, #1
 8014178:	e000      	b.n	801417c <xQueueReceiveFromISR+0x40>
 801417a:	2300      	movs	r3, #0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d10a      	bne.n	8014196 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	61fb      	str	r3, [r7, #28]
}
 8014192:	bf00      	nop
 8014194:	e7fe      	b.n	8014194 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014196:	f002 f80f 	bl	80161b8 <vPortValidateInterruptPriority>
	__asm volatile
 801419a:	f3ef 8211 	mrs	r2, BASEPRI
 801419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a2:	f383 8811 	msr	BASEPRI, r3
 80141a6:	f3bf 8f6f 	isb	sy
 80141aa:	f3bf 8f4f 	dsb	sy
 80141ae:	61ba      	str	r2, [r7, #24]
 80141b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80141b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80141b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80141bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d02f      	beq.n	8014222 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80141c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80141c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80141cc:	68b9      	ldr	r1, [r7, #8]
 80141ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141d0:	f000 f89e 	bl	8014310 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80141d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d6:	1e5a      	subs	r2, r3, #1
 80141d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80141dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80141e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141e4:	d112      	bne.n	801420c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e8:	691b      	ldr	r3, [r3, #16]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d016      	beq.n	801421c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f0:	3310      	adds	r3, #16
 80141f2:	4618      	mov	r0, r3
 80141f4:	f000 ff4e 	bl	8015094 <xTaskRemoveFromEventList>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00e      	beq.n	801421c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00b      	beq.n	801421c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2201      	movs	r2, #1
 8014208:	601a      	str	r2, [r3, #0]
 801420a:	e007      	b.n	801421c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801420c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014210:	3301      	adds	r3, #1
 8014212:	b2db      	uxtb	r3, r3
 8014214:	b25a      	sxtb	r2, r3
 8014216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801421c:	2301      	movs	r3, #1
 801421e:	637b      	str	r3, [r7, #52]	; 0x34
 8014220:	e001      	b.n	8014226 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014222:	2300      	movs	r3, #0
 8014224:	637b      	str	r3, [r7, #52]	; 0x34
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014228:	613b      	str	r3, [r7, #16]
	__asm volatile
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	f383 8811 	msr	BASEPRI, r3
}
 8014230:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014234:	4618      	mov	r0, r3
 8014236:	3738      	adds	r7, #56	; 0x38
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b086      	sub	sp, #24
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014248:	2300      	movs	r3, #0
 801424a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014256:	2b00      	cmp	r3, #0
 8014258:	d10d      	bne.n	8014276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d14d      	bne.n	80142fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	4618      	mov	r0, r3
 8014268:	f001 f952 	bl	8015510 <xTaskPriorityDisinherit>
 801426c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2200      	movs	r2, #0
 8014272:	609a      	str	r2, [r3, #8]
 8014274:	e043      	b.n	80142fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d119      	bne.n	80142b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	6858      	ldr	r0, [r3, #4]
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014284:	461a      	mov	r2, r3
 8014286:	68b9      	ldr	r1, [r7, #8]
 8014288:	f002 f9fa 	bl	8016680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	685a      	ldr	r2, [r3, #4]
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014294:	441a      	add	r2, r3
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	685a      	ldr	r2, [r3, #4]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	689b      	ldr	r3, [r3, #8]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d32b      	bcc.n	80142fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	605a      	str	r2, [r3, #4]
 80142ae:	e026      	b.n	80142fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	68d8      	ldr	r0, [r3, #12]
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b8:	461a      	mov	r2, r3
 80142ba:	68b9      	ldr	r1, [r7, #8]
 80142bc:	f002 f9e0 	bl	8016680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68da      	ldr	r2, [r3, #12]
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142c8:	425b      	negs	r3, r3
 80142ca:	441a      	add	r2, r3
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	68da      	ldr	r2, [r3, #12]
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d207      	bcs.n	80142ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	689a      	ldr	r2, [r3, #8]
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142e4:	425b      	negs	r3, r3
 80142e6:	441a      	add	r2, r3
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b02      	cmp	r3, #2
 80142f0:	d105      	bne.n	80142fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d002      	beq.n	80142fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	3b01      	subs	r3, #1
 80142fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	1c5a      	adds	r2, r3, #1
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014306:	697b      	ldr	r3, [r7, #20]
}
 8014308:	4618      	mov	r0, r3
 801430a:	3718      	adds	r7, #24
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801431e:	2b00      	cmp	r3, #0
 8014320:	d018      	beq.n	8014354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	68da      	ldr	r2, [r3, #12]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801432a:	441a      	add	r2, r3
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	68da      	ldr	r2, [r3, #12]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	689b      	ldr	r3, [r3, #8]
 8014338:	429a      	cmp	r2, r3
 801433a:	d303      	bcc.n	8014344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681a      	ldr	r2, [r3, #0]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	68d9      	ldr	r1, [r3, #12]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801434c:	461a      	mov	r2, r3
 801434e:	6838      	ldr	r0, [r7, #0]
 8014350:	f002 f996 	bl	8016680 <memcpy>
	}
}
 8014354:	bf00      	nop
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b084      	sub	sp, #16
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014364:	f001 fe46 	bl	8015ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801436e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014370:	e011      	b.n	8014396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014376:	2b00      	cmp	r3, #0
 8014378:	d012      	beq.n	80143a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	3324      	adds	r3, #36	; 0x24
 801437e:	4618      	mov	r0, r3
 8014380:	f000 fe88 	bl	8015094 <xTaskRemoveFromEventList>
 8014384:	4603      	mov	r3, r0
 8014386:	2b00      	cmp	r3, #0
 8014388:	d001      	beq.n	801438e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801438a:	f000 ffc1 	bl	8015310 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801438e:	7bfb      	ldrb	r3, [r7, #15]
 8014390:	3b01      	subs	r3, #1
 8014392:	b2db      	uxtb	r3, r3
 8014394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801439a:	2b00      	cmp	r3, #0
 801439c:	dce9      	bgt.n	8014372 <prvUnlockQueue+0x16>
 801439e:	e000      	b.n	80143a2 <prvUnlockQueue+0x46>
					break;
 80143a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	22ff      	movs	r2, #255	; 0xff
 80143a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80143aa:	f001 fe53 	bl	8016054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80143ae:	f001 fe21 	bl	8015ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80143ba:	e011      	b.n	80143e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	691b      	ldr	r3, [r3, #16]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d012      	beq.n	80143ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	3310      	adds	r3, #16
 80143c8:	4618      	mov	r0, r3
 80143ca:	f000 fe63 	bl	8015094 <xTaskRemoveFromEventList>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d001      	beq.n	80143d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80143d4:	f000 ff9c 	bl	8015310 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80143d8:	7bbb      	ldrb	r3, [r7, #14]
 80143da:	3b01      	subs	r3, #1
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80143e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	dce9      	bgt.n	80143bc <prvUnlockQueue+0x60>
 80143e8:	e000      	b.n	80143ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80143ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	22ff      	movs	r2, #255	; 0xff
 80143f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80143f4:	f001 fe2e 	bl	8016054 <vPortExitCritical>
}
 80143f8:	bf00      	nop
 80143fa:	3710      	adds	r7, #16
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014408:	f001 fdf4 	bl	8015ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014410:	2b00      	cmp	r3, #0
 8014412:	d102      	bne.n	801441a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014414:	2301      	movs	r3, #1
 8014416:	60fb      	str	r3, [r7, #12]
 8014418:	e001      	b.n	801441e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801441a:	2300      	movs	r3, #0
 801441c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801441e:	f001 fe19 	bl	8016054 <vPortExitCritical>

	return xReturn;
 8014422:	68fb      	ldr	r3, [r7, #12]
}
 8014424:	4618      	mov	r0, r3
 8014426:	3710      	adds	r7, #16
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014434:	f001 fdde 	bl	8015ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014440:	429a      	cmp	r2, r3
 8014442:	d102      	bne.n	801444a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014444:	2301      	movs	r3, #1
 8014446:	60fb      	str	r3, [r7, #12]
 8014448:	e001      	b.n	801444e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801444a:	2300      	movs	r3, #0
 801444c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801444e:	f001 fe01 	bl	8016054 <vPortExitCritical>

	return xReturn;
 8014452:	68fb      	ldr	r3, [r7, #12]
}
 8014454:	4618      	mov	r0, r3
 8014456:	3710      	adds	r7, #16
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801445c:	b480      	push	{r7}
 801445e:	b085      	sub	sp, #20
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014466:	2300      	movs	r3, #0
 8014468:	60fb      	str	r3, [r7, #12]
 801446a:	e014      	b.n	8014496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801446c:	4a0f      	ldr	r2, [pc, #60]	; (80144ac <vQueueAddToRegistry+0x50>)
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d10b      	bne.n	8014490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014478:	490c      	ldr	r1, [pc, #48]	; (80144ac <vQueueAddToRegistry+0x50>)
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	683a      	ldr	r2, [r7, #0]
 801447e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014482:	4a0a      	ldr	r2, [pc, #40]	; (80144ac <vQueueAddToRegistry+0x50>)
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	00db      	lsls	r3, r3, #3
 8014488:	4413      	add	r3, r2
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801448e:	e006      	b.n	801449e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	3301      	adds	r3, #1
 8014494:	60fb      	str	r3, [r7, #12]
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2b07      	cmp	r3, #7
 801449a:	d9e7      	bls.n	801446c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801449c:	bf00      	nop
 801449e:	bf00      	nop
 80144a0:	3714      	adds	r7, #20
 80144a2:	46bd      	mov	sp, r7
 80144a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a8:	4770      	bx	lr
 80144aa:	bf00      	nop
 80144ac:	240017c8 	.word	0x240017c8

080144b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80144c0:	f001 fd98 	bl	8015ff4 <vPortEnterCritical>
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80144ca:	b25b      	sxtb	r3, r3
 80144cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144d0:	d103      	bne.n	80144da <vQueueWaitForMessageRestricted+0x2a>
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	2200      	movs	r2, #0
 80144d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144e0:	b25b      	sxtb	r3, r3
 80144e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144e6:	d103      	bne.n	80144f0 <vQueueWaitForMessageRestricted+0x40>
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	2200      	movs	r2, #0
 80144ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80144f0:	f001 fdb0 	bl	8016054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80144f4:	697b      	ldr	r3, [r7, #20]
 80144f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d106      	bne.n	801450a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	3324      	adds	r3, #36	; 0x24
 8014500:	687a      	ldr	r2, [r7, #4]
 8014502:	68b9      	ldr	r1, [r7, #8]
 8014504:	4618      	mov	r0, r3
 8014506:	f000 fd99 	bl	801503c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801450a:	6978      	ldr	r0, [r7, #20]
 801450c:	f7ff ff26 	bl	801435c <prvUnlockQueue>
	}
 8014510:	bf00      	nop
 8014512:	3718      	adds	r7, #24
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014518:	b580      	push	{r7, lr}
 801451a:	b08e      	sub	sp, #56	; 0x38
 801451c:	af04      	add	r7, sp, #16
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	607a      	str	r2, [r7, #4]
 8014524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014528:	2b00      	cmp	r3, #0
 801452a:	d10a      	bne.n	8014542 <xTaskCreateStatic+0x2a>
	__asm volatile
 801452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014530:	f383 8811 	msr	BASEPRI, r3
 8014534:	f3bf 8f6f 	isb	sy
 8014538:	f3bf 8f4f 	dsb	sy
 801453c:	623b      	str	r3, [r7, #32]
}
 801453e:	bf00      	nop
 8014540:	e7fe      	b.n	8014540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10a      	bne.n	801455e <xTaskCreateStatic+0x46>
	__asm volatile
 8014548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801454c:	f383 8811 	msr	BASEPRI, r3
 8014550:	f3bf 8f6f 	isb	sy
 8014554:	f3bf 8f4f 	dsb	sy
 8014558:	61fb      	str	r3, [r7, #28]
}
 801455a:	bf00      	nop
 801455c:	e7fe      	b.n	801455c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801455e:	235c      	movs	r3, #92	; 0x5c
 8014560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	2b5c      	cmp	r3, #92	; 0x5c
 8014566:	d00a      	beq.n	801457e <xTaskCreateStatic+0x66>
	__asm volatile
 8014568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801456c:	f383 8811 	msr	BASEPRI, r3
 8014570:	f3bf 8f6f 	isb	sy
 8014574:	f3bf 8f4f 	dsb	sy
 8014578:	61bb      	str	r3, [r7, #24]
}
 801457a:	bf00      	nop
 801457c:	e7fe      	b.n	801457c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801457e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014582:	2b00      	cmp	r3, #0
 8014584:	d01e      	beq.n	80145c4 <xTaskCreateStatic+0xac>
 8014586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014588:	2b00      	cmp	r3, #0
 801458a:	d01b      	beq.n	80145c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801458e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014594:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014598:	2202      	movs	r2, #2
 801459a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801459e:	2300      	movs	r3, #0
 80145a0:	9303      	str	r3, [sp, #12]
 80145a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a4:	9302      	str	r3, [sp, #8]
 80145a6:	f107 0314 	add.w	r3, r7, #20
 80145aa:	9301      	str	r3, [sp, #4]
 80145ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	687a      	ldr	r2, [r7, #4]
 80145b4:	68b9      	ldr	r1, [r7, #8]
 80145b6:	68f8      	ldr	r0, [r7, #12]
 80145b8:	f000 f850 	bl	801465c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80145bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145be:	f000 f8dd 	bl	801477c <prvAddNewTaskToReadyList>
 80145c2:	e001      	b.n	80145c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80145c4:	2300      	movs	r3, #0
 80145c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80145c8:	697b      	ldr	r3, [r7, #20]
	}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3728      	adds	r7, #40	; 0x28
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}

080145d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b08c      	sub	sp, #48	; 0x30
 80145d6:	af04      	add	r7, sp, #16
 80145d8:	60f8      	str	r0, [r7, #12]
 80145da:	60b9      	str	r1, [r7, #8]
 80145dc:	603b      	str	r3, [r7, #0]
 80145de:	4613      	mov	r3, r2
 80145e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80145e2:	88fb      	ldrh	r3, [r7, #6]
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	4618      	mov	r0, r3
 80145e8:	f001 fe26 	bl	8016238 <pvPortMalloc>
 80145ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00e      	beq.n	8014612 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80145f4:	205c      	movs	r0, #92	; 0x5c
 80145f6:	f001 fe1f 	bl	8016238 <pvPortMalloc>
 80145fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d003      	beq.n	801460a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	697a      	ldr	r2, [r7, #20]
 8014606:	631a      	str	r2, [r3, #48]	; 0x30
 8014608:	e005      	b.n	8014616 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801460a:	6978      	ldr	r0, [r7, #20]
 801460c:	f001 fee0 	bl	80163d0 <vPortFree>
 8014610:	e001      	b.n	8014616 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014612:	2300      	movs	r3, #0
 8014614:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d017      	beq.n	801464c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	2200      	movs	r2, #0
 8014620:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014624:	88fa      	ldrh	r2, [r7, #6]
 8014626:	2300      	movs	r3, #0
 8014628:	9303      	str	r3, [sp, #12]
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	9302      	str	r3, [sp, #8]
 801462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014634:	9300      	str	r3, [sp, #0]
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	68b9      	ldr	r1, [r7, #8]
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f000 f80e 	bl	801465c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014640:	69f8      	ldr	r0, [r7, #28]
 8014642:	f000 f89b 	bl	801477c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014646:	2301      	movs	r3, #1
 8014648:	61bb      	str	r3, [r7, #24]
 801464a:	e002      	b.n	8014652 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801464c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014650:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014652:	69bb      	ldr	r3, [r7, #24]
	}
 8014654:	4618      	mov	r0, r3
 8014656:	3720      	adds	r7, #32
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}

0801465c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b088      	sub	sp, #32
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
 8014668:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	461a      	mov	r2, r3
 8014674:	21a5      	movs	r1, #165	; 0xa5
 8014676:	f002 f811 	bl	801669c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014684:	440b      	add	r3, r1
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	f023 0307 	bic.w	r3, r3, #7
 8014692:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014694:	69bb      	ldr	r3, [r7, #24]
 8014696:	f003 0307 	and.w	r3, r3, #7
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00a      	beq.n	80146b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 801469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a2:	f383 8811 	msr	BASEPRI, r3
 80146a6:	f3bf 8f6f 	isb	sy
 80146aa:	f3bf 8f4f 	dsb	sy
 80146ae:	617b      	str	r3, [r7, #20]
}
 80146b0:	bf00      	nop
 80146b2:	e7fe      	b.n	80146b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d01f      	beq.n	80146fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80146ba:	2300      	movs	r3, #0
 80146bc:	61fb      	str	r3, [r7, #28]
 80146be:	e012      	b.n	80146e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80146c0:	68ba      	ldr	r2, [r7, #8]
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	4413      	add	r3, r2
 80146c6:	7819      	ldrb	r1, [r3, #0]
 80146c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	4413      	add	r3, r2
 80146ce:	3334      	adds	r3, #52	; 0x34
 80146d0:	460a      	mov	r2, r1
 80146d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	69fb      	ldr	r3, [r7, #28]
 80146d8:	4413      	add	r3, r2
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d006      	beq.n	80146ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	3301      	adds	r3, #1
 80146e4:	61fb      	str	r3, [r7, #28]
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	2b0f      	cmp	r3, #15
 80146ea:	d9e9      	bls.n	80146c0 <prvInitialiseNewTask+0x64>
 80146ec:	e000      	b.n	80146f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80146ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80146f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f2:	2200      	movs	r2, #0
 80146f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80146f8:	e003      	b.n	8014702 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	2200      	movs	r2, #0
 80146fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	2b37      	cmp	r3, #55	; 0x37
 8014706:	d901      	bls.n	801470c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014708:	2337      	movs	r3, #55	; 0x37
 801470a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014710:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014716:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471a:	2200      	movs	r2, #0
 801471c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014720:	3304      	adds	r3, #4
 8014722:	4618      	mov	r0, r3
 8014724:	f7ff f8be 	bl	80138a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472a:	3318      	adds	r3, #24
 801472c:	4618      	mov	r0, r3
 801472e:	f7ff f8b9 	bl	80138a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014736:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014740:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014746:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801474a:	2200      	movs	r2, #0
 801474c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014750:	2200      	movs	r2, #0
 8014752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014756:	683a      	ldr	r2, [r7, #0]
 8014758:	68f9      	ldr	r1, [r7, #12]
 801475a:	69b8      	ldr	r0, [r7, #24]
 801475c:	f001 fb20 	bl	8015da0 <pxPortInitialiseStack>
 8014760:	4602      	mov	r2, r0
 8014762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014764:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014768:	2b00      	cmp	r3, #0
 801476a:	d002      	beq.n	8014772 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014772:	bf00      	nop
 8014774:	3720      	adds	r7, #32
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
	...

0801477c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014784:	f001 fc36 	bl	8015ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014788:	4b2d      	ldr	r3, [pc, #180]	; (8014840 <prvAddNewTaskToReadyList+0xc4>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	3301      	adds	r3, #1
 801478e:	4a2c      	ldr	r2, [pc, #176]	; (8014840 <prvAddNewTaskToReadyList+0xc4>)
 8014790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014792:	4b2c      	ldr	r3, [pc, #176]	; (8014844 <prvAddNewTaskToReadyList+0xc8>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d109      	bne.n	80147ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801479a:	4a2a      	ldr	r2, [pc, #168]	; (8014844 <prvAddNewTaskToReadyList+0xc8>)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80147a0:	4b27      	ldr	r3, [pc, #156]	; (8014840 <prvAddNewTaskToReadyList+0xc4>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d110      	bne.n	80147ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80147a8:	f000 fdd6 	bl	8015358 <prvInitialiseTaskLists>
 80147ac:	e00d      	b.n	80147ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80147ae:	4b26      	ldr	r3, [pc, #152]	; (8014848 <prvAddNewTaskToReadyList+0xcc>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d109      	bne.n	80147ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80147b6:	4b23      	ldr	r3, [pc, #140]	; (8014844 <prvAddNewTaskToReadyList+0xc8>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d802      	bhi.n	80147ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80147c4:	4a1f      	ldr	r2, [pc, #124]	; (8014844 <prvAddNewTaskToReadyList+0xc8>)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80147ca:	4b20      	ldr	r3, [pc, #128]	; (801484c <prvAddNewTaskToReadyList+0xd0>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	3301      	adds	r3, #1
 80147d0:	4a1e      	ldr	r2, [pc, #120]	; (801484c <prvAddNewTaskToReadyList+0xd0>)
 80147d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80147d4:	4b1d      	ldr	r3, [pc, #116]	; (801484c <prvAddNewTaskToReadyList+0xd0>)
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e0:	4b1b      	ldr	r3, [pc, #108]	; (8014850 <prvAddNewTaskToReadyList+0xd4>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d903      	bls.n	80147f0 <prvAddNewTaskToReadyList+0x74>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ec:	4a18      	ldr	r2, [pc, #96]	; (8014850 <prvAddNewTaskToReadyList+0xd4>)
 80147ee:	6013      	str	r3, [r2, #0]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f4:	4613      	mov	r3, r2
 80147f6:	009b      	lsls	r3, r3, #2
 80147f8:	4413      	add	r3, r2
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	4a15      	ldr	r2, [pc, #84]	; (8014854 <prvAddNewTaskToReadyList+0xd8>)
 80147fe:	441a      	add	r2, r3
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	3304      	adds	r3, #4
 8014804:	4619      	mov	r1, r3
 8014806:	4610      	mov	r0, r2
 8014808:	f7ff f859 	bl	80138be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801480c:	f001 fc22 	bl	8016054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014810:	4b0d      	ldr	r3, [pc, #52]	; (8014848 <prvAddNewTaskToReadyList+0xcc>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00e      	beq.n	8014836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014818:	4b0a      	ldr	r3, [pc, #40]	; (8014844 <prvAddNewTaskToReadyList+0xc8>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014822:	429a      	cmp	r2, r3
 8014824:	d207      	bcs.n	8014836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014826:	4b0c      	ldr	r3, [pc, #48]	; (8014858 <prvAddNewTaskToReadyList+0xdc>)
 8014828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801482c:	601a      	str	r2, [r3, #0]
 801482e:	f3bf 8f4f 	dsb	sy
 8014832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014836:	bf00      	nop
 8014838:	3708      	adds	r7, #8
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	24001cdc 	.word	0x24001cdc
 8014844:	24001808 	.word	0x24001808
 8014848:	24001ce8 	.word	0x24001ce8
 801484c:	24001cf8 	.word	0x24001cf8
 8014850:	24001ce4 	.word	0x24001ce4
 8014854:	2400180c 	.word	0x2400180c
 8014858:	e000ed04 	.word	0xe000ed04

0801485c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014864:	2300      	movs	r3, #0
 8014866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d017      	beq.n	801489e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801486e:	4b13      	ldr	r3, [pc, #76]	; (80148bc <vTaskDelay+0x60>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d00a      	beq.n	801488c <vTaskDelay+0x30>
	__asm volatile
 8014876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487a:	f383 8811 	msr	BASEPRI, r3
 801487e:	f3bf 8f6f 	isb	sy
 8014882:	f3bf 8f4f 	dsb	sy
 8014886:	60bb      	str	r3, [r7, #8]
}
 8014888:	bf00      	nop
 801488a:	e7fe      	b.n	801488a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801488c:	f000 f99a 	bl	8014bc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014890:	2100      	movs	r1, #0
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 fec2 	bl	801561c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014898:	f000 f9a2 	bl	8014be0 <xTaskResumeAll>
 801489c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d107      	bne.n	80148b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80148a4:	4b06      	ldr	r3, [pc, #24]	; (80148c0 <vTaskDelay+0x64>)
 80148a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148aa:	601a      	str	r2, [r3, #0]
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80148b4:	bf00      	nop
 80148b6:	3710      	adds	r7, #16
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	24001d04 	.word	0x24001d04
 80148c0:	e000ed04 	.word	0xe000ed04

080148c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80148cc:	f001 fb92 	bl	8015ff4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d102      	bne.n	80148dc <vTaskSuspend+0x18>
 80148d6:	4b30      	ldr	r3, [pc, #192]	; (8014998 <vTaskSuspend+0xd4>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	e000      	b.n	80148de <vTaskSuspend+0x1a>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	3304      	adds	r3, #4
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7ff f847 	bl	8013978 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d004      	beq.n	80148fc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	3318      	adds	r3, #24
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7ff f83e 	bl	8013978 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	3304      	adds	r3, #4
 8014900:	4619      	mov	r1, r3
 8014902:	4826      	ldr	r0, [pc, #152]	; (801499c <vTaskSuspend+0xd8>)
 8014904:	f7fe ffdb 	bl	80138be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801490e:	b2db      	uxtb	r3, r3
 8014910:	2b01      	cmp	r3, #1
 8014912:	d103      	bne.n	801491c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2200      	movs	r2, #0
 8014918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801491c:	f001 fb9a 	bl	8016054 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014920:	4b1f      	ldr	r3, [pc, #124]	; (80149a0 <vTaskSuspend+0xdc>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d005      	beq.n	8014934 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014928:	f001 fb64 	bl	8015ff4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801492c:	f000 fdb2 	bl	8015494 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014930:	f001 fb90 	bl	8016054 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014934:	4b18      	ldr	r3, [pc, #96]	; (8014998 <vTaskSuspend+0xd4>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	68fa      	ldr	r2, [r7, #12]
 801493a:	429a      	cmp	r2, r3
 801493c:	d127      	bne.n	801498e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801493e:	4b18      	ldr	r3, [pc, #96]	; (80149a0 <vTaskSuspend+0xdc>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d017      	beq.n	8014976 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014946:	4b17      	ldr	r3, [pc, #92]	; (80149a4 <vTaskSuspend+0xe0>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d00a      	beq.n	8014964 <vTaskSuspend+0xa0>
	__asm volatile
 801494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014952:	f383 8811 	msr	BASEPRI, r3
 8014956:	f3bf 8f6f 	isb	sy
 801495a:	f3bf 8f4f 	dsb	sy
 801495e:	60bb      	str	r3, [r7, #8]
}
 8014960:	bf00      	nop
 8014962:	e7fe      	b.n	8014962 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014964:	4b10      	ldr	r3, [pc, #64]	; (80149a8 <vTaskSuspend+0xe4>)
 8014966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801496a:	601a      	str	r2, [r3, #0]
 801496c:	f3bf 8f4f 	dsb	sy
 8014970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014974:	e00b      	b.n	801498e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014976:	4b09      	ldr	r3, [pc, #36]	; (801499c <vTaskSuspend+0xd8>)
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	4b0c      	ldr	r3, [pc, #48]	; (80149ac <vTaskSuspend+0xe8>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	429a      	cmp	r2, r3
 8014980:	d103      	bne.n	801498a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014982:	4b05      	ldr	r3, [pc, #20]	; (8014998 <vTaskSuspend+0xd4>)
 8014984:	2200      	movs	r2, #0
 8014986:	601a      	str	r2, [r3, #0]
	}
 8014988:	e001      	b.n	801498e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801498a:	f000 fa99 	bl	8014ec0 <vTaskSwitchContext>
	}
 801498e:	bf00      	nop
 8014990:	3710      	adds	r7, #16
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	24001808 	.word	0x24001808
 801499c:	24001cc8 	.word	0x24001cc8
 80149a0:	24001ce8 	.word	0x24001ce8
 80149a4:	24001d04 	.word	0x24001d04
 80149a8:	e000ed04 	.word	0xe000ed04
 80149ac:	24001cdc 	.word	0x24001cdc

080149b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80149b0:	b480      	push	{r7}
 80149b2:	b087      	sub	sp, #28
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80149b8:	2300      	movs	r3, #0
 80149ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d10a      	bne.n	80149dc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80149c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ca:	f383 8811 	msr	BASEPRI, r3
 80149ce:	f3bf 8f6f 	isb	sy
 80149d2:	f3bf 8f4f 	dsb	sy
 80149d6:	60fb      	str	r3, [r7, #12]
}
 80149d8:	bf00      	nop
 80149da:	e7fe      	b.n	80149da <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	695b      	ldr	r3, [r3, #20]
 80149e0:	4a0a      	ldr	r2, [pc, #40]	; (8014a0c <prvTaskIsTaskSuspended+0x5c>)
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d10a      	bne.n	80149fc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149ea:	4a09      	ldr	r2, [pc, #36]	; (8014a10 <prvTaskIsTaskSuspended+0x60>)
 80149ec:	4293      	cmp	r3, r2
 80149ee:	d005      	beq.n	80149fc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d101      	bne.n	80149fc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80149f8:	2301      	movs	r3, #1
 80149fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80149fc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80149fe:	4618      	mov	r0, r3
 8014a00:	371c      	adds	r7, #28
 8014a02:	46bd      	mov	sp, r7
 8014a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a08:	4770      	bx	lr
 8014a0a:	bf00      	nop
 8014a0c:	24001cc8 	.word	0x24001cc8
 8014a10:	24001c9c 	.word	0x24001c9c

08014a14 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b08a      	sub	sp, #40	; 0x28
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d10a      	bne.n	8014a40 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a2e:	f383 8811 	msr	BASEPRI, r3
 8014a32:	f3bf 8f6f 	isb	sy
 8014a36:	f3bf 8f4f 	dsb	sy
 8014a3a:	61bb      	str	r3, [r7, #24]
}
 8014a3c:	bf00      	nop
 8014a3e:	e7fe      	b.n	8014a3e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a40:	f001 fbba 	bl	80161b8 <vPortValidateInterruptPriority>
	__asm volatile
 8014a44:	f3ef 8211 	mrs	r2, BASEPRI
 8014a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4c:	f383 8811 	msr	BASEPRI, r3
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	617a      	str	r2, [r7, #20]
 8014a5a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014a5c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a5e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014a60:	6a38      	ldr	r0, [r7, #32]
 8014a62:	f7ff ffa5 	bl	80149b0 <prvTaskIsTaskSuspended>
 8014a66:	4603      	mov	r3, r0
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d030      	beq.n	8014ace <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a6c:	4b1d      	ldr	r3, [pc, #116]	; (8014ae4 <xTaskResumeFromISR+0xd0>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d126      	bne.n	8014ac2 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a74:	6a3b      	ldr	r3, [r7, #32]
 8014a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a78:	4b1b      	ldr	r3, [pc, #108]	; (8014ae8 <xTaskResumeFromISR+0xd4>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d301      	bcc.n	8014a86 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014a82:	2301      	movs	r3, #1
 8014a84:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a86:	6a3b      	ldr	r3, [r7, #32]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fe ff74 	bl	8013978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a90:	6a3b      	ldr	r3, [r7, #32]
 8014a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a94:	4b15      	ldr	r3, [pc, #84]	; (8014aec <xTaskResumeFromISR+0xd8>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d903      	bls.n	8014aa4 <xTaskResumeFromISR+0x90>
 8014a9c:	6a3b      	ldr	r3, [r7, #32]
 8014a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aa0:	4a12      	ldr	r2, [pc, #72]	; (8014aec <xTaskResumeFromISR+0xd8>)
 8014aa2:	6013      	str	r3, [r2, #0]
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	4413      	add	r3, r2
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	4a0f      	ldr	r2, [pc, #60]	; (8014af0 <xTaskResumeFromISR+0xdc>)
 8014ab2:	441a      	add	r2, r3
 8014ab4:	6a3b      	ldr	r3, [r7, #32]
 8014ab6:	3304      	adds	r3, #4
 8014ab8:	4619      	mov	r1, r3
 8014aba:	4610      	mov	r0, r2
 8014abc:	f7fe feff 	bl	80138be <vListInsertEnd>
 8014ac0:	e005      	b.n	8014ace <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	3318      	adds	r3, #24
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	480a      	ldr	r0, [pc, #40]	; (8014af4 <xTaskResumeFromISR+0xe0>)
 8014aca:	f7fe fef8 	bl	80138be <vListInsertEnd>
 8014ace:	69fb      	ldr	r3, [r7, #28]
 8014ad0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	f383 8811 	msr	BASEPRI, r3
}
 8014ad8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3728      	adds	r7, #40	; 0x28
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	24001d04 	.word	0x24001d04
 8014ae8:	24001808 	.word	0x24001808
 8014aec:	24001ce4 	.word	0x24001ce4
 8014af0:	2400180c 	.word	0x2400180c
 8014af4:	24001c9c 	.word	0x24001c9c

08014af8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b08a      	sub	sp, #40	; 0x28
 8014afc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014afe:	2300      	movs	r3, #0
 8014b00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014b02:	2300      	movs	r3, #0
 8014b04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014b06:	463a      	mov	r2, r7
 8014b08:	1d39      	adds	r1, r7, #4
 8014b0a:	f107 0308 	add.w	r3, r7, #8
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fe fc08 	bl	8013324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b14:	6839      	ldr	r1, [r7, #0]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	68ba      	ldr	r2, [r7, #8]
 8014b1a:	9202      	str	r2, [sp, #8]
 8014b1c:	9301      	str	r3, [sp, #4]
 8014b1e:	2300      	movs	r3, #0
 8014b20:	9300      	str	r3, [sp, #0]
 8014b22:	2300      	movs	r3, #0
 8014b24:	460a      	mov	r2, r1
 8014b26:	4921      	ldr	r1, [pc, #132]	; (8014bac <vTaskStartScheduler+0xb4>)
 8014b28:	4821      	ldr	r0, [pc, #132]	; (8014bb0 <vTaskStartScheduler+0xb8>)
 8014b2a:	f7ff fcf5 	bl	8014518 <xTaskCreateStatic>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	4a20      	ldr	r2, [pc, #128]	; (8014bb4 <vTaskStartScheduler+0xbc>)
 8014b32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b34:	4b1f      	ldr	r3, [pc, #124]	; (8014bb4 <vTaskStartScheduler+0xbc>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d002      	beq.n	8014b42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	617b      	str	r3, [r7, #20]
 8014b40:	e001      	b.n	8014b46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b42:	2300      	movs	r3, #0
 8014b44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d102      	bne.n	8014b52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014b4c:	f000 fdba 	bl	80156c4 <xTimerCreateTimerTask>
 8014b50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d116      	bne.n	8014b86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b5c:	f383 8811 	msr	BASEPRI, r3
 8014b60:	f3bf 8f6f 	isb	sy
 8014b64:	f3bf 8f4f 	dsb	sy
 8014b68:	613b      	str	r3, [r7, #16]
}
 8014b6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014b6c:	4b12      	ldr	r3, [pc, #72]	; (8014bb8 <vTaskStartScheduler+0xc0>)
 8014b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014b74:	4b11      	ldr	r3, [pc, #68]	; (8014bbc <vTaskStartScheduler+0xc4>)
 8014b76:	2201      	movs	r2, #1
 8014b78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014b7a:	4b11      	ldr	r3, [pc, #68]	; (8014bc0 <vTaskStartScheduler+0xc8>)
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014b80:	f001 f996 	bl	8015eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014b84:	e00e      	b.n	8014ba4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b8c:	d10a      	bne.n	8014ba4 <vTaskStartScheduler+0xac>
	__asm volatile
 8014b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b92:	f383 8811 	msr	BASEPRI, r3
 8014b96:	f3bf 8f6f 	isb	sy
 8014b9a:	f3bf 8f4f 	dsb	sy
 8014b9e:	60fb      	str	r3, [r7, #12]
}
 8014ba0:	bf00      	nop
 8014ba2:	e7fe      	b.n	8014ba2 <vTaskStartScheduler+0xaa>
}
 8014ba4:	bf00      	nop
 8014ba6:	3718      	adds	r7, #24
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	0801732c 	.word	0x0801732c
 8014bb0:	08015329 	.word	0x08015329
 8014bb4:	24001d00 	.word	0x24001d00
 8014bb8:	24001cfc 	.word	0x24001cfc
 8014bbc:	24001ce8 	.word	0x24001ce8
 8014bc0:	24001ce0 	.word	0x24001ce0

08014bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014bc8:	4b04      	ldr	r3, [pc, #16]	; (8014bdc <vTaskSuspendAll+0x18>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	3301      	adds	r3, #1
 8014bce:	4a03      	ldr	r2, [pc, #12]	; (8014bdc <vTaskSuspendAll+0x18>)
 8014bd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014bd2:	bf00      	nop
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr
 8014bdc:	24001d04 	.word	0x24001d04

08014be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014be6:	2300      	movs	r3, #0
 8014be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014bea:	2300      	movs	r3, #0
 8014bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014bee:	4b42      	ldr	r3, [pc, #264]	; (8014cf8 <xTaskResumeAll+0x118>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10a      	bne.n	8014c0c <xTaskResumeAll+0x2c>
	__asm volatile
 8014bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfa:	f383 8811 	msr	BASEPRI, r3
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	f3bf 8f4f 	dsb	sy
 8014c06:	603b      	str	r3, [r7, #0]
}
 8014c08:	bf00      	nop
 8014c0a:	e7fe      	b.n	8014c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c0c:	f001 f9f2 	bl	8015ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c10:	4b39      	ldr	r3, [pc, #228]	; (8014cf8 <xTaskResumeAll+0x118>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	3b01      	subs	r3, #1
 8014c16:	4a38      	ldr	r2, [pc, #224]	; (8014cf8 <xTaskResumeAll+0x118>)
 8014c18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c1a:	4b37      	ldr	r3, [pc, #220]	; (8014cf8 <xTaskResumeAll+0x118>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d162      	bne.n	8014ce8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c22:	4b36      	ldr	r3, [pc, #216]	; (8014cfc <xTaskResumeAll+0x11c>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d05e      	beq.n	8014ce8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c2a:	e02f      	b.n	8014c8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c2c:	4b34      	ldr	r3, [pc, #208]	; (8014d00 <xTaskResumeAll+0x120>)
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	68db      	ldr	r3, [r3, #12]
 8014c32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	3318      	adds	r3, #24
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fe fe9d 	bl	8013978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	3304      	adds	r3, #4
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7fe fe98 	bl	8013978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c4c:	4b2d      	ldr	r3, [pc, #180]	; (8014d04 <xTaskResumeAll+0x124>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d903      	bls.n	8014c5c <xTaskResumeAll+0x7c>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c58:	4a2a      	ldr	r2, [pc, #168]	; (8014d04 <xTaskResumeAll+0x124>)
 8014c5a:	6013      	str	r3, [r2, #0]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c60:	4613      	mov	r3, r2
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	4413      	add	r3, r2
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	4a27      	ldr	r2, [pc, #156]	; (8014d08 <xTaskResumeAll+0x128>)
 8014c6a:	441a      	add	r2, r3
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	3304      	adds	r3, #4
 8014c70:	4619      	mov	r1, r3
 8014c72:	4610      	mov	r0, r2
 8014c74:	f7fe fe23 	bl	80138be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c7c:	4b23      	ldr	r3, [pc, #140]	; (8014d0c <xTaskResumeAll+0x12c>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d302      	bcc.n	8014c8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014c86:	4b22      	ldr	r3, [pc, #136]	; (8014d10 <xTaskResumeAll+0x130>)
 8014c88:	2201      	movs	r2, #1
 8014c8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c8c:	4b1c      	ldr	r3, [pc, #112]	; (8014d00 <xTaskResumeAll+0x120>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d1cb      	bne.n	8014c2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d001      	beq.n	8014c9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014c9a:	f000 fbfb 	bl	8015494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014c9e:	4b1d      	ldr	r3, [pc, #116]	; (8014d14 <xTaskResumeAll+0x134>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d010      	beq.n	8014ccc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014caa:	f000 f847 	bl	8014d3c <xTaskIncrementTick>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d002      	beq.n	8014cba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014cb4:	4b16      	ldr	r3, [pc, #88]	; (8014d10 <xTaskResumeAll+0x130>)
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	3b01      	subs	r3, #1
 8014cbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d1f1      	bne.n	8014caa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014cc6:	4b13      	ldr	r3, [pc, #76]	; (8014d14 <xTaskResumeAll+0x134>)
 8014cc8:	2200      	movs	r2, #0
 8014cca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014ccc:	4b10      	ldr	r3, [pc, #64]	; (8014d10 <xTaskResumeAll+0x130>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d009      	beq.n	8014ce8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014cd8:	4b0f      	ldr	r3, [pc, #60]	; (8014d18 <xTaskResumeAll+0x138>)
 8014cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cde:	601a      	str	r2, [r3, #0]
 8014ce0:	f3bf 8f4f 	dsb	sy
 8014ce4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014ce8:	f001 f9b4 	bl	8016054 <vPortExitCritical>

	return xAlreadyYielded;
 8014cec:	68bb      	ldr	r3, [r7, #8]
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3710      	adds	r7, #16
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	24001d04 	.word	0x24001d04
 8014cfc:	24001cdc 	.word	0x24001cdc
 8014d00:	24001c9c 	.word	0x24001c9c
 8014d04:	24001ce4 	.word	0x24001ce4
 8014d08:	2400180c 	.word	0x2400180c
 8014d0c:	24001808 	.word	0x24001808
 8014d10:	24001cf0 	.word	0x24001cf0
 8014d14:	24001cec 	.word	0x24001cec
 8014d18:	e000ed04 	.word	0xe000ed04

08014d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014d22:	4b05      	ldr	r3, [pc, #20]	; (8014d38 <xTaskGetTickCount+0x1c>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014d28:	687b      	ldr	r3, [r7, #4]
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	370c      	adds	r7, #12
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d34:	4770      	bx	lr
 8014d36:	bf00      	nop
 8014d38:	24001ce0 	.word	0x24001ce0

08014d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b086      	sub	sp, #24
 8014d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014d42:	2300      	movs	r3, #0
 8014d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d46:	4b53      	ldr	r3, [pc, #332]	; (8014e94 <xTaskIncrementTick+0x158>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	f040 8095 	bne.w	8014e7a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d50:	4b51      	ldr	r3, [pc, #324]	; (8014e98 <xTaskIncrementTick+0x15c>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	3301      	adds	r3, #1
 8014d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014d58:	4a4f      	ldr	r2, [pc, #316]	; (8014e98 <xTaskIncrementTick+0x15c>)
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d120      	bne.n	8014da6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014d64:	4b4d      	ldr	r3, [pc, #308]	; (8014e9c <xTaskIncrementTick+0x160>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00a      	beq.n	8014d84 <xTaskIncrementTick+0x48>
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	603b      	str	r3, [r7, #0]
}
 8014d80:	bf00      	nop
 8014d82:	e7fe      	b.n	8014d82 <xTaskIncrementTick+0x46>
 8014d84:	4b45      	ldr	r3, [pc, #276]	; (8014e9c <xTaskIncrementTick+0x160>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	60fb      	str	r3, [r7, #12]
 8014d8a:	4b45      	ldr	r3, [pc, #276]	; (8014ea0 <xTaskIncrementTick+0x164>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	4a43      	ldr	r2, [pc, #268]	; (8014e9c <xTaskIncrementTick+0x160>)
 8014d90:	6013      	str	r3, [r2, #0]
 8014d92:	4a43      	ldr	r2, [pc, #268]	; (8014ea0 <xTaskIncrementTick+0x164>)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6013      	str	r3, [r2, #0]
 8014d98:	4b42      	ldr	r3, [pc, #264]	; (8014ea4 <xTaskIncrementTick+0x168>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	4a41      	ldr	r2, [pc, #260]	; (8014ea4 <xTaskIncrementTick+0x168>)
 8014da0:	6013      	str	r3, [r2, #0]
 8014da2:	f000 fb77 	bl	8015494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014da6:	4b40      	ldr	r3, [pc, #256]	; (8014ea8 <xTaskIncrementTick+0x16c>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	693a      	ldr	r2, [r7, #16]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d349      	bcc.n	8014e44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014db0:	4b3a      	ldr	r3, [pc, #232]	; (8014e9c <xTaskIncrementTick+0x160>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d104      	bne.n	8014dc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dba:	4b3b      	ldr	r3, [pc, #236]	; (8014ea8 <xTaskIncrementTick+0x16c>)
 8014dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dc0:	601a      	str	r2, [r3, #0]
					break;
 8014dc2:	e03f      	b.n	8014e44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dc4:	4b35      	ldr	r3, [pc, #212]	; (8014e9c <xTaskIncrementTick+0x160>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014dd4:	693a      	ldr	r2, [r7, #16]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d203      	bcs.n	8014de4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014ddc:	4a32      	ldr	r2, [pc, #200]	; (8014ea8 <xTaskIncrementTick+0x16c>)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014de2:	e02f      	b.n	8014e44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	3304      	adds	r3, #4
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7fe fdc5 	bl	8013978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d004      	beq.n	8014e00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	3318      	adds	r3, #24
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7fe fdbc 	bl	8013978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e04:	4b29      	ldr	r3, [pc, #164]	; (8014eac <xTaskIncrementTick+0x170>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d903      	bls.n	8014e14 <xTaskIncrementTick+0xd8>
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e10:	4a26      	ldr	r2, [pc, #152]	; (8014eac <xTaskIncrementTick+0x170>)
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e18:	4613      	mov	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	4413      	add	r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	4a23      	ldr	r2, [pc, #140]	; (8014eb0 <xTaskIncrementTick+0x174>)
 8014e22:	441a      	add	r2, r3
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	3304      	adds	r3, #4
 8014e28:	4619      	mov	r1, r3
 8014e2a:	4610      	mov	r0, r2
 8014e2c:	f7fe fd47 	bl	80138be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e34:	4b1f      	ldr	r3, [pc, #124]	; (8014eb4 <xTaskIncrementTick+0x178>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d3b8      	bcc.n	8014db0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014e3e:	2301      	movs	r3, #1
 8014e40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e42:	e7b5      	b.n	8014db0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e44:	4b1b      	ldr	r3, [pc, #108]	; (8014eb4 <xTaskIncrementTick+0x178>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e4a:	4919      	ldr	r1, [pc, #100]	; (8014eb0 <xTaskIncrementTick+0x174>)
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	4413      	add	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	440b      	add	r3, r1
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b01      	cmp	r3, #1
 8014e5a:	d901      	bls.n	8014e60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014e60:	4b15      	ldr	r3, [pc, #84]	; (8014eb8 <xTaskIncrementTick+0x17c>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014e68:	f7eb fbbc 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014e6c:	4b13      	ldr	r3, [pc, #76]	; (8014ebc <xTaskIncrementTick+0x180>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d009      	beq.n	8014e88 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014e74:	2301      	movs	r3, #1
 8014e76:	617b      	str	r3, [r7, #20]
 8014e78:	e006      	b.n	8014e88 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014e7a:	4b0f      	ldr	r3, [pc, #60]	; (8014eb8 <xTaskIncrementTick+0x17c>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	4a0d      	ldr	r2, [pc, #52]	; (8014eb8 <xTaskIncrementTick+0x17c>)
 8014e82:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014e84:	f7eb fbae 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014e88:	697b      	ldr	r3, [r7, #20]
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3718      	adds	r7, #24
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	24001d04 	.word	0x24001d04
 8014e98:	24001ce0 	.word	0x24001ce0
 8014e9c:	24001c94 	.word	0x24001c94
 8014ea0:	24001c98 	.word	0x24001c98
 8014ea4:	24001cf4 	.word	0x24001cf4
 8014ea8:	24001cfc 	.word	0x24001cfc
 8014eac:	24001ce4 	.word	0x24001ce4
 8014eb0:	2400180c 	.word	0x2400180c
 8014eb4:	24001808 	.word	0x24001808
 8014eb8:	24001cec 	.word	0x24001cec
 8014ebc:	24001cf0 	.word	0x24001cf0

08014ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b085      	sub	sp, #20
 8014ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014ec6:	4b28      	ldr	r3, [pc, #160]	; (8014f68 <vTaskSwitchContext+0xa8>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d003      	beq.n	8014ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ece:	4b27      	ldr	r3, [pc, #156]	; (8014f6c <vTaskSwitchContext+0xac>)
 8014ed0:	2201      	movs	r2, #1
 8014ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ed4:	e041      	b.n	8014f5a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014ed6:	4b25      	ldr	r3, [pc, #148]	; (8014f6c <vTaskSwitchContext+0xac>)
 8014ed8:	2200      	movs	r2, #0
 8014eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014edc:	4b24      	ldr	r3, [pc, #144]	; (8014f70 <vTaskSwitchContext+0xb0>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	60fb      	str	r3, [r7, #12]
 8014ee2:	e010      	b.n	8014f06 <vTaskSwitchContext+0x46>
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d10a      	bne.n	8014f00 <vTaskSwitchContext+0x40>
	__asm volatile
 8014eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eee:	f383 8811 	msr	BASEPRI, r3
 8014ef2:	f3bf 8f6f 	isb	sy
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	607b      	str	r3, [r7, #4]
}
 8014efc:	bf00      	nop
 8014efe:	e7fe      	b.n	8014efe <vTaskSwitchContext+0x3e>
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	3b01      	subs	r3, #1
 8014f04:	60fb      	str	r3, [r7, #12]
 8014f06:	491b      	ldr	r1, [pc, #108]	; (8014f74 <vTaskSwitchContext+0xb4>)
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	4413      	add	r3, r2
 8014f10:	009b      	lsls	r3, r3, #2
 8014f12:	440b      	add	r3, r1
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d0e4      	beq.n	8014ee4 <vTaskSwitchContext+0x24>
 8014f1a:	68fa      	ldr	r2, [r7, #12]
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	4413      	add	r3, r2
 8014f22:	009b      	lsls	r3, r3, #2
 8014f24:	4a13      	ldr	r2, [pc, #76]	; (8014f74 <vTaskSwitchContext+0xb4>)
 8014f26:	4413      	add	r3, r2
 8014f28:	60bb      	str	r3, [r7, #8]
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	685a      	ldr	r2, [r3, #4]
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	605a      	str	r2, [r3, #4]
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	685a      	ldr	r2, [r3, #4]
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	3308      	adds	r3, #8
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d104      	bne.n	8014f4a <vTaskSwitchContext+0x8a>
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	685a      	ldr	r2, [r3, #4]
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	605a      	str	r2, [r3, #4]
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	685b      	ldr	r3, [r3, #4]
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	4a09      	ldr	r2, [pc, #36]	; (8014f78 <vTaskSwitchContext+0xb8>)
 8014f52:	6013      	str	r3, [r2, #0]
 8014f54:	4a06      	ldr	r2, [pc, #24]	; (8014f70 <vTaskSwitchContext+0xb0>)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	6013      	str	r3, [r2, #0]
}
 8014f5a:	bf00      	nop
 8014f5c:	3714      	adds	r7, #20
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr
 8014f66:	bf00      	nop
 8014f68:	24001d04 	.word	0x24001d04
 8014f6c:	24001cf0 	.word	0x24001cf0
 8014f70:	24001ce4 	.word	0x24001ce4
 8014f74:	2400180c 	.word	0x2400180c
 8014f78:	24001808 	.word	0x24001808

08014f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d10a      	bne.n	8014fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f90:	f383 8811 	msr	BASEPRI, r3
 8014f94:	f3bf 8f6f 	isb	sy
 8014f98:	f3bf 8f4f 	dsb	sy
 8014f9c:	60fb      	str	r3, [r7, #12]
}
 8014f9e:	bf00      	nop
 8014fa0:	e7fe      	b.n	8014fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fa2:	4b07      	ldr	r3, [pc, #28]	; (8014fc0 <vTaskPlaceOnEventList+0x44>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	3318      	adds	r3, #24
 8014fa8:	4619      	mov	r1, r3
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f7fe fcab 	bl	8013906 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fb0:	2101      	movs	r1, #1
 8014fb2:	6838      	ldr	r0, [r7, #0]
 8014fb4:	f000 fb32 	bl	801561c <prvAddCurrentTaskToDelayedList>
}
 8014fb8:	bf00      	nop
 8014fba:	3710      	adds	r7, #16
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	24001808 	.word	0x24001808

08014fc4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b086      	sub	sp, #24
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d10a      	bne.n	8014fec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fda:	f383 8811 	msr	BASEPRI, r3
 8014fde:	f3bf 8f6f 	isb	sy
 8014fe2:	f3bf 8f4f 	dsb	sy
 8014fe6:	617b      	str	r3, [r7, #20]
}
 8014fe8:	bf00      	nop
 8014fea:	e7fe      	b.n	8014fea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014fec:	4b11      	ldr	r3, [pc, #68]	; (8015034 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d10a      	bne.n	801500a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff8:	f383 8811 	msr	BASEPRI, r3
 8014ffc:	f3bf 8f6f 	isb	sy
 8015000:	f3bf 8f4f 	dsb	sy
 8015004:	613b      	str	r3, [r7, #16]
}
 8015006:	bf00      	nop
 8015008:	e7fe      	b.n	8015008 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801500a:	4b0b      	ldr	r3, [pc, #44]	; (8015038 <vTaskPlaceOnUnorderedEventList+0x74>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	68ba      	ldr	r2, [r7, #8]
 8015010:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015014:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015016:	4b08      	ldr	r3, [pc, #32]	; (8015038 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	3318      	adds	r3, #24
 801501c:	4619      	mov	r1, r3
 801501e:	68f8      	ldr	r0, [r7, #12]
 8015020:	f7fe fc4d 	bl	80138be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015024:	2101      	movs	r1, #1
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 faf8 	bl	801561c <prvAddCurrentTaskToDelayedList>
}
 801502c:	bf00      	nop
 801502e:	3718      	adds	r7, #24
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	24001d04 	.word	0x24001d04
 8015038:	24001808 	.word	0x24001808

0801503c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801503c:	b580      	push	{r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af00      	add	r7, sp, #0
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d10a      	bne.n	8015064 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015052:	f383 8811 	msr	BASEPRI, r3
 8015056:	f3bf 8f6f 	isb	sy
 801505a:	f3bf 8f4f 	dsb	sy
 801505e:	617b      	str	r3, [r7, #20]
}
 8015060:	bf00      	nop
 8015062:	e7fe      	b.n	8015062 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015064:	4b0a      	ldr	r3, [pc, #40]	; (8015090 <vTaskPlaceOnEventListRestricted+0x54>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	3318      	adds	r3, #24
 801506a:	4619      	mov	r1, r3
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	f7fe fc26 	bl	80138be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d002      	beq.n	801507e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801507c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801507e:	6879      	ldr	r1, [r7, #4]
 8015080:	68b8      	ldr	r0, [r7, #8]
 8015082:	f000 facb 	bl	801561c <prvAddCurrentTaskToDelayedList>
	}
 8015086:	bf00      	nop
 8015088:	3718      	adds	r7, #24
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	24001808 	.word	0x24001808

08015094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b086      	sub	sp, #24
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10a      	bne.n	80150c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	60fb      	str	r3, [r7, #12]
}
 80150bc:	bf00      	nop
 80150be:	e7fe      	b.n	80150be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	3318      	adds	r3, #24
 80150c4:	4618      	mov	r0, r3
 80150c6:	f7fe fc57 	bl	8013978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150ca:	4b1e      	ldr	r3, [pc, #120]	; (8015144 <xTaskRemoveFromEventList+0xb0>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d11d      	bne.n	801510e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	3304      	adds	r3, #4
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fe fc4e 	bl	8013978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150e0:	4b19      	ldr	r3, [pc, #100]	; (8015148 <xTaskRemoveFromEventList+0xb4>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d903      	bls.n	80150f0 <xTaskRemoveFromEventList+0x5c>
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ec:	4a16      	ldr	r2, [pc, #88]	; (8015148 <xTaskRemoveFromEventList+0xb4>)
 80150ee:	6013      	str	r3, [r2, #0]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f4:	4613      	mov	r3, r2
 80150f6:	009b      	lsls	r3, r3, #2
 80150f8:	4413      	add	r3, r2
 80150fa:	009b      	lsls	r3, r3, #2
 80150fc:	4a13      	ldr	r2, [pc, #76]	; (801514c <xTaskRemoveFromEventList+0xb8>)
 80150fe:	441a      	add	r2, r3
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	3304      	adds	r3, #4
 8015104:	4619      	mov	r1, r3
 8015106:	4610      	mov	r0, r2
 8015108:	f7fe fbd9 	bl	80138be <vListInsertEnd>
 801510c:	e005      	b.n	801511a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	3318      	adds	r3, #24
 8015112:	4619      	mov	r1, r3
 8015114:	480e      	ldr	r0, [pc, #56]	; (8015150 <xTaskRemoveFromEventList+0xbc>)
 8015116:	f7fe fbd2 	bl	80138be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801511e:	4b0d      	ldr	r3, [pc, #52]	; (8015154 <xTaskRemoveFromEventList+0xc0>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015124:	429a      	cmp	r2, r3
 8015126:	d905      	bls.n	8015134 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015128:	2301      	movs	r3, #1
 801512a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801512c:	4b0a      	ldr	r3, [pc, #40]	; (8015158 <xTaskRemoveFromEventList+0xc4>)
 801512e:	2201      	movs	r2, #1
 8015130:	601a      	str	r2, [r3, #0]
 8015132:	e001      	b.n	8015138 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015134:	2300      	movs	r3, #0
 8015136:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015138:	697b      	ldr	r3, [r7, #20]
}
 801513a:	4618      	mov	r0, r3
 801513c:	3718      	adds	r7, #24
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}
 8015142:	bf00      	nop
 8015144:	24001d04 	.word	0x24001d04
 8015148:	24001ce4 	.word	0x24001ce4
 801514c:	2400180c 	.word	0x2400180c
 8015150:	24001c9c 	.word	0x24001c9c
 8015154:	24001808 	.word	0x24001808
 8015158:	24001cf0 	.word	0x24001cf0

0801515c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b086      	sub	sp, #24
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
 8015164:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015166:	4b29      	ldr	r3, [pc, #164]	; (801520c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d10a      	bne.n	8015184 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015172:	f383 8811 	msr	BASEPRI, r3
 8015176:	f3bf 8f6f 	isb	sy
 801517a:	f3bf 8f4f 	dsb	sy
 801517e:	613b      	str	r3, [r7, #16]
}
 8015180:	bf00      	nop
 8015182:	e7fe      	b.n	8015182 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	68db      	ldr	r3, [r3, #12]
 8015192:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d10a      	bne.n	80151b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519e:	f383 8811 	msr	BASEPRI, r3
 80151a2:	f3bf 8f6f 	isb	sy
 80151a6:	f3bf 8f4f 	dsb	sy
 80151aa:	60fb      	str	r3, [r7, #12]
}
 80151ac:	bf00      	nop
 80151ae:	e7fe      	b.n	80151ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f7fe fbe1 	bl	8013978 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	3304      	adds	r3, #4
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fe fbdc 	bl	8013978 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151c4:	4b12      	ldr	r3, [pc, #72]	; (8015210 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d903      	bls.n	80151d4 <vTaskRemoveFromUnorderedEventList+0x78>
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151d0:	4a0f      	ldr	r2, [pc, #60]	; (8015210 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80151d2:	6013      	str	r3, [r2, #0]
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151d8:	4613      	mov	r3, r2
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	4413      	add	r3, r2
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	4a0c      	ldr	r2, [pc, #48]	; (8015214 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80151e2:	441a      	add	r2, r3
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	3304      	adds	r3, #4
 80151e8:	4619      	mov	r1, r3
 80151ea:	4610      	mov	r0, r2
 80151ec:	f7fe fb67 	bl	80138be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f4:	4b08      	ldr	r3, [pc, #32]	; (8015218 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d902      	bls.n	8015204 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80151fe:	4b07      	ldr	r3, [pc, #28]	; (801521c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015200:	2201      	movs	r2, #1
 8015202:	601a      	str	r2, [r3, #0]
	}
}
 8015204:	bf00      	nop
 8015206:	3718      	adds	r7, #24
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	24001d04 	.word	0x24001d04
 8015210:	24001ce4 	.word	0x24001ce4
 8015214:	2400180c 	.word	0x2400180c
 8015218:	24001808 	.word	0x24001808
 801521c:	24001cf0 	.word	0x24001cf0

08015220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015220:	b480      	push	{r7}
 8015222:	b083      	sub	sp, #12
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015228:	4b06      	ldr	r3, [pc, #24]	; (8015244 <vTaskInternalSetTimeOutState+0x24>)
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015230:	4b05      	ldr	r3, [pc, #20]	; (8015248 <vTaskInternalSetTimeOutState+0x28>)
 8015232:	681a      	ldr	r2, [r3, #0]
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	605a      	str	r2, [r3, #4]
}
 8015238:	bf00      	nop
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	24001cf4 	.word	0x24001cf4
 8015248:	24001ce0 	.word	0x24001ce0

0801524c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b088      	sub	sp, #32
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10a      	bne.n	8015272 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015260:	f383 8811 	msr	BASEPRI, r3
 8015264:	f3bf 8f6f 	isb	sy
 8015268:	f3bf 8f4f 	dsb	sy
 801526c:	613b      	str	r3, [r7, #16]
}
 801526e:	bf00      	nop
 8015270:	e7fe      	b.n	8015270 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d10a      	bne.n	801528e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527c:	f383 8811 	msr	BASEPRI, r3
 8015280:	f3bf 8f6f 	isb	sy
 8015284:	f3bf 8f4f 	dsb	sy
 8015288:	60fb      	str	r3, [r7, #12]
}
 801528a:	bf00      	nop
 801528c:	e7fe      	b.n	801528c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801528e:	f000 feb1 	bl	8015ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015292:	4b1d      	ldr	r3, [pc, #116]	; (8015308 <xTaskCheckForTimeOut+0xbc>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	69ba      	ldr	r2, [r7, #24]
 801529e:	1ad3      	subs	r3, r2, r3
 80152a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152aa:	d102      	bne.n	80152b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80152ac:	2300      	movs	r3, #0
 80152ae:	61fb      	str	r3, [r7, #28]
 80152b0:	e023      	b.n	80152fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	4b15      	ldr	r3, [pc, #84]	; (801530c <xTaskCheckForTimeOut+0xc0>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d007      	beq.n	80152ce <xTaskCheckForTimeOut+0x82>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	69ba      	ldr	r2, [r7, #24]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d302      	bcc.n	80152ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80152c8:	2301      	movs	r3, #1
 80152ca:	61fb      	str	r3, [r7, #28]
 80152cc:	e015      	b.n	80152fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	697a      	ldr	r2, [r7, #20]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d20b      	bcs.n	80152f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	681a      	ldr	r2, [r3, #0]
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	1ad2      	subs	r2, r2, r3
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f7ff ff9b 	bl	8015220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80152ea:	2300      	movs	r3, #0
 80152ec:	61fb      	str	r3, [r7, #28]
 80152ee:	e004      	b.n	80152fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	2200      	movs	r2, #0
 80152f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80152f6:	2301      	movs	r3, #1
 80152f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80152fa:	f000 feab 	bl	8016054 <vPortExitCritical>

	return xReturn;
 80152fe:	69fb      	ldr	r3, [r7, #28]
}
 8015300:	4618      	mov	r0, r3
 8015302:	3720      	adds	r7, #32
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}
 8015308:	24001ce0 	.word	0x24001ce0
 801530c:	24001cf4 	.word	0x24001cf4

08015310 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015310:	b480      	push	{r7}
 8015312:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015314:	4b03      	ldr	r3, [pc, #12]	; (8015324 <vTaskMissedYield+0x14>)
 8015316:	2201      	movs	r2, #1
 8015318:	601a      	str	r2, [r3, #0]
}
 801531a:	bf00      	nop
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr
 8015324:	24001cf0 	.word	0x24001cf0

08015328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015330:	f000 f852 	bl	80153d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015334:	4b06      	ldr	r3, [pc, #24]	; (8015350 <prvIdleTask+0x28>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b01      	cmp	r3, #1
 801533a:	d9f9      	bls.n	8015330 <prvIdleTask+0x8>
			{
				taskYIELD();
 801533c:	4b05      	ldr	r3, [pc, #20]	; (8015354 <prvIdleTask+0x2c>)
 801533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015342:	601a      	str	r2, [r3, #0]
 8015344:	f3bf 8f4f 	dsb	sy
 8015348:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801534c:	e7f0      	b.n	8015330 <prvIdleTask+0x8>
 801534e:	bf00      	nop
 8015350:	2400180c 	.word	0x2400180c
 8015354:	e000ed04 	.word	0xe000ed04

08015358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801535e:	2300      	movs	r3, #0
 8015360:	607b      	str	r3, [r7, #4]
 8015362:	e00c      	b.n	801537e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015364:	687a      	ldr	r2, [r7, #4]
 8015366:	4613      	mov	r3, r2
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	4413      	add	r3, r2
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	4a12      	ldr	r2, [pc, #72]	; (80153b8 <prvInitialiseTaskLists+0x60>)
 8015370:	4413      	add	r3, r2
 8015372:	4618      	mov	r0, r3
 8015374:	f7fe fa76 	bl	8013864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	3301      	adds	r3, #1
 801537c:	607b      	str	r3, [r7, #4]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2b37      	cmp	r3, #55	; 0x37
 8015382:	d9ef      	bls.n	8015364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015384:	480d      	ldr	r0, [pc, #52]	; (80153bc <prvInitialiseTaskLists+0x64>)
 8015386:	f7fe fa6d 	bl	8013864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801538a:	480d      	ldr	r0, [pc, #52]	; (80153c0 <prvInitialiseTaskLists+0x68>)
 801538c:	f7fe fa6a 	bl	8013864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015390:	480c      	ldr	r0, [pc, #48]	; (80153c4 <prvInitialiseTaskLists+0x6c>)
 8015392:	f7fe fa67 	bl	8013864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015396:	480c      	ldr	r0, [pc, #48]	; (80153c8 <prvInitialiseTaskLists+0x70>)
 8015398:	f7fe fa64 	bl	8013864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801539c:	480b      	ldr	r0, [pc, #44]	; (80153cc <prvInitialiseTaskLists+0x74>)
 801539e:	f7fe fa61 	bl	8013864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80153a2:	4b0b      	ldr	r3, [pc, #44]	; (80153d0 <prvInitialiseTaskLists+0x78>)
 80153a4:	4a05      	ldr	r2, [pc, #20]	; (80153bc <prvInitialiseTaskLists+0x64>)
 80153a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80153a8:	4b0a      	ldr	r3, [pc, #40]	; (80153d4 <prvInitialiseTaskLists+0x7c>)
 80153aa:	4a05      	ldr	r2, [pc, #20]	; (80153c0 <prvInitialiseTaskLists+0x68>)
 80153ac:	601a      	str	r2, [r3, #0]
}
 80153ae:	bf00      	nop
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	2400180c 	.word	0x2400180c
 80153bc:	24001c6c 	.word	0x24001c6c
 80153c0:	24001c80 	.word	0x24001c80
 80153c4:	24001c9c 	.word	0x24001c9c
 80153c8:	24001cb0 	.word	0x24001cb0
 80153cc:	24001cc8 	.word	0x24001cc8
 80153d0:	24001c94 	.word	0x24001c94
 80153d4:	24001c98 	.word	0x24001c98

080153d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80153de:	e019      	b.n	8015414 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80153e0:	f000 fe08 	bl	8015ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153e4:	4b10      	ldr	r3, [pc, #64]	; (8015428 <prvCheckTasksWaitingTermination+0x50>)
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	68db      	ldr	r3, [r3, #12]
 80153ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	3304      	adds	r3, #4
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7fe fac1 	bl	8013978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80153f6:	4b0d      	ldr	r3, [pc, #52]	; (801542c <prvCheckTasksWaitingTermination+0x54>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	3b01      	subs	r3, #1
 80153fc:	4a0b      	ldr	r2, [pc, #44]	; (801542c <prvCheckTasksWaitingTermination+0x54>)
 80153fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015400:	4b0b      	ldr	r3, [pc, #44]	; (8015430 <prvCheckTasksWaitingTermination+0x58>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	3b01      	subs	r3, #1
 8015406:	4a0a      	ldr	r2, [pc, #40]	; (8015430 <prvCheckTasksWaitingTermination+0x58>)
 8015408:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801540a:	f000 fe23 	bl	8016054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 f810 	bl	8015434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015414:	4b06      	ldr	r3, [pc, #24]	; (8015430 <prvCheckTasksWaitingTermination+0x58>)
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d1e1      	bne.n	80153e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801541c:	bf00      	nop
 801541e:	bf00      	nop
 8015420:	3708      	adds	r7, #8
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
 8015426:	bf00      	nop
 8015428:	24001cb0 	.word	0x24001cb0
 801542c:	24001cdc 	.word	0x24001cdc
 8015430:	24001cc4 	.word	0x24001cc4

08015434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015442:	2b00      	cmp	r3, #0
 8015444:	d108      	bne.n	8015458 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801544a:	4618      	mov	r0, r3
 801544c:	f000 ffc0 	bl	80163d0 <vPortFree>
				vPortFree( pxTCB );
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 ffbd 	bl	80163d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015456:	e018      	b.n	801548a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801545e:	2b01      	cmp	r3, #1
 8015460:	d103      	bne.n	801546a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f000 ffb4 	bl	80163d0 <vPortFree>
	}
 8015468:	e00f      	b.n	801548a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015470:	2b02      	cmp	r3, #2
 8015472:	d00a      	beq.n	801548a <prvDeleteTCB+0x56>
	__asm volatile
 8015474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015478:	f383 8811 	msr	BASEPRI, r3
 801547c:	f3bf 8f6f 	isb	sy
 8015480:	f3bf 8f4f 	dsb	sy
 8015484:	60fb      	str	r3, [r7, #12]
}
 8015486:	bf00      	nop
 8015488:	e7fe      	b.n	8015488 <prvDeleteTCB+0x54>
	}
 801548a:	bf00      	nop
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
	...

08015494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015494:	b480      	push	{r7}
 8015496:	b083      	sub	sp, #12
 8015498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801549a:	4b0c      	ldr	r3, [pc, #48]	; (80154cc <prvResetNextTaskUnblockTime+0x38>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d104      	bne.n	80154ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80154a4:	4b0a      	ldr	r3, [pc, #40]	; (80154d0 <prvResetNextTaskUnblockTime+0x3c>)
 80154a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80154ac:	e008      	b.n	80154c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154ae:	4b07      	ldr	r3, [pc, #28]	; (80154cc <prvResetNextTaskUnblockTime+0x38>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	68db      	ldr	r3, [r3, #12]
 80154b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	4a04      	ldr	r2, [pc, #16]	; (80154d0 <prvResetNextTaskUnblockTime+0x3c>)
 80154be:	6013      	str	r3, [r2, #0]
}
 80154c0:	bf00      	nop
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr
 80154cc:	24001c94 	.word	0x24001c94
 80154d0:	24001cfc 	.word	0x24001cfc

080154d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80154d4:	b480      	push	{r7}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80154da:	4b0b      	ldr	r3, [pc, #44]	; (8015508 <xTaskGetSchedulerState+0x34>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d102      	bne.n	80154e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80154e2:	2301      	movs	r3, #1
 80154e4:	607b      	str	r3, [r7, #4]
 80154e6:	e008      	b.n	80154fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80154e8:	4b08      	ldr	r3, [pc, #32]	; (801550c <xTaskGetSchedulerState+0x38>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d102      	bne.n	80154f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80154f0:	2302      	movs	r3, #2
 80154f2:	607b      	str	r3, [r7, #4]
 80154f4:	e001      	b.n	80154fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80154f6:	2300      	movs	r3, #0
 80154f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80154fa:	687b      	ldr	r3, [r7, #4]
	}
 80154fc:	4618      	mov	r0, r3
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr
 8015508:	24001ce8 	.word	0x24001ce8
 801550c:	24001d04 	.word	0x24001d04

08015510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015510:	b580      	push	{r7, lr}
 8015512:	b086      	sub	sp, #24
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801551c:	2300      	movs	r3, #0
 801551e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d056      	beq.n	80155d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015526:	4b2e      	ldr	r3, [pc, #184]	; (80155e0 <xTaskPriorityDisinherit+0xd0>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	693a      	ldr	r2, [r7, #16]
 801552c:	429a      	cmp	r2, r3
 801552e:	d00a      	beq.n	8015546 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015534:	f383 8811 	msr	BASEPRI, r3
 8015538:	f3bf 8f6f 	isb	sy
 801553c:	f3bf 8f4f 	dsb	sy
 8015540:	60fb      	str	r3, [r7, #12]
}
 8015542:	bf00      	nop
 8015544:	e7fe      	b.n	8015544 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801554a:	2b00      	cmp	r3, #0
 801554c:	d10a      	bne.n	8015564 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015552:	f383 8811 	msr	BASEPRI, r3
 8015556:	f3bf 8f6f 	isb	sy
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	60bb      	str	r3, [r7, #8]
}
 8015560:	bf00      	nop
 8015562:	e7fe      	b.n	8015562 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015568:	1e5a      	subs	r2, r3, #1
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015576:	429a      	cmp	r2, r3
 8015578:	d02c      	beq.n	80155d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801557e:	2b00      	cmp	r3, #0
 8015580:	d128      	bne.n	80155d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	3304      	adds	r3, #4
 8015586:	4618      	mov	r0, r3
 8015588:	f7fe f9f6 	bl	8013978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015598:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155a4:	4b0f      	ldr	r3, [pc, #60]	; (80155e4 <xTaskPriorityDisinherit+0xd4>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d903      	bls.n	80155b4 <xTaskPriorityDisinherit+0xa4>
 80155ac:	693b      	ldr	r3, [r7, #16]
 80155ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155b0:	4a0c      	ldr	r2, [pc, #48]	; (80155e4 <xTaskPriorityDisinherit+0xd4>)
 80155b2:	6013      	str	r3, [r2, #0]
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155b8:	4613      	mov	r3, r2
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	4413      	add	r3, r2
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4a09      	ldr	r2, [pc, #36]	; (80155e8 <xTaskPriorityDisinherit+0xd8>)
 80155c2:	441a      	add	r2, r3
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	3304      	adds	r3, #4
 80155c8:	4619      	mov	r1, r3
 80155ca:	4610      	mov	r0, r2
 80155cc:	f7fe f977 	bl	80138be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80155d0:	2301      	movs	r3, #1
 80155d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80155d4:	697b      	ldr	r3, [r7, #20]
	}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3718      	adds	r7, #24
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}
 80155de:	bf00      	nop
 80155e0:	24001808 	.word	0x24001808
 80155e4:	24001ce4 	.word	0x24001ce4
 80155e8:	2400180c 	.word	0x2400180c

080155ec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80155ec:	b480      	push	{r7}
 80155ee:	b083      	sub	sp, #12
 80155f0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80155f2:	4b09      	ldr	r3, [pc, #36]	; (8015618 <uxTaskResetEventItemValue+0x2c>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	699b      	ldr	r3, [r3, #24]
 80155f8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155fa:	4b07      	ldr	r3, [pc, #28]	; (8015618 <uxTaskResetEventItemValue+0x2c>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015600:	4b05      	ldr	r3, [pc, #20]	; (8015618 <uxTaskResetEventItemValue+0x2c>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015608:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801560a:	687b      	ldr	r3, [r7, #4]
}
 801560c:	4618      	mov	r0, r3
 801560e:	370c      	adds	r7, #12
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr
 8015618:	24001808 	.word	0x24001808

0801561c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015626:	4b21      	ldr	r3, [pc, #132]	; (80156ac <prvAddCurrentTaskToDelayedList+0x90>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801562c:	4b20      	ldr	r3, [pc, #128]	; (80156b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	3304      	adds	r3, #4
 8015632:	4618      	mov	r0, r3
 8015634:	f7fe f9a0 	bl	8013978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801563e:	d10a      	bne.n	8015656 <prvAddCurrentTaskToDelayedList+0x3a>
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d007      	beq.n	8015656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015646:	4b1a      	ldr	r3, [pc, #104]	; (80156b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3304      	adds	r3, #4
 801564c:	4619      	mov	r1, r3
 801564e:	4819      	ldr	r0, [pc, #100]	; (80156b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8015650:	f7fe f935 	bl	80138be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015654:	e026      	b.n	80156a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015656:	68fa      	ldr	r2, [r7, #12]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	4413      	add	r3, r2
 801565c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801565e:	4b14      	ldr	r3, [pc, #80]	; (80156b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	68ba      	ldr	r2, [r7, #8]
 8015664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	429a      	cmp	r2, r3
 801566c:	d209      	bcs.n	8015682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801566e:	4b12      	ldr	r3, [pc, #72]	; (80156b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	4b0f      	ldr	r3, [pc, #60]	; (80156b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	3304      	adds	r3, #4
 8015678:	4619      	mov	r1, r3
 801567a:	4610      	mov	r0, r2
 801567c:	f7fe f943 	bl	8013906 <vListInsert>
}
 8015680:	e010      	b.n	80156a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015682:	4b0e      	ldr	r3, [pc, #56]	; (80156bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	4b0a      	ldr	r3, [pc, #40]	; (80156b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	3304      	adds	r3, #4
 801568c:	4619      	mov	r1, r3
 801568e:	4610      	mov	r0, r2
 8015690:	f7fe f939 	bl	8013906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015694:	4b0a      	ldr	r3, [pc, #40]	; (80156c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	68ba      	ldr	r2, [r7, #8]
 801569a:	429a      	cmp	r2, r3
 801569c:	d202      	bcs.n	80156a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801569e:	4a08      	ldr	r2, [pc, #32]	; (80156c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	6013      	str	r3, [r2, #0]
}
 80156a4:	bf00      	nop
 80156a6:	3710      	adds	r7, #16
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	24001ce0 	.word	0x24001ce0
 80156b0:	24001808 	.word	0x24001808
 80156b4:	24001cc8 	.word	0x24001cc8
 80156b8:	24001c98 	.word	0x24001c98
 80156bc:	24001c94 	.word	0x24001c94
 80156c0:	24001cfc 	.word	0x24001cfc

080156c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08a      	sub	sp, #40	; 0x28
 80156c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80156ca:	2300      	movs	r3, #0
 80156cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80156ce:	f000 fb07 	bl	8015ce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80156d2:	4b1c      	ldr	r3, [pc, #112]	; (8015744 <xTimerCreateTimerTask+0x80>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d021      	beq.n	801571e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80156da:	2300      	movs	r3, #0
 80156dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80156de:	2300      	movs	r3, #0
 80156e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80156e2:	1d3a      	adds	r2, r7, #4
 80156e4:	f107 0108 	add.w	r1, r7, #8
 80156e8:	f107 030c 	add.w	r3, r7, #12
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7fd fe33 	bl	8013358 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80156f2:	6879      	ldr	r1, [r7, #4]
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	68fa      	ldr	r2, [r7, #12]
 80156f8:	9202      	str	r2, [sp, #8]
 80156fa:	9301      	str	r3, [sp, #4]
 80156fc:	2302      	movs	r3, #2
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	2300      	movs	r3, #0
 8015702:	460a      	mov	r2, r1
 8015704:	4910      	ldr	r1, [pc, #64]	; (8015748 <xTimerCreateTimerTask+0x84>)
 8015706:	4811      	ldr	r0, [pc, #68]	; (801574c <xTimerCreateTimerTask+0x88>)
 8015708:	f7fe ff06 	bl	8014518 <xTaskCreateStatic>
 801570c:	4603      	mov	r3, r0
 801570e:	4a10      	ldr	r2, [pc, #64]	; (8015750 <xTimerCreateTimerTask+0x8c>)
 8015710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015712:	4b0f      	ldr	r3, [pc, #60]	; (8015750 <xTimerCreateTimerTask+0x8c>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801571a:	2301      	movs	r3, #1
 801571c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d10a      	bne.n	801573a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015728:	f383 8811 	msr	BASEPRI, r3
 801572c:	f3bf 8f6f 	isb	sy
 8015730:	f3bf 8f4f 	dsb	sy
 8015734:	613b      	str	r3, [r7, #16]
}
 8015736:	bf00      	nop
 8015738:	e7fe      	b.n	8015738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801573a:	697b      	ldr	r3, [r7, #20]
}
 801573c:	4618      	mov	r0, r3
 801573e:	3718      	adds	r7, #24
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	24001d38 	.word	0x24001d38
 8015748:	08017334 	.word	0x08017334
 801574c:	08015889 	.word	0x08015889
 8015750:	24001d3c 	.word	0x24001d3c

08015754 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b08a      	sub	sp, #40	; 0x28
 8015758:	af00      	add	r7, sp, #0
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	60b9      	str	r1, [r7, #8]
 801575e:	607a      	str	r2, [r7, #4]
 8015760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015762:	2300      	movs	r3, #0
 8015764:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d10a      	bne.n	8015782 <xTimerGenericCommand+0x2e>
	__asm volatile
 801576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015770:	f383 8811 	msr	BASEPRI, r3
 8015774:	f3bf 8f6f 	isb	sy
 8015778:	f3bf 8f4f 	dsb	sy
 801577c:	623b      	str	r3, [r7, #32]
}
 801577e:	bf00      	nop
 8015780:	e7fe      	b.n	8015780 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015782:	4b1a      	ldr	r3, [pc, #104]	; (80157ec <xTimerGenericCommand+0x98>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d02a      	beq.n	80157e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015796:	68bb      	ldr	r3, [r7, #8]
 8015798:	2b05      	cmp	r3, #5
 801579a:	dc18      	bgt.n	80157ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801579c:	f7ff fe9a 	bl	80154d4 <xTaskGetSchedulerState>
 80157a0:	4603      	mov	r3, r0
 80157a2:	2b02      	cmp	r3, #2
 80157a4:	d109      	bne.n	80157ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80157a6:	4b11      	ldr	r3, [pc, #68]	; (80157ec <xTimerGenericCommand+0x98>)
 80157a8:	6818      	ldr	r0, [r3, #0]
 80157aa:	f107 0110 	add.w	r1, r7, #16
 80157ae:	2300      	movs	r3, #0
 80157b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157b2:	f7fe fa49 	bl	8013c48 <xQueueGenericSend>
 80157b6:	6278      	str	r0, [r7, #36]	; 0x24
 80157b8:	e012      	b.n	80157e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80157ba:	4b0c      	ldr	r3, [pc, #48]	; (80157ec <xTimerGenericCommand+0x98>)
 80157bc:	6818      	ldr	r0, [r3, #0]
 80157be:	f107 0110 	add.w	r1, r7, #16
 80157c2:	2300      	movs	r3, #0
 80157c4:	2200      	movs	r2, #0
 80157c6:	f7fe fa3f 	bl	8013c48 <xQueueGenericSend>
 80157ca:	6278      	str	r0, [r7, #36]	; 0x24
 80157cc:	e008      	b.n	80157e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80157ce:	4b07      	ldr	r3, [pc, #28]	; (80157ec <xTimerGenericCommand+0x98>)
 80157d0:	6818      	ldr	r0, [r3, #0]
 80157d2:	f107 0110 	add.w	r1, r7, #16
 80157d6:	2300      	movs	r3, #0
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	f7fe fb33 	bl	8013e44 <xQueueGenericSendFromISR>
 80157de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80157e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3728      	adds	r7, #40	; 0x28
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	24001d38 	.word	0x24001d38

080157f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b088      	sub	sp, #32
 80157f4:	af02      	add	r7, sp, #8
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157fa:	4b22      	ldr	r3, [pc, #136]	; (8015884 <prvProcessExpiredTimer+0x94>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	68db      	ldr	r3, [r3, #12]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	3304      	adds	r3, #4
 8015808:	4618      	mov	r0, r3
 801580a:	f7fe f8b5 	bl	8013978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015814:	f003 0304 	and.w	r3, r3, #4
 8015818:	2b00      	cmp	r3, #0
 801581a:	d022      	beq.n	8015862 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	699a      	ldr	r2, [r3, #24]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	18d1      	adds	r1, r2, r3
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	683a      	ldr	r2, [r7, #0]
 8015828:	6978      	ldr	r0, [r7, #20]
 801582a:	f000 f8d1 	bl	80159d0 <prvInsertTimerInActiveList>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d01f      	beq.n	8015874 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015834:	2300      	movs	r3, #0
 8015836:	9300      	str	r3, [sp, #0]
 8015838:	2300      	movs	r3, #0
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	2100      	movs	r1, #0
 801583e:	6978      	ldr	r0, [r7, #20]
 8015840:	f7ff ff88 	bl	8015754 <xTimerGenericCommand>
 8015844:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d113      	bne.n	8015874 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015850:	f383 8811 	msr	BASEPRI, r3
 8015854:	f3bf 8f6f 	isb	sy
 8015858:	f3bf 8f4f 	dsb	sy
 801585c:	60fb      	str	r3, [r7, #12]
}
 801585e:	bf00      	nop
 8015860:	e7fe      	b.n	8015860 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015868:	f023 0301 	bic.w	r3, r3, #1
 801586c:	b2da      	uxtb	r2, r3
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	6a1b      	ldr	r3, [r3, #32]
 8015878:	6978      	ldr	r0, [r7, #20]
 801587a:	4798      	blx	r3
}
 801587c:	bf00      	nop
 801587e:	3718      	adds	r7, #24
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}
 8015884:	24001d30 	.word	0x24001d30

08015888 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b084      	sub	sp, #16
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015890:	f107 0308 	add.w	r3, r7, #8
 8015894:	4618      	mov	r0, r3
 8015896:	f000 f857 	bl	8015948 <prvGetNextExpireTime>
 801589a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	4619      	mov	r1, r3
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f000 f803 	bl	80158ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80158a6:	f000 f8d5 	bl	8015a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158aa:	e7f1      	b.n	8015890 <prvTimerTask+0x8>

080158ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80158b6:	f7ff f985 	bl	8014bc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80158ba:	f107 0308 	add.w	r3, r7, #8
 80158be:	4618      	mov	r0, r3
 80158c0:	f000 f866 	bl	8015990 <prvSampleTimeNow>
 80158c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d130      	bne.n	801592e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d10a      	bne.n	80158e8 <prvProcessTimerOrBlockTask+0x3c>
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d806      	bhi.n	80158e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80158da:	f7ff f981 	bl	8014be0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80158de:	68f9      	ldr	r1, [r7, #12]
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ff ff85 	bl	80157f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80158e6:	e024      	b.n	8015932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d008      	beq.n	8015900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80158ee:	4b13      	ldr	r3, [pc, #76]	; (801593c <prvProcessTimerOrBlockTask+0x90>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d101      	bne.n	80158fc <prvProcessTimerOrBlockTask+0x50>
 80158f8:	2301      	movs	r3, #1
 80158fa:	e000      	b.n	80158fe <prvProcessTimerOrBlockTask+0x52>
 80158fc:	2300      	movs	r3, #0
 80158fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015900:	4b0f      	ldr	r3, [pc, #60]	; (8015940 <prvProcessTimerOrBlockTask+0x94>)
 8015902:	6818      	ldr	r0, [r3, #0]
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	1ad3      	subs	r3, r2, r3
 801590a:	683a      	ldr	r2, [r7, #0]
 801590c:	4619      	mov	r1, r3
 801590e:	f7fe fdcf 	bl	80144b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015912:	f7ff f965 	bl	8014be0 <xTaskResumeAll>
 8015916:	4603      	mov	r3, r0
 8015918:	2b00      	cmp	r3, #0
 801591a:	d10a      	bne.n	8015932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801591c:	4b09      	ldr	r3, [pc, #36]	; (8015944 <prvProcessTimerOrBlockTask+0x98>)
 801591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015922:	601a      	str	r2, [r3, #0]
 8015924:	f3bf 8f4f 	dsb	sy
 8015928:	f3bf 8f6f 	isb	sy
}
 801592c:	e001      	b.n	8015932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801592e:	f7ff f957 	bl	8014be0 <xTaskResumeAll>
}
 8015932:	bf00      	nop
 8015934:	3710      	adds	r7, #16
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	24001d34 	.word	0x24001d34
 8015940:	24001d38 	.word	0x24001d38
 8015944:	e000ed04 	.word	0xe000ed04

08015948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015948:	b480      	push	{r7}
 801594a:	b085      	sub	sp, #20
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015950:	4b0e      	ldr	r3, [pc, #56]	; (801598c <prvGetNextExpireTime+0x44>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d101      	bne.n	801595e <prvGetNextExpireTime+0x16>
 801595a:	2201      	movs	r2, #1
 801595c:	e000      	b.n	8015960 <prvGetNextExpireTime+0x18>
 801595e:	2200      	movs	r2, #0
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d105      	bne.n	8015978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801596c:	4b07      	ldr	r3, [pc, #28]	; (801598c <prvGetNextExpireTime+0x44>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	68db      	ldr	r3, [r3, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	60fb      	str	r3, [r7, #12]
 8015976:	e001      	b.n	801597c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015978:	2300      	movs	r3, #0
 801597a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801597c:	68fb      	ldr	r3, [r7, #12]
}
 801597e:	4618      	mov	r0, r3
 8015980:	3714      	adds	r7, #20
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	24001d30 	.word	0x24001d30

08015990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015998:	f7ff f9c0 	bl	8014d1c <xTaskGetTickCount>
 801599c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801599e:	4b0b      	ldr	r3, [pc, #44]	; (80159cc <prvSampleTimeNow+0x3c>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	68fa      	ldr	r2, [r7, #12]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d205      	bcs.n	80159b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80159a8:	f000 f936 	bl	8015c18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2201      	movs	r2, #1
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	e002      	b.n	80159ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2200      	movs	r2, #0
 80159b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80159ba:	4a04      	ldr	r2, [pc, #16]	; (80159cc <prvSampleTimeNow+0x3c>)
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80159c0:	68fb      	ldr	r3, [r7, #12]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	bf00      	nop
 80159cc:	24001d40 	.word	0x24001d40

080159d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b086      	sub	sp, #24
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	607a      	str	r2, [r7, #4]
 80159dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80159de:	2300      	movs	r3, #0
 80159e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	68ba      	ldr	r2, [r7, #8]
 80159e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d812      	bhi.n	8015a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159f6:	687a      	ldr	r2, [r7, #4]
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	1ad2      	subs	r2, r2, r3
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	699b      	ldr	r3, [r3, #24]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d302      	bcc.n	8015a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015a04:	2301      	movs	r3, #1
 8015a06:	617b      	str	r3, [r7, #20]
 8015a08:	e01b      	b.n	8015a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015a0a:	4b10      	ldr	r3, [pc, #64]	; (8015a4c <prvInsertTimerInActiveList+0x7c>)
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	3304      	adds	r3, #4
 8015a12:	4619      	mov	r1, r3
 8015a14:	4610      	mov	r0, r2
 8015a16:	f7fd ff76 	bl	8013906 <vListInsert>
 8015a1a:	e012      	b.n	8015a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d206      	bcs.n	8015a32 <prvInsertTimerInActiveList+0x62>
 8015a24:	68ba      	ldr	r2, [r7, #8]
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d302      	bcc.n	8015a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	617b      	str	r3, [r7, #20]
 8015a30:	e007      	b.n	8015a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a32:	4b07      	ldr	r3, [pc, #28]	; (8015a50 <prvInsertTimerInActiveList+0x80>)
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	3304      	adds	r3, #4
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	f7fd ff62 	bl	8013906 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015a42:	697b      	ldr	r3, [r7, #20]
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3718      	adds	r7, #24
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	24001d34 	.word	0x24001d34
 8015a50:	24001d30 	.word	0x24001d30

08015a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b08e      	sub	sp, #56	; 0x38
 8015a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015a5a:	e0ca      	b.n	8015bf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	da18      	bge.n	8015a94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015a62:	1d3b      	adds	r3, r7, #4
 8015a64:	3304      	adds	r3, #4
 8015a66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d10a      	bne.n	8015a84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a72:	f383 8811 	msr	BASEPRI, r3
 8015a76:	f3bf 8f6f 	isb	sy
 8015a7a:	f3bf 8f4f 	dsb	sy
 8015a7e:	61fb      	str	r3, [r7, #28]
}
 8015a80:	bf00      	nop
 8015a82:	e7fe      	b.n	8015a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a8a:	6850      	ldr	r0, [r2, #4]
 8015a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a8e:	6892      	ldr	r2, [r2, #8]
 8015a90:	4611      	mov	r1, r2
 8015a92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	f2c0 80aa 	blt.w	8015bf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa2:	695b      	ldr	r3, [r3, #20]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d004      	beq.n	8015ab2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aaa:	3304      	adds	r3, #4
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fd ff63 	bl	8013978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ab2:	463b      	mov	r3, r7
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff ff6b 	bl	8015990 <prvSampleTimeNow>
 8015aba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2b09      	cmp	r3, #9
 8015ac0:	f200 8097 	bhi.w	8015bf2 <prvProcessReceivedCommands+0x19e>
 8015ac4:	a201      	add	r2, pc, #4	; (adr r2, 8015acc <prvProcessReceivedCommands+0x78>)
 8015ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aca:	bf00      	nop
 8015acc:	08015af5 	.word	0x08015af5
 8015ad0:	08015af5 	.word	0x08015af5
 8015ad4:	08015af5 	.word	0x08015af5
 8015ad8:	08015b69 	.word	0x08015b69
 8015adc:	08015b7d 	.word	0x08015b7d
 8015ae0:	08015bc7 	.word	0x08015bc7
 8015ae4:	08015af5 	.word	0x08015af5
 8015ae8:	08015af5 	.word	0x08015af5
 8015aec:	08015b69 	.word	0x08015b69
 8015af0:	08015b7d 	.word	0x08015b7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015afa:	f043 0301 	orr.w	r3, r3, #1
 8015afe:	b2da      	uxtb	r2, r3
 8015b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015b06:	68ba      	ldr	r2, [r7, #8]
 8015b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0a:	699b      	ldr	r3, [r3, #24]
 8015b0c:	18d1      	adds	r1, r2, r3
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b14:	f7ff ff5c 	bl	80159d0 <prvInsertTimerInActiveList>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d069      	beq.n	8015bf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b20:	6a1b      	ldr	r3, [r3, #32]
 8015b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b2c:	f003 0304 	and.w	r3, r3, #4
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d05e      	beq.n	8015bf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015b34:	68ba      	ldr	r2, [r7, #8]
 8015b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b38:	699b      	ldr	r3, [r3, #24]
 8015b3a:	441a      	add	r2, r3
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	2300      	movs	r3, #0
 8015b42:	2100      	movs	r1, #0
 8015b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b46:	f7ff fe05 	bl	8015754 <xTimerGenericCommand>
 8015b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015b4c:	6a3b      	ldr	r3, [r7, #32]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d14f      	bne.n	8015bf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b56:	f383 8811 	msr	BASEPRI, r3
 8015b5a:	f3bf 8f6f 	isb	sy
 8015b5e:	f3bf 8f4f 	dsb	sy
 8015b62:	61bb      	str	r3, [r7, #24]
}
 8015b64:	bf00      	nop
 8015b66:	e7fe      	b.n	8015b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b6e:	f023 0301 	bic.w	r3, r3, #1
 8015b72:	b2da      	uxtb	r2, r3
 8015b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015b7a:	e03a      	b.n	8015bf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b82:	f043 0301 	orr.w	r3, r3, #1
 8015b86:	b2da      	uxtb	r2, r3
 8015b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015b8e:	68ba      	ldr	r2, [r7, #8]
 8015b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b96:	699b      	ldr	r3, [r3, #24]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10a      	bne.n	8015bb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba0:	f383 8811 	msr	BASEPRI, r3
 8015ba4:	f3bf 8f6f 	isb	sy
 8015ba8:	f3bf 8f4f 	dsb	sy
 8015bac:	617b      	str	r3, [r7, #20]
}
 8015bae:	bf00      	nop
 8015bb0:	e7fe      	b.n	8015bb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb4:	699a      	ldr	r2, [r3, #24]
 8015bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb8:	18d1      	adds	r1, r2, r3
 8015bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bc0:	f7ff ff06 	bl	80159d0 <prvInsertTimerInActiveList>
					break;
 8015bc4:	e015      	b.n	8015bf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bcc:	f003 0302 	and.w	r3, r3, #2
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d103      	bne.n	8015bdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bd6:	f000 fbfb 	bl	80163d0 <vPortFree>
 8015bda:	e00a      	b.n	8015bf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015be2:	f023 0301 	bic.w	r3, r3, #1
 8015be6:	b2da      	uxtb	r2, r3
 8015be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015bee:	e000      	b.n	8015bf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015bf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015bf2:	4b08      	ldr	r3, [pc, #32]	; (8015c14 <prvProcessReceivedCommands+0x1c0>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	1d39      	adds	r1, r7, #4
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7fe f9be 	bl	8013f7c <xQueueReceive>
 8015c00:	4603      	mov	r3, r0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	f47f af2a 	bne.w	8015a5c <prvProcessReceivedCommands+0x8>
	}
}
 8015c08:	bf00      	nop
 8015c0a:	bf00      	nop
 8015c0c:	3730      	adds	r7, #48	; 0x30
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	24001d38 	.word	0x24001d38

08015c18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b088      	sub	sp, #32
 8015c1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015c1e:	e048      	b.n	8015cb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015c20:	4b2d      	ldr	r3, [pc, #180]	; (8015cd8 <prvSwitchTimerLists+0xc0>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c2a:	4b2b      	ldr	r3, [pc, #172]	; (8015cd8 <prvSwitchTimerLists+0xc0>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	68db      	ldr	r3, [r3, #12]
 8015c32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	3304      	adds	r3, #4
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f7fd fe9d 	bl	8013978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	6a1b      	ldr	r3, [r3, #32]
 8015c42:	68f8      	ldr	r0, [r7, #12]
 8015c44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c4c:	f003 0304 	and.w	r3, r3, #4
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d02e      	beq.n	8015cb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	699b      	ldr	r3, [r3, #24]
 8015c58:	693a      	ldr	r2, [r7, #16]
 8015c5a:	4413      	add	r3, r2
 8015c5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015c5e:	68ba      	ldr	r2, [r7, #8]
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d90e      	bls.n	8015c84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	68ba      	ldr	r2, [r7, #8]
 8015c6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	68fa      	ldr	r2, [r7, #12]
 8015c70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015c72:	4b19      	ldr	r3, [pc, #100]	; (8015cd8 <prvSwitchTimerLists+0xc0>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	3304      	adds	r3, #4
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	4610      	mov	r0, r2
 8015c7e:	f7fd fe42 	bl	8013906 <vListInsert>
 8015c82:	e016      	b.n	8015cb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015c84:	2300      	movs	r3, #0
 8015c86:	9300      	str	r3, [sp, #0]
 8015c88:	2300      	movs	r3, #0
 8015c8a:	693a      	ldr	r2, [r7, #16]
 8015c8c:	2100      	movs	r1, #0
 8015c8e:	68f8      	ldr	r0, [r7, #12]
 8015c90:	f7ff fd60 	bl	8015754 <xTimerGenericCommand>
 8015c94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d10a      	bne.n	8015cb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca0:	f383 8811 	msr	BASEPRI, r3
 8015ca4:	f3bf 8f6f 	isb	sy
 8015ca8:	f3bf 8f4f 	dsb	sy
 8015cac:	603b      	str	r3, [r7, #0]
}
 8015cae:	bf00      	nop
 8015cb0:	e7fe      	b.n	8015cb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015cb2:	4b09      	ldr	r3, [pc, #36]	; (8015cd8 <prvSwitchTimerLists+0xc0>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d1b1      	bne.n	8015c20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015cbc:	4b06      	ldr	r3, [pc, #24]	; (8015cd8 <prvSwitchTimerLists+0xc0>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015cc2:	4b06      	ldr	r3, [pc, #24]	; (8015cdc <prvSwitchTimerLists+0xc4>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	4a04      	ldr	r2, [pc, #16]	; (8015cd8 <prvSwitchTimerLists+0xc0>)
 8015cc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015cca:	4a04      	ldr	r2, [pc, #16]	; (8015cdc <prvSwitchTimerLists+0xc4>)
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	6013      	str	r3, [r2, #0]
}
 8015cd0:	bf00      	nop
 8015cd2:	3718      	adds	r7, #24
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}
 8015cd8:	24001d30 	.word	0x24001d30
 8015cdc:	24001d34 	.word	0x24001d34

08015ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015ce6:	f000 f985 	bl	8015ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015cea:	4b15      	ldr	r3, [pc, #84]	; (8015d40 <prvCheckForValidListAndQueue+0x60>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d120      	bne.n	8015d34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015cf2:	4814      	ldr	r0, [pc, #80]	; (8015d44 <prvCheckForValidListAndQueue+0x64>)
 8015cf4:	f7fd fdb6 	bl	8013864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015cf8:	4813      	ldr	r0, [pc, #76]	; (8015d48 <prvCheckForValidListAndQueue+0x68>)
 8015cfa:	f7fd fdb3 	bl	8013864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015cfe:	4b13      	ldr	r3, [pc, #76]	; (8015d4c <prvCheckForValidListAndQueue+0x6c>)
 8015d00:	4a10      	ldr	r2, [pc, #64]	; (8015d44 <prvCheckForValidListAndQueue+0x64>)
 8015d02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015d04:	4b12      	ldr	r3, [pc, #72]	; (8015d50 <prvCheckForValidListAndQueue+0x70>)
 8015d06:	4a10      	ldr	r2, [pc, #64]	; (8015d48 <prvCheckForValidListAndQueue+0x68>)
 8015d08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	9300      	str	r3, [sp, #0]
 8015d0e:	4b11      	ldr	r3, [pc, #68]	; (8015d54 <prvCheckForValidListAndQueue+0x74>)
 8015d10:	4a11      	ldr	r2, [pc, #68]	; (8015d58 <prvCheckForValidListAndQueue+0x78>)
 8015d12:	2110      	movs	r1, #16
 8015d14:	200a      	movs	r0, #10
 8015d16:	f7fd fec1 	bl	8013a9c <xQueueGenericCreateStatic>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	4a08      	ldr	r2, [pc, #32]	; (8015d40 <prvCheckForValidListAndQueue+0x60>)
 8015d1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015d20:	4b07      	ldr	r3, [pc, #28]	; (8015d40 <prvCheckForValidListAndQueue+0x60>)
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d005      	beq.n	8015d34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015d28:	4b05      	ldr	r3, [pc, #20]	; (8015d40 <prvCheckForValidListAndQueue+0x60>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	490b      	ldr	r1, [pc, #44]	; (8015d5c <prvCheckForValidListAndQueue+0x7c>)
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7fe fb94 	bl	801445c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d34:	f000 f98e 	bl	8016054 <vPortExitCritical>
}
 8015d38:	bf00      	nop
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	24001d38 	.word	0x24001d38
 8015d44:	24001d08 	.word	0x24001d08
 8015d48:	24001d1c 	.word	0x24001d1c
 8015d4c:	24001d30 	.word	0x24001d30
 8015d50:	24001d34 	.word	0x24001d34
 8015d54:	24001de4 	.word	0x24001de4
 8015d58:	24001d44 	.word	0x24001d44
 8015d5c:	0801733c 	.word	0x0801733c

08015d60 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b08a      	sub	sp, #40	; 0x28
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	60b9      	str	r1, [r7, #8]
 8015d6a:	607a      	str	r2, [r7, #4]
 8015d6c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015d6e:	f06f 0301 	mvn.w	r3, #1
 8015d72:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015d80:	4b06      	ldr	r3, [pc, #24]	; (8015d9c <xTimerPendFunctionCallFromISR+0x3c>)
 8015d82:	6818      	ldr	r0, [r3, #0]
 8015d84:	f107 0114 	add.w	r1, r7, #20
 8015d88:	2300      	movs	r3, #0
 8015d8a:	683a      	ldr	r2, [r7, #0]
 8015d8c:	f7fe f85a 	bl	8013e44 <xQueueGenericSendFromISR>
 8015d90:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3728      	adds	r7, #40	; 0x28
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	24001d38 	.word	0x24001d38

08015da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015da0:	b480      	push	{r7}
 8015da2:	b085      	sub	sp, #20
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	3b04      	subs	r3, #4
 8015db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	3b04      	subs	r3, #4
 8015dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	f023 0201 	bic.w	r2, r3, #1
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	3b04      	subs	r3, #4
 8015dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015dd0:	4a0c      	ldr	r2, [pc, #48]	; (8015e04 <pxPortInitialiseStack+0x64>)
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	3b14      	subs	r3, #20
 8015dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	3b04      	subs	r3, #4
 8015de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	f06f 0202 	mvn.w	r2, #2
 8015dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	3b20      	subs	r3, #32
 8015df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015df6:	68fb      	ldr	r3, [r7, #12]
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3714      	adds	r7, #20
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	08015e09 	.word	0x08015e09

08015e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b085      	sub	sp, #20
 8015e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015e12:	4b12      	ldr	r3, [pc, #72]	; (8015e5c <prvTaskExitError+0x54>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e1a:	d00a      	beq.n	8015e32 <prvTaskExitError+0x2a>
	__asm volatile
 8015e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e20:	f383 8811 	msr	BASEPRI, r3
 8015e24:	f3bf 8f6f 	isb	sy
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	60fb      	str	r3, [r7, #12]
}
 8015e2e:	bf00      	nop
 8015e30:	e7fe      	b.n	8015e30 <prvTaskExitError+0x28>
	__asm volatile
 8015e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e36:	f383 8811 	msr	BASEPRI, r3
 8015e3a:	f3bf 8f6f 	isb	sy
 8015e3e:	f3bf 8f4f 	dsb	sy
 8015e42:	60bb      	str	r3, [r7, #8]
}
 8015e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015e46:	bf00      	nop
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d0fc      	beq.n	8015e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015e4e:	bf00      	nop
 8015e50:	bf00      	nop
 8015e52:	3714      	adds	r7, #20
 8015e54:	46bd      	mov	sp, r7
 8015e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5a:	4770      	bx	lr
 8015e5c:	240000a0 	.word	0x240000a0

08015e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015e60:	4b07      	ldr	r3, [pc, #28]	; (8015e80 <pxCurrentTCBConst2>)
 8015e62:	6819      	ldr	r1, [r3, #0]
 8015e64:	6808      	ldr	r0, [r1, #0]
 8015e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6a:	f380 8809 	msr	PSP, r0
 8015e6e:	f3bf 8f6f 	isb	sy
 8015e72:	f04f 0000 	mov.w	r0, #0
 8015e76:	f380 8811 	msr	BASEPRI, r0
 8015e7a:	4770      	bx	lr
 8015e7c:	f3af 8000 	nop.w

08015e80 <pxCurrentTCBConst2>:
 8015e80:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015e84:	bf00      	nop
 8015e86:	bf00      	nop

08015e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015e88:	4808      	ldr	r0, [pc, #32]	; (8015eac <prvPortStartFirstTask+0x24>)
 8015e8a:	6800      	ldr	r0, [r0, #0]
 8015e8c:	6800      	ldr	r0, [r0, #0]
 8015e8e:	f380 8808 	msr	MSP, r0
 8015e92:	f04f 0000 	mov.w	r0, #0
 8015e96:	f380 8814 	msr	CONTROL, r0
 8015e9a:	b662      	cpsie	i
 8015e9c:	b661      	cpsie	f
 8015e9e:	f3bf 8f4f 	dsb	sy
 8015ea2:	f3bf 8f6f 	isb	sy
 8015ea6:	df00      	svc	0
 8015ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015eaa:	bf00      	nop
 8015eac:	e000ed08 	.word	0xe000ed08

08015eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b086      	sub	sp, #24
 8015eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015eb6:	4b46      	ldr	r3, [pc, #280]	; (8015fd0 <xPortStartScheduler+0x120>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4a46      	ldr	r2, [pc, #280]	; (8015fd4 <xPortStartScheduler+0x124>)
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	d10a      	bne.n	8015ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8015ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec4:	f383 8811 	msr	BASEPRI, r3
 8015ec8:	f3bf 8f6f 	isb	sy
 8015ecc:	f3bf 8f4f 	dsb	sy
 8015ed0:	613b      	str	r3, [r7, #16]
}
 8015ed2:	bf00      	nop
 8015ed4:	e7fe      	b.n	8015ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015ed6:	4b3e      	ldr	r3, [pc, #248]	; (8015fd0 <xPortStartScheduler+0x120>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4a3f      	ldr	r2, [pc, #252]	; (8015fd8 <xPortStartScheduler+0x128>)
 8015edc:	4293      	cmp	r3, r2
 8015ede:	d10a      	bne.n	8015ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8015ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ee4:	f383 8811 	msr	BASEPRI, r3
 8015ee8:	f3bf 8f6f 	isb	sy
 8015eec:	f3bf 8f4f 	dsb	sy
 8015ef0:	60fb      	str	r3, [r7, #12]
}
 8015ef2:	bf00      	nop
 8015ef4:	e7fe      	b.n	8015ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ef6:	4b39      	ldr	r3, [pc, #228]	; (8015fdc <xPortStartScheduler+0x12c>)
 8015ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015f02:	697b      	ldr	r3, [r7, #20]
 8015f04:	22ff      	movs	r2, #255	; 0xff
 8015f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015f10:	78fb      	ldrb	r3, [r7, #3]
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015f18:	b2da      	uxtb	r2, r3
 8015f1a:	4b31      	ldr	r3, [pc, #196]	; (8015fe0 <xPortStartScheduler+0x130>)
 8015f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015f1e:	4b31      	ldr	r3, [pc, #196]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f20:	2207      	movs	r2, #7
 8015f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f24:	e009      	b.n	8015f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015f26:	4b2f      	ldr	r3, [pc, #188]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	3b01      	subs	r3, #1
 8015f2c:	4a2d      	ldr	r2, [pc, #180]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015f30:	78fb      	ldrb	r3, [r7, #3]
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	005b      	lsls	r3, r3, #1
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f3a:	78fb      	ldrb	r3, [r7, #3]
 8015f3c:	b2db      	uxtb	r3, r3
 8015f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f42:	2b80      	cmp	r3, #128	; 0x80
 8015f44:	d0ef      	beq.n	8015f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015f46:	4b27      	ldr	r3, [pc, #156]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	f1c3 0307 	rsb	r3, r3, #7
 8015f4e:	2b04      	cmp	r3, #4
 8015f50:	d00a      	beq.n	8015f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8015f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f56:	f383 8811 	msr	BASEPRI, r3
 8015f5a:	f3bf 8f6f 	isb	sy
 8015f5e:	f3bf 8f4f 	dsb	sy
 8015f62:	60bb      	str	r3, [r7, #8]
}
 8015f64:	bf00      	nop
 8015f66:	e7fe      	b.n	8015f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015f68:	4b1e      	ldr	r3, [pc, #120]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	021b      	lsls	r3, r3, #8
 8015f6e:	4a1d      	ldr	r2, [pc, #116]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015f72:	4b1c      	ldr	r3, [pc, #112]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015f7a:	4a1a      	ldr	r2, [pc, #104]	; (8015fe4 <xPortStartScheduler+0x134>)
 8015f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	b2da      	uxtb	r2, r3
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015f86:	4b18      	ldr	r3, [pc, #96]	; (8015fe8 <xPortStartScheduler+0x138>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	4a17      	ldr	r2, [pc, #92]	; (8015fe8 <xPortStartScheduler+0x138>)
 8015f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015f92:	4b15      	ldr	r3, [pc, #84]	; (8015fe8 <xPortStartScheduler+0x138>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	4a14      	ldr	r2, [pc, #80]	; (8015fe8 <xPortStartScheduler+0x138>)
 8015f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015f9e:	f000 f8dd 	bl	801615c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015fa2:	4b12      	ldr	r3, [pc, #72]	; (8015fec <xPortStartScheduler+0x13c>)
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015fa8:	f000 f8fc 	bl	80161a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015fac:	4b10      	ldr	r3, [pc, #64]	; (8015ff0 <xPortStartScheduler+0x140>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	4a0f      	ldr	r2, [pc, #60]	; (8015ff0 <xPortStartScheduler+0x140>)
 8015fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015fb8:	f7ff ff66 	bl	8015e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015fbc:	f7fe ff80 	bl	8014ec0 <vTaskSwitchContext>
	prvTaskExitError();
 8015fc0:	f7ff ff22 	bl	8015e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015fc4:	2300      	movs	r3, #0
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3718      	adds	r7, #24
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	e000ed00 	.word	0xe000ed00
 8015fd4:	410fc271 	.word	0x410fc271
 8015fd8:	410fc270 	.word	0x410fc270
 8015fdc:	e000e400 	.word	0xe000e400
 8015fe0:	24001e34 	.word	0x24001e34
 8015fe4:	24001e38 	.word	0x24001e38
 8015fe8:	e000ed20 	.word	0xe000ed20
 8015fec:	240000a0 	.word	0x240000a0
 8015ff0:	e000ef34 	.word	0xe000ef34

08015ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8015ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ffe:	f383 8811 	msr	BASEPRI, r3
 8016002:	f3bf 8f6f 	isb	sy
 8016006:	f3bf 8f4f 	dsb	sy
 801600a:	607b      	str	r3, [r7, #4]
}
 801600c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801600e:	4b0f      	ldr	r3, [pc, #60]	; (801604c <vPortEnterCritical+0x58>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	3301      	adds	r3, #1
 8016014:	4a0d      	ldr	r2, [pc, #52]	; (801604c <vPortEnterCritical+0x58>)
 8016016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016018:	4b0c      	ldr	r3, [pc, #48]	; (801604c <vPortEnterCritical+0x58>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b01      	cmp	r3, #1
 801601e:	d10f      	bne.n	8016040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016020:	4b0b      	ldr	r3, [pc, #44]	; (8016050 <vPortEnterCritical+0x5c>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d00a      	beq.n	8016040 <vPortEnterCritical+0x4c>
	__asm volatile
 801602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801602e:	f383 8811 	msr	BASEPRI, r3
 8016032:	f3bf 8f6f 	isb	sy
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	603b      	str	r3, [r7, #0]
}
 801603c:	bf00      	nop
 801603e:	e7fe      	b.n	801603e <vPortEnterCritical+0x4a>
	}
}
 8016040:	bf00      	nop
 8016042:	370c      	adds	r7, #12
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr
 801604c:	240000a0 	.word	0x240000a0
 8016050:	e000ed04 	.word	0xe000ed04

08016054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801605a:	4b12      	ldr	r3, [pc, #72]	; (80160a4 <vPortExitCritical+0x50>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d10a      	bne.n	8016078 <vPortExitCritical+0x24>
	__asm volatile
 8016062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016066:	f383 8811 	msr	BASEPRI, r3
 801606a:	f3bf 8f6f 	isb	sy
 801606e:	f3bf 8f4f 	dsb	sy
 8016072:	607b      	str	r3, [r7, #4]
}
 8016074:	bf00      	nop
 8016076:	e7fe      	b.n	8016076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016078:	4b0a      	ldr	r3, [pc, #40]	; (80160a4 <vPortExitCritical+0x50>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	3b01      	subs	r3, #1
 801607e:	4a09      	ldr	r2, [pc, #36]	; (80160a4 <vPortExitCritical+0x50>)
 8016080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016082:	4b08      	ldr	r3, [pc, #32]	; (80160a4 <vPortExitCritical+0x50>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d105      	bne.n	8016096 <vPortExitCritical+0x42>
 801608a:	2300      	movs	r3, #0
 801608c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	f383 8811 	msr	BASEPRI, r3
}
 8016094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016096:	bf00      	nop
 8016098:	370c      	adds	r7, #12
 801609a:	46bd      	mov	sp, r7
 801609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a0:	4770      	bx	lr
 80160a2:	bf00      	nop
 80160a4:	240000a0 	.word	0x240000a0
	...

080160b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80160b0:	f3ef 8009 	mrs	r0, PSP
 80160b4:	f3bf 8f6f 	isb	sy
 80160b8:	4b15      	ldr	r3, [pc, #84]	; (8016110 <pxCurrentTCBConst>)
 80160ba:	681a      	ldr	r2, [r3, #0]
 80160bc:	f01e 0f10 	tst.w	lr, #16
 80160c0:	bf08      	it	eq
 80160c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80160c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ca:	6010      	str	r0, [r2, #0]
 80160cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80160d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80160d4:	f380 8811 	msr	BASEPRI, r0
 80160d8:	f3bf 8f4f 	dsb	sy
 80160dc:	f3bf 8f6f 	isb	sy
 80160e0:	f7fe feee 	bl	8014ec0 <vTaskSwitchContext>
 80160e4:	f04f 0000 	mov.w	r0, #0
 80160e8:	f380 8811 	msr	BASEPRI, r0
 80160ec:	bc09      	pop	{r0, r3}
 80160ee:	6819      	ldr	r1, [r3, #0]
 80160f0:	6808      	ldr	r0, [r1, #0]
 80160f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f6:	f01e 0f10 	tst.w	lr, #16
 80160fa:	bf08      	it	eq
 80160fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016100:	f380 8809 	msr	PSP, r0
 8016104:	f3bf 8f6f 	isb	sy
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop
 801610c:	f3af 8000 	nop.w

08016110 <pxCurrentTCBConst>:
 8016110:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016114:	bf00      	nop
 8016116:	bf00      	nop

08016118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
	__asm volatile
 801611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016122:	f383 8811 	msr	BASEPRI, r3
 8016126:	f3bf 8f6f 	isb	sy
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	607b      	str	r3, [r7, #4]
}
 8016130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016132:	f7fe fe03 	bl	8014d3c <xTaskIncrementTick>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d003      	beq.n	8016144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801613c:	4b06      	ldr	r3, [pc, #24]	; (8016158 <xPortSysTickHandler+0x40>)
 801613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016142:	601a      	str	r2, [r3, #0]
 8016144:	2300      	movs	r3, #0
 8016146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	f383 8811 	msr	BASEPRI, r3
}
 801614e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016150:	bf00      	nop
 8016152:	3708      	adds	r7, #8
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	e000ed04 	.word	0xe000ed04

0801615c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801615c:	b480      	push	{r7}
 801615e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016160:	4b0b      	ldr	r3, [pc, #44]	; (8016190 <vPortSetupTimerInterrupt+0x34>)
 8016162:	2200      	movs	r2, #0
 8016164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016166:	4b0b      	ldr	r3, [pc, #44]	; (8016194 <vPortSetupTimerInterrupt+0x38>)
 8016168:	2200      	movs	r2, #0
 801616a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801616c:	4b0a      	ldr	r3, [pc, #40]	; (8016198 <vPortSetupTimerInterrupt+0x3c>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	4a0a      	ldr	r2, [pc, #40]	; (801619c <vPortSetupTimerInterrupt+0x40>)
 8016172:	fba2 2303 	umull	r2, r3, r2, r3
 8016176:	099b      	lsrs	r3, r3, #6
 8016178:	4a09      	ldr	r2, [pc, #36]	; (80161a0 <vPortSetupTimerInterrupt+0x44>)
 801617a:	3b01      	subs	r3, #1
 801617c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801617e:	4b04      	ldr	r3, [pc, #16]	; (8016190 <vPortSetupTimerInterrupt+0x34>)
 8016180:	2207      	movs	r2, #7
 8016182:	601a      	str	r2, [r3, #0]
}
 8016184:	bf00      	nop
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr
 801618e:	bf00      	nop
 8016190:	e000e010 	.word	0xe000e010
 8016194:	e000e018 	.word	0xe000e018
 8016198:	24000090 	.word	0x24000090
 801619c:	10624dd3 	.word	0x10624dd3
 80161a0:	e000e014 	.word	0xe000e014

080161a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80161a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80161b4 <vPortEnableVFP+0x10>
 80161a8:	6801      	ldr	r1, [r0, #0]
 80161aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80161ae:	6001      	str	r1, [r0, #0]
 80161b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80161b2:	bf00      	nop
 80161b4:	e000ed88 	.word	0xe000ed88

080161b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80161b8:	b480      	push	{r7}
 80161ba:	b085      	sub	sp, #20
 80161bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80161be:	f3ef 8305 	mrs	r3, IPSR
 80161c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2b0f      	cmp	r3, #15
 80161c8:	d914      	bls.n	80161f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80161ca:	4a17      	ldr	r2, [pc, #92]	; (8016228 <vPortValidateInterruptPriority+0x70>)
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	4413      	add	r3, r2
 80161d0:	781b      	ldrb	r3, [r3, #0]
 80161d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80161d4:	4b15      	ldr	r3, [pc, #84]	; (801622c <vPortValidateInterruptPriority+0x74>)
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	7afa      	ldrb	r2, [r7, #11]
 80161da:	429a      	cmp	r2, r3
 80161dc:	d20a      	bcs.n	80161f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80161de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e2:	f383 8811 	msr	BASEPRI, r3
 80161e6:	f3bf 8f6f 	isb	sy
 80161ea:	f3bf 8f4f 	dsb	sy
 80161ee:	607b      	str	r3, [r7, #4]
}
 80161f0:	bf00      	nop
 80161f2:	e7fe      	b.n	80161f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80161f4:	4b0e      	ldr	r3, [pc, #56]	; (8016230 <vPortValidateInterruptPriority+0x78>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80161fc:	4b0d      	ldr	r3, [pc, #52]	; (8016234 <vPortValidateInterruptPriority+0x7c>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	429a      	cmp	r2, r3
 8016202:	d90a      	bls.n	801621a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016208:	f383 8811 	msr	BASEPRI, r3
 801620c:	f3bf 8f6f 	isb	sy
 8016210:	f3bf 8f4f 	dsb	sy
 8016214:	603b      	str	r3, [r7, #0]
}
 8016216:	bf00      	nop
 8016218:	e7fe      	b.n	8016218 <vPortValidateInterruptPriority+0x60>
	}
 801621a:	bf00      	nop
 801621c:	3714      	adds	r7, #20
 801621e:	46bd      	mov	sp, r7
 8016220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016224:	4770      	bx	lr
 8016226:	bf00      	nop
 8016228:	e000e3f0 	.word	0xe000e3f0
 801622c:	24001e34 	.word	0x24001e34
 8016230:	e000ed0c 	.word	0xe000ed0c
 8016234:	24001e38 	.word	0x24001e38

08016238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b08a      	sub	sp, #40	; 0x28
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016240:	2300      	movs	r3, #0
 8016242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016244:	f7fe fcbe 	bl	8014bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016248:	4b5b      	ldr	r3, [pc, #364]	; (80163b8 <pvPortMalloc+0x180>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d101      	bne.n	8016254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016250:	f000 f920 	bl	8016494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016254:	4b59      	ldr	r3, [pc, #356]	; (80163bc <pvPortMalloc+0x184>)
 8016256:	681a      	ldr	r2, [r3, #0]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	4013      	ands	r3, r2
 801625c:	2b00      	cmp	r3, #0
 801625e:	f040 8093 	bne.w	8016388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d01d      	beq.n	80162a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016268:	2208      	movs	r2, #8
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	4413      	add	r3, r2
 801626e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f003 0307 	and.w	r3, r3, #7
 8016276:	2b00      	cmp	r3, #0
 8016278:	d014      	beq.n	80162a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f023 0307 	bic.w	r3, r3, #7
 8016280:	3308      	adds	r3, #8
 8016282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f003 0307 	and.w	r3, r3, #7
 801628a:	2b00      	cmp	r3, #0
 801628c:	d00a      	beq.n	80162a4 <pvPortMalloc+0x6c>
	__asm volatile
 801628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016292:	f383 8811 	msr	BASEPRI, r3
 8016296:	f3bf 8f6f 	isb	sy
 801629a:	f3bf 8f4f 	dsb	sy
 801629e:	617b      	str	r3, [r7, #20]
}
 80162a0:	bf00      	nop
 80162a2:	e7fe      	b.n	80162a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d06e      	beq.n	8016388 <pvPortMalloc+0x150>
 80162aa:	4b45      	ldr	r3, [pc, #276]	; (80163c0 <pvPortMalloc+0x188>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d869      	bhi.n	8016388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80162b4:	4b43      	ldr	r3, [pc, #268]	; (80163c4 <pvPortMalloc+0x18c>)
 80162b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80162b8:	4b42      	ldr	r3, [pc, #264]	; (80163c4 <pvPortMalloc+0x18c>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80162be:	e004      	b.n	80162ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80162c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80162c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80162ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	687a      	ldr	r2, [r7, #4]
 80162d0:	429a      	cmp	r2, r3
 80162d2:	d903      	bls.n	80162dc <pvPortMalloc+0xa4>
 80162d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d1f1      	bne.n	80162c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80162dc:	4b36      	ldr	r3, [pc, #216]	; (80163b8 <pvPortMalloc+0x180>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d050      	beq.n	8016388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80162e6:	6a3b      	ldr	r3, [r7, #32]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2208      	movs	r2, #8
 80162ec:	4413      	add	r3, r2
 80162ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80162f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f2:	681a      	ldr	r2, [r3, #0]
 80162f4:	6a3b      	ldr	r3, [r7, #32]
 80162f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80162f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fa:	685a      	ldr	r2, [r3, #4]
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	1ad2      	subs	r2, r2, r3
 8016300:	2308      	movs	r3, #8
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	429a      	cmp	r2, r3
 8016306:	d91f      	bls.n	8016348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	4413      	add	r3, r2
 801630e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016310:	69bb      	ldr	r3, [r7, #24]
 8016312:	f003 0307 	and.w	r3, r3, #7
 8016316:	2b00      	cmp	r3, #0
 8016318:	d00a      	beq.n	8016330 <pvPortMalloc+0xf8>
	__asm volatile
 801631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801631e:	f383 8811 	msr	BASEPRI, r3
 8016322:	f3bf 8f6f 	isb	sy
 8016326:	f3bf 8f4f 	dsb	sy
 801632a:	613b      	str	r3, [r7, #16]
}
 801632c:	bf00      	nop
 801632e:	e7fe      	b.n	801632e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016332:	685a      	ldr	r2, [r3, #4]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	1ad2      	subs	r2, r2, r3
 8016338:	69bb      	ldr	r3, [r7, #24]
 801633a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633e:	687a      	ldr	r2, [r7, #4]
 8016340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016342:	69b8      	ldr	r0, [r7, #24]
 8016344:	f000 f908 	bl	8016558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016348:	4b1d      	ldr	r3, [pc, #116]	; (80163c0 <pvPortMalloc+0x188>)
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	1ad3      	subs	r3, r2, r3
 8016352:	4a1b      	ldr	r2, [pc, #108]	; (80163c0 <pvPortMalloc+0x188>)
 8016354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016356:	4b1a      	ldr	r3, [pc, #104]	; (80163c0 <pvPortMalloc+0x188>)
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	4b1b      	ldr	r3, [pc, #108]	; (80163c8 <pvPortMalloc+0x190>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	429a      	cmp	r2, r3
 8016360:	d203      	bcs.n	801636a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016362:	4b17      	ldr	r3, [pc, #92]	; (80163c0 <pvPortMalloc+0x188>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a18      	ldr	r2, [pc, #96]	; (80163c8 <pvPortMalloc+0x190>)
 8016368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636c:	685a      	ldr	r2, [r3, #4]
 801636e:	4b13      	ldr	r3, [pc, #76]	; (80163bc <pvPortMalloc+0x184>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	431a      	orrs	r2, r3
 8016374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637a:	2200      	movs	r2, #0
 801637c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801637e:	4b13      	ldr	r3, [pc, #76]	; (80163cc <pvPortMalloc+0x194>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	3301      	adds	r3, #1
 8016384:	4a11      	ldr	r2, [pc, #68]	; (80163cc <pvPortMalloc+0x194>)
 8016386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016388:	f7fe fc2a 	bl	8014be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	f003 0307 	and.w	r3, r3, #7
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00a      	beq.n	80163ac <pvPortMalloc+0x174>
	__asm volatile
 8016396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801639a:	f383 8811 	msr	BASEPRI, r3
 801639e:	f3bf 8f6f 	isb	sy
 80163a2:	f3bf 8f4f 	dsb	sy
 80163a6:	60fb      	str	r3, [r7, #12]
}
 80163a8:	bf00      	nop
 80163aa:	e7fe      	b.n	80163aa <pvPortMalloc+0x172>
	return pvReturn;
 80163ac:	69fb      	ldr	r3, [r7, #28]
}
 80163ae:	4618      	mov	r0, r3
 80163b0:	3728      	adds	r7, #40	; 0x28
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	24005a44 	.word	0x24005a44
 80163bc:	24005a58 	.word	0x24005a58
 80163c0:	24005a48 	.word	0x24005a48
 80163c4:	24005a3c 	.word	0x24005a3c
 80163c8:	24005a4c 	.word	0x24005a4c
 80163cc:	24005a50 	.word	0x24005a50

080163d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b086      	sub	sp, #24
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d04d      	beq.n	801647e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80163e2:	2308      	movs	r3, #8
 80163e4:	425b      	negs	r3, r3
 80163e6:	697a      	ldr	r2, [r7, #20]
 80163e8:	4413      	add	r3, r2
 80163ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	685a      	ldr	r2, [r3, #4]
 80163f4:	4b24      	ldr	r3, [pc, #144]	; (8016488 <vPortFree+0xb8>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4013      	ands	r3, r2
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d10a      	bne.n	8016414 <vPortFree+0x44>
	__asm volatile
 80163fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016402:	f383 8811 	msr	BASEPRI, r3
 8016406:	f3bf 8f6f 	isb	sy
 801640a:	f3bf 8f4f 	dsb	sy
 801640e:	60fb      	str	r3, [r7, #12]
}
 8016410:	bf00      	nop
 8016412:	e7fe      	b.n	8016412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016414:	693b      	ldr	r3, [r7, #16]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d00a      	beq.n	8016432 <vPortFree+0x62>
	__asm volatile
 801641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016420:	f383 8811 	msr	BASEPRI, r3
 8016424:	f3bf 8f6f 	isb	sy
 8016428:	f3bf 8f4f 	dsb	sy
 801642c:	60bb      	str	r3, [r7, #8]
}
 801642e:	bf00      	nop
 8016430:	e7fe      	b.n	8016430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	685a      	ldr	r2, [r3, #4]
 8016436:	4b14      	ldr	r3, [pc, #80]	; (8016488 <vPortFree+0xb8>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4013      	ands	r3, r2
 801643c:	2b00      	cmp	r3, #0
 801643e:	d01e      	beq.n	801647e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016440:	693b      	ldr	r3, [r7, #16]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d11a      	bne.n	801647e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016448:	693b      	ldr	r3, [r7, #16]
 801644a:	685a      	ldr	r2, [r3, #4]
 801644c:	4b0e      	ldr	r3, [pc, #56]	; (8016488 <vPortFree+0xb8>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	43db      	mvns	r3, r3
 8016452:	401a      	ands	r2, r3
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016458:	f7fe fbb4 	bl	8014bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	685a      	ldr	r2, [r3, #4]
 8016460:	4b0a      	ldr	r3, [pc, #40]	; (801648c <vPortFree+0xbc>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	4413      	add	r3, r2
 8016466:	4a09      	ldr	r2, [pc, #36]	; (801648c <vPortFree+0xbc>)
 8016468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801646a:	6938      	ldr	r0, [r7, #16]
 801646c:	f000 f874 	bl	8016558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016470:	4b07      	ldr	r3, [pc, #28]	; (8016490 <vPortFree+0xc0>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	3301      	adds	r3, #1
 8016476:	4a06      	ldr	r2, [pc, #24]	; (8016490 <vPortFree+0xc0>)
 8016478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801647a:	f7fe fbb1 	bl	8014be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801647e:	bf00      	nop
 8016480:	3718      	adds	r7, #24
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	24005a58 	.word	0x24005a58
 801648c:	24005a48 	.word	0x24005a48
 8016490:	24005a54 	.word	0x24005a54

08016494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016494:	b480      	push	{r7}
 8016496:	b085      	sub	sp, #20
 8016498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801649a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801649e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80164a0:	4b27      	ldr	r3, [pc, #156]	; (8016540 <prvHeapInit+0xac>)
 80164a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	f003 0307 	and.w	r3, r3, #7
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d00c      	beq.n	80164c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	3307      	adds	r3, #7
 80164b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	f023 0307 	bic.w	r3, r3, #7
 80164ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80164bc:	68ba      	ldr	r2, [r7, #8]
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	1ad3      	subs	r3, r2, r3
 80164c2:	4a1f      	ldr	r2, [pc, #124]	; (8016540 <prvHeapInit+0xac>)
 80164c4:	4413      	add	r3, r2
 80164c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80164cc:	4a1d      	ldr	r2, [pc, #116]	; (8016544 <prvHeapInit+0xb0>)
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80164d2:	4b1c      	ldr	r3, [pc, #112]	; (8016544 <prvHeapInit+0xb0>)
 80164d4:	2200      	movs	r2, #0
 80164d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	68ba      	ldr	r2, [r7, #8]
 80164dc:	4413      	add	r3, r2
 80164de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80164e0:	2208      	movs	r2, #8
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	1a9b      	subs	r3, r3, r2
 80164e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	f023 0307 	bic.w	r3, r3, #7
 80164ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	4a15      	ldr	r2, [pc, #84]	; (8016548 <prvHeapInit+0xb4>)
 80164f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80164f6:	4b14      	ldr	r3, [pc, #80]	; (8016548 <prvHeapInit+0xb4>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	2200      	movs	r2, #0
 80164fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80164fe:	4b12      	ldr	r3, [pc, #72]	; (8016548 <prvHeapInit+0xb4>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2200      	movs	r2, #0
 8016504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	68fa      	ldr	r2, [r7, #12]
 801650e:	1ad2      	subs	r2, r2, r3
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016514:	4b0c      	ldr	r3, [pc, #48]	; (8016548 <prvHeapInit+0xb4>)
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	685b      	ldr	r3, [r3, #4]
 8016520:	4a0a      	ldr	r2, [pc, #40]	; (801654c <prvHeapInit+0xb8>)
 8016522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016524:	683b      	ldr	r3, [r7, #0]
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	4a09      	ldr	r2, [pc, #36]	; (8016550 <prvHeapInit+0xbc>)
 801652a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801652c:	4b09      	ldr	r3, [pc, #36]	; (8016554 <prvHeapInit+0xc0>)
 801652e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016532:	601a      	str	r2, [r3, #0]
}
 8016534:	bf00      	nop
 8016536:	3714      	adds	r7, #20
 8016538:	46bd      	mov	sp, r7
 801653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653e:	4770      	bx	lr
 8016540:	24001e3c 	.word	0x24001e3c
 8016544:	24005a3c 	.word	0x24005a3c
 8016548:	24005a44 	.word	0x24005a44
 801654c:	24005a4c 	.word	0x24005a4c
 8016550:	24005a48 	.word	0x24005a48
 8016554:	24005a58 	.word	0x24005a58

08016558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016558:	b480      	push	{r7}
 801655a:	b085      	sub	sp, #20
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016560:	4b28      	ldr	r3, [pc, #160]	; (8016604 <prvInsertBlockIntoFreeList+0xac>)
 8016562:	60fb      	str	r3, [r7, #12]
 8016564:	e002      	b.n	801656c <prvInsertBlockIntoFreeList+0x14>
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	60fb      	str	r3, [r7, #12]
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	429a      	cmp	r2, r3
 8016574:	d8f7      	bhi.n	8016566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	68ba      	ldr	r2, [r7, #8]
 8016580:	4413      	add	r3, r2
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	429a      	cmp	r2, r3
 8016586:	d108      	bne.n	801659a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	685a      	ldr	r2, [r3, #4]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	685b      	ldr	r3, [r3, #4]
 8016590:	441a      	add	r2, r3
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	68ba      	ldr	r2, [r7, #8]
 80165a4:	441a      	add	r2, r3
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d118      	bne.n	80165e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	4b15      	ldr	r3, [pc, #84]	; (8016608 <prvInsertBlockIntoFreeList+0xb0>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	429a      	cmp	r2, r3
 80165b8:	d00d      	beq.n	80165d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	685a      	ldr	r2, [r3, #4]
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	441a      	add	r2, r3
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	601a      	str	r2, [r3, #0]
 80165d4:	e008      	b.n	80165e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80165d6:	4b0c      	ldr	r3, [pc, #48]	; (8016608 <prvInsertBlockIntoFreeList+0xb0>)
 80165d8:	681a      	ldr	r2, [r3, #0]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	601a      	str	r2, [r3, #0]
 80165de:	e003      	b.n	80165e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	681a      	ldr	r2, [r3, #0]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80165e8:	68fa      	ldr	r2, [r7, #12]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d002      	beq.n	80165f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	687a      	ldr	r2, [r7, #4]
 80165f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165f6:	bf00      	nop
 80165f8:	3714      	adds	r7, #20
 80165fa:	46bd      	mov	sp, r7
 80165fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016600:	4770      	bx	lr
 8016602:	bf00      	nop
 8016604:	24005a3c 	.word	0x24005a3c
 8016608:	24005a44 	.word	0x24005a44

0801660c <__errno>:
 801660c:	4b01      	ldr	r3, [pc, #4]	; (8016614 <__errno+0x8>)
 801660e:	6818      	ldr	r0, [r3, #0]
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop
 8016614:	240000a4 	.word	0x240000a4

08016618 <__libc_init_array>:
 8016618:	b570      	push	{r4, r5, r6, lr}
 801661a:	4d0d      	ldr	r5, [pc, #52]	; (8016650 <__libc_init_array+0x38>)
 801661c:	4c0d      	ldr	r4, [pc, #52]	; (8016654 <__libc_init_array+0x3c>)
 801661e:	1b64      	subs	r4, r4, r5
 8016620:	10a4      	asrs	r4, r4, #2
 8016622:	2600      	movs	r6, #0
 8016624:	42a6      	cmp	r6, r4
 8016626:	d109      	bne.n	801663c <__libc_init_array+0x24>
 8016628:	4d0b      	ldr	r5, [pc, #44]	; (8016658 <__libc_init_array+0x40>)
 801662a:	4c0c      	ldr	r4, [pc, #48]	; (801665c <__libc_init_array+0x44>)
 801662c:	f000 fd3c 	bl	80170a8 <_init>
 8016630:	1b64      	subs	r4, r4, r5
 8016632:	10a4      	asrs	r4, r4, #2
 8016634:	2600      	movs	r6, #0
 8016636:	42a6      	cmp	r6, r4
 8016638:	d105      	bne.n	8016646 <__libc_init_array+0x2e>
 801663a:	bd70      	pop	{r4, r5, r6, pc}
 801663c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016640:	4798      	blx	r3
 8016642:	3601      	adds	r6, #1
 8016644:	e7ee      	b.n	8016624 <__libc_init_array+0xc>
 8016646:	f855 3b04 	ldr.w	r3, [r5], #4
 801664a:	4798      	blx	r3
 801664c:	3601      	adds	r6, #1
 801664e:	e7f2      	b.n	8016636 <__libc_init_array+0x1e>
 8016650:	08017510 	.word	0x08017510
 8016654:	08017510 	.word	0x08017510
 8016658:	08017510 	.word	0x08017510
 801665c:	08017514 	.word	0x08017514

08016660 <malloc>:
 8016660:	4b02      	ldr	r3, [pc, #8]	; (801666c <malloc+0xc>)
 8016662:	4601      	mov	r1, r0
 8016664:	6818      	ldr	r0, [r3, #0]
 8016666:	f000 b88d 	b.w	8016784 <_malloc_r>
 801666a:	bf00      	nop
 801666c:	240000a4 	.word	0x240000a4

08016670 <free>:
 8016670:	4b02      	ldr	r3, [pc, #8]	; (801667c <free+0xc>)
 8016672:	4601      	mov	r1, r0
 8016674:	6818      	ldr	r0, [r3, #0]
 8016676:	f000 b819 	b.w	80166ac <_free_r>
 801667a:	bf00      	nop
 801667c:	240000a4 	.word	0x240000a4

08016680 <memcpy>:
 8016680:	440a      	add	r2, r1
 8016682:	4291      	cmp	r1, r2
 8016684:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016688:	d100      	bne.n	801668c <memcpy+0xc>
 801668a:	4770      	bx	lr
 801668c:	b510      	push	{r4, lr}
 801668e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016696:	4291      	cmp	r1, r2
 8016698:	d1f9      	bne.n	801668e <memcpy+0xe>
 801669a:	bd10      	pop	{r4, pc}

0801669c <memset>:
 801669c:	4402      	add	r2, r0
 801669e:	4603      	mov	r3, r0
 80166a0:	4293      	cmp	r3, r2
 80166a2:	d100      	bne.n	80166a6 <memset+0xa>
 80166a4:	4770      	bx	lr
 80166a6:	f803 1b01 	strb.w	r1, [r3], #1
 80166aa:	e7f9      	b.n	80166a0 <memset+0x4>

080166ac <_free_r>:
 80166ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166ae:	2900      	cmp	r1, #0
 80166b0:	d044      	beq.n	801673c <_free_r+0x90>
 80166b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166b6:	9001      	str	r0, [sp, #4]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	f1a1 0404 	sub.w	r4, r1, #4
 80166be:	bfb8      	it	lt
 80166c0:	18e4      	addlt	r4, r4, r3
 80166c2:	f000 fc39 	bl	8016f38 <__malloc_lock>
 80166c6:	4a1e      	ldr	r2, [pc, #120]	; (8016740 <_free_r+0x94>)
 80166c8:	9801      	ldr	r0, [sp, #4]
 80166ca:	6813      	ldr	r3, [r2, #0]
 80166cc:	b933      	cbnz	r3, 80166dc <_free_r+0x30>
 80166ce:	6063      	str	r3, [r4, #4]
 80166d0:	6014      	str	r4, [r2, #0]
 80166d2:	b003      	add	sp, #12
 80166d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166d8:	f000 bc34 	b.w	8016f44 <__malloc_unlock>
 80166dc:	42a3      	cmp	r3, r4
 80166de:	d908      	bls.n	80166f2 <_free_r+0x46>
 80166e0:	6825      	ldr	r5, [r4, #0]
 80166e2:	1961      	adds	r1, r4, r5
 80166e4:	428b      	cmp	r3, r1
 80166e6:	bf01      	itttt	eq
 80166e8:	6819      	ldreq	r1, [r3, #0]
 80166ea:	685b      	ldreq	r3, [r3, #4]
 80166ec:	1949      	addeq	r1, r1, r5
 80166ee:	6021      	streq	r1, [r4, #0]
 80166f0:	e7ed      	b.n	80166ce <_free_r+0x22>
 80166f2:	461a      	mov	r2, r3
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	b10b      	cbz	r3, 80166fc <_free_r+0x50>
 80166f8:	42a3      	cmp	r3, r4
 80166fa:	d9fa      	bls.n	80166f2 <_free_r+0x46>
 80166fc:	6811      	ldr	r1, [r2, #0]
 80166fe:	1855      	adds	r5, r2, r1
 8016700:	42a5      	cmp	r5, r4
 8016702:	d10b      	bne.n	801671c <_free_r+0x70>
 8016704:	6824      	ldr	r4, [r4, #0]
 8016706:	4421      	add	r1, r4
 8016708:	1854      	adds	r4, r2, r1
 801670a:	42a3      	cmp	r3, r4
 801670c:	6011      	str	r1, [r2, #0]
 801670e:	d1e0      	bne.n	80166d2 <_free_r+0x26>
 8016710:	681c      	ldr	r4, [r3, #0]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	6053      	str	r3, [r2, #4]
 8016716:	4421      	add	r1, r4
 8016718:	6011      	str	r1, [r2, #0]
 801671a:	e7da      	b.n	80166d2 <_free_r+0x26>
 801671c:	d902      	bls.n	8016724 <_free_r+0x78>
 801671e:	230c      	movs	r3, #12
 8016720:	6003      	str	r3, [r0, #0]
 8016722:	e7d6      	b.n	80166d2 <_free_r+0x26>
 8016724:	6825      	ldr	r5, [r4, #0]
 8016726:	1961      	adds	r1, r4, r5
 8016728:	428b      	cmp	r3, r1
 801672a:	bf04      	itt	eq
 801672c:	6819      	ldreq	r1, [r3, #0]
 801672e:	685b      	ldreq	r3, [r3, #4]
 8016730:	6063      	str	r3, [r4, #4]
 8016732:	bf04      	itt	eq
 8016734:	1949      	addeq	r1, r1, r5
 8016736:	6021      	streq	r1, [r4, #0]
 8016738:	6054      	str	r4, [r2, #4]
 801673a:	e7ca      	b.n	80166d2 <_free_r+0x26>
 801673c:	b003      	add	sp, #12
 801673e:	bd30      	pop	{r4, r5, pc}
 8016740:	24005a5c 	.word	0x24005a5c

08016744 <sbrk_aligned>:
 8016744:	b570      	push	{r4, r5, r6, lr}
 8016746:	4e0e      	ldr	r6, [pc, #56]	; (8016780 <sbrk_aligned+0x3c>)
 8016748:	460c      	mov	r4, r1
 801674a:	6831      	ldr	r1, [r6, #0]
 801674c:	4605      	mov	r5, r0
 801674e:	b911      	cbnz	r1, 8016756 <sbrk_aligned+0x12>
 8016750:	f000 f902 	bl	8016958 <_sbrk_r>
 8016754:	6030      	str	r0, [r6, #0]
 8016756:	4621      	mov	r1, r4
 8016758:	4628      	mov	r0, r5
 801675a:	f000 f8fd 	bl	8016958 <_sbrk_r>
 801675e:	1c43      	adds	r3, r0, #1
 8016760:	d00a      	beq.n	8016778 <sbrk_aligned+0x34>
 8016762:	1cc4      	adds	r4, r0, #3
 8016764:	f024 0403 	bic.w	r4, r4, #3
 8016768:	42a0      	cmp	r0, r4
 801676a:	d007      	beq.n	801677c <sbrk_aligned+0x38>
 801676c:	1a21      	subs	r1, r4, r0
 801676e:	4628      	mov	r0, r5
 8016770:	f000 f8f2 	bl	8016958 <_sbrk_r>
 8016774:	3001      	adds	r0, #1
 8016776:	d101      	bne.n	801677c <sbrk_aligned+0x38>
 8016778:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801677c:	4620      	mov	r0, r4
 801677e:	bd70      	pop	{r4, r5, r6, pc}
 8016780:	24005a60 	.word	0x24005a60

08016784 <_malloc_r>:
 8016784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016788:	1ccd      	adds	r5, r1, #3
 801678a:	f025 0503 	bic.w	r5, r5, #3
 801678e:	3508      	adds	r5, #8
 8016790:	2d0c      	cmp	r5, #12
 8016792:	bf38      	it	cc
 8016794:	250c      	movcc	r5, #12
 8016796:	2d00      	cmp	r5, #0
 8016798:	4607      	mov	r7, r0
 801679a:	db01      	blt.n	80167a0 <_malloc_r+0x1c>
 801679c:	42a9      	cmp	r1, r5
 801679e:	d905      	bls.n	80167ac <_malloc_r+0x28>
 80167a0:	230c      	movs	r3, #12
 80167a2:	603b      	str	r3, [r7, #0]
 80167a4:	2600      	movs	r6, #0
 80167a6:	4630      	mov	r0, r6
 80167a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167ac:	4e2e      	ldr	r6, [pc, #184]	; (8016868 <_malloc_r+0xe4>)
 80167ae:	f000 fbc3 	bl	8016f38 <__malloc_lock>
 80167b2:	6833      	ldr	r3, [r6, #0]
 80167b4:	461c      	mov	r4, r3
 80167b6:	bb34      	cbnz	r4, 8016806 <_malloc_r+0x82>
 80167b8:	4629      	mov	r1, r5
 80167ba:	4638      	mov	r0, r7
 80167bc:	f7ff ffc2 	bl	8016744 <sbrk_aligned>
 80167c0:	1c43      	adds	r3, r0, #1
 80167c2:	4604      	mov	r4, r0
 80167c4:	d14d      	bne.n	8016862 <_malloc_r+0xde>
 80167c6:	6834      	ldr	r4, [r6, #0]
 80167c8:	4626      	mov	r6, r4
 80167ca:	2e00      	cmp	r6, #0
 80167cc:	d140      	bne.n	8016850 <_malloc_r+0xcc>
 80167ce:	6823      	ldr	r3, [r4, #0]
 80167d0:	4631      	mov	r1, r6
 80167d2:	4638      	mov	r0, r7
 80167d4:	eb04 0803 	add.w	r8, r4, r3
 80167d8:	f000 f8be 	bl	8016958 <_sbrk_r>
 80167dc:	4580      	cmp	r8, r0
 80167de:	d13a      	bne.n	8016856 <_malloc_r+0xd2>
 80167e0:	6821      	ldr	r1, [r4, #0]
 80167e2:	3503      	adds	r5, #3
 80167e4:	1a6d      	subs	r5, r5, r1
 80167e6:	f025 0503 	bic.w	r5, r5, #3
 80167ea:	3508      	adds	r5, #8
 80167ec:	2d0c      	cmp	r5, #12
 80167ee:	bf38      	it	cc
 80167f0:	250c      	movcc	r5, #12
 80167f2:	4629      	mov	r1, r5
 80167f4:	4638      	mov	r0, r7
 80167f6:	f7ff ffa5 	bl	8016744 <sbrk_aligned>
 80167fa:	3001      	adds	r0, #1
 80167fc:	d02b      	beq.n	8016856 <_malloc_r+0xd2>
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	442b      	add	r3, r5
 8016802:	6023      	str	r3, [r4, #0]
 8016804:	e00e      	b.n	8016824 <_malloc_r+0xa0>
 8016806:	6822      	ldr	r2, [r4, #0]
 8016808:	1b52      	subs	r2, r2, r5
 801680a:	d41e      	bmi.n	801684a <_malloc_r+0xc6>
 801680c:	2a0b      	cmp	r2, #11
 801680e:	d916      	bls.n	801683e <_malloc_r+0xba>
 8016810:	1961      	adds	r1, r4, r5
 8016812:	42a3      	cmp	r3, r4
 8016814:	6025      	str	r5, [r4, #0]
 8016816:	bf18      	it	ne
 8016818:	6059      	strne	r1, [r3, #4]
 801681a:	6863      	ldr	r3, [r4, #4]
 801681c:	bf08      	it	eq
 801681e:	6031      	streq	r1, [r6, #0]
 8016820:	5162      	str	r2, [r4, r5]
 8016822:	604b      	str	r3, [r1, #4]
 8016824:	4638      	mov	r0, r7
 8016826:	f104 060b 	add.w	r6, r4, #11
 801682a:	f000 fb8b 	bl	8016f44 <__malloc_unlock>
 801682e:	f026 0607 	bic.w	r6, r6, #7
 8016832:	1d23      	adds	r3, r4, #4
 8016834:	1af2      	subs	r2, r6, r3
 8016836:	d0b6      	beq.n	80167a6 <_malloc_r+0x22>
 8016838:	1b9b      	subs	r3, r3, r6
 801683a:	50a3      	str	r3, [r4, r2]
 801683c:	e7b3      	b.n	80167a6 <_malloc_r+0x22>
 801683e:	6862      	ldr	r2, [r4, #4]
 8016840:	42a3      	cmp	r3, r4
 8016842:	bf0c      	ite	eq
 8016844:	6032      	streq	r2, [r6, #0]
 8016846:	605a      	strne	r2, [r3, #4]
 8016848:	e7ec      	b.n	8016824 <_malloc_r+0xa0>
 801684a:	4623      	mov	r3, r4
 801684c:	6864      	ldr	r4, [r4, #4]
 801684e:	e7b2      	b.n	80167b6 <_malloc_r+0x32>
 8016850:	4634      	mov	r4, r6
 8016852:	6876      	ldr	r6, [r6, #4]
 8016854:	e7b9      	b.n	80167ca <_malloc_r+0x46>
 8016856:	230c      	movs	r3, #12
 8016858:	603b      	str	r3, [r7, #0]
 801685a:	4638      	mov	r0, r7
 801685c:	f000 fb72 	bl	8016f44 <__malloc_unlock>
 8016860:	e7a1      	b.n	80167a6 <_malloc_r+0x22>
 8016862:	6025      	str	r5, [r4, #0]
 8016864:	e7de      	b.n	8016824 <_malloc_r+0xa0>
 8016866:	bf00      	nop
 8016868:	24005a5c 	.word	0x24005a5c

0801686c <_puts_r>:
 801686c:	b570      	push	{r4, r5, r6, lr}
 801686e:	460e      	mov	r6, r1
 8016870:	4605      	mov	r5, r0
 8016872:	b118      	cbz	r0, 801687c <_puts_r+0x10>
 8016874:	6983      	ldr	r3, [r0, #24]
 8016876:	b90b      	cbnz	r3, 801687c <_puts_r+0x10>
 8016878:	f000 fa58 	bl	8016d2c <__sinit>
 801687c:	69ab      	ldr	r3, [r5, #24]
 801687e:	68ac      	ldr	r4, [r5, #8]
 8016880:	b913      	cbnz	r3, 8016888 <_puts_r+0x1c>
 8016882:	4628      	mov	r0, r5
 8016884:	f000 fa52 	bl	8016d2c <__sinit>
 8016888:	4b2c      	ldr	r3, [pc, #176]	; (801693c <_puts_r+0xd0>)
 801688a:	429c      	cmp	r4, r3
 801688c:	d120      	bne.n	80168d0 <_puts_r+0x64>
 801688e:	686c      	ldr	r4, [r5, #4]
 8016890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016892:	07db      	lsls	r3, r3, #31
 8016894:	d405      	bmi.n	80168a2 <_puts_r+0x36>
 8016896:	89a3      	ldrh	r3, [r4, #12]
 8016898:	0598      	lsls	r0, r3, #22
 801689a:	d402      	bmi.n	80168a2 <_puts_r+0x36>
 801689c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801689e:	f000 fae3 	bl	8016e68 <__retarget_lock_acquire_recursive>
 80168a2:	89a3      	ldrh	r3, [r4, #12]
 80168a4:	0719      	lsls	r1, r3, #28
 80168a6:	d51d      	bpl.n	80168e4 <_puts_r+0x78>
 80168a8:	6923      	ldr	r3, [r4, #16]
 80168aa:	b1db      	cbz	r3, 80168e4 <_puts_r+0x78>
 80168ac:	3e01      	subs	r6, #1
 80168ae:	68a3      	ldr	r3, [r4, #8]
 80168b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168b4:	3b01      	subs	r3, #1
 80168b6:	60a3      	str	r3, [r4, #8]
 80168b8:	bb39      	cbnz	r1, 801690a <_puts_r+0x9e>
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	da38      	bge.n	8016930 <_puts_r+0xc4>
 80168be:	4622      	mov	r2, r4
 80168c0:	210a      	movs	r1, #10
 80168c2:	4628      	mov	r0, r5
 80168c4:	f000 f858 	bl	8016978 <__swbuf_r>
 80168c8:	3001      	adds	r0, #1
 80168ca:	d011      	beq.n	80168f0 <_puts_r+0x84>
 80168cc:	250a      	movs	r5, #10
 80168ce:	e011      	b.n	80168f4 <_puts_r+0x88>
 80168d0:	4b1b      	ldr	r3, [pc, #108]	; (8016940 <_puts_r+0xd4>)
 80168d2:	429c      	cmp	r4, r3
 80168d4:	d101      	bne.n	80168da <_puts_r+0x6e>
 80168d6:	68ac      	ldr	r4, [r5, #8]
 80168d8:	e7da      	b.n	8016890 <_puts_r+0x24>
 80168da:	4b1a      	ldr	r3, [pc, #104]	; (8016944 <_puts_r+0xd8>)
 80168dc:	429c      	cmp	r4, r3
 80168de:	bf08      	it	eq
 80168e0:	68ec      	ldreq	r4, [r5, #12]
 80168e2:	e7d5      	b.n	8016890 <_puts_r+0x24>
 80168e4:	4621      	mov	r1, r4
 80168e6:	4628      	mov	r0, r5
 80168e8:	f000 f898 	bl	8016a1c <__swsetup_r>
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d0dd      	beq.n	80168ac <_puts_r+0x40>
 80168f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80168f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168f6:	07da      	lsls	r2, r3, #31
 80168f8:	d405      	bmi.n	8016906 <_puts_r+0x9a>
 80168fa:	89a3      	ldrh	r3, [r4, #12]
 80168fc:	059b      	lsls	r3, r3, #22
 80168fe:	d402      	bmi.n	8016906 <_puts_r+0x9a>
 8016900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016902:	f000 fab2 	bl	8016e6a <__retarget_lock_release_recursive>
 8016906:	4628      	mov	r0, r5
 8016908:	bd70      	pop	{r4, r5, r6, pc}
 801690a:	2b00      	cmp	r3, #0
 801690c:	da04      	bge.n	8016918 <_puts_r+0xac>
 801690e:	69a2      	ldr	r2, [r4, #24]
 8016910:	429a      	cmp	r2, r3
 8016912:	dc06      	bgt.n	8016922 <_puts_r+0xb6>
 8016914:	290a      	cmp	r1, #10
 8016916:	d004      	beq.n	8016922 <_puts_r+0xb6>
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	1c5a      	adds	r2, r3, #1
 801691c:	6022      	str	r2, [r4, #0]
 801691e:	7019      	strb	r1, [r3, #0]
 8016920:	e7c5      	b.n	80168ae <_puts_r+0x42>
 8016922:	4622      	mov	r2, r4
 8016924:	4628      	mov	r0, r5
 8016926:	f000 f827 	bl	8016978 <__swbuf_r>
 801692a:	3001      	adds	r0, #1
 801692c:	d1bf      	bne.n	80168ae <_puts_r+0x42>
 801692e:	e7df      	b.n	80168f0 <_puts_r+0x84>
 8016930:	6823      	ldr	r3, [r4, #0]
 8016932:	250a      	movs	r5, #10
 8016934:	1c5a      	adds	r2, r3, #1
 8016936:	6022      	str	r2, [r4, #0]
 8016938:	701d      	strb	r5, [r3, #0]
 801693a:	e7db      	b.n	80168f4 <_puts_r+0x88>
 801693c:	080174c8 	.word	0x080174c8
 8016940:	080174e8 	.word	0x080174e8
 8016944:	080174a8 	.word	0x080174a8

08016948 <puts>:
 8016948:	4b02      	ldr	r3, [pc, #8]	; (8016954 <puts+0xc>)
 801694a:	4601      	mov	r1, r0
 801694c:	6818      	ldr	r0, [r3, #0]
 801694e:	f7ff bf8d 	b.w	801686c <_puts_r>
 8016952:	bf00      	nop
 8016954:	240000a4 	.word	0x240000a4

08016958 <_sbrk_r>:
 8016958:	b538      	push	{r3, r4, r5, lr}
 801695a:	4d06      	ldr	r5, [pc, #24]	; (8016974 <_sbrk_r+0x1c>)
 801695c:	2300      	movs	r3, #0
 801695e:	4604      	mov	r4, r0
 8016960:	4608      	mov	r0, r1
 8016962:	602b      	str	r3, [r5, #0]
 8016964:	f7ed f894 	bl	8003a90 <_sbrk>
 8016968:	1c43      	adds	r3, r0, #1
 801696a:	d102      	bne.n	8016972 <_sbrk_r+0x1a>
 801696c:	682b      	ldr	r3, [r5, #0]
 801696e:	b103      	cbz	r3, 8016972 <_sbrk_r+0x1a>
 8016970:	6023      	str	r3, [r4, #0]
 8016972:	bd38      	pop	{r3, r4, r5, pc}
 8016974:	24005a68 	.word	0x24005a68

08016978 <__swbuf_r>:
 8016978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801697a:	460e      	mov	r6, r1
 801697c:	4614      	mov	r4, r2
 801697e:	4605      	mov	r5, r0
 8016980:	b118      	cbz	r0, 801698a <__swbuf_r+0x12>
 8016982:	6983      	ldr	r3, [r0, #24]
 8016984:	b90b      	cbnz	r3, 801698a <__swbuf_r+0x12>
 8016986:	f000 f9d1 	bl	8016d2c <__sinit>
 801698a:	4b21      	ldr	r3, [pc, #132]	; (8016a10 <__swbuf_r+0x98>)
 801698c:	429c      	cmp	r4, r3
 801698e:	d12b      	bne.n	80169e8 <__swbuf_r+0x70>
 8016990:	686c      	ldr	r4, [r5, #4]
 8016992:	69a3      	ldr	r3, [r4, #24]
 8016994:	60a3      	str	r3, [r4, #8]
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	071a      	lsls	r2, r3, #28
 801699a:	d52f      	bpl.n	80169fc <__swbuf_r+0x84>
 801699c:	6923      	ldr	r3, [r4, #16]
 801699e:	b36b      	cbz	r3, 80169fc <__swbuf_r+0x84>
 80169a0:	6923      	ldr	r3, [r4, #16]
 80169a2:	6820      	ldr	r0, [r4, #0]
 80169a4:	1ac0      	subs	r0, r0, r3
 80169a6:	6963      	ldr	r3, [r4, #20]
 80169a8:	b2f6      	uxtb	r6, r6
 80169aa:	4283      	cmp	r3, r0
 80169ac:	4637      	mov	r7, r6
 80169ae:	dc04      	bgt.n	80169ba <__swbuf_r+0x42>
 80169b0:	4621      	mov	r1, r4
 80169b2:	4628      	mov	r0, r5
 80169b4:	f000 f926 	bl	8016c04 <_fflush_r>
 80169b8:	bb30      	cbnz	r0, 8016a08 <__swbuf_r+0x90>
 80169ba:	68a3      	ldr	r3, [r4, #8]
 80169bc:	3b01      	subs	r3, #1
 80169be:	60a3      	str	r3, [r4, #8]
 80169c0:	6823      	ldr	r3, [r4, #0]
 80169c2:	1c5a      	adds	r2, r3, #1
 80169c4:	6022      	str	r2, [r4, #0]
 80169c6:	701e      	strb	r6, [r3, #0]
 80169c8:	6963      	ldr	r3, [r4, #20]
 80169ca:	3001      	adds	r0, #1
 80169cc:	4283      	cmp	r3, r0
 80169ce:	d004      	beq.n	80169da <__swbuf_r+0x62>
 80169d0:	89a3      	ldrh	r3, [r4, #12]
 80169d2:	07db      	lsls	r3, r3, #31
 80169d4:	d506      	bpl.n	80169e4 <__swbuf_r+0x6c>
 80169d6:	2e0a      	cmp	r6, #10
 80169d8:	d104      	bne.n	80169e4 <__swbuf_r+0x6c>
 80169da:	4621      	mov	r1, r4
 80169dc:	4628      	mov	r0, r5
 80169de:	f000 f911 	bl	8016c04 <_fflush_r>
 80169e2:	b988      	cbnz	r0, 8016a08 <__swbuf_r+0x90>
 80169e4:	4638      	mov	r0, r7
 80169e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169e8:	4b0a      	ldr	r3, [pc, #40]	; (8016a14 <__swbuf_r+0x9c>)
 80169ea:	429c      	cmp	r4, r3
 80169ec:	d101      	bne.n	80169f2 <__swbuf_r+0x7a>
 80169ee:	68ac      	ldr	r4, [r5, #8]
 80169f0:	e7cf      	b.n	8016992 <__swbuf_r+0x1a>
 80169f2:	4b09      	ldr	r3, [pc, #36]	; (8016a18 <__swbuf_r+0xa0>)
 80169f4:	429c      	cmp	r4, r3
 80169f6:	bf08      	it	eq
 80169f8:	68ec      	ldreq	r4, [r5, #12]
 80169fa:	e7ca      	b.n	8016992 <__swbuf_r+0x1a>
 80169fc:	4621      	mov	r1, r4
 80169fe:	4628      	mov	r0, r5
 8016a00:	f000 f80c 	bl	8016a1c <__swsetup_r>
 8016a04:	2800      	cmp	r0, #0
 8016a06:	d0cb      	beq.n	80169a0 <__swbuf_r+0x28>
 8016a08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016a0c:	e7ea      	b.n	80169e4 <__swbuf_r+0x6c>
 8016a0e:	bf00      	nop
 8016a10:	080174c8 	.word	0x080174c8
 8016a14:	080174e8 	.word	0x080174e8
 8016a18:	080174a8 	.word	0x080174a8

08016a1c <__swsetup_r>:
 8016a1c:	4b32      	ldr	r3, [pc, #200]	; (8016ae8 <__swsetup_r+0xcc>)
 8016a1e:	b570      	push	{r4, r5, r6, lr}
 8016a20:	681d      	ldr	r5, [r3, #0]
 8016a22:	4606      	mov	r6, r0
 8016a24:	460c      	mov	r4, r1
 8016a26:	b125      	cbz	r5, 8016a32 <__swsetup_r+0x16>
 8016a28:	69ab      	ldr	r3, [r5, #24]
 8016a2a:	b913      	cbnz	r3, 8016a32 <__swsetup_r+0x16>
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	f000 f97d 	bl	8016d2c <__sinit>
 8016a32:	4b2e      	ldr	r3, [pc, #184]	; (8016aec <__swsetup_r+0xd0>)
 8016a34:	429c      	cmp	r4, r3
 8016a36:	d10f      	bne.n	8016a58 <__swsetup_r+0x3c>
 8016a38:	686c      	ldr	r4, [r5, #4]
 8016a3a:	89a3      	ldrh	r3, [r4, #12]
 8016a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a40:	0719      	lsls	r1, r3, #28
 8016a42:	d42c      	bmi.n	8016a9e <__swsetup_r+0x82>
 8016a44:	06dd      	lsls	r5, r3, #27
 8016a46:	d411      	bmi.n	8016a6c <__swsetup_r+0x50>
 8016a48:	2309      	movs	r3, #9
 8016a4a:	6033      	str	r3, [r6, #0]
 8016a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a50:	81a3      	strh	r3, [r4, #12]
 8016a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a56:	e03e      	b.n	8016ad6 <__swsetup_r+0xba>
 8016a58:	4b25      	ldr	r3, [pc, #148]	; (8016af0 <__swsetup_r+0xd4>)
 8016a5a:	429c      	cmp	r4, r3
 8016a5c:	d101      	bne.n	8016a62 <__swsetup_r+0x46>
 8016a5e:	68ac      	ldr	r4, [r5, #8]
 8016a60:	e7eb      	b.n	8016a3a <__swsetup_r+0x1e>
 8016a62:	4b24      	ldr	r3, [pc, #144]	; (8016af4 <__swsetup_r+0xd8>)
 8016a64:	429c      	cmp	r4, r3
 8016a66:	bf08      	it	eq
 8016a68:	68ec      	ldreq	r4, [r5, #12]
 8016a6a:	e7e6      	b.n	8016a3a <__swsetup_r+0x1e>
 8016a6c:	0758      	lsls	r0, r3, #29
 8016a6e:	d512      	bpl.n	8016a96 <__swsetup_r+0x7a>
 8016a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a72:	b141      	cbz	r1, 8016a86 <__swsetup_r+0x6a>
 8016a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a78:	4299      	cmp	r1, r3
 8016a7a:	d002      	beq.n	8016a82 <__swsetup_r+0x66>
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f7ff fe15 	bl	80166ac <_free_r>
 8016a82:	2300      	movs	r3, #0
 8016a84:	6363      	str	r3, [r4, #52]	; 0x34
 8016a86:	89a3      	ldrh	r3, [r4, #12]
 8016a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016a8c:	81a3      	strh	r3, [r4, #12]
 8016a8e:	2300      	movs	r3, #0
 8016a90:	6063      	str	r3, [r4, #4]
 8016a92:	6923      	ldr	r3, [r4, #16]
 8016a94:	6023      	str	r3, [r4, #0]
 8016a96:	89a3      	ldrh	r3, [r4, #12]
 8016a98:	f043 0308 	orr.w	r3, r3, #8
 8016a9c:	81a3      	strh	r3, [r4, #12]
 8016a9e:	6923      	ldr	r3, [r4, #16]
 8016aa0:	b94b      	cbnz	r3, 8016ab6 <__swsetup_r+0x9a>
 8016aa2:	89a3      	ldrh	r3, [r4, #12]
 8016aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016aac:	d003      	beq.n	8016ab6 <__swsetup_r+0x9a>
 8016aae:	4621      	mov	r1, r4
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f000 fa01 	bl	8016eb8 <__smakebuf_r>
 8016ab6:	89a0      	ldrh	r0, [r4, #12]
 8016ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016abc:	f010 0301 	ands.w	r3, r0, #1
 8016ac0:	d00a      	beq.n	8016ad8 <__swsetup_r+0xbc>
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	60a3      	str	r3, [r4, #8]
 8016ac6:	6963      	ldr	r3, [r4, #20]
 8016ac8:	425b      	negs	r3, r3
 8016aca:	61a3      	str	r3, [r4, #24]
 8016acc:	6923      	ldr	r3, [r4, #16]
 8016ace:	b943      	cbnz	r3, 8016ae2 <__swsetup_r+0xc6>
 8016ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ad4:	d1ba      	bne.n	8016a4c <__swsetup_r+0x30>
 8016ad6:	bd70      	pop	{r4, r5, r6, pc}
 8016ad8:	0781      	lsls	r1, r0, #30
 8016ada:	bf58      	it	pl
 8016adc:	6963      	ldrpl	r3, [r4, #20]
 8016ade:	60a3      	str	r3, [r4, #8]
 8016ae0:	e7f4      	b.n	8016acc <__swsetup_r+0xb0>
 8016ae2:	2000      	movs	r0, #0
 8016ae4:	e7f7      	b.n	8016ad6 <__swsetup_r+0xba>
 8016ae6:	bf00      	nop
 8016ae8:	240000a4 	.word	0x240000a4
 8016aec:	080174c8 	.word	0x080174c8
 8016af0:	080174e8 	.word	0x080174e8
 8016af4:	080174a8 	.word	0x080174a8

08016af8 <__sflush_r>:
 8016af8:	898a      	ldrh	r2, [r1, #12]
 8016afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016afe:	4605      	mov	r5, r0
 8016b00:	0710      	lsls	r0, r2, #28
 8016b02:	460c      	mov	r4, r1
 8016b04:	d458      	bmi.n	8016bb8 <__sflush_r+0xc0>
 8016b06:	684b      	ldr	r3, [r1, #4]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	dc05      	bgt.n	8016b18 <__sflush_r+0x20>
 8016b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	dc02      	bgt.n	8016b18 <__sflush_r+0x20>
 8016b12:	2000      	movs	r0, #0
 8016b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b1a:	2e00      	cmp	r6, #0
 8016b1c:	d0f9      	beq.n	8016b12 <__sflush_r+0x1a>
 8016b1e:	2300      	movs	r3, #0
 8016b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016b24:	682f      	ldr	r7, [r5, #0]
 8016b26:	602b      	str	r3, [r5, #0]
 8016b28:	d032      	beq.n	8016b90 <__sflush_r+0x98>
 8016b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016b2c:	89a3      	ldrh	r3, [r4, #12]
 8016b2e:	075a      	lsls	r2, r3, #29
 8016b30:	d505      	bpl.n	8016b3e <__sflush_r+0x46>
 8016b32:	6863      	ldr	r3, [r4, #4]
 8016b34:	1ac0      	subs	r0, r0, r3
 8016b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b38:	b10b      	cbz	r3, 8016b3e <__sflush_r+0x46>
 8016b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b3c:	1ac0      	subs	r0, r0, r3
 8016b3e:	2300      	movs	r3, #0
 8016b40:	4602      	mov	r2, r0
 8016b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b44:	6a21      	ldr	r1, [r4, #32]
 8016b46:	4628      	mov	r0, r5
 8016b48:	47b0      	blx	r6
 8016b4a:	1c43      	adds	r3, r0, #1
 8016b4c:	89a3      	ldrh	r3, [r4, #12]
 8016b4e:	d106      	bne.n	8016b5e <__sflush_r+0x66>
 8016b50:	6829      	ldr	r1, [r5, #0]
 8016b52:	291d      	cmp	r1, #29
 8016b54:	d82c      	bhi.n	8016bb0 <__sflush_r+0xb8>
 8016b56:	4a2a      	ldr	r2, [pc, #168]	; (8016c00 <__sflush_r+0x108>)
 8016b58:	40ca      	lsrs	r2, r1
 8016b5a:	07d6      	lsls	r6, r2, #31
 8016b5c:	d528      	bpl.n	8016bb0 <__sflush_r+0xb8>
 8016b5e:	2200      	movs	r2, #0
 8016b60:	6062      	str	r2, [r4, #4]
 8016b62:	04d9      	lsls	r1, r3, #19
 8016b64:	6922      	ldr	r2, [r4, #16]
 8016b66:	6022      	str	r2, [r4, #0]
 8016b68:	d504      	bpl.n	8016b74 <__sflush_r+0x7c>
 8016b6a:	1c42      	adds	r2, r0, #1
 8016b6c:	d101      	bne.n	8016b72 <__sflush_r+0x7a>
 8016b6e:	682b      	ldr	r3, [r5, #0]
 8016b70:	b903      	cbnz	r3, 8016b74 <__sflush_r+0x7c>
 8016b72:	6560      	str	r0, [r4, #84]	; 0x54
 8016b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b76:	602f      	str	r7, [r5, #0]
 8016b78:	2900      	cmp	r1, #0
 8016b7a:	d0ca      	beq.n	8016b12 <__sflush_r+0x1a>
 8016b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b80:	4299      	cmp	r1, r3
 8016b82:	d002      	beq.n	8016b8a <__sflush_r+0x92>
 8016b84:	4628      	mov	r0, r5
 8016b86:	f7ff fd91 	bl	80166ac <_free_r>
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8016b8e:	e7c1      	b.n	8016b14 <__sflush_r+0x1c>
 8016b90:	6a21      	ldr	r1, [r4, #32]
 8016b92:	2301      	movs	r3, #1
 8016b94:	4628      	mov	r0, r5
 8016b96:	47b0      	blx	r6
 8016b98:	1c41      	adds	r1, r0, #1
 8016b9a:	d1c7      	bne.n	8016b2c <__sflush_r+0x34>
 8016b9c:	682b      	ldr	r3, [r5, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d0c4      	beq.n	8016b2c <__sflush_r+0x34>
 8016ba2:	2b1d      	cmp	r3, #29
 8016ba4:	d001      	beq.n	8016baa <__sflush_r+0xb2>
 8016ba6:	2b16      	cmp	r3, #22
 8016ba8:	d101      	bne.n	8016bae <__sflush_r+0xb6>
 8016baa:	602f      	str	r7, [r5, #0]
 8016bac:	e7b1      	b.n	8016b12 <__sflush_r+0x1a>
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bb4:	81a3      	strh	r3, [r4, #12]
 8016bb6:	e7ad      	b.n	8016b14 <__sflush_r+0x1c>
 8016bb8:	690f      	ldr	r7, [r1, #16]
 8016bba:	2f00      	cmp	r7, #0
 8016bbc:	d0a9      	beq.n	8016b12 <__sflush_r+0x1a>
 8016bbe:	0793      	lsls	r3, r2, #30
 8016bc0:	680e      	ldr	r6, [r1, #0]
 8016bc2:	bf08      	it	eq
 8016bc4:	694b      	ldreq	r3, [r1, #20]
 8016bc6:	600f      	str	r7, [r1, #0]
 8016bc8:	bf18      	it	ne
 8016bca:	2300      	movne	r3, #0
 8016bcc:	eba6 0807 	sub.w	r8, r6, r7
 8016bd0:	608b      	str	r3, [r1, #8]
 8016bd2:	f1b8 0f00 	cmp.w	r8, #0
 8016bd6:	dd9c      	ble.n	8016b12 <__sflush_r+0x1a>
 8016bd8:	6a21      	ldr	r1, [r4, #32]
 8016bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016bdc:	4643      	mov	r3, r8
 8016bde:	463a      	mov	r2, r7
 8016be0:	4628      	mov	r0, r5
 8016be2:	47b0      	blx	r6
 8016be4:	2800      	cmp	r0, #0
 8016be6:	dc06      	bgt.n	8016bf6 <__sflush_r+0xfe>
 8016be8:	89a3      	ldrh	r3, [r4, #12]
 8016bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bee:	81a3      	strh	r3, [r4, #12]
 8016bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bf4:	e78e      	b.n	8016b14 <__sflush_r+0x1c>
 8016bf6:	4407      	add	r7, r0
 8016bf8:	eba8 0800 	sub.w	r8, r8, r0
 8016bfc:	e7e9      	b.n	8016bd2 <__sflush_r+0xda>
 8016bfe:	bf00      	nop
 8016c00:	20400001 	.word	0x20400001

08016c04 <_fflush_r>:
 8016c04:	b538      	push	{r3, r4, r5, lr}
 8016c06:	690b      	ldr	r3, [r1, #16]
 8016c08:	4605      	mov	r5, r0
 8016c0a:	460c      	mov	r4, r1
 8016c0c:	b913      	cbnz	r3, 8016c14 <_fflush_r+0x10>
 8016c0e:	2500      	movs	r5, #0
 8016c10:	4628      	mov	r0, r5
 8016c12:	bd38      	pop	{r3, r4, r5, pc}
 8016c14:	b118      	cbz	r0, 8016c1e <_fflush_r+0x1a>
 8016c16:	6983      	ldr	r3, [r0, #24]
 8016c18:	b90b      	cbnz	r3, 8016c1e <_fflush_r+0x1a>
 8016c1a:	f000 f887 	bl	8016d2c <__sinit>
 8016c1e:	4b14      	ldr	r3, [pc, #80]	; (8016c70 <_fflush_r+0x6c>)
 8016c20:	429c      	cmp	r4, r3
 8016c22:	d11b      	bne.n	8016c5c <_fflush_r+0x58>
 8016c24:	686c      	ldr	r4, [r5, #4]
 8016c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d0ef      	beq.n	8016c0e <_fflush_r+0xa>
 8016c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c30:	07d0      	lsls	r0, r2, #31
 8016c32:	d404      	bmi.n	8016c3e <_fflush_r+0x3a>
 8016c34:	0599      	lsls	r1, r3, #22
 8016c36:	d402      	bmi.n	8016c3e <_fflush_r+0x3a>
 8016c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c3a:	f000 f915 	bl	8016e68 <__retarget_lock_acquire_recursive>
 8016c3e:	4628      	mov	r0, r5
 8016c40:	4621      	mov	r1, r4
 8016c42:	f7ff ff59 	bl	8016af8 <__sflush_r>
 8016c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c48:	07da      	lsls	r2, r3, #31
 8016c4a:	4605      	mov	r5, r0
 8016c4c:	d4e0      	bmi.n	8016c10 <_fflush_r+0xc>
 8016c4e:	89a3      	ldrh	r3, [r4, #12]
 8016c50:	059b      	lsls	r3, r3, #22
 8016c52:	d4dd      	bmi.n	8016c10 <_fflush_r+0xc>
 8016c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c56:	f000 f908 	bl	8016e6a <__retarget_lock_release_recursive>
 8016c5a:	e7d9      	b.n	8016c10 <_fflush_r+0xc>
 8016c5c:	4b05      	ldr	r3, [pc, #20]	; (8016c74 <_fflush_r+0x70>)
 8016c5e:	429c      	cmp	r4, r3
 8016c60:	d101      	bne.n	8016c66 <_fflush_r+0x62>
 8016c62:	68ac      	ldr	r4, [r5, #8]
 8016c64:	e7df      	b.n	8016c26 <_fflush_r+0x22>
 8016c66:	4b04      	ldr	r3, [pc, #16]	; (8016c78 <_fflush_r+0x74>)
 8016c68:	429c      	cmp	r4, r3
 8016c6a:	bf08      	it	eq
 8016c6c:	68ec      	ldreq	r4, [r5, #12]
 8016c6e:	e7da      	b.n	8016c26 <_fflush_r+0x22>
 8016c70:	080174c8 	.word	0x080174c8
 8016c74:	080174e8 	.word	0x080174e8
 8016c78:	080174a8 	.word	0x080174a8

08016c7c <std>:
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	b510      	push	{r4, lr}
 8016c80:	4604      	mov	r4, r0
 8016c82:	e9c0 3300 	strd	r3, r3, [r0]
 8016c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c8a:	6083      	str	r3, [r0, #8]
 8016c8c:	8181      	strh	r1, [r0, #12]
 8016c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8016c90:	81c2      	strh	r2, [r0, #14]
 8016c92:	6183      	str	r3, [r0, #24]
 8016c94:	4619      	mov	r1, r3
 8016c96:	2208      	movs	r2, #8
 8016c98:	305c      	adds	r0, #92	; 0x5c
 8016c9a:	f7ff fcff 	bl	801669c <memset>
 8016c9e:	4b05      	ldr	r3, [pc, #20]	; (8016cb4 <std+0x38>)
 8016ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8016ca2:	4b05      	ldr	r3, [pc, #20]	; (8016cb8 <std+0x3c>)
 8016ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016ca6:	4b05      	ldr	r3, [pc, #20]	; (8016cbc <std+0x40>)
 8016ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016caa:	4b05      	ldr	r3, [pc, #20]	; (8016cc0 <std+0x44>)
 8016cac:	6224      	str	r4, [r4, #32]
 8016cae:	6323      	str	r3, [r4, #48]	; 0x30
 8016cb0:	bd10      	pop	{r4, pc}
 8016cb2:	bf00      	nop
 8016cb4:	08016f51 	.word	0x08016f51
 8016cb8:	08016f73 	.word	0x08016f73
 8016cbc:	08016fab 	.word	0x08016fab
 8016cc0:	08016fcf 	.word	0x08016fcf

08016cc4 <_cleanup_r>:
 8016cc4:	4901      	ldr	r1, [pc, #4]	; (8016ccc <_cleanup_r+0x8>)
 8016cc6:	f000 b8af 	b.w	8016e28 <_fwalk_reent>
 8016cca:	bf00      	nop
 8016ccc:	08016c05 	.word	0x08016c05

08016cd0 <__sfmoreglue>:
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	2268      	movs	r2, #104	; 0x68
 8016cd4:	1e4d      	subs	r5, r1, #1
 8016cd6:	4355      	muls	r5, r2
 8016cd8:	460e      	mov	r6, r1
 8016cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016cde:	f7ff fd51 	bl	8016784 <_malloc_r>
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	b140      	cbz	r0, 8016cf8 <__sfmoreglue+0x28>
 8016ce6:	2100      	movs	r1, #0
 8016ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8016cec:	300c      	adds	r0, #12
 8016cee:	60a0      	str	r0, [r4, #8]
 8016cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016cf4:	f7ff fcd2 	bl	801669c <memset>
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	bd70      	pop	{r4, r5, r6, pc}

08016cfc <__sfp_lock_acquire>:
 8016cfc:	4801      	ldr	r0, [pc, #4]	; (8016d04 <__sfp_lock_acquire+0x8>)
 8016cfe:	f000 b8b3 	b.w	8016e68 <__retarget_lock_acquire_recursive>
 8016d02:	bf00      	nop
 8016d04:	24005a65 	.word	0x24005a65

08016d08 <__sfp_lock_release>:
 8016d08:	4801      	ldr	r0, [pc, #4]	; (8016d10 <__sfp_lock_release+0x8>)
 8016d0a:	f000 b8ae 	b.w	8016e6a <__retarget_lock_release_recursive>
 8016d0e:	bf00      	nop
 8016d10:	24005a65 	.word	0x24005a65

08016d14 <__sinit_lock_acquire>:
 8016d14:	4801      	ldr	r0, [pc, #4]	; (8016d1c <__sinit_lock_acquire+0x8>)
 8016d16:	f000 b8a7 	b.w	8016e68 <__retarget_lock_acquire_recursive>
 8016d1a:	bf00      	nop
 8016d1c:	24005a66 	.word	0x24005a66

08016d20 <__sinit_lock_release>:
 8016d20:	4801      	ldr	r0, [pc, #4]	; (8016d28 <__sinit_lock_release+0x8>)
 8016d22:	f000 b8a2 	b.w	8016e6a <__retarget_lock_release_recursive>
 8016d26:	bf00      	nop
 8016d28:	24005a66 	.word	0x24005a66

08016d2c <__sinit>:
 8016d2c:	b510      	push	{r4, lr}
 8016d2e:	4604      	mov	r4, r0
 8016d30:	f7ff fff0 	bl	8016d14 <__sinit_lock_acquire>
 8016d34:	69a3      	ldr	r3, [r4, #24]
 8016d36:	b11b      	cbz	r3, 8016d40 <__sinit+0x14>
 8016d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d3c:	f7ff bff0 	b.w	8016d20 <__sinit_lock_release>
 8016d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d44:	6523      	str	r3, [r4, #80]	; 0x50
 8016d46:	4b13      	ldr	r3, [pc, #76]	; (8016d94 <__sinit+0x68>)
 8016d48:	4a13      	ldr	r2, [pc, #76]	; (8016d98 <__sinit+0x6c>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016d4e:	42a3      	cmp	r3, r4
 8016d50:	bf04      	itt	eq
 8016d52:	2301      	moveq	r3, #1
 8016d54:	61a3      	streq	r3, [r4, #24]
 8016d56:	4620      	mov	r0, r4
 8016d58:	f000 f820 	bl	8016d9c <__sfp>
 8016d5c:	6060      	str	r0, [r4, #4]
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f000 f81c 	bl	8016d9c <__sfp>
 8016d64:	60a0      	str	r0, [r4, #8]
 8016d66:	4620      	mov	r0, r4
 8016d68:	f000 f818 	bl	8016d9c <__sfp>
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	60e0      	str	r0, [r4, #12]
 8016d70:	2104      	movs	r1, #4
 8016d72:	6860      	ldr	r0, [r4, #4]
 8016d74:	f7ff ff82 	bl	8016c7c <std>
 8016d78:	68a0      	ldr	r0, [r4, #8]
 8016d7a:	2201      	movs	r2, #1
 8016d7c:	2109      	movs	r1, #9
 8016d7e:	f7ff ff7d 	bl	8016c7c <std>
 8016d82:	68e0      	ldr	r0, [r4, #12]
 8016d84:	2202      	movs	r2, #2
 8016d86:	2112      	movs	r1, #18
 8016d88:	f7ff ff78 	bl	8016c7c <std>
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	61a3      	str	r3, [r4, #24]
 8016d90:	e7d2      	b.n	8016d38 <__sinit+0xc>
 8016d92:	bf00      	nop
 8016d94:	080174a4 	.word	0x080174a4
 8016d98:	08016cc5 	.word	0x08016cc5

08016d9c <__sfp>:
 8016d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d9e:	4607      	mov	r7, r0
 8016da0:	f7ff ffac 	bl	8016cfc <__sfp_lock_acquire>
 8016da4:	4b1e      	ldr	r3, [pc, #120]	; (8016e20 <__sfp+0x84>)
 8016da6:	681e      	ldr	r6, [r3, #0]
 8016da8:	69b3      	ldr	r3, [r6, #24]
 8016daa:	b913      	cbnz	r3, 8016db2 <__sfp+0x16>
 8016dac:	4630      	mov	r0, r6
 8016dae:	f7ff ffbd 	bl	8016d2c <__sinit>
 8016db2:	3648      	adds	r6, #72	; 0x48
 8016db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016db8:	3b01      	subs	r3, #1
 8016dba:	d503      	bpl.n	8016dc4 <__sfp+0x28>
 8016dbc:	6833      	ldr	r3, [r6, #0]
 8016dbe:	b30b      	cbz	r3, 8016e04 <__sfp+0x68>
 8016dc0:	6836      	ldr	r6, [r6, #0]
 8016dc2:	e7f7      	b.n	8016db4 <__sfp+0x18>
 8016dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016dc8:	b9d5      	cbnz	r5, 8016e00 <__sfp+0x64>
 8016dca:	4b16      	ldr	r3, [pc, #88]	; (8016e24 <__sfp+0x88>)
 8016dcc:	60e3      	str	r3, [r4, #12]
 8016dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8016dd4:	f000 f847 	bl	8016e66 <__retarget_lock_init_recursive>
 8016dd8:	f7ff ff96 	bl	8016d08 <__sfp_lock_release>
 8016ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016de4:	6025      	str	r5, [r4, #0]
 8016de6:	61a5      	str	r5, [r4, #24]
 8016de8:	2208      	movs	r2, #8
 8016dea:	4629      	mov	r1, r5
 8016dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016df0:	f7ff fc54 	bl	801669c <memset>
 8016df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e00:	3468      	adds	r4, #104	; 0x68
 8016e02:	e7d9      	b.n	8016db8 <__sfp+0x1c>
 8016e04:	2104      	movs	r1, #4
 8016e06:	4638      	mov	r0, r7
 8016e08:	f7ff ff62 	bl	8016cd0 <__sfmoreglue>
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	6030      	str	r0, [r6, #0]
 8016e10:	2800      	cmp	r0, #0
 8016e12:	d1d5      	bne.n	8016dc0 <__sfp+0x24>
 8016e14:	f7ff ff78 	bl	8016d08 <__sfp_lock_release>
 8016e18:	230c      	movs	r3, #12
 8016e1a:	603b      	str	r3, [r7, #0]
 8016e1c:	e7ee      	b.n	8016dfc <__sfp+0x60>
 8016e1e:	bf00      	nop
 8016e20:	080174a4 	.word	0x080174a4
 8016e24:	ffff0001 	.word	0xffff0001

08016e28 <_fwalk_reent>:
 8016e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e2c:	4606      	mov	r6, r0
 8016e2e:	4688      	mov	r8, r1
 8016e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e34:	2700      	movs	r7, #0
 8016e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8016e3e:	d505      	bpl.n	8016e4c <_fwalk_reent+0x24>
 8016e40:	6824      	ldr	r4, [r4, #0]
 8016e42:	2c00      	cmp	r4, #0
 8016e44:	d1f7      	bne.n	8016e36 <_fwalk_reent+0xe>
 8016e46:	4638      	mov	r0, r7
 8016e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e4c:	89ab      	ldrh	r3, [r5, #12]
 8016e4e:	2b01      	cmp	r3, #1
 8016e50:	d907      	bls.n	8016e62 <_fwalk_reent+0x3a>
 8016e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e56:	3301      	adds	r3, #1
 8016e58:	d003      	beq.n	8016e62 <_fwalk_reent+0x3a>
 8016e5a:	4629      	mov	r1, r5
 8016e5c:	4630      	mov	r0, r6
 8016e5e:	47c0      	blx	r8
 8016e60:	4307      	orrs	r7, r0
 8016e62:	3568      	adds	r5, #104	; 0x68
 8016e64:	e7e9      	b.n	8016e3a <_fwalk_reent+0x12>

08016e66 <__retarget_lock_init_recursive>:
 8016e66:	4770      	bx	lr

08016e68 <__retarget_lock_acquire_recursive>:
 8016e68:	4770      	bx	lr

08016e6a <__retarget_lock_release_recursive>:
 8016e6a:	4770      	bx	lr

08016e6c <__swhatbuf_r>:
 8016e6c:	b570      	push	{r4, r5, r6, lr}
 8016e6e:	460e      	mov	r6, r1
 8016e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e74:	2900      	cmp	r1, #0
 8016e76:	b096      	sub	sp, #88	; 0x58
 8016e78:	4614      	mov	r4, r2
 8016e7a:	461d      	mov	r5, r3
 8016e7c:	da08      	bge.n	8016e90 <__swhatbuf_r+0x24>
 8016e7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016e82:	2200      	movs	r2, #0
 8016e84:	602a      	str	r2, [r5, #0]
 8016e86:	061a      	lsls	r2, r3, #24
 8016e88:	d410      	bmi.n	8016eac <__swhatbuf_r+0x40>
 8016e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016e8e:	e00e      	b.n	8016eae <__swhatbuf_r+0x42>
 8016e90:	466a      	mov	r2, sp
 8016e92:	f000 f8c3 	bl	801701c <_fstat_r>
 8016e96:	2800      	cmp	r0, #0
 8016e98:	dbf1      	blt.n	8016e7e <__swhatbuf_r+0x12>
 8016e9a:	9a01      	ldr	r2, [sp, #4]
 8016e9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016ea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016ea4:	425a      	negs	r2, r3
 8016ea6:	415a      	adcs	r2, r3
 8016ea8:	602a      	str	r2, [r5, #0]
 8016eaa:	e7ee      	b.n	8016e8a <__swhatbuf_r+0x1e>
 8016eac:	2340      	movs	r3, #64	; 0x40
 8016eae:	2000      	movs	r0, #0
 8016eb0:	6023      	str	r3, [r4, #0]
 8016eb2:	b016      	add	sp, #88	; 0x58
 8016eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016eb8 <__smakebuf_r>:
 8016eb8:	898b      	ldrh	r3, [r1, #12]
 8016eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ebc:	079d      	lsls	r5, r3, #30
 8016ebe:	4606      	mov	r6, r0
 8016ec0:	460c      	mov	r4, r1
 8016ec2:	d507      	bpl.n	8016ed4 <__smakebuf_r+0x1c>
 8016ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ec8:	6023      	str	r3, [r4, #0]
 8016eca:	6123      	str	r3, [r4, #16]
 8016ecc:	2301      	movs	r3, #1
 8016ece:	6163      	str	r3, [r4, #20]
 8016ed0:	b002      	add	sp, #8
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	ab01      	add	r3, sp, #4
 8016ed6:	466a      	mov	r2, sp
 8016ed8:	f7ff ffc8 	bl	8016e6c <__swhatbuf_r>
 8016edc:	9900      	ldr	r1, [sp, #0]
 8016ede:	4605      	mov	r5, r0
 8016ee0:	4630      	mov	r0, r6
 8016ee2:	f7ff fc4f 	bl	8016784 <_malloc_r>
 8016ee6:	b948      	cbnz	r0, 8016efc <__smakebuf_r+0x44>
 8016ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016eec:	059a      	lsls	r2, r3, #22
 8016eee:	d4ef      	bmi.n	8016ed0 <__smakebuf_r+0x18>
 8016ef0:	f023 0303 	bic.w	r3, r3, #3
 8016ef4:	f043 0302 	orr.w	r3, r3, #2
 8016ef8:	81a3      	strh	r3, [r4, #12]
 8016efa:	e7e3      	b.n	8016ec4 <__smakebuf_r+0xc>
 8016efc:	4b0d      	ldr	r3, [pc, #52]	; (8016f34 <__smakebuf_r+0x7c>)
 8016efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	6020      	str	r0, [r4, #0]
 8016f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f08:	81a3      	strh	r3, [r4, #12]
 8016f0a:	9b00      	ldr	r3, [sp, #0]
 8016f0c:	6163      	str	r3, [r4, #20]
 8016f0e:	9b01      	ldr	r3, [sp, #4]
 8016f10:	6120      	str	r0, [r4, #16]
 8016f12:	b15b      	cbz	r3, 8016f2c <__smakebuf_r+0x74>
 8016f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f18:	4630      	mov	r0, r6
 8016f1a:	f000 f891 	bl	8017040 <_isatty_r>
 8016f1e:	b128      	cbz	r0, 8016f2c <__smakebuf_r+0x74>
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	f023 0303 	bic.w	r3, r3, #3
 8016f26:	f043 0301 	orr.w	r3, r3, #1
 8016f2a:	81a3      	strh	r3, [r4, #12]
 8016f2c:	89a0      	ldrh	r0, [r4, #12]
 8016f2e:	4305      	orrs	r5, r0
 8016f30:	81a5      	strh	r5, [r4, #12]
 8016f32:	e7cd      	b.n	8016ed0 <__smakebuf_r+0x18>
 8016f34:	08016cc5 	.word	0x08016cc5

08016f38 <__malloc_lock>:
 8016f38:	4801      	ldr	r0, [pc, #4]	; (8016f40 <__malloc_lock+0x8>)
 8016f3a:	f7ff bf95 	b.w	8016e68 <__retarget_lock_acquire_recursive>
 8016f3e:	bf00      	nop
 8016f40:	24005a64 	.word	0x24005a64

08016f44 <__malloc_unlock>:
 8016f44:	4801      	ldr	r0, [pc, #4]	; (8016f4c <__malloc_unlock+0x8>)
 8016f46:	f7ff bf90 	b.w	8016e6a <__retarget_lock_release_recursive>
 8016f4a:	bf00      	nop
 8016f4c:	24005a64 	.word	0x24005a64

08016f50 <__sread>:
 8016f50:	b510      	push	{r4, lr}
 8016f52:	460c      	mov	r4, r1
 8016f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f58:	f000 f894 	bl	8017084 <_read_r>
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	bfab      	itete	ge
 8016f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f62:	89a3      	ldrhlt	r3, [r4, #12]
 8016f64:	181b      	addge	r3, r3, r0
 8016f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f6a:	bfac      	ite	ge
 8016f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f6e:	81a3      	strhlt	r3, [r4, #12]
 8016f70:	bd10      	pop	{r4, pc}

08016f72 <__swrite>:
 8016f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f76:	461f      	mov	r7, r3
 8016f78:	898b      	ldrh	r3, [r1, #12]
 8016f7a:	05db      	lsls	r3, r3, #23
 8016f7c:	4605      	mov	r5, r0
 8016f7e:	460c      	mov	r4, r1
 8016f80:	4616      	mov	r6, r2
 8016f82:	d505      	bpl.n	8016f90 <__swrite+0x1e>
 8016f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f88:	2302      	movs	r3, #2
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	f000 f868 	bl	8017060 <_lseek_r>
 8016f90:	89a3      	ldrh	r3, [r4, #12]
 8016f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f9a:	81a3      	strh	r3, [r4, #12]
 8016f9c:	4632      	mov	r2, r6
 8016f9e:	463b      	mov	r3, r7
 8016fa0:	4628      	mov	r0, r5
 8016fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa6:	f000 b817 	b.w	8016fd8 <_write_r>

08016faa <__sseek>:
 8016faa:	b510      	push	{r4, lr}
 8016fac:	460c      	mov	r4, r1
 8016fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fb2:	f000 f855 	bl	8017060 <_lseek_r>
 8016fb6:	1c43      	adds	r3, r0, #1
 8016fb8:	89a3      	ldrh	r3, [r4, #12]
 8016fba:	bf15      	itete	ne
 8016fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8016fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016fc6:	81a3      	strheq	r3, [r4, #12]
 8016fc8:	bf18      	it	ne
 8016fca:	81a3      	strhne	r3, [r4, #12]
 8016fcc:	bd10      	pop	{r4, pc}

08016fce <__sclose>:
 8016fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fd2:	f000 b813 	b.w	8016ffc <_close_r>
	...

08016fd8 <_write_r>:
 8016fd8:	b538      	push	{r3, r4, r5, lr}
 8016fda:	4d07      	ldr	r5, [pc, #28]	; (8016ff8 <_write_r+0x20>)
 8016fdc:	4604      	mov	r4, r0
 8016fde:	4608      	mov	r0, r1
 8016fe0:	4611      	mov	r1, r2
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	602a      	str	r2, [r5, #0]
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	f7ec fd01 	bl	80039ee <_write>
 8016fec:	1c43      	adds	r3, r0, #1
 8016fee:	d102      	bne.n	8016ff6 <_write_r+0x1e>
 8016ff0:	682b      	ldr	r3, [r5, #0]
 8016ff2:	b103      	cbz	r3, 8016ff6 <_write_r+0x1e>
 8016ff4:	6023      	str	r3, [r4, #0]
 8016ff6:	bd38      	pop	{r3, r4, r5, pc}
 8016ff8:	24005a68 	.word	0x24005a68

08016ffc <_close_r>:
 8016ffc:	b538      	push	{r3, r4, r5, lr}
 8016ffe:	4d06      	ldr	r5, [pc, #24]	; (8017018 <_close_r+0x1c>)
 8017000:	2300      	movs	r3, #0
 8017002:	4604      	mov	r4, r0
 8017004:	4608      	mov	r0, r1
 8017006:	602b      	str	r3, [r5, #0]
 8017008:	f7ec fd0d 	bl	8003a26 <_close>
 801700c:	1c43      	adds	r3, r0, #1
 801700e:	d102      	bne.n	8017016 <_close_r+0x1a>
 8017010:	682b      	ldr	r3, [r5, #0]
 8017012:	b103      	cbz	r3, 8017016 <_close_r+0x1a>
 8017014:	6023      	str	r3, [r4, #0]
 8017016:	bd38      	pop	{r3, r4, r5, pc}
 8017018:	24005a68 	.word	0x24005a68

0801701c <_fstat_r>:
 801701c:	b538      	push	{r3, r4, r5, lr}
 801701e:	4d07      	ldr	r5, [pc, #28]	; (801703c <_fstat_r+0x20>)
 8017020:	2300      	movs	r3, #0
 8017022:	4604      	mov	r4, r0
 8017024:	4608      	mov	r0, r1
 8017026:	4611      	mov	r1, r2
 8017028:	602b      	str	r3, [r5, #0]
 801702a:	f7ec fd08 	bl	8003a3e <_fstat>
 801702e:	1c43      	adds	r3, r0, #1
 8017030:	d102      	bne.n	8017038 <_fstat_r+0x1c>
 8017032:	682b      	ldr	r3, [r5, #0]
 8017034:	b103      	cbz	r3, 8017038 <_fstat_r+0x1c>
 8017036:	6023      	str	r3, [r4, #0]
 8017038:	bd38      	pop	{r3, r4, r5, pc}
 801703a:	bf00      	nop
 801703c:	24005a68 	.word	0x24005a68

08017040 <_isatty_r>:
 8017040:	b538      	push	{r3, r4, r5, lr}
 8017042:	4d06      	ldr	r5, [pc, #24]	; (801705c <_isatty_r+0x1c>)
 8017044:	2300      	movs	r3, #0
 8017046:	4604      	mov	r4, r0
 8017048:	4608      	mov	r0, r1
 801704a:	602b      	str	r3, [r5, #0]
 801704c:	f7ec fd07 	bl	8003a5e <_isatty>
 8017050:	1c43      	adds	r3, r0, #1
 8017052:	d102      	bne.n	801705a <_isatty_r+0x1a>
 8017054:	682b      	ldr	r3, [r5, #0]
 8017056:	b103      	cbz	r3, 801705a <_isatty_r+0x1a>
 8017058:	6023      	str	r3, [r4, #0]
 801705a:	bd38      	pop	{r3, r4, r5, pc}
 801705c:	24005a68 	.word	0x24005a68

08017060 <_lseek_r>:
 8017060:	b538      	push	{r3, r4, r5, lr}
 8017062:	4d07      	ldr	r5, [pc, #28]	; (8017080 <_lseek_r+0x20>)
 8017064:	4604      	mov	r4, r0
 8017066:	4608      	mov	r0, r1
 8017068:	4611      	mov	r1, r2
 801706a:	2200      	movs	r2, #0
 801706c:	602a      	str	r2, [r5, #0]
 801706e:	461a      	mov	r2, r3
 8017070:	f7ec fd00 	bl	8003a74 <_lseek>
 8017074:	1c43      	adds	r3, r0, #1
 8017076:	d102      	bne.n	801707e <_lseek_r+0x1e>
 8017078:	682b      	ldr	r3, [r5, #0]
 801707a:	b103      	cbz	r3, 801707e <_lseek_r+0x1e>
 801707c:	6023      	str	r3, [r4, #0]
 801707e:	bd38      	pop	{r3, r4, r5, pc}
 8017080:	24005a68 	.word	0x24005a68

08017084 <_read_r>:
 8017084:	b538      	push	{r3, r4, r5, lr}
 8017086:	4d07      	ldr	r5, [pc, #28]	; (80170a4 <_read_r+0x20>)
 8017088:	4604      	mov	r4, r0
 801708a:	4608      	mov	r0, r1
 801708c:	4611      	mov	r1, r2
 801708e:	2200      	movs	r2, #0
 8017090:	602a      	str	r2, [r5, #0]
 8017092:	461a      	mov	r2, r3
 8017094:	f7ec fc8e 	bl	80039b4 <_read>
 8017098:	1c43      	adds	r3, r0, #1
 801709a:	d102      	bne.n	80170a2 <_read_r+0x1e>
 801709c:	682b      	ldr	r3, [r5, #0]
 801709e:	b103      	cbz	r3, 80170a2 <_read_r+0x1e>
 80170a0:	6023      	str	r3, [r4, #0]
 80170a2:	bd38      	pop	{r3, r4, r5, pc}
 80170a4:	24005a68 	.word	0x24005a68

080170a8 <_init>:
 80170a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170aa:	bf00      	nop
 80170ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ae:	bc08      	pop	{r3}
 80170b0:	469e      	mov	lr, r3
 80170b2:	4770      	bx	lr

080170b4 <_fini>:
 80170b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170b6:	bf00      	nop
 80170b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ba:	bc08      	pop	{r3}
 80170bc:	469e      	mov	lr, r3
 80170be:	4770      	bx	lr
